
web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174bc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003194  080176bc  080176bc  000276bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a850  0801a850  000301bc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a850  0801a850  0002a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a858  0801a858  000301bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a858  0801a858  0002a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a85c  0801a85c  0002a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0801a860  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000007c  0801a8dc  0003007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000011c  0801a97c  0003011c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000df58  200001bc  0801aa1c  000301bc  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000e114  0801aa1c  0003e114  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301bc  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301ea  2**0
                  CONTENTS, READONLY
 15 .debug_info   00035daf  00000000  00000000  0003022d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008359  00000000  00000000  00065fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000026b0  00000000  00000000  0006e338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001e64  00000000  00000000  000709e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00014976  00000000  00000000  0007284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b5d9  00000000  00000000  000871c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011fc7e  00000000  00000000  000c279b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000a85c  00000000  00000000  001e241c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000077  00000000  00000000  001ecc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001bc 	.word	0x200001bc
 800021c:	00000000 	.word	0x00000000
 8000220:	080176a4 	.word	0x080176a4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c0 	.word	0x200001c0
 800023c:	080176a4 	.word	0x080176a4

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001d8 	.word	0x200001d8
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b970 	b.w	8000678 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	460d      	mov	r5, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	460f      	mov	r7, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4694      	mov	ip, r2
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0xe2>
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	b143      	cbz	r3, 80003de <__udivmoddi4+0x2e>
 80003cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003d0:	f1c3 0220 	rsb	r2, r3, #32
 80003d4:	409f      	lsls	r7, r3
 80003d6:	fa20 f202 	lsr.w	r2, r0, r2
 80003da:	4317      	orrs	r7, r2
 80003dc:	409c      	lsls	r4, r3
 80003de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003e2:	fa1f f58c 	uxth.w	r5, ip
 80003e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003ea:	0c22      	lsrs	r2, r4, #16
 80003ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80003f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003f4:	fb01 f005 	mul.w	r0, r1, r5
 80003f8:	4290      	cmp	r0, r2
 80003fa:	d90a      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000400:	f101 37ff 	add.w	r7, r1, #4294967295
 8000404:	f080 811c 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000408:	4290      	cmp	r0, r2
 800040a:	f240 8119 	bls.w	8000640 <__udivmoddi4+0x290>
 800040e:	3902      	subs	r1, #2
 8000410:	4462      	add	r2, ip
 8000412:	1a12      	subs	r2, r2, r0
 8000414:	b2a4      	uxth	r4, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000422:	fb00 f505 	mul.w	r5, r0, r5
 8000426:	42a5      	cmp	r5, r4
 8000428:	d90a      	bls.n	8000440 <__udivmoddi4+0x90>
 800042a:	eb1c 0404 	adds.w	r4, ip, r4
 800042e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000432:	f080 8107 	bcs.w	8000644 <__udivmoddi4+0x294>
 8000436:	42a5      	cmp	r5, r4
 8000438:	f240 8104 	bls.w	8000644 <__udivmoddi4+0x294>
 800043c:	4464      	add	r4, ip
 800043e:	3802      	subs	r0, #2
 8000440:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	2100      	movs	r1, #0
 8000448:	b11e      	cbz	r6, 8000452 <__udivmoddi4+0xa2>
 800044a:	40dc      	lsrs	r4, r3
 800044c:	2300      	movs	r3, #0
 800044e:	e9c6 4300 	strd	r4, r3, [r6]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0xbc>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80ed 	beq.w	800063a <__udivmoddi4+0x28a>
 8000460:	2100      	movs	r1, #0
 8000462:	e9c6 0500 	strd	r0, r5, [r6]
 8000466:	4608      	mov	r0, r1
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	fab3 f183 	clz	r1, r3
 8000470:	2900      	cmp	r1, #0
 8000472:	d149      	bne.n	8000508 <__udivmoddi4+0x158>
 8000474:	42ab      	cmp	r3, r5
 8000476:	d302      	bcc.n	800047e <__udivmoddi4+0xce>
 8000478:	4282      	cmp	r2, r0
 800047a:	f200 80f8 	bhi.w	800066e <__udivmoddi4+0x2be>
 800047e:	1a84      	subs	r4, r0, r2
 8000480:	eb65 0203 	sbc.w	r2, r5, r3
 8000484:	2001      	movs	r0, #1
 8000486:	4617      	mov	r7, r2
 8000488:	2e00      	cmp	r6, #0
 800048a:	d0e2      	beq.n	8000452 <__udivmoddi4+0xa2>
 800048c:	e9c6 4700 	strd	r4, r7, [r6]
 8000490:	e7df      	b.n	8000452 <__udivmoddi4+0xa2>
 8000492:	b902      	cbnz	r2, 8000496 <__udivmoddi4+0xe6>
 8000494:	deff      	udf	#255	; 0xff
 8000496:	fab2 f382 	clz	r3, r2
 800049a:	2b00      	cmp	r3, #0
 800049c:	f040 8090 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a0:	1a8a      	subs	r2, r1, r2
 80004a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a6:	fa1f fe8c 	uxth.w	lr, ip
 80004aa:	2101      	movs	r1, #1
 80004ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80004b0:	fb07 2015 	mls	r0, r7, r5, r2
 80004b4:	0c22      	lsrs	r2, r4, #16
 80004b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ba:	fb0e f005 	mul.w	r0, lr, r5
 80004be:	4290      	cmp	r0, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c2:	eb1c 0202 	adds.w	r2, ip, r2
 80004c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4290      	cmp	r0, r2
 80004ce:	f200 80cb 	bhi.w	8000668 <__udivmoddi4+0x2b8>
 80004d2:	4645      	mov	r5, r8
 80004d4:	1a12      	subs	r2, r2, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004dc:	fb07 2210 	mls	r2, r7, r0, r2
 80004e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004e4:	fb0e fe00 	mul.w	lr, lr, r0
 80004e8:	45a6      	cmp	lr, r4
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x14e>
 80004ec:	eb1c 0404 	adds.w	r4, ip, r4
 80004f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x14c>
 80004f6:	45a6      	cmp	lr, r4
 80004f8:	f200 80bb 	bhi.w	8000672 <__udivmoddi4+0x2c2>
 80004fc:	4610      	mov	r0, r2
 80004fe:	eba4 040e 	sub.w	r4, r4, lr
 8000502:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000506:	e79f      	b.n	8000448 <__udivmoddi4+0x98>
 8000508:	f1c1 0720 	rsb	r7, r1, #32
 800050c:	408b      	lsls	r3, r1
 800050e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000512:	ea4c 0c03 	orr.w	ip, ip, r3
 8000516:	fa05 f401 	lsl.w	r4, r5, r1
 800051a:	fa20 f307 	lsr.w	r3, r0, r7
 800051e:	40fd      	lsrs	r5, r7
 8000520:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000524:	4323      	orrs	r3, r4
 8000526:	fbb5 f8f9 	udiv	r8, r5, r9
 800052a:	fa1f fe8c 	uxth.w	lr, ip
 800052e:	fb09 5518 	mls	r5, r9, r8, r5
 8000532:	0c1c      	lsrs	r4, r3, #16
 8000534:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000538:	fb08 f50e 	mul.w	r5, r8, lr
 800053c:	42a5      	cmp	r5, r4
 800053e:	fa02 f201 	lsl.w	r2, r2, r1
 8000542:	fa00 f001 	lsl.w	r0, r0, r1
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000550:	f080 8088 	bcs.w	8000664 <__udivmoddi4+0x2b4>
 8000554:	42a5      	cmp	r5, r4
 8000556:	f240 8085 	bls.w	8000664 <__udivmoddi4+0x2b4>
 800055a:	f1a8 0802 	sub.w	r8, r8, #2
 800055e:	4464      	add	r4, ip
 8000560:	1b64      	subs	r4, r4, r5
 8000562:	b29d      	uxth	r5, r3
 8000564:	fbb4 f3f9 	udiv	r3, r4, r9
 8000568:	fb09 4413 	mls	r4, r9, r3, r4
 800056c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000570:	fb03 fe0e 	mul.w	lr, r3, lr
 8000574:	45a6      	cmp	lr, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000580:	d26c      	bcs.n	800065c <__udivmoddi4+0x2ac>
 8000582:	45a6      	cmp	lr, r4
 8000584:	d96a      	bls.n	800065c <__udivmoddi4+0x2ac>
 8000586:	3b02      	subs	r3, #2
 8000588:	4464      	add	r4, ip
 800058a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800058e:	fba3 9502 	umull	r9, r5, r3, r2
 8000592:	eba4 040e 	sub.w	r4, r4, lr
 8000596:	42ac      	cmp	r4, r5
 8000598:	46c8      	mov	r8, r9
 800059a:	46ae      	mov	lr, r5
 800059c:	d356      	bcc.n	800064c <__udivmoddi4+0x29c>
 800059e:	d053      	beq.n	8000648 <__udivmoddi4+0x298>
 80005a0:	b156      	cbz	r6, 80005b8 <__udivmoddi4+0x208>
 80005a2:	ebb0 0208 	subs.w	r2, r0, r8
 80005a6:	eb64 040e 	sbc.w	r4, r4, lr
 80005aa:	fa04 f707 	lsl.w	r7, r4, r7
 80005ae:	40ca      	lsrs	r2, r1
 80005b0:	40cc      	lsrs	r4, r1
 80005b2:	4317      	orrs	r7, r2
 80005b4:	e9c6 7400 	strd	r7, r4, [r6]
 80005b8:	4618      	mov	r0, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005c0:	f1c3 0120 	rsb	r1, r3, #32
 80005c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005c8:	fa20 f201 	lsr.w	r2, r0, r1
 80005cc:	fa25 f101 	lsr.w	r1, r5, r1
 80005d0:	409d      	lsls	r5, r3
 80005d2:	432a      	orrs	r2, r5
 80005d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005d8:	fa1f fe8c 	uxth.w	lr, ip
 80005dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80005e0:	fb07 1510 	mls	r5, r7, r0, r1
 80005e4:	0c11      	lsrs	r1, r2, #16
 80005e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005ea:	fb00 f50e 	mul.w	r5, r0, lr
 80005ee:	428d      	cmp	r5, r1
 80005f0:	fa04 f403 	lsl.w	r4, r4, r3
 80005f4:	d908      	bls.n	8000608 <__udivmoddi4+0x258>
 80005f6:	eb1c 0101 	adds.w	r1, ip, r1
 80005fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80005fe:	d22f      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000600:	428d      	cmp	r5, r1
 8000602:	d92d      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000604:	3802      	subs	r0, #2
 8000606:	4461      	add	r1, ip
 8000608:	1b49      	subs	r1, r1, r5
 800060a:	b292      	uxth	r2, r2
 800060c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000610:	fb07 1115 	mls	r1, r7, r5, r1
 8000614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000618:	fb05 f10e 	mul.w	r1, r5, lr
 800061c:	4291      	cmp	r1, r2
 800061e:	d908      	bls.n	8000632 <__udivmoddi4+0x282>
 8000620:	eb1c 0202 	adds.w	r2, ip, r2
 8000624:	f105 38ff 	add.w	r8, r5, #4294967295
 8000628:	d216      	bcs.n	8000658 <__udivmoddi4+0x2a8>
 800062a:	4291      	cmp	r1, r2
 800062c:	d914      	bls.n	8000658 <__udivmoddi4+0x2a8>
 800062e:	3d02      	subs	r5, #2
 8000630:	4462      	add	r2, ip
 8000632:	1a52      	subs	r2, r2, r1
 8000634:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000638:	e738      	b.n	80004ac <__udivmoddi4+0xfc>
 800063a:	4631      	mov	r1, r6
 800063c:	4630      	mov	r0, r6
 800063e:	e708      	b.n	8000452 <__udivmoddi4+0xa2>
 8000640:	4639      	mov	r1, r7
 8000642:	e6e6      	b.n	8000412 <__udivmoddi4+0x62>
 8000644:	4610      	mov	r0, r2
 8000646:	e6fb      	b.n	8000440 <__udivmoddi4+0x90>
 8000648:	4548      	cmp	r0, r9
 800064a:	d2a9      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 800064c:	ebb9 0802 	subs.w	r8, r9, r2
 8000650:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000654:	3b01      	subs	r3, #1
 8000656:	e7a3      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000658:	4645      	mov	r5, r8
 800065a:	e7ea      	b.n	8000632 <__udivmoddi4+0x282>
 800065c:	462b      	mov	r3, r5
 800065e:	e794      	b.n	800058a <__udivmoddi4+0x1da>
 8000660:	4640      	mov	r0, r8
 8000662:	e7d1      	b.n	8000608 <__udivmoddi4+0x258>
 8000664:	46d0      	mov	r8, sl
 8000666:	e77b      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000668:	3d02      	subs	r5, #2
 800066a:	4462      	add	r2, ip
 800066c:	e732      	b.n	80004d4 <__udivmoddi4+0x124>
 800066e:	4608      	mov	r0, r1
 8000670:	e70a      	b.n	8000488 <__udivmoddi4+0xd8>
 8000672:	4464      	add	r4, ip
 8000674:	3802      	subs	r0, #2
 8000676:	e742      	b.n	80004fe <__udivmoddi4+0x14e>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000682:	4b26      	ldr	r3, [pc, #152]	; (800071c <_DoInit+0xa0>)
 8000684:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000686:	22a8      	movs	r2, #168	; 0xa8
 8000688:	2100      	movs	r1, #0
 800068a:	6838      	ldr	r0, [r7, #0]
 800068c:	f016 f919 	bl	80168c2 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2203      	movs	r2, #3
 8000694:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	2203      	movs	r2, #3
 800069a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <_DoInit+0xa4>)
 80006a0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <_DoInit+0xa8>)
 80006a6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ae:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	2200      	movs	r2, #0
 80006b4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80006b6:	683b      	ldr	r3, [r7, #0]
 80006b8:	2200      	movs	r2, #0
 80006ba:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	2200      	movs	r2, #0
 80006c0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	4a16      	ldr	r2, [pc, #88]	; (8000720 <_DoInit+0xa4>)
 80006c6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	4a17      	ldr	r2, [pc, #92]	; (8000728 <_DoInit+0xac>)
 80006cc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	2210      	movs	r2, #16
 80006d2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	2200      	movs	r2, #0
 80006d8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	2200      	movs	r2, #0
 80006de:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80006e6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	e00c      	b.n	800070a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	f1c3 030f 	rsb	r3, r3, #15
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <_DoInit+0xb0>)
 80006f8:	5cd1      	ldrb	r1, [r2, r3]
 80006fa:	683a      	ldr	r2, [r7, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	460a      	mov	r2, r1
 8000702:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	3301      	adds	r3, #1
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2b0f      	cmp	r3, #15
 800070e:	d9ef      	bls.n	80006f0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000710:	f3bf 8f5f 	dmb	sy
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	200001d8 	.word	0x200001d8
 8000720:	080176bc 	.word	0x080176bc
 8000724:	20000280 	.word	0x20000280
 8000728:	20000680 	.word	0x20000680
 800072c:	0801a5cc 	.word	0x0801a5cc

08000730 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800074c:	69ba      	ldr	r2, [r7, #24]
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	429a      	cmp	r2, r3
 8000752:	d905      	bls.n	8000760 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	3b01      	subs	r3, #1
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
 800075e:	e007      	b.n	8000770 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	689a      	ldr	r2, [r3, #8]
 8000764:	69b9      	ldr	r1, [r7, #24]
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	1acb      	subs	r3, r1, r3
 800076a:	4413      	add	r3, r2
 800076c:	3b01      	subs	r3, #1
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	689a      	ldr	r2, [r3, #8]
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077a:	4293      	cmp	r3, r2
 800077c:	bf28      	it	cs
 800077e:	4613      	movcs	r3, r2
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8000782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4293      	cmp	r3, r2
 8000788:	bf28      	it	cs
 800078a:	4613      	movcs	r3, r2
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	4413      	add	r3, r2
 8000796:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8000798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800079a:	68b9      	ldr	r1, [r7, #8]
 800079c:	6978      	ldr	r0, [r7, #20]
 800079e:	f016 f94a 	bl	8016a36 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80007a2:	6a3a      	ldr	r2, [r7, #32]
 80007a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007a6:	4413      	add	r3, r2
 80007a8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	4413      	add	r3, r2
 80007b0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80007b2:	687a      	ldr	r2, [r7, #4]
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	1ad3      	subs	r3, r2, r3
 80007b8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80007ba:	69fa      	ldr	r2, [r7, #28]
 80007bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007be:	4413      	add	r3, r2
 80007c0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	69fa      	ldr	r2, [r7, #28]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d101      	bne.n	80007d0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80007d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	69fa      	ldr	r2, [r7, #28]
 80007d8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d1b2      	bne.n	8000746 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80007e0:	6a3b      	ldr	r3, [r7, #32]
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b088      	sub	sp, #32
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	60f8      	str	r0, [r7, #12]
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	689a      	ldr	r2, [r3, #8]
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	1ad3      	subs	r3, r2, r3
 8000804:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8000806:	69ba      	ldr	r2, [r7, #24]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	429a      	cmp	r2, r3
 800080c:	d911      	bls.n	8000832 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	685a      	ldr	r2, [r3, #4]
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	4413      	add	r3, r2
 8000816:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	68b9      	ldr	r1, [r7, #8]
 800081c:	6938      	ldr	r0, [r7, #16]
 800081e:	f016 f90a 	bl	8016a36 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000822:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	441a      	add	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8000830:	e01f      	b.n	8000872 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	685a      	ldr	r2, [r3, #4]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	4413      	add	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	68b9      	ldr	r1, [r7, #8]
 8000844:	6938      	ldr	r0, [r7, #16]
 8000846:	f016 f8f6 	bl	8016a36 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	4413      	add	r3, r2
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	4619      	mov	r1, r3
 8000862:	6938      	ldr	r0, [r7, #16]
 8000864:	f016 f8e7 	bl	8016a36 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000868:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	697a      	ldr	r2, [r7, #20]
 8000870:	60da      	str	r2, [r3, #12]
}
 8000872:	bf00      	nop
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800087a:	b480      	push	{r7}
 800087c:	b087      	sub	sp, #28
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	429a      	cmp	r2, r3
 8000894:	d808      	bhi.n	80008a8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689a      	ldr	r2, [r3, #8]
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	1ad2      	subs	r2, r2, r3
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	4413      	add	r3, r2
 80008a2:	3b01      	subs	r3, #1
 80008a4:	617b      	str	r3, [r7, #20]
 80008a6:	e004      	b.n	80008b2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	3b01      	subs	r3, #1
 80008b0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80008b2:	697b      	ldr	r3, [r7, #20]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	371c      	adds	r7, #28
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08c      	sub	sp, #48	; 0x30
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80008cc:	4b3e      	ldr	r3, [pc, #248]	; (80009c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80008ce:	623b      	str	r3, [r7, #32]
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d101      	bne.n	80008de <SEGGER_RTT_ReadNoLock+0x1e>
 80008da:	f7ff fecf 	bl	800067c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	4613      	mov	r3, r2
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	4413      	add	r3, r2
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	3360      	adds	r3, #96	; 0x60
 80008ea:	4a37      	ldr	r2, [pc, #220]	; (80009c8 <SEGGER_RTT_ReadNoLock+0x108>)
 80008ec:	4413      	add	r3, r2
 80008ee:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	429a      	cmp	r2, r3
 800090a:	d92b      	bls.n	8000964 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	689a      	ldr	r2, [r3, #8]
 8000910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000912:	1ad3      	subs	r3, r2, r3
 8000914:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000916:	697a      	ldr	r2, [r7, #20]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4293      	cmp	r3, r2
 800091c:	bf28      	it	cs
 800091e:	4613      	movcs	r3, r2
 8000920:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000928:	4413      	add	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	6939      	ldr	r1, [r7, #16]
 8000930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000932:	f016 f880 	bl	8016a36 <memcpy>
    NumBytesRead += NumBytesRem;
 8000936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	4413      	add	r3, r2
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800093e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	4413      	add	r3, r2
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800094e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	4413      	add	r3, r2
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800095c:	429a      	cmp	r2, r3
 800095e:	d101      	bne.n	8000964 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000964:	69ba      	ldr	r2, [r7, #24]
 8000966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800096c:	697a      	ldr	r2, [r7, #20]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4293      	cmp	r3, r2
 8000972:	bf28      	it	cs
 8000974:	4613      	movcs	r3, r2
 8000976:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d019      	beq.n	80009b2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000984:	4413      	add	r3, r2
 8000986:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000988:	697a      	ldr	r2, [r7, #20]
 800098a:	6939      	ldr	r1, [r7, #16]
 800098c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800098e:	f016 f852 	bl	8016a36 <memcpy>
    NumBytesRead += NumBytesRem;
 8000992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	4413      	add	r3, r2
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800099a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	4413      	add	r3, r2
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	1ad3      	subs	r3, r2, r3
 80009a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80009aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	4413      	add	r3, r2
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80009b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009bc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80009be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3730      	adds	r7, #48	; 0x30
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	200001d8 	.word	0x200001d8

080009cc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	4a1f      	ldr	r2, [pc, #124]	; (8000a68 <SEGGER_RTT_WriteNoLock+0x9c>)
 80009ea:	4413      	add	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	695b      	ldr	r3, [r3, #20]
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	d029      	beq.n	8000a4a <SEGGER_RTT_WriteNoLock+0x7e>
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d82e      	bhi.n	8000a58 <SEGGER_RTT_WriteNoLock+0x8c>
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <SEGGER_RTT_WriteNoLock+0x38>
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d013      	beq.n	8000a2a <SEGGER_RTT_WriteNoLock+0x5e>
 8000a02:	e029      	b.n	8000a58 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000a04:	6978      	ldr	r0, [r7, #20]
 8000a06:	f7ff ff38 	bl	800087a <_GetAvailWriteSpace>
 8000a0a:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d202      	bcs.n	8000a1a <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8000a18:	e021      	b.n	8000a5e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	69b9      	ldr	r1, [r7, #24]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff fee1 	bl	80007ea <_WriteNoCheck>
    break;
 8000a28:	e019      	b.n	8000a5e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8000a2a:	6978      	ldr	r0, [r7, #20]
 8000a2c:	f7ff ff25 	bl	800087a <_GetAvailWriteSpace>
 8000a30:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	4293      	cmp	r3, r2
 8000a38:	bf28      	it	cs
 8000a3a:	4613      	movcs	r3, r2
 8000a3c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8000a3e:	69fa      	ldr	r2, [r7, #28]
 8000a40:	69b9      	ldr	r1, [r7, #24]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff fed1 	bl	80007ea <_WriteNoCheck>
    break;
 8000a48:	e009      	b.n	8000a5e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8000a4a:	687a      	ldr	r2, [r7, #4]
 8000a4c:	69b9      	ldr	r1, [r7, #24]
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff fe6e 	bl	8000730 <_WriteBlocking>
 8000a54:	61f8      	str	r0, [r7, #28]
    break;
 8000a56:	e002      	b.n	8000a5e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    break;
 8000a5c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8000a5e:	69fb      	ldr	r3, [r7, #28]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001d8 	.word	0x200001d8

08000a6c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <SEGGER_RTT_Write+0x48>)
 8000a7a:	61fb      	str	r3, [r7, #28]
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d101      	bne.n	8000a8a <SEGGER_RTT_Write+0x1e>
 8000a86:	f7ff fdf9 	bl	800067c <_DoInit>
  SEGGER_RTT_LOCK();
 8000a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8000a8e:	f04f 0120 	mov.w	r1, #32
 8000a92:	f381 8811 	msr	BASEPRI, r1
 8000a96:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	68b9      	ldr	r1, [r7, #8]
 8000a9c:	68f8      	ldr	r0, [r7, #12]
 8000a9e:	f7ff ff95 	bl	80009cc <SEGGER_RTT_WriteNoLock>
 8000aa2:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8000aaa:	697b      	ldr	r3, [r7, #20]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3720      	adds	r7, #32
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	200001d8 	.word	0x200001d8

08000ab8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
 8000ac4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8000ac6:	4b3d      	ldr	r3, [pc, #244]	; (8000bbc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000ac8:	61bb      	str	r3, [r7, #24]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <SEGGER_RTT_AllocUpBuffer+0x20>
 8000ad4:	f7ff fdd2 	bl	800067c <_DoInit>
  SEGGER_RTT_LOCK();
 8000ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8000adc:	f04f 0120 	mov.w	r1, #32
 8000ae0:	f381 8811 	msr	BASEPRI, r1
 8000ae4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000ae6:	4b35      	ldr	r3, [pc, #212]	; (8000bbc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8000ae8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8000aee:	6939      	ldr	r1, [r7, #16]
 8000af0:	69fb      	ldr	r3, [r7, #28]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	4613      	mov	r3, r2
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	440b      	add	r3, r1
 8000afe:	3304      	adds	r3, #4
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d008      	beq.n	8000b18 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	69fa      	ldr	r2, [r7, #28]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	dbeb      	blt.n	8000aee <SEGGER_RTT_AllocUpBuffer+0x36>
 8000b16:	e000      	b.n	8000b1a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8000b18:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	da3f      	bge.n	8000ba4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000b24:	6939      	ldr	r1, [r7, #16]
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	1c5a      	adds	r2, r3, #1
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4413      	add	r3, r2
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	440b      	add	r3, r1
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000b38:	6939      	ldr	r1, [r7, #16]
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	4613      	mov	r3, r2
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	4413      	add	r3, r2
 8000b44:	00db      	lsls	r3, r3, #3
 8000b46:	440b      	add	r3, r1
 8000b48:	3304      	adds	r3, #4
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000b4e:	6939      	ldr	r1, [r7, #16]
 8000b50:	69fa      	ldr	r2, [r7, #28]
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	440b      	add	r3, r1
 8000b5c:	3320      	adds	r3, #32
 8000b5e:	687a      	ldr	r2, [r7, #4]
 8000b60:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000b62:	6939      	ldr	r1, [r7, #16]
 8000b64:	69fa      	ldr	r2, [r7, #28]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3328      	adds	r3, #40	; 0x28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000b76:	6939      	ldr	r1, [r7, #16]
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4413      	add	r3, r2
 8000b80:	00db      	lsls	r3, r3, #3
 8000b82:	440b      	add	r3, r1
 8000b84:	3324      	adds	r3, #36	; 0x24
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000b8a:	6939      	ldr	r1, [r7, #16]
 8000b8c:	69fa      	ldr	r2, [r7, #28]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	332c      	adds	r3, #44	; 0x2c
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000b9e:	f3bf 8f5f 	dmb	sy
 8000ba2:	e002      	b.n	8000baa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000bb0:	69fb      	ldr	r3, [r7, #28]
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3720      	adds	r7, #32
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200001d8 	.word	0x200001d8

08000bc0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08a      	sub	sp, #40	; 0x28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8000bce:	4b21      	ldr	r3, [pc, #132]	; (8000c54 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000bd0:	623b      	str	r3, [r7, #32]
 8000bd2:	6a3b      	ldr	r3, [r7, #32]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8000bdc:	f7ff fd4e 	bl	800067c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8000be2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d82c      	bhi.n	8000c44 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8000bea:	f3ef 8311 	mrs	r3, BASEPRI
 8000bee:	f04f 0120 	mov.w	r1, #32
 8000bf2:	f381 8811 	msr	BASEPRI, r1
 8000bf6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8000bf8:	68fa      	ldr	r2, [r7, #12]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	005b      	lsls	r3, r3, #1
 8000bfe:	4413      	add	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	3360      	adds	r3, #96	; 0x60
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	4413      	add	r3, r2
 8000c08:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d00e      	beq.n	8000c2e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c32:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000c34:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	; 0x24
 8000c42:	e002      	b.n	8000c4a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3728      	adds	r7, #40	; 0x28
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200001d8 	.word	0x200001d8

08000c58 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
 8000c64:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8000c66:	683a      	ldr	r2, [r7, #0]
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f7ff fefe 	bl	8000a6c <SEGGER_RTT_Write>
  return len;
 8000c70:	683b      	ldr	r3, [r7, #0]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000c7a:	b480      	push	{r7}
 8000c7c:	b087      	sub	sp, #28
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	60f8      	str	r0, [r7, #12]
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	1c5a      	adds	r2, r3, #1
 8000c8e:	60fa      	str	r2, [r7, #12]
 8000c90:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2b80      	cmp	r3, #128	; 0x80
 8000c96:	d90a      	bls.n	8000cae <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000c9c:	e007      	b.n	8000cae <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	1c53      	adds	r3, r2, #1
 8000ca2:	60bb      	str	r3, [r7, #8]
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1c59      	adds	r1, r3, #1
 8000ca8:	60f9      	str	r1, [r7, #12]
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	1e5a      	subs	r2, r3, #1
 8000cb2:	607a      	str	r2, [r7, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <_EncodeStr+0x46>
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d1ee      	bne.n	8000c9e <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8000cc0:	68ba      	ldr	r2, [r7, #8]
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	371c      	adds	r7, #28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3307      	adds	r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
	...

08000cf4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000cfa:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <_HandleIncomingPacket+0xd8>)
 8000cfc:	7e1b      	ldrb	r3, [r3, #24]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	1cfb      	adds	r3, r7, #3
 8000d02:	2201      	movs	r2, #1
 8000d04:	4619      	mov	r1, r3
 8000d06:	f7ff fddb 	bl	80008c0 <SEGGER_RTT_ReadNoLock>
 8000d0a:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d057      	beq.n	8000dc2 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	2b80      	cmp	r3, #128	; 0x80
 8000d16:	d031      	beq.n	8000d7c <_HandleIncomingPacket+0x88>
 8000d18:	2b80      	cmp	r3, #128	; 0x80
 8000d1a:	dc40      	bgt.n	8000d9e <_HandleIncomingPacket+0xaa>
 8000d1c:	2b07      	cmp	r3, #7
 8000d1e:	dc15      	bgt.n	8000d4c <_HandleIncomingPacket+0x58>
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	dd3c      	ble.n	8000d9e <_HandleIncomingPacket+0xaa>
 8000d24:	3b01      	subs	r3, #1
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d839      	bhi.n	8000d9e <_HandleIncomingPacket+0xaa>
 8000d2a:	a201      	add	r2, pc, #4	; (adr r2, 8000d30 <_HandleIncomingPacket+0x3c>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d53 	.word	0x08000d53
 8000d34:	08000d59 	.word	0x08000d59
 8000d38:	08000d5f 	.word	0x08000d5f
 8000d3c:	08000d65 	.word	0x08000d65
 8000d40:	08000d6b 	.word	0x08000d6b
 8000d44:	08000d71 	.word	0x08000d71
 8000d48:	08000d77 	.word	0x08000d77
 8000d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d4e:	d033      	beq.n	8000db8 <_HandleIncomingPacket+0xc4>
 8000d50:	e025      	b.n	8000d9e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000d52:	f000 fb25 	bl	80013a0 <SEGGER_SYSVIEW_Start>
      break;
 8000d56:	e034      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000d58:	f000 fbdc 	bl	8001514 <SEGGER_SYSVIEW_Stop>
      break;
 8000d5c:	e031      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000d5e:	f000 fdb5 	bl	80018cc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000d62:	e02e      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000d64:	f000 fd7a 	bl	800185c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000d68:	e02b      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000d6a:	f000 fbf9 	bl	8001560 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000d6e:	e028      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000d70:	f000 fe86 	bl	8001a80 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000d74:	e025      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000d76:	f000 fe65 	bl	8001a44 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000d7a:	e022      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <_HandleIncomingPacket+0xd8>)
 8000d7e:	7e1b      	ldrb	r3, [r3, #24]
 8000d80:	4618      	mov	r0, r3
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	2201      	movs	r2, #1
 8000d86:	4619      	mov	r1, r3
 8000d88:	f7ff fd9a 	bl	80008c0 <SEGGER_RTT_ReadNoLock>
 8000d8c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d013      	beq.n	8000dbc <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000d94:	78fb      	ldrb	r3, [r7, #3]
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 fdca 	bl	8001930 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000d9c:	e00e      	b.n	8000dbc <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000d9e:	78fb      	ldrb	r3, [r7, #3]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	da0c      	bge.n	8000dc0 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <_HandleIncomingPacket+0xd8>)
 8000da8:	7e1b      	ldrb	r3, [r3, #24]
 8000daa:	4618      	mov	r0, r3
 8000dac:	1cfb      	adds	r3, r7, #3
 8000dae:	2201      	movs	r2, #1
 8000db0:	4619      	mov	r1, r3
 8000db2:	f7ff fd85 	bl	80008c0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000db6:	e003      	b.n	8000dc0 <_HandleIncomingPacket+0xcc>
      break;
 8000db8:	bf00      	nop
 8000dba:	e002      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
      break;
 8000dbc:	bf00      	nop
 8000dbe:	e000      	b.n	8000dc2 <_HandleIncomingPacket+0xce>
      break;
 8000dc0:	bf00      	nop
    }
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000a98 	.word	0x20000a98

08000dd0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	3301      	adds	r3, #1
 8000dde:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de4:	4b31      	ldr	r3, [pc, #196]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dea:	e00b      	b.n	8000e04 <_TrySendOverflowPacket+0x34>
 8000dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	1c59      	adds	r1, r3, #1
 8000df4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000df6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	701a      	strb	r2, [r3, #0]
 8000dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e00:	09db      	lsrs	r3, r3, #7
 8000e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e06:	2b7f      	cmp	r3, #127	; 0x7f
 8000e08:	d8f0      	bhi.n	8000dec <_TrySendOverflowPacket+0x1c>
 8000e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	701a      	strb	r2, [r3, #0]
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <_TrySendOverflowPacket+0xe0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	623b      	str	r3, [r7, #32]
 8000e32:	e00b      	b.n	8000e4c <_TrySendOverflowPacket+0x7c>
 8000e34:	6a3b      	ldr	r3, [r7, #32]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	1c59      	adds	r1, r3, #1
 8000e3c:	6279      	str	r1, [r7, #36]	; 0x24
 8000e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	701a      	strb	r2, [r3, #0]
 8000e46:	6a3b      	ldr	r3, [r7, #32]
 8000e48:	09db      	lsrs	r3, r3, #7
 8000e4a:	623b      	str	r3, [r7, #32]
 8000e4c:	6a3b      	ldr	r3, [r7, #32]
 8000e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e50:	d8f0      	bhi.n	8000e34 <_TrySendOverflowPacket+0x64>
 8000e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	627a      	str	r2, [r7, #36]	; 0x24
 8000e58:	6a3a      	ldr	r2, [r7, #32]
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e64:	785b      	ldrb	r3, [r3, #1]
 8000e66:	4618      	mov	r0, r3
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	69fa      	ldr	r2, [r7, #28]
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	4619      	mov	r1, r3
 8000e74:	f7ff f9e4 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d009      	beq.n	8000e96 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e92:	701a      	strb	r2, [r3, #0]
 8000e94:	e004      	b.n	8000ea0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a03      	ldr	r2, [pc, #12]	; (8000eac <_TrySendOverflowPacket+0xdc>)
 8000e9e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000ea0:	693b      	ldr	r3, [r7, #16]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3730      	adds	r7, #48	; 0x30
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000a98 	.word	0x20000a98
 8000eb0:	e0001004 	.word	0xe0001004

08000eb4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000ec0:	4b98      	ldr	r3, [pc, #608]	; (8001124 <_SendPacket+0x270>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d010      	beq.n	8000eea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000ec8:	4b96      	ldr	r3, [pc, #600]	; (8001124 <_SendPacket+0x270>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 812d 	beq.w	800112c <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000ed2:	4b94      	ldr	r3, [pc, #592]	; (8001124 <_SendPacket+0x270>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d109      	bne.n	8000eee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000eda:	f7ff ff79 	bl	8000dd0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000ede:	4b91      	ldr	r3, [pc, #580]	; (8001124 <_SendPacket+0x270>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	f040 8124 	bne.w	8001130 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ee8:	e001      	b.n	8000eee <_SendPacket+0x3a>
    goto Send;
 8000eea:	bf00      	nop
 8000eec:	e000      	b.n	8000ef0 <_SendPacket+0x3c>
Send:
 8000eee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2b1f      	cmp	r3, #31
 8000ef4:	d809      	bhi.n	8000f0a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000ef6:	4b8b      	ldr	r3, [pc, #556]	; (8001124 <_SendPacket+0x270>)
 8000ef8:	69da      	ldr	r2, [r3, #28]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	fa22 f303 	lsr.w	r3, r2, r3
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 8115 	bne.w	8001134 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b17      	cmp	r3, #23
 8000f0e:	d807      	bhi.n	8000f20 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	701a      	strb	r2, [r3, #0]
 8000f1e:	e0c4      	b.n	80010aa <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	2b7f      	cmp	r3, #127	; 0x7f
 8000f2c:	d912      	bls.n	8000f54 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	09da      	lsrs	r2, r3, #7
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	3a01      	subs	r2, #1
 8000f46:	60fa      	str	r2, [r7, #12]
 8000f48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e006      	b.n	8000f62 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b7e      	cmp	r3, #126	; 0x7e
 8000f66:	d807      	bhi.n	8000f78 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	701a      	strb	r2, [r3, #0]
 8000f76:	e098      	b.n	80010aa <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f7e:	d212      	bcs.n	8000fa6 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	09da      	lsrs	r2, r3, #7
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	68fa      	ldr	r2, [r7, #12]
 8000f96:	3a01      	subs	r2, #1
 8000f98:	60fa      	str	r2, [r7, #12]
 8000f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	701a      	strb	r2, [r3, #0]
 8000fa4:	e081      	b.n	80010aa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000fac:	d21d      	bcs.n	8000fea <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	0b9a      	lsrs	r2, r3, #14
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	09db      	lsrs	r3, r3, #7
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	3a01      	subs	r2, #1
 8000fc8:	60fa      	str	r2, [r7, #12]
 8000fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	3a01      	subs	r2, #1
 8000fdc:	60fa      	str	r2, [r7, #12]
 8000fde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e05f      	b.n	80010aa <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ff0:	d228      	bcs.n	8001044 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0d5a      	lsrs	r2, r3, #21
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	0b9b      	lsrs	r3, r3, #14
 8001006:	b2db      	uxtb	r3, r3
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	3a01      	subs	r2, #1
 800100c:	60fa      	str	r2, [r7, #12]
 800100e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001012:	b2da      	uxtb	r2, r3
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	09db      	lsrs	r3, r3, #7
 800101c:	b2db      	uxtb	r3, r3
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	3a01      	subs	r2, #1
 8001022:	60fa      	str	r2, [r7, #12]
 8001024:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001028:	b2da      	uxtb	r2, r3
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	3a01      	subs	r2, #1
 8001036:	60fa      	str	r2, [r7, #12]
 8001038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800103c:	b2da      	uxtb	r2, r3
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	701a      	strb	r2, [r3, #0]
 8001042:	e032      	b.n	80010aa <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	0f1a      	lsrs	r2, r3, #28
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	0d5b      	lsrs	r3, r3, #21
 8001058:	b2db      	uxtb	r3, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	3a01      	subs	r2, #1
 800105e:	60fa      	str	r2, [r7, #12]
 8001060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001064:	b2da      	uxtb	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0b9b      	lsrs	r3, r3, #14
 800106e:	b2db      	uxtb	r3, r3
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	3a01      	subs	r2, #1
 8001074:	60fa      	str	r2, [r7, #12]
 8001076:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800107a:	b2da      	uxtb	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	09db      	lsrs	r3, r3, #7
 8001084:	b2db      	uxtb	r3, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	3a01      	subs	r2, #1
 800108a:	60fa      	str	r2, [r7, #12]
 800108c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001090:	b2da      	uxtb	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	3a01      	subs	r2, #1
 800109e:	60fa      	str	r2, [r7, #12]
 80010a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <_SendPacket+0x274>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <_SendPacket+0x270>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	e00b      	b.n	80010dc <_SendPacket+0x228>
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ca:	1c59      	adds	r1, r3, #1
 80010cc:	6279      	str	r1, [r7, #36]	; 0x24
 80010ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010d2:	b2d2      	uxtb	r2, r2
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	09db      	lsrs	r3, r3, #7
 80010da:	623b      	str	r3, [r7, #32]
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	2b7f      	cmp	r3, #127	; 0x7f
 80010e0:	d8f0      	bhi.n	80010c4 <_SendPacket+0x210>
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	1c5a      	adds	r2, r3, #1
 80010e6:	627a      	str	r2, [r7, #36]	; 0x24
 80010e8:	6a3a      	ldr	r2, [r7, #32]
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <_SendPacket+0x270>)
 80010f4:	785b      	ldrb	r3, [r3, #1]
 80010f6:	4618      	mov	r0, r3
 80010f8:	68ba      	ldr	r2, [r7, #8]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	68f9      	ldr	r1, [r7, #12]
 8001102:	f7ff f89d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001106:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_SendPacket+0x270>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	60d3      	str	r3, [r2, #12]
 8001114:	e00f      	b.n	8001136 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001116:	4b03      	ldr	r3, [pc, #12]	; (8001124 <_SendPacket+0x270>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b01      	ldr	r3, [pc, #4]	; (8001124 <_SendPacket+0x270>)
 8001120:	701a      	strb	r2, [r3, #0]
 8001122:	e008      	b.n	8001136 <_SendPacket+0x282>
 8001124:	20000a98 	.word	0x20000a98
 8001128:	e0001004 	.word	0xe0001004
    goto SendDone;
 800112c:	bf00      	nop
 800112e:	e002      	b.n	8001136 <_SendPacket+0x282>
      goto SendDone;
 8001130:	bf00      	nop
 8001132:	e000      	b.n	8001136 <_SendPacket+0x282>
      goto SendDone;
 8001134:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001136:	4b14      	ldr	r3, [pc, #80]	; (8001188 <_SendPacket+0x2d4>)
 8001138:	7e1b      	ldrb	r3, [r3, #24]
 800113a:	4619      	mov	r1, r3
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <_SendPacket+0x2d8>)
 800113e:	460b      	mov	r3, r1
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	440b      	add	r3, r1
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	4413      	add	r3, r2
 8001148:	336c      	adds	r3, #108	; 0x6c
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <_SendPacket+0x2d4>)
 800114e:	7e1b      	ldrb	r3, [r3, #24]
 8001150:	4618      	mov	r0, r3
 8001152:	490e      	ldr	r1, [pc, #56]	; (800118c <_SendPacket+0x2d8>)
 8001154:	4603      	mov	r3, r0
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4403      	add	r3, r0
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	440b      	add	r3, r1
 800115e:	3370      	adds	r3, #112	; 0x70
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d00b      	beq.n	800117e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <_SendPacket+0x2d4>)
 8001168:	789b      	ldrb	r3, [r3, #2]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800116e:	4b06      	ldr	r3, [pc, #24]	; (8001188 <_SendPacket+0x2d4>)
 8001170:	2201      	movs	r2, #1
 8001172:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001174:	f7ff fdbe 	bl	8000cf4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001178:	4b03      	ldr	r3, [pc, #12]	; (8001188 <_SendPacket+0x2d4>)
 800117a:	2200      	movs	r2, #0
 800117c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000a98 	.word	0x20000a98
 800118c:	200001d8 	.word	0x200001d8

08001190 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af02      	add	r7, sp, #8
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
 800119c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800119e:	2300      	movs	r3, #0
 80011a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a4:	4917      	ldr	r1, [pc, #92]	; (8001204 <SEGGER_SYSVIEW_Init+0x74>)
 80011a6:	4818      	ldr	r0, [pc, #96]	; (8001208 <SEGGER_SYSVIEW_Init+0x78>)
 80011a8:	f7ff fc86 	bl	8000ab8 <SEGGER_RTT_AllocUpBuffer>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011b2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011b6:	785a      	ldrb	r2, [r3, #1]
 80011b8:	4b14      	ldr	r3, [pc, #80]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011ba:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011be:	7e1b      	ldrb	r3, [r3, #24]
 80011c0:	4618      	mov	r0, r3
 80011c2:	2300      	movs	r3, #0
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2308      	movs	r3, #8
 80011c8:	4a11      	ldr	r2, [pc, #68]	; (8001210 <SEGGER_SYSVIEW_Init+0x80>)
 80011ca:	490f      	ldr	r1, [pc, #60]	; (8001208 <SEGGER_SYSVIEW_Init+0x78>)
 80011cc:	f7ff fcf8 	bl	8000bc0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <SEGGER_SYSVIEW_Init+0x84>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a0c      	ldr	r2, [pc, #48]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011dc:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80011e4:	4a09      	ldr	r2, [pc, #36]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80011f0:	4a06      	ldr	r2, [pc, #24]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <SEGGER_SYSVIEW_Init+0x7c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80011fc:	bf00      	nop
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	20000690 	.word	0x20000690
 8001208:	080176d0 	.word	0x080176d0
 800120c:	20000a98 	.word	0x20000a98
 8001210:	20000a90 	.word	0x20000a90
 8001214:	e0001004 	.word	0xe0001004

08001218 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6113      	str	r3, [r2, #16]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	20000a98 	.word	0x20000a98

08001238 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001240:	f3ef 8311 	mrs	r3, BASEPRI
 8001244:	f04f 0120 	mov.w	r1, #32
 8001248:	f381 8811 	msr	BASEPRI, r1
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001250:	f7ff fd43 	bl	8000cda <_PreparePacket>
 8001254:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	68b8      	ldr	r0, [r7, #8]
 800125c:	f7ff fe2a 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f383 8811 	msr	BASEPRI, r3
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000ac8 	.word	0x20000ac8

08001274 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b088      	sub	sp, #32
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800127e:	f3ef 8311 	mrs	r3, BASEPRI
 8001282:	f04f 0120 	mov.w	r1, #32
 8001286:	f381 8811 	msr	BASEPRI, r1
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	4816      	ldr	r0, [pc, #88]	; (80012e8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800128e:	f7ff fd24 	bl	8000cda <_PreparePacket>
 8001292:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	61fb      	str	r3, [r7, #28]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	61bb      	str	r3, [r7, #24]
 80012a0:	e00b      	b.n	80012ba <SEGGER_SYSVIEW_RecordU32+0x46>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	1c59      	adds	r1, r3, #1
 80012aa:	61f9      	str	r1, [r7, #28]
 80012ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b0:	b2d2      	uxtb	r2, r2
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	09db      	lsrs	r3, r3, #7
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b7f      	cmp	r3, #127	; 0x7f
 80012be:	d8f0      	bhi.n	80012a2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	61fa      	str	r2, [r7, #28]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	b2d2      	uxtb	r2, r2
 80012ca:	701a      	strb	r2, [r3, #0]
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	68f9      	ldr	r1, [r7, #12]
 80012d4:	6938      	ldr	r0, [r7, #16]
 80012d6:	f7ff fded 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	f383 8811 	msr	BASEPRI, r3
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000ac8 	.word	0x20000ac8

080012ec <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08c      	sub	sp, #48	; 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80012f8:	f3ef 8311 	mrs	r3, BASEPRI
 80012fc:	f04f 0120 	mov.w	r1, #32
 8001300:	f381 8811 	msr	BASEPRI, r1
 8001304:	61fb      	str	r3, [r7, #28]
 8001306:	4825      	ldr	r0, [pc, #148]	; (800139c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001308:	f7ff fce7 	bl	8000cda <_PreparePacket>
 800130c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
 800131a:	e00b      	b.n	8001334 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	b2da      	uxtb	r2, r3
 8001320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001322:	1c59      	adds	r1, r3, #1
 8001324:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001326:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	09db      	lsrs	r3, r3, #7
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
 8001334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001336:	2b7f      	cmp	r3, #127	; 0x7f
 8001338:	d8f0      	bhi.n	800131c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800133a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001340:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001348:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	e00b      	b.n	800136c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	b2da      	uxtb	r2, r3
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	1c59      	adds	r1, r3, #1
 800135c:	6279      	str	r1, [r7, #36]	; 0x24
 800135e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	09db      	lsrs	r3, r3, #7
 800136a:	623b      	str	r3, [r7, #32]
 800136c:	6a3b      	ldr	r3, [r7, #32]
 800136e:	2b7f      	cmp	r3, #127	; 0x7f
 8001370:	d8f0      	bhi.n	8001354 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	1c5a      	adds	r2, r3, #1
 8001376:	627a      	str	r2, [r7, #36]	; 0x24
 8001378:	6a3a      	ldr	r2, [r7, #32]
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	701a      	strb	r2, [r3, #0]
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	6979      	ldr	r1, [r7, #20]
 8001386:	69b8      	ldr	r0, [r7, #24]
 8001388:	f7ff fd94 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f383 8811 	msr	BASEPRI, r3
}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	; 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000ac8 	.word	0x20000ac8

080013a0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08c      	sub	sp, #48	; 0x30
 80013a4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80013a6:	4b58      	ldr	r3, [pc, #352]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80013ac:	f3ef 8311 	mrs	r3, BASEPRI
 80013b0:	f04f 0120 	mov.w	r1, #32
 80013b4:	f381 8811 	msr	BASEPRI, r1
 80013b8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80013ba:	4b53      	ldr	r3, [pc, #332]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	220a      	movs	r2, #10
 80013c0:	4952      	ldr	r1, [pc, #328]	; (800150c <SEGGER_SYSVIEW_Start+0x16c>)
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7fe ff3c 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80013ce:	200a      	movs	r0, #10
 80013d0:	f7ff ff32 	bl	8001238 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013d4:	f3ef 8311 	mrs	r3, BASEPRI
 80013d8:	f04f 0120 	mov.w	r1, #32
 80013dc:	f381 8811 	msr	BASEPRI, r1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	484b      	ldr	r0, [pc, #300]	; (8001510 <SEGGER_SYSVIEW_Start+0x170>)
 80013e4:	f7ff fc79 	bl	8000cda <_PreparePacket>
 80013e8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013f2:	4b45      	ldr	r3, [pc, #276]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80013f8:	e00b      	b.n	8001412 <SEGGER_SYSVIEW_Start+0x72>
 80013fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001400:	1c59      	adds	r1, r3, #1
 8001402:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001404:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140e:	09db      	lsrs	r3, r3, #7
 8001410:	62bb      	str	r3, [r7, #40]	; 0x28
 8001412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001414:	2b7f      	cmp	r3, #127	; 0x7f
 8001416:	d8f0      	bhi.n	80013fa <SEGGER_SYSVIEW_Start+0x5a>
 8001418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800141a:	1c5a      	adds	r2, r3, #1
 800141c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800141e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	701a      	strb	r2, [r3, #0]
 8001424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001426:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
 800142c:	4b36      	ldr	r3, [pc, #216]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	623b      	str	r3, [r7, #32]
 8001432:	e00b      	b.n	800144c <SEGGER_SYSVIEW_Start+0xac>
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	b2da      	uxtb	r2, r3
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	1c59      	adds	r1, r3, #1
 800143c:	6279      	str	r1, [r7, #36]	; 0x24
 800143e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	09db      	lsrs	r3, r3, #7
 800144a:	623b      	str	r3, [r7, #32]
 800144c:	6a3b      	ldr	r3, [r7, #32]
 800144e:	2b7f      	cmp	r3, #127	; 0x7f
 8001450:	d8f0      	bhi.n	8001434 <SEGGER_SYSVIEW_Start+0x94>
 8001452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001454:	1c5a      	adds	r2, r3, #1
 8001456:	627a      	str	r2, [r7, #36]	; 0x24
 8001458:	6a3a      	ldr	r2, [r7, #32]
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	61fb      	str	r3, [r7, #28]
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	61bb      	str	r3, [r7, #24]
 800146c:	e00b      	b.n	8001486 <SEGGER_SYSVIEW_Start+0xe6>
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	1c59      	adds	r1, r3, #1
 8001476:	61f9      	str	r1, [r7, #28]
 8001478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	09db      	lsrs	r3, r3, #7
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b7f      	cmp	r3, #127	; 0x7f
 800148a:	d8f0      	bhi.n	800146e <SEGGER_SYSVIEW_Start+0xce>
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	1c5a      	adds	r2, r3, #1
 8001490:	61fa      	str	r2, [r7, #28]
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	e00b      	b.n	80014be <SEGGER_SYSVIEW_Start+0x11e>
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	1c59      	adds	r1, r3, #1
 80014ae:	6179      	str	r1, [r7, #20]
 80014b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80014b4:	b2d2      	uxtb	r2, r2
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	09db      	lsrs	r3, r3, #7
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	d8f0      	bhi.n	80014a6 <SEGGER_SYSVIEW_Start+0x106>
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1c5a      	adds	r2, r3, #1
 80014c8:	617a      	str	r2, [r7, #20]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	701a      	strb	r2, [r3, #0]
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014d4:	2218      	movs	r2, #24
 80014d6:	6839      	ldr	r1, [r7, #0]
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fceb 	bl	8000eb4 <_SendPacket>
      RECORD_END();
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SEGGER_SYSVIEW_Start+0x168>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80014f2:	f000 f9eb 	bl	80018cc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80014f6:	f000 f9b1 	bl	800185c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80014fa:	f000 fac1 	bl	8001a80 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80014fe:	bf00      	nop
 8001500:	3730      	adds	r7, #48	; 0x30
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000a98 	.word	0x20000a98
 800150c:	0801a5e0 	.word	0x0801a5e0
 8001510:	20000ac8 	.word	0x20000ac8

08001514 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800151a:	f3ef 8311 	mrs	r3, BASEPRI
 800151e:	f04f 0120 	mov.w	r1, #32
 8001522:	f381 8811 	msr	BASEPRI, r1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	480b      	ldr	r0, [pc, #44]	; (8001558 <SEGGER_SYSVIEW_Stop+0x44>)
 800152a:	f7ff fbd6 	bl	8000cda <_PreparePacket>
 800152e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <SEGGER_SYSVIEW_Stop+0x48>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001538:	220b      	movs	r2, #11
 800153a:	6839      	ldr	r1, [r7, #0]
 800153c:	6838      	ldr	r0, [r7, #0]
 800153e:	f7ff fcb9 	bl	8000eb4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <SEGGER_SYSVIEW_Stop+0x48>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f383 8811 	msr	BASEPRI, r3
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000ac8 	.word	0x20000ac8
 800155c:	20000a98 	.word	0x20000a98

08001560 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b08c      	sub	sp, #48	; 0x30
 8001564:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001566:	f3ef 8311 	mrs	r3, BASEPRI
 800156a:	f04f 0120 	mov.w	r1, #32
 800156e:	f381 8811 	msr	BASEPRI, r1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	4845      	ldr	r0, [pc, #276]	; (800168c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8001576:	f7ff fbb0 	bl	8000cda <_PreparePacket>
 800157a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001584:	4b42      	ldr	r3, [pc, #264]	; (8001690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
 800158a:	e00b      	b.n	80015a4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800158c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800158e:	b2da      	uxtb	r2, r3
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	1c59      	adds	r1, r3, #1
 8001594:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	09db      	lsrs	r3, r3, #7
 80015a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a6:	2b7f      	cmp	r3, #127	; 0x7f
 80015a8:	d8f0      	bhi.n	800158c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80015aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]
 80015b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	e00b      	b.n	80015de <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	1c59      	adds	r1, r3, #1
 80015ce:	6279      	str	r1, [r7, #36]	; 0x24
 80015d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	6a3b      	ldr	r3, [r7, #32]
 80015da:	09db      	lsrs	r3, r3, #7
 80015dc:	623b      	str	r3, [r7, #32]
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	2b7f      	cmp	r3, #127	; 0x7f
 80015e2:	d8f0      	bhi.n	80015c6 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	627a      	str	r2, [r7, #36]	; 0x24
 80015ea:	6a3a      	ldr	r2, [r7, #32]
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	701a      	strb	r2, [r3, #0]
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	61fb      	str	r3, [r7, #28]
 80015f8:	4b25      	ldr	r3, [pc, #148]	; (8001690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	e00b      	b.n	8001618 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	61f9      	str	r1, [r7, #28]
 800160a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	701a      	strb	r2, [r3, #0]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	09db      	lsrs	r3, r3, #7
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2b7f      	cmp	r3, #127	; 0x7f
 800161c:	d8f0      	bhi.n	8001600 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	61fa      	str	r2, [r7, #28]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e00b      	b.n	8001650 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	1c59      	adds	r1, r3, #1
 8001640:	6179      	str	r1, [r7, #20]
 8001642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	09db      	lsrs	r3, r3, #7
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	2b7f      	cmp	r3, #127	; 0x7f
 8001654:	d8f0      	bhi.n	8001638 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	1c5a      	adds	r2, r3, #1
 800165a:	617a      	str	r2, [r7, #20]
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	701a      	strb	r2, [r3, #0]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001666:	2218      	movs	r2, #24
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f7ff fc22 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800167e:	4b04      	ldr	r3, [pc, #16]	; (8001690 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001682:	4798      	blx	r3
  }
}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000ac8 	.word	0x20000ac8
 8001690:	20000a98 	.word	0x20000a98

08001694 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b092      	sub	sp, #72	; 0x48
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800169c:	f3ef 8311 	mrs	r3, BASEPRI
 80016a0:	f04f 0120 	mov.w	r1, #32
 80016a4:	f381 8811 	msr	BASEPRI, r1
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	486a      	ldr	r0, [pc, #424]	; (8001854 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80016ac:	f7ff fb15 	bl	8000cda <_PreparePacket>
 80016b0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	647b      	str	r3, [r7, #68]	; 0x44
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	4b66      	ldr	r3, [pc, #408]	; (8001858 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
 80016c6:	e00b      	b.n	80016e0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80016c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016ce:	1c59      	adds	r1, r3, #1
 80016d0:	6479      	str	r1, [r7, #68]	; 0x44
 80016d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]
 80016da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016dc:	09db      	lsrs	r3, r3, #7
 80016de:	643b      	str	r3, [r7, #64]	; 0x40
 80016e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016e2:	2b7f      	cmp	r3, #127	; 0x7f
 80016e4:	d8f0      	bhi.n	80016c8 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80016e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016e8:	1c5a      	adds	r2, r3, #1
 80016ea:	647a      	str	r2, [r7, #68]	; 0x44
 80016ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80016ee:	b2d2      	uxtb	r2, r2
 80016f0:	701a      	strb	r2, [r3, #0]
 80016f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80016f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001700:	e00b      	b.n	800171a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8001702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001704:	b2da      	uxtb	r2, r3
 8001706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800170c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001710:	b2d2      	uxtb	r2, r2
 8001712:	701a      	strb	r2, [r3, #0]
 8001714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001716:	09db      	lsrs	r3, r3, #7
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
 800171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800171c:	2b7f      	cmp	r3, #127	; 0x7f
 800171e:	d8f0      	bhi.n	8001702 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8001720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800172e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	2220      	movs	r2, #32
 8001736:	4619      	mov	r1, r3
 8001738:	68f8      	ldr	r0, [r7, #12]
 800173a:	f7ff fa9e 	bl	8000c7a <_EncodeStr>
 800173e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8001740:	2209      	movs	r2, #9
 8001742:	68f9      	ldr	r1, [r7, #12]
 8001744:	6938      	ldr	r0, [r7, #16]
 8001746:	f7ff fbb5 	bl	8000eb4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	637b      	str	r3, [r7, #52]	; 0x34
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
 800175e:	e00b      	b.n	8001778 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001762:	b2da      	uxtb	r2, r3
 8001764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001766:	1c59      	adds	r1, r3, #1
 8001768:	6379      	str	r1, [r7, #52]	; 0x34
 800176a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001774:	09db      	lsrs	r3, r3, #7
 8001776:	633b      	str	r3, [r7, #48]	; 0x30
 8001778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177a:	2b7f      	cmp	r3, #127	; 0x7f
 800177c:	d8f0      	bhi.n	8001760 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800177e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	637a      	str	r2, [r7, #52]	; 0x34
 8001784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	62bb      	str	r3, [r7, #40]	; 0x28
 8001798:	e00b      	b.n	80017b2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800179a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800179c:	b2da      	uxtb	r2, r3
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	1c59      	adds	r1, r3, #1
 80017a2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80017a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017a8:	b2d2      	uxtb	r2, r2
 80017aa:	701a      	strb	r2, [r3, #0]
 80017ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ae:	09db      	lsrs	r3, r3, #7
 80017b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b4:	2b7f      	cmp	r3, #127	; 0x7f
 80017b6:	d8f0      	bhi.n	800179a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80017b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	701a      	strb	r2, [r3, #0]
 80017c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	e00b      	b.n	80017ec <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	1c59      	adds	r1, r3, #1
 80017dc:	6279      	str	r1, [r7, #36]	; 0x24
 80017de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	6a3b      	ldr	r3, [r7, #32]
 80017e8:	09db      	lsrs	r3, r3, #7
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	2b7f      	cmp	r3, #127	; 0x7f
 80017f0:	d8f0      	bhi.n	80017d4 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	627a      	str	r2, [r7, #36]	; 0x24
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e00b      	b.n	8001824 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	61f9      	str	r1, [r7, #28]
 8001816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	09db      	lsrs	r3, r3, #7
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	d8f0      	bhi.n	800180c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800183a:	2215      	movs	r2, #21
 800183c:	68f9      	ldr	r1, [r7, #12]
 800183e:	6938      	ldr	r0, [r7, #16]
 8001840:	f7ff fb38 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f383 8811 	msr	BASEPRI, r3
}
 800184a:	bf00      	nop
 800184c:	3748      	adds	r7, #72	; 0x48
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000ac8 	.word	0x20000ac8
 8001858:	20000a98 	.word	0x20000a98

0800185c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001872:	4b03      	ldr	r3, [pc, #12]	; (8001880 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001874:	6a1b      	ldr	r3, [r3, #32]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4798      	blx	r3
  }
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	20000a98 	.word	0x20000a98

08001884 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800188c:	f3ef 8311 	mrs	r3, BASEPRI
 8001890:	f04f 0120 	mov.w	r1, #32
 8001894:	f381 8811 	msr	BASEPRI, r1
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	480b      	ldr	r0, [pc, #44]	; (80018c8 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800189c:	f7ff fa1d 	bl	8000cda <_PreparePacket>
 80018a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	6879      	ldr	r1, [r7, #4]
 80018a6:	6938      	ldr	r0, [r7, #16]
 80018a8:	f7ff f9e7 	bl	8000c7a <_EncodeStr>
 80018ac:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80018ae:	220e      	movs	r2, #14
 80018b0:	68f9      	ldr	r1, [r7, #12]
 80018b2:	6938      	ldr	r0, [r7, #16]
 80018b4:	f7ff fafe 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f383 8811 	msr	BASEPRI, r3
}
 80018be:	bf00      	nop
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000ac8 	.word	0x20000ac8

080018cc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01a      	beq.n	8001910 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80018da:	4b13      	ldr	r3, [pc, #76]	; (8001928 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d015      	beq.n	8001910 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80018e4:	4b10      	ldr	r3, [pc, #64]	; (8001928 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4798      	blx	r3
 80018ec:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80018f0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80018f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018f6:	f04f 0200 	mov.w	r2, #0
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	000a      	movs	r2, r1
 8001900:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001902:	4613      	mov	r3, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4621      	mov	r1, r4
 8001908:	200d      	movs	r0, #13
 800190a:	f7ff fcef 	bl	80012ec <SEGGER_SYSVIEW_RecordU32x2>
 800190e:	e006      	b.n	800191e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	200c      	movs	r0, #12
 8001918:	f7ff fcac 	bl	8001274 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bd90      	pop	{r4, r7, pc}
 8001926:	bf00      	nop
 8001928:	20000a98 	.word	0x20000a98
 800192c:	e0001004 	.word	0xe0001004

08001930 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800193a:	4b40      	ldr	r3, [pc, #256]	; (8001a3c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d077      	beq.n	8001a32 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8001942:	4b3e      	ldr	r3, [pc, #248]	; (8001a3c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001948:	2300      	movs	r3, #0
 800194a:	62bb      	str	r3, [r7, #40]	; 0x28
 800194c:	e008      	b.n	8001960 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800195a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195c:	3301      	adds	r3, #1
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001964:	429a      	cmp	r2, r3
 8001966:	d3f2      	bcc.n	800194e <SEGGER_SYSVIEW_SendModule+0x1e>
 8001968:	e000      	b.n	800196c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800196a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800196c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800196e:	2b00      	cmp	r3, #0
 8001970:	d055      	beq.n	8001a1e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001972:	f3ef 8311 	mrs	r3, BASEPRI
 8001976:	f04f 0120 	mov.w	r1, #32
 800197a:	f381 8811 	msr	BASEPRI, r1
 800197e:	617b      	str	r3, [r7, #20]
 8001980:	482f      	ldr	r0, [pc, #188]	; (8001a40 <SEGGER_SYSVIEW_SendModule+0x110>)
 8001982:	f7ff f9aa 	bl	8000cda <_PreparePacket>
 8001986:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	623b      	str	r3, [r7, #32]
 8001994:	e00b      	b.n	80019ae <SEGGER_SYSVIEW_SendModule+0x7e>
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	1c59      	adds	r1, r3, #1
 800199e:	6279      	str	r1, [r7, #36]	; 0x24
 80019a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019a4:	b2d2      	uxtb	r2, r2
 80019a6:	701a      	strb	r2, [r3, #0]
 80019a8:	6a3b      	ldr	r3, [r7, #32]
 80019aa:	09db      	lsrs	r3, r3, #7
 80019ac:	623b      	str	r3, [r7, #32]
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	2b7f      	cmp	r3, #127	; 0x7f
 80019b2:	d8f0      	bhi.n	8001996 <SEGGER_SYSVIEW_SendModule+0x66>
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	627a      	str	r2, [r7, #36]	; 0x24
 80019ba:	6a3a      	ldr	r2, [r7, #32]
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	e00b      	b.n	80019e8 <SEGGER_SYSVIEW_SendModule+0xb8>
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	1c59      	adds	r1, r3, #1
 80019d8:	61f9      	str	r1, [r7, #28]
 80019da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	09db      	lsrs	r3, r3, #7
 80019e6:	61bb      	str	r3, [r7, #24]
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	2b7f      	cmp	r3, #127	; 0x7f
 80019ec:	d8f0      	bhi.n	80019d0 <SEGGER_SYSVIEW_SendModule+0xa0>
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	61fa      	str	r2, [r7, #28]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80019fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2280      	movs	r2, #128	; 0x80
 8001a04:	4619      	mov	r1, r3
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff f937 	bl	8000c7a <_EncodeStr>
 8001a0c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8001a0e:	2216      	movs	r2, #22
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	6938      	ldr	r0, [r7, #16]
 8001a14:	f7ff fa4e 	bl	8000eb4 <_SendPacket>
      RECORD_END();
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <SEGGER_SYSVIEW_SendModule+0x102>
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4798      	blx	r3
    }
  }
}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	; 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000ac0 	.word	0x20000ac0
 8001a40:	20000ac8 	.word	0x20000ac8

08001a44 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001a4a:	4b0c      	ldr	r3, [pc, #48]	; (8001a7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00f      	beq.n	8001a72 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f2      	bne.n	8001a58 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000ac0 	.word	0x20000ac0

08001a80 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8001a86:	f3ef 8311 	mrs	r3, BASEPRI
 8001a8a:	f04f 0120 	mov.w	r1, #32
 8001a8e:	f381 8811 	msr	BASEPRI, r1
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4817      	ldr	r0, [pc, #92]	; (8001af4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8001a96:	f7ff f920 	bl	8000cda <_PreparePacket>
 8001a9a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	e00b      	b.n	8001ac4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	1c59      	adds	r1, r3, #1
 8001ab4:	6179      	str	r1, [r7, #20]
 8001ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	09db      	lsrs	r3, r3, #7
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ac8:	d8f0      	bhi.n	8001aac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	617a      	str	r2, [r7, #20]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001ada:	221b      	movs	r2, #27
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68b8      	ldr	r0, [r7, #8]
 8001ae0:	f7ff f9e8 	bl	8000eb4 <_SendPacket>
  RECORD_END();
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f383 8811 	msr	BASEPRI, r3
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000ac8 	.word	0x20000ac8
 8001af8:	20000ac4 	.word	0x20000ac4

08001afc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <_cbSendSystemDesc+0x14>)
 8001b02:	f7ff febf 	bl	8001884 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8001b06:	4803      	ldr	r0, [pc, #12]	; (8001b14 <_cbSendSystemDesc+0x18>)
 8001b08:	f7ff febc 	bl	8001884 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	080176d8 	.word	0x080176d8
 8001b14:	0801770c 	.word	0x0801770c

08001b18 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b1e:	6818      	ldr	r0, [r3, #0]
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <SEGGER_SYSVIEW_Conf+0x20>)
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SEGGER_SYSVIEW_Conf+0x24>)
 8001b26:	4a06      	ldr	r2, [pc, #24]	; (8001b40 <SEGGER_SYSVIEW_Conf+0x28>)
 8001b28:	f7ff fb32 	bl	8001190 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001b2c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b30:	f7ff fb72 	bl	8001218 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001b34:	bf00      	nop
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	08001afd 	.word	0x08001afd
 8001b40:	0801a5ec 	.word	0x0801a5ec

08001b44 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	e048      	b.n	8001be2 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8001b50:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f007 f9c1 	bl	8008ee8 <uxTaskGetStackHighWaterMark>
 8001b66:	4601      	mov	r1, r0
 8001b68:	4823      	ldr	r0, [pc, #140]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4403      	add	r3, r0
 8001b76:	3310      	adds	r3, #16
 8001b78:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001b7a:	491f      	ldr	r1, [pc, #124]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	440b      	add	r3, r1
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3304      	adds	r3, #4
 8001b9a:	6819      	ldr	r1, [r3, #0]
 8001b9c:	4c16      	ldr	r4, [pc, #88]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4423      	add	r3, r4
 8001baa:	3308      	adds	r3, #8
 8001bac:	681c      	ldr	r4, [r3, #0]
 8001bae:	4d12      	ldr	r5, [pc, #72]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	442b      	add	r3, r5
 8001bbc:	330c      	adds	r3, #12
 8001bbe:	681d      	ldr	r5, [r3, #0]
 8001bc0:	4e0d      	ldr	r6, [pc, #52]	; (8001bf8 <_cbSendTaskList+0xb4>)
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4433      	add	r3, r6
 8001bce:	3310      	adds	r3, #16
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	462b      	mov	r3, r5
 8001bd6:	4622      	mov	r2, r4
 8001bd8:	f000 f855 	bl	8001c86 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b06      	ldr	r3, [pc, #24]	; (8001bfc <_cbSendTaskList+0xb8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d3b1      	bcc.n	8001b50 <_cbSendTaskList+0xc>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000bac 	.word	0x20000bac
 8001bfc:	20000c4c 	.word	0x20000c4c

08001c00 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001c08:	f006 fe56 	bl	80088b8 <xTaskGetTickCountFromISR>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2200      	movs	r2, #0
 8001c10:	469a      	mov	sl, r3
 8001c12:	4693      	mov	fp, r2
 8001c14:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001c18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	f04f 0a00 	mov.w	sl, #0
 8001c24:	f04f 0b00 	mov.w	fp, #0
 8001c28:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001c2c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001c30:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001c34:	4652      	mov	r2, sl
 8001c36:	465b      	mov	r3, fp
 8001c38:	1a14      	subs	r4, r2, r0
 8001c3a:	eb63 0501 	sbc.w	r5, r3, r1
 8001c3e:	f04f 0200 	mov.w	r2, #0
 8001c42:	f04f 0300 	mov.w	r3, #0
 8001c46:	00ab      	lsls	r3, r5, #2
 8001c48:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001c4c:	00a2      	lsls	r2, r4, #2
 8001c4e:	4614      	mov	r4, r2
 8001c50:	461d      	mov	r5, r3
 8001c52:	eb14 0800 	adds.w	r8, r4, r0
 8001c56:	eb45 0901 	adc.w	r9, r5, r1
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c6e:	4690      	mov	r8, r2
 8001c70:	4699      	mov	r9, r3
 8001c72:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001c76:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c86 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b08a      	sub	sp, #40	; 0x28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
 8001c92:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	2214      	movs	r2, #20
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f014 fe10 	bl	80168c2 <memset>
  TaskInfo.TaskID     = TaskID;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fcea 	bl	8001694 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ccc:	f000 fbb9 	bl	8002442 <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001cd0:	f7ff ff22 	bl	8001b18 <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 f81a 	bl	8001d0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f000 f8e8 	bl	8001eac <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001cdc:	f000 f888 	bl	8001df0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ce0:	f000 f8b6 	bl	8001e50 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001ce4:	f004 fb54 	bl	8006390 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001ce8:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <main+0x38>)
 8001cea:	2100      	movs	r1, #0
 8001cec:	4805      	ldr	r0, [pc, #20]	; (8001d04 <main+0x3c>)
 8001cee:	f004 fbe1 	bl	80064b4 <osThreadNew>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <main+0x40>)
 8001cf6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001cf8:	f004 fb7e 	bl	80063f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <main+0x34>
 8001cfe:	bf00      	nop
 8001d00:	0801a5f4 	.word	0x0801a5f4
 8001d04:	08001ff1 	.word	0x08001ff1
 8001d08:	200011e0 	.word	0x200011e0

08001d0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b094      	sub	sp, #80	; 0x50
 8001d10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	2234      	movs	r2, #52	; 0x34
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f014 fdd1 	bl	80168c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001d30:	f001 ff34 	bl	8003b9c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <SystemClock_Config+0xdc>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <SystemClock_Config+0xdc>)
 8001d3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <SystemClock_Config+0xdc>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <SystemClock_Config+0xe0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d54:	4a25      	ldr	r2, [pc, #148]	; (8001dec <SystemClock_Config+0xe0>)
 8001d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	4b23      	ldr	r3, [pc, #140]	; (8001dec <SystemClock_Config+0xe0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d64:	603b      	str	r3, [r7, #0]
 8001d66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d70:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d72:	2302      	movs	r3, #2
 8001d74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d7c:	2304      	movs	r3, #4
 8001d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d80:	2360      	movs	r3, #96	; 0x60
 8001d82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d84:	2302      	movs	r3, #2
 8001d86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4618      	mov	r0, r3
 8001d96:	f001 ff61 	bl	8003c5c <HAL_RCC_OscConfig>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001da0:	f000 f930 	bl	8002004 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001da4:	f001 ff0a 	bl	8003bbc <HAL_PWREx_EnableOverDrive>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001dae:	f000 f929 	bl	8002004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001db2:	230f      	movs	r3, #15
 8001db4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db6:	2302      	movs	r3, #2
 8001db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dc8:	f107 0308 	add.w	r3, r7, #8
 8001dcc:	2103      	movs	r1, #3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f002 f9f2 	bl	80041b8 <HAL_RCC_ClockConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001dda:	f000 f913 	bl	8002004 <Error_Handler>
  }
}
 8001dde:	bf00      	nop
 8001de0:	3750      	adds	r7, #80	; 0x50
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40007000 	.word	0x40007000

08001df0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df4:	4b14      	ldr	r3, [pc, #80]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001df6:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <MX_USART3_UART_Init+0x5c>)
 8001df8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfa:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e00:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e02:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e16:	220c      	movs	r2, #12
 8001e18:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1a:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e20:	4b09      	ldr	r3, [pc, #36]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e2c:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e32:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_USART3_UART_Init+0x58>)
 8001e34:	f003 f80e 	bl	8004e54 <HAL_UART_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e3e:	f000 f8e1 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e42:	bf00      	nop
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	20000c50 	.word	0x20000c50
 8001e4c:	40004800 	.word	0x40004800

08001e50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e5e:	2206      	movs	r2, #6
 8001e60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e62:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e64:	2202      	movs	r2, #2
 8001e66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e70:	2202      	movs	r2, #2
 8001e72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e86:	4b08      	ldr	r3, [pc, #32]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e94:	f001 fd39 	bl	800390a <HAL_PCD_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e9e:	f000 f8b1 	bl	8002004 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000cd8 	.word	0x20000cd8

08001eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b08c      	sub	sp, #48	; 0x30
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
 8001ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	4b47      	ldr	r3, [pc, #284]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a46      	ldr	r2, [pc, #280]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	61bb      	str	r3, [r7, #24]
 8001ed8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a40      	ldr	r2, [pc, #256]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b3e      	ldr	r3, [pc, #248]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a34      	ldr	r2, [pc, #208]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f22:	4b2f      	ldr	r3, [pc, #188]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	4a2e      	ldr	r2, [pc, #184]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f28:	f043 0308 	orr.w	r3, r3, #8
 8001f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2e:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	60bb      	str	r3, [r7, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f3a:	4b29      	ldr	r3, [pc, #164]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	4a28      	ldr	r2, [pc, #160]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f44:	6313      	str	r3, [r2, #48]	; 0x30
 8001f46:	4b26      	ldr	r3, [pc, #152]	; (8001fe0 <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f52:	2200      	movs	r2, #0
 8001f54:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001f58:	4822      	ldr	r0, [pc, #136]	; (8001fe4 <MX_GPIO_Init+0x138>)
 8001f5a:	f001 fcbd 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2140      	movs	r1, #64	; 0x40
 8001f62:	4821      	ldr	r0, [pc, #132]	; (8001fe8 <MX_GPIO_Init+0x13c>)
 8001f64:	f001 fcb8 	bl	80038d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 031c 	add.w	r3, r7, #28
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	481b      	ldr	r0, [pc, #108]	; (8001fec <MX_GPIO_Init+0x140>)
 8001f80:	f001 fafe 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001f84:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4811      	ldr	r0, [pc, #68]	; (8001fe4 <MX_GPIO_Init+0x138>)
 8001f9e:	f001 faef 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fa2:	2340      	movs	r3, #64	; 0x40
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fb2:	f107 031c 	add.w	r3, r7, #28
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480b      	ldr	r0, [pc, #44]	; (8001fe8 <MX_GPIO_Init+0x13c>)
 8001fba:	f001 fae1 	bl	8003580 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fbe:	2380      	movs	r3, #128	; 0x80
 8001fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fca:	f107 031c 	add.w	r3, r7, #28
 8001fce:	4619      	mov	r1, r3
 8001fd0:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_GPIO_Init+0x13c>)
 8001fd2:	f001 fad5 	bl	8003580 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fd6:	bf00      	nop
 8001fd8:	3730      	adds	r7, #48	; 0x30
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40021800 	.word	0x40021800
 8001fec:	40020800 	.word	0x40020800

08001ff0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
	MX_LWIP_Init();
 8001ff8:	f003 fe88 	bl	8005d0c <MX_LWIP_Init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001ffc:	2001      	movs	r0, #1
 8001ffe:	f004 faff 	bl	8006600 <osDelay>
 8002002:	e7fb      	b.n	8001ffc <StartDefaultTask+0xc>

08002004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002008:	b672      	cpsid	i
}
 800200a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800200c:	e7fe      	b.n	800200c <Error_Handler+0x8>
	...

08002010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002016:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a10      	ldr	r2, [pc, #64]	; (800205c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b0e      	ldr	r3, [pc, #56]	; (800205c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <HAL_MspInit+0x4c>)
 8002030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <HAL_MspInit+0x4c>)
 8002034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002038:	6453      	str	r3, [r2, #68]	; 0x44
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <HAL_MspInit+0x4c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	210f      	movs	r1, #15
 800204a:	f06f 0001 	mvn.w	r0, #1
 800204e:	f000 fb36 	bl	80026be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800

08002060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0ae      	sub	sp, #184	; 0xb8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002068:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2290      	movs	r2, #144	; 0x90
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f014 fc1e 	bl	80168c2 <memset>
  if(huart->Instance==USART3)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_UART_MspInit+0xb4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d13c      	bne.n	800210a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002094:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002096:	2300      	movs	r3, #0
 8002098:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fab0 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80020aa:	f7ff ffab 	bl	8002004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80020ae:	4b1a      	ldr	r3, [pc, #104]	; (8002118 <HAL_UART_MspInit+0xb8>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	4a19      	ldr	r2, [pc, #100]	; (8002118 <HAL_UART_MspInit+0xb8>)
 80020b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ba:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_UART_MspInit+0xb8>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c6:	4b14      	ldr	r3, [pc, #80]	; (8002118 <HAL_UART_MspInit+0xb8>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_UART_MspInit+0xb8>)
 80020cc:	f043 0308 	orr.w	r3, r3, #8
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_UART_MspInit+0xb8>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020f8:	2307      	movs	r3, #7
 80020fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002102:	4619      	mov	r1, r3
 8002104:	4805      	ldr	r0, [pc, #20]	; (800211c <HAL_UART_MspInit+0xbc>)
 8002106:	f001 fa3b 	bl	8003580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800210a:	bf00      	nop
 800210c:	37b8      	adds	r7, #184	; 0xb8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40004800 	.word	0x40004800
 8002118:	40023800 	.word	0x40023800
 800211c:	40020c00 	.word	0x40020c00

08002120 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b0ae      	sub	sp, #184	; 0xb8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002128:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	605a      	str	r2, [r3, #4]
 8002132:	609a      	str	r2, [r3, #8]
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	2290      	movs	r2, #144	; 0x90
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f014 fbbe 	bl	80168c2 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800214e:	d159      	bne.n	8002204 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002154:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	4618      	mov	r0, r3
 8002162:	f002 fa4f 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800216c:	f7ff ff4a 	bl	8002004 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	4b26      	ldr	r3, [pc, #152]	; (800220c <HAL_PCD_MspInit+0xec>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002174:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_PCD_MspInit+0xec>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	6313      	str	r3, [r2, #48]	; 0x30
 800217c:	4b23      	ldr	r3, [pc, #140]	; (800220c <HAL_PCD_MspInit+0xec>)
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002188:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800218c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021a2:	230a      	movs	r3, #10
 80021a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4818      	ldr	r0, [pc, #96]	; (8002210 <HAL_PCD_MspInit+0xf0>)
 80021b0:	f001 f9e6 	bl	8003580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80021b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80021cc:	4619      	mov	r1, r3
 80021ce:	4810      	ldr	r0, [pc, #64]	; (8002210 <HAL_PCD_MspInit+0xf0>)
 80021d0:	f001 f9d6 	bl	8003580 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021d4:	4b0d      	ldr	r3, [pc, #52]	; (800220c <HAL_PCD_MspInit+0xec>)
 80021d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d8:	4a0c      	ldr	r2, [pc, #48]	; (800220c <HAL_PCD_MspInit+0xec>)
 80021da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021de:	6353      	str	r3, [r2, #52]	; 0x34
 80021e0:	4b0a      	ldr	r3, [pc, #40]	; (800220c <HAL_PCD_MspInit+0xec>)
 80021e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	60fb      	str	r3, [r7, #12]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_PCD_MspInit+0xec>)
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	4a06      	ldr	r2, [pc, #24]	; (800220c <HAL_PCD_MspInit+0xec>)
 80021f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f6:	6453      	str	r3, [r2, #68]	; 0x44
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_PCD_MspInit+0xec>)
 80021fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	37b8      	adds	r7, #184	; 0xb8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40023800 	.word	0x40023800
 8002210:	40020000 	.word	0x40020000

08002214 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <NMI_Handler+0x4>

0800221a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <HardFault_Handler+0x4>

08002220 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <MemManage_Handler+0x4>

08002226 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800222a:	e7fe      	b.n	800222a <BusFault_Handler+0x4>

0800222c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <UsageFault_Handler+0x4>

08002232 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002244:	f000 f93a 	bl	80024bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002248:	f006 fed0 	bl	8008fec <xTaskGetSchedulerState>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d001      	beq.n	8002256 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002252:	f007 fdb1 	bl	8009db8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002260:	4802      	ldr	r0, [pc, #8]	; (800226c <ETH_IRQHandler+0x10>)
 8002262:	f000 fccb 	bl	8002bfc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20005be8 	.word	0x20005be8

08002270 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return 1;
 8002274:	2301      	movs	r3, #1
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <_kill>:

int _kill(int pid, int sig)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800228a:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <_kill+0x20>)
 800228c:	2216      	movs	r2, #22
 800228e:	601a      	str	r2, [r3, #0]
  return -1;
 8002290:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	2000e104 	.word	0x2000e104

080022a4 <_exit>:

void _exit (int status)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022ac:	f04f 31ff 	mov.w	r1, #4294967295
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ffe5 	bl	8002280 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022b6:	e7fe      	b.n	80022b6 <_exit+0x12>

080022b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	e00a      	b.n	80022e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ca:	f3af 8000 	nop.w
 80022ce:	4601      	mov	r1, r0
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	60ba      	str	r2, [r7, #8]
 80022d6:	b2ca      	uxtb	r2, r1
 80022d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	dbf0      	blt.n	80022ca <_read+0x12>
  }

  return len;
 80022e8:	687b      	ldr	r3, [r7, #4]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231a:	605a      	str	r2, [r3, #4]
  return 0;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <_isatty>:

int _isatty(int file)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002364:	4a14      	ldr	r2, [pc, #80]	; (80023b8 <_sbrk+0x5c>)
 8002366:	4b15      	ldr	r3, [pc, #84]	; (80023bc <_sbrk+0x60>)
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002370:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <_sbrk+0x64>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d102      	bne.n	800237e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <_sbrk+0x64>)
 800237a:	4a12      	ldr	r2, [pc, #72]	; (80023c4 <_sbrk+0x68>)
 800237c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <_sbrk+0x64>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4413      	add	r3, r2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d205      	bcs.n	8002398 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <_sbrk+0x6c>)
 800238e:	220c      	movs	r2, #12
 8002390:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	e009      	b.n	80023ac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8002398:	4b09      	ldr	r3, [pc, #36]	; (80023c0 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	4a06      	ldr	r2, [pc, #24]	; (80023c0 <_sbrk+0x64>)
 80023a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	20080000 	.word	0x20080000
 80023bc:	00000400 	.word	0x00000400
 80023c0:	200011e4 	.word	0x200011e4
 80023c4:	2000e118 	.word	0x2000e118
 80023c8:	2000e104 	.word	0x2000e104

080023cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	; (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002428 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f4:	480d      	ldr	r0, [pc, #52]	; (800242c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023f6:	490e      	ldr	r1, [pc, #56]	; (8002430 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f8:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023fc:	e002      	b.n	8002404 <LoopCopyDataInit>

080023fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002402:	3304      	adds	r3, #4

08002404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002408:	d3f9      	bcc.n	80023fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240a:	4a0b      	ldr	r2, [pc, #44]	; (8002438 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800240c:	4c0b      	ldr	r4, [pc, #44]	; (800243c <LoopFillZerobss+0x26>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002410:	e001      	b.n	8002416 <LoopFillZerobss>

08002412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002414:	3204      	adds	r2, #4

08002416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002418:	d3fb      	bcc.n	8002412 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800241a:	f7ff ffd7 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800241e:	f014 fae3 	bl	80169e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7ff fc51 	bl	8001cc8 <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002428:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002434:	0801a860 	.word	0x0801a860
  ldr r2, =_sbss
 8002438:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 800243c:	2000e114 	.word	0x2000e114

08002440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC_IRQHandler>

08002442 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002446:	2003      	movs	r0, #3
 8002448:	f000 f92e 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244c:	200f      	movs	r0, #15
 800244e:	f000 f805 	bl	800245c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002452:	f7ff fddd 	bl	8002010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002464:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_InitTick+0x54>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <HAL_InitTick+0x58>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	4619      	mov	r1, r3
 800246e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002472:	fbb3 f3f1 	udiv	r3, r3, r1
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f93b 	bl	80026f6 <HAL_SYSTICK_Config>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00e      	b.n	80024a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b0f      	cmp	r3, #15
 800248e:	d80a      	bhi.n	80024a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002490:	2200      	movs	r2, #0
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
 8002498:	f000 f911 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800249c:	4a06      	ldr	r2, [pc, #24]	; (80024b8 <HAL_InitTick+0x5c>)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	e000      	b.n	80024a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000008 	.word	0x20000008
 80024b8:	20000004 	.word	0x20000004

080024bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x20>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x24>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_IncTick+0x24>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000008 	.word	0x20000008
 80024e0:	200011e8 	.word	0x200011e8

080024e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return uwTick;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_GetTick+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200011e8 	.word	0x200011e8

080024fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff ffee 	bl	80024e4 <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d005      	beq.n	8002522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_Delay+0x44>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002522:	bf00      	nop
 8002524:	f7ff ffde 	bl	80024e4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d8f7      	bhi.n	8002524 <HAL_Delay+0x28>
  {
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000008 	.word	0x20000008

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <__NVIC_SetPriorityGrouping+0x40>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800256c:	4b06      	ldr	r3, [pc, #24]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 800256e:	4313      	orrs	r3, r2
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__NVIC_SetPriorityGrouping+0x40>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000ed00 	.word	0xe000ed00
 8002588:	05fa0000 	.word	0x05fa0000

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff47 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff5c 	bl	800258c <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffb0 	bl	8002664 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e06a      	b.n	80027f8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2223      	movs	r2, #35	; 0x23
 8002730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f867 	bl	8002808 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <HAL_ETH_Init+0xf0>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273e:	4a30      	ldr	r2, [pc, #192]	; (8002800 <HAL_ETH_Init+0xf0>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002744:	6453      	str	r3, [r2, #68]	; 0x44
 8002746:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <HAL_ETH_Init+0xf0>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002752:	4b2c      	ldr	r3, [pc, #176]	; (8002804 <HAL_ETH_Init+0xf4>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	4a2b      	ldr	r2, [pc, #172]	; (8002804 <HAL_ETH_Init+0xf4>)
 8002758:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800275c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800275e:	4b29      	ldr	r3, [pc, #164]	; (8002804 <HAL_ETH_Init+0xf4>)
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4927      	ldr	r1, [pc, #156]	; (8002804 <HAL_ETH_Init+0xf4>)
 8002768:	4313      	orrs	r3, r2
 800276a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800276c:	4b25      	ldr	r3, [pc, #148]	; (8002804 <HAL_ETH_Init+0xf4>)
 800276e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002786:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002788:	f7ff feac 	bl	80024e4 <HAL_GetTick>
 800278c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800278e:	e011      	b.n	80027b4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002790:	f7ff fea8 	bl	80024e4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800279e:	d909      	bls.n	80027b4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2204      	movs	r2, #4
 80027a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	22e0      	movs	r2, #224	; 0xe0
 80027ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e021      	b.n	80027f8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e4      	bne.n	8002790 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fc36 	bl	8003038 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fcdd 	bl	800318c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fd33 	bl	800323e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	461a      	mov	r2, r3
 80027de:	2100      	movs	r1, #0
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 fc9b 	bl	800311c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2210      	movs	r2, #16
 80027f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800

08002808 <HAL_ETH_MspInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MspInit could be implemented in the user file
  */
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002832:	f043 0201 	orr.w	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e045      	b.n	80028cc <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002846:	2b23      	cmp	r3, #35	; 0x23
 8002848:	d13f      	bne.n	80028ca <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002852:	2201      	movs	r2, #1
 8002854:	6839      	ldr	r1, [r7, #0]
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fd5e 	bl	8003318 <ETH_Prepare_Tx_Descriptors>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f043 0202 	orr.w	r2, r3, #2
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e02a      	b.n	80028cc <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002876:	f3bf 8f4f 	dsb	sy
}
 800287a:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	629a      	str	r2, [r3, #40]	; 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288a:	2b03      	cmp	r3, #3
 800288c:	d904      	bls.n	8002898 <HAL_ETH_Transmit_IT+0x7c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	1f1a      	subs	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00d      	beq.n	80028c6 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b2:	461a      	mov	r2, r3
 80028b4:	2304      	movs	r3, #4
 80028b6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c0:	461a      	mov	r2, r3
 80028c2:	2300      	movs	r3, #0
 80028c4:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
  }
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d109      	bne.n	8002900 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0a8      	b.n	8002a52 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002906:	2b23      	cmp	r3, #35	; 0x23
 8002908:	d001      	beq.n	800290e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e0a1      	b.n	8002a52 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	3212      	adds	r2, #18
 800291a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002924:	f1c3 0304 	rsb	r3, r3, #4
 8002928:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800292a:	e06a      	b.n	8002a02 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d007      	beq.n	8002948 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	69da      	ldr	r2, [r3, #28]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002950:	2b00      	cmp	r3, #0
 8002952:	d103      	bne.n	800295c <HAL_ETH_ReadData+0x88>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002958:	2b00      	cmp	r3, #0
 800295a:	d040      	beq.n	80029de <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00c      	beq.n	80029a0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	0c1b      	lsrs	r3, r3, #16
 800298c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002990:	3b04      	subs	r3, #4
 8002992:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800299c:	2301      	movs	r3, #1
 800299e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80029b8:	461a      	mov	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	b29b      	uxth	r3, r3
 80029be:	f003 fc93 	bl	80062e8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	441a      	add	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	2200      	movs	r2, #0
 80029dc:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d902      	bls.n	80029f0 <HAL_ETH_ReadData+0x11c>
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3b04      	subs	r3, #4
 80029ee:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	3212      	adds	r2, #18
 80029f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fa:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3301      	adds	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db06      	blt.n	8002a18 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002a0a:	697a      	ldr	r2, [r7, #20]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d202      	bcs.n	8002a18 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d089      	beq.n	800292c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	441a      	add	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d002      	beq.n	8002a32 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f815 	bl	8002a5c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69fa      	ldr	r2, [r7, #28]
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e000      	b.n	8002a52 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3720      	adds	r7, #32
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a70:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	3212      	adds	r2, #18
 8002a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a7c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a82:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002a84:	e040      	b.n	8002b08 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d112      	bne.n	8002ab4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002a8e:	f107 030c 	add.w	r3, r7, #12
 8002a92:	4618      	mov	r0, r3
 8002a94:	f003 fbf8 	bl	8006288 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	74fb      	strb	r3, [r7, #19]
 8002aa2:	e007      	b.n	8002ab4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002ab4:	7cfb      	ldrb	r3, [r7, #19]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d026      	beq.n	8002b08 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d103      	bne.n	8002aca <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4a1e      	ldr	r2, [pc, #120]	; (8002b40 <ETH_UpdateDescriptor+0xe4>)
 8002ac6:	605a      	str	r2, [r3, #4]
 8002ac8:	e003      	b.n	8002ad2 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002ad0:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002ad2:	f3bf 8f5f 	dmb	sy
}
 8002ad6:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d902      	bls.n	8002af6 <ETH_UpdateDescriptor+0x9a>
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	3b04      	subs	r3, #4
 8002af4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	3212      	adds	r2, #18
 8002afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b00:	617b      	str	r3, [r7, #20]
      desccount--;
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <ETH_UpdateDescriptor+0xb8>
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1b8      	bne.n	8002a86 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d00c      	beq.n	8002b38 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b26:	461a      	mov	r2, r3
 8002b28:	2300      	movs	r3, #0
 8002b2a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	69fa      	ldr	r2, [r7, #28]
 8002b30:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80004600 	.word	0x80004600

08002b44 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3318      	adds	r3, #24
 8002b50:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b56:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002b62:	e03f      	b.n	8002be4 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	3304      	adds	r3, #4
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68d9      	ldr	r1, [r3, #12]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db1b      	blt.n	8002be0 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	3304      	adds	r3, #4
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 fbd9 	bl	800636c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	f003 0303 	and.w	r3, r3, #3
 8002bd0:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bde:	e001      	b.n	8002be4 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_ETH_ReleaseTxPacket+0xac>
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1b9      	bne.n	8002b64 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
	...

08002bfc <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c12:	2b40      	cmp	r3, #64	; 0x40
 8002c14:	d112      	bne.n	8002c3c <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d109      	bne.n	8002c3c <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c30:	461a      	mov	r2, r3
 8002c32:	4b50      	ldr	r3, [pc, #320]	; (8002d74 <HAL_ETH_IRQHandler+0x178>)
 8002c34:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f003 f900 	bl	8005e3c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d113      	bne.n	8002c76 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10a      	bne.n	8002c76 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002c6e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f003 f8f3 	bl	8005e5c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c88:	d14c      	bne.n	8002d24 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c9c:	d142      	bne.n	8002d24 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f043 0208 	orr.w	r2, r3, #8
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc0:	d11a      	bne.n	8002cf8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	4b2a      	ldr	r3, [pc, #168]	; (8002d78 <HAL_ETH_IRQHandler+0x17c>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cde:	69db      	ldr	r3, [r3, #28]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cec:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	22e0      	movs	r2, #224	; 0xe0
 8002cf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002cf6:	e012      	b.n	8002d1e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	695a      	ldr	r2, [r3, #20]
 8002d02:	f248 6380 	movw	r3, #34432	; 0x8680
 8002d06:	4013      	ands	r3, r2
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d16:	461a      	mov	r2, r3
 8002d18:	f248 6380 	movw	r3, #34432	; 0x8680
 8002d1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f003 f8ac 	bl	8005e7c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	f003 0308 	and.w	r3, r3, #8
 8002d2e:	2b08      	cmp	r3, #8
 8002d30:	d10e      	bne.n	8002d50 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f81c 	bl	8002d80 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <HAL_ETH_IRQHandler+0x180>)
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d006      	beq.n	8002d6a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002d5c:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_ETH_IRQHandler+0x180>)
 8002d5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002d62:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f815 	bl	8002d94 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	00010040 	.word	0x00010040
 8002d78:	007e2000 	.word	0x007e2000
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <ETH_SetMACConfig+0x15c>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	7c1b      	ldrb	r3, [r3, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d102      	bne.n	8002dec <ETH_SetMACConfig+0x28>
 8002de6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002dea:	e000      	b.n	8002dee <ETH_SetMACConfig+0x2a>
 8002dec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	7c5b      	ldrb	r3, [r3, #17]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d102      	bne.n	8002dfc <ETH_SetMACConfig+0x38>
 8002df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dfa:	e000      	b.n	8002dfe <ETH_SetMACConfig+0x3a>
 8002dfc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dfe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e04:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	7fdb      	ldrb	r3, [r3, #31]
 8002e0a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e0c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	7f92      	ldrb	r2, [r2, #30]
 8002e18:	2a00      	cmp	r2, #0
 8002e1a:	d102      	bne.n	8002e22 <ETH_SetMACConfig+0x5e>
 8002e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e20:	e000      	b.n	8002e24 <ETH_SetMACConfig+0x60>
 8002e22:	2200      	movs	r2, #0
                        macconf->Speed |
 8002e24:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	7f1b      	ldrb	r3, [r3, #28]
 8002e2a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e2c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e32:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	791b      	ldrb	r3, [r3, #4]
 8002e38:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e42:	2a00      	cmp	r2, #0
 8002e44:	d102      	bne.n	8002e4c <ETH_SetMACConfig+0x88>
 8002e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e4a:	e000      	b.n	8002e4e <ETH_SetMACConfig+0x8a>
 8002e4c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e4e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	7bdb      	ldrb	r3, [r3, #15]
 8002e54:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e56:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e5c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002e64:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e66:	4313      	orrs	r3, r2
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e7e:	2001      	movs	r0, #1
 8002e80:	f7ff fb3c 	bl	80024fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d101      	bne.n	8002eb2 <ETH_SetMACConfig+0xee>
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	e000      	b.n	8002eb4 <ETH_SetMACConfig+0xf0>
 8002eb2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002eb4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002eba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002ec2:	2a01      	cmp	r2, #1
 8002ec4:	d101      	bne.n	8002eca <ETH_SetMACConfig+0x106>
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	e000      	b.n	8002ecc <ETH_SetMACConfig+0x108>
 8002eca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ecc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002ed4:	2a01      	cmp	r2, #1
 8002ed6:	d101      	bne.n	8002edc <ETH_SetMACConfig+0x118>
 8002ed8:	2204      	movs	r2, #4
 8002eda:	e000      	b.n	8002ede <ETH_SetMACConfig+0x11a>
 8002edc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002ee6:	2a01      	cmp	r2, #1
 8002ee8:	d101      	bne.n	8002eee <ETH_SetMACConfig+0x12a>
 8002eea:	2202      	movs	r2, #2
 8002eec:	e000      	b.n	8002ef0 <ETH_SetMACConfig+0x12c>
 8002eee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f08:	2001      	movs	r0, #1
 8002f0a:	f7ff faf7 	bl	80024fc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	619a      	str	r2, [r3, #24]
}
 8002f16:	bf00      	nop
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	ff20810f 	.word	0xff20810f

08002f24 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	4b3d      	ldr	r3, [pc, #244]	; (8003034 <ETH_SetDMAConfig+0x110>)
 8002f3e:	4013      	ands	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	7b1b      	ldrb	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d102      	bne.n	8002f50 <ETH_SetDMAConfig+0x2c>
 8002f4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002f4e:	e000      	b.n	8002f52 <ETH_SetDMAConfig+0x2e>
 8002f50:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	7b5b      	ldrb	r3, [r3, #13]
 8002f56:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f58:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	7f52      	ldrb	r2, [r2, #29]
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	d102      	bne.n	8002f68 <ETH_SetDMAConfig+0x44>
 8002f62:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f66:	e000      	b.n	8002f6a <ETH_SetDMAConfig+0x46>
 8002f68:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f6a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7b9b      	ldrb	r3, [r3, #14]
 8002f70:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f72:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f78:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	7f1b      	ldrb	r3, [r3, #28]
 8002f7e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	7f9b      	ldrb	r3, [r3, #30]
 8002f86:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f88:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f8e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f96:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa8:	461a      	mov	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f7ff fa9e 	bl	80024fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc8:	461a      	mov	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	791b      	ldrb	r3, [r3, #4]
 8002fd2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fd8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002fde:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fe4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002fec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ff6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ffc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003006:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800300a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003018:	2001      	movs	r0, #1
 800301a:	f7ff fa6f 	bl	80024fc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003026:	461a      	mov	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	f8de3f23 	.word	0xf8de3f23

08003038 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b0a6      	sub	sp, #152	; 0x98
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800304c:	2300      	movs	r3, #0
 800304e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003050:	2300      	movs	r3, #0
 8003052:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800306e:	2300      	movs	r3, #0
 8003070:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003074:	2300      	movs	r3, #0
 8003076:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003078:	2300      	movs	r3, #0
 800307a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800307e:	2300      	movs	r3, #0
 8003080:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003088:	2300      	movs	r3, #0
 800308a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800309a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800309e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80030ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80030b0:	4619      	mov	r1, r3
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f7ff fe86 	bl	8002dc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80030bc:	2301      	movs	r3, #1
 80030be:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030da:	2300      	movs	r3, #0
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030de:	2301      	movs	r3, #1
 80030e0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ec:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030f2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030f8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003100:	2300      	movs	r3, #0
 8003102:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003108:	f107 0308 	add.w	r3, r7, #8
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ff08 	bl	8002f24 <ETH_SetDMAConfig>
}
 8003114:	bf00      	nop
 8003116:	3798      	adds	r7, #152	; 0x98
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3305      	adds	r3, #5
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	3204      	adds	r2, #4
 8003134:	7812      	ldrb	r2, [r2, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <ETH_MACAddressConfig+0x68>)
 800313e:	4413      	add	r3, r2
 8003140:	461a      	mov	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3303      	adds	r3, #3
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	061a      	lsls	r2, r3, #24
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3302      	adds	r3, #2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3301      	adds	r3, #1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	4313      	orrs	r3, r2
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	7812      	ldrb	r2, [r2, #0]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800316a:	68ba      	ldr	r2, [r7, #8]
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <ETH_MACAddressConfig+0x6c>)
 800316e:	4413      	add	r3, r2
 8003170:	461a      	mov	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	6013      	str	r3, [r2, #0]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40028040 	.word	0x40028040
 8003188:	40028044 	.word	0x40028044

0800318c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003194:	2300      	movs	r3, #0
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e03e      	b.n	8003218 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68d9      	ldr	r1, [r3, #12]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4613      	mov	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4413      	add	r3, r2
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	440b      	add	r3, r1
 80031aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	3206      	adds	r2, #6
 80031cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d80c      	bhi.n	80031fc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	68d9      	ldr	r1, [r3, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	461a      	mov	r2, r3
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	e004      	b.n	8003206 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	461a      	mov	r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3301      	adds	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b03      	cmp	r3, #3
 800321c:	d9bd      	bls.n	800319a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003230:	611a      	str	r2, [r3, #16]
}
 8003232:	bf00      	nop
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800323e:	b480      	push	{r7}
 8003240:	b085      	sub	sp, #20
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e046      	b.n	80032da <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6919      	ldr	r1, [r3, #16]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4613      	mov	r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	440b      	add	r3, r1
 800325c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2200      	movs	r2, #0
 8003274:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003288:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003290:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	3212      	adds	r2, #18
 80032a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d80c      	bhi.n	80032ca <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6919      	ldr	r1, [r3, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	461a      	mov	r2, r3
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	e004      	b.n	80032d4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3301      	adds	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d9b5      	bls.n	800324c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691a      	ldr	r2, [r3, #16]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330a:	60da      	str	r2, [r3, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003318:	b480      	push	{r7}
 800331a:	b08d      	sub	sp, #52	; 0x34
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3318      	adds	r3, #24
 8003328:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800333e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003342:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800335a:	d007      	beq.n	800336c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	3304      	adds	r3, #4
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800336c:	2302      	movs	r3, #2
 800336e:	e0ff      	b.n	8003570 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	3301      	adds	r3, #1
 8003374:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	6a3b      	ldr	r3, [r7, #32]
 800337e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	4b7d      	ldr	r3, [pc, #500]	; (800357c <ETH_Prepare_Tx_Descriptors+0x264>)
 8003386:	4013      	ands	r3, r2
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	6852      	ldr	r2, [r2, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80033bc:	6a3b      	ldr	r3, [r7, #32]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	431a      	orrs	r2, r3
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80033e6:	6a3b      	ldr	r3, [r7, #32]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033ee:	6a3b      	ldr	r3, [r7, #32]
 80033f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80033f2:	f3bf 8f5f 	dmb	sy
}
 80033f6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003400:	6a3b      	ldr	r3, [r7, #32]
 8003402:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003404:	e082      	b.n	800350c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d006      	beq.n	8003426 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e005      	b.n	8003432 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003426:	6a3b      	ldr	r3, [r7, #32]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003434:	3301      	adds	r3, #1
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800343a:	2b03      	cmp	r3, #3
 800343c:	d902      	bls.n	8003444 <ETH_Prepare_Tx_Descriptors+0x12c>
 800343e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003440:	3b04      	subs	r3, #4
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800344e:	6a3b      	ldr	r3, [r7, #32]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800345a:	6a3b      	ldr	r3, [r7, #32]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003462:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003466:	d007      	beq.n	8003478 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	3304      	adds	r3, #4
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d029      	beq.n	80034cc <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003486:	2300      	movs	r3, #0
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
 800348a:	e019      	b.n	80034c0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800348c:	f3bf 8f5f 	dmb	sy
}
 8003490:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	3301      	adds	r3, #1
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d902      	bls.n	80034b0 <ETH_Prepare_Tx_Descriptors+0x198>
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	3b04      	subs	r3, #4
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034bc:	3301      	adds	r3, #1
 80034be:	62bb      	str	r3, [r7, #40]	; 0x28
 80034c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3e1      	bcc.n	800348c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80034c8:	2302      	movs	r3, #2
 80034ca:	e051      	b.n	8003570 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80034cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ce:	3301      	adds	r3, #1
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	461a      	mov	r2, r3
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034e2:	6a3b      	ldr	r3, [r7, #32]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <ETH_Prepare_Tx_Descriptors+0x264>)
 80034e8:	4013      	ands	r3, r2
 80034ea:	69fa      	ldr	r2, [r7, #28]
 80034ec:	6852      	ldr	r2, [r2, #4]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	3301      	adds	r3, #1
 80034f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80034fa:	f3bf 8f5f 	dmb	sy
}
 80034fe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af78 	bne.w	8003406 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d006      	beq.n	800352a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e005      	b.n	8003536 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003532:	6a3b      	ldr	r3, [r7, #32]
 8003534:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003546:	6979      	ldr	r1, [r7, #20]
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	3304      	adds	r3, #4
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003556:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003558:	b672      	cpsid	i
}
 800355a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	4413      	add	r3, r2
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800356a:	b662      	cpsie	i
}
 800356c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3734      	adds	r7, #52	; 0x34
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	ffffe000 	.word	0xffffe000

08003580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003580:	b480      	push	{r7}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800358a:	2300      	movs	r3, #0
 800358c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800358e:	2300      	movs	r3, #0
 8003590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003596:	2300      	movs	r3, #0
 8003598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	e175      	b.n	800388c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4013      	ands	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f040 8164 	bne.w	8003886 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d005      	beq.n	80035d6 <HAL_GPIO_Init+0x56>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d130      	bne.n	8003638 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800360c:	2201      	movs	r2, #1
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa02 f303 	lsl.w	r3, r2, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	69ba      	ldr	r2, [r7, #24]
 8003618:	4013      	ands	r3, r2
 800361a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	091b      	lsrs	r3, r3, #4
 8003622:	f003 0201 	and.w	r2, r3, #1
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4313      	orrs	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b03      	cmp	r3, #3
 8003642:	d017      	beq.n	8003674 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	2203      	movs	r2, #3
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	69ba      	ldr	r2, [r7, #24]
 8003658:	4013      	ands	r3, r2
 800365a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	fa02 f303 	lsl.w	r3, r2, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4313      	orrs	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0303 	and.w	r3, r3, #3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d123      	bne.n	80036c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	08da      	lsrs	r2, r3, #3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3208      	adds	r2, #8
 8003688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	220f      	movs	r2, #15
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4013      	ands	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f003 0307 	and.w	r3, r3, #7
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	08da      	lsrs	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3208      	adds	r2, #8
 80036c2:	69b9      	ldr	r1, [r7, #24]
 80036c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	005b      	lsls	r3, r3, #1
 80036d2:	2203      	movs	r2, #3
 80036d4:	fa02 f303 	lsl.w	r3, r2, r3
 80036d8:	43db      	mvns	r3, r3
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4013      	ands	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0203 	and.w	r2, r3, #3
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80be 	beq.w	8003886 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <HAL_GPIO_Init+0x324>)
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <HAL_GPIO_Init+0x324>)
 8003710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003714:	6453      	str	r3, [r2, #68]	; 0x44
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_GPIO_Init+0x324>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003722:	4a61      	ldr	r2, [pc, #388]	; (80038a8 <HAL_GPIO_Init+0x328>)
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	3302      	adds	r3, #2
 800372a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	f003 0303 	and.w	r3, r3, #3
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	220f      	movs	r2, #15
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	4013      	ands	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a58      	ldr	r2, [pc, #352]	; (80038ac <HAL_GPIO_Init+0x32c>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d037      	beq.n	80037be <HAL_GPIO_Init+0x23e>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a57      	ldr	r2, [pc, #348]	; (80038b0 <HAL_GPIO_Init+0x330>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d031      	beq.n	80037ba <HAL_GPIO_Init+0x23a>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a56      	ldr	r2, [pc, #344]	; (80038b4 <HAL_GPIO_Init+0x334>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d02b      	beq.n	80037b6 <HAL_GPIO_Init+0x236>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a55      	ldr	r2, [pc, #340]	; (80038b8 <HAL_GPIO_Init+0x338>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d025      	beq.n	80037b2 <HAL_GPIO_Init+0x232>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a54      	ldr	r2, [pc, #336]	; (80038bc <HAL_GPIO_Init+0x33c>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d01f      	beq.n	80037ae <HAL_GPIO_Init+0x22e>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a53      	ldr	r2, [pc, #332]	; (80038c0 <HAL_GPIO_Init+0x340>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d019      	beq.n	80037aa <HAL_GPIO_Init+0x22a>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_GPIO_Init+0x344>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_GPIO_Init+0x226>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a51      	ldr	r2, [pc, #324]	; (80038c8 <HAL_GPIO_Init+0x348>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d00d      	beq.n	80037a2 <HAL_GPIO_Init+0x222>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a50      	ldr	r2, [pc, #320]	; (80038cc <HAL_GPIO_Init+0x34c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d007      	beq.n	800379e <HAL_GPIO_Init+0x21e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a4f      	ldr	r2, [pc, #316]	; (80038d0 <HAL_GPIO_Init+0x350>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d101      	bne.n	800379a <HAL_GPIO_Init+0x21a>
 8003796:	2309      	movs	r3, #9
 8003798:	e012      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 800379a:	230a      	movs	r3, #10
 800379c:	e010      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 800379e:	2308      	movs	r3, #8
 80037a0:	e00e      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037a2:	2307      	movs	r3, #7
 80037a4:	e00c      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037a6:	2306      	movs	r3, #6
 80037a8:	e00a      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037aa:	2305      	movs	r3, #5
 80037ac:	e008      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037ae:	2304      	movs	r3, #4
 80037b0:	e006      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037b2:	2303      	movs	r3, #3
 80037b4:	e004      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e002      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <HAL_GPIO_Init+0x240>
 80037be:	2300      	movs	r3, #0
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	f002 0203 	and.w	r2, r2, #3
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	4093      	lsls	r3, r2
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80037d0:	4935      	ldr	r1, [pc, #212]	; (80038a8 <HAL_GPIO_Init+0x328>)
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	089b      	lsrs	r3, r3, #2
 80037d6:	3302      	adds	r3, #2
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037de:	4b3d      	ldr	r3, [pc, #244]	; (80038d4 <HAL_GPIO_Init+0x354>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003802:	4a34      	ldr	r2, [pc, #208]	; (80038d4 <HAL_GPIO_Init+0x354>)
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003808:	4b32      	ldr	r3, [pc, #200]	; (80038d4 <HAL_GPIO_Init+0x354>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	4313      	orrs	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <HAL_GPIO_Init+0x354>)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003832:	4b28      	ldr	r3, [pc, #160]	; (80038d4 <HAL_GPIO_Init+0x354>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	43db      	mvns	r3, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4013      	ands	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800384e:	69ba      	ldr	r2, [r7, #24]
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <HAL_GPIO_Init+0x354>)
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800385c:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <HAL_GPIO_Init+0x354>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d003      	beq.n	8003880 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003880:	4a14      	ldr	r2, [pc, #80]	; (80038d4 <HAL_GPIO_Init+0x354>)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3301      	adds	r3, #1
 800388a:	61fb      	str	r3, [r7, #28]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b0f      	cmp	r3, #15
 8003890:	f67f ae86 	bls.w	80035a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003894:	bf00      	nop
 8003896:	bf00      	nop
 8003898:	3724      	adds	r7, #36	; 0x24
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40020000 	.word	0x40020000
 80038b0:	40020400 	.word	0x40020400
 80038b4:	40020800 	.word	0x40020800
 80038b8:	40020c00 	.word	0x40020c00
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40021400 	.word	0x40021400
 80038c4:	40021800 	.word	0x40021800
 80038c8:	40021c00 	.word	0x40021c00
 80038cc:	40022000 	.word	0x40022000
 80038d0:	40022400 	.word	0x40022400
 80038d4:	40013c00 	.word	0x40013c00

080038d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	807b      	strh	r3, [r7, #2]
 80038e4:	4613      	mov	r3, r2
 80038e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038e8:	787b      	ldrb	r3, [r7, #1]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ee:	887a      	ldrh	r2, [r7, #2]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80038f4:	e003      	b.n	80038fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80038f6:	887b      	ldrh	r3, [r7, #2]
 80038f8:	041a      	lsls	r2, r3, #16
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	619a      	str	r2, [r3, #24]
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800390a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800390c:	b08f      	sub	sp, #60	; 0x3c
 800390e:	af0a      	add	r7, sp, #40	; 0x28
 8003910:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e116      	b.n	8003b4a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7fe fbf2 	bl	8002120 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003948:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f001 ff3a 	bl	80057d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	687e      	ldr	r6, [r7, #4]
 8003968:	466d      	mov	r5, sp
 800396a:	f106 0410 	add.w	r4, r6, #16
 800396e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003970:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003974:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003976:	e894 0003 	ldmia.w	r4, {r0, r1}
 800397a:	e885 0003 	stmia.w	r5, {r0, r1}
 800397e:	1d33      	adds	r3, r6, #4
 8003980:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003982:	6838      	ldr	r0, [r7, #0]
 8003984:	f001 fece 	bl	8005724 <USB_CoreInit>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0d7      	b.n	8003b4a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2100      	movs	r1, #0
 80039a0:	4618      	mov	r0, r3
 80039a2:	f001 ff28 	bl	80057f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e04a      	b.n	8003a42 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	440b      	add	r3, r1
 80039ba:	333d      	adds	r3, #61	; 0x3d
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039c0:	7bfa      	ldrb	r2, [r7, #15]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	4413      	add	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	333c      	adds	r3, #60	; 0x3c
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039d4:	7bfa      	ldrb	r2, [r7, #15]
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	b298      	uxth	r0, r3
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	4413      	add	r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3344      	adds	r3, #68	; 0x44
 80039e8:	4602      	mov	r2, r0
 80039ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	4413      	add	r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3340      	adds	r3, #64	; 0x40
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a14:	7bfa      	ldrb	r2, [r7, #15]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	334c      	adds	r3, #76	; 0x4c
 8003a24:	2200      	movs	r2, #0
 8003a26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a28:	7bfa      	ldrb	r2, [r7, #15]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3354      	adds	r3, #84	; 0x54
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	7bfa      	ldrb	r2, [r7, #15]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d3af      	bcc.n	80039ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e044      	b.n	8003adc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003a7a:	7bfa      	ldrb	r2, [r7, #15]
 8003a7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aaa:	7bfa      	ldrb	r2, [r7, #15]
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ac0:	7bfa      	ldrb	r2, [r7, #15]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	73fb      	strb	r3, [r7, #15]
 8003adc:	7bfa      	ldrb	r2, [r7, #15]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d3b5      	bcc.n	8003a52 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	687e      	ldr	r6, [r7, #4]
 8003aee:	466d      	mov	r5, sp
 8003af0:	f106 0410 	add.w	r4, r6, #16
 8003af4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003afa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003afc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b00:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b04:	1d33      	adds	r3, r6, #4
 8003b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b08:	6838      	ldr	r0, [r7, #0]
 8003b0a:	f001 fec1 	bl	8005890 <USB_DevInit>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e014      	b.n	8003b4a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f80b 	bl	8003b54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f002 f87f 	bl	8005c46 <USB_DevDisconnect>

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b82:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	10000003 	.word	0x10000003

08003b9c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba0:	4b05      	ldr	r3, [pc, #20]	; (8003bb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	; (8003bb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003baa:	6013      	str	r3, [r2, #0]
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	40007000 	.word	0x40007000

08003bbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	4b23      	ldr	r3, [pc, #140]	; (8003c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	4a22      	ldr	r2, [pc, #136]	; (8003c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <HAL_PWREx_EnableOverDrive+0x98>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bea:	f7fe fc7b 	bl	80024e4 <HAL_GetTick>
 8003bee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003bf0:	e009      	b.n	8003c06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003bf2:	f7fe fc77 	bl	80024e4 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c00:	d901      	bls.n	8003c06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e022      	b.n	8003c4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c06:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c12:	d1ee      	bne.n	8003bf2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c14:	4b10      	ldr	r3, [pc, #64]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a0f      	ldr	r2, [pc, #60]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c20:	f7fe fc60 	bl	80024e4 <HAL_GetTick>
 8003c24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c26:	e009      	b.n	8003c3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c28:	f7fe fc5c 	bl	80024e4 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c36:	d901      	bls.n	8003c3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e007      	b.n	8003c4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003c3c:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c48:	d1ee      	bne.n	8003c28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3708      	adds	r7, #8
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	40007000 	.word	0x40007000

08003c5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e29b      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 8087 	beq.w	8003d8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c80:	4b96      	ldr	r3, [pc, #600]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8c:	4b93      	ldr	r3, [pc, #588]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 030c 	and.w	r3, r3, #12
 8003c94:	2b08      	cmp	r3, #8
 8003c96:	d112      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62>
 8003c98:	4b90      	ldr	r3, [pc, #576]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca4:	d10b      	bne.n	8003cbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca6:	4b8d      	ldr	r3, [pc, #564]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d06c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x130>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d168      	bne.n	8003d8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e275      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc6:	d106      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x7a>
 8003cc8:	4b84      	ldr	r3, [pc, #528]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a83      	ldr	r2, [pc, #524]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	e02e      	b.n	8003d34 <HAL_RCC_OscConfig+0xd8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x9c>
 8003cde:	4b7f      	ldr	r3, [pc, #508]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a7e      	ldr	r2, [pc, #504]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b7c      	ldr	r3, [pc, #496]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a7b      	ldr	r2, [pc, #492]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xd8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0xc0>
 8003d02:	4b76      	ldr	r3, [pc, #472]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a75      	ldr	r2, [pc, #468]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b73      	ldr	r3, [pc, #460]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a72      	ldr	r2, [pc, #456]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xd8>
 8003d1c:	4b6f      	ldr	r3, [pc, #444]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a6e      	ldr	r2, [pc, #440]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b6c      	ldr	r3, [pc, #432]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6b      	ldr	r2, [pc, #428]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fbd2 	bl	80024e4 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fe fbce 	bl	80024e4 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	; 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e229      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b61      	ldr	r3, [pc, #388]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xe8>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fbbe 	bl	80024e4 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fbba 	bl	80024e4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e215      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b57      	ldr	r3, [pc, #348]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x110>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d069      	beq.n	8003e6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9a:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x190>
 8003db2:	4b4a      	ldr	r3, [pc, #296]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x17a>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1e9      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b41      	ldr	r3, [pc, #260]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	493d      	ldr	r1, [pc, #244]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e040      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d023      	beq.n	8003e3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b39      	ldr	r3, [pc, #228]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a38      	ldr	r2, [pc, #224]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e00:	f7fe fb70 	bl	80024e4 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e08:	f7fe fb6c 	bl	80024e4 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e1c7      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	4b30      	ldr	r3, [pc, #192]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4929      	ldr	r1, [pc, #164]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
 8003e3a:	e018      	b.n	8003e6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e3c:	4b27      	ldr	r3, [pc, #156]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a26      	ldr	r2, [pc, #152]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e42:	f023 0301 	bic.w	r3, r3, #1
 8003e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe fb4c 	bl	80024e4 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe fb48 	bl	80024e4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e1a3      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	4b1e      	ldr	r3, [pc, #120]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d038      	beq.n	8003eec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	695b      	ldr	r3, [r3, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d019      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e82:	4b16      	ldr	r3, [pc, #88]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e86:	4a15      	ldr	r2, [pc, #84]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8e:	f7fe fb29 	bl	80024e4 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e96:	f7fe fb25 	bl	80024e4 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e180      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d0f0      	beq.n	8003e96 <HAL_RCC_OscConfig+0x23a>
 8003eb4:	e01a      	b.n	8003eec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb6:	4b09      	ldr	r3, [pc, #36]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eba:	4a08      	ldr	r2, [pc, #32]	; (8003edc <HAL_RCC_OscConfig+0x280>)
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec2:	f7fe fb0f 	bl	80024e4 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eca:	f7fe fb0b 	bl	80024e4 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d903      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e166      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
 8003edc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	4b92      	ldr	r3, [pc, #584]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ee      	bne.n	8003eca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80a4 	beq.w	8004042 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b8c      	ldr	r3, [pc, #560]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10d      	bne.n	8003f22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0a:	4a88      	ldr	r2, [pc, #544]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6413      	str	r3, [r2, #64]	; 0x40
 8003f12:	4b86      	ldr	r3, [pc, #536]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1a:	60bb      	str	r3, [r7, #8]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f22:	4b83      	ldr	r3, [pc, #524]	; (8004130 <HAL_RCC_OscConfig+0x4d4>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d118      	bne.n	8003f60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f2e:	4b80      	ldr	r3, [pc, #512]	; (8004130 <HAL_RCC_OscConfig+0x4d4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a7f      	ldr	r2, [pc, #508]	; (8004130 <HAL_RCC_OscConfig+0x4d4>)
 8003f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3a:	f7fe fad3 	bl	80024e4 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f42:	f7fe facf 	bl	80024e4 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b64      	cmp	r3, #100	; 0x64
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e12a      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f54:	4b76      	ldr	r3, [pc, #472]	; (8004130 <HAL_RCC_OscConfig+0x4d4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0x31a>
 8003f68:	4b70      	ldr	r3, [pc, #448]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a6f      	ldr	r2, [pc, #444]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f6e:	f043 0301 	orr.w	r3, r3, #1
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
 8003f74:	e02d      	b.n	8003fd2 <HAL_RCC_OscConfig+0x376>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0x33c>
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a6a      	ldr	r2, [pc, #424]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f84:	f023 0301 	bic.w	r3, r3, #1
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8a:	4b68      	ldr	r3, [pc, #416]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a67      	ldr	r2, [pc, #412]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003f90:	f023 0304 	bic.w	r3, r3, #4
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	e01c      	b.n	8003fd2 <HAL_RCC_OscConfig+0x376>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCC_OscConfig+0x35e>
 8003fa0:	4b62      	ldr	r3, [pc, #392]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a61      	ldr	r2, [pc, #388]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fa6:	f043 0304 	orr.w	r3, r3, #4
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	4b5f      	ldr	r3, [pc, #380]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a5e      	ldr	r2, [pc, #376]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb8:	e00b      	b.n	8003fd2 <HAL_RCC_OscConfig+0x376>
 8003fba:	4b5c      	ldr	r3, [pc, #368]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a5b      	ldr	r2, [pc, #364]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fc0:	f023 0301 	bic.w	r3, r3, #1
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc6:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003fcc:	f023 0304 	bic.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d015      	beq.n	8004006 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fe fa83 	bl	80024e4 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe0:	e00a      	b.n	8003ff8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fe2:	f7fe fa7f 	bl	80024e4 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e0d8      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ee      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x386>
 8004004:	e014      	b.n	8004030 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004006:	f7fe fa6d 	bl	80024e4 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800400c:	e00a      	b.n	8004024 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400e:	f7fe fa69 	bl	80024e4 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	f241 3288 	movw	r2, #5000	; 0x1388
 800401c:	4293      	cmp	r3, r2
 800401e:	d901      	bls.n	8004024 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e0c2      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004024:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1ee      	bne.n	800400e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d105      	bne.n	8004042 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004036:	4b3d      	ldr	r3, [pc, #244]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	4a3c      	ldr	r2, [pc, #240]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 800403c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80ae 	beq.w	80041a8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800404c:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d06d      	beq.n	8004134 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d14b      	bne.n	80040f8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004060:	4b32      	ldr	r3, [pc, #200]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a31      	ldr	r2, [pc, #196]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8004066:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800406a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406c:	f7fe fa3a 	bl	80024e4 <HAL_GetTick>
 8004070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004072:	e008      	b.n	8004086 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004074:	f7fe fa36 	bl	80024e4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d901      	bls.n	8004086 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	e091      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004086:	4b29      	ldr	r3, [pc, #164]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1f0      	bne.n	8004074 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69da      	ldr	r2, [r3, #28]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	019b      	lsls	r3, r3, #6
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	085b      	lsrs	r3, r3, #1
 80040aa:	3b01      	subs	r3, #1
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	061b      	lsls	r3, r3, #24
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	491b      	ldr	r1, [pc, #108]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fe fa08 	bl	80024e4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d8:	f7fe fa04 	bl	80024e4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e05f      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x47c>
 80040f6:	e057      	b.n	80041a8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0b      	ldr	r2, [pc, #44]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 80040fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fe f9ee 	bl	80024e4 <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe f9ea 	bl	80024e4 <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e045      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	4b03      	ldr	r3, [pc, #12]	; (800412c <HAL_RCC_OscConfig+0x4d0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x4b0>
 800412a:	e03d      	b.n	80041a8 <HAL_RCC_OscConfig+0x54c>
 800412c:	40023800 	.word	0x40023800
 8004130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004134:	4b1f      	ldr	r3, [pc, #124]	; (80041b4 <HAL_RCC_OscConfig+0x558>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d030      	beq.n	80041a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d129      	bne.n	80041a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d122      	bne.n	80041a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800416a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800416c:	4293      	cmp	r3, r2
 800416e:	d119      	bne.n	80041a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	085b      	lsrs	r3, r3, #1
 800417c:	3b01      	subs	r3, #1
 800417e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004180:	429a      	cmp	r2, r3
 8004182:	d10f      	bne.n	80041a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004190:	429a      	cmp	r2, r3
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e000      	b.n	80041aa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800

080041b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0d0      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d0:	4b6a      	ldr	r3, [pc, #424]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d910      	bls.n	8004200 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041de:	4b67      	ldr	r3, [pc, #412]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f023 020f 	bic.w	r2, r3, #15
 80041e6:	4965      	ldr	r1, [pc, #404]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d040      	beq.n	80042dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d115      	bne.n	800429a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800427a:	4b41      	ldr	r3, [pc, #260]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e073      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06b      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800429a:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f023 0203 	bic.w	r2, r3, #3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4936      	ldr	r1, [pc, #216]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ac:	f7fe f91a 	bl	80024e4 <HAL_GetTick>
 80042b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b4:	f7fe f916 	bl	80024e4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e053      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	4b2d      	ldr	r3, [pc, #180]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 020c 	and.w	r2, r3, #12
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1eb      	bne.n	80042b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042dc:	4b27      	ldr	r3, [pc, #156]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d210      	bcs.n	800430c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ea:	4b24      	ldr	r3, [pc, #144]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 020f 	bic.w	r2, r3, #15
 80042f2:	4922      	ldr	r1, [pc, #136]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	; (800437c <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f821 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800434e:	4602      	mov	r2, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_RCC_ClockConfig+0x1c8>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <HAL_RCC_ClockConfig+0x1cc>)
 800435c:	5ccb      	ldrb	r3, [r1, r3]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1d0>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <HAL_RCC_ClockConfig+0x1d4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f876 	bl	800245c <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	0801a618 	.word	0x0801a618
 8004388:	20000000 	.word	0x20000000
 800438c:	20000004 	.word	0x20000004

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b094      	sub	sp, #80	; 0x50
 8004396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	647b      	str	r3, [r7, #68]	; 0x44
 800439c:	2300      	movs	r3, #0
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	2300      	movs	r3, #0
 80043a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80043a4:	2300      	movs	r3, #0
 80043a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a8:	4b79      	ldr	r3, [pc, #484]	; (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x40>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	f200 80e1 	bhi.w	800457c <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x34>
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x3a>
 80043c2:	e0db      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b73      	ldr	r3, [pc, #460]	; (8004594 <HAL_RCC_GetSysClockFreq+0x204>)
 80043c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c8:	e0db      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ca:	4b73      	ldr	r3, [pc, #460]	; (8004598 <HAL_RCC_GetSysClockFreq+0x208>)
 80043cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043ce:	e0d8      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d0:	4b6f      	ldr	r3, [pc, #444]	; (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043da:	4b6d      	ldr	r3, [pc, #436]	; (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d063      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b6a      	ldr	r3, [pc, #424]	; (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	2200      	movs	r2, #0
 80043ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f8:	633b      	str	r3, [r7, #48]	; 0x30
 80043fa:	2300      	movs	r3, #0
 80043fc:	637b      	str	r3, [r7, #52]	; 0x34
 80043fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	f04f 0000 	mov.w	r0, #0
 800440a:	f04f 0100 	mov.w	r1, #0
 800440e:	0159      	lsls	r1, r3, #5
 8004410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004414:	0150      	lsls	r0, r2, #5
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4621      	mov	r1, r4
 800441c:	1a51      	subs	r1, r2, r1
 800441e:	6139      	str	r1, [r7, #16]
 8004420:	4629      	mov	r1, r5
 8004422:	eb63 0301 	sbc.w	r3, r3, r1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004434:	4659      	mov	r1, fp
 8004436:	018b      	lsls	r3, r1, #6
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800443e:	4651      	mov	r1, sl
 8004440:	018a      	lsls	r2, r1, #6
 8004442:	4651      	mov	r1, sl
 8004444:	ebb2 0801 	subs.w	r8, r2, r1
 8004448:	4659      	mov	r1, fp
 800444a:	eb63 0901 	sbc.w	r9, r3, r1
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800445a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800445e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004462:	4690      	mov	r8, r2
 8004464:	4699      	mov	r9, r3
 8004466:	4623      	mov	r3, r4
 8004468:	eb18 0303 	adds.w	r3, r8, r3
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	462b      	mov	r3, r5
 8004470:	eb49 0303 	adc.w	r3, r9, r3
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004482:	4629      	mov	r1, r5
 8004484:	024b      	lsls	r3, r1, #9
 8004486:	4621      	mov	r1, r4
 8004488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800448c:	4621      	mov	r1, r4
 800448e:	024a      	lsls	r2, r1, #9
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004496:	2200      	movs	r2, #0
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
 800449a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044a0:	f7fb ff6e 	bl	8000380 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4613      	mov	r3, r2
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ac:	e058      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b38      	ldr	r3, [pc, #224]	; (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2200      	movs	r2, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	4611      	mov	r1, r2
 80044ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044be:	623b      	str	r3, [r7, #32]
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
 80044c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	f04f 0000 	mov.w	r0, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	0159      	lsls	r1, r3, #5
 80044d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044da:	0150      	lsls	r0, r2, #5
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4641      	mov	r1, r8
 80044e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044e6:	4649      	mov	r1, r9
 80044e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004500:	ebb2 040a 	subs.w	r4, r2, sl
 8004504:	eb63 050b 	sbc.w	r5, r3, fp
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	00eb      	lsls	r3, r5, #3
 8004512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004516:	00e2      	lsls	r2, r4, #3
 8004518:	4614      	mov	r4, r2
 800451a:	461d      	mov	r5, r3
 800451c:	4643      	mov	r3, r8
 800451e:	18e3      	adds	r3, r4, r3
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	464b      	mov	r3, r9
 8004524:	eb45 0303 	adc.w	r3, r5, r3
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004536:	4629      	mov	r1, r5
 8004538:	028b      	lsls	r3, r1, #10
 800453a:	4621      	mov	r1, r4
 800453c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004540:	4621      	mov	r1, r4
 8004542:	028a      	lsls	r2, r1, #10
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800454a:	2200      	movs	r2, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	61fa      	str	r2, [r7, #28]
 8004550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004554:	f7fb ff14 	bl	8000380 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004570:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800457a:	e002      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b05      	ldr	r3, [pc, #20]	; (8004594 <HAL_RCC_GetSysClockFreq+0x204>)
 800457e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004582:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004584:	4618      	mov	r0, r3
 8004586:	3750      	adds	r7, #80	; 0x50
 8004588:	46bd      	mov	sp, r7
 800458a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200

0800459c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b03      	ldr	r3, [pc, #12]	; (80045b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000000 	.word	0x20000000

080045b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b8:	f7ff fff0 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0a9b      	lsrs	r3, r3, #10
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	; (80045d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	0801a628 	.word	0x0801a628

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e0:	f7ff ffdc 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0b5b      	lsrs	r3, r3, #13
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	; (8004600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	0801a628 	.word	0x0801a628

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b088      	sub	sp, #32
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004614:	2300      	movs	r3, #0
 8004616:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	2b00      	cmp	r3, #0
 800462a:	d012      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800462c:	4b69      	ldr	r3, [pc, #420]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	4a68      	ldr	r2, [pc, #416]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004632:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004636:	6093      	str	r3, [r2, #8]
 8004638:	4b66      	ldr	r3, [pc, #408]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	4964      	ldr	r1, [pc, #400]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464a:	2b00      	cmp	r3, #0
 800464c:	d101      	bne.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800464e:	2301      	movs	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d017      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800465e:	4b5d      	ldr	r3, [pc, #372]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466c:	4959      	ldr	r1, [pc, #356]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467c:	d101      	bne.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800467e:	2301      	movs	r3, #1
 8004680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800468a:	2301      	movs	r3, #1
 800468c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d017      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800469a:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800469c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046a0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a8:	494a      	ldr	r1, [pc, #296]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046b8:	d101      	bne.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80046ba:	2301      	movs	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80046c6:	2301      	movs	r3, #1
 80046c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80046d6:	2301      	movs	r3, #1
 80046d8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 808b 	beq.w	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046e8:	4b3a      	ldr	r3, [pc, #232]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ec:	4a39      	ldr	r2, [pc, #228]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6413      	str	r3, [r2, #64]	; 0x40
 80046f4:	4b37      	ldr	r3, [pc, #220]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004700:	4b35      	ldr	r3, [pc, #212]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a34      	ldr	r2, [pc, #208]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800470c:	f7fd feea 	bl	80024e4 <HAL_GetTick>
 8004710:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004714:	f7fd fee6 	bl	80024e4 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e38f      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004726:	4b2c      	ldr	r3, [pc, #176]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004732:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d035      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	429a      	cmp	r2, r3
 800474e:	d02e      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004750:	4b20      	ldr	r3, [pc, #128]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004758:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800475a:	4b1e      	ldr	r3, [pc, #120]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	4a1d      	ldr	r2, [pc, #116]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004764:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004766:	4b1b      	ldr	r3, [pc, #108]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800476c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004770:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004772:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004778:	4b16      	ldr	r3, [pc, #88]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800477a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d114      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd feae 	bl	80024e4 <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478a:	e00a      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800478c:	f7fd feaa 	bl	80024e4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	f241 3288 	movw	r2, #5000	; 0x1388
 800479a:	4293      	cmp	r3, r2
 800479c:	d901      	bls.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e351      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a2:	4b0c      	ldr	r3, [pc, #48]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0ee      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ba:	d111      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80047bc:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047ca:	400b      	ands	r3, r1
 80047cc:	4901      	ldr	r1, [pc, #4]	; (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	608b      	str	r3, [r1, #8]
 80047d2:	e00b      	b.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80047d4:	40023800 	.word	0x40023800
 80047d8:	40007000 	.word	0x40007000
 80047dc:	0ffffcff 	.word	0x0ffffcff
 80047e0:	4bac      	ldr	r3, [pc, #688]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	4aab      	ldr	r2, [pc, #684]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80047ea:	6093      	str	r3, [r2, #8]
 80047ec:	4ba9      	ldr	r3, [pc, #676]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047f8:	49a6      	ldr	r1, [pc, #664]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800480a:	4ba2      	ldr	r3, [pc, #648]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004810:	4aa0      	ldr	r2, [pc, #640]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004812:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004816:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800481a:	4b9e      	ldr	r3, [pc, #632]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800481c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	499b      	ldr	r1, [pc, #620]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004838:	4b96      	ldr	r3, [pc, #600]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004846:	4993      	ldr	r1, [pc, #588]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800485a:	4b8e      	ldr	r3, [pc, #568]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004868:	498a      	ldr	r1, [pc, #552]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800487c:	4b85      	ldr	r3, [pc, #532]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800488a:	4982      	ldr	r1, [pc, #520]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800489e:	4b7d      	ldr	r3, [pc, #500]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4979      	ldr	r1, [pc, #484]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048c0:	4b74      	ldr	r3, [pc, #464]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c6:	f023 0203 	bic.w	r2, r3, #3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4971      	ldr	r1, [pc, #452]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048e2:	4b6c      	ldr	r3, [pc, #432]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f023 020c 	bic.w	r2, r3, #12
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f0:	4968      	ldr	r1, [pc, #416]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004904:	4b63      	ldr	r3, [pc, #396]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	4960      	ldr	r1, [pc, #384]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004926:	4b5b      	ldr	r3, [pc, #364]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004934:	4957      	ldr	r1, [pc, #348]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004948:	4b52      	ldr	r3, [pc, #328]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004956:	494f      	ldr	r1, [pc, #316]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800496a:	4b4a      	ldr	r3, [pc, #296]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800496c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004970:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	4946      	ldr	r1, [pc, #280]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800498c:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800498e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499a:	493e      	ldr	r1, [pc, #248]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80049ae:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049bc:	4935      	ldr	r1, [pc, #212]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d00a      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80049d0:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049de:	492d      	ldr	r1, [pc, #180]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d011      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80049f2:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a00:	4924      	ldr	r1, [pc, #144]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a10:	d101      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a40:	4914      	ldr	r1, [pc, #80]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a64:	490b      	ldr	r1, [pc, #44]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00f      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a88:	4902      	ldr	r1, [pc, #8]	; (8004a94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a90:	e002      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004a92:	bf00      	nop
 8004a94:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00b      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aa4:	4b8a      	ldr	r3, [pc, #552]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004aaa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab4:	4986      	ldr	r1, [pc, #536]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00b      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ac8:	4b81      	ldr	r3, [pc, #516]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ace:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad8:	497d      	ldr	r1, [pc, #500]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d006      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 80d6 	beq.w	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004af4:	4b76      	ldr	r3, [pc, #472]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a75      	ldr	r2, [pc, #468]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004afa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004afe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b00:	f7fd fcf0 	bl	80024e4 <HAL_GetTick>
 8004b04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b08:	f7fd fcec 	bl	80024e4 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b64      	cmp	r3, #100	; 0x64
 8004b14:	d901      	bls.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e195      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b1a:	4b6d      	ldr	r3, [pc, #436]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d021      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d11d      	bne.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b3a:	4b65      	ldr	r3, [pc, #404]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b48:	4b61      	ldr	r3, [pc, #388]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b4e:	0e1b      	lsrs	r3, r3, #24
 8004b50:	f003 030f 	and.w	r3, r3, #15
 8004b54:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	019a      	lsls	r2, r3, #6
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	071b      	lsls	r3, r3, #28
 8004b6e:	4958      	ldr	r1, [pc, #352]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02e      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba0:	d129      	bne.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ba2:	4b4b      	ldr	r3, [pc, #300]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	0c1b      	lsrs	r3, r3, #16
 8004baa:	f003 0303 	and.w	r3, r3, #3
 8004bae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004bb0:	4b47      	ldr	r3, [pc, #284]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb6:	0f1b      	lsrs	r3, r3, #28
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	019a      	lsls	r2, r3, #6
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	041b      	lsls	r3, r3, #16
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	071b      	lsls	r3, r3, #28
 8004bd6:	493e      	ldr	r1, [pc, #248]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004bde:	4b3c      	ldr	r3, [pc, #240]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004be0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004be4:	f023 021f 	bic.w	r2, r3, #31
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4938      	ldr	r1, [pc, #224]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01d      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c10:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c16:	0f1b      	lsrs	r3, r3, #28
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	019a      	lsls	r2, r3, #6
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	061b      	lsls	r3, r3, #24
 8004c30:	431a      	orrs	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	4926      	ldr	r1, [pc, #152]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d011      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	071b      	lsls	r3, r3, #28
 8004c66:	491a      	ldr	r1, [pc, #104]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a17      	ldr	r2, [pc, #92]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fd fc33 	bl	80024e4 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c82:	f7fd fc2f 	bl	80024e4 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b64      	cmp	r3, #100	; 0x64
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e0d8      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	f040 80ce 	bne.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb4:	f7fd fc16 	bl	80024e4 <HAL_GetTick>
 8004cb8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cba:	e00b      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004cbc:	f7fd fc12 	bl	80024e4 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b64      	cmp	r3, #100	; 0x64
 8004cc8:	d904      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0bb      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004cd4:	4b5e      	ldr	r3, [pc, #376]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ce0:	d0ec      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d02e      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d12a      	bne.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d0a:	4b51      	ldr	r3, [pc, #324]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	0c1b      	lsrs	r3, r3, #16
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d18:	4b4d      	ldr	r3, [pc, #308]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1e:	0f1b      	lsrs	r3, r3, #28
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	019a      	lsls	r2, r3, #6
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	041b      	lsls	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	061b      	lsls	r3, r3, #24
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	071b      	lsls	r3, r3, #28
 8004d3e:	4944      	ldr	r1, [pc, #272]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d46:	4b42      	ldr	r3, [pc, #264]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	3b01      	subs	r3, #1
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	493d      	ldr	r1, [pc, #244]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d022      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d74:	d11d      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d76:	4b36      	ldr	r3, [pc, #216]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7c:	0e1b      	lsrs	r3, r3, #24
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d84:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	0f1b      	lsrs	r3, r3, #28
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	019a      	lsls	r2, r3, #6
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	041b      	lsls	r3, r3, #16
 8004d9e:	431a      	orrs	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	061b      	lsls	r3, r3, #24
 8004da4:	431a      	orrs	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	071b      	lsls	r3, r3, #28
 8004daa:	4929      	ldr	r1, [pc, #164]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d028      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	0e1b      	lsrs	r3, r3, #24
 8004dc6:	f003 030f 	and.w	r3, r3, #15
 8004dca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dcc:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	0c1b      	lsrs	r3, r3, #16
 8004dd4:	f003 0303 	and.w	r3, r3, #3
 8004dd8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	019a      	lsls	r2, r3, #6
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	041b      	lsls	r3, r3, #16
 8004de4:	431a      	orrs	r2, r3
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	061b      	lsls	r3, r3, #24
 8004dea:	431a      	orrs	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	071b      	lsls	r3, r3, #28
 8004df2:	4917      	ldr	r1, [pc, #92]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e08:	4911      	ldr	r1, [pc, #68]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0e      	ldr	r2, [pc, #56]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1c:	f7fd fb62 	bl	80024e4 <HAL_GetTick>
 8004e20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e24:	f7fd fb5e 	bl	80024e4 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e007      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e42:	d1ef      	bne.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3720      	adds	r7, #32
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023800 	.word	0x40023800

08004e54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e040      	b.n	8004ee8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d106      	bne.n	8004e7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7fd f8f2 	bl	8002060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2224      	movs	r2, #36	; 0x24
 8004e80:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0201 	bic.w	r2, r2, #1
 8004e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f82c 	bl	8004ef0 <UART_SetConfig>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e022      	b.n	8004ee8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fa84 	bl	80053b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0201 	orr.w	r2, r2, #1
 8004ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fb0b 	bl	80054fc <UART_CheckIdleState>
 8004ee6:	4603      	mov	r3, r0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4ba6      	ldr	r3, [pc, #664]	; (80051b4 <UART_SetConfig+0x2c4>)
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	6979      	ldr	r1, [r7, #20]
 8004f24:	430b      	orrs	r3, r1
 8004f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a94      	ldr	r2, [pc, #592]	; (80051b8 <UART_SetConfig+0x2c8>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d120      	bne.n	8004fae <UART_SetConfig+0xbe>
 8004f6c:	4b93      	ldr	r3, [pc, #588]	; (80051bc <UART_SetConfig+0x2cc>)
 8004f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d816      	bhi.n	8004fa8 <UART_SetConfig+0xb8>
 8004f7a:	a201      	add	r2, pc, #4	; (adr r2, 8004f80 <UART_SetConfig+0x90>)
 8004f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f80:	08004f91 	.word	0x08004f91
 8004f84:	08004f9d 	.word	0x08004f9d
 8004f88:	08004f97 	.word	0x08004f97
 8004f8c:	08004fa3 	.word	0x08004fa3
 8004f90:	2301      	movs	r3, #1
 8004f92:	77fb      	strb	r3, [r7, #31]
 8004f94:	e150      	b.n	8005238 <UART_SetConfig+0x348>
 8004f96:	2302      	movs	r3, #2
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	e14d      	b.n	8005238 <UART_SetConfig+0x348>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	77fb      	strb	r3, [r7, #31]
 8004fa0:	e14a      	b.n	8005238 <UART_SetConfig+0x348>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	77fb      	strb	r3, [r7, #31]
 8004fa6:	e147      	b.n	8005238 <UART_SetConfig+0x348>
 8004fa8:	2310      	movs	r3, #16
 8004faa:	77fb      	strb	r3, [r7, #31]
 8004fac:	e144      	b.n	8005238 <UART_SetConfig+0x348>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a83      	ldr	r2, [pc, #524]	; (80051c0 <UART_SetConfig+0x2d0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d132      	bne.n	800501e <UART_SetConfig+0x12e>
 8004fb8:	4b80      	ldr	r3, [pc, #512]	; (80051bc <UART_SetConfig+0x2cc>)
 8004fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b0c      	cmp	r3, #12
 8004fc4:	d828      	bhi.n	8005018 <UART_SetConfig+0x128>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <UART_SetConfig+0xdc>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08005001 	.word	0x08005001
 8004fd0:	08005019 	.word	0x08005019
 8004fd4:	08005019 	.word	0x08005019
 8004fd8:	08005019 	.word	0x08005019
 8004fdc:	0800500d 	.word	0x0800500d
 8004fe0:	08005019 	.word	0x08005019
 8004fe4:	08005019 	.word	0x08005019
 8004fe8:	08005019 	.word	0x08005019
 8004fec:	08005007 	.word	0x08005007
 8004ff0:	08005019 	.word	0x08005019
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005019 	.word	0x08005019
 8004ffc:	08005013 	.word	0x08005013
 8005000:	2300      	movs	r3, #0
 8005002:	77fb      	strb	r3, [r7, #31]
 8005004:	e118      	b.n	8005238 <UART_SetConfig+0x348>
 8005006:	2302      	movs	r3, #2
 8005008:	77fb      	strb	r3, [r7, #31]
 800500a:	e115      	b.n	8005238 <UART_SetConfig+0x348>
 800500c:	2304      	movs	r3, #4
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e112      	b.n	8005238 <UART_SetConfig+0x348>
 8005012:	2308      	movs	r3, #8
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e10f      	b.n	8005238 <UART_SetConfig+0x348>
 8005018:	2310      	movs	r3, #16
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e10c      	b.n	8005238 <UART_SetConfig+0x348>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a68      	ldr	r2, [pc, #416]	; (80051c4 <UART_SetConfig+0x2d4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d120      	bne.n	800506a <UART_SetConfig+0x17a>
 8005028:	4b64      	ldr	r3, [pc, #400]	; (80051bc <UART_SetConfig+0x2cc>)
 800502a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005032:	2b30      	cmp	r3, #48	; 0x30
 8005034:	d013      	beq.n	800505e <UART_SetConfig+0x16e>
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d814      	bhi.n	8005064 <UART_SetConfig+0x174>
 800503a:	2b20      	cmp	r3, #32
 800503c:	d009      	beq.n	8005052 <UART_SetConfig+0x162>
 800503e:	2b20      	cmp	r3, #32
 8005040:	d810      	bhi.n	8005064 <UART_SetConfig+0x174>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <UART_SetConfig+0x15c>
 8005046:	2b10      	cmp	r3, #16
 8005048:	d006      	beq.n	8005058 <UART_SetConfig+0x168>
 800504a:	e00b      	b.n	8005064 <UART_SetConfig+0x174>
 800504c:	2300      	movs	r3, #0
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e0f2      	b.n	8005238 <UART_SetConfig+0x348>
 8005052:	2302      	movs	r3, #2
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e0ef      	b.n	8005238 <UART_SetConfig+0x348>
 8005058:	2304      	movs	r3, #4
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e0ec      	b.n	8005238 <UART_SetConfig+0x348>
 800505e:	2308      	movs	r3, #8
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e0e9      	b.n	8005238 <UART_SetConfig+0x348>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e0e6      	b.n	8005238 <UART_SetConfig+0x348>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a56      	ldr	r2, [pc, #344]	; (80051c8 <UART_SetConfig+0x2d8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d120      	bne.n	80050b6 <UART_SetConfig+0x1c6>
 8005074:	4b51      	ldr	r3, [pc, #324]	; (80051bc <UART_SetConfig+0x2cc>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800507e:	2bc0      	cmp	r3, #192	; 0xc0
 8005080:	d013      	beq.n	80050aa <UART_SetConfig+0x1ba>
 8005082:	2bc0      	cmp	r3, #192	; 0xc0
 8005084:	d814      	bhi.n	80050b0 <UART_SetConfig+0x1c0>
 8005086:	2b80      	cmp	r3, #128	; 0x80
 8005088:	d009      	beq.n	800509e <UART_SetConfig+0x1ae>
 800508a:	2b80      	cmp	r3, #128	; 0x80
 800508c:	d810      	bhi.n	80050b0 <UART_SetConfig+0x1c0>
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <UART_SetConfig+0x1a8>
 8005092:	2b40      	cmp	r3, #64	; 0x40
 8005094:	d006      	beq.n	80050a4 <UART_SetConfig+0x1b4>
 8005096:	e00b      	b.n	80050b0 <UART_SetConfig+0x1c0>
 8005098:	2300      	movs	r3, #0
 800509a:	77fb      	strb	r3, [r7, #31]
 800509c:	e0cc      	b.n	8005238 <UART_SetConfig+0x348>
 800509e:	2302      	movs	r3, #2
 80050a0:	77fb      	strb	r3, [r7, #31]
 80050a2:	e0c9      	b.n	8005238 <UART_SetConfig+0x348>
 80050a4:	2304      	movs	r3, #4
 80050a6:	77fb      	strb	r3, [r7, #31]
 80050a8:	e0c6      	b.n	8005238 <UART_SetConfig+0x348>
 80050aa:	2308      	movs	r3, #8
 80050ac:	77fb      	strb	r3, [r7, #31]
 80050ae:	e0c3      	b.n	8005238 <UART_SetConfig+0x348>
 80050b0:	2310      	movs	r3, #16
 80050b2:	77fb      	strb	r3, [r7, #31]
 80050b4:	e0c0      	b.n	8005238 <UART_SetConfig+0x348>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a44      	ldr	r2, [pc, #272]	; (80051cc <UART_SetConfig+0x2dc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d125      	bne.n	800510c <UART_SetConfig+0x21c>
 80050c0:	4b3e      	ldr	r3, [pc, #248]	; (80051bc <UART_SetConfig+0x2cc>)
 80050c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ce:	d017      	beq.n	8005100 <UART_SetConfig+0x210>
 80050d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050d4:	d817      	bhi.n	8005106 <UART_SetConfig+0x216>
 80050d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050da:	d00b      	beq.n	80050f4 <UART_SetConfig+0x204>
 80050dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050e0:	d811      	bhi.n	8005106 <UART_SetConfig+0x216>
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <UART_SetConfig+0x1fe>
 80050e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ea:	d006      	beq.n	80050fa <UART_SetConfig+0x20a>
 80050ec:	e00b      	b.n	8005106 <UART_SetConfig+0x216>
 80050ee:	2300      	movs	r3, #0
 80050f0:	77fb      	strb	r3, [r7, #31]
 80050f2:	e0a1      	b.n	8005238 <UART_SetConfig+0x348>
 80050f4:	2302      	movs	r3, #2
 80050f6:	77fb      	strb	r3, [r7, #31]
 80050f8:	e09e      	b.n	8005238 <UART_SetConfig+0x348>
 80050fa:	2304      	movs	r3, #4
 80050fc:	77fb      	strb	r3, [r7, #31]
 80050fe:	e09b      	b.n	8005238 <UART_SetConfig+0x348>
 8005100:	2308      	movs	r3, #8
 8005102:	77fb      	strb	r3, [r7, #31]
 8005104:	e098      	b.n	8005238 <UART_SetConfig+0x348>
 8005106:	2310      	movs	r3, #16
 8005108:	77fb      	strb	r3, [r7, #31]
 800510a:	e095      	b.n	8005238 <UART_SetConfig+0x348>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a2f      	ldr	r2, [pc, #188]	; (80051d0 <UART_SetConfig+0x2e0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d125      	bne.n	8005162 <UART_SetConfig+0x272>
 8005116:	4b29      	ldr	r3, [pc, #164]	; (80051bc <UART_SetConfig+0x2cc>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005120:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005124:	d017      	beq.n	8005156 <UART_SetConfig+0x266>
 8005126:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800512a:	d817      	bhi.n	800515c <UART_SetConfig+0x26c>
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005130:	d00b      	beq.n	800514a <UART_SetConfig+0x25a>
 8005132:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005136:	d811      	bhi.n	800515c <UART_SetConfig+0x26c>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <UART_SetConfig+0x254>
 800513c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005140:	d006      	beq.n	8005150 <UART_SetConfig+0x260>
 8005142:	e00b      	b.n	800515c <UART_SetConfig+0x26c>
 8005144:	2301      	movs	r3, #1
 8005146:	77fb      	strb	r3, [r7, #31]
 8005148:	e076      	b.n	8005238 <UART_SetConfig+0x348>
 800514a:	2302      	movs	r3, #2
 800514c:	77fb      	strb	r3, [r7, #31]
 800514e:	e073      	b.n	8005238 <UART_SetConfig+0x348>
 8005150:	2304      	movs	r3, #4
 8005152:	77fb      	strb	r3, [r7, #31]
 8005154:	e070      	b.n	8005238 <UART_SetConfig+0x348>
 8005156:	2308      	movs	r3, #8
 8005158:	77fb      	strb	r3, [r7, #31]
 800515a:	e06d      	b.n	8005238 <UART_SetConfig+0x348>
 800515c:	2310      	movs	r3, #16
 800515e:	77fb      	strb	r3, [r7, #31]
 8005160:	e06a      	b.n	8005238 <UART_SetConfig+0x348>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a1b      	ldr	r2, [pc, #108]	; (80051d4 <UART_SetConfig+0x2e4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d138      	bne.n	80051de <UART_SetConfig+0x2ee>
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <UART_SetConfig+0x2cc>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005176:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800517a:	d017      	beq.n	80051ac <UART_SetConfig+0x2bc>
 800517c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005180:	d82a      	bhi.n	80051d8 <UART_SetConfig+0x2e8>
 8005182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005186:	d00b      	beq.n	80051a0 <UART_SetConfig+0x2b0>
 8005188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800518c:	d824      	bhi.n	80051d8 <UART_SetConfig+0x2e8>
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <UART_SetConfig+0x2aa>
 8005192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005196:	d006      	beq.n	80051a6 <UART_SetConfig+0x2b6>
 8005198:	e01e      	b.n	80051d8 <UART_SetConfig+0x2e8>
 800519a:	2300      	movs	r3, #0
 800519c:	77fb      	strb	r3, [r7, #31]
 800519e:	e04b      	b.n	8005238 <UART_SetConfig+0x348>
 80051a0:	2302      	movs	r3, #2
 80051a2:	77fb      	strb	r3, [r7, #31]
 80051a4:	e048      	b.n	8005238 <UART_SetConfig+0x348>
 80051a6:	2304      	movs	r3, #4
 80051a8:	77fb      	strb	r3, [r7, #31]
 80051aa:	e045      	b.n	8005238 <UART_SetConfig+0x348>
 80051ac:	2308      	movs	r3, #8
 80051ae:	77fb      	strb	r3, [r7, #31]
 80051b0:	e042      	b.n	8005238 <UART_SetConfig+0x348>
 80051b2:	bf00      	nop
 80051b4:	efff69f3 	.word	0xefff69f3
 80051b8:	40011000 	.word	0x40011000
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40004400 	.word	0x40004400
 80051c4:	40004800 	.word	0x40004800
 80051c8:	40004c00 	.word	0x40004c00
 80051cc:	40005000 	.word	0x40005000
 80051d0:	40011400 	.word	0x40011400
 80051d4:	40007800 	.word	0x40007800
 80051d8:	2310      	movs	r3, #16
 80051da:	77fb      	strb	r3, [r7, #31]
 80051dc:	e02c      	b.n	8005238 <UART_SetConfig+0x348>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a72      	ldr	r2, [pc, #456]	; (80053ac <UART_SetConfig+0x4bc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d125      	bne.n	8005234 <UART_SetConfig+0x344>
 80051e8:	4b71      	ldr	r3, [pc, #452]	; (80053b0 <UART_SetConfig+0x4c0>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80051f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051f6:	d017      	beq.n	8005228 <UART_SetConfig+0x338>
 80051f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80051fc:	d817      	bhi.n	800522e <UART_SetConfig+0x33e>
 80051fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005202:	d00b      	beq.n	800521c <UART_SetConfig+0x32c>
 8005204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005208:	d811      	bhi.n	800522e <UART_SetConfig+0x33e>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <UART_SetConfig+0x326>
 800520e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005212:	d006      	beq.n	8005222 <UART_SetConfig+0x332>
 8005214:	e00b      	b.n	800522e <UART_SetConfig+0x33e>
 8005216:	2300      	movs	r3, #0
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e00d      	b.n	8005238 <UART_SetConfig+0x348>
 800521c:	2302      	movs	r3, #2
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e00a      	b.n	8005238 <UART_SetConfig+0x348>
 8005222:	2304      	movs	r3, #4
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e007      	b.n	8005238 <UART_SetConfig+0x348>
 8005228:	2308      	movs	r3, #8
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e004      	b.n	8005238 <UART_SetConfig+0x348>
 800522e:	2310      	movs	r3, #16
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e001      	b.n	8005238 <UART_SetConfig+0x348>
 8005234:	2310      	movs	r3, #16
 8005236:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005240:	d15b      	bne.n	80052fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	2b08      	cmp	r3, #8
 8005246:	d828      	bhi.n	800529a <UART_SetConfig+0x3aa>
 8005248:	a201      	add	r2, pc, #4	; (adr r2, 8005250 <UART_SetConfig+0x360>)
 800524a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524e:	bf00      	nop
 8005250:	08005275 	.word	0x08005275
 8005254:	0800527d 	.word	0x0800527d
 8005258:	08005285 	.word	0x08005285
 800525c:	0800529b 	.word	0x0800529b
 8005260:	0800528b 	.word	0x0800528b
 8005264:	0800529b 	.word	0x0800529b
 8005268:	0800529b 	.word	0x0800529b
 800526c:	0800529b 	.word	0x0800529b
 8005270:	08005293 	.word	0x08005293
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005274:	f7ff f99e 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 8005278:	61b8      	str	r0, [r7, #24]
        break;
 800527a:	e013      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800527c:	f7ff f9ae 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8005280:	61b8      	str	r0, [r7, #24]
        break;
 8005282:	e00f      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005284:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <UART_SetConfig+0x4c4>)
 8005286:	61bb      	str	r3, [r7, #24]
        break;
 8005288:	e00c      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800528a:	f7ff f881 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800528e:	61b8      	str	r0, [r7, #24]
        break;
 8005290:	e008      	b.n	80052a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005296:	61bb      	str	r3, [r7, #24]
        break;
 8005298:	e004      	b.n	80052a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	77bb      	strb	r3, [r7, #30]
        break;
 80052a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d074      	beq.n	8005394 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	005a      	lsls	r2, r3, #1
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	085b      	lsrs	r3, r3, #1
 80052b4:	441a      	add	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b0f      	cmp	r3, #15
 80052c4:	d916      	bls.n	80052f4 <UART_SetConfig+0x404>
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052cc:	d212      	bcs.n	80052f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	f023 030f 	bic.w	r3, r3, #15
 80052d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	085b      	lsrs	r3, r3, #1
 80052dc:	b29b      	uxth	r3, r3
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	89fb      	ldrh	r3, [r7, #14]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	89fa      	ldrh	r2, [r7, #14]
 80052f0:	60da      	str	r2, [r3, #12]
 80052f2:	e04f      	b.n	8005394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	77bb      	strb	r3, [r7, #30]
 80052f8:	e04c      	b.n	8005394 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052fa:	7ffb      	ldrb	r3, [r7, #31]
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d828      	bhi.n	8005352 <UART_SetConfig+0x462>
 8005300:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <UART_SetConfig+0x418>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800532d 	.word	0x0800532d
 800530c:	08005335 	.word	0x08005335
 8005310:	0800533d 	.word	0x0800533d
 8005314:	08005353 	.word	0x08005353
 8005318:	08005343 	.word	0x08005343
 800531c:	08005353 	.word	0x08005353
 8005320:	08005353 	.word	0x08005353
 8005324:	08005353 	.word	0x08005353
 8005328:	0800534b 	.word	0x0800534b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7ff f942 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 8005330:	61b8      	str	r0, [r7, #24]
        break;
 8005332:	e013      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005334:	f7ff f952 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8005338:	61b8      	str	r0, [r7, #24]
        break;
 800533a:	e00f      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800533c:	4b1d      	ldr	r3, [pc, #116]	; (80053b4 <UART_SetConfig+0x4c4>)
 800533e:	61bb      	str	r3, [r7, #24]
        break;
 8005340:	e00c      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005342:	f7ff f825 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 8005346:	61b8      	str	r0, [r7, #24]
        break;
 8005348:	e008      	b.n	800535c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800534a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800534e:	61bb      	str	r3, [r7, #24]
        break;
 8005350:	e004      	b.n	800535c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	77bb      	strb	r3, [r7, #30]
        break;
 800535a:	bf00      	nop
    }

    if (pclk != 0U)
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d018      	beq.n	8005394 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	085a      	lsrs	r2, r3, #1
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	441a      	add	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	fbb2 f3f3 	udiv	r3, r2, r3
 8005374:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	2b0f      	cmp	r3, #15
 800537a:	d909      	bls.n	8005390 <UART_SetConfig+0x4a0>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005382:	d205      	bcs.n	8005390 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	b29a      	uxth	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	60da      	str	r2, [r3, #12]
 800538e:	e001      	b.n	8005394 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80053a0:	7fbb      	ldrb	r3, [r7, #30]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40007c00 	.word	0x40007c00
 80053b0:	40023800 	.word	0x40023800
 80053b4:	00f42400 	.word	0x00f42400

080053b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	430a      	orrs	r2, r1
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01a      	beq.n	80054ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b6:	d10a      	bne.n	80054ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	430a      	orrs	r2, r1
 80054ee:	605a      	str	r2, [r3, #4]
  }
}
 80054f0:	bf00      	nop
 80054f2:	370c      	adds	r7, #12
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af02      	add	r7, sp, #8
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800550c:	f7fc ffea 	bl	80024e4 <HAL_GetTick>
 8005510:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0308 	and.w	r3, r3, #8
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10e      	bne.n	800553e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005520:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 f831 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d001      	beq.n	800553e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e027      	b.n	800558e <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d10e      	bne.n	800556a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800554c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f81b 	bl	8005596 <UART_WaitOnFlagUntilTimeout>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e011      	b.n	800558e <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800558c:	2300      	movs	r3, #0
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005596:	b580      	push	{r7, lr}
 8005598:	b09c      	sub	sp, #112	; 0x70
 800559a:	af00      	add	r7, sp, #0
 800559c:	60f8      	str	r0, [r7, #12]
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	603b      	str	r3, [r7, #0]
 80055a2:	4613      	mov	r3, r2
 80055a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a6:	e0a7      	b.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ae:	f000 80a3 	beq.w	80056f8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b2:	f7fc ff97 	bl	80024e4 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80055be:	429a      	cmp	r2, r3
 80055c0:	d302      	bcc.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80055c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d13f      	bne.n	8005648 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055dc:	667b      	str	r3, [r7, #100]	; 0x64
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	461a      	mov	r2, r3
 80055e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80055f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e6      	bne.n	80055c8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3308      	adds	r3, #8
 8005600:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	663b      	str	r3, [r7, #96]	; 0x60
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800561a:	64ba      	str	r2, [r7, #72]	; 0x48
 800561c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005620:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e5      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2220      	movs	r2, #32
 8005632:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2220      	movs	r2, #32
 8005638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e068      	b.n	800571a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	2b00      	cmp	r3, #0
 8005654:	d050      	beq.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005664:	d148      	bne.n	80056f8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800566e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	e853 3f00 	ldrex	r3, [r3]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800567e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005684:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800568e:	637b      	str	r3, [r7, #52]	; 0x34
 8005690:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e6      	bne.n	8005670 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3308      	adds	r3, #8
 80056a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	e853 3f00 	ldrex	r3, [r3]
 80056b0:	613b      	str	r3, [r7, #16]
   return(result);
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80056c2:	623a      	str	r2, [r7, #32]
 80056c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	69f9      	ldr	r1, [r7, #28]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	e841 2300 	strex	r3, r2, [r1]
 80056ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1e5      	bne.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e010      	b.n	800571a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	69da      	ldr	r2, [r3, #28]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4013      	ands	r3, r2
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	429a      	cmp	r2, r3
 8005706:	bf0c      	ite	eq
 8005708:	2301      	moveq	r3, #1
 800570a:	2300      	movne	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	461a      	mov	r2, r3
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	429a      	cmp	r2, r3
 8005714:	f43f af48 	beq.w	80055a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3770      	adds	r7, #112	; 0x70
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005724:	b084      	sub	sp, #16
 8005726:	b580      	push	{r7, lr}
 8005728:	b084      	sub	sp, #16
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	f107 001c 	add.w	r0, r7, #28
 8005732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005738:	2b01      	cmp	r3, #1
 800573a:	d120      	bne.n	800577e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <USB_CoreInit+0xac>)
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005762:	2b01      	cmp	r3, #1
 8005764:	d105      	bne.n	8005772 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fa96 	bl	8005ca4 <USB_CoreReset>
 8005778:	4603      	mov	r3, r0
 800577a:	73fb      	strb	r3, [r7, #15]
 800577c:	e010      	b.n	80057a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fa8a 	bl	8005ca4 <USB_CoreReset>
 8005790:	4603      	mov	r3, r0
 8005792:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10b      	bne.n	80057be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	f043 0206 	orr.w	r2, r3, #6
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f043 0220 	orr.w	r2, r3, #32
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057be:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ca:	b004      	add	sp, #16
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	ffbdffbf 	.word	0xffbdffbf

080057d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f023 0201 	bic.w	r2, r3, #1
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr

080057f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005802:	2300      	movs	r3, #0
 8005804:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d115      	bne.n	8005844 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005824:	2001      	movs	r0, #1
 8005826:	f7fc fe69 	bl	80024fc <HAL_Delay>
      ms++;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3301      	adds	r3, #1
 800582e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fa29 	bl	8005c88 <USB_GetMode>
 8005836:	4603      	mov	r3, r0
 8005838:	2b01      	cmp	r3, #1
 800583a:	d01e      	beq.n	800587a <USB_SetCurrentMode+0x84>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b31      	cmp	r3, #49	; 0x31
 8005840:	d9f0      	bls.n	8005824 <USB_SetCurrentMode+0x2e>
 8005842:	e01a      	b.n	800587a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d115      	bne.n	8005876 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005856:	2001      	movs	r0, #1
 8005858:	f7fc fe50 	bl	80024fc <HAL_Delay>
      ms++;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3301      	adds	r3, #1
 8005860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fa10 	bl	8005c88 <USB_GetMode>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d005      	beq.n	800587a <USB_SetCurrentMode+0x84>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b31      	cmp	r3, #49	; 0x31
 8005872:	d9f0      	bls.n	8005856 <USB_SetCurrentMode+0x60>
 8005874:	e001      	b.n	800587a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e005      	b.n	8005886 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2b32      	cmp	r3, #50	; 0x32
 800587e:	d101      	bne.n	8005884 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005890:	b084      	sub	sp, #16
 8005892:	b580      	push	{r7, lr}
 8005894:	b086      	sub	sp, #24
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800589e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058aa:	2300      	movs	r3, #0
 80058ac:	613b      	str	r3, [r7, #16]
 80058ae:	e009      	b.n	80058c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	3340      	adds	r3, #64	; 0x40
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3301      	adds	r3, #1
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b0e      	cmp	r3, #14
 80058c8:	d9f2      	bls.n	80058b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d11c      	bne.n	800590a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058de:	f043 0302 	orr.w	r3, r3, #2
 80058e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	e005      	b.n	8005916 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	4619      	mov	r1, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005930:	461a      	mov	r2, r3
 8005932:	680b      	ldr	r3, [r1, #0]
 8005934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005938:	2b01      	cmp	r3, #1
 800593a:	d10c      	bne.n	8005956 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800593c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593e:	2b00      	cmp	r3, #0
 8005940:	d104      	bne.n	800594c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005942:	2100      	movs	r1, #0
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f965 	bl	8005c14 <USB_SetDevSpeed>
 800594a:	e008      	b.n	800595e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800594c:	2101      	movs	r1, #1
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f960 	bl	8005c14 <USB_SetDevSpeed>
 8005954:	e003      	b.n	800595e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005956:	2103      	movs	r1, #3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f000 f95b 	bl	8005c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800595e:	2110      	movs	r1, #16
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 f8f3 	bl	8005b4c <USB_FlushTxFifo>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f91f 	bl	8005bb4 <USB_FlushRxFifo>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d001      	beq.n	8005980 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	461a      	mov	r2, r3
 8005988:	2300      	movs	r3, #0
 800598a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005992:	461a      	mov	r2, r3
 8005994:	2300      	movs	r3, #0
 8005996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599e:	461a      	mov	r2, r3
 80059a0:	2300      	movs	r3, #0
 80059a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	e043      	b.n	8005a32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059c0:	d118      	bne.n	80059f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d4:	461a      	mov	r2, r3
 80059d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059da:	6013      	str	r3, [r2, #0]
 80059dc:	e013      	b.n	8005a06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	015a      	lsls	r2, r3, #5
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ea:	461a      	mov	r2, r3
 80059ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e008      	b.n	8005a06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	461a      	mov	r2, r3
 8005a02:	2300      	movs	r3, #0
 8005a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	461a      	mov	r2, r3
 8005a14:	2300      	movs	r3, #0
 8005a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	461a      	mov	r2, r3
 8005a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d3b7      	bcc.n	80059aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	613b      	str	r3, [r7, #16]
 8005a3e:	e043      	b.n	8005ac8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a56:	d118      	bne.n	8005a8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	015a      	lsls	r2, r3, #5
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	4413      	add	r3, r2
 8005a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	e013      	b.n	8005a9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	015a      	lsls	r2, r3, #5
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a80:	461a      	mov	r2, r3
 8005a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a86:	6013      	str	r3, [r2, #0]
 8005a88:	e008      	b.n	8005a9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d3b7      	bcc.n	8005a40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d105      	bne.n	8005b04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	f043 0210 	orr.w	r2, r3, #16
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <USB_DevInit+0x2b4>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d005      	beq.n	8005b22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f043 0208 	orr.w	r2, r3, #8
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	699a      	ldr	r2, [r3, #24]
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <USB_DevInit+0x2b8>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b40:	b004      	add	sp, #16
 8005b42:	4770      	bx	lr
 8005b44:	803c3800 	.word	0x803c3800
 8005b48:	40000004 	.word	0x40000004

08005b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <USB_FlushTxFifo+0x64>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d901      	bls.n	8005b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01b      	b.n	8005ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	daf2      	bge.n	8005b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	019b      	lsls	r3, r3, #6
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3301      	adds	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <USB_FlushTxFifo+0x64>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e006      	b.n	8005ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0320 	and.w	r3, r3, #32
 8005b9e:	2b20      	cmp	r3, #32
 8005ba0:	d0f0      	beq.n	8005b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3714      	adds	r7, #20
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	00030d40 	.word	0x00030d40

08005bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a11      	ldr	r2, [pc, #68]	; (8005c10 <USB_FlushRxFifo+0x5c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e018      	b.n	8005c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	daf2      	bge.n	8005bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2210      	movs	r2, #16
 8005be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	3301      	adds	r3, #1
 8005be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4a08      	ldr	r2, [pc, #32]	; (8005c10 <USB_FlushRxFifo+0x5c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d901      	bls.n	8005bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e006      	b.n	8005c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0310 	and.w	r3, r3, #16
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d0f0      	beq.n	8005be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr
 8005c10:	00030d40 	.word	0x00030d40

08005c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	68f9      	ldr	r1, [r7, #12]
 8005c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c34:	4313      	orrs	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b085      	sub	sp, #20
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005c60:	f023 0303 	bic.w	r3, r3, #3
 8005c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c74:	f043 0302 	orr.w	r3, r3, #2
 8005c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	f003 0301 	and.w	r3, r3, #1
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <USB_CoreReset+0x64>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d901      	bls.n	8005cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e01b      	b.n	8005cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	daf2      	bge.n	8005cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f043 0201 	orr.w	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <USB_CoreReset+0x64>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d901      	bls.n	8005cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d0f0      	beq.n	8005cda <USB_CoreReset+0x36>

  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3714      	adds	r7, #20
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	00030d40 	.word	0x00030d40

08005d0c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8005d12:	2100      	movs	r1, #0
 8005d14:	2000      	movs	r0, #0
 8005d16:	f004 fc21 	bl	800a55c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8005d1a:	4b23      	ldr	r3, [pc, #140]	; (8005da8 <MX_LWIP_Init+0x9c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8005d20:	4b22      	ldr	r3, [pc, #136]	; (8005dac <MX_LWIP_Init+0xa0>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8005d26:	4b22      	ldr	r3, [pc, #136]	; (8005db0 <MX_LWIP_Init+0xa4>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005d2c:	4b21      	ldr	r3, [pc, #132]	; (8005db4 <MX_LWIP_Init+0xa8>)
 8005d2e:	9302      	str	r3, [sp, #8]
 8005d30:	4b21      	ldr	r3, [pc, #132]	; (8005db8 <MX_LWIP_Init+0xac>)
 8005d32:	9301      	str	r3, [sp, #4]
 8005d34:	2300      	movs	r3, #0
 8005d36:	9300      	str	r3, [sp, #0]
 8005d38:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <MX_LWIP_Init+0xa4>)
 8005d3a:	4a1c      	ldr	r2, [pc, #112]	; (8005dac <MX_LWIP_Init+0xa0>)
 8005d3c:	491a      	ldr	r1, [pc, #104]	; (8005da8 <MX_LWIP_Init+0x9c>)
 8005d3e:	481f      	ldr	r0, [pc, #124]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d40:	f005 f9d6 	bl	800b0f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d44:	481d      	ldr	r0, [pc, #116]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d46:	f005 fb8d 	bl	800b464 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005d4a:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d50:	089b      	lsrs	r3, r3, #2
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005d5c:	4817      	ldr	r0, [pc, #92]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d5e:	f005 fb91 	bl	800b484 <netif_set_up>
 8005d62:	e002      	b.n	8005d6a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005d64:	4815      	ldr	r0, [pc, #84]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d66:	f005 fbf9 	bl	800b55c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8005d6a:	4915      	ldr	r1, [pc, #84]	; (8005dc0 <MX_LWIP_Init+0xb4>)
 8005d6c:	4813      	ldr	r0, [pc, #76]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d6e:	f005 fc27 	bl	800b5c0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005d72:	2224      	movs	r2, #36	; 0x24
 8005d74:	2100      	movs	r1, #0
 8005d76:	4813      	ldr	r0, [pc, #76]	; (8005dc4 <MX_LWIP_Init+0xb8>)
 8005d78:	f010 fda3 	bl	80168c2 <memset>
  attributes.name = "EthLink";
 8005d7c:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <MX_LWIP_Init+0xb8>)
 8005d7e:	4a12      	ldr	r2, [pc, #72]	; (8005dc8 <MX_LWIP_Init+0xbc>)
 8005d80:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <MX_LWIP_Init+0xb8>)
 8005d84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d88:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8005d8a:	4b0e      	ldr	r3, [pc, #56]	; (8005dc4 <MX_LWIP_Init+0xb8>)
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <MX_LWIP_Init+0xb8>)
 8005d92:	490a      	ldr	r1, [pc, #40]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d94:	480d      	ldr	r0, [pc, #52]	; (8005dcc <MX_LWIP_Init+0xc0>)
 8005d96:	f000 fb8d 	bl	80064b4 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8005d9a:	4808      	ldr	r0, [pc, #32]	; (8005dbc <MX_LWIP_Init+0xb0>)
 8005d9c:	f00c fd78 	bl	8012890 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005da0:	bf00      	nop
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20001224 	.word	0x20001224
 8005dac:	20001228 	.word	0x20001228
 8005db0:	2000122c 	.word	0x2000122c
 8005db4:	0800a499 	.word	0x0800a499
 8005db8:	080061cd 	.word	0x080061cd
 8005dbc:	200011ec 	.word	0x200011ec
 8005dc0:	08005dd1 	.word	0x08005dd1
 8005dc4:	20001230 	.word	0x20001230
 8005dc8:	08017728 	.word	0x08017728
 8005dcc:	08006277 	.word	0x08006277

08005dd0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <SCB_InvalidateDCache_by_Addr>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b087      	sub	sp, #28
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005df6:	2320      	movs	r3, #32
 8005df8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dfa:	f3bf 8f4f 	dsb	sy
}
 8005dfe:	bf00      	nop
    while (op_size > 0) {
 8005e00:	e00b      	b.n	8005e1a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005e02:	4a0d      	ldr	r2, [pc, #52]	; (8005e38 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	4413      	add	r3, r2
 8005e10:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dcf0      	bgt.n	8005e02 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005e20:	f3bf 8f4f 	dsb	sy
}
 8005e24:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005e26:	f3bf 8f6f 	isb	sy
}
 8005e2a:	bf00      	nop
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	e000ed00 	.word	0xe000ed00

08005e3c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_ETH_RxCpltCallback+0x1c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 fe51 	bl	8006af0 <osSemaphoreRelease>
}
 8005e4e:	bf00      	nop
 8005e50:	3708      	adds	r7, #8
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20005be0 	.word	0x20005be0

08005e5c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <HAL_ETH_TxCpltCallback+0x1c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 fe41 	bl	8006af0 <osSemaphoreRelease>
}
 8005e6e:	bf00      	nop
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20005be4 	.word	0x20005be4

08005e7c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f7fc ff8f 	bl	8002da8 <HAL_ETH_GetDMAError>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e90:	2b80      	cmp	r3, #128	; 0x80
 8005e92:	d104      	bne.n	8005e9e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005e94:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <HAL_ETH_ErrorCallback+0x2c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fe29 	bl	8006af0 <osSemaphoreRelease>
  }
}
 8005e9e:	bf00      	nop
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20005be0 	.word	0x20005be0

08005eac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b08e      	sub	sp, #56	; 0x38
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

/* USER CODE END low_level_init Variables Initialization for User BSP */
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005eba:	4b4e      	ldr	r3, [pc, #312]	; (8005ff4 <low_level_init+0x148>)
 8005ebc:	4a4e      	ldr	r2, [pc, #312]	; (8005ff8 <low_level_init+0x14c>)
 8005ebe:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005ec8:	23e1      	movs	r3, #225	; 0xe1
 8005eca:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005ed8:	4a46      	ldr	r2, [pc, #280]	; (8005ff4 <low_level_init+0x148>)
 8005eda:	f107 0308 	add.w	r3, r7, #8
 8005ede:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005ee0:	4b44      	ldr	r3, [pc, #272]	; (8005ff4 <low_level_init+0x148>)
 8005ee2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005ee6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005ee8:	4b42      	ldr	r3, [pc, #264]	; (8005ff4 <low_level_init+0x148>)
 8005eea:	4a44      	ldr	r2, [pc, #272]	; (8005ffc <low_level_init+0x150>)
 8005eec:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005eee:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <low_level_init+0x148>)
 8005ef0:	4a43      	ldr	r2, [pc, #268]	; (8006000 <low_level_init+0x154>)
 8005ef2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005ef4:	4b3f      	ldr	r3, [pc, #252]	; (8005ff4 <low_level_init+0x148>)
 8005ef6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005efa:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005efc:	483d      	ldr	r0, [pc, #244]	; (8005ff4 <low_level_init+0x148>)
 8005efe:	f7fc fc07 	bl	8002710 <HAL_ETH_Init>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005f08:	2238      	movs	r2, #56	; 0x38
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	483d      	ldr	r0, [pc, #244]	; (8006004 <low_level_init+0x158>)
 8005f0e:	f010 fcd8 	bl	80168c2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005f12:	4b3c      	ldr	r3, [pc, #240]	; (8006004 <low_level_init+0x158>)
 8005f14:	2221      	movs	r2, #33	; 0x21
 8005f16:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005f18:	4b3a      	ldr	r3, [pc, #232]	; (8006004 <low_level_init+0x158>)
 8005f1a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005f1e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005f20:	4b38      	ldr	r3, [pc, #224]	; (8006004 <low_level_init+0x158>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005f26:	4838      	ldr	r0, [pc, #224]	; (8006008 <low_level_init+0x15c>)
 8005f28:	f004 ff9c 	bl	800ae64 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2206      	movs	r2, #6
 8005f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005f34:	4b2f      	ldr	r3, [pc, #188]	; (8005ff4 <low_level_init+0x148>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005f40:	4b2c      	ldr	r3, [pc, #176]	; (8005ff4 <low_level_init+0x148>)
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	785a      	ldrb	r2, [r3, #1]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005f4c:	4b29      	ldr	r3, [pc, #164]	; (8005ff4 <low_level_init+0x148>)
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	789a      	ldrb	r2, [r3, #2]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005f58:	4b26      	ldr	r3, [pc, #152]	; (8005ff4 <low_level_init+0x148>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	78da      	ldrb	r2, [r3, #3]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005f64:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <low_level_init+0x148>)
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	791a      	ldrb	r2, [r3, #4]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005f70:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <low_level_init+0x148>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	795a      	ldrb	r2, [r3, #5]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005f82:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f8a:	f043 030a 	orr.w	r3, r3, #10
 8005f8e:	b2da      	uxtb	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005f96:	2200      	movs	r2, #0
 8005f98:	2101      	movs	r1, #1
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f000 fca6 	bl	80068ec <osSemaphoreNew>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4a1a      	ldr	r2, [pc, #104]	; (800600c <low_level_init+0x160>)
 8005fa4:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	2101      	movs	r1, #1
 8005faa:	2001      	movs	r0, #1
 8005fac:	f000 fc9e 	bl	80068ec <osSemaphoreNew>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	4a17      	ldr	r2, [pc, #92]	; (8006010 <low_level_init+0x164>)
 8005fb4:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005fb6:	f107 0310 	add.w	r3, r7, #16
 8005fba:	2224      	movs	r2, #36	; 0x24
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f010 fc7f 	bl	80168c2 <memset>
  attributes.name = "EthIf";
 8005fc4:	4b13      	ldr	r3, [pc, #76]	; (8006014 <low_level_init+0x168>)
 8005fc6:	613b      	str	r3, [r7, #16]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005fc8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005fcc:	627b      	str	r3, [r7, #36]	; 0x24
  attributes.priority = osPriorityRealtime;
 8005fce:	2330      	movs	r3, #48	; 0x30
 8005fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  osThreadNew(ethernetif_input, netif, &attributes);
 8005fd2:	f107 0310 	add.w	r3, r7, #16
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	480f      	ldr	r0, [pc, #60]	; (8006018 <low_level_init+0x16c>)
 8005fdc:	f000 fa6a 	bl	80064b4 <osThreadNew>

/* USER CODE BEGIN low_level_init Code 1 for User BSP */

/* USER CODE END low_level_init Code 1 for User BSP */

  if (hal_eth_init_status == HAL_OK)
 8005fe0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d001      	beq.n	8005fec <low_level_init+0x140>
/* USER CODE END low_level_init Code 2 for User BSP */

  }
  else
  {
    Error_Handler();
 8005fe8:	f7fc f80c 	bl	8002004 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8005fec:	bf00      	nop
 8005fee:	3738      	adds	r7, #56	; 0x38
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	20005be8 	.word	0x20005be8
 8005ff8:	40028000 	.word	0x40028000
 8005ffc:	2000011c 	.word	0x2000011c
 8006000:	2000007c 	.word	0x2000007c
 8006004:	20005c98 	.word	0x20005c98
 8006008:	0801a630 	.word	0x0801a630
 800600c:	20005be0 	.word	0x20005be0
 8006010:	20005be4 	.word	0x20005be4
 8006014:	08017730 	.word	0x08017730
 8006018:	08006179 	.word	0x08006179

0800601c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b092      	sub	sp, #72	; 0x48
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800602a:	2300      	movs	r3, #0
 800602c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006034:	f107 030c 	add.w	r3, r7, #12
 8006038:	2230      	movs	r2, #48	; 0x30
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f010 fc40 	bl	80168c2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006042:	f107 030c 	add.w	r3, r7, #12
 8006046:	2230      	movs	r2, #48	; 0x30
 8006048:	2100      	movs	r1, #0
 800604a:	4618      	mov	r0, r3
 800604c:	f010 fc39 	bl	80168c2 <memset>

  for(q = p; q != NULL; q = q->next)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	643b      	str	r3, [r7, #64]	; 0x40
 8006054:	e045      	b.n	80060e2 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006058:	2b03      	cmp	r3, #3
 800605a:	d902      	bls.n	8006062 <low_level_output+0x46>
      return ERR_IF;
 800605c:	f06f 030b 	mvn.w	r3, #11
 8006060:	e065      	b.n	800612e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8006062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006064:	6859      	ldr	r1, [r3, #4]
 8006066:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006068:	4613      	mov	r3, r2
 800606a:	005b      	lsls	r3, r3, #1
 800606c:	4413      	add	r3, r2
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	3348      	adds	r3, #72	; 0x48
 8006072:	443b      	add	r3, r7
 8006074:	3b3c      	subs	r3, #60	; 0x3c
 8006076:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800607a:	895b      	ldrh	r3, [r3, #10]
 800607c:	4619      	mov	r1, r3
 800607e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006080:	4613      	mov	r3, r2
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	3348      	adds	r3, #72	; 0x48
 800608a:	443b      	add	r3, r7
 800608c:	3b38      	subs	r3, #56	; 0x38
 800608e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006092:	2b00      	cmp	r3, #0
 8006094:	d011      	beq.n	80060ba <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006098:	1e5a      	subs	r2, r3, #1
 800609a:	f107 000c 	add.w	r0, r7, #12
 800609e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060a0:	460b      	mov	r3, r1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	440b      	add	r3, r1
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18c1      	adds	r1, r0, r3
 80060aa:	4613      	mov	r3, r2
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	3348      	adds	r3, #72	; 0x48
 80060b4:	443b      	add	r3, r7
 80060b6:	3b34      	subs	r3, #52	; 0x34
 80060b8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80060ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80060c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060c4:	4613      	mov	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	3348      	adds	r3, #72	; 0x48
 80060ce:	443b      	add	r3, r7
 80060d0:	3b34      	subs	r3, #52	; 0x34
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80060d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060d8:	3301      	adds	r3, #1
 80060da:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80060dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	643b      	str	r3, [r7, #64]	; 0x40
 80060e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1b6      	bne.n	8006056 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	891b      	ldrh	r3, [r3, #8]
 80060ec:	461a      	mov	r2, r3
 80060ee:	4b12      	ldr	r3, [pc, #72]	; (8006138 <low_level_output+0x11c>)
 80060f0:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80060f2:	4a11      	ldr	r2, [pc, #68]	; (8006138 <low_level_output+0x11c>)
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80060fa:	4a0f      	ldr	r2, [pc, #60]	; (8006138 <low_level_output+0x11c>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006100:	6838      	ldr	r0, [r7, #0]
 8006102:	f005 feb1 	bl	800be68 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006106:	490c      	ldr	r1, [pc, #48]	; (8006138 <low_level_output+0x11c>)
 8006108:	480c      	ldr	r0, [pc, #48]	; (800613c <low_level_output+0x120>)
 800610a:	f7fc fb87 	bl	800281c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800610e:	bf00      	nop
 8006110:	4b0b      	ldr	r3, [pc, #44]	; (8006140 <low_level_output+0x124>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f04f 31ff 	mov.w	r1, #4294967295
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fc83 	bl	8006a24 <osSemaphoreAcquire>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f5      	bne.n	8006110 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006124:	4805      	ldr	r0, [pc, #20]	; (800613c <low_level_output+0x120>)
 8006126:	f7fc fd0d 	bl	8002b44 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800612a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800612e:	4618      	mov	r0, r3
 8006130:	3748      	adds	r7, #72	; 0x48
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20005c98 	.word	0x20005c98
 800613c:	20005be8 	.word	0x20005be8
 8006140:	20005be4 	.word	0x20005be4

08006144 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800614c:	2300      	movs	r3, #0
 800614e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006150:	4b07      	ldr	r3, [pc, #28]	; (8006170 <low_level_input+0x2c>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006158:	f107 030c 	add.w	r3, r7, #12
 800615c:	4619      	mov	r1, r3
 800615e:	4805      	ldr	r0, [pc, #20]	; (8006174 <low_level_input+0x30>)
 8006160:	f7fc fbb8 	bl	80028d4 <HAL_ETH_ReadData>
  }

  return p;
 8006164:	68fb      	ldr	r3, [r7, #12]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20005bdc 	.word	0x20005bdc
 8006174:	20005be8 	.word	0x20005be8

08006178 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006180:	2300      	movs	r3, #0
 8006182:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006188:	4b0f      	ldr	r3, [pc, #60]	; (80061c8 <ethernetif_input+0x50>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f04f 31ff 	mov.w	r1, #4294967295
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fc47 	bl	8006a24 <osSemaphoreAcquire>
 8006196:	4603      	mov	r3, r0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f5      	bne.n	8006188 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800619c:	68b8      	ldr	r0, [r7, #8]
 800619e:	f7ff ffd1 	bl	8006144 <low_level_input>
 80061a2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00a      	beq.n	80061c0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	68b9      	ldr	r1, [r7, #8]
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	4798      	blx	r3
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f005 fdae 	bl	800bd1c <pbuf_free>
          }
        }
      } while(p!=NULL);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1ea      	bne.n	800619c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80061c6:	e7df      	b.n	8006188 <ethernetif_input+0x10>
 80061c8:	20005be0 	.word	0x20005be0

080061cc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <ethernetif_init+0x1c>
 80061da:	4b0e      	ldr	r3, [pc, #56]	; (8006214 <ethernetif_init+0x48>)
 80061dc:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80061e0:	490d      	ldr	r1, [pc, #52]	; (8006218 <ethernetif_init+0x4c>)
 80061e2:	480e      	ldr	r0, [pc, #56]	; (800621c <ethernetif_init+0x50>)
 80061e4:	f010 fb08 	bl	80167f8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2273      	movs	r2, #115	; 0x73
 80061ec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2274      	movs	r2, #116	; 0x74
 80061f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a09      	ldr	r2, [pc, #36]	; (8006220 <ethernetif_init+0x54>)
 80061fc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a08      	ldr	r2, [pc, #32]	; (8006224 <ethernetif_init+0x58>)
 8006202:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff fe51 	bl	8005eac <low_level_init>

  return ERR_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	08017738 	.word	0x08017738
 8006218:	08017754 	.word	0x08017754
 800621c:	08017764 	.word	0x08017764
 8006220:	080146e5 	.word	0x080146e5
 8006224:	0800601d 	.word	0x0800601d

08006228 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006234:	68f9      	ldr	r1, [r7, #12]
 8006236:	4809      	ldr	r0, [pc, #36]	; (800625c <pbuf_free_custom+0x34>)
 8006238:	f004 ff04 	bl	800b044 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800623c:	4b08      	ldr	r3, [pc, #32]	; (8006260 <pbuf_free_custom+0x38>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8006244:	4b06      	ldr	r3, [pc, #24]	; (8006260 <pbuf_free_custom+0x38>)
 8006246:	2200      	movs	r2, #0
 8006248:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800624a:	4b06      	ldr	r3, [pc, #24]	; (8006264 <pbuf_free_custom+0x3c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f000 fc4e 	bl	8006af0 <osSemaphoreRelease>
  }
}
 8006254:	bf00      	nop
 8006256:	3710      	adds	r7, #16
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	0801a630 	.word	0x0801a630
 8006260:	20005bdc 	.word	0x20005bdc
 8006264:	20005be0 	.word	0x20005be0

08006268 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800626c:	f7fc f93a 	bl	80024e4 <HAL_GetTick>
 8006270:	4603      	mov	r3, r0
}
 8006272:	4618      	mov	r0, r3
 8006274:	bd80      	pop	{r7, pc}

08006276 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800627e:	2064      	movs	r0, #100	; 0x64
 8006280:	f000 f9be 	bl	8006600 <osDelay>
 8006284:	e7fb      	b.n	800627e <ethernet_link_thread+0x8>
	...

08006288 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af02      	add	r7, sp, #8
 800628e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006290:	4812      	ldr	r0, [pc, #72]	; (80062dc <HAL_ETH_RxAllocateCallback+0x54>)
 8006292:	f004 fe63 	bl	800af5c <memp_malloc_pool>
 8006296:	60f8      	str	r0, [r7, #12]
  if (p)
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d014      	beq.n	80062c8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f103 0220 	add.w	r2, r3, #32
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <HAL_ETH_RxAllocateCallback+0x58>)
 80062ac:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80062b6:	9201      	str	r2, [sp, #4]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2241      	movs	r2, #65	; 0x41
 80062be:	2100      	movs	r1, #0
 80062c0:	2000      	movs	r0, #0
 80062c2:	f005 fb71 	bl	800b9a8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80062c6:	e005      	b.n	80062d4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80062c8:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	0801a630 	.word	0x0801a630
 80062e0:	08006229 	.word	0x08006229
 80062e4:	20005bdc 	.word	0x20005bdc

080062e8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b088      	sub	sp, #32
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80062fe:	2300      	movs	r3, #0
 8006300:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3b20      	subs	r3, #32
 8006306:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	2200      	movs	r2, #0
 8006312:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	887a      	ldrh	r2, [r7, #2]
 8006318:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d103      	bne.n	800632a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e003      	b.n	8006332 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	69fa      	ldr	r2, [r7, #28]
 8006336:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	61fb      	str	r3, [r7, #28]
 800633e:	e009      	b.n	8006354 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	891a      	ldrh	r2, [r3, #8]
 8006344:	887b      	ldrh	r3, [r7, #2]
 8006346:	4413      	add	r3, r2
 8006348:	b29a      	uxth	r2, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f2      	bne.n	8006340 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800635a:	887b      	ldrh	r3, [r7, #2]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fd40 	bl	8005de4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006364:	bf00      	nop
 8006366:	3720      	adds	r7, #32
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f005 fcd1 	bl	800bd1c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800637a:	bf00      	nop
 800637c:	3708      	adds	r7, #8
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006382:	b480      	push	{r7}
 8006384:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006386:	bf00      	nop
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006396:	f3ef 8305 	mrs	r3, IPSR
 800639a:	60bb      	str	r3, [r7, #8]
  return(result);
 800639c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10f      	bne.n	80063c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063a2:	f3ef 8310 	mrs	r3, PRIMASK
 80063a6:	607b      	str	r3, [r7, #4]
  return(result);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ae:	f3ef 8311 	mrs	r3, BASEPRI
 80063b2:	603b      	str	r3, [r7, #0]
  return(result);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <osKernelInitialize+0x3a>
 80063ba:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <osKernelInitialize+0x64>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d103      	bne.n	80063ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063c2:	f06f 0305 	mvn.w	r3, #5
 80063c6:	60fb      	str	r3, [r7, #12]
 80063c8:	e00c      	b.n	80063e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063ca:	4b0a      	ldr	r3, [pc, #40]	; (80063f4 <osKernelInitialize+0x64>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d105      	bne.n	80063de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063d2:	4b08      	ldr	r3, [pc, #32]	; (80063f4 <osKernelInitialize+0x64>)
 80063d4:	2201      	movs	r2, #1
 80063d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063d8:	2300      	movs	r3, #0
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	e002      	b.n	80063e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80063de:	f04f 33ff 	mov.w	r3, #4294967295
 80063e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063e4:	68fb      	ldr	r3, [r7, #12]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3714      	adds	r7, #20
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20005cd0 	.word	0x20005cd0

080063f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b084      	sub	sp, #16
 80063fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063fe:	f3ef 8305 	mrs	r3, IPSR
 8006402:	60bb      	str	r3, [r7, #8]
  return(result);
 8006404:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006406:	2b00      	cmp	r3, #0
 8006408:	d10f      	bne.n	800642a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800640a:	f3ef 8310 	mrs	r3, PRIMASK
 800640e:	607b      	str	r3, [r7, #4]
  return(result);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006416:	f3ef 8311 	mrs	r3, BASEPRI
 800641a:	603b      	str	r3, [r7, #0]
  return(result);
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <osKernelStart+0x3a>
 8006422:	4b0f      	ldr	r3, [pc, #60]	; (8006460 <osKernelStart+0x68>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b02      	cmp	r3, #2
 8006428:	d103      	bne.n	8006432 <osKernelStart+0x3a>
    stat = osErrorISR;
 800642a:	f06f 0305 	mvn.w	r3, #5
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	e010      	b.n	8006454 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006432:	4b0b      	ldr	r3, [pc, #44]	; (8006460 <osKernelStart+0x68>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d109      	bne.n	800644e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800643a:	f7ff ffa2 	bl	8006382 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800643e:	4b08      	ldr	r3, [pc, #32]	; (8006460 <osKernelStart+0x68>)
 8006440:	2202      	movs	r2, #2
 8006442:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006444:	f002 f906 	bl	8008654 <vTaskStartScheduler>
      stat = osOK;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	e002      	b.n	8006454 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006454:	68fb      	ldr	r3, [r7, #12]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20005cd0 	.word	0x20005cd0

08006464 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800646a:	f3ef 8305 	mrs	r3, IPSR
 800646e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006470:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006476:	f3ef 8310 	mrs	r3, PRIMASK
 800647a:	607b      	str	r3, [r7, #4]
  return(result);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d105      	bne.n	800648e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006482:	f3ef 8311 	mrs	r3, BASEPRI
 8006486:	603b      	str	r3, [r7, #0]
  return(result);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <osKernelGetTickCount+0x3a>
 800648e:	4b08      	ldr	r3, [pc, #32]	; (80064b0 <osKernelGetTickCount+0x4c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b02      	cmp	r3, #2
 8006494:	d103      	bne.n	800649e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006496:	f002 fa0f 	bl	80088b8 <xTaskGetTickCountFromISR>
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	e002      	b.n	80064a4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800649e:	f002 f9fb 	bl	8008898 <xTaskGetTickCount>
 80064a2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 80064a4:	68fb      	ldr	r3, [r7, #12]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20005cd0 	.word	0x20005cd0

080064b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b090      	sub	sp, #64	; 0x40
 80064b8:	af04      	add	r7, sp, #16
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064c4:	f3ef 8305 	mrs	r3, IPSR
 80064c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80064ca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f040 808f 	bne.w	80065f0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d2:	f3ef 8310 	mrs	r3, PRIMASK
 80064d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d105      	bne.n	80064ea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064de:	f3ef 8311 	mrs	r3, BASEPRI
 80064e2:	617b      	str	r3, [r7, #20]
  return(result);
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <osThreadNew+0x3e>
 80064ea:	4b44      	ldr	r3, [pc, #272]	; (80065fc <osThreadNew+0x148>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d07e      	beq.n	80065f0 <osThreadNew+0x13c>
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d07b      	beq.n	80065f0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80064f8:	2380      	movs	r3, #128	; 0x80
 80064fa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80064fc:	2318      	movs	r3, #24
 80064fe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8006504:	f04f 33ff 	mov.w	r3, #4294967295
 8006508:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d045      	beq.n	800659c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <osThreadNew+0x6a>
        name = attr->name;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <osThreadNew+0x90>
 8006532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006534:	2b38      	cmp	r3, #56	; 0x38
 8006536:	d805      	bhi.n	8006544 <osThreadNew+0x90>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <osThreadNew+0x94>
        return (NULL);
 8006544:	2300      	movs	r3, #0
 8006546:	e054      	b.n	80065f2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	695b      	ldr	r3, [r3, #20]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d003      	beq.n	8006558 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	089b      	lsrs	r3, r3, #2
 8006556:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00e      	beq.n	800657e <osThreadNew+0xca>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2ba7      	cmp	r3, #167	; 0xa7
 8006566:	d90a      	bls.n	800657e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800656c:	2b00      	cmp	r3, #0
 800656e:	d006      	beq.n	800657e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <osThreadNew+0xca>
        mem = 1;
 8006578:	2301      	movs	r3, #1
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	e010      	b.n	80065a0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10c      	bne.n	80065a0 <osThreadNew+0xec>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	68db      	ldr	r3, [r3, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d108      	bne.n	80065a0 <osThreadNew+0xec>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <osThreadNew+0xec>
          mem = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	623b      	str	r3, [r7, #32]
 800659a:	e001      	b.n	80065a0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800659c:	2300      	movs	r3, #0
 800659e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d110      	bne.n	80065c8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80065ae:	9202      	str	r2, [sp, #8]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f001 fe53 	bl	8008268 <xTaskCreateStatic>
 80065c2:	4603      	mov	r3, r0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	e013      	b.n	80065f0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d110      	bne.n	80065f0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	f107 0310 	add.w	r3, r7, #16
 80065d6:	9301      	str	r3, [sp, #4]
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f001 fea4 	bl	800832e <xTaskCreate>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d001      	beq.n	80065f0 <osThreadNew+0x13c>
          hTask = NULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065f0:	693b      	ldr	r3, [r7, #16]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3730      	adds	r7, #48	; 0x30
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20005cd0 	.word	0x20005cd0

08006600 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006608:	f3ef 8305 	mrs	r3, IPSR
 800660c:	613b      	str	r3, [r7, #16]
  return(result);
 800660e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006610:	2b00      	cmp	r3, #0
 8006612:	d10f      	bne.n	8006634 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006614:	f3ef 8310 	mrs	r3, PRIMASK
 8006618:	60fb      	str	r3, [r7, #12]
  return(result);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d105      	bne.n	800662c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006620:	f3ef 8311 	mrs	r3, BASEPRI
 8006624:	60bb      	str	r3, [r7, #8]
  return(result);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d007      	beq.n	800663c <osDelay+0x3c>
 800662c:	4b0a      	ldr	r3, [pc, #40]	; (8006658 <osDelay+0x58>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2b02      	cmp	r3, #2
 8006632:	d103      	bne.n	800663c <osDelay+0x3c>
    stat = osErrorISR;
 8006634:	f06f 0305 	mvn.w	r3, #5
 8006638:	617b      	str	r3, [r7, #20]
 800663a:	e007      	b.n	800664c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800663c:	2300      	movs	r3, #0
 800663e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d002      	beq.n	800664c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 ffce 	bl	80085e8 <vTaskDelay>
    }
  }

  return (stat);
 800664c:	697b      	ldr	r3, [r7, #20]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	20005cd0 	.word	0x20005cd0

0800665c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b08a      	sub	sp, #40	; 0x28
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006664:	2300      	movs	r3, #0
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006668:	f3ef 8305 	mrs	r3, IPSR
 800666c:	613b      	str	r3, [r7, #16]
  return(result);
 800666e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006670:	2b00      	cmp	r3, #0
 8006672:	f040 8085 	bne.w	8006780 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006676:	f3ef 8310 	mrs	r3, PRIMASK
 800667a:	60fb      	str	r3, [r7, #12]
  return(result);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d105      	bne.n	800668e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006682:	f3ef 8311 	mrs	r3, BASEPRI
 8006686:	60bb      	str	r3, [r7, #8]
  return(result);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <osMutexNew+0x3a>
 800668e:	4b3f      	ldr	r3, [pc, #252]	; (800678c <osMutexNew+0x130>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d074      	beq.n	8006780 <osMutexNew+0x124>
    if (attr != NULL) {
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	623b      	str	r3, [r7, #32]
 80066a2:	e001      	b.n	80066a8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80066a8:	6a3b      	ldr	r3, [r7, #32]
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <osMutexNew+0x5c>
      rmtx = 1U;
 80066b2:	2301      	movs	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
 80066b6:	e001      	b.n	80066bc <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80066bc:	6a3b      	ldr	r3, [r7, #32]
 80066be:	f003 0308 	and.w	r3, r3, #8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d15c      	bne.n	8006780 <osMutexNew+0x124>
      mem = -1;
 80066c6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ca:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d015      	beq.n	80066fe <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <osMutexNew+0x8c>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	2b4f      	cmp	r3, #79	; 0x4f
 80066e0:	d902      	bls.n	80066e8 <osMutexNew+0x8c>
          mem = 1;
 80066e2:	2301      	movs	r3, #1
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	e00c      	b.n	8006702 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	689b      	ldr	r3, [r3, #8]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d108      	bne.n	8006702 <osMutexNew+0xa6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d104      	bne.n	8006702 <osMutexNew+0xa6>
            mem = 0;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e001      	b.n	8006702 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80066fe:	2300      	movs	r3, #0
 8006700:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d112      	bne.n	800672e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d007      	beq.n	800671e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	4619      	mov	r1, r3
 8006714:	2004      	movs	r0, #4
 8006716:	f000 fe1a 	bl	800734e <xQueueCreateMutexStatic>
 800671a:	6278      	str	r0, [r7, #36]	; 0x24
 800671c:	e016      	b.n	800674c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	4619      	mov	r1, r3
 8006724:	2001      	movs	r0, #1
 8006726:	f000 fe12 	bl	800734e <xQueueCreateMutexStatic>
 800672a:	6278      	str	r0, [r7, #36]	; 0x24
 800672c:	e00e      	b.n	800674c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800673a:	2004      	movs	r0, #4
 800673c:	f000 fdef 	bl	800731e <xQueueCreateMutex>
 8006740:	6278      	str	r0, [r7, #36]	; 0x24
 8006742:	e003      	b.n	800674c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8006744:	2001      	movs	r0, #1
 8006746:	f000 fdea 	bl	800731e <xQueueCreateMutex>
 800674a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <osMutexNew+0x110>
        if (attr != NULL) {
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d003      	beq.n	8006760 <osMutexNew+0x104>
          name = attr->name;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e001      	b.n	8006764 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006768:	f001 fcf6 	bl	8008158 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d006      	beq.n	8006780 <osMutexNew+0x124>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d003      	beq.n	8006780 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	f043 0301 	orr.w	r3, r3, #1
 800677e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006782:	4618      	mov	r0, r3
 8006784:	3728      	adds	r7, #40	; 0x28
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20005cd0 	.word	0x20005cd0

08006790 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067ae:	f3ef 8305 	mrs	r3, IPSR
 80067b2:	613b      	str	r3, [r7, #16]
  return(result);
 80067b4:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ba:	f3ef 8310 	mrs	r3, PRIMASK
 80067be:	60fb      	str	r3, [r7, #12]
  return(result);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067c6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <osMutexAcquire+0x52>
 80067d2:	4b1d      	ldr	r3, [pc, #116]	; (8006848 <osMutexAcquire+0xb8>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d103      	bne.n	80067e2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 80067da:	f06f 0305 	mvn.w	r3, #5
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	e02c      	b.n	800683c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d103      	bne.n	80067f0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80067e8:	f06f 0303 	mvn.w	r3, #3
 80067ec:	61fb      	str	r3, [r7, #28]
 80067ee:	e025      	b.n	800683c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d011      	beq.n	800681a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80067f6:	6839      	ldr	r1, [r7, #0]
 80067f8:	69b8      	ldr	r0, [r7, #24]
 80067fa:	f000 fdf9 	bl	80073f0 <xQueueTakeMutexRecursive>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b01      	cmp	r3, #1
 8006802:	d01b      	beq.n	800683c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800680a:	f06f 0301 	mvn.w	r3, #1
 800680e:	61fb      	str	r3, [r7, #28]
 8006810:	e014      	b.n	800683c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006812:	f06f 0302 	mvn.w	r3, #2
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	e010      	b.n	800683c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800681a:	6839      	ldr	r1, [r7, #0]
 800681c:	69b8      	ldr	r0, [r7, #24]
 800681e:	f001 f9b3 	bl	8007b88 <xQueueSemaphoreTake>
 8006822:	4603      	mov	r3, r0
 8006824:	2b01      	cmp	r3, #1
 8006826:	d009      	beq.n	800683c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800682e:	f06f 0301 	mvn.w	r3, #1
 8006832:	61fb      	str	r3, [r7, #28]
 8006834:	e002      	b.n	800683c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8006836:	f06f 0302 	mvn.w	r3, #2
 800683a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800683c:	69fb      	ldr	r3, [r7, #28]
}
 800683e:	4618      	mov	r0, r3
 8006840:	3720      	adds	r7, #32
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	20005cd0 	.word	0x20005cd0

0800684c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006868:	f3ef 8305 	mrs	r3, IPSR
 800686c:	613b      	str	r3, [r7, #16]
  return(result);
 800686e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10f      	bne.n	8006894 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006874:	f3ef 8310 	mrs	r3, PRIMASK
 8006878:	60fb      	str	r3, [r7, #12]
  return(result);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d105      	bne.n	800688c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006880:	f3ef 8311 	mrs	r3, BASEPRI
 8006884:	60bb      	str	r3, [r7, #8]
  return(result);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <osMutexRelease+0x50>
 800688c:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <osMutexRelease+0x9c>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d103      	bne.n	800689c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006894:	f06f 0305 	mvn.w	r3, #5
 8006898:	61fb      	str	r3, [r7, #28]
 800689a:	e01f      	b.n	80068dc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80068a2:	f06f 0303 	mvn.w	r3, #3
 80068a6:	61fb      	str	r3, [r7, #28]
 80068a8:	e018      	b.n	80068dc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80068b0:	69b8      	ldr	r0, [r7, #24]
 80068b2:	f000 fd67 	bl	8007384 <xQueueGiveMutexRecursive>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d00f      	beq.n	80068dc <osMutexRelease+0x90>
        stat = osErrorResource;
 80068bc:	f06f 0302 	mvn.w	r3, #2
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	e00b      	b.n	80068dc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80068c4:	2300      	movs	r3, #0
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	69b8      	ldr	r0, [r7, #24]
 80068cc:	f000 fe3a 	bl	8007544 <xQueueGenericSend>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d002      	beq.n	80068dc <osMutexRelease+0x90>
        stat = osErrorResource;
 80068d6:	f06f 0302 	mvn.w	r3, #2
 80068da:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80068dc:	69fb      	ldr	r3, [r7, #28]
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20005cd0 	.word	0x20005cd0

080068ec <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08c      	sub	sp, #48	; 0x30
 80068f0:	af02      	add	r7, sp, #8
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80068f8:	2300      	movs	r3, #0
 80068fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068fc:	f3ef 8305 	mrs	r3, IPSR
 8006900:	61bb      	str	r3, [r7, #24]
  return(result);
 8006902:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006904:	2b00      	cmp	r3, #0
 8006906:	f040 8086 	bne.w	8006a16 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800690a:	f3ef 8310 	mrs	r3, PRIMASK
 800690e:	617b      	str	r3, [r7, #20]
  return(result);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006916:	f3ef 8311 	mrs	r3, BASEPRI
 800691a:	613b      	str	r3, [r7, #16]
  return(result);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <osSemaphoreNew+0x3e>
 8006922:	4b3f      	ldr	r3, [pc, #252]	; (8006a20 <osSemaphoreNew+0x134>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d075      	beq.n	8006a16 <osSemaphoreNew+0x12a>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d072      	beq.n	8006a16 <osSemaphoreNew+0x12a>
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	429a      	cmp	r2, r3
 8006936:	d86e      	bhi.n	8006a16 <osSemaphoreNew+0x12a>
    mem = -1;
 8006938:	f04f 33ff 	mov.w	r3, #4294967295
 800693c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d006      	beq.n	800695a <osSemaphoreNew+0x6e>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b4f      	cmp	r3, #79	; 0x4f
 8006952:	d902      	bls.n	800695a <osSemaphoreNew+0x6e>
        mem = 1;
 8006954:	2301      	movs	r3, #1
 8006956:	623b      	str	r3, [r7, #32]
 8006958:	e00c      	b.n	8006974 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d108      	bne.n	8006974 <osSemaphoreNew+0x88>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d104      	bne.n	8006974 <osSemaphoreNew+0x88>
          mem = 0;
 800696a:	2300      	movs	r3, #0
 800696c:	623b      	str	r3, [r7, #32]
 800696e:	e001      	b.n	8006974 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697a:	d04c      	beq.n	8006a16 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d128      	bne.n	80069d4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d10a      	bne.n	800699e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	2203      	movs	r2, #3
 800698e:	9200      	str	r2, [sp, #0]
 8006990:	2200      	movs	r2, #0
 8006992:	2100      	movs	r1, #0
 8006994:	2001      	movs	r0, #1
 8006996:	f000 fbc1 	bl	800711c <xQueueGenericCreateStatic>
 800699a:	6278      	str	r0, [r7, #36]	; 0x24
 800699c:	e005      	b.n	80069aa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800699e:	2203      	movs	r2, #3
 80069a0:	2100      	movs	r1, #0
 80069a2:	2001      	movs	r0, #1
 80069a4:	f000 fc3c 	bl	8007220 <xQueueGenericCreate>
 80069a8:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d022      	beq.n	80069f6 <osSemaphoreNew+0x10a>
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01f      	beq.n	80069f6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80069b6:	2300      	movs	r3, #0
 80069b8:	2200      	movs	r2, #0
 80069ba:	2100      	movs	r1, #0
 80069bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069be:	f000 fdc1 	bl	8007544 <xQueueGenericSend>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d016      	beq.n	80069f6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80069c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069ca:	f001 fa77 	bl	8007ebc <vQueueDelete>
            hSemaphore = NULL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	627b      	str	r3, [r7, #36]	; 0x24
 80069d2:	e010      	b.n	80069f6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d108      	bne.n	80069ec <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	461a      	mov	r2, r3
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fd3c 	bl	8007460 <xQueueCreateCountingSemaphoreStatic>
 80069e8:	6278      	str	r0, [r7, #36]	; 0x24
 80069ea:	e004      	b.n	80069f6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 fd71 	bl	80074d6 <xQueueCreateCountingSemaphore>
 80069f4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00c      	beq.n	8006a16 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <osSemaphoreNew+0x11e>
          name = attr->name;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	e001      	b.n	8006a0e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a0e:	69f9      	ldr	r1, [r7, #28]
 8006a10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a12:	f001 fba1 	bl	8008158 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3728      	adds	r7, #40	; 0x28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	20005cd0 	.word	0x20005cd0

08006a24 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d103      	bne.n	8006a44 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006a3c:	f06f 0303 	mvn.w	r3, #3
 8006a40:	61fb      	str	r3, [r7, #28]
 8006a42:	e04b      	b.n	8006adc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a44:	f3ef 8305 	mrs	r3, IPSR
 8006a48:	617b      	str	r3, [r7, #20]
  return(result);
 8006a4a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10f      	bne.n	8006a70 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a50:	f3ef 8310 	mrs	r3, PRIMASK
 8006a54:	613b      	str	r3, [r7, #16]
  return(result);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a5c:	f3ef 8311 	mrs	r3, BASEPRI
 8006a60:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d026      	beq.n	8006ab6 <osSemaphoreAcquire+0x92>
 8006a68:	4b1f      	ldr	r3, [pc, #124]	; (8006ae8 <osSemaphoreAcquire+0xc4>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d122      	bne.n	8006ab6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006a76:	f06f 0303 	mvn.w	r3, #3
 8006a7a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006a7c:	e02d      	b.n	8006ada <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a82:	f107 0308 	add.w	r3, r7, #8
 8006a86:	461a      	mov	r2, r3
 8006a88:	2100      	movs	r1, #0
 8006a8a:	69b8      	ldr	r0, [r7, #24]
 8006a8c:	f001 f990 	bl	8007db0 <xQueueReceiveFromISR>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d003      	beq.n	8006a9e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006a96:	f06f 0302 	mvn.w	r3, #2
 8006a9a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006a9c:	e01d      	b.n	8006ada <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01a      	beq.n	8006ada <osSemaphoreAcquire+0xb6>
 8006aa4:	4b11      	ldr	r3, [pc, #68]	; (8006aec <osSemaphoreAcquire+0xc8>)
 8006aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006ab4:	e011      	b.n	8006ada <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	69b8      	ldr	r0, [r7, #24]
 8006aba:	f001 f865 	bl	8007b88 <xQueueSemaphoreTake>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d00b      	beq.n	8006adc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006aca:	f06f 0301 	mvn.w	r3, #1
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	e004      	b.n	8006adc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006ad2:	f06f 0302 	mvn.w	r3, #2
 8006ad6:	61fb      	str	r3, [r7, #28]
 8006ad8:	e000      	b.n	8006adc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006ada:	bf00      	nop
      }
    }
  }

  return (stat);
 8006adc:	69fb      	ldr	r3, [r7, #28]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3720      	adds	r7, #32
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	20005cd0 	.word	0x20005cd0
 8006aec:	e000ed04 	.word	0xe000ed04

08006af0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d103      	bne.n	8006b0e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b06:	f06f 0303 	mvn.w	r3, #3
 8006b0a:	61fb      	str	r3, [r7, #28]
 8006b0c:	e03e      	b.n	8006b8c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b0e:	f3ef 8305 	mrs	r3, IPSR
 8006b12:	617b      	str	r3, [r7, #20]
  return(result);
 8006b14:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10f      	bne.n	8006b3a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1e:	613b      	str	r3, [r7, #16]
  return(result);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d105      	bne.n	8006b32 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b26:	f3ef 8311 	mrs	r3, BASEPRI
 8006b2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d01e      	beq.n	8006b70 <osSemaphoreRelease+0x80>
 8006b32:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <osSemaphoreRelease+0xa8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d11a      	bne.n	8006b70 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b3e:	f107 0308 	add.w	r3, r7, #8
 8006b42:	4619      	mov	r1, r3
 8006b44:	69b8      	ldr	r0, [r7, #24]
 8006b46:	f000 fea3 	bl	8007890 <xQueueGiveFromISR>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d003      	beq.n	8006b58 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006b50:	f06f 0302 	mvn.w	r3, #2
 8006b54:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b56:	e018      	b.n	8006b8a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d015      	beq.n	8006b8a <osSemaphoreRelease+0x9a>
 8006b5e:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <osSemaphoreRelease+0xac>)
 8006b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b6e:	e00c      	b.n	8006b8a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	2100      	movs	r1, #0
 8006b76:	69b8      	ldr	r0, [r7, #24]
 8006b78:	f000 fce4 	bl	8007544 <xQueueGenericSend>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d004      	beq.n	8006b8c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006b82:	f06f 0302 	mvn.w	r3, #2
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	e000      	b.n	8006b8c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b8a:	bf00      	nop
    }
  }

  return (stat);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20005cd0 	.word	0x20005cd0
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08c      	sub	sp, #48	; 0x30
 8006ba4:	af02      	add	r7, sp, #8
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006bac:	2300      	movs	r3, #0
 8006bae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb0:	f3ef 8305 	mrs	r3, IPSR
 8006bb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bb6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d16f      	bne.n	8006c9c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc0:	617b      	str	r3, [r7, #20]
  return(result);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d105      	bne.n	8006bd4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006bc8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bcc:	613b      	str	r3, [r7, #16]
  return(result);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d003      	beq.n	8006bdc <osMessageQueueNew+0x3c>
 8006bd4:	4b34      	ldr	r3, [pc, #208]	; (8006ca8 <osMessageQueueNew+0x108>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d05f      	beq.n	8006c9c <osMessageQueueNew+0xfc>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d05c      	beq.n	8006c9c <osMessageQueueNew+0xfc>
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d059      	beq.n	8006c9c <osMessageQueueNew+0xfc>
    mem = -1;
 8006be8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d029      	beq.n	8006c48 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d012      	beq.n	8006c22 <osMessageQueueNew+0x82>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	2b4f      	cmp	r3, #79	; 0x4f
 8006c02:	d90e      	bls.n	8006c22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	695a      	ldr	r2, [r3, #20]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d302      	bcc.n	8006c22 <osMessageQueueNew+0x82>
        mem = 1;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	623b      	str	r3, [r7, #32]
 8006c20:	e014      	b.n	8006c4c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d110      	bne.n	8006c4c <osMessageQueueNew+0xac>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d10c      	bne.n	8006c4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d108      	bne.n	8006c4c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d104      	bne.n	8006c4c <osMessageQueueNew+0xac>
          mem = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	e001      	b.n	8006c4c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d10b      	bne.n	8006c6a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	691a      	ldr	r2, [r3, #16]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	9100      	str	r1, [sp, #0]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 fa5b 	bl	800711c <xQueueGenericCreateStatic>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
 8006c68:	e008      	b.n	8006c7c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d105      	bne.n	8006c7c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006c70:	2200      	movs	r2, #0
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f000 fad3 	bl	8007220 <xQueueGenericCreate>
 8006c7a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00c      	beq.n	8006c9c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d003      	beq.n	8006c90 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	61fb      	str	r3, [r7, #28]
 8006c8e:	e001      	b.n	8006c94 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c94:	69f9      	ldr	r1, [r7, #28]
 8006c96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c98:	f001 fa5e 	bl	8008158 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3728      	adds	r7, #40	; 0x28
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20005cd0 	.word	0x20005cd0

08006cac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b08a      	sub	sp, #40	; 0x28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cc4:	f3ef 8305 	mrs	r3, IPSR
 8006cc8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006cca:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10f      	bne.n	8006cf0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d105      	bne.n	8006ce8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ce0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02c      	beq.n	8006d42 <osMessageQueuePut+0x96>
 8006ce8:	4b28      	ldr	r3, [pc, #160]	; (8006d8c <osMessageQueuePut+0xe0>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d128      	bne.n	8006d42 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d005      	beq.n	8006d02 <osMessageQueuePut+0x56>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d002      	beq.n	8006d02 <osMessageQueuePut+0x56>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d003      	beq.n	8006d0a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006d02:	f06f 0303 	mvn.w	r3, #3
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d08:	e039      	b.n	8006d7e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d0e:	f107 0210 	add.w	r2, r7, #16
 8006d12:	2300      	movs	r3, #0
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	6a38      	ldr	r0, [r7, #32]
 8006d18:	f000 fd1a 	bl	8007750 <xQueueGenericSendFromISR>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d003      	beq.n	8006d2a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006d22:	f06f 0302 	mvn.w	r3, #2
 8006d26:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d28:	e029      	b.n	8006d7e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d026      	beq.n	8006d7e <osMessageQueuePut+0xd2>
 8006d30:	4b17      	ldr	r3, [pc, #92]	; (8006d90 <osMessageQueuePut+0xe4>)
 8006d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d36:	601a      	str	r2, [r3, #0]
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d40:	e01d      	b.n	8006d7e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d002      	beq.n	8006d4e <osMessageQueuePut+0xa2>
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d103      	bne.n	8006d56 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006d4e:	f06f 0303 	mvn.w	r3, #3
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
 8006d54:	e014      	b.n	8006d80 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d56:	2300      	movs	r3, #0
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	68b9      	ldr	r1, [r7, #8]
 8006d5c:	6a38      	ldr	r0, [r7, #32]
 8006d5e:	f000 fbf1 	bl	8007544 <xQueueGenericSend>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d00b      	beq.n	8006d80 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d003      	beq.n	8006d76 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006d6e:	f06f 0301 	mvn.w	r3, #1
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
 8006d74:	e004      	b.n	8006d80 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006d76:	f06f 0302 	mvn.w	r3, #2
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d7c:	e000      	b.n	8006d80 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d7e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3728      	adds	r7, #40	; 0x28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20005cd0 	.word	0x20005cd0
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006daa:	f3ef 8305 	mrs	r3, IPSR
 8006dae:	61fb      	str	r3, [r7, #28]
  return(result);
 8006db0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10f      	bne.n	8006dd6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006db6:	f3ef 8310 	mrs	r3, PRIMASK
 8006dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d105      	bne.n	8006dce <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006dc6:	617b      	str	r3, [r7, #20]
  return(result);
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d02c      	beq.n	8006e28 <osMessageQueueGet+0x94>
 8006dce:	4b28      	ldr	r3, [pc, #160]	; (8006e70 <osMessageQueueGet+0xdc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d128      	bne.n	8006e28 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <osMessageQueueGet+0x54>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d002      	beq.n	8006de8 <osMessageQueueGet+0x54>
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006de8:	f06f 0303 	mvn.w	r3, #3
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dee:	e038      	b.n	8006e62 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006df4:	f107 0310 	add.w	r3, r7, #16
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	6a38      	ldr	r0, [r7, #32]
 8006dfe:	f000 ffd7 	bl	8007db0 <xQueueReceiveFromISR>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d003      	beq.n	8006e10 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006e08:	f06f 0302 	mvn.w	r3, #2
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e0e:	e028      	b.n	8006e62 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d025      	beq.n	8006e62 <osMessageQueueGet+0xce>
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <osMessageQueueGet+0xe0>)
 8006e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1c:	601a      	str	r2, [r3, #0]
 8006e1e:	f3bf 8f4f 	dsb	sy
 8006e22:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e26:	e01c      	b.n	8006e62 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <osMessageQueueGet+0xa0>
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d103      	bne.n	8006e3c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006e34:	f06f 0303 	mvn.w	r3, #3
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3a:	e013      	b.n	8006e64 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	6a38      	ldr	r0, [r7, #32]
 8006e42:	f000 fdbb 	bl	80079bc <xQueueReceive>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d00b      	beq.n	8006e64 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006e52:	f06f 0301 	mvn.w	r3, #1
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
 8006e58:	e004      	b.n	8006e64 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006e5a:	f06f 0302 	mvn.w	r3, #2
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e60:	e000      	b.n	8006e64 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e62:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3728      	adds	r7, #40	; 0x28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20005cd0 	.word	0x20005cd0
 8006e74:	e000ed04 	.word	0xe000ed04

08006e78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a07      	ldr	r2, [pc, #28]	; (8006ea4 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	4a06      	ldr	r2, [pc, #24]	; (8006ea8 <vApplicationGetIdleTaskMemory+0x30>)
 8006e8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2280      	movs	r2, #128	; 0x80
 8006e94:	601a      	str	r2, [r3, #0]
}
 8006e96:	bf00      	nop
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	20005cd4 	.word	0x20005cd4
 8006ea8:	20005d7c 	.word	0x20005d7c

08006eac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4a07      	ldr	r2, [pc, #28]	; (8006ed8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ebc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	4a06      	ldr	r2, [pc, #24]	; (8006edc <vApplicationGetTimerTaskMemory+0x30>)
 8006ec2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006eca:	601a      	str	r2, [r3, #0]
}
 8006ecc:	bf00      	nop
 8006ece:	3714      	adds	r7, #20
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr
 8006ed8:	20005f7c 	.word	0x20005f7c
 8006edc:	20006024 	.word	0x20006024

08006ee0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f103 0208 	add.w	r2, r3, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f103 0208 	add.w	r2, r3, #8
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f103 0208 	add.w	r2, r3, #8
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b085      	sub	sp, #20
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
 8006f42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	683a      	ldr	r2, [r7, #0]
 8006f64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	687a      	ldr	r2, [r7, #4]
 8006f6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f82:	b480      	push	{r7}
 8006f84:	b085      	sub	sp, #20
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
 8006f8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f98:	d103      	bne.n	8006fa2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e00c      	b.n	8006fbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	60fb      	str	r3, [r7, #12]
 8006fa8:	e002      	b.n	8006fb0 <vListInsert+0x2e>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	60fb      	str	r3, [r7, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d2f6      	bcs.n	8006faa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	601a      	str	r2, [r3, #0]
}
 8006fe8:	bf00      	nop
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	6892      	ldr	r2, [r2, #8]
 800700a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	687a      	ldr	r2, [r7, #4]
 8007012:	6852      	ldr	r2, [r2, #4]
 8007014:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	429a      	cmp	r2, r3
 800701e:	d103      	bne.n	8007028 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	689a      	ldr	r2, [r3, #8]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	1e5a      	subs	r2, r3, #1
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
}
 800703c:	4618      	mov	r0, r3
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10c      	bne.n	8007076 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	b672      	cpsid	i
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	b662      	cpsie	i
 8007070:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007072:	bf00      	nop
 8007074:	e7fe      	b.n	8007074 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007076:	f002 fe09 	bl	8009c8c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007086:	fb01 f303 	mul.w	r3, r1, r3
 800708a:	441a      	add	r2, r3
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a6:	3b01      	subs	r3, #1
 80070a8:	68f9      	ldr	r1, [r7, #12]
 80070aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	441a      	add	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	22ff      	movs	r2, #255	; 0xff
 80070ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	22ff      	movs	r2, #255	; 0xff
 80070c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d114      	bne.n	80070f6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	691b      	ldr	r3, [r3, #16]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d01a      	beq.n	800710a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3310      	adds	r3, #16
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fd75 	bl	8008bc8 <xTaskRemoveFromEventList>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d012      	beq.n	800710a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070e4:	4b0c      	ldr	r3, [pc, #48]	; (8007118 <xQueueGenericReset+0xd0>)
 80070e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	f3bf 8f4f 	dsb	sy
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	e009      	b.n	800710a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3310      	adds	r3, #16
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fef0 	bl	8006ee0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3324      	adds	r3, #36	; 0x24
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff feeb 	bl	8006ee0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800710a:	f002 fdf3 	bl	8009cf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800710e:	2301      	movs	r3, #1
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	e000ed04 	.word	0xe000ed04

0800711c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08e      	sub	sp, #56	; 0x38
 8007120:	af02      	add	r7, sp, #8
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
 8007128:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10c      	bne.n	800714a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007134:	b672      	cpsid	i
 8007136:	f383 8811 	msr	BASEPRI, r3
 800713a:	f3bf 8f6f 	isb	sy
 800713e:	f3bf 8f4f 	dsb	sy
 8007142:	b662      	cpsie	i
 8007144:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007146:	bf00      	nop
 8007148:	e7fe      	b.n	8007148 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10c      	bne.n	800716a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <xQueueGenericCreateStatic+0x5a>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <xQueueGenericCreateStatic+0x5e>
 8007176:	2301      	movs	r3, #1
 8007178:	e000      	b.n	800717c <xQueueGenericCreateStatic+0x60>
 800717a:	2300      	movs	r3, #0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10c      	bne.n	800719a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	b672      	cpsid	i
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	b662      	cpsie	i
 8007194:	623b      	str	r3, [r7, #32]
}
 8007196:	bf00      	nop
 8007198:	e7fe      	b.n	8007198 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d102      	bne.n	80071a6 <xQueueGenericCreateStatic+0x8a>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <xQueueGenericCreateStatic+0x8e>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <xQueueGenericCreateStatic+0x90>
 80071aa:	2300      	movs	r3, #0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d10c      	bne.n	80071ca <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80071b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b4:	b672      	cpsid	i
 80071b6:	f383 8811 	msr	BASEPRI, r3
 80071ba:	f3bf 8f6f 	isb	sy
 80071be:	f3bf 8f4f 	dsb	sy
 80071c2:	b662      	cpsie	i
 80071c4:	61fb      	str	r3, [r7, #28]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80071ca:	2350      	movs	r3, #80	; 0x50
 80071cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2b50      	cmp	r3, #80	; 0x50
 80071d2:	d00c      	beq.n	80071ee <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	61bb      	str	r3, [r7, #24]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071ee:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00d      	beq.n	8007216 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007202:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	4613      	mov	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	68b9      	ldr	r1, [r7, #8]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f847 	bl	80072a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007218:	4618      	mov	r0, r3
 800721a:	3730      	adds	r7, #48	; 0x30
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	; 0x28
 8007224:	af02      	add	r7, sp, #8
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10c      	bne.n	800724e <xQueueGenericCreate+0x2e>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	b672      	cpsid	i
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	b662      	cpsie	i
 8007248:	613b      	str	r3, [r7, #16]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d102      	bne.n	800725a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007254:	2300      	movs	r3, #0
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	e004      	b.n	8007264 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	3350      	adds	r3, #80	; 0x50
 8007268:	4618      	mov	r0, r3
 800726a:	f002 fe3b 	bl	8009ee4 <pvPortMalloc>
 800726e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d011      	beq.n	800729a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	3350      	adds	r3, #80	; 0x50
 800727e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007288:	79fa      	ldrb	r2, [r7, #7]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	9300      	str	r3, [sp, #0]
 800728e:	4613      	mov	r3, r2
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	68b9      	ldr	r1, [r7, #8]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f805 	bl	80072a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800729a:	69bb      	ldr	r3, [r7, #24]
	}
 800729c:	4618      	mov	r0, r3
 800729e:	3720      	adds	r7, #32
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
 80072b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	e002      	b.n	80072c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072c0:	69bb      	ldr	r3, [r7, #24]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80072cc:	69bb      	ldr	r3, [r7, #24]
 80072ce:	68ba      	ldr	r2, [r7, #8]
 80072d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80072d2:	2101      	movs	r1, #1
 80072d4:	69b8      	ldr	r0, [r7, #24]
 80072d6:	f7ff feb7 	bl	8007048 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	78fa      	ldrb	r2, [r7, #3]
 80072de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00e      	beq.n	8007316 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800730a:	2300      	movs	r3, #0
 800730c:	2200      	movs	r2, #0
 800730e:	2100      	movs	r1, #0
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f917 	bl	8007544 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007316:	bf00      	nop
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}

0800731e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800731e:	b580      	push	{r7, lr}
 8007320:	b086      	sub	sp, #24
 8007322:	af00      	add	r7, sp, #0
 8007324:	4603      	mov	r3, r0
 8007326:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007328:	2301      	movs	r3, #1
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	2300      	movs	r3, #0
 800732e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007330:	79fb      	ldrb	r3, [r7, #7]
 8007332:	461a      	mov	r2, r3
 8007334:	6939      	ldr	r1, [r7, #16]
 8007336:	6978      	ldr	r0, [r7, #20]
 8007338:	f7ff ff72 	bl	8007220 <xQueueGenericCreate>
 800733c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f7ff ffd3 	bl	80072ea <prvInitialiseMutex>

		return xNewQueue;
 8007344:	68fb      	ldr	r3, [r7, #12]
	}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800734e:	b580      	push	{r7, lr}
 8007350:	b088      	sub	sp, #32
 8007352:	af02      	add	r7, sp, #8
 8007354:	4603      	mov	r3, r0
 8007356:	6039      	str	r1, [r7, #0]
 8007358:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800735a:	2301      	movs	r3, #1
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	2300      	movs	r3, #0
 8007360:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	9300      	str	r3, [sp, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	2200      	movs	r2, #0
 800736a:	6939      	ldr	r1, [r7, #16]
 800736c:	6978      	ldr	r0, [r7, #20]
 800736e:	f7ff fed5 	bl	800711c <xQueueGenericCreateStatic>
 8007372:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff ffb8 	bl	80072ea <prvInitialiseMutex>

		return xNewQueue;
 800737a:	68fb      	ldr	r3, [r7, #12]
	}
 800737c:	4618      	mov	r0, r3
 800737e:	3718      	adds	r7, #24
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007384:	b590      	push	{r4, r7, lr}
 8007386:	b087      	sub	sp, #28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10c      	bne.n	80073b0 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	b672      	cpsid	i
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	b662      	cpsie	i
 80073aa:	60fb      	str	r3, [r7, #12]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	689c      	ldr	r4, [r3, #8]
 80073b4:	f001 fe0a 	bl	8008fcc <xTaskGetCurrentTaskHandle>
 80073b8:	4603      	mov	r3, r0
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d111      	bne.n	80073e2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	1e5a      	subs	r2, r3, #1
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	68db      	ldr	r3, [r3, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d105      	bne.n	80073dc <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80073d0:	2300      	movs	r3, #0
 80073d2:	2200      	movs	r2, #0
 80073d4:	2100      	movs	r1, #0
 80073d6:	6938      	ldr	r0, [r7, #16]
 80073d8:	f000 f8b4 	bl	8007544 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80073dc:	2301      	movs	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	e001      	b.n	80073e6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80073e6:	697b      	ldr	r3, [r7, #20]
	}
 80073e8:	4618      	mov	r0, r3
 80073ea:	371c      	adds	r7, #28
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd90      	pop	{r4, r7, pc}

080073f0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10c      	bne.n	800741e <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 8007404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007408:	b672      	cpsid	i
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	b662      	cpsie	i
 8007418:	60fb      	str	r3, [r7, #12]
}
 800741a:	bf00      	nop
 800741c:	e7fe      	b.n	800741c <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	689c      	ldr	r4, [r3, #8]
 8007422:	f001 fdd3 	bl	8008fcc <xTaskGetCurrentTaskHandle>
 8007426:	4603      	mov	r3, r0
 8007428:	429c      	cmp	r4, r3
 800742a:	d107      	bne.n	800743c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007436:	2301      	movs	r3, #1
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	e00c      	b.n	8007456 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800743c:	6839      	ldr	r1, [r7, #0]
 800743e:	6938      	ldr	r0, [r7, #16]
 8007440:	f000 fba2 	bl	8007b88 <xQueueSemaphoreTake>
 8007444:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d004      	beq.n	8007456 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007456:	697b      	ldr	r3, [r7, #20]
	}
 8007458:	4618      	mov	r0, r3
 800745a:	371c      	adds	r7, #28
 800745c:	46bd      	mov	sp, r7
 800745e:	bd90      	pop	{r4, r7, pc}

08007460 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007460:	b580      	push	{r7, lr}
 8007462:	b08a      	sub	sp, #40	; 0x28
 8007464:	af02      	add	r7, sp, #8
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10c      	bne.n	800748c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	b672      	cpsid	i
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	b662      	cpsie	i
 8007486:	61bb      	str	r3, [r7, #24]
}
 8007488:	bf00      	nop
 800748a:	e7fe      	b.n	800748a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800748c:	68ba      	ldr	r2, [r7, #8]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	429a      	cmp	r2, r3
 8007492:	d90c      	bls.n	80074ae <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	b672      	cpsid	i
 800749a:	f383 8811 	msr	BASEPRI, r3
 800749e:	f3bf 8f6f 	isb	sy
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	b662      	cpsie	i
 80074a8:	617b      	str	r3, [r7, #20]
}
 80074aa:	bf00      	nop
 80074ac:	e7fe      	b.n	80074ac <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074ae:	2302      	movs	r3, #2
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	2100      	movs	r1, #0
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff fe2f 	bl	800711c <xQueueGenericCreateStatic>
 80074be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074cc:	69fb      	ldr	r3, [r7, #28]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3720      	adds	r7, #32
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b086      	sub	sp, #24
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d10c      	bne.n	8007500 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	b672      	cpsid	i
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	b662      	cpsie	i
 80074fa:	613b      	str	r3, [r7, #16]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d90c      	bls.n	8007522 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	b672      	cpsid	i
 800750e:	f383 8811 	msr	BASEPRI, r3
 8007512:	f3bf 8f6f 	isb	sy
 8007516:	f3bf 8f4f 	dsb	sy
 800751a:	b662      	cpsie	i
 800751c:	60fb      	str	r3, [r7, #12]
}
 800751e:	bf00      	nop
 8007520:	e7fe      	b.n	8007520 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007522:	2202      	movs	r2, #2
 8007524:	2100      	movs	r1, #0
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f7ff fe7a 	bl	8007220 <xQueueGenericCreate>
 800752c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800753a:	697b      	ldr	r3, [r7, #20]
	}
 800753c:	4618      	mov	r0, r3
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b08e      	sub	sp, #56	; 0x38
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007552:	2300      	movs	r3, #0
 8007554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800755a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755c:	2b00      	cmp	r3, #0
 800755e:	d10c      	bne.n	800757a <xQueueGenericSend+0x36>
	__asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007564:	b672      	cpsid	i
 8007566:	f383 8811 	msr	BASEPRI, r3
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	f3bf 8f4f 	dsb	sy
 8007572:	b662      	cpsie	i
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d103      	bne.n	8007588 <xQueueGenericSend+0x44>
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	2b00      	cmp	r3, #0
 8007586:	d101      	bne.n	800758c <xQueueGenericSend+0x48>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <xQueueGenericSend+0x4a>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10c      	bne.n	80075ac <xQueueGenericSend+0x68>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	b672      	cpsid	i
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	b662      	cpsie	i
 80075a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a8:	bf00      	nop
 80075aa:	e7fe      	b.n	80075aa <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d103      	bne.n	80075ba <xQueueGenericSend+0x76>
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <xQueueGenericSend+0x7a>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <xQueueGenericSend+0x7c>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10c      	bne.n	80075de <xQueueGenericSend+0x9a>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	b672      	cpsid	i
 80075ca:	f383 8811 	msr	BASEPRI, r3
 80075ce:	f3bf 8f6f 	isb	sy
 80075d2:	f3bf 8f4f 	dsb	sy
 80075d6:	b662      	cpsie	i
 80075d8:	623b      	str	r3, [r7, #32]
}
 80075da:	bf00      	nop
 80075dc:	e7fe      	b.n	80075dc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075de:	f001 fd05 	bl	8008fec <xTaskGetSchedulerState>
 80075e2:	4603      	mov	r3, r0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d102      	bne.n	80075ee <xQueueGenericSend+0xaa>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <xQueueGenericSend+0xae>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e000      	b.n	80075f4 <xQueueGenericSend+0xb0>
 80075f2:	2300      	movs	r3, #0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <xQueueGenericSend+0xce>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fc:	b672      	cpsid	i
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	b662      	cpsie	i
 800760c:	61fb      	str	r3, [r7, #28]
}
 800760e:	bf00      	nop
 8007610:	e7fe      	b.n	8007610 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007612:	f002 fb3b 	bl	8009c8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800761a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	429a      	cmp	r2, r3
 8007620:	d302      	bcc.n	8007628 <xQueueGenericSend+0xe4>
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b02      	cmp	r3, #2
 8007626:	d129      	bne.n	800767c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	68b9      	ldr	r1, [r7, #8]
 800762c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800762e:	f000 fc82 	bl	8007f36 <prvCopyDataToQueue>
 8007632:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007638:	2b00      	cmp	r3, #0
 800763a:	d010      	beq.n	800765e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800763c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763e:	3324      	adds	r3, #36	; 0x24
 8007640:	4618      	mov	r0, r3
 8007642:	f001 fac1 	bl	8008bc8 <xTaskRemoveFromEventList>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d013      	beq.n	8007674 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800764c:	4b3f      	ldr	r3, [pc, #252]	; (800774c <xQueueGenericSend+0x208>)
 800764e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	f3bf 8f4f 	dsb	sy
 8007658:	f3bf 8f6f 	isb	sy
 800765c:	e00a      	b.n	8007674 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800765e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007664:	4b39      	ldr	r3, [pc, #228]	; (800774c <xQueueGenericSend+0x208>)
 8007666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007674:	f002 fb3e 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 8007678:	2301      	movs	r3, #1
 800767a:	e063      	b.n	8007744 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d103      	bne.n	800768a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007682:	f002 fb37 	bl	8009cf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007686:	2300      	movs	r3, #0
 8007688:	e05c      	b.n	8007744 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800768a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007690:	f107 0314 	add.w	r3, r7, #20
 8007694:	4618      	mov	r0, r3
 8007696:	f001 fafd 	bl	8008c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800769a:	2301      	movs	r3, #1
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800769e:	f002 fb29 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076a2:	f001 f84b 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076a6:	f002 faf1 	bl	8009c8c <vPortEnterCritical>
 80076aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076b0:	b25b      	sxtb	r3, r3
 80076b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b6:	d103      	bne.n	80076c0 <xQueueGenericSend+0x17c>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076c6:	b25b      	sxtb	r3, r3
 80076c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076cc:	d103      	bne.n	80076d6 <xQueueGenericSend+0x192>
 80076ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076d6:	f002 fb0d 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80076da:	1d3a      	adds	r2, r7, #4
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	4611      	mov	r1, r2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 faec 	bl	8008cc0 <xTaskCheckForTimeOut>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d124      	bne.n	8007738 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80076ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076f0:	f000 fd19 	bl	8008126 <prvIsQueueFull>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d018      	beq.n	800772c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	3310      	adds	r3, #16
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4611      	mov	r1, r2
 8007702:	4618      	mov	r0, r3
 8007704:	f001 fa0c 	bl	8008b20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800770a:	f000 fca4 	bl	8008056 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800770e:	f001 f823 	bl	8008758 <xTaskResumeAll>
 8007712:	4603      	mov	r3, r0
 8007714:	2b00      	cmp	r3, #0
 8007716:	f47f af7c 	bne.w	8007612 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800771a:	4b0c      	ldr	r3, [pc, #48]	; (800774c <xQueueGenericSend+0x208>)
 800771c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007720:	601a      	str	r2, [r3, #0]
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	e772      	b.n	8007612 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800772c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800772e:	f000 fc92 	bl	8008056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007732:	f001 f811 	bl	8008758 <xTaskResumeAll>
 8007736:	e76c      	b.n	8007612 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800773a:	f000 fc8c 	bl	8008056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800773e:	f001 f80b 	bl	8008758 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007742:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007744:	4618      	mov	r0, r3
 8007746:	3738      	adds	r7, #56	; 0x38
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08e      	sub	sp, #56	; 0x38
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10c      	bne.n	8007782 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800776c:	b672      	cpsid	i
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	b662      	cpsie	i
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800777e:	bf00      	nop
 8007780:	e7fe      	b.n	8007780 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d103      	bne.n	8007790 <xQueueGenericSendFromISR+0x40>
 8007788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <xQueueGenericSendFromISR+0x44>
 8007790:	2301      	movs	r3, #1
 8007792:	e000      	b.n	8007796 <xQueueGenericSendFromISR+0x46>
 8007794:	2300      	movs	r3, #0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10c      	bne.n	80077b4 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779e:	b672      	cpsid	i
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	b662      	cpsie	i
 80077ae:	623b      	str	r3, [r7, #32]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b02      	cmp	r3, #2
 80077b8:	d103      	bne.n	80077c2 <xQueueGenericSendFromISR+0x72>
 80077ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <xQueueGenericSendFromISR+0x76>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <xQueueGenericSendFromISR+0x78>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10c      	bne.n	80077e6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	b672      	cpsid	i
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	b662      	cpsie	i
 80077e0:	61fb      	str	r3, [r7, #28]
}
 80077e2:	bf00      	nop
 80077e4:	e7fe      	b.n	80077e4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80077e6:	f002 fb39 	bl	8009e5c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80077ea:	f3ef 8211 	mrs	r2, BASEPRI
 80077ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f2:	b672      	cpsid	i
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	b662      	cpsie	i
 8007802:	61ba      	str	r2, [r7, #24]
 8007804:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007806:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007808:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007812:	429a      	cmp	r2, r3
 8007814:	d302      	bcc.n	800781c <xQueueGenericSendFromISR+0xcc>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d12c      	bne.n	8007876 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800782c:	f000 fb83 	bl	8007f36 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007830:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d112      	bne.n	8007860 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	2b00      	cmp	r3, #0
 8007840:	d016      	beq.n	8007870 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	3324      	adds	r3, #36	; 0x24
 8007846:	4618      	mov	r0, r3
 8007848:	f001 f9be 	bl	8008bc8 <xTaskRemoveFromEventList>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00e      	beq.n	8007870 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e007      	b.n	8007870 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007860:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007864:	3301      	adds	r3, #1
 8007866:	b2db      	uxtb	r3, r3
 8007868:	b25a      	sxtb	r2, r3
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007870:	2301      	movs	r3, #1
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007874:	e001      	b.n	800787a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007876:	2300      	movs	r3, #0
 8007878:	637b      	str	r3, [r7, #52]	; 0x34
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007884:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007888:	4618      	mov	r0, r3
 800788a:	3738      	adds	r7, #56	; 0x38
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08e      	sub	sp, #56	; 0x38
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800789e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d10c      	bne.n	80078be <xQueueGiveFromISR+0x2e>
	__asm volatile
 80078a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a8:	b672      	cpsid	i
 80078aa:	f383 8811 	msr	BASEPRI, r3
 80078ae:	f3bf 8f6f 	isb	sy
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	b662      	cpsie	i
 80078b8:	623b      	str	r3, [r7, #32]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <xQueueGiveFromISR+0x50>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	b672      	cpsid	i
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	b662      	cpsie	i
 80078da:	61fb      	str	r3, [r7, #28]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d103      	bne.n	80078f0 <xQueueGiveFromISR+0x60>
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <xQueueGiveFromISR+0x64>
 80078f0:	2301      	movs	r3, #1
 80078f2:	e000      	b.n	80078f6 <xQueueGiveFromISR+0x66>
 80078f4:	2300      	movs	r3, #0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10c      	bne.n	8007914 <xQueueGiveFromISR+0x84>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	b672      	cpsid	i
 8007900:	f383 8811 	msr	BASEPRI, r3
 8007904:	f3bf 8f6f 	isb	sy
 8007908:	f3bf 8f4f 	dsb	sy
 800790c:	b662      	cpsie	i
 800790e:	61bb      	str	r3, [r7, #24]
}
 8007910:	bf00      	nop
 8007912:	e7fe      	b.n	8007912 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007914:	f002 faa2 	bl	8009e5c <vPortValidateInterruptPriority>
	__asm volatile
 8007918:	f3ef 8211 	mrs	r2, BASEPRI
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	b672      	cpsid	i
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	b662      	cpsie	i
 8007930:	617a      	str	r2, [r7, #20]
 8007932:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007934:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007936:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800793e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007942:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007944:	429a      	cmp	r2, r3
 8007946:	d22b      	bcs.n	80079a0 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800794e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007958:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800795a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d112      	bne.n	800798a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d016      	beq.n	800799a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	4618      	mov	r0, r3
 8007972:	f001 f929 	bl	8008bc8 <xTaskRemoveFromEventList>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00e      	beq.n	800799a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2201      	movs	r2, #1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	e007      	b.n	800799a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800798a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800798e:	3301      	adds	r3, #1
 8007990:	b2db      	uxtb	r3, r3
 8007992:	b25a      	sxtb	r2, r3
 8007994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800799a:	2301      	movs	r3, #1
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
 800799e:	e001      	b.n	80079a4 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079a0:	2300      	movs	r3, #0
 80079a2:	637b      	str	r3, [r7, #52]	; 0x34
 80079a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079a6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f383 8811 	msr	BASEPRI, r3
}
 80079ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3738      	adds	r7, #56	; 0x38
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
	...

080079bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	; 0x30
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80079c8:	2300      	movs	r3, #0
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80079d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10c      	bne.n	80079f0 <xQueueReceive+0x34>
	__asm volatile
 80079d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079da:	b672      	cpsid	i
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	b662      	cpsie	i
 80079ea:	623b      	str	r3, [r7, #32]
}
 80079ec:	bf00      	nop
 80079ee:	e7fe      	b.n	80079ee <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d103      	bne.n	80079fe <xQueueReceive+0x42>
 80079f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d101      	bne.n	8007a02 <xQueueReceive+0x46>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <xQueueReceive+0x48>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10c      	bne.n	8007a22 <xQueueReceive+0x66>
	__asm volatile
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	b672      	cpsid	i
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	b662      	cpsie	i
 8007a1c:	61fb      	str	r3, [r7, #28]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a22:	f001 fae3 	bl	8008fec <xTaskGetSchedulerState>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <xQueueReceive+0x76>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d101      	bne.n	8007a36 <xQueueReceive+0x7a>
 8007a32:	2301      	movs	r3, #1
 8007a34:	e000      	b.n	8007a38 <xQueueReceive+0x7c>
 8007a36:	2300      	movs	r3, #0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d10c      	bne.n	8007a56 <xQueueReceive+0x9a>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a40:	b672      	cpsid	i
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	b662      	cpsie	i
 8007a50:	61bb      	str	r3, [r7, #24]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a56:	f002 f919 	bl	8009c8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01f      	beq.n	8007aa6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a6a:	f000 face 	bl	800800a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	1e5a      	subs	r2, r3, #1
 8007a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a74:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a80:	3310      	adds	r3, #16
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f8a0 	bl	8008bc8 <xTaskRemoveFromEventList>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d007      	beq.n	8007a9e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a8e:	4b3d      	ldr	r3, [pc, #244]	; (8007b84 <xQueueReceive+0x1c8>)
 8007a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	f3bf 8f4f 	dsb	sy
 8007a9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a9e:	f002 f929 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e069      	b.n	8007b7a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d103      	bne.n	8007ab4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007aac:	f002 f922 	bl	8009cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e062      	b.n	8007b7a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d106      	bne.n	8007ac8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aba:	f107 0310 	add.w	r3, r7, #16
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f001 f8e8 	bl	8008c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ac8:	f002 f914 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007acc:	f000 fe36 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ad0:	f002 f8dc 	bl	8009c8c <vPortEnterCritical>
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ada:	b25b      	sxtb	r3, r3
 8007adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae0:	d103      	bne.n	8007aea <xQueueReceive+0x12e>
 8007ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007af0:	b25b      	sxtb	r3, r3
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d103      	bne.n	8007b00 <xQueueReceive+0x144>
 8007af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b00:	f002 f8f8 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b04:	1d3a      	adds	r2, r7, #4
 8007b06:	f107 0310 	add.w	r3, r7, #16
 8007b0a:	4611      	mov	r1, r2
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f001 f8d7 	bl	8008cc0 <xTaskCheckForTimeOut>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d123      	bne.n	8007b60 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b1a:	f000 faee 	bl	80080fa <prvIsQueueEmpty>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d017      	beq.n	8007b54 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	3324      	adds	r3, #36	; 0x24
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	4611      	mov	r1, r2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f000 fff7 	bl	8008b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b34:	f000 fa8f 	bl	8008056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b38:	f000 fe0e 	bl	8008758 <xTaskResumeAll>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d189      	bne.n	8007a56 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007b42:	4b10      	ldr	r3, [pc, #64]	; (8007b84 <xQueueReceive+0x1c8>)
 8007b44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	f3bf 8f4f 	dsb	sy
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	e780      	b.n	8007a56 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b56:	f000 fa7e 	bl	8008056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b5a:	f000 fdfd 	bl	8008758 <xTaskResumeAll>
 8007b5e:	e77a      	b.n	8007a56 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b62:	f000 fa78 	bl	8008056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b66:	f000 fdf7 	bl	8008758 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6c:	f000 fac5 	bl	80080fa <prvIsQueueEmpty>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f43f af6f 	beq.w	8007a56 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3730      	adds	r7, #48	; 0x30
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	e000ed04 	.word	0xe000ed04

08007b88 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b08e      	sub	sp, #56	; 0x38
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b92:	2300      	movs	r3, #0
 8007b94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d10c      	bne.n	8007bbe <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba8:	b672      	cpsid	i
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	b662      	cpsie	i
 8007bb8:	623b      	str	r3, [r7, #32]
}
 8007bba:	bf00      	nop
 8007bbc:	e7fe      	b.n	8007bbc <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00c      	beq.n	8007be0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	b672      	cpsid	i
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	b662      	cpsie	i
 8007bda:	61fb      	str	r3, [r7, #28]
}
 8007bdc:	bf00      	nop
 8007bde:	e7fe      	b.n	8007bde <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007be0:	f001 fa04 	bl	8008fec <xTaskGetSchedulerState>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <xQueueSemaphoreTake+0x68>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <xQueueSemaphoreTake+0x6c>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <xQueueSemaphoreTake+0x6e>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10c      	bne.n	8007c14 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bfe:	b672      	cpsid	i
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	b662      	cpsie	i
 8007c0e:	61bb      	str	r3, [r7, #24]
}
 8007c10:	bf00      	nop
 8007c12:	e7fe      	b.n	8007c12 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c14:	f002 f83a 	bl	8009c8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d024      	beq.n	8007c6e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c26:	1e5a      	subs	r2, r3, #1
 8007c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d104      	bne.n	8007c3e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c34:	f001 fb58 	bl	80092e8 <pvTaskIncrementMutexHeldCount>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00f      	beq.n	8007c66 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c48:	3310      	adds	r3, #16
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 ffbc 	bl	8008bc8 <xTaskRemoveFromEventList>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d007      	beq.n	8007c66 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c56:	4b55      	ldr	r3, [pc, #340]	; (8007dac <xQueueSemaphoreTake+0x224>)
 8007c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c5c:	601a      	str	r2, [r3, #0]
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c66:	f002 f845 	bl	8009cf4 <vPortExitCritical>
				return pdPASS;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e099      	b.n	8007da2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d113      	bne.n	8007c9c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00c      	beq.n	8007c94 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7e:	b672      	cpsid	i
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	b662      	cpsie	i
 8007c8e:	617b      	str	r3, [r7, #20]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c94:	f002 f82e 	bl	8009cf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e082      	b.n	8007da2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d106      	bne.n	8007cb0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ca2:	f107 030c 	add.w	r3, r7, #12
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fff4 	bl	8008c94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cac:	2301      	movs	r3, #1
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cb0:	f002 f820 	bl	8009cf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cb4:	f000 fd42 	bl	800873c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cb8:	f001 ffe8 	bl	8009c8c <vPortEnterCritical>
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc2:	b25b      	sxtb	r3, r3
 8007cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc8:	d103      	bne.n	8007cd2 <xQueueSemaphoreTake+0x14a>
 8007cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd8:	b25b      	sxtb	r3, r3
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d103      	bne.n	8007ce8 <xQueueSemaphoreTake+0x160>
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ce8:	f002 f804 	bl	8009cf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cec:	463a      	mov	r2, r7
 8007cee:	f107 030c 	add.w	r3, r7, #12
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 ffe3 	bl	8008cc0 <xTaskCheckForTimeOut>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d132      	bne.n	8007d66 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d02:	f000 f9fa 	bl	80080fa <prvIsQueueEmpty>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d026      	beq.n	8007d5a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d109      	bne.n	8007d28 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007d14:	f001 ffba 	bl	8009c8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 f983 	bl	8009028 <xTaskPriorityInherit>
 8007d22:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007d24:	f001 ffe6 	bl	8009cf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	3324      	adds	r3, #36	; 0x24
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	4611      	mov	r1, r2
 8007d30:	4618      	mov	r0, r3
 8007d32:	f000 fef5 	bl	8008b20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d38:	f000 f98d 	bl	8008056 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d3c:	f000 fd0c 	bl	8008758 <xTaskResumeAll>
 8007d40:	4603      	mov	r3, r0
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	f47f af66 	bne.w	8007c14 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007d48:	4b18      	ldr	r3, [pc, #96]	; (8007dac <xQueueSemaphoreTake+0x224>)
 8007d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d4e:	601a      	str	r2, [r3, #0]
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	f3bf 8f6f 	isb	sy
 8007d58:	e75c      	b.n	8007c14 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d5c:	f000 f97b 	bl	8008056 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d60:	f000 fcfa 	bl	8008758 <xTaskResumeAll>
 8007d64:	e756      	b.n	8007c14 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d68:	f000 f975 	bl	8008056 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d6c:	f000 fcf4 	bl	8008758 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d72:	f000 f9c2 	bl	80080fa <prvIsQueueEmpty>
 8007d76:	4603      	mov	r3, r0
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f43f af4b 	beq.w	8007c14 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00d      	beq.n	8007da0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007d84:	f001 ff82 	bl	8009c8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d8a:	f000 f8bc 	bl	8007f06 <prvGetDisinheritPriorityAfterTimeout>
 8007d8e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d96:	4618      	mov	r0, r3
 8007d98:	f001 fa20 	bl	80091dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d9c:	f001 ffaa 	bl	8009cf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007da0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3738      	adds	r7, #56	; 0x38
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b08e      	sub	sp, #56	; 0x38
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	60b9      	str	r1, [r7, #8]
 8007dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d10c      	bne.n	8007de0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dca:	b672      	cpsid	i
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	b662      	cpsie	i
 8007dda:	623b      	str	r3, [r7, #32]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d103      	bne.n	8007dee <xQueueReceiveFromISR+0x3e>
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <xQueueReceiveFromISR+0x42>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <xQueueReceiveFromISR+0x44>
 8007df2:	2300      	movs	r3, #0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10c      	bne.n	8007e12 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	b672      	cpsid	i
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	b662      	cpsie	i
 8007e0c:	61fb      	str	r3, [r7, #28]
}
 8007e0e:	bf00      	nop
 8007e10:	e7fe      	b.n	8007e10 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e12:	f002 f823 	bl	8009e5c <vPortValidateInterruptPriority>
	__asm volatile
 8007e16:	f3ef 8211 	mrs	r2, BASEPRI
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	b672      	cpsid	i
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	b662      	cpsie	i
 8007e2e:	61ba      	str	r2, [r7, #24]
 8007e30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d02f      	beq.n	8007ea2 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e4c:	68b9      	ldr	r1, [r7, #8]
 8007e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e50:	f000 f8db 	bl	800800a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e56:	1e5a      	subs	r2, r3, #1
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d112      	bne.n	8007e8c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	3310      	adds	r3, #16
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fea8 	bl	8008bc8 <xTaskRemoveFromEventList>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00e      	beq.n	8007e9c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e007      	b.n	8007e9c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e90:	3301      	adds	r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	b25a      	sxtb	r2, r3
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea0:	e001      	b.n	8007ea6 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f383 8811 	msr	BASEPRI, r3
}
 8007eb0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3738      	adds	r7, #56	; 0x38
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d10c      	bne.n	8007ee8 <vQueueDelete+0x2c>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	b672      	cpsid	i
 8007ed4:	f383 8811 	msr	BASEPRI, r3
 8007ed8:	f3bf 8f6f 	isb	sy
 8007edc:	f3bf 8f4f 	dsb	sy
 8007ee0:	b662      	cpsie	i
 8007ee2:	60bb      	str	r3, [r7, #8]
}
 8007ee4:	bf00      	nop
 8007ee6:	e7fe      	b.n	8007ee6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f95f 	bl	80081ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d102      	bne.n	8007efe <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f002 f8bd 	bl	800a078 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f06:	b480      	push	{r7}
 8007f08:	b085      	sub	sp, #20
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d006      	beq.n	8007f24 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007f20:	60fb      	str	r3, [r7, #12]
 8007f22:	e001      	b.n	8007f28 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f24:	2300      	movs	r3, #0
 8007f26:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f28:	68fb      	ldr	r3, [r7, #12]
	}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr

08007f36 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b086      	sub	sp, #24
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	60b9      	str	r1, [r7, #8]
 8007f40:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f4a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10d      	bne.n	8007f70 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d14d      	bne.n	8007ff8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 f8c9 	bl	80090f8 <xTaskPriorityDisinherit>
 8007f66:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	609a      	str	r2, [r3, #8]
 8007f6e:	e043      	b.n	8007ff8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d119      	bne.n	8007faa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	6858      	ldr	r0, [r3, #4]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	f00e fd58 	bl	8016a36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685a      	ldr	r2, [r3, #4]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	441a      	add	r2, r3
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d32b      	bcc.n	8007ff8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	605a      	str	r2, [r3, #4]
 8007fa8:	e026      	b.n	8007ff8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	68d8      	ldr	r0, [r3, #12]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	f00e fd3e 	bl	8016a36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc2:	425b      	negs	r3, r3
 8007fc4:	441a      	add	r2, r3
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d207      	bcs.n	8007fe6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	425b      	negs	r3, r3
 8007fe0:	441a      	add	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b02      	cmp	r3, #2
 8007fea:	d105      	bne.n	8007ff8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	1c5a      	adds	r2, r3, #1
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008000:	697b      	ldr	r3, [r7, #20]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b082      	sub	sp, #8
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	d018      	beq.n	800804e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008024:	441a      	add	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	689b      	ldr	r3, [r3, #8]
 8008032:	429a      	cmp	r2, r3
 8008034:	d303      	bcc.n	800803e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68d9      	ldr	r1, [r3, #12]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	461a      	mov	r2, r3
 8008048:	6838      	ldr	r0, [r7, #0]
 800804a:	f00e fcf4 	bl	8016a36 <memcpy>
	}
}
 800804e:	bf00      	nop
 8008050:	3708      	adds	r7, #8
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b084      	sub	sp, #16
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800805e:	f001 fe15 	bl	8009c8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008068:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800806a:	e011      	b.n	8008090 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b00      	cmp	r3, #0
 8008072:	d012      	beq.n	800809a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3324      	adds	r3, #36	; 0x24
 8008078:	4618      	mov	r0, r3
 800807a:	f000 fda5 	bl	8008bc8 <xTaskRemoveFromEventList>
 800807e:	4603      	mov	r3, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d001      	beq.n	8008088 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008084:	f000 fe82 	bl	8008d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
 800808a:	3b01      	subs	r3, #1
 800808c:	b2db      	uxtb	r3, r3
 800808e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	dce9      	bgt.n	800806c <prvUnlockQueue+0x16>
 8008098:	e000      	b.n	800809c <prvUnlockQueue+0x46>
					break;
 800809a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	22ff      	movs	r2, #255	; 0xff
 80080a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080a4:	f001 fe26 	bl	8009cf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080a8:	f001 fdf0 	bl	8009c8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080b4:	e011      	b.n	80080da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d012      	beq.n	80080e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3310      	adds	r3, #16
 80080c2:	4618      	mov	r0, r3
 80080c4:	f000 fd80 	bl	8008bc8 <xTaskRemoveFromEventList>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80080ce:	f000 fe5d 	bl	8008d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dce9      	bgt.n	80080b6 <prvUnlockQueue+0x60>
 80080e2:	e000      	b.n	80080e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80080e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	22ff      	movs	r2, #255	; 0xff
 80080ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80080ee:	f001 fe01 	bl	8009cf4 <vPortExitCritical>
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008102:	f001 fdc3 	bl	8009c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810a:	2b00      	cmp	r3, #0
 800810c:	d102      	bne.n	8008114 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800810e:	2301      	movs	r3, #1
 8008110:	60fb      	str	r3, [r7, #12]
 8008112:	e001      	b.n	8008118 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008114:	2300      	movs	r3, #0
 8008116:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008118:	f001 fdec 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 800811c:	68fb      	ldr	r3, [r7, #12]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3710      	adds	r7, #16
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}

08008126 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008126:	b580      	push	{r7, lr}
 8008128:	b084      	sub	sp, #16
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800812e:	f001 fdad 	bl	8009c8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800813a:	429a      	cmp	r2, r3
 800813c:	d102      	bne.n	8008144 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800813e:	2301      	movs	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	e001      	b.n	8008148 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008144:	2300      	movs	r3, #0
 8008146:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008148:	f001 fdd4 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
 8008166:	e014      	b.n	8008192 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008168:	4a0f      	ldr	r2, [pc, #60]	; (80081a8 <vQueueAddToRegistry+0x50>)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008174:	490c      	ldr	r1, [pc, #48]	; (80081a8 <vQueueAddToRegistry+0x50>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800817e:	4a0a      	ldr	r2, [pc, #40]	; (80081a8 <vQueueAddToRegistry+0x50>)
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	00db      	lsls	r3, r3, #3
 8008184:	4413      	add	r3, r2
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800818a:	e006      	b.n	800819a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2b07      	cmp	r3, #7
 8008196:	d9e7      	bls.n	8008168 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008198:	bf00      	nop
 800819a:	bf00      	nop
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
 80081a6:	bf00      	nop
 80081a8:	20006424 	.word	0x20006424

080081ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081b4:	2300      	movs	r3, #0
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	e016      	b.n	80081e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081ba:	4a10      	ldr	r2, [pc, #64]	; (80081fc <vQueueUnregisterQueue+0x50>)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	00db      	lsls	r3, r3, #3
 80081c0:	4413      	add	r3, r2
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	687a      	ldr	r2, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d10b      	bne.n	80081e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80081ca:	4a0c      	ldr	r2, [pc, #48]	; (80081fc <vQueueUnregisterQueue+0x50>)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2100      	movs	r1, #0
 80081d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80081d4:	4a09      	ldr	r2, [pc, #36]	; (80081fc <vQueueUnregisterQueue+0x50>)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	00db      	lsls	r3, r3, #3
 80081da:	4413      	add	r3, r2
 80081dc:	2200      	movs	r2, #0
 80081de:	605a      	str	r2, [r3, #4]
				break;
 80081e0:	e006      	b.n	80081f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3301      	adds	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2b07      	cmp	r3, #7
 80081ec:	d9e5      	bls.n	80081ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	20006424 	.word	0x20006424

08008200 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008210:	f001 fd3c 	bl	8009c8c <vPortEnterCritical>
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800821a:	b25b      	sxtb	r3, r3
 800821c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008220:	d103      	bne.n	800822a <vQueueWaitForMessageRestricted+0x2a>
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008230:	b25b      	sxtb	r3, r3
 8008232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008236:	d103      	bne.n	8008240 <vQueueWaitForMessageRestricted+0x40>
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	2200      	movs	r2, #0
 800823c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008240:	f001 fd58 	bl	8009cf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	3324      	adds	r3, #36	; 0x24
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fc89 	bl	8008b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800825a:	6978      	ldr	r0, [r7, #20]
 800825c:	f7ff fefb 	bl	8008056 <prvUnlockQueue>
	}
 8008260:	bf00      	nop
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08e      	sub	sp, #56	; 0x38
 800826c:	af04      	add	r7, sp, #16
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008278:	2b00      	cmp	r3, #0
 800827a:	d10c      	bne.n	8008296 <xTaskCreateStatic+0x2e>
	__asm volatile
 800827c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008280:	b672      	cpsid	i
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	b662      	cpsie	i
 8008290:	623b      	str	r3, [r7, #32]
}
 8008292:	bf00      	nop
 8008294:	e7fe      	b.n	8008294 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10c      	bne.n	80082b6 <xTaskCreateStatic+0x4e>
	__asm volatile
 800829c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a0:	b672      	cpsid	i
 80082a2:	f383 8811 	msr	BASEPRI, r3
 80082a6:	f3bf 8f6f 	isb	sy
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	b662      	cpsie	i
 80082b0:	61fb      	str	r3, [r7, #28]
}
 80082b2:	bf00      	nop
 80082b4:	e7fe      	b.n	80082b4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082b6:	23a8      	movs	r3, #168	; 0xa8
 80082b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2ba8      	cmp	r3, #168	; 0xa8
 80082be:	d00c      	beq.n	80082da <xTaskCreateStatic+0x72>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	61bb      	str	r3, [r7, #24]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d01e      	beq.n	8008320 <xTaskCreateStatic+0xb8>
 80082e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01b      	beq.n	8008320 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f4:	2202      	movs	r2, #2
 80082f6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082fa:	2300      	movs	r3, #0
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008300:	9302      	str	r3, [sp, #8]
 8008302:	f107 0314 	add.w	r3, r7, #20
 8008306:	9301      	str	r3, [sp, #4]
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	9300      	str	r3, [sp, #0]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f850 	bl	80083b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800831a:	f000 f8f5 	bl	8008508 <prvAddNewTaskToReadyList>
 800831e:	e001      	b.n	8008324 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008324:	697b      	ldr	r3, [r7, #20]
	}
 8008326:	4618      	mov	r0, r3
 8008328:	3728      	adds	r7, #40	; 0x28
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800832e:	b580      	push	{r7, lr}
 8008330:	b08c      	sub	sp, #48	; 0x30
 8008332:	af04      	add	r7, sp, #16
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	603b      	str	r3, [r7, #0]
 800833a:	4613      	mov	r3, r2
 800833c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800833e:	88fb      	ldrh	r3, [r7, #6]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4618      	mov	r0, r3
 8008344:	f001 fdce 	bl	8009ee4 <pvPortMalloc>
 8008348:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00e      	beq.n	800836e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008350:	20a8      	movs	r0, #168	; 0xa8
 8008352:	f001 fdc7 	bl	8009ee4 <pvPortMalloc>
 8008356:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d003      	beq.n	8008366 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	631a      	str	r2, [r3, #48]	; 0x30
 8008364:	e005      	b.n	8008372 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008366:	6978      	ldr	r0, [r7, #20]
 8008368:	f001 fe86 	bl	800a078 <vPortFree>
 800836c:	e001      	b.n	8008372 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800836e:	2300      	movs	r3, #0
 8008370:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d017      	beq.n	80083a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008378:	69fb      	ldr	r3, [r7, #28]
 800837a:	2200      	movs	r2, #0
 800837c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008380:	88fa      	ldrh	r2, [r7, #6]
 8008382:	2300      	movs	r3, #0
 8008384:	9303      	str	r3, [sp, #12]
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	9302      	str	r3, [sp, #8]
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	9301      	str	r3, [sp, #4]
 800838e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68b9      	ldr	r1, [r7, #8]
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 f80e 	bl	80083b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800839c:	69f8      	ldr	r0, [r7, #28]
 800839e:	f000 f8b3 	bl	8008508 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083a2:	2301      	movs	r3, #1
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	e002      	b.n	80083ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083a8:	f04f 33ff 	mov.w	r3, #4294967295
 80083ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083ae:	69bb      	ldr	r3, [r7, #24]
	}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3720      	adds	r7, #32
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b088      	sub	sp, #32
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	461a      	mov	r2, r3
 80083d0:	21a5      	movs	r1, #165	; 0xa5
 80083d2:	f00e fa76 	bl	80168c2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083da:	6879      	ldr	r1, [r7, #4]
 80083dc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80083e0:	440b      	add	r3, r1
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083e8:	69bb      	ldr	r3, [r7, #24]
 80083ea:	f023 0307 	bic.w	r3, r3, #7
 80083ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00c      	beq.n	8008414 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	b672      	cpsid	i
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	b662      	cpsie	i
 800840e:	617b      	str	r3, [r7, #20]
}
 8008410:	bf00      	nop
 8008412:	e7fe      	b.n	8008412 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01f      	beq.n	800845a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
 800841e:	e012      	b.n	8008446 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	4413      	add	r3, r2
 8008426:	7819      	ldrb	r1, [r3, #0]
 8008428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800842a:	69fb      	ldr	r3, [r7, #28]
 800842c:	4413      	add	r3, r2
 800842e:	3334      	adds	r3, #52	; 0x34
 8008430:	460a      	mov	r2, r1
 8008432:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	4413      	add	r3, r2
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d006      	beq.n	800844e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008440:	69fb      	ldr	r3, [r7, #28]
 8008442:	3301      	adds	r3, #1
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	69fb      	ldr	r3, [r7, #28]
 8008448:	2b0f      	cmp	r3, #15
 800844a:	d9e9      	bls.n	8008420 <prvInitialiseNewTask+0x68>
 800844c:	e000      	b.n	8008450 <prvInitialiseNewTask+0x98>
			{
				break;
 800844e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	2200      	movs	r2, #0
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008458:	e003      	b.n	8008462 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008464:	2b37      	cmp	r3, #55	; 0x37
 8008466:	d901      	bls.n	800846c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008468:	2337      	movs	r3, #55	; 0x37
 800846a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008470:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008476:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	2200      	movs	r2, #0
 800847c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fd4c 	bl	8006f20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	3318      	adds	r3, #24
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fd47 	bl	8006f20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008496:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800849e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	2200      	movs	r2, #0
 80084ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	2200      	movs	r2, #0
 80084b4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	3354      	adds	r3, #84	; 0x54
 80084bc:	224c      	movs	r2, #76	; 0x4c
 80084be:	2100      	movs	r1, #0
 80084c0:	4618      	mov	r0, r3
 80084c2:	f00e f9fe 	bl	80168c2 <memset>
 80084c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c8:	4a0c      	ldr	r2, [pc, #48]	; (80084fc <prvInitialiseNewTask+0x144>)
 80084ca:	659a      	str	r2, [r3, #88]	; 0x58
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	4a0c      	ldr	r2, [pc, #48]	; (8008500 <prvInitialiseNewTask+0x148>)
 80084d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	4a0b      	ldr	r2, [pc, #44]	; (8008504 <prvInitialiseNewTask+0x14c>)
 80084d6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084d8:	683a      	ldr	r2, [r7, #0]
 80084da:	68f9      	ldr	r1, [r7, #12]
 80084dc:	69b8      	ldr	r0, [r7, #24]
 80084de:	f001 fac7 	bl	8009a70 <pxPortInitialiseStack>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d002      	beq.n	80084f4 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084f4:	bf00      	nop
 80084f6:	3720      	adds	r7, #32
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	2000dfc8 	.word	0x2000dfc8
 8008500:	2000e030 	.word	0x2000e030
 8008504:	2000e098 	.word	0x2000e098

08008508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008510:	f001 fbbc 	bl	8009c8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008514:	4b2d      	ldr	r3, [pc, #180]	; (80085cc <prvAddNewTaskToReadyList+0xc4>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	4a2c      	ldr	r2, [pc, #176]	; (80085cc <prvAddNewTaskToReadyList+0xc4>)
 800851c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800851e:	4b2c      	ldr	r3, [pc, #176]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d109      	bne.n	800853a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008526:	4a2a      	ldr	r2, [pc, #168]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800852c:	4b27      	ldr	r3, [pc, #156]	; (80085cc <prvAddNewTaskToReadyList+0xc4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d110      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008534:	f000 fc4e 	bl	8008dd4 <prvInitialiseTaskLists>
 8008538:	e00d      	b.n	8008556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800853a:	4b26      	ldr	r3, [pc, #152]	; (80085d4 <prvAddNewTaskToReadyList+0xcc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d109      	bne.n	8008556 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008542:	4b23      	ldr	r3, [pc, #140]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d802      	bhi.n	8008556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008550:	4a1f      	ldr	r2, [pc, #124]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008556:	4b20      	ldr	r3, [pc, #128]	; (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	3301      	adds	r3, #1
 800855c:	4a1e      	ldr	r2, [pc, #120]	; (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 800855e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008560:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <prvAddNewTaskToReadyList+0xd0>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856c:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <prvAddNewTaskToReadyList+0xd4>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <prvAddNewTaskToReadyList+0x74>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	4a18      	ldr	r2, [pc, #96]	; (80085dc <prvAddNewTaskToReadyList+0xd4>)
 800857a:	6013      	str	r3, [r2, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4a15      	ldr	r2, [pc, #84]	; (80085e0 <prvAddNewTaskToReadyList+0xd8>)
 800858a:	441a      	add	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	3304      	adds	r3, #4
 8008590:	4619      	mov	r1, r3
 8008592:	4610      	mov	r0, r2
 8008594:	f7fe fcd1 	bl	8006f3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008598:	f001 fbac 	bl	8009cf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800859c:	4b0d      	ldr	r3, [pc, #52]	; (80085d4 <prvAddNewTaskToReadyList+0xcc>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085a4:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <prvAddNewTaskToReadyList+0xc8>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d207      	bcs.n	80085c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <prvAddNewTaskToReadyList+0xdc>)
 80085b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20006938 	.word	0x20006938
 80085d0:	20006464 	.word	0x20006464
 80085d4:	20006944 	.word	0x20006944
 80085d8:	20006954 	.word	0x20006954
 80085dc:	20006940 	.word	0x20006940
 80085e0:	20006468 	.word	0x20006468
 80085e4:	e000ed04 	.word	0xe000ed04

080085e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d019      	beq.n	800862e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085fa:	4b14      	ldr	r3, [pc, #80]	; (800864c <vTaskDelay+0x64>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00c      	beq.n	800861c <vTaskDelay+0x34>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	b672      	cpsid	i
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	b662      	cpsie	i
 8008616:	60bb      	str	r3, [r7, #8]
}
 8008618:	bf00      	nop
 800861a:	e7fe      	b.n	800861a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800861c:	f000 f88e 	bl	800873c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008620:	2100      	movs	r1, #0
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fe74 	bl	8009310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008628:	f000 f896 	bl	8008758 <xTaskResumeAll>
 800862c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d107      	bne.n	8008644 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008634:	4b06      	ldr	r3, [pc, #24]	; (8008650 <vTaskDelay+0x68>)
 8008636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20006960 	.word	0x20006960
 8008650:	e000ed04 	.word	0xe000ed04

08008654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b08a      	sub	sp, #40	; 0x28
 8008658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800865e:	2300      	movs	r3, #0
 8008660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008662:	463a      	mov	r2, r7
 8008664:	1d39      	adds	r1, r7, #4
 8008666:	f107 0308 	add.w	r3, r7, #8
 800866a:	4618      	mov	r0, r3
 800866c:	f7fe fc04 	bl	8006e78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	9202      	str	r2, [sp, #8]
 8008678:	9301      	str	r3, [sp, #4]
 800867a:	2300      	movs	r3, #0
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	2300      	movs	r3, #0
 8008680:	460a      	mov	r2, r1
 8008682:	4926      	ldr	r1, [pc, #152]	; (800871c <vTaskStartScheduler+0xc8>)
 8008684:	4826      	ldr	r0, [pc, #152]	; (8008720 <vTaskStartScheduler+0xcc>)
 8008686:	f7ff fdef 	bl	8008268 <xTaskCreateStatic>
 800868a:	4603      	mov	r3, r0
 800868c:	4a25      	ldr	r2, [pc, #148]	; (8008724 <vTaskStartScheduler+0xd0>)
 800868e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008690:	4b24      	ldr	r3, [pc, #144]	; (8008724 <vTaskStartScheduler+0xd0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008698:	2301      	movs	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	e001      	b.n	80086a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800869e:	2300      	movs	r3, #0
 80086a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d102      	bne.n	80086ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80086a8:	f000 fe86 	bl	80093b8 <xTimerCreateTimerTask>
 80086ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d11d      	bne.n	80086f0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80086b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b8:	b672      	cpsid	i
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	b662      	cpsie	i
 80086c8:	613b      	str	r3, [r7, #16]
}
 80086ca:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80086cc:	4b16      	ldr	r3, [pc, #88]	; (8008728 <vTaskStartScheduler+0xd4>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3354      	adds	r3, #84	; 0x54
 80086d2:	4a16      	ldr	r2, [pc, #88]	; (800872c <vTaskStartScheduler+0xd8>)
 80086d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80086d6:	4b16      	ldr	r3, [pc, #88]	; (8008730 <vTaskStartScheduler+0xdc>)
 80086d8:	f04f 32ff 	mov.w	r2, #4294967295
 80086dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80086de:	4b15      	ldr	r3, [pc, #84]	; (8008734 <vTaskStartScheduler+0xe0>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086e4:	4b14      	ldr	r3, [pc, #80]	; (8008738 <vTaskStartScheduler+0xe4>)
 80086e6:	2200      	movs	r2, #0
 80086e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086ea:	f001 fa51 	bl	8009b90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086ee:	e010      	b.n	8008712 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f6:	d10c      	bne.n	8008712 <vTaskStartScheduler+0xbe>
	__asm volatile
 80086f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fc:	b672      	cpsid	i
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	b662      	cpsie	i
 800870c:	60fb      	str	r3, [r7, #12]
}
 800870e:	bf00      	nop
 8008710:	e7fe      	b.n	8008710 <vTaskStartScheduler+0xbc>
}
 8008712:	bf00      	nop
 8008714:	3718      	adds	r7, #24
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	0801778c 	.word	0x0801778c
 8008720:	08008da5 	.word	0x08008da5
 8008724:	2000695c 	.word	0x2000695c
 8008728:	20006464 	.word	0x20006464
 800872c:	20000078 	.word	0x20000078
 8008730:	20006958 	.word	0x20006958
 8008734:	20006944 	.word	0x20006944
 8008738:	2000693c 	.word	0x2000693c

0800873c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <vTaskSuspendAll+0x18>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a03      	ldr	r2, [pc, #12]	; (8008754 <vTaskSuspendAll+0x18>)
 8008748:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800874a:	bf00      	nop
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr
 8008754:	20006960 	.word	0x20006960

08008758 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008762:	2300      	movs	r3, #0
 8008764:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008766:	4b43      	ldr	r3, [pc, #268]	; (8008874 <xTaskResumeAll+0x11c>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10c      	bne.n	8008788 <xTaskResumeAll+0x30>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	b672      	cpsid	i
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	b662      	cpsie	i
 8008782:	603b      	str	r3, [r7, #0]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008788:	f001 fa80 	bl	8009c8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800878c:	4b39      	ldr	r3, [pc, #228]	; (8008874 <xTaskResumeAll+0x11c>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3b01      	subs	r3, #1
 8008792:	4a38      	ldr	r2, [pc, #224]	; (8008874 <xTaskResumeAll+0x11c>)
 8008794:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008796:	4b37      	ldr	r3, [pc, #220]	; (8008874 <xTaskResumeAll+0x11c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d162      	bne.n	8008864 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800879e:	4b36      	ldr	r3, [pc, #216]	; (8008878 <xTaskResumeAll+0x120>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d05e      	beq.n	8008864 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a6:	e02f      	b.n	8008808 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087a8:	4b34      	ldr	r3, [pc, #208]	; (800887c <xTaskResumeAll+0x124>)
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3318      	adds	r3, #24
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7fe fc1d 	bl	8006ff4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	3304      	adds	r3, #4
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fe fc18 	bl	8006ff4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c8:	4b2d      	ldr	r3, [pc, #180]	; (8008880 <xTaskResumeAll+0x128>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d903      	bls.n	80087d8 <xTaskResumeAll+0x80>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	4a2a      	ldr	r2, [pc, #168]	; (8008880 <xTaskResumeAll+0x128>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087dc:	4613      	mov	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	4a27      	ldr	r2, [pc, #156]	; (8008884 <xTaskResumeAll+0x12c>)
 80087e6:	441a      	add	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	3304      	adds	r3, #4
 80087ec:	4619      	mov	r1, r3
 80087ee:	4610      	mov	r0, r2
 80087f0:	f7fe fba3 	bl	8006f3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	4b23      	ldr	r3, [pc, #140]	; (8008888 <xTaskResumeAll+0x130>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	429a      	cmp	r2, r3
 8008800:	d302      	bcc.n	8008808 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8008802:	4b22      	ldr	r3, [pc, #136]	; (800888c <xTaskResumeAll+0x134>)
 8008804:	2201      	movs	r2, #1
 8008806:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008808:	4b1c      	ldr	r3, [pc, #112]	; (800887c <xTaskResumeAll+0x124>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1cb      	bne.n	80087a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008816:	f000 fbb9 	bl	8008f8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800881a:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <xTaskResumeAll+0x138>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d010      	beq.n	8008848 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008826:	f000 f859 	bl	80088dc <xTaskIncrementTick>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d002      	beq.n	8008836 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008830:	4b16      	ldr	r3, [pc, #88]	; (800888c <xTaskResumeAll+0x134>)
 8008832:	2201      	movs	r2, #1
 8008834:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3b01      	subs	r3, #1
 800883a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f1      	bne.n	8008826 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008842:	4b13      	ldr	r3, [pc, #76]	; (8008890 <xTaskResumeAll+0x138>)
 8008844:	2200      	movs	r2, #0
 8008846:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008848:	4b10      	ldr	r3, [pc, #64]	; (800888c <xTaskResumeAll+0x134>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d009      	beq.n	8008864 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008850:	2301      	movs	r3, #1
 8008852:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008854:	4b0f      	ldr	r3, [pc, #60]	; (8008894 <xTaskResumeAll+0x13c>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008864:	f001 fa46 	bl	8009cf4 <vPortExitCritical>

	return xAlreadyYielded;
 8008868:	68bb      	ldr	r3, [r7, #8]
}
 800886a:	4618      	mov	r0, r3
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20006960 	.word	0x20006960
 8008878:	20006938 	.word	0x20006938
 800887c:	200068f8 	.word	0x200068f8
 8008880:	20006940 	.word	0x20006940
 8008884:	20006468 	.word	0x20006468
 8008888:	20006464 	.word	0x20006464
 800888c:	2000694c 	.word	0x2000694c
 8008890:	20006948 	.word	0x20006948
 8008894:	e000ed04 	.word	0xe000ed04

08008898 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800889e:	4b05      	ldr	r3, [pc, #20]	; (80088b4 <xTaskGetTickCount+0x1c>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088a4:	687b      	ldr	r3, [r7, #4]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	2000693c 	.word	0x2000693c

080088b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088be:	f001 facd 	bl	8009e5c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80088c2:	2300      	movs	r3, #0
 80088c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80088c6:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <xTaskGetTickCountFromISR+0x20>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80088cc:	683b      	ldr	r3, [r7, #0]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3708      	adds	r7, #8
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	2000693c 	.word	0x2000693c

080088dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e6:	4b50      	ldr	r3, [pc, #320]	; (8008a28 <xTaskIncrementTick+0x14c>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f040 808b 	bne.w	8008a06 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80088f0:	4b4e      	ldr	r3, [pc, #312]	; (8008a2c <xTaskIncrementTick+0x150>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3301      	adds	r3, #1
 80088f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80088f8:	4a4c      	ldr	r2, [pc, #304]	; (8008a2c <xTaskIncrementTick+0x150>)
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d122      	bne.n	800894a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008904:	4b4a      	ldr	r3, [pc, #296]	; (8008a30 <xTaskIncrementTick+0x154>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00c      	beq.n	8008928 <xTaskIncrementTick+0x4c>
	__asm volatile
 800890e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008912:	b672      	cpsid	i
 8008914:	f383 8811 	msr	BASEPRI, r3
 8008918:	f3bf 8f6f 	isb	sy
 800891c:	f3bf 8f4f 	dsb	sy
 8008920:	b662      	cpsie	i
 8008922:	603b      	str	r3, [r7, #0]
}
 8008924:	bf00      	nop
 8008926:	e7fe      	b.n	8008926 <xTaskIncrementTick+0x4a>
 8008928:	4b41      	ldr	r3, [pc, #260]	; (8008a30 <xTaskIncrementTick+0x154>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	4b41      	ldr	r3, [pc, #260]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a3f      	ldr	r2, [pc, #252]	; (8008a30 <xTaskIncrementTick+0x154>)
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	4a3f      	ldr	r2, [pc, #252]	; (8008a34 <xTaskIncrementTick+0x158>)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	4b3e      	ldr	r3, [pc, #248]	; (8008a38 <xTaskIncrementTick+0x15c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3301      	adds	r3, #1
 8008942:	4a3d      	ldr	r2, [pc, #244]	; (8008a38 <xTaskIncrementTick+0x15c>)
 8008944:	6013      	str	r3, [r2, #0]
 8008946:	f000 fb21 	bl	8008f8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800894a:	4b3c      	ldr	r3, [pc, #240]	; (8008a3c <xTaskIncrementTick+0x160>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	429a      	cmp	r2, r3
 8008952:	d349      	bcc.n	80089e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008954:	4b36      	ldr	r3, [pc, #216]	; (8008a30 <xTaskIncrementTick+0x154>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d104      	bne.n	8008968 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800895e:	4b37      	ldr	r3, [pc, #220]	; (8008a3c <xTaskIncrementTick+0x160>)
 8008960:	f04f 32ff 	mov.w	r2, #4294967295
 8008964:	601a      	str	r2, [r3, #0]
					break;
 8008966:	e03f      	b.n	80089e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008968:	4b31      	ldr	r3, [pc, #196]	; (8008a30 <xTaskIncrementTick+0x154>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008978:	693a      	ldr	r2, [r7, #16]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	429a      	cmp	r2, r3
 800897e:	d203      	bcs.n	8008988 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008980:	4a2e      	ldr	r2, [pc, #184]	; (8008a3c <xTaskIncrementTick+0x160>)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008986:	e02f      	b.n	80089e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	3304      	adds	r3, #4
 800898c:	4618      	mov	r0, r3
 800898e:	f7fe fb31 	bl	8006ff4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008996:	2b00      	cmp	r3, #0
 8008998:	d004      	beq.n	80089a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	3318      	adds	r3, #24
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fb28 	bl	8006ff4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a8:	4b25      	ldr	r3, [pc, #148]	; (8008a40 <xTaskIncrementTick+0x164>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d903      	bls.n	80089b8 <xTaskIncrementTick+0xdc>
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	4a22      	ldr	r2, [pc, #136]	; (8008a40 <xTaskIncrementTick+0x164>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	4613      	mov	r3, r2
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4a1f      	ldr	r2, [pc, #124]	; (8008a44 <xTaskIncrementTick+0x168>)
 80089c6:	441a      	add	r2, r3
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	3304      	adds	r3, #4
 80089cc:	4619      	mov	r1, r3
 80089ce:	4610      	mov	r0, r2
 80089d0:	f7fe fab3 	bl	8006f3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4b1b      	ldr	r3, [pc, #108]	; (8008a48 <xTaskIncrementTick+0x16c>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	429a      	cmp	r2, r3
 80089e0:	d3b8      	bcc.n	8008954 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80089e2:	2301      	movs	r3, #1
 80089e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e6:	e7b5      	b.n	8008954 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <xTaskIncrementTick+0x16c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ee:	4915      	ldr	r1, [pc, #84]	; (8008a44 <xTaskIncrementTick+0x168>)
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d907      	bls.n	8008a10 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008a00:	2301      	movs	r3, #1
 8008a02:	617b      	str	r3, [r7, #20]
 8008a04:	e004      	b.n	8008a10 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a06:	4b11      	ldr	r3, [pc, #68]	; (8008a4c <xTaskIncrementTick+0x170>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	4a0f      	ldr	r2, [pc, #60]	; (8008a4c <xTaskIncrementTick+0x170>)
 8008a0e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a10:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <xTaskIncrementTick+0x174>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a1c:	697b      	ldr	r3, [r7, #20]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3718      	adds	r7, #24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20006960 	.word	0x20006960
 8008a2c:	2000693c 	.word	0x2000693c
 8008a30:	200068f0 	.word	0x200068f0
 8008a34:	200068f4 	.word	0x200068f4
 8008a38:	20006950 	.word	0x20006950
 8008a3c:	20006958 	.word	0x20006958
 8008a40:	20006940 	.word	0x20006940
 8008a44:	20006468 	.word	0x20006468
 8008a48:	20006464 	.word	0x20006464
 8008a4c:	20006948 	.word	0x20006948
 8008a50:	2000694c 	.word	0x2000694c

08008a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a5a:	4b2b      	ldr	r3, [pc, #172]	; (8008b08 <vTaskSwitchContext+0xb4>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a62:	4b2a      	ldr	r3, [pc, #168]	; (8008b0c <vTaskSwitchContext+0xb8>)
 8008a64:	2201      	movs	r2, #1
 8008a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a68:	e048      	b.n	8008afc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008a6a:	4b28      	ldr	r3, [pc, #160]	; (8008b0c <vTaskSwitchContext+0xb8>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a70:	4b27      	ldr	r3, [pc, #156]	; (8008b10 <vTaskSwitchContext+0xbc>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	60fb      	str	r3, [r7, #12]
 8008a76:	e012      	b.n	8008a9e <vTaskSwitchContext+0x4a>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <vTaskSwitchContext+0x44>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	b672      	cpsid	i
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	b662      	cpsie	i
 8008a92:	607b      	str	r3, [r7, #4]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <vTaskSwitchContext+0x42>
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	491d      	ldr	r1, [pc, #116]	; (8008b14 <vTaskSwitchContext+0xc0>)
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	4413      	add	r3, r2
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	440b      	add	r3, r1
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d0e2      	beq.n	8008a78 <vTaskSwitchContext+0x24>
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	009b      	lsls	r3, r3, #2
 8008ab8:	4413      	add	r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4a15      	ldr	r2, [pc, #84]	; (8008b14 <vTaskSwitchContext+0xc0>)
 8008abe:	4413      	add	r3, r2
 8008ac0:	60bb      	str	r3, [r7, #8]
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	685a      	ldr	r2, [r3, #4]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	605a      	str	r2, [r3, #4]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	685a      	ldr	r2, [r3, #4]
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	3308      	adds	r3, #8
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d104      	bne.n	8008ae2 <vTaskSwitchContext+0x8e>
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	685a      	ldr	r2, [r3, #4]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	605a      	str	r2, [r3, #4]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	4a0b      	ldr	r2, [pc, #44]	; (8008b18 <vTaskSwitchContext+0xc4>)
 8008aea:	6013      	str	r3, [r2, #0]
 8008aec:	4a08      	ldr	r2, [pc, #32]	; (8008b10 <vTaskSwitchContext+0xbc>)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <vTaskSwitchContext+0xc4>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3354      	adds	r3, #84	; 0x54
 8008af8:	4a08      	ldr	r2, [pc, #32]	; (8008b1c <vTaskSwitchContext+0xc8>)
 8008afa:	6013      	str	r3, [r2, #0]
}
 8008afc:	bf00      	nop
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr
 8008b08:	20006960 	.word	0x20006960
 8008b0c:	2000694c 	.word	0x2000694c
 8008b10:	20006940 	.word	0x20006940
 8008b14:	20006468 	.word	0x20006468
 8008b18:	20006464 	.word	0x20006464
 8008b1c:	20000078 	.word	0x20000078

08008b20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10c      	bne.n	8008b4a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b34:	b672      	cpsid	i
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	b662      	cpsie	i
 8008b44:	60fb      	str	r3, [r7, #12]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <vTaskPlaceOnEventList+0x48>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3318      	adds	r3, #24
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fe fa15 	bl	8006f82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b58:	2101      	movs	r1, #1
 8008b5a:	6838      	ldr	r0, [r7, #0]
 8008b5c:	f000 fbd8 	bl	8009310 <prvAddCurrentTaskToDelayedList>
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20006464 	.word	0x20006464

08008b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10c      	bne.n	8008b98 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	b672      	cpsid	i
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	b662      	cpsie	i
 8008b92:	617b      	str	r3, [r7, #20]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b98:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <vTaskPlaceOnEventListRestricted+0x58>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3318      	adds	r3, #24
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7fe f9ca 	bl	8006f3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008bac:	f04f 33ff 	mov.w	r3, #4294967295
 8008bb0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	68b8      	ldr	r0, [r7, #8]
 8008bb6:	f000 fbab 	bl	8009310 <prvAddCurrentTaskToDelayedList>
	}
 8008bba:	bf00      	nop
 8008bbc:	3718      	adds	r7, #24
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	20006464 	.word	0x20006464

08008bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d10c      	bne.n	8008bf8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be2:	b672      	cpsid	i
 8008be4:	f383 8811 	msr	BASEPRI, r3
 8008be8:	f3bf 8f6f 	isb	sy
 8008bec:	f3bf 8f4f 	dsb	sy
 8008bf0:	b662      	cpsie	i
 8008bf2:	60fb      	str	r3, [r7, #12]
}
 8008bf4:	bf00      	nop
 8008bf6:	e7fe      	b.n	8008bf6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	3318      	adds	r3, #24
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe f9f9 	bl	8006ff4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c02:	4b1e      	ldr	r3, [pc, #120]	; (8008c7c <xTaskRemoveFromEventList+0xb4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d11d      	bne.n	8008c46 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7fe f9f0 	bl	8006ff4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <xTaskRemoveFromEventList+0xb8>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d903      	bls.n	8008c28 <xTaskRemoveFromEventList+0x60>
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	4a16      	ldr	r2, [pc, #88]	; (8008c80 <xTaskRemoveFromEventList+0xb8>)
 8008c26:	6013      	str	r3, [r2, #0]
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	4413      	add	r3, r2
 8008c32:	009b      	lsls	r3, r3, #2
 8008c34:	4a13      	ldr	r2, [pc, #76]	; (8008c84 <xTaskRemoveFromEventList+0xbc>)
 8008c36:	441a      	add	r2, r3
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4610      	mov	r0, r2
 8008c40:	f7fe f97b 	bl	8006f3a <vListInsertEnd>
 8008c44:	e005      	b.n	8008c52 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	3318      	adds	r3, #24
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	480e      	ldr	r0, [pc, #56]	; (8008c88 <xTaskRemoveFromEventList+0xc0>)
 8008c4e:	f7fe f974 	bl	8006f3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c56:	4b0d      	ldr	r3, [pc, #52]	; (8008c8c <xTaskRemoveFromEventList+0xc4>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d905      	bls.n	8008c6c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c64:	4b0a      	ldr	r3, [pc, #40]	; (8008c90 <xTaskRemoveFromEventList+0xc8>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e001      	b.n	8008c70 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c70:	697b      	ldr	r3, [r7, #20]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3718      	adds	r7, #24
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	20006960 	.word	0x20006960
 8008c80:	20006940 	.word	0x20006940
 8008c84:	20006468 	.word	0x20006468
 8008c88:	200068f8 	.word	0x200068f8
 8008c8c:	20006464 	.word	0x20006464
 8008c90:	2000694c 	.word	0x2000694c

08008c94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c9c:	4b06      	ldr	r3, [pc, #24]	; (8008cb8 <vTaskInternalSetTimeOutState+0x24>)
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ca4:	4b05      	ldr	r3, [pc, #20]	; (8008cbc <vTaskInternalSetTimeOutState+0x28>)
 8008ca6:	681a      	ldr	r2, [r3, #0]
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr
 8008cb8:	20006950 	.word	0x20006950
 8008cbc:	2000693c 	.word	0x2000693c

08008cc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b088      	sub	sp, #32
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10c      	bne.n	8008cea <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	b672      	cpsid	i
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	b662      	cpsie	i
 8008ce4:	613b      	str	r3, [r7, #16]
}
 8008ce6:	bf00      	nop
 8008ce8:	e7fe      	b.n	8008ce8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10c      	bne.n	8008d0a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf4:	b672      	cpsid	i
 8008cf6:	f383 8811 	msr	BASEPRI, r3
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	f3bf 8f4f 	dsb	sy
 8008d02:	b662      	cpsie	i
 8008d04:	60fb      	str	r3, [r7, #12]
}
 8008d06:	bf00      	nop
 8008d08:	e7fe      	b.n	8008d08 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008d0a:	f000 ffbf 	bl	8009c8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d0e:	4b1d      	ldr	r3, [pc, #116]	; (8008d84 <xTaskCheckForTimeOut+0xc4>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d26:	d102      	bne.n	8008d2e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	61fb      	str	r3, [r7, #28]
 8008d2c:	e023      	b.n	8008d76 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	4b15      	ldr	r3, [pc, #84]	; (8008d88 <xTaskCheckForTimeOut+0xc8>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d007      	beq.n	8008d4a <xTaskCheckForTimeOut+0x8a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d302      	bcc.n	8008d4a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d44:	2301      	movs	r3, #1
 8008d46:	61fb      	str	r3, [r7, #28]
 8008d48:	e015      	b.n	8008d76 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	697a      	ldr	r2, [r7, #20]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d20b      	bcs.n	8008d6c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	1ad2      	subs	r2, r2, r3
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7ff ff97 	bl	8008c94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d66:	2300      	movs	r3, #0
 8008d68:	61fb      	str	r3, [r7, #28]
 8008d6a:	e004      	b.n	8008d76 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d72:	2301      	movs	r3, #1
 8008d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d76:	f000 ffbd 	bl	8009cf4 <vPortExitCritical>

	return xReturn;
 8008d7a:	69fb      	ldr	r3, [r7, #28]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	2000693c 	.word	0x2000693c
 8008d88:	20006950 	.word	0x20006950

08008d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d90:	4b03      	ldr	r3, [pc, #12]	; (8008da0 <vTaskMissedYield+0x14>)
 8008d92:	2201      	movs	r2, #1
 8008d94:	601a      	str	r2, [r3, #0]
}
 8008d96:	bf00      	nop
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	2000694c 	.word	0x2000694c

08008da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b082      	sub	sp, #8
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008dac:	f000 f852 	bl	8008e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008db0:	4b06      	ldr	r3, [pc, #24]	; (8008dcc <prvIdleTask+0x28>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d9f9      	bls.n	8008dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8008db8:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <prvIdleTask+0x2c>)
 8008dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008dc8:	e7f0      	b.n	8008dac <prvIdleTask+0x8>
 8008dca:	bf00      	nop
 8008dcc:	20006468 	.word	0x20006468
 8008dd0:	e000ed04 	.word	0xe000ed04

08008dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008dda:	2300      	movs	r3, #0
 8008ddc:	607b      	str	r3, [r7, #4]
 8008dde:	e00c      	b.n	8008dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	4613      	mov	r3, r2
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4a12      	ldr	r2, [pc, #72]	; (8008e34 <prvInitialiseTaskLists+0x60>)
 8008dec:	4413      	add	r3, r2
 8008dee:	4618      	mov	r0, r3
 8008df0:	f7fe f876 	bl	8006ee0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	3301      	adds	r3, #1
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b37      	cmp	r3, #55	; 0x37
 8008dfe:	d9ef      	bls.n	8008de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e00:	480d      	ldr	r0, [pc, #52]	; (8008e38 <prvInitialiseTaskLists+0x64>)
 8008e02:	f7fe f86d 	bl	8006ee0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e06:	480d      	ldr	r0, [pc, #52]	; (8008e3c <prvInitialiseTaskLists+0x68>)
 8008e08:	f7fe f86a 	bl	8006ee0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e0c:	480c      	ldr	r0, [pc, #48]	; (8008e40 <prvInitialiseTaskLists+0x6c>)
 8008e0e:	f7fe f867 	bl	8006ee0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e12:	480c      	ldr	r0, [pc, #48]	; (8008e44 <prvInitialiseTaskLists+0x70>)
 8008e14:	f7fe f864 	bl	8006ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e18:	480b      	ldr	r0, [pc, #44]	; (8008e48 <prvInitialiseTaskLists+0x74>)
 8008e1a:	f7fe f861 	bl	8006ee0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e1e:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <prvInitialiseTaskLists+0x78>)
 8008e20:	4a05      	ldr	r2, [pc, #20]	; (8008e38 <prvInitialiseTaskLists+0x64>)
 8008e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e24:	4b0a      	ldr	r3, [pc, #40]	; (8008e50 <prvInitialiseTaskLists+0x7c>)
 8008e26:	4a05      	ldr	r2, [pc, #20]	; (8008e3c <prvInitialiseTaskLists+0x68>)
 8008e28:	601a      	str	r2, [r3, #0]
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20006468 	.word	0x20006468
 8008e38:	200068c8 	.word	0x200068c8
 8008e3c:	200068dc 	.word	0x200068dc
 8008e40:	200068f8 	.word	0x200068f8
 8008e44:	2000690c 	.word	0x2000690c
 8008e48:	20006924 	.word	0x20006924
 8008e4c:	200068f0 	.word	0x200068f0
 8008e50:	200068f4 	.word	0x200068f4

08008e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e5a:	e019      	b.n	8008e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e5c:	f000 ff16 	bl	8009c8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e60:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <prvCheckTasksWaitingTermination+0x50>)
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	68db      	ldr	r3, [r3, #12]
 8008e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f7fe f8c1 	bl	8006ff4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e72:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <prvCheckTasksWaitingTermination+0x54>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3b01      	subs	r3, #1
 8008e78:	4a0b      	ldr	r2, [pc, #44]	; (8008ea8 <prvCheckTasksWaitingTermination+0x54>)
 8008e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e7c:	4b0b      	ldr	r3, [pc, #44]	; (8008eac <prvCheckTasksWaitingTermination+0x58>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	4a0a      	ldr	r2, [pc, #40]	; (8008eac <prvCheckTasksWaitingTermination+0x58>)
 8008e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e86:	f000 ff35 	bl	8009cf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f848 	bl	8008f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e90:	4b06      	ldr	r3, [pc, #24]	; (8008eac <prvCheckTasksWaitingTermination+0x58>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e1      	bne.n	8008e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	3708      	adds	r7, #8
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	2000690c 	.word	0x2000690c
 8008ea8:	20006938 	.word	0x20006938
 8008eac:	20006920 	.word	0x20006920

08008eb0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008ebc:	e005      	b.n	8008eca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2ba5      	cmp	r3, #165	; 0xa5
 8008ed0:	d0f5      	beq.n	8008ebe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	089b      	lsrs	r3, r3, #2
 8008ed6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	b29b      	uxth	r3, r3
	}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d102      	bne.n	8008efc <uxTaskGetStackHighWaterMark+0x14>
 8008ef6:	4b09      	ldr	r3, [pc, #36]	; (8008f1c <uxTaskGetStackHighWaterMark+0x34>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	e000      	b.n	8008efe <uxTaskGetStackHighWaterMark+0x16>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8008f06:	6938      	ldr	r0, [r7, #16]
 8008f08:	f7ff ffd2 	bl	8008eb0 <prvTaskCheckFreeStackSpace>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8008f10:	68fb      	ldr	r3, [r7, #12]
	}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	20006464 	.word	0x20006464

08008f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3354      	adds	r3, #84	; 0x54
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f00d fce1 	bl	80168f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d108      	bne.n	8008f4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f899 	bl	800a078 <vPortFree>
				vPortFree( pxTCB );
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f896 	bl	800a078 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f4c:	e01a      	b.n	8008f84 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d103      	bne.n	8008f60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f001 f88d 	bl	800a078 <vPortFree>
	}
 8008f5e:	e011      	b.n	8008f84 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d00c      	beq.n	8008f84 <prvDeleteTCB+0x64>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	b672      	cpsid	i
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	b662      	cpsie	i
 8008f7e:	60fb      	str	r3, [r7, #12]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <prvDeleteTCB+0x62>
	}
 8008f84:	bf00      	nop
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f92:	4b0c      	ldr	r3, [pc, #48]	; (8008fc4 <prvResetNextTaskUnblockTime+0x38>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f9c:	4b0a      	ldr	r3, [pc, #40]	; (8008fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008fa4:	e008      	b.n	8008fb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <prvResetNextTaskUnblockTime+0x38>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	4a04      	ldr	r2, [pc, #16]	; (8008fc8 <prvResetNextTaskUnblockTime+0x3c>)
 8008fb6:	6013      	str	r3, [r2, #0]
}
 8008fb8:	bf00      	nop
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr
 8008fc4:	200068f0 	.word	0x200068f0
 8008fc8:	20006958 	.word	0x20006958

08008fcc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <xTaskGetCurrentTaskHandle+0x1c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008fd8:	687b      	ldr	r3, [r7, #4]
	}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20006464 	.word	0x20006464

08008fec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008ff2:	4b0b      	ldr	r3, [pc, #44]	; (8009020 <xTaskGetSchedulerState+0x34>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d102      	bne.n	8009000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	607b      	str	r3, [r7, #4]
 8008ffe:	e008      	b.n	8009012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009000:	4b08      	ldr	r3, [pc, #32]	; (8009024 <xTaskGetSchedulerState+0x38>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009008:	2302      	movs	r3, #2
 800900a:	607b      	str	r3, [r7, #4]
 800900c:	e001      	b.n	8009012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800900e:	2300      	movs	r3, #0
 8009010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009012:	687b      	ldr	r3, [r7, #4]
	}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr
 8009020:	20006944 	.word	0x20006944
 8009024:	20006960 	.word	0x20006960

08009028 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d051      	beq.n	80090e2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009042:	4b2a      	ldr	r3, [pc, #168]	; (80090ec <xTaskPriorityInherit+0xc4>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009048:	429a      	cmp	r2, r3
 800904a:	d241      	bcs.n	80090d0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	699b      	ldr	r3, [r3, #24]
 8009050:	2b00      	cmp	r3, #0
 8009052:	db06      	blt.n	8009062 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009054:	4b25      	ldr	r3, [pc, #148]	; (80090ec <xTaskPriorityInherit+0xc4>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	6959      	ldr	r1, [r3, #20]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906a:	4613      	mov	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	009b      	lsls	r3, r3, #2
 8009072:	4a1f      	ldr	r2, [pc, #124]	; (80090f0 <xTaskPriorityInherit+0xc8>)
 8009074:	4413      	add	r3, r2
 8009076:	4299      	cmp	r1, r3
 8009078:	d122      	bne.n	80090c0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd ffb8 	bl	8006ff4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009084:	4b19      	ldr	r3, [pc, #100]	; (80090ec <xTaskPriorityInherit+0xc4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4b18      	ldr	r3, [pc, #96]	; (80090f4 <xTaskPriorityInherit+0xcc>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d903      	bls.n	80090a2 <xTaskPriorityInherit+0x7a>
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <xTaskPriorityInherit+0xcc>)
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090a6:	4613      	mov	r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	4413      	add	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4a10      	ldr	r2, [pc, #64]	; (80090f0 <xTaskPriorityInherit+0xc8>)
 80090b0:	441a      	add	r2, r3
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	3304      	adds	r3, #4
 80090b6:	4619      	mov	r1, r3
 80090b8:	4610      	mov	r0, r2
 80090ba:	f7fd ff3e 	bl	8006f3a <vListInsertEnd>
 80090be:	e004      	b.n	80090ca <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <xTaskPriorityInherit+0xc4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]
 80090ce:	e008      	b.n	80090e2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090d4:	4b05      	ldr	r3, [pc, #20]	; (80090ec <xTaskPriorityInherit+0xc4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	429a      	cmp	r2, r3
 80090dc:	d201      	bcs.n	80090e2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80090de:	2301      	movs	r3, #1
 80090e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090e2:	68fb      	ldr	r3, [r7, #12]
	}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20006464 	.word	0x20006464
 80090f0:	20006468 	.word	0x20006468
 80090f4:	20006940 	.word	0x20006940

080090f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b086      	sub	sp, #24
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009104:	2300      	movs	r3, #0
 8009106:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d05a      	beq.n	80091c4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800910e:	4b30      	ldr	r3, [pc, #192]	; (80091d0 <xTaskPriorityDisinherit+0xd8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	429a      	cmp	r2, r3
 8009116:	d00c      	beq.n	8009132 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911c:	b672      	cpsid	i
 800911e:	f383 8811 	msr	BASEPRI, r3
 8009122:	f3bf 8f6f 	isb	sy
 8009126:	f3bf 8f4f 	dsb	sy
 800912a:	b662      	cpsie	i
 800912c:	60fb      	str	r3, [r7, #12]
}
 800912e:	bf00      	nop
 8009130:	e7fe      	b.n	8009130 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009136:	2b00      	cmp	r3, #0
 8009138:	d10c      	bne.n	8009154 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800913a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913e:	b672      	cpsid	i
 8009140:	f383 8811 	msr	BASEPRI, r3
 8009144:	f3bf 8f6f 	isb	sy
 8009148:	f3bf 8f4f 	dsb	sy
 800914c:	b662      	cpsie	i
 800914e:	60bb      	str	r3, [r7, #8]
}
 8009150:	bf00      	nop
 8009152:	e7fe      	b.n	8009152 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009158:	1e5a      	subs	r2, r3, #1
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009166:	429a      	cmp	r2, r3
 8009168:	d02c      	beq.n	80091c4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916e:	2b00      	cmp	r3, #0
 8009170:	d128      	bne.n	80091c4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	3304      	adds	r3, #4
 8009176:	4618      	mov	r0, r3
 8009178:	f7fd ff3c 	bl	8006ff4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009188:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009194:	4b0f      	ldr	r3, [pc, #60]	; (80091d4 <xTaskPriorityDisinherit+0xdc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d903      	bls.n	80091a4 <xTaskPriorityDisinherit+0xac>
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <xTaskPriorityDisinherit+0xdc>)
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a8:	4613      	mov	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	4413      	add	r3, r2
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <xTaskPriorityDisinherit+0xe0>)
 80091b2:	441a      	add	r2, r3
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	3304      	adds	r3, #4
 80091b8:	4619      	mov	r1, r3
 80091ba:	4610      	mov	r0, r2
 80091bc:	f7fd febd 	bl	8006f3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091c0:	2301      	movs	r3, #1
 80091c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091c4:	697b      	ldr	r3, [r7, #20]
	}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3718      	adds	r7, #24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	20006464 	.word	0x20006464
 80091d4:	20006940 	.word	0x20006940
 80091d8:	20006468 	.word	0x20006468

080091dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80091ea:	2301      	movs	r3, #1
 80091ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d06e      	beq.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10c      	bne.n	8009216 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 80091fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009200:	b672      	cpsid	i
 8009202:	f383 8811 	msr	BASEPRI, r3
 8009206:	f3bf 8f6f 	isb	sy
 800920a:	f3bf 8f4f 	dsb	sy
 800920e:	b662      	cpsie	i
 8009210:	60fb      	str	r3, [r7, #12]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d902      	bls.n	8009226 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	61fb      	str	r3, [r7, #28]
 8009224:	e002      	b.n	800922c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009226:	69bb      	ldr	r3, [r7, #24]
 8009228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800922a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800922c:	69bb      	ldr	r3, [r7, #24]
 800922e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009230:	69fa      	ldr	r2, [r7, #28]
 8009232:	429a      	cmp	r2, r3
 8009234:	d04d      	beq.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	429a      	cmp	r2, r3
 800923e:	d148      	bne.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009240:	4b26      	ldr	r3, [pc, #152]	; (80092dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	69ba      	ldr	r2, [r7, #24]
 8009246:	429a      	cmp	r2, r3
 8009248:	d10c      	bne.n	8009264 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800924e:	b672      	cpsid	i
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	b662      	cpsie	i
 800925e:	60bb      	str	r3, [r7, #8]
}
 8009260:	bf00      	nop
 8009262:	e7fe      	b.n	8009262 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009268:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	69fa      	ldr	r2, [r7, #28]
 800926e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	2b00      	cmp	r3, #0
 8009276:	db04      	blt.n	8009282 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	6959      	ldr	r1, [r3, #20]
 8009286:	693a      	ldr	r2, [r7, #16]
 8009288:	4613      	mov	r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	4413      	add	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009292:	4413      	add	r3, r2
 8009294:	4299      	cmp	r1, r3
 8009296:	d11c      	bne.n	80092d2 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	3304      	adds	r3, #4
 800929c:	4618      	mov	r0, r3
 800929e:	f7fd fea9 	bl	8006ff4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a6:	4b0f      	ldr	r3, [pc, #60]	; (80092e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d903      	bls.n	80092b6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80092b4:	6013      	str	r3, [r2, #0]
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ba:	4613      	mov	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4413      	add	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	4a07      	ldr	r2, [pc, #28]	; (80092e0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80092c4:	441a      	add	r2, r3
 80092c6:	69bb      	ldr	r3, [r7, #24]
 80092c8:	3304      	adds	r3, #4
 80092ca:	4619      	mov	r1, r3
 80092cc:	4610      	mov	r0, r2
 80092ce:	f7fd fe34 	bl	8006f3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092d2:	bf00      	nop
 80092d4:	3720      	adds	r7, #32
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	20006464 	.word	0x20006464
 80092e0:	20006468 	.word	0x20006468
 80092e4:	20006940 	.word	0x20006940

080092e8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80092e8:	b480      	push	{r7}
 80092ea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80092ec:	4b07      	ldr	r3, [pc, #28]	; (800930c <pvTaskIncrementMutexHeldCount+0x24>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d004      	beq.n	80092fe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80092f4:	4b05      	ldr	r3, [pc, #20]	; (800930c <pvTaskIncrementMutexHeldCount+0x24>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092fa:	3201      	adds	r2, #1
 80092fc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80092fe:	4b03      	ldr	r3, [pc, #12]	; (800930c <pvTaskIncrementMutexHeldCount+0x24>)
 8009300:	681b      	ldr	r3, [r3, #0]
	}
 8009302:	4618      	mov	r0, r3
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr
 800930c:	20006464 	.word	0x20006464

08009310 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800931a:	4b21      	ldr	r3, [pc, #132]	; (80093a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009320:	4b20      	ldr	r3, [pc, #128]	; (80093a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	3304      	adds	r3, #4
 8009326:	4618      	mov	r0, r3
 8009328:	f7fd fe64 	bl	8006ff4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009332:	d10a      	bne.n	800934a <prvAddCurrentTaskToDelayedList+0x3a>
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d007      	beq.n	800934a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800933a:	4b1a      	ldr	r3, [pc, #104]	; (80093a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3304      	adds	r3, #4
 8009340:	4619      	mov	r1, r3
 8009342:	4819      	ldr	r0, [pc, #100]	; (80093a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009344:	f7fd fdf9 	bl	8006f3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009348:	e026      	b.n	8009398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4413      	add	r3, r2
 8009350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009352:	4b14      	ldr	r3, [pc, #80]	; (80093a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800935a:	68ba      	ldr	r2, [r7, #8]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	429a      	cmp	r2, r3
 8009360:	d209      	bcs.n	8009376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009362:	4b12      	ldr	r3, [pc, #72]	; (80093ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	4b0f      	ldr	r3, [pc, #60]	; (80093a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	3304      	adds	r3, #4
 800936c:	4619      	mov	r1, r3
 800936e:	4610      	mov	r0, r2
 8009370:	f7fd fe07 	bl	8006f82 <vListInsert>
}
 8009374:	e010      	b.n	8009398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009376:	4b0e      	ldr	r3, [pc, #56]	; (80093b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4b0a      	ldr	r3, [pc, #40]	; (80093a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f7fd fdfd 	bl	8006f82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68ba      	ldr	r2, [r7, #8]
 800938e:	429a      	cmp	r2, r3
 8009390:	d202      	bcs.n	8009398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009392:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6013      	str	r3, [r2, #0]
}
 8009398:	bf00      	nop
 800939a:	3710      	adds	r7, #16
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}
 80093a0:	2000693c 	.word	0x2000693c
 80093a4:	20006464 	.word	0x20006464
 80093a8:	20006924 	.word	0x20006924
 80093ac:	200068f4 	.word	0x200068f4
 80093b0:	200068f0 	.word	0x200068f0
 80093b4:	20006958 	.word	0x20006958

080093b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b08a      	sub	sp, #40	; 0x28
 80093bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80093be:	2300      	movs	r3, #0
 80093c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80093c2:	f000 fb15 	bl	80099f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093c6:	4b1d      	ldr	r3, [pc, #116]	; (800943c <xTimerCreateTimerTask+0x84>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d021      	beq.n	8009412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093d6:	1d3a      	adds	r2, r7, #4
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	f107 030c 	add.w	r3, r7, #12
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fd fd63 	bl	8006eac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093e6:	6879      	ldr	r1, [r7, #4]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	9202      	str	r2, [sp, #8]
 80093ee:	9301      	str	r3, [sp, #4]
 80093f0:	2302      	movs	r3, #2
 80093f2:	9300      	str	r3, [sp, #0]
 80093f4:	2300      	movs	r3, #0
 80093f6:	460a      	mov	r2, r1
 80093f8:	4911      	ldr	r1, [pc, #68]	; (8009440 <xTimerCreateTimerTask+0x88>)
 80093fa:	4812      	ldr	r0, [pc, #72]	; (8009444 <xTimerCreateTimerTask+0x8c>)
 80093fc:	f7fe ff34 	bl	8008268 <xTaskCreateStatic>
 8009400:	4603      	mov	r3, r0
 8009402:	4a11      	ldr	r2, [pc, #68]	; (8009448 <xTimerCreateTimerTask+0x90>)
 8009404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009406:	4b10      	ldr	r3, [pc, #64]	; (8009448 <xTimerCreateTimerTask+0x90>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800940e:	2301      	movs	r3, #1
 8009410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d10c      	bne.n	8009432 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941c:	b672      	cpsid	i
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	b662      	cpsie	i
 800942c:	613b      	str	r3, [r7, #16]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009432:	697b      	ldr	r3, [r7, #20]
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20006994 	.word	0x20006994
 8009440:	08017794 	.word	0x08017794
 8009444:	08009589 	.word	0x08009589
 8009448:	20006998 	.word	0x20006998

0800944c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b08a      	sub	sp, #40	; 0x28
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
 8009458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800945a:	2300      	movs	r3, #0
 800945c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d10c      	bne.n	800947e <xTimerGenericCommand+0x32>
	__asm volatile
 8009464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009468:	b672      	cpsid	i
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	b662      	cpsie	i
 8009478:	623b      	str	r3, [r7, #32]
}
 800947a:	bf00      	nop
 800947c:	e7fe      	b.n	800947c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800947e:	4b1a      	ldr	r3, [pc, #104]	; (80094e8 <xTimerGenericCommand+0x9c>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d02a      	beq.n	80094dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	2b05      	cmp	r3, #5
 8009496:	dc18      	bgt.n	80094ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009498:	f7ff fda8 	bl	8008fec <xTaskGetSchedulerState>
 800949c:	4603      	mov	r3, r0
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d109      	bne.n	80094b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80094a2:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <xTimerGenericCommand+0x9c>)
 80094a4:	6818      	ldr	r0, [r3, #0]
 80094a6:	f107 0110 	add.w	r1, r7, #16
 80094aa:	2300      	movs	r3, #0
 80094ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094ae:	f7fe f849 	bl	8007544 <xQueueGenericSend>
 80094b2:	6278      	str	r0, [r7, #36]	; 0x24
 80094b4:	e012      	b.n	80094dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80094b6:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <xTimerGenericCommand+0x9c>)
 80094b8:	6818      	ldr	r0, [r3, #0]
 80094ba:	f107 0110 	add.w	r1, r7, #16
 80094be:	2300      	movs	r3, #0
 80094c0:	2200      	movs	r2, #0
 80094c2:	f7fe f83f 	bl	8007544 <xQueueGenericSend>
 80094c6:	6278      	str	r0, [r7, #36]	; 0x24
 80094c8:	e008      	b.n	80094dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80094ca:	4b07      	ldr	r3, [pc, #28]	; (80094e8 <xTimerGenericCommand+0x9c>)
 80094cc:	6818      	ldr	r0, [r3, #0]
 80094ce:	f107 0110 	add.w	r1, r7, #16
 80094d2:	2300      	movs	r3, #0
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	f7fe f93b 	bl	8007750 <xQueueGenericSendFromISR>
 80094da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3728      	adds	r7, #40	; 0x28
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20006994 	.word	0x20006994

080094ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f6:	4b23      	ldr	r3, [pc, #140]	; (8009584 <prvProcessExpiredTimer+0x98>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	68db      	ldr	r3, [r3, #12]
 80094fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	3304      	adds	r3, #4
 8009504:	4618      	mov	r0, r3
 8009506:	f7fd fd75 	bl	8006ff4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	2b00      	cmp	r3, #0
 8009516:	d024      	beq.n	8009562 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	699a      	ldr	r2, [r3, #24]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	18d1      	adds	r1, r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	6978      	ldr	r0, [r7, #20]
 8009526:	f000 f8d3 	bl	80096d0 <prvInsertTimerInActiveList>
 800952a:	4603      	mov	r3, r0
 800952c:	2b00      	cmp	r3, #0
 800952e:	d021      	beq.n	8009574 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009530:	2300      	movs	r3, #0
 8009532:	9300      	str	r3, [sp, #0]
 8009534:	2300      	movs	r3, #0
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	2100      	movs	r1, #0
 800953a:	6978      	ldr	r0, [r7, #20]
 800953c:	f7ff ff86 	bl	800944c <xTimerGenericCommand>
 8009540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d115      	bne.n	8009574 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	b672      	cpsid	i
 800954e:	f383 8811 	msr	BASEPRI, r3
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	f3bf 8f4f 	dsb	sy
 800955a:	b662      	cpsie	i
 800955c:	60fb      	str	r3, [r7, #12]
}
 800955e:	bf00      	nop
 8009560:	e7fe      	b.n	8009560 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009568:	f023 0301 	bic.w	r3, r3, #1
 800956c:	b2da      	uxtb	r2, r3
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	6978      	ldr	r0, [r7, #20]
 800957a:	4798      	blx	r3
}
 800957c:	bf00      	nop
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	2000698c 	.word	0x2000698c

08009588 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009590:	f107 0308 	add.w	r3, r7, #8
 8009594:	4618      	mov	r0, r3
 8009596:	f000 f857 	bl	8009648 <prvGetNextExpireTime>
 800959a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	4619      	mov	r1, r3
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 f803 	bl	80095ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80095a6:	f000 f8d5 	bl	8009754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80095aa:	e7f1      	b.n	8009590 <prvTimerTask+0x8>

080095ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80095b6:	f7ff f8c1 	bl	800873c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095ba:	f107 0308 	add.w	r3, r7, #8
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 f866 	bl	8009690 <prvSampleTimeNow>
 80095c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d130      	bne.n	800962e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10a      	bne.n	80095e8 <prvProcessTimerOrBlockTask+0x3c>
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d806      	bhi.n	80095e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095da:	f7ff f8bd 	bl	8008758 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095de:	68f9      	ldr	r1, [r7, #12]
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ff83 	bl	80094ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095e6:	e024      	b.n	8009632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d008      	beq.n	8009600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095ee:	4b13      	ldr	r3, [pc, #76]	; (800963c <prvProcessTimerOrBlockTask+0x90>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <prvProcessTimerOrBlockTask+0x50>
 80095f8:	2301      	movs	r3, #1
 80095fa:	e000      	b.n	80095fe <prvProcessTimerOrBlockTask+0x52>
 80095fc:	2300      	movs	r3, #0
 80095fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009600:	4b0f      	ldr	r3, [pc, #60]	; (8009640 <prvProcessTimerOrBlockTask+0x94>)
 8009602:	6818      	ldr	r0, [r3, #0]
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	1ad3      	subs	r3, r2, r3
 800960a:	683a      	ldr	r2, [r7, #0]
 800960c:	4619      	mov	r1, r3
 800960e:	f7fe fdf7 	bl	8008200 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009612:	f7ff f8a1 	bl	8008758 <xTaskResumeAll>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d10a      	bne.n	8009632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800961c:	4b09      	ldr	r3, [pc, #36]	; (8009644 <prvProcessTimerOrBlockTask+0x98>)
 800961e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	f3bf 8f6f 	isb	sy
}
 800962c:	e001      	b.n	8009632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800962e:	f7ff f893 	bl	8008758 <xTaskResumeAll>
}
 8009632:	bf00      	nop
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	20006990 	.word	0x20006990
 8009640:	20006994 	.word	0x20006994
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009650:	4b0e      	ldr	r3, [pc, #56]	; (800968c <prvGetNextExpireTime+0x44>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <prvGetNextExpireTime+0x16>
 800965a:	2201      	movs	r2, #1
 800965c:	e000      	b.n	8009660 <prvGetNextExpireTime+0x18>
 800965e:	2200      	movs	r2, #0
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d105      	bne.n	8009678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <prvGetNextExpireTime+0x44>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]
 8009676:	e001      	b.n	800967c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009678:	2300      	movs	r3, #0
 800967a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800967c:	68fb      	ldr	r3, [r7, #12]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	2000698c 	.word	0x2000698c

08009690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009698:	f7ff f8fe 	bl	8008898 <xTaskGetTickCount>
 800969c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800969e:	4b0b      	ldr	r3, [pc, #44]	; (80096cc <prvSampleTimeNow+0x3c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68fa      	ldr	r2, [r7, #12]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d205      	bcs.n	80096b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80096a8:	f000 f93c 	bl	8009924 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	601a      	str	r2, [r3, #0]
 80096b2:	e002      	b.n	80096ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80096ba:	4a04      	ldr	r2, [pc, #16]	; (80096cc <prvSampleTimeNow+0x3c>)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80096c0:	68fb      	ldr	r3, [r7, #12]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	2000699c 	.word	0x2000699c

080096d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d812      	bhi.n	800971c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	1ad2      	subs	r2, r2, r3
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	429a      	cmp	r2, r3
 8009702:	d302      	bcc.n	800970a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009704:	2301      	movs	r3, #1
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	e01b      	b.n	8009742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800970a:	4b10      	ldr	r3, [pc, #64]	; (800974c <prvInsertTimerInActiveList+0x7c>)
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	3304      	adds	r3, #4
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f7fd fc34 	bl	8006f82 <vListInsert>
 800971a:	e012      	b.n	8009742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	429a      	cmp	r2, r3
 8009722:	d206      	bcs.n	8009732 <prvInsertTimerInActiveList+0x62>
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	429a      	cmp	r2, r3
 800972a:	d302      	bcc.n	8009732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800972c:	2301      	movs	r3, #1
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	e007      	b.n	8009742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009732:	4b07      	ldr	r3, [pc, #28]	; (8009750 <prvInsertTimerInActiveList+0x80>)
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	3304      	adds	r3, #4
 800973a:	4619      	mov	r1, r3
 800973c:	4610      	mov	r0, r2
 800973e:	f7fd fc20 	bl	8006f82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009742:	697b      	ldr	r3, [r7, #20]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20006990 	.word	0x20006990
 8009750:	2000698c 	.word	0x2000698c

08009754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08e      	sub	sp, #56	; 0x38
 8009758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800975a:	e0d0      	b.n	80098fe <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	da1a      	bge.n	8009798 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009762:	1d3b      	adds	r3, r7, #4
 8009764:	3304      	adds	r3, #4
 8009766:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10c      	bne.n	8009788 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	61fb      	str	r3, [r7, #28]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800978e:	6850      	ldr	r0, [r2, #4]
 8009790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009792:	6892      	ldr	r2, [r2, #8]
 8009794:	4611      	mov	r1, r2
 8009796:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	f2c0 80af 	blt.w	80098fe <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80097a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d004      	beq.n	80097b6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	3304      	adds	r3, #4
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd fc1f 	bl	8006ff4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097b6:	463b      	mov	r3, r7
 80097b8:	4618      	mov	r0, r3
 80097ba:	f7ff ff69 	bl	8009690 <prvSampleTimeNow>
 80097be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b09      	cmp	r3, #9
 80097c4:	f200 809a 	bhi.w	80098fc <prvProcessReceivedCommands+0x1a8>
 80097c8:	a201      	add	r2, pc, #4	; (adr r2, 80097d0 <prvProcessReceivedCommands+0x7c>)
 80097ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ce:	bf00      	nop
 80097d0:	080097f9 	.word	0x080097f9
 80097d4:	080097f9 	.word	0x080097f9
 80097d8:	080097f9 	.word	0x080097f9
 80097dc:	08009871 	.word	0x08009871
 80097e0:	08009885 	.word	0x08009885
 80097e4:	080098d3 	.word	0x080098d3
 80097e8:	080097f9 	.word	0x080097f9
 80097ec:	080097f9 	.word	0x080097f9
 80097f0:	08009871 	.word	0x08009871
 80097f4:	08009885 	.word	0x08009885
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fe:	f043 0301 	orr.w	r3, r3, #1
 8009802:	b2da      	uxtb	r2, r3
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	18d1      	adds	r1, r2, r3
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009818:	f7ff ff5a 	bl	80096d0 <prvInsertTimerInActiveList>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d06d      	beq.n	80098fe <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009828:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800982a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800982c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009830:	f003 0304 	and.w	r3, r3, #4
 8009834:	2b00      	cmp	r3, #0
 8009836:	d062      	beq.n	80098fe <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	699b      	ldr	r3, [r3, #24]
 800983e:	441a      	add	r2, r3
 8009840:	2300      	movs	r3, #0
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	2300      	movs	r3, #0
 8009846:	2100      	movs	r1, #0
 8009848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984a:	f7ff fdff 	bl	800944c <xTimerGenericCommand>
 800984e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009850:	6a3b      	ldr	r3, [r7, #32]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d153      	bne.n	80098fe <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	b672      	cpsid	i
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	b662      	cpsie	i
 800986a:	61bb      	str	r3, [r7, #24]
}
 800986c:	bf00      	nop
 800986e:	e7fe      	b.n	800986e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009876:	f023 0301 	bic.w	r3, r3, #1
 800987a:	b2da      	uxtb	r2, r3
 800987c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009882:	e03c      	b.n	80098fe <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	b2da      	uxtb	r2, r3
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d10c      	bne.n	80098be <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80098a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a8:	b672      	cpsid	i
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	b662      	cpsie	i
 80098b8:	617b      	str	r3, [r7, #20]
}
 80098ba:	bf00      	nop
 80098bc:	e7fe      	b.n	80098bc <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80098be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c0:	699a      	ldr	r2, [r3, #24]
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	18d1      	adds	r1, r2, r3
 80098c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098cc:	f7ff ff00 	bl	80096d0 <prvInsertTimerInActiveList>
					break;
 80098d0:	e015      	b.n	80098fe <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d8:	f003 0302 	and.w	r3, r3, #2
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80098e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098e2:	f000 fbc9 	bl	800a078 <vPortFree>
 80098e6:	e00a      	b.n	80098fe <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098ee:	f023 0301 	bic.w	r3, r3, #1
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098fa:	e000      	b.n	80098fe <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 80098fc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <prvProcessReceivedCommands+0x1cc>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	1d39      	adds	r1, r7, #4
 8009904:	2200      	movs	r2, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe f858 	bl	80079bc <xQueueReceive>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	f47f af24 	bne.w	800975c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009914:	bf00      	nop
 8009916:	bf00      	nop
 8009918:	3730      	adds	r7, #48	; 0x30
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20006994 	.word	0x20006994

08009924 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800992a:	e04a      	b.n	80099c2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800992c:	4b2e      	ldr	r3, [pc, #184]	; (80099e8 <prvSwitchTimerLists+0xc4>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009936:	4b2c      	ldr	r3, [pc, #176]	; (80099e8 <prvSwitchTimerLists+0xc4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3304      	adds	r3, #4
 8009944:	4618      	mov	r0, r3
 8009946:	f7fd fb55 	bl	8006ff4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6a1b      	ldr	r3, [r3, #32]
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b00      	cmp	r3, #0
 800995e:	d030      	beq.n	80099c2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	4413      	add	r3, r2
 8009968:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800996a:	68ba      	ldr	r2, [r7, #8]
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	429a      	cmp	r2, r3
 8009970:	d90e      	bls.n	8009990 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	68ba      	ldr	r2, [r7, #8]
 8009976:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800997e:	4b1a      	ldr	r3, [pc, #104]	; (80099e8 <prvSwitchTimerLists+0xc4>)
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3304      	adds	r3, #4
 8009986:	4619      	mov	r1, r3
 8009988:	4610      	mov	r0, r2
 800998a:	f7fd fafa 	bl	8006f82 <vListInsert>
 800998e:	e018      	b.n	80099c2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009990:	2300      	movs	r3, #0
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2300      	movs	r3, #0
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	2100      	movs	r1, #0
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff fd56 	bl	800944c <xTimerGenericCommand>
 80099a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10c      	bne.n	80099c2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	b672      	cpsid	i
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	b662      	cpsie	i
 80099bc:	603b      	str	r3, [r7, #0]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80099c2:	4b09      	ldr	r3, [pc, #36]	; (80099e8 <prvSwitchTimerLists+0xc4>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1af      	bne.n	800992c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <prvSwitchTimerLists+0xc4>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80099d2:	4b06      	ldr	r3, [pc, #24]	; (80099ec <prvSwitchTimerLists+0xc8>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a04      	ldr	r2, [pc, #16]	; (80099e8 <prvSwitchTimerLists+0xc4>)
 80099d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80099da:	4a04      	ldr	r2, [pc, #16]	; (80099ec <prvSwitchTimerLists+0xc8>)
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	6013      	str	r3, [r2, #0]
}
 80099e0:	bf00      	nop
 80099e2:	3718      	adds	r7, #24
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	2000698c 	.word	0x2000698c
 80099ec:	20006990 	.word	0x20006990

080099f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b082      	sub	sp, #8
 80099f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099f6:	f000 f949 	bl	8009c8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099fa:	4b15      	ldr	r3, [pc, #84]	; (8009a50 <prvCheckForValidListAndQueue+0x60>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d120      	bne.n	8009a44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a02:	4814      	ldr	r0, [pc, #80]	; (8009a54 <prvCheckForValidListAndQueue+0x64>)
 8009a04:	f7fd fa6c 	bl	8006ee0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a08:	4813      	ldr	r0, [pc, #76]	; (8009a58 <prvCheckForValidListAndQueue+0x68>)
 8009a0a:	f7fd fa69 	bl	8006ee0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a0e:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <prvCheckForValidListAndQueue+0x6c>)
 8009a10:	4a10      	ldr	r2, [pc, #64]	; (8009a54 <prvCheckForValidListAndQueue+0x64>)
 8009a12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a14:	4b12      	ldr	r3, [pc, #72]	; (8009a60 <prvCheckForValidListAndQueue+0x70>)
 8009a16:	4a10      	ldr	r2, [pc, #64]	; (8009a58 <prvCheckForValidListAndQueue+0x68>)
 8009a18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	9300      	str	r3, [sp, #0]
 8009a1e:	4b11      	ldr	r3, [pc, #68]	; (8009a64 <prvCheckForValidListAndQueue+0x74>)
 8009a20:	4a11      	ldr	r2, [pc, #68]	; (8009a68 <prvCheckForValidListAndQueue+0x78>)
 8009a22:	2110      	movs	r1, #16
 8009a24:	200a      	movs	r0, #10
 8009a26:	f7fd fb79 	bl	800711c <xQueueGenericCreateStatic>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	4a08      	ldr	r2, [pc, #32]	; (8009a50 <prvCheckForValidListAndQueue+0x60>)
 8009a2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a30:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <prvCheckForValidListAndQueue+0x60>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d005      	beq.n	8009a44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a38:	4b05      	ldr	r3, [pc, #20]	; (8009a50 <prvCheckForValidListAndQueue+0x60>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	490b      	ldr	r1, [pc, #44]	; (8009a6c <prvCheckForValidListAndQueue+0x7c>)
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fb8a 	bl	8008158 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a44:	f000 f956 	bl	8009cf4 <vPortExitCritical>
}
 8009a48:	bf00      	nop
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20006994 	.word	0x20006994
 8009a54:	20006964 	.word	0x20006964
 8009a58:	20006978 	.word	0x20006978
 8009a5c:	2000698c 	.word	0x2000698c
 8009a60:	20006990 	.word	0x20006990
 8009a64:	20006a40 	.word	0x20006a40
 8009a68:	200069a0 	.word	0x200069a0
 8009a6c:	0801779c 	.word	0x0801779c

08009a70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	3b04      	subs	r3, #4
 8009a80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	3b04      	subs	r3, #4
 8009a8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f023 0201 	bic.w	r2, r3, #1
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3b04      	subs	r3, #4
 8009a9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009aa0:	4a0c      	ldr	r2, [pc, #48]	; (8009ad4 <pxPortInitialiseStack+0x64>)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	3b14      	subs	r3, #20
 8009aaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	3b04      	subs	r3, #4
 8009ab6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	f06f 0202 	mvn.w	r2, #2
 8009abe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3b20      	subs	r3, #32
 8009ac4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3714      	adds	r7, #20
 8009acc:	46bd      	mov	sp, r7
 8009ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad2:	4770      	bx	lr
 8009ad4:	08009ad9 	.word	0x08009ad9

08009ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ae2:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <prvTaskExitError+0x5c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aea:	d00c      	beq.n	8009b06 <prvTaskExitError+0x2e>
	__asm volatile
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	b672      	cpsid	i
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	b662      	cpsie	i
 8009b00:	60fb      	str	r3, [r7, #12]
}
 8009b02:	bf00      	nop
 8009b04:	e7fe      	b.n	8009b04 <prvTaskExitError+0x2c>
	__asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b0a:	b672      	cpsid	i
 8009b0c:	f383 8811 	msr	BASEPRI, r3
 8009b10:	f3bf 8f6f 	isb	sy
 8009b14:	f3bf 8f4f 	dsb	sy
 8009b18:	b662      	cpsie	i
 8009b1a:	60bb      	str	r3, [r7, #8]
}
 8009b1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009b1e:	bf00      	nop
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d0fc      	beq.n	8009b20 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	3714      	adds	r7, #20
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr
 8009b34:	2000000c 	.word	0x2000000c
	...

08009b40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <pxCurrentTCBConst2>)
 8009b42:	6819      	ldr	r1, [r3, #0]
 8009b44:	6808      	ldr	r0, [r1, #0]
 8009b46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b4a:	f380 8809 	msr	PSP, r0
 8009b4e:	f3bf 8f6f 	isb	sy
 8009b52:	f04f 0000 	mov.w	r0, #0
 8009b56:	f380 8811 	msr	BASEPRI, r0
 8009b5a:	4770      	bx	lr
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst2>:
 8009b60:	20006464 	.word	0x20006464
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b68:	4808      	ldr	r0, [pc, #32]	; (8009b8c <prvPortStartFirstTask+0x24>)
 8009b6a:	6800      	ldr	r0, [r0, #0]
 8009b6c:	6800      	ldr	r0, [r0, #0]
 8009b6e:	f380 8808 	msr	MSP, r0
 8009b72:	f04f 0000 	mov.w	r0, #0
 8009b76:	f380 8814 	msr	CONTROL, r0
 8009b7a:	b662      	cpsie	i
 8009b7c:	b661      	cpsie	f
 8009b7e:	f3bf 8f4f 	dsb	sy
 8009b82:	f3bf 8f6f 	isb	sy
 8009b86:	df00      	svc	0
 8009b88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b8a:	bf00      	nop
 8009b8c:	e000ed08 	.word	0xe000ed08

08009b90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b96:	4b37      	ldr	r3, [pc, #220]	; (8009c74 <xPortStartScheduler+0xe4>)
 8009b98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	781b      	ldrb	r3, [r3, #0]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	22ff      	movs	r2, #255	; 0xff
 8009ba6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009bb0:	78fb      	ldrb	r3, [r7, #3]
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4b2f      	ldr	r3, [pc, #188]	; (8009c78 <xPortStartScheduler+0xe8>)
 8009bbc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bbe:	4b2f      	ldr	r3, [pc, #188]	; (8009c7c <xPortStartScheduler+0xec>)
 8009bc0:	2207      	movs	r2, #7
 8009bc2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bc4:	e009      	b.n	8009bda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009bc6:	4b2d      	ldr	r3, [pc, #180]	; (8009c7c <xPortStartScheduler+0xec>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	4a2b      	ldr	r2, [pc, #172]	; (8009c7c <xPortStartScheduler+0xec>)
 8009bce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bd0:	78fb      	ldrb	r3, [r7, #3]
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	005b      	lsls	r3, r3, #1
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bda:	78fb      	ldrb	r3, [r7, #3]
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be2:	2b80      	cmp	r3, #128	; 0x80
 8009be4:	d0ef      	beq.n	8009bc6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009be6:	4b25      	ldr	r3, [pc, #148]	; (8009c7c <xPortStartScheduler+0xec>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f1c3 0307 	rsb	r3, r3, #7
 8009bee:	2b04      	cmp	r3, #4
 8009bf0:	d00c      	beq.n	8009c0c <xPortStartScheduler+0x7c>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf6:	b672      	cpsid	i
 8009bf8:	f383 8811 	msr	BASEPRI, r3
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f3bf 8f4f 	dsb	sy
 8009c04:	b662      	cpsie	i
 8009c06:	60bb      	str	r3, [r7, #8]
}
 8009c08:	bf00      	nop
 8009c0a:	e7fe      	b.n	8009c0a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009c0c:	4b1b      	ldr	r3, [pc, #108]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	021b      	lsls	r3, r3, #8
 8009c12:	4a1a      	ldr	r2, [pc, #104]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c14:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c16:	4b19      	ldr	r3, [pc, #100]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c1e:	4a17      	ldr	r2, [pc, #92]	; (8009c7c <xPortStartScheduler+0xec>)
 8009c20:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	b2da      	uxtb	r2, r3
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c2a:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <xPortStartScheduler+0xf0>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <xPortStartScheduler+0xf0>)
 8009c30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c34:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c36:	4b12      	ldr	r3, [pc, #72]	; (8009c80 <xPortStartScheduler+0xf0>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a11      	ldr	r2, [pc, #68]	; (8009c80 <xPortStartScheduler+0xf0>)
 8009c3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c40:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c42:	f000 f8dd 	bl	8009e00 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c46:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <xPortStartScheduler+0xf4>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c4c:	f000 f8fc 	bl	8009e48 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c50:	4b0d      	ldr	r3, [pc, #52]	; (8009c88 <xPortStartScheduler+0xf8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a0c      	ldr	r2, [pc, #48]	; (8009c88 <xPortStartScheduler+0xf8>)
 8009c56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c5a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c5c:	f7ff ff84 	bl	8009b68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c60:	f7fe fef8 	bl	8008a54 <vTaskSwitchContext>
	prvTaskExitError();
 8009c64:	f7ff ff38 	bl	8009ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3710      	adds	r7, #16
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	e000e400 	.word	0xe000e400
 8009c78:	20006a90 	.word	0x20006a90
 8009c7c:	20006a94 	.word	0x20006a94
 8009c80:	e000ed20 	.word	0xe000ed20
 8009c84:	2000000c 	.word	0x2000000c
 8009c88:	e000ef34 	.word	0xe000ef34

08009c8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	b672      	cpsid	i
 8009c98:	f383 8811 	msr	BASEPRI, r3
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	f3bf 8f4f 	dsb	sy
 8009ca4:	b662      	cpsie	i
 8009ca6:	607b      	str	r3, [r7, #4]
}
 8009ca8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009caa:	4b10      	ldr	r3, [pc, #64]	; (8009cec <vPortEnterCritical+0x60>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	4a0e      	ldr	r2, [pc, #56]	; (8009cec <vPortEnterCritical+0x60>)
 8009cb2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009cb4:	4b0d      	ldr	r3, [pc, #52]	; (8009cec <vPortEnterCritical+0x60>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d111      	bne.n	8009ce0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cbc:	4b0c      	ldr	r3, [pc, #48]	; (8009cf0 <vPortEnterCritical+0x64>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d00c      	beq.n	8009ce0 <vPortEnterCritical+0x54>
	__asm volatile
 8009cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cca:	b672      	cpsid	i
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	b662      	cpsie	i
 8009cda:	603b      	str	r3, [r7, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <vPortEnterCritical+0x52>
	}
}
 8009ce0:	bf00      	nop
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	2000000c 	.word	0x2000000c
 8009cf0:	e000ed04 	.word	0xe000ed04

08009cf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cfa:	4b13      	ldr	r3, [pc, #76]	; (8009d48 <vPortExitCritical+0x54>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10c      	bne.n	8009d1c <vPortExitCritical+0x28>
	__asm volatile
 8009d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d06:	b672      	cpsid	i
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	b662      	cpsie	i
 8009d16:	607b      	str	r3, [r7, #4]
}
 8009d18:	bf00      	nop
 8009d1a:	e7fe      	b.n	8009d1a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <vPortExitCritical+0x54>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	4a09      	ldr	r2, [pc, #36]	; (8009d48 <vPortExitCritical+0x54>)
 8009d24:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d26:	4b08      	ldr	r3, [pc, #32]	; (8009d48 <vPortExitCritical+0x54>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d105      	bne.n	8009d3a <vPortExitCritical+0x46>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	f383 8811 	msr	BASEPRI, r3
}
 8009d38:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	2000000c 	.word	0x2000000c
 8009d4c:	00000000 	.word	0x00000000

08009d50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d50:	f3ef 8009 	mrs	r0, PSP
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	4b15      	ldr	r3, [pc, #84]	; (8009db0 <pxCurrentTCBConst>)
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	f01e 0f10 	tst.w	lr, #16
 8009d60:	bf08      	it	eq
 8009d62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	6010      	str	r0, [r2, #0]
 8009d6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d74:	b672      	cpsid	i
 8009d76:	f380 8811 	msr	BASEPRI, r0
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	b662      	cpsie	i
 8009d84:	f7fe fe66 	bl	8008a54 <vTaskSwitchContext>
 8009d88:	f04f 0000 	mov.w	r0, #0
 8009d8c:	f380 8811 	msr	BASEPRI, r0
 8009d90:	bc09      	pop	{r0, r3}
 8009d92:	6819      	ldr	r1, [r3, #0]
 8009d94:	6808      	ldr	r0, [r1, #0]
 8009d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9a:	f01e 0f10 	tst.w	lr, #16
 8009d9e:	bf08      	it	eq
 8009da0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009da4:	f380 8809 	msr	PSP, r0
 8009da8:	f3bf 8f6f 	isb	sy
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop

08009db0 <pxCurrentTCBConst>:
 8009db0:	20006464 	.word	0x20006464
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009db4:	bf00      	nop
 8009db6:	bf00      	nop

08009db8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
	__asm volatile
 8009dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc2:	b672      	cpsid	i
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	b662      	cpsie	i
 8009dd2:	607b      	str	r3, [r7, #4]
}
 8009dd4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dd6:	f7fe fd81 	bl	80088dc <xTaskIncrementTick>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009de0:	4b06      	ldr	r3, [pc, #24]	; (8009dfc <xPortSysTickHandler+0x44>)
 8009de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009de6:	601a      	str	r2, [r3, #0]
 8009de8:	2300      	movs	r3, #0
 8009dea:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	f383 8811 	msr	BASEPRI, r3
}
 8009df2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009df4:	bf00      	nop
 8009df6:	3708      	adds	r7, #8
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	e000ed04 	.word	0xe000ed04

08009e00 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009e00:	b480      	push	{r7}
 8009e02:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009e04:	4b0b      	ldr	r3, [pc, #44]	; (8009e34 <vPortSetupTimerInterrupt+0x34>)
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009e0a:	4b0b      	ldr	r3, [pc, #44]	; (8009e38 <vPortSetupTimerInterrupt+0x38>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009e10:	4b0a      	ldr	r3, [pc, #40]	; (8009e3c <vPortSetupTimerInterrupt+0x3c>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a0a      	ldr	r2, [pc, #40]	; (8009e40 <vPortSetupTimerInterrupt+0x40>)
 8009e16:	fba2 2303 	umull	r2, r3, r2, r3
 8009e1a:	099b      	lsrs	r3, r3, #6
 8009e1c:	4a09      	ldr	r2, [pc, #36]	; (8009e44 <vPortSetupTimerInterrupt+0x44>)
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e22:	4b04      	ldr	r3, [pc, #16]	; (8009e34 <vPortSetupTimerInterrupt+0x34>)
 8009e24:	2207      	movs	r2, #7
 8009e26:	601a      	str	r2, [r3, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	e000e010 	.word	0xe000e010
 8009e38:	e000e018 	.word	0xe000e018
 8009e3c:	20000000 	.word	0x20000000
 8009e40:	10624dd3 	.word	0x10624dd3
 8009e44:	e000e014 	.word	0xe000e014

08009e48 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e48:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e58 <vPortEnableVFP+0x10>
 8009e4c:	6801      	ldr	r1, [r0, #0]
 8009e4e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e52:	6001      	str	r1, [r0, #0]
 8009e54:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e56:	bf00      	nop
 8009e58:	e000ed88 	.word	0xe000ed88

08009e5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e62:	f3ef 8305 	mrs	r3, IPSR
 8009e66:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b0f      	cmp	r3, #15
 8009e6c:	d916      	bls.n	8009e9c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e6e:	4a19      	ldr	r2, [pc, #100]	; (8009ed4 <vPortValidateInterruptPriority+0x78>)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e78:	4b17      	ldr	r3, [pc, #92]	; (8009ed8 <vPortValidateInterruptPriority+0x7c>)
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	7afa      	ldrb	r2, [r7, #11]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d20c      	bcs.n	8009e9c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e86:	b672      	cpsid	i
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	b662      	cpsie	i
 8009e96:	607b      	str	r3, [r7, #4]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e9c:	4b0f      	ldr	r3, [pc, #60]	; (8009edc <vPortValidateInterruptPriority+0x80>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ea4:	4b0e      	ldr	r3, [pc, #56]	; (8009ee0 <vPortValidateInterruptPriority+0x84>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d90c      	bls.n	8009ec6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	b672      	cpsid	i
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	b662      	cpsie	i
 8009ec0:	603b      	str	r3, [r7, #0]
}
 8009ec2:	bf00      	nop
 8009ec4:	e7fe      	b.n	8009ec4 <vPortValidateInterruptPriority+0x68>
	}
 8009ec6:	bf00      	nop
 8009ec8:	3714      	adds	r7, #20
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr
 8009ed2:	bf00      	nop
 8009ed4:	e000e3f0 	.word	0xe000e3f0
 8009ed8:	20006a90 	.word	0x20006a90
 8009edc:	e000ed0c 	.word	0xe000ed0c
 8009ee0:	20006a94 	.word	0x20006a94

08009ee4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08a      	sub	sp, #40	; 0x28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009eec:	2300      	movs	r3, #0
 8009eee:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ef0:	f7fe fc24 	bl	800873c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ef4:	4b5b      	ldr	r3, [pc, #364]	; (800a064 <pvPortMalloc+0x180>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009efc:	f000 f91a 	bl	800a134 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009f00:	4b59      	ldr	r3, [pc, #356]	; (800a068 <pvPortMalloc+0x184>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4013      	ands	r3, r2
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	f040 8092 	bne.w	800a032 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01f      	beq.n	8009f54 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009f14:	2208      	movs	r2, #8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4413      	add	r3, r2
 8009f1a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f003 0307 	and.w	r3, r3, #7
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d016      	beq.n	8009f54 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f023 0307 	bic.w	r3, r3, #7
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f003 0307 	and.w	r3, r3, #7
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00c      	beq.n	8009f54 <pvPortMalloc+0x70>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	b672      	cpsid	i
 8009f40:	f383 8811 	msr	BASEPRI, r3
 8009f44:	f3bf 8f6f 	isb	sy
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	b662      	cpsie	i
 8009f4e:	617b      	str	r3, [r7, #20]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d06b      	beq.n	800a032 <pvPortMalloc+0x14e>
 8009f5a:	4b44      	ldr	r3, [pc, #272]	; (800a06c <pvPortMalloc+0x188>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d866      	bhi.n	800a032 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f64:	4b42      	ldr	r3, [pc, #264]	; (800a070 <pvPortMalloc+0x18c>)
 8009f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f68:	4b41      	ldr	r3, [pc, #260]	; (800a070 <pvPortMalloc+0x18c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f6e:	e004      	b.n	8009f7a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	429a      	cmp	r2, r3
 8009f82:	d903      	bls.n	8009f8c <pvPortMalloc+0xa8>
 8009f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d1f1      	bne.n	8009f70 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f8c:	4b35      	ldr	r3, [pc, #212]	; (800a064 <pvPortMalloc+0x180>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d04d      	beq.n	800a032 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f96:	6a3b      	ldr	r3, [r7, #32]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	2208      	movs	r2, #8
 8009f9c:	4413      	add	r3, r2
 8009f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	685a      	ldr	r2, [r3, #4]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	1ad2      	subs	r2, r2, r3
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	005b      	lsls	r3, r3, #1
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d921      	bls.n	8009ffc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	f003 0307 	and.w	r3, r3, #7
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00c      	beq.n	8009fe4 <pvPortMalloc+0x100>
	__asm volatile
 8009fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fce:	b672      	cpsid	i
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	b662      	cpsie	i
 8009fde:	613b      	str	r3, [r7, #16]
}
 8009fe0:	bf00      	nop
 8009fe2:	e7fe      	b.n	8009fe2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe6:	685a      	ldr	r2, [r3, #4]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	1ad2      	subs	r2, r2, r3
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ff6:	69b8      	ldr	r0, [r7, #24]
 8009ff8:	f000 f8fe 	bl	800a1f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ffc:	4b1b      	ldr	r3, [pc, #108]	; (800a06c <pvPortMalloc+0x188>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	4a19      	ldr	r2, [pc, #100]	; (800a06c <pvPortMalloc+0x188>)
 800a008:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a00a:	4b18      	ldr	r3, [pc, #96]	; (800a06c <pvPortMalloc+0x188>)
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	4b19      	ldr	r3, [pc, #100]	; (800a074 <pvPortMalloc+0x190>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	429a      	cmp	r2, r3
 800a014:	d203      	bcs.n	800a01e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a016:	4b15      	ldr	r3, [pc, #84]	; (800a06c <pvPortMalloc+0x188>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a16      	ldr	r2, [pc, #88]	; (800a074 <pvPortMalloc+0x190>)
 800a01c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	4b11      	ldr	r3, [pc, #68]	; (800a068 <pvPortMalloc+0x184>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	431a      	orrs	r2, r3
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a032:	f7fe fb91 	bl	8008758 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a036:	69fb      	ldr	r3, [r7, #28]
 800a038:	f003 0307 	and.w	r3, r3, #7
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00c      	beq.n	800a05a <pvPortMalloc+0x176>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	b672      	cpsid	i
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	b662      	cpsie	i
 800a054:	60fb      	str	r3, [r7, #12]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <pvPortMalloc+0x174>
	return pvReturn;
 800a05a:	69fb      	ldr	r3, [r7, #28]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3728      	adds	r7, #40	; 0x28
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	2000a6a0 	.word	0x2000a6a0
 800a068:	2000a6ac 	.word	0x2000a6ac
 800a06c:	2000a6a4 	.word	0x2000a6a4
 800a070:	2000a698 	.word	0x2000a698
 800a074:	2000a6a8 	.word	0x2000a6a8

0800a078 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d04c      	beq.n	800a124 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a08a:	2308      	movs	r3, #8
 800a08c:	425b      	negs	r3, r3
 800a08e:	697a      	ldr	r2, [r7, #20]
 800a090:	4413      	add	r3, r2
 800a092:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	4b23      	ldr	r3, [pc, #140]	; (800a12c <vPortFree+0xb4>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4013      	ands	r3, r2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10c      	bne.n	800a0c0 <vPortFree+0x48>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	b672      	cpsid	i
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	b662      	cpsie	i
 800a0ba:	60fb      	str	r3, [r7, #12]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00c      	beq.n	800a0e2 <vPortFree+0x6a>
	__asm volatile
 800a0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0cc:	b672      	cpsid	i
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	b662      	cpsie	i
 800a0dc:	60bb      	str	r3, [r7, #8]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	685a      	ldr	r2, [r3, #4]
 800a0e6:	4b11      	ldr	r3, [pc, #68]	; (800a12c <vPortFree+0xb4>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d019      	beq.n	800a124 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d115      	bne.n	800a124 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	4b0b      	ldr	r3, [pc, #44]	; (800a12c <vPortFree+0xb4>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	43db      	mvns	r3, r3
 800a102:	401a      	ands	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a108:	f7fe fb18 	bl	800873c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	685a      	ldr	r2, [r3, #4]
 800a110:	4b07      	ldr	r3, [pc, #28]	; (800a130 <vPortFree+0xb8>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4413      	add	r3, r2
 800a116:	4a06      	ldr	r2, [pc, #24]	; (800a130 <vPortFree+0xb8>)
 800a118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a11a:	6938      	ldr	r0, [r7, #16]
 800a11c:	f000 f86c 	bl	800a1f8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a120:	f7fe fb1a 	bl	8008758 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a124:	bf00      	nop
 800a126:	3718      	adds	r7, #24
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	2000a6ac 	.word	0x2000a6ac
 800a130:	2000a6a4 	.word	0x2000a6a4

0800a134 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a13a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a13e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a140:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <prvHeapInit+0xac>)
 800a142:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f003 0307 	and.w	r3, r3, #7
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00c      	beq.n	800a168 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	3307      	adds	r3, #7
 800a152:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f023 0307 	bic.w	r3, r3, #7
 800a15a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	4a1f      	ldr	r2, [pc, #124]	; (800a1e0 <prvHeapInit+0xac>)
 800a164:	4413      	add	r3, r2
 800a166:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a16c:	4a1d      	ldr	r2, [pc, #116]	; (800a1e4 <prvHeapInit+0xb0>)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a172:	4b1c      	ldr	r3, [pc, #112]	; (800a1e4 <prvHeapInit+0xb0>)
 800a174:	2200      	movs	r2, #0
 800a176:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	68ba      	ldr	r2, [r7, #8]
 800a17c:	4413      	add	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a180:	2208      	movs	r2, #8
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	1a9b      	subs	r3, r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f023 0307 	bic.w	r3, r3, #7
 800a18e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	4a15      	ldr	r2, [pc, #84]	; (800a1e8 <prvHeapInit+0xb4>)
 800a194:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a196:	4b14      	ldr	r3, [pc, #80]	; (800a1e8 <prvHeapInit+0xb4>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2200      	movs	r2, #0
 800a19c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a19e:	4b12      	ldr	r3, [pc, #72]	; (800a1e8 <prvHeapInit+0xb4>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	1ad2      	subs	r2, r2, r3
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1b4:	4b0c      	ldr	r3, [pc, #48]	; (800a1e8 <prvHeapInit+0xb4>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	4a0a      	ldr	r2, [pc, #40]	; (800a1ec <prvHeapInit+0xb8>)
 800a1c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4a09      	ldr	r2, [pc, #36]	; (800a1f0 <prvHeapInit+0xbc>)
 800a1ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1cc:	4b09      	ldr	r3, [pc, #36]	; (800a1f4 <prvHeapInit+0xc0>)
 800a1ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1d2:	601a      	str	r2, [r3, #0]
}
 800a1d4:	bf00      	nop
 800a1d6:	3714      	adds	r7, #20
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	20006a98 	.word	0x20006a98
 800a1e4:	2000a698 	.word	0x2000a698
 800a1e8:	2000a6a0 	.word	0x2000a6a0
 800a1ec:	2000a6a8 	.word	0x2000a6a8
 800a1f0:	2000a6a4 	.word	0x2000a6a4
 800a1f4:	2000a6ac 	.word	0x2000a6ac

0800a1f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a200:	4b28      	ldr	r3, [pc, #160]	; (800a2a4 <prvInsertBlockIntoFreeList+0xac>)
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e002      	b.n	800a20c <prvInsertBlockIntoFreeList+0x14>
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	429a      	cmp	r2, r3
 800a214:	d8f7      	bhi.n	800a206 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	68ba      	ldr	r2, [r7, #8]
 800a220:	4413      	add	r3, r2
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	429a      	cmp	r2, r3
 800a226:	d108      	bne.n	800a23a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	441a      	add	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d118      	bne.n	800a280 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681a      	ldr	r2, [r3, #0]
 800a252:	4b15      	ldr	r3, [pc, #84]	; (800a2a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d00d      	beq.n	800a276 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685a      	ldr	r2, [r3, #4]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	441a      	add	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	601a      	str	r2, [r3, #0]
 800a274:	e008      	b.n	800a288 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a276:	4b0c      	ldr	r3, [pc, #48]	; (800a2a8 <prvInsertBlockIntoFreeList+0xb0>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	601a      	str	r2, [r3, #0]
 800a27e:	e003      	b.n	800a288 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d002      	beq.n	800a296 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	687a      	ldr	r2, [r7, #4]
 800a294:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	2000a698 	.word	0x2000a698
 800a2a8:	2000a6a0 	.word	0x2000a6a0

0800a2ac <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a2b6:	f007 fa79 	bl	80117ac <sys_timeouts_sleeptime>
 800a2ba:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c2:	d10b      	bne.n	800a2dc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a2c4:	4813      	ldr	r0, [pc, #76]	; (800a314 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2c6:	f00c f94c 	bl	8016562 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f00c f8d4 	bl	801647c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a2d4:	480f      	ldr	r0, [pc, #60]	; (800a314 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2d6:	f00c f935 	bl	8016544 <sys_mutex_lock>
    return;
 800a2da:	e018      	b.n	800a30e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d102      	bne.n	800a2e8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a2e2:	f007 fa29 	bl	8011738 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a2e6:	e7e6      	b.n	800a2b6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a2e8:	480a      	ldr	r0, [pc, #40]	; (800a314 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2ea:	f00c f93a 	bl	8016562 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	6839      	ldr	r1, [r7, #0]
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f00c f8c2 	bl	801647c <sys_arch_mbox_fetch>
 800a2f8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a2fa:	4806      	ldr	r0, [pc, #24]	; (800a314 <tcpip_timeouts_mbox_fetch+0x68>)
 800a2fc:	f00c f922 	bl	8016544 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a306:	d102      	bne.n	800a30e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a308:	f007 fa16 	bl	8011738 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a30c:	e7d3      	b.n	800a2b6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a30e:	3710      	adds	r7, #16
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}
 800a314:	2000a6bc 	.word	0x2000a6bc

0800a318 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a320:	4810      	ldr	r0, [pc, #64]	; (800a364 <tcpip_thread+0x4c>)
 800a322:	f00c f90f 	bl	8016544 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a326:	4b10      	ldr	r3, [pc, #64]	; (800a368 <tcpip_thread+0x50>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d005      	beq.n	800a33a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a32e:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <tcpip_thread+0x50>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a0e      	ldr	r2, [pc, #56]	; (800a36c <tcpip_thread+0x54>)
 800a334:	6812      	ldr	r2, [r2, #0]
 800a336:	4610      	mov	r0, r2
 800a338:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a33a:	f107 030c 	add.w	r3, r7, #12
 800a33e:	4619      	mov	r1, r3
 800a340:	480b      	ldr	r0, [pc, #44]	; (800a370 <tcpip_thread+0x58>)
 800a342:	f7ff ffb3 	bl	800a2ac <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d106      	bne.n	800a35a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <tcpip_thread+0x5c>)
 800a34e:	2291      	movs	r2, #145	; 0x91
 800a350:	4909      	ldr	r1, [pc, #36]	; (800a378 <tcpip_thread+0x60>)
 800a352:	480a      	ldr	r0, [pc, #40]	; (800a37c <tcpip_thread+0x64>)
 800a354:	f00c fa50 	bl	80167f8 <iprintf>
      continue;
 800a358:	e003      	b.n	800a362 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 f80f 	bl	800a380 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a362:	e7ea      	b.n	800a33a <tcpip_thread+0x22>
 800a364:	2000a6bc 	.word	0x2000a6bc
 800a368:	2000a6b0 	.word	0x2000a6b0
 800a36c:	2000a6b4 	.word	0x2000a6b4
 800a370:	2000a6b8 	.word	0x2000a6b8
 800a374:	080177a4 	.word	0x080177a4
 800a378:	080177d4 	.word	0x080177d4
 800a37c:	080177f4 	.word	0x080177f4

0800a380 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d026      	beq.n	800a3de <tcpip_thread_handle_msg+0x5e>
 800a390:	2b02      	cmp	r3, #2
 800a392:	dc2b      	bgt.n	800a3ec <tcpip_thread_handle_msg+0x6c>
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <tcpip_thread_handle_msg+0x1e>
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d015      	beq.n	800a3c8 <tcpip_thread_handle_msg+0x48>
 800a39c:	e026      	b.n	800a3ec <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6850      	ldr	r0, [r2, #4]
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6892      	ldr	r2, [r2, #8]
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4798      	blx	r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f001 fcaf 	bl	800bd1c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	2009      	movs	r0, #9
 800a3c2:	f000 fe63 	bl	800b08c <memp_free>
      break;
 800a3c6:	e018      	b.n	800a3fa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	685b      	ldr	r3, [r3, #4]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6892      	ldr	r2, [r2, #8]
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a3d4:	6879      	ldr	r1, [r7, #4]
 800a3d6:	2008      	movs	r0, #8
 800a3d8:	f000 fe58 	bl	800b08c <memp_free>
      break;
 800a3dc:	e00d      	b.n	800a3fa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	6892      	ldr	r2, [r2, #8]
 800a3e6:	4610      	mov	r0, r2
 800a3e8:	4798      	blx	r3
      break;
 800a3ea:	e006      	b.n	800a3fa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a3ec:	4b05      	ldr	r3, [pc, #20]	; (800a404 <tcpip_thread_handle_msg+0x84>)
 800a3ee:	22cf      	movs	r2, #207	; 0xcf
 800a3f0:	4905      	ldr	r1, [pc, #20]	; (800a408 <tcpip_thread_handle_msg+0x88>)
 800a3f2:	4806      	ldr	r0, [pc, #24]	; (800a40c <tcpip_thread_handle_msg+0x8c>)
 800a3f4:	f00c fa00 	bl	80167f8 <iprintf>
      break;
 800a3f8:	bf00      	nop
  }
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	080177a4 	.word	0x080177a4
 800a408:	080177d4 	.word	0x080177d4
 800a40c:	080177f4 	.word	0x080177f4

0800a410 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	60f8      	str	r0, [r7, #12]
 800a418:	60b9      	str	r1, [r7, #8]
 800a41a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a41c:	481a      	ldr	r0, [pc, #104]	; (800a488 <tcpip_inpkt+0x78>)
 800a41e:	f00c f85e 	bl	80164de <sys_mbox_valid>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d105      	bne.n	800a434 <tcpip_inpkt+0x24>
 800a428:	4b18      	ldr	r3, [pc, #96]	; (800a48c <tcpip_inpkt+0x7c>)
 800a42a:	22fc      	movs	r2, #252	; 0xfc
 800a42c:	4918      	ldr	r1, [pc, #96]	; (800a490 <tcpip_inpkt+0x80>)
 800a42e:	4819      	ldr	r0, [pc, #100]	; (800a494 <tcpip_inpkt+0x84>)
 800a430:	f00c f9e2 	bl	80167f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a434:	2009      	movs	r0, #9
 800a436:	f000 fdb3 	bl	800afa0 <memp_malloc>
 800a43a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d102      	bne.n	800a448 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a442:	f04f 33ff 	mov.w	r3, #4294967295
 800a446:	e01a      	b.n	800a47e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	2200      	movs	r2, #0
 800a44c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a460:	6979      	ldr	r1, [r7, #20]
 800a462:	4809      	ldr	r0, [pc, #36]	; (800a488 <tcpip_inpkt+0x78>)
 800a464:	f00b fff0 	bl	8016448 <sys_mbox_trypost>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d006      	beq.n	800a47c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a46e:	6979      	ldr	r1, [r7, #20]
 800a470:	2009      	movs	r0, #9
 800a472:	f000 fe0b 	bl	800b08c <memp_free>
    return ERR_MEM;
 800a476:	f04f 33ff 	mov.w	r3, #4294967295
 800a47a:	e000      	b.n	800a47e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a47c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3718      	adds	r7, #24
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
 800a486:	bf00      	nop
 800a488:	2000a6b8 	.word	0x2000a6b8
 800a48c:	080177a4 	.word	0x080177a4
 800a490:	0801781c 	.word	0x0801781c
 800a494:	080177f4 	.word	0x080177f4

0800a498 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a4a8:	f003 0318 	and.w	r3, r3, #24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d006      	beq.n	800a4be <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a4b0:	4a08      	ldr	r2, [pc, #32]	; (800a4d4 <tcpip_input+0x3c>)
 800a4b2:	6839      	ldr	r1, [r7, #0]
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f7ff ffab 	bl	800a410 <tcpip_inpkt>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	e005      	b.n	800a4ca <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a4be:	4a06      	ldr	r2, [pc, #24]	; (800a4d8 <tcpip_input+0x40>)
 800a4c0:	6839      	ldr	r1, [r7, #0]
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7ff ffa4 	bl	800a410 <tcpip_inpkt>
 800a4c8:	4603      	mov	r3, r0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	08016269 	.word	0x08016269
 800a4d8:	08015135 	.word	0x08015135

0800a4dc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a4e6:	4819      	ldr	r0, [pc, #100]	; (800a54c <tcpip_try_callback+0x70>)
 800a4e8:	f00b fff9 	bl	80164de <sys_mbox_valid>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <tcpip_try_callback+0x24>
 800a4f2:	4b17      	ldr	r3, [pc, #92]	; (800a550 <tcpip_try_callback+0x74>)
 800a4f4:	f240 125d 	movw	r2, #349	; 0x15d
 800a4f8:	4916      	ldr	r1, [pc, #88]	; (800a554 <tcpip_try_callback+0x78>)
 800a4fa:	4817      	ldr	r0, [pc, #92]	; (800a558 <tcpip_try_callback+0x7c>)
 800a4fc:	f00c f97c 	bl	80167f8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a500:	2008      	movs	r0, #8
 800a502:	f000 fd4d 	bl	800afa0 <memp_malloc>
 800a506:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	e017      	b.n	800a544 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	683a      	ldr	r2, [r7, #0]
 800a524:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a526:	68f9      	ldr	r1, [r7, #12]
 800a528:	4808      	ldr	r0, [pc, #32]	; (800a54c <tcpip_try_callback+0x70>)
 800a52a:	f00b ff8d 	bl	8016448 <sys_mbox_trypost>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d006      	beq.n	800a542 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a534:	68f9      	ldr	r1, [r7, #12]
 800a536:	2008      	movs	r0, #8
 800a538:	f000 fda8 	bl	800b08c <memp_free>
    return ERR_MEM;
 800a53c:	f04f 33ff 	mov.w	r3, #4294967295
 800a540:	e000      	b.n	800a544 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a542:	2300      	movs	r3, #0
}
 800a544:	4618      	mov	r0, r3
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	2000a6b8 	.word	0x2000a6b8
 800a550:	080177a4 	.word	0x080177a4
 800a554:	0801781c 	.word	0x0801781c
 800a558:	080177f4 	.word	0x080177f4

0800a55c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af02      	add	r7, sp, #8
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a566:	f000 f871 	bl	800a64c <lwip_init>

  tcpip_init_done = initfunc;
 800a56a:	4a17      	ldr	r2, [pc, #92]	; (800a5c8 <tcpip_init+0x6c>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a570:	4a16      	ldr	r2, [pc, #88]	; (800a5cc <tcpip_init+0x70>)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a576:	2106      	movs	r1, #6
 800a578:	4815      	ldr	r0, [pc, #84]	; (800a5d0 <tcpip_init+0x74>)
 800a57a:	f00b ff4b 	bl	8016414 <sys_mbox_new>
 800a57e:	4603      	mov	r3, r0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d006      	beq.n	800a592 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a584:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <tcpip_init+0x78>)
 800a586:	f240 2261 	movw	r2, #609	; 0x261
 800a58a:	4913      	ldr	r1, [pc, #76]	; (800a5d8 <tcpip_init+0x7c>)
 800a58c:	4813      	ldr	r0, [pc, #76]	; (800a5dc <tcpip_init+0x80>)
 800a58e:	f00c f933 	bl	80167f8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a592:	4813      	ldr	r0, [pc, #76]	; (800a5e0 <tcpip_init+0x84>)
 800a594:	f00b ffc0 	bl	8016518 <sys_mutex_new>
 800a598:	4603      	mov	r3, r0
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d006      	beq.n	800a5ac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a59e:	4b0d      	ldr	r3, [pc, #52]	; (800a5d4 <tcpip_init+0x78>)
 800a5a0:	f240 2265 	movw	r2, #613	; 0x265
 800a5a4:	490f      	ldr	r1, [pc, #60]	; (800a5e4 <tcpip_init+0x88>)
 800a5a6:	480d      	ldr	r0, [pc, #52]	; (800a5dc <tcpip_init+0x80>)
 800a5a8:	f00c f926 	bl	80167f8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a5ac:	2318      	movs	r3, #24
 800a5ae:	9300      	str	r3, [sp, #0]
 800a5b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	490c      	ldr	r1, [pc, #48]	; (800a5e8 <tcpip_init+0x8c>)
 800a5b8:	480c      	ldr	r0, [pc, #48]	; (800a5ec <tcpip_init+0x90>)
 800a5ba:	f00b ffdf 	bl	801657c <sys_thread_new>
}
 800a5be:	bf00      	nop
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
 800a5c6:	bf00      	nop
 800a5c8:	2000a6b0 	.word	0x2000a6b0
 800a5cc:	2000a6b4 	.word	0x2000a6b4
 800a5d0:	2000a6b8 	.word	0x2000a6b8
 800a5d4:	080177a4 	.word	0x080177a4
 800a5d8:	0801782c 	.word	0x0801782c
 800a5dc:	080177f4 	.word	0x080177f4
 800a5e0:	2000a6bc 	.word	0x2000a6bc
 800a5e4:	08017850 	.word	0x08017850
 800a5e8:	0800a319 	.word	0x0800a319
 800a5ec:	08017874 	.word	0x08017874

0800a5f0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a5fa:	88fb      	ldrh	r3, [r7, #6]
 800a5fc:	021b      	lsls	r3, r3, #8
 800a5fe:	b21a      	sxth	r2, r3
 800a600:	88fb      	ldrh	r3, [r7, #6]
 800a602:	0a1b      	lsrs	r3, r3, #8
 800a604:	b29b      	uxth	r3, r3
 800a606:	b21b      	sxth	r3, r3
 800a608:	4313      	orrs	r3, r2
 800a60a:	b21b      	sxth	r3, r3
 800a60c:	b29b      	uxth	r3, r3
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr

0800a61a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a61a:	b480      	push	{r7}
 800a61c:	b083      	sub	sp, #12
 800a61e:	af00      	add	r7, sp, #0
 800a620:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	061a      	lsls	r2, r3, #24
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	021b      	lsls	r3, r3, #8
 800a62a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	0a1b      	lsrs	r3, r3, #8
 800a634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a638:	431a      	orrs	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	0e1b      	lsrs	r3, r3, #24
 800a63e:	4313      	orrs	r3, r2
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a656:	f00b ff53 	bl	8016500 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a65a:	f000 f8d5 	bl	800a808 <mem_init>
  memp_init();
 800a65e:	f000 fc31 	bl	800aec4 <memp_init>
  pbuf_init();
  netif_init();
 800a662:	f000 fd3d 	bl	800b0e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a666:	f007 f8d9 	bl	801181c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a66a:	f001 fe01 	bl	800c270 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a66e:	f007 f81b 	bl	80116a8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b083      	sub	sp, #12
 800a680:	af00      	add	r7, sp, #0
 800a682:	4603      	mov	r3, r0
 800a684:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a686:	4b05      	ldr	r3, [pc, #20]	; (800a69c <ptr_to_mem+0x20>)
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	88fb      	ldrh	r3, [r7, #6]
 800a68c:	4413      	add	r3, r2
}
 800a68e:	4618      	mov	r0, r3
 800a690:	370c      	adds	r7, #12
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
 800a69a:	bf00      	nop
 800a69c:	2000ad2c 	.word	0x2000ad2c

0800a6a0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a6a8:	4b05      	ldr	r3, [pc, #20]	; (800a6c0 <mem_to_ptr+0x20>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	1ad3      	subs	r3, r2, r3
 800a6b0:	b29b      	uxth	r3, r3
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	370c      	adds	r7, #12
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6bc:	4770      	bx	lr
 800a6be:	bf00      	nop
 800a6c0:	2000ad2c 	.word	0x2000ad2c

0800a6c4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a6c4:	b590      	push	{r4, r7, lr}
 800a6c6:	b085      	sub	sp, #20
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a6cc:	4b45      	ldr	r3, [pc, #276]	; (800a7e4 <plug_holes+0x120>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d206      	bcs.n	800a6e4 <plug_holes+0x20>
 800a6d6:	4b44      	ldr	r3, [pc, #272]	; (800a7e8 <plug_holes+0x124>)
 800a6d8:	f240 12df 	movw	r2, #479	; 0x1df
 800a6dc:	4943      	ldr	r1, [pc, #268]	; (800a7ec <plug_holes+0x128>)
 800a6de:	4844      	ldr	r0, [pc, #272]	; (800a7f0 <plug_holes+0x12c>)
 800a6e0:	f00c f88a 	bl	80167f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a6e4:	4b43      	ldr	r3, [pc, #268]	; (800a7f4 <plug_holes+0x130>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d306      	bcc.n	800a6fc <plug_holes+0x38>
 800a6ee:	4b3e      	ldr	r3, [pc, #248]	; (800a7e8 <plug_holes+0x124>)
 800a6f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a6f4:	4940      	ldr	r1, [pc, #256]	; (800a7f8 <plug_holes+0x134>)
 800a6f6:	483e      	ldr	r0, [pc, #248]	; (800a7f0 <plug_holes+0x12c>)
 800a6f8:	f00c f87e 	bl	80167f8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	791b      	ldrb	r3, [r3, #4]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <plug_holes+0x4e>
 800a704:	4b38      	ldr	r3, [pc, #224]	; (800a7e8 <plug_holes+0x124>)
 800a706:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a70a:	493c      	ldr	r1, [pc, #240]	; (800a7fc <plug_holes+0x138>)
 800a70c:	4838      	ldr	r0, [pc, #224]	; (800a7f0 <plug_holes+0x12c>)
 800a70e:	f00c f873 	bl	80167f8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	881b      	ldrh	r3, [r3, #0]
 800a716:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a71a:	d906      	bls.n	800a72a <plug_holes+0x66>
 800a71c:	4b32      	ldr	r3, [pc, #200]	; (800a7e8 <plug_holes+0x124>)
 800a71e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a722:	4937      	ldr	r1, [pc, #220]	; (800a800 <plug_holes+0x13c>)
 800a724:	4832      	ldr	r0, [pc, #200]	; (800a7f0 <plug_holes+0x12c>)
 800a726:	f00c f867 	bl	80167f8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	881b      	ldrh	r3, [r3, #0]
 800a72e:	4618      	mov	r0, r3
 800a730:	f7ff ffa4 	bl	800a67c <ptr_to_mem>
 800a734:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d024      	beq.n	800a788 <plug_holes+0xc4>
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	791b      	ldrb	r3, [r3, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d120      	bne.n	800a788 <plug_holes+0xc4>
 800a746:	4b2b      	ldr	r3, [pc, #172]	; (800a7f4 <plug_holes+0x130>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d01b      	beq.n	800a788 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a750:	4b2c      	ldr	r3, [pc, #176]	; (800a804 <plug_holes+0x140>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68fa      	ldr	r2, [r7, #12]
 800a756:	429a      	cmp	r2, r3
 800a758:	d102      	bne.n	800a760 <plug_holes+0x9c>
      lfree = mem;
 800a75a:	4a2a      	ldr	r2, [pc, #168]	; (800a804 <plug_holes+0x140>)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	881a      	ldrh	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	881b      	ldrh	r3, [r3, #0]
 800a76c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a770:	d00a      	beq.n	800a788 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	881b      	ldrh	r3, [r3, #0]
 800a776:	4618      	mov	r0, r3
 800a778:	f7ff ff80 	bl	800a67c <ptr_to_mem>
 800a77c:	4604      	mov	r4, r0
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f7ff ff8e 	bl	800a6a0 <mem_to_ptr>
 800a784:	4603      	mov	r3, r0
 800a786:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	885b      	ldrh	r3, [r3, #2]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff ff75 	bl	800a67c <ptr_to_mem>
 800a792:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a794:	68ba      	ldr	r2, [r7, #8]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	429a      	cmp	r2, r3
 800a79a:	d01f      	beq.n	800a7dc <plug_holes+0x118>
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	791b      	ldrb	r3, [r3, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d11b      	bne.n	800a7dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a7a4:	4b17      	ldr	r3, [pc, #92]	; (800a804 <plug_holes+0x140>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	687a      	ldr	r2, [r7, #4]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d102      	bne.n	800a7b4 <plug_holes+0xf0>
      lfree = pmem;
 800a7ae:	4a15      	ldr	r2, [pc, #84]	; (800a804 <plug_holes+0x140>)
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	881a      	ldrh	r2, [r3, #0]
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a7c4:	d00a      	beq.n	800a7dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	881b      	ldrh	r3, [r3, #0]
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff ff56 	bl	800a67c <ptr_to_mem>
 800a7d0:	4604      	mov	r4, r0
 800a7d2:	68b8      	ldr	r0, [r7, #8]
 800a7d4:	f7ff ff64 	bl	800a6a0 <mem_to_ptr>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a7dc:	bf00      	nop
 800a7de:	3714      	adds	r7, #20
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd90      	pop	{r4, r7, pc}
 800a7e4:	2000ad2c 	.word	0x2000ad2c
 800a7e8:	08017884 	.word	0x08017884
 800a7ec:	080178b4 	.word	0x080178b4
 800a7f0:	080178cc 	.word	0x080178cc
 800a7f4:	2000ad30 	.word	0x2000ad30
 800a7f8:	080178f4 	.word	0x080178f4
 800a7fc:	08017910 	.word	0x08017910
 800a800:	0801792c 	.word	0x0801792c
 800a804:	2000ad38 	.word	0x2000ad38

0800a808 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a80e:	4b1f      	ldr	r3, [pc, #124]	; (800a88c <mem_init+0x84>)
 800a810:	3303      	adds	r3, #3
 800a812:	f023 0303 	bic.w	r3, r3, #3
 800a816:	461a      	mov	r2, r3
 800a818:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <mem_init+0x88>)
 800a81a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a81c:	4b1c      	ldr	r3, [pc, #112]	; (800a890 <mem_init+0x88>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a828:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a836:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a83a:	f7ff ff1f 	bl	800a67c <ptr_to_mem>
 800a83e:	4603      	mov	r3, r0
 800a840:	4a14      	ldr	r2, [pc, #80]	; (800a894 <mem_init+0x8c>)
 800a842:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a844:	4b13      	ldr	r3, [pc, #76]	; (800a894 <mem_init+0x8c>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2201      	movs	r2, #1
 800a84a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a84c:	4b11      	ldr	r3, [pc, #68]	; (800a894 <mem_init+0x8c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a854:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a856:	4b0f      	ldr	r3, [pc, #60]	; (800a894 <mem_init+0x8c>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a85e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a860:	4b0b      	ldr	r3, [pc, #44]	; (800a890 <mem_init+0x88>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a0c      	ldr	r2, [pc, #48]	; (800a898 <mem_init+0x90>)
 800a866:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a868:	480c      	ldr	r0, [pc, #48]	; (800a89c <mem_init+0x94>)
 800a86a:	f00b fe55 	bl	8016518 <sys_mutex_new>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d006      	beq.n	800a882 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <mem_init+0x98>)
 800a876:	f240 221f 	movw	r2, #543	; 0x21f
 800a87a:	490a      	ldr	r1, [pc, #40]	; (800a8a4 <mem_init+0x9c>)
 800a87c:	480a      	ldr	r0, [pc, #40]	; (800a8a8 <mem_init+0xa0>)
 800a87e:	f00b ffbb 	bl	80167f8 <iprintf>
  }
}
 800a882:	bf00      	nop
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000a6d8 	.word	0x2000a6d8
 800a890:	2000ad2c 	.word	0x2000ad2c
 800a894:	2000ad30 	.word	0x2000ad30
 800a898:	2000ad38 	.word	0x2000ad38
 800a89c:	2000ad34 	.word	0x2000ad34
 800a8a0:	08017884 	.word	0x08017884
 800a8a4:	08017958 	.word	0x08017958
 800a8a8:	080178cc 	.word	0x080178cc

0800a8ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff fef3 	bl	800a6a0 <mem_to_ptr>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff feda 	bl	800a67c <ptr_to_mem>
 800a8c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	885b      	ldrh	r3, [r3, #2]
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f7ff fed4 	bl	800a67c <ptr_to_mem>
 800a8d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8de:	d818      	bhi.n	800a912 <mem_link_valid+0x66>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	885b      	ldrh	r3, [r3, #2]
 800a8e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a8e8:	d813      	bhi.n	800a912 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a8ee:	8afa      	ldrh	r2, [r7, #22]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d004      	beq.n	800a8fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	8afa      	ldrh	r2, [r7, #22]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d109      	bne.n	800a912 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a8fe:	4b08      	ldr	r3, [pc, #32]	; (800a920 <mem_link_valid+0x74>)
 800a900:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a902:	693a      	ldr	r2, [r7, #16]
 800a904:	429a      	cmp	r2, r3
 800a906:	d006      	beq.n	800a916 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	885b      	ldrh	r3, [r3, #2]
 800a90c:	8afa      	ldrh	r2, [r7, #22]
 800a90e:	429a      	cmp	r2, r3
 800a910:	d001      	beq.n	800a916 <mem_link_valid+0x6a>
    return 0;
 800a912:	2300      	movs	r3, #0
 800a914:	e000      	b.n	800a918 <mem_link_valid+0x6c>
  }
  return 1;
 800a916:	2301      	movs	r3, #1
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	2000ad30 	.word	0x2000ad30

0800a924 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b088      	sub	sp, #32
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d070      	beq.n	800aa14 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00d      	beq.n	800a958 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a93c:	4b37      	ldr	r3, [pc, #220]	; (800aa1c <mem_free+0xf8>)
 800a93e:	f240 2273 	movw	r2, #627	; 0x273
 800a942:	4937      	ldr	r1, [pc, #220]	; (800aa20 <mem_free+0xfc>)
 800a944:	4837      	ldr	r0, [pc, #220]	; (800aa24 <mem_free+0x100>)
 800a946:	f00b ff57 	bl	80167f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a94a:	f00b fe37 	bl	80165bc <sys_arch_protect>
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f00b fe41 	bl	80165d8 <sys_arch_unprotect>
    return;
 800a956:	e05e      	b.n	800aa16 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3b08      	subs	r3, #8
 800a95c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a95e:	4b32      	ldr	r3, [pc, #200]	; (800aa28 <mem_free+0x104>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69fa      	ldr	r2, [r7, #28]
 800a964:	429a      	cmp	r2, r3
 800a966:	d306      	bcc.n	800a976 <mem_free+0x52>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f103 020c 	add.w	r2, r3, #12
 800a96e:	4b2f      	ldr	r3, [pc, #188]	; (800aa2c <mem_free+0x108>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	429a      	cmp	r2, r3
 800a974:	d90d      	bls.n	800a992 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a976:	4b29      	ldr	r3, [pc, #164]	; (800aa1c <mem_free+0xf8>)
 800a978:	f240 227f 	movw	r2, #639	; 0x27f
 800a97c:	492c      	ldr	r1, [pc, #176]	; (800aa30 <mem_free+0x10c>)
 800a97e:	4829      	ldr	r0, [pc, #164]	; (800aa24 <mem_free+0x100>)
 800a980:	f00b ff3a 	bl	80167f8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a984:	f00b fe1a 	bl	80165bc <sys_arch_protect>
 800a988:	6138      	str	r0, [r7, #16]
 800a98a:	6938      	ldr	r0, [r7, #16]
 800a98c:	f00b fe24 	bl	80165d8 <sys_arch_unprotect>
    return;
 800a990:	e041      	b.n	800aa16 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a992:	4828      	ldr	r0, [pc, #160]	; (800aa34 <mem_free+0x110>)
 800a994:	f00b fdd6 	bl	8016544 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	791b      	ldrb	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d110      	bne.n	800a9c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a9a0:	4b1e      	ldr	r3, [pc, #120]	; (800aa1c <mem_free+0xf8>)
 800a9a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a9a6:	4924      	ldr	r1, [pc, #144]	; (800aa38 <mem_free+0x114>)
 800a9a8:	481e      	ldr	r0, [pc, #120]	; (800aa24 <mem_free+0x100>)
 800a9aa:	f00b ff25 	bl	80167f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a9ae:	4821      	ldr	r0, [pc, #132]	; (800aa34 <mem_free+0x110>)
 800a9b0:	f00b fdd7 	bl	8016562 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9b4:	f00b fe02 	bl	80165bc <sys_arch_protect>
 800a9b8:	6178      	str	r0, [r7, #20]
 800a9ba:	6978      	ldr	r0, [r7, #20]
 800a9bc:	f00b fe0c 	bl	80165d8 <sys_arch_unprotect>
    return;
 800a9c0:	e029      	b.n	800aa16 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a9c2:	69f8      	ldr	r0, [r7, #28]
 800a9c4:	f7ff ff72 	bl	800a8ac <mem_link_valid>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d110      	bne.n	800a9f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a9ce:	4b13      	ldr	r3, [pc, #76]	; (800aa1c <mem_free+0xf8>)
 800a9d0:	f240 2295 	movw	r2, #661	; 0x295
 800a9d4:	4919      	ldr	r1, [pc, #100]	; (800aa3c <mem_free+0x118>)
 800a9d6:	4813      	ldr	r0, [pc, #76]	; (800aa24 <mem_free+0x100>)
 800a9d8:	f00b ff0e 	bl	80167f8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a9dc:	4815      	ldr	r0, [pc, #84]	; (800aa34 <mem_free+0x110>)
 800a9de:	f00b fdc0 	bl	8016562 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9e2:	f00b fdeb 	bl	80165bc <sys_arch_protect>
 800a9e6:	61b8      	str	r0, [r7, #24]
 800a9e8:	69b8      	ldr	r0, [r7, #24]
 800a9ea:	f00b fdf5 	bl	80165d8 <sys_arch_unprotect>
    return;
 800a9ee:	e012      	b.n	800aa16 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a9f6:	4b12      	ldr	r3, [pc, #72]	; (800aa40 <mem_free+0x11c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	69fa      	ldr	r2, [r7, #28]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d202      	bcs.n	800aa06 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800aa00:	4a0f      	ldr	r2, [pc, #60]	; (800aa40 <mem_free+0x11c>)
 800aa02:	69fb      	ldr	r3, [r7, #28]
 800aa04:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800aa06:	69f8      	ldr	r0, [r7, #28]
 800aa08:	f7ff fe5c 	bl	800a6c4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800aa0c:	4809      	ldr	r0, [pc, #36]	; (800aa34 <mem_free+0x110>)
 800aa0e:	f00b fda8 	bl	8016562 <sys_mutex_unlock>
 800aa12:	e000      	b.n	800aa16 <mem_free+0xf2>
    return;
 800aa14:	bf00      	nop
}
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	08017884 	.word	0x08017884
 800aa20:	08017974 	.word	0x08017974
 800aa24:	080178cc 	.word	0x080178cc
 800aa28:	2000ad2c 	.word	0x2000ad2c
 800aa2c:	2000ad30 	.word	0x2000ad30
 800aa30:	08017998 	.word	0x08017998
 800aa34:	2000ad34 	.word	0x2000ad34
 800aa38:	080179b4 	.word	0x080179b4
 800aa3c:	080179dc 	.word	0x080179dc
 800aa40:	2000ad38 	.word	0x2000ad38

0800aa44 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800aa50:	887b      	ldrh	r3, [r7, #2]
 800aa52:	3303      	adds	r3, #3
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	f023 0303 	bic.w	r3, r3, #3
 800aa5a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800aa5c:	8bfb      	ldrh	r3, [r7, #30]
 800aa5e:	2b0b      	cmp	r3, #11
 800aa60:	d801      	bhi.n	800aa66 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800aa62:	230c      	movs	r3, #12
 800aa64:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800aa66:	8bfb      	ldrh	r3, [r7, #30]
 800aa68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800aa6c:	d803      	bhi.n	800aa76 <mem_trim+0x32>
 800aa6e:	8bfa      	ldrh	r2, [r7, #30]
 800aa70:	887b      	ldrh	r3, [r7, #2]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d201      	bcs.n	800aa7a <mem_trim+0x36>
    return NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e0d8      	b.n	800ac2c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800aa7a:	4b6e      	ldr	r3, [pc, #440]	; (800ac34 <mem_trim+0x1f0>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d304      	bcc.n	800aa8e <mem_trim+0x4a>
 800aa84:	4b6c      	ldr	r3, [pc, #432]	; (800ac38 <mem_trim+0x1f4>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d306      	bcc.n	800aa9c <mem_trim+0x58>
 800aa8e:	4b6b      	ldr	r3, [pc, #428]	; (800ac3c <mem_trim+0x1f8>)
 800aa90:	f240 22d1 	movw	r2, #721	; 0x2d1
 800aa94:	496a      	ldr	r1, [pc, #424]	; (800ac40 <mem_trim+0x1fc>)
 800aa96:	486b      	ldr	r0, [pc, #428]	; (800ac44 <mem_trim+0x200>)
 800aa98:	f00b feae 	bl	80167f8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800aa9c:	4b65      	ldr	r3, [pc, #404]	; (800ac34 <mem_trim+0x1f0>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d304      	bcc.n	800aab0 <mem_trim+0x6c>
 800aaa6:	4b64      	ldr	r3, [pc, #400]	; (800ac38 <mem_trim+0x1f4>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d307      	bcc.n	800aac0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aab0:	f00b fd84 	bl	80165bc <sys_arch_protect>
 800aab4:	60b8      	str	r0, [r7, #8]
 800aab6:	68b8      	ldr	r0, [r7, #8]
 800aab8:	f00b fd8e 	bl	80165d8 <sys_arch_unprotect>
    return rmem;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	e0b5      	b.n	800ac2c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	3b08      	subs	r3, #8
 800aac4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aac6:	69b8      	ldr	r0, [r7, #24]
 800aac8:	f7ff fdea 	bl	800a6a0 <mem_to_ptr>
 800aacc:	4603      	mov	r3, r0
 800aace:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	881a      	ldrh	r2, [r3, #0]
 800aad4:	8afb      	ldrh	r3, [r7, #22]
 800aad6:	1ad3      	subs	r3, r2, r3
 800aad8:	b29b      	uxth	r3, r3
 800aada:	3b08      	subs	r3, #8
 800aadc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aade:	8bfa      	ldrh	r2, [r7, #30]
 800aae0:	8abb      	ldrh	r3, [r7, #20]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d906      	bls.n	800aaf4 <mem_trim+0xb0>
 800aae6:	4b55      	ldr	r3, [pc, #340]	; (800ac3c <mem_trim+0x1f8>)
 800aae8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800aaec:	4956      	ldr	r1, [pc, #344]	; (800ac48 <mem_trim+0x204>)
 800aaee:	4855      	ldr	r0, [pc, #340]	; (800ac44 <mem_trim+0x200>)
 800aaf0:	f00b fe82 	bl	80167f8 <iprintf>
  if (newsize > size) {
 800aaf4:	8bfa      	ldrh	r2, [r7, #30]
 800aaf6:	8abb      	ldrh	r3, [r7, #20]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d901      	bls.n	800ab00 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800aafc:	2300      	movs	r3, #0
 800aafe:	e095      	b.n	800ac2c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ab00:	8bfa      	ldrh	r2, [r7, #30]
 800ab02:	8abb      	ldrh	r3, [r7, #20]
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d101      	bne.n	800ab0c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	e08f      	b.n	800ac2c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ab0c:	484f      	ldr	r0, [pc, #316]	; (800ac4c <mem_trim+0x208>)
 800ab0e:	f00b fd19 	bl	8016544 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	881b      	ldrh	r3, [r3, #0]
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7ff fdb0 	bl	800a67c <ptr_to_mem>
 800ab1c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	791b      	ldrb	r3, [r3, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d13f      	bne.n	800aba6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab2e:	d106      	bne.n	800ab3e <mem_trim+0xfa>
 800ab30:	4b42      	ldr	r3, [pc, #264]	; (800ac3c <mem_trim+0x1f8>)
 800ab32:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ab36:	4946      	ldr	r1, [pc, #280]	; (800ac50 <mem_trim+0x20c>)
 800ab38:	4842      	ldr	r0, [pc, #264]	; (800ac44 <mem_trim+0x200>)
 800ab3a:	f00b fe5d 	bl	80167f8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	881b      	ldrh	r3, [r3, #0]
 800ab42:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ab44:	8afa      	ldrh	r2, [r7, #22]
 800ab46:	8bfb      	ldrh	r3, [r7, #30]
 800ab48:	4413      	add	r3, r2
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ab50:	4b40      	ldr	r3, [pc, #256]	; (800ac54 <mem_trim+0x210>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	693a      	ldr	r2, [r7, #16]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d106      	bne.n	800ab68 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ab5a:	89fb      	ldrh	r3, [r7, #14]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fd8d 	bl	800a67c <ptr_to_mem>
 800ab62:	4603      	mov	r3, r0
 800ab64:	4a3b      	ldr	r2, [pc, #236]	; (800ac54 <mem_trim+0x210>)
 800ab66:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff fd86 	bl	800a67c <ptr_to_mem>
 800ab70:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	2200      	movs	r2, #0
 800ab76:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	89ba      	ldrh	r2, [r7, #12]
 800ab7c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	8afa      	ldrh	r2, [r7, #22]
 800ab82:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ab84:	69bb      	ldr	r3, [r7, #24]
 800ab86:	89fa      	ldrh	r2, [r7, #14]
 800ab88:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab92:	d047      	beq.n	800ac24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	881b      	ldrh	r3, [r3, #0]
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff fd6f 	bl	800a67c <ptr_to_mem>
 800ab9e:	4602      	mov	r2, r0
 800aba0:	89fb      	ldrh	r3, [r7, #14]
 800aba2:	8053      	strh	r3, [r2, #2]
 800aba4:	e03e      	b.n	800ac24 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aba6:	8bfb      	ldrh	r3, [r7, #30]
 800aba8:	f103 0214 	add.w	r2, r3, #20
 800abac:	8abb      	ldrh	r3, [r7, #20]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d838      	bhi.n	800ac24 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800abb2:	8afa      	ldrh	r2, [r7, #22]
 800abb4:	8bfb      	ldrh	r3, [r7, #30]
 800abb6:	4413      	add	r3, r2
 800abb8:	b29b      	uxth	r3, r3
 800abba:	3308      	adds	r3, #8
 800abbc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abc6:	d106      	bne.n	800abd6 <mem_trim+0x192>
 800abc8:	4b1c      	ldr	r3, [pc, #112]	; (800ac3c <mem_trim+0x1f8>)
 800abca:	f240 3216 	movw	r2, #790	; 0x316
 800abce:	4920      	ldr	r1, [pc, #128]	; (800ac50 <mem_trim+0x20c>)
 800abd0:	481c      	ldr	r0, [pc, #112]	; (800ac44 <mem_trim+0x200>)
 800abd2:	f00b fe11 	bl	80167f8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800abd6:	89fb      	ldrh	r3, [r7, #14]
 800abd8:	4618      	mov	r0, r3
 800abda:	f7ff fd4f 	bl	800a67c <ptr_to_mem>
 800abde:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800abe0:	4b1c      	ldr	r3, [pc, #112]	; (800ac54 <mem_trim+0x210>)
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	693a      	ldr	r2, [r7, #16]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d202      	bcs.n	800abf0 <mem_trim+0x1ac>
      lfree = mem2;
 800abea:	4a1a      	ldr	r2, [pc, #104]	; (800ac54 <mem_trim+0x210>)
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2200      	movs	r2, #0
 800abf4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800abf6:	69bb      	ldr	r3, [r7, #24]
 800abf8:	881a      	ldrh	r2, [r3, #0]
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	8afa      	ldrh	r2, [r7, #22]
 800ac02:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	89fa      	ldrh	r2, [r7, #14]
 800ac08:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	881b      	ldrh	r3, [r3, #0]
 800ac0e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac12:	d007      	beq.n	800ac24 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	881b      	ldrh	r3, [r3, #0]
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f7ff fd2f 	bl	800a67c <ptr_to_mem>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ac24:	4809      	ldr	r0, [pc, #36]	; (800ac4c <mem_trim+0x208>)
 800ac26:	f00b fc9c 	bl	8016562 <sys_mutex_unlock>
  return rmem;
 800ac2a:	687b      	ldr	r3, [r7, #4]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3720      	adds	r7, #32
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	2000ad2c 	.word	0x2000ad2c
 800ac38:	2000ad30 	.word	0x2000ad30
 800ac3c:	08017884 	.word	0x08017884
 800ac40:	08017a10 	.word	0x08017a10
 800ac44:	080178cc 	.word	0x080178cc
 800ac48:	08017a28 	.word	0x08017a28
 800ac4c:	2000ad34 	.word	0x2000ad34
 800ac50:	08017a48 	.word	0x08017a48
 800ac54:	2000ad38 	.word	0x2000ad38

0800ac58 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	4603      	mov	r3, r0
 800ac60:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ac62:	88fb      	ldrh	r3, [r7, #6]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <mem_malloc+0x14>
    return NULL;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e0e2      	b.n	800ae32 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ac6c:	88fb      	ldrh	r3, [r7, #6]
 800ac6e:	3303      	adds	r3, #3
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f023 0303 	bic.w	r3, r3, #3
 800ac76:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ac78:	8bbb      	ldrh	r3, [r7, #28]
 800ac7a:	2b0b      	cmp	r3, #11
 800ac7c:	d801      	bhi.n	800ac82 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ac7e:	230c      	movs	r3, #12
 800ac80:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ac82:	8bbb      	ldrh	r3, [r7, #28]
 800ac84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac88:	d803      	bhi.n	800ac92 <mem_malloc+0x3a>
 800ac8a:	8bba      	ldrh	r2, [r7, #28]
 800ac8c:	88fb      	ldrh	r3, [r7, #6]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d201      	bcs.n	800ac96 <mem_malloc+0x3e>
    return NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	e0cd      	b.n	800ae32 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ac96:	4869      	ldr	r0, [pc, #420]	; (800ae3c <mem_malloc+0x1e4>)
 800ac98:	f00b fc54 	bl	8016544 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ac9c:	4b68      	ldr	r3, [pc, #416]	; (800ae40 <mem_malloc+0x1e8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fcfd 	bl	800a6a0 <mem_to_ptr>
 800aca6:	4603      	mov	r3, r0
 800aca8:	83fb      	strh	r3, [r7, #30]
 800acaa:	e0b7      	b.n	800ae1c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800acac:	8bfb      	ldrh	r3, [r7, #30]
 800acae:	4618      	mov	r0, r3
 800acb0:	f7ff fce4 	bl	800a67c <ptr_to_mem>
 800acb4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	791b      	ldrb	r3, [r3, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	f040 80a7 	bne.w	800ae0e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	461a      	mov	r2, r3
 800acc6:	8bfb      	ldrh	r3, [r7, #30]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	f1a3 0208 	sub.w	r2, r3, #8
 800acce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800acd0:	429a      	cmp	r2, r3
 800acd2:	f0c0 809c 	bcc.w	800ae0e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	8bfb      	ldrh	r3, [r7, #30]
 800acde:	1ad3      	subs	r3, r2, r3
 800ace0:	f1a3 0208 	sub.w	r2, r3, #8
 800ace4:	8bbb      	ldrh	r3, [r7, #28]
 800ace6:	3314      	adds	r3, #20
 800ace8:	429a      	cmp	r2, r3
 800acea:	d333      	bcc.n	800ad54 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800acec:	8bfa      	ldrh	r2, [r7, #30]
 800acee:	8bbb      	ldrh	r3, [r7, #28]
 800acf0:	4413      	add	r3, r2
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	3308      	adds	r3, #8
 800acf6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800acf8:	8a7b      	ldrh	r3, [r7, #18]
 800acfa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acfe:	d106      	bne.n	800ad0e <mem_malloc+0xb6>
 800ad00:	4b50      	ldr	r3, [pc, #320]	; (800ae44 <mem_malloc+0x1ec>)
 800ad02:	f240 3287 	movw	r2, #903	; 0x387
 800ad06:	4950      	ldr	r1, [pc, #320]	; (800ae48 <mem_malloc+0x1f0>)
 800ad08:	4850      	ldr	r0, [pc, #320]	; (800ae4c <mem_malloc+0x1f4>)
 800ad0a:	f00b fd75 	bl	80167f8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ad0e:	8a7b      	ldrh	r3, [r7, #18]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff fcb3 	bl	800a67c <ptr_to_mem>
 800ad16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	881a      	ldrh	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	8bfa      	ldrh	r2, [r7, #30]
 800ad2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	8a7a      	ldrh	r2, [r7, #18]
 800ad30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	2201      	movs	r2, #1
 800ad36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	881b      	ldrh	r3, [r3, #0]
 800ad3c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ad40:	d00b      	beq.n	800ad5a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	881b      	ldrh	r3, [r3, #0]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f7ff fc98 	bl	800a67c <ptr_to_mem>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	8a7b      	ldrh	r3, [r7, #18]
 800ad50:	8053      	strh	r3, [r2, #2]
 800ad52:	e002      	b.n	800ad5a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	2201      	movs	r2, #1
 800ad58:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ad5a:	4b39      	ldr	r3, [pc, #228]	; (800ae40 <mem_malloc+0x1e8>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d127      	bne.n	800adb4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ad64:	4b36      	ldr	r3, [pc, #216]	; (800ae40 <mem_malloc+0x1e8>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ad6a:	e005      	b.n	800ad78 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7ff fc83 	bl	800a67c <ptr_to_mem>
 800ad76:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	791b      	ldrb	r3, [r3, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d004      	beq.n	800ad8a <mem_malloc+0x132>
 800ad80:	4b33      	ldr	r3, [pc, #204]	; (800ae50 <mem_malloc+0x1f8>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	69ba      	ldr	r2, [r7, #24]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d1f0      	bne.n	800ad6c <mem_malloc+0x114>
          }
          lfree = cur;
 800ad8a:	4a2d      	ldr	r2, [pc, #180]	; (800ae40 <mem_malloc+0x1e8>)
 800ad8c:	69bb      	ldr	r3, [r7, #24]
 800ad8e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ad90:	4b2b      	ldr	r3, [pc, #172]	; (800ae40 <mem_malloc+0x1e8>)
 800ad92:	681a      	ldr	r2, [r3, #0]
 800ad94:	4b2e      	ldr	r3, [pc, #184]	; (800ae50 <mem_malloc+0x1f8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d00b      	beq.n	800adb4 <mem_malloc+0x15c>
 800ad9c:	4b28      	ldr	r3, [pc, #160]	; (800ae40 <mem_malloc+0x1e8>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	791b      	ldrb	r3, [r3, #4]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <mem_malloc+0x15c>
 800ada6:	4b27      	ldr	r3, [pc, #156]	; (800ae44 <mem_malloc+0x1ec>)
 800ada8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800adac:	4929      	ldr	r1, [pc, #164]	; (800ae54 <mem_malloc+0x1fc>)
 800adae:	4827      	ldr	r0, [pc, #156]	; (800ae4c <mem_malloc+0x1f4>)
 800adb0:	f00b fd22 	bl	80167f8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800adb4:	4821      	ldr	r0, [pc, #132]	; (800ae3c <mem_malloc+0x1e4>)
 800adb6:	f00b fbd4 	bl	8016562 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800adba:	8bba      	ldrh	r2, [r7, #28]
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	4413      	add	r3, r2
 800adc0:	3308      	adds	r3, #8
 800adc2:	4a23      	ldr	r2, [pc, #140]	; (800ae50 <mem_malloc+0x1f8>)
 800adc4:	6812      	ldr	r2, [r2, #0]
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d906      	bls.n	800add8 <mem_malloc+0x180>
 800adca:	4b1e      	ldr	r3, [pc, #120]	; (800ae44 <mem_malloc+0x1ec>)
 800adcc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800add0:	4921      	ldr	r1, [pc, #132]	; (800ae58 <mem_malloc+0x200>)
 800add2:	481e      	ldr	r0, [pc, #120]	; (800ae4c <mem_malloc+0x1f4>)
 800add4:	f00b fd10 	bl	80167f8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d006      	beq.n	800adf0 <mem_malloc+0x198>
 800ade2:	4b18      	ldr	r3, [pc, #96]	; (800ae44 <mem_malloc+0x1ec>)
 800ade4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ade8:	491c      	ldr	r1, [pc, #112]	; (800ae5c <mem_malloc+0x204>)
 800adea:	4818      	ldr	r0, [pc, #96]	; (800ae4c <mem_malloc+0x1f4>)
 800adec:	f00b fd04 	bl	80167f8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	f003 0303 	and.w	r3, r3, #3
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d006      	beq.n	800ae08 <mem_malloc+0x1b0>
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <mem_malloc+0x1ec>)
 800adfc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ae00:	4917      	ldr	r1, [pc, #92]	; (800ae60 <mem_malloc+0x208>)
 800ae02:	4812      	ldr	r0, [pc, #72]	; (800ae4c <mem_malloc+0x1f4>)
 800ae04:	f00b fcf8 	bl	80167f8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	e011      	b.n	800ae32 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ae0e:	8bfb      	ldrh	r3, [r7, #30]
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7ff fc33 	bl	800a67c <ptr_to_mem>
 800ae16:	4603      	mov	r3, r0
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ae1c:	8bfa      	ldrh	r2, [r7, #30]
 800ae1e:	8bbb      	ldrh	r3, [r7, #28]
 800ae20:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ae24:	429a      	cmp	r2, r3
 800ae26:	f4ff af41 	bcc.w	800acac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ae2a:	4804      	ldr	r0, [pc, #16]	; (800ae3c <mem_malloc+0x1e4>)
 800ae2c:	f00b fb99 	bl	8016562 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ae30:	2300      	movs	r3, #0
}
 800ae32:	4618      	mov	r0, r3
 800ae34:	3720      	adds	r7, #32
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	2000ad34 	.word	0x2000ad34
 800ae40:	2000ad38 	.word	0x2000ad38
 800ae44:	08017884 	.word	0x08017884
 800ae48:	08017a48 	.word	0x08017a48
 800ae4c:	080178cc 	.word	0x080178cc
 800ae50:	2000ad30 	.word	0x2000ad30
 800ae54:	08017a5c 	.word	0x08017a5c
 800ae58:	08017a78 	.word	0x08017a78
 800ae5c:	08017aa8 	.word	0x08017aa8
 800ae60:	08017ad8 	.word	0x08017ad8

0800ae64 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b085      	sub	sp, #20
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	2200      	movs	r2, #0
 800ae72:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	3303      	adds	r3, #3
 800ae7a:	f023 0303 	bic.w	r3, r3, #3
 800ae7e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ae80:	2300      	movs	r3, #0
 800ae82:	60fb      	str	r3, [r7, #12]
 800ae84:	e011      	b.n	800aeaa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	68bb      	ldr	r3, [r7, #8]
 800ae8e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	4413      	add	r3, r2
 800aea2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	3301      	adds	r3, #1
 800aea8:	60fb      	str	r3, [r7, #12]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	885b      	ldrh	r3, [r3, #2]
 800aeae:	461a      	mov	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	dbe7      	blt.n	800ae86 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	3714      	adds	r7, #20
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aeca:	2300      	movs	r3, #0
 800aecc:	80fb      	strh	r3, [r7, #6]
 800aece:	e009      	b.n	800aee4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800aed0:	88fb      	ldrh	r3, [r7, #6]
 800aed2:	4a08      	ldr	r2, [pc, #32]	; (800aef4 <memp_init+0x30>)
 800aed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7ff ffc3 	bl	800ae64 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800aede:	88fb      	ldrh	r3, [r7, #6]
 800aee0:	3301      	adds	r3, #1
 800aee2:	80fb      	strh	r3, [r7, #6]
 800aee4:	88fb      	ldrh	r3, [r7, #6]
 800aee6:	2b0c      	cmp	r3, #12
 800aee8:	d9f2      	bls.n	800aed0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800aeea:	bf00      	nop
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	0801a6d8 	.word	0x0801a6d8

0800aef8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800af00:	f00b fb5c 	bl	80165bc <sys_arch_protect>
 800af04:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d015      	beq.n	800af40 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	689b      	ldr	r3, [r3, #8]
 800af18:	68ba      	ldr	r2, [r7, #8]
 800af1a:	6812      	ldr	r2, [r2, #0]
 800af1c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	f003 0303 	and.w	r3, r3, #3
 800af24:	2b00      	cmp	r3, #0
 800af26:	d006      	beq.n	800af36 <do_memp_malloc_pool+0x3e>
 800af28:	4b09      	ldr	r3, [pc, #36]	; (800af50 <do_memp_malloc_pool+0x58>)
 800af2a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800af2e:	4909      	ldr	r1, [pc, #36]	; (800af54 <do_memp_malloc_pool+0x5c>)
 800af30:	4809      	ldr	r0, [pc, #36]	; (800af58 <do_memp_malloc_pool+0x60>)
 800af32:	f00b fc61 	bl	80167f8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af36:	68f8      	ldr	r0, [r7, #12]
 800af38:	f00b fb4e 	bl	80165d8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	e003      	b.n	800af48 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f00b fb49 	bl	80165d8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	08017afc 	.word	0x08017afc
 800af54:	08017b2c 	.word	0x08017b2c
 800af58:	08017b50 	.word	0x08017b50

0800af5c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d106      	bne.n	800af78 <memp_malloc_pool+0x1c>
 800af6a:	4b0a      	ldr	r3, [pc, #40]	; (800af94 <memp_malloc_pool+0x38>)
 800af6c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800af70:	4909      	ldr	r1, [pc, #36]	; (800af98 <memp_malloc_pool+0x3c>)
 800af72:	480a      	ldr	r0, [pc, #40]	; (800af9c <memp_malloc_pool+0x40>)
 800af74:	f00b fc40 	bl	80167f8 <iprintf>
  if (desc == NULL) {
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <memp_malloc_pool+0x26>
    return NULL;
 800af7e:	2300      	movs	r3, #0
 800af80:	e003      	b.n	800af8a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f7ff ffb8 	bl	800aef8 <do_memp_malloc_pool>
 800af88:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3708      	adds	r7, #8
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	08017afc 	.word	0x08017afc
 800af98:	08017b78 	.word	0x08017b78
 800af9c:	08017b50 	.word	0x08017b50

0800afa0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	4603      	mov	r3, r0
 800afa8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	2b0c      	cmp	r3, #12
 800afae:	d908      	bls.n	800afc2 <memp_malloc+0x22>
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <memp_malloc+0x3c>)
 800afb2:	f240 1257 	movw	r2, #343	; 0x157
 800afb6:	490a      	ldr	r1, [pc, #40]	; (800afe0 <memp_malloc+0x40>)
 800afb8:	480a      	ldr	r0, [pc, #40]	; (800afe4 <memp_malloc+0x44>)
 800afba:	f00b fc1d 	bl	80167f8 <iprintf>
 800afbe:	2300      	movs	r3, #0
 800afc0:	e008      	b.n	800afd4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800afc2:	79fb      	ldrb	r3, [r7, #7]
 800afc4:	4a08      	ldr	r2, [pc, #32]	; (800afe8 <memp_malloc+0x48>)
 800afc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff ff94 	bl	800aef8 <do_memp_malloc_pool>
 800afd0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800afd2:	68fb      	ldr	r3, [r7, #12]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	08017afc 	.word	0x08017afc
 800afe0:	08017b8c 	.word	0x08017b8c
 800afe4:	08017b50 	.word	0x08017b50
 800afe8:	0801a6d8 	.word	0x0801a6d8

0800afec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	f003 0303 	and.w	r3, r3, #3
 800affc:	2b00      	cmp	r3, #0
 800affe:	d006      	beq.n	800b00e <do_memp_free_pool+0x22>
 800b000:	4b0d      	ldr	r3, [pc, #52]	; (800b038 <do_memp_free_pool+0x4c>)
 800b002:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b006:	490d      	ldr	r1, [pc, #52]	; (800b03c <do_memp_free_pool+0x50>)
 800b008:	480d      	ldr	r0, [pc, #52]	; (800b040 <do_memp_free_pool+0x54>)
 800b00a:	f00b fbf5 	bl	80167f8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b012:	f00b fad3 	bl	80165bc <sys_arch_protect>
 800b016:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	689b      	ldr	r3, [r3, #8]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	68fa      	ldr	r2, [r7, #12]
 800b028:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b02a:	68b8      	ldr	r0, [r7, #8]
 800b02c:	f00b fad4 	bl	80165d8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b030:	bf00      	nop
 800b032:	3710      	adds	r7, #16
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	08017afc 	.word	0x08017afc
 800b03c:	08017bac 	.word	0x08017bac
 800b040:	08017b50 	.word	0x08017b50

0800b044 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d106      	bne.n	800b062 <memp_free_pool+0x1e>
 800b054:	4b0a      	ldr	r3, [pc, #40]	; (800b080 <memp_free_pool+0x3c>)
 800b056:	f240 1295 	movw	r2, #405	; 0x195
 800b05a:	490a      	ldr	r1, [pc, #40]	; (800b084 <memp_free_pool+0x40>)
 800b05c:	480a      	ldr	r0, [pc, #40]	; (800b088 <memp_free_pool+0x44>)
 800b05e:	f00b fbcb 	bl	80167f8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d007      	beq.n	800b078 <memp_free_pool+0x34>
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d004      	beq.n	800b078 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f7ff ffbb 	bl	800afec <do_memp_free_pool>
 800b076:	e000      	b.n	800b07a <memp_free_pool+0x36>
    return;
 800b078:	bf00      	nop
}
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	08017afc 	.word	0x08017afc
 800b084:	08017b78 	.word	0x08017b78
 800b088:	08017b50 	.word	0x08017b50

0800b08c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	4603      	mov	r3, r0
 800b094:	6039      	str	r1, [r7, #0]
 800b096:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b098:	79fb      	ldrb	r3, [r7, #7]
 800b09a:	2b0c      	cmp	r3, #12
 800b09c:	d907      	bls.n	800b0ae <memp_free+0x22>
 800b09e:	4b0c      	ldr	r3, [pc, #48]	; (800b0d0 <memp_free+0x44>)
 800b0a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b0a4:	490b      	ldr	r1, [pc, #44]	; (800b0d4 <memp_free+0x48>)
 800b0a6:	480c      	ldr	r0, [pc, #48]	; (800b0d8 <memp_free+0x4c>)
 800b0a8:	f00b fba6 	bl	80167f8 <iprintf>
 800b0ac:	e00c      	b.n	800b0c8 <memp_free+0x3c>

  if (mem == NULL) {
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d008      	beq.n	800b0c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b0b4:	79fb      	ldrb	r3, [r7, #7]
 800b0b6:	4a09      	ldr	r2, [pc, #36]	; (800b0dc <memp_free+0x50>)
 800b0b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f7ff ff94 	bl	800afec <do_memp_free_pool>
 800b0c4:	e000      	b.n	800b0c8 <memp_free+0x3c>
    return;
 800b0c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b0c8:	3708      	adds	r7, #8
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}
 800b0ce:	bf00      	nop
 800b0d0:	08017afc 	.word	0x08017afc
 800b0d4:	08017bcc 	.word	0x08017bcc
 800b0d8:	08017b50 	.word	0x08017b50
 800b0dc:	0801a6d8 	.word	0x0801a6d8

0800b0e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b0e4:	bf00      	nop
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
	...

0800b0f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b086      	sub	sp, #24
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	60f8      	str	r0, [r7, #12]
 800b0f8:	60b9      	str	r1, [r7, #8]
 800b0fa:	607a      	str	r2, [r7, #4]
 800b0fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d108      	bne.n	800b116 <netif_add+0x26>
 800b104:	4b5b      	ldr	r3, [pc, #364]	; (800b274 <netif_add+0x184>)
 800b106:	f240 1227 	movw	r2, #295	; 0x127
 800b10a:	495b      	ldr	r1, [pc, #364]	; (800b278 <netif_add+0x188>)
 800b10c:	485b      	ldr	r0, [pc, #364]	; (800b27c <netif_add+0x18c>)
 800b10e:	f00b fb73 	bl	80167f8 <iprintf>
 800b112:	2300      	movs	r3, #0
 800b114:	e0a9      	b.n	800b26a <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d108      	bne.n	800b12e <netif_add+0x3e>
 800b11c:	4b55      	ldr	r3, [pc, #340]	; (800b274 <netif_add+0x184>)
 800b11e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b122:	4957      	ldr	r1, [pc, #348]	; (800b280 <netif_add+0x190>)
 800b124:	4855      	ldr	r0, [pc, #340]	; (800b27c <netif_add+0x18c>)
 800b126:	f00b fb67 	bl	80167f8 <iprintf>
 800b12a:	2300      	movs	r3, #0
 800b12c:	e09d      	b.n	800b26a <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d101      	bne.n	800b138 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b134:	4b53      	ldr	r3, [pc, #332]	; (800b284 <netif_add+0x194>)
 800b136:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d101      	bne.n	800b142 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b13e:	4b51      	ldr	r3, [pc, #324]	; (800b284 <netif_add+0x194>)
 800b140:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b148:	4b4e      	ldr	r3, [pc, #312]	; (800b284 <netif_add+0x194>)
 800b14a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2200      	movs	r2, #0
 800b150:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	2200      	movs	r2, #0
 800b156:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2200      	movs	r2, #0
 800b15c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	4a49      	ldr	r2, [pc, #292]	; (800b288 <netif_add+0x198>)
 800b162:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3324      	adds	r3, #36	; 0x24
 800b176:	2204      	movs	r2, #4
 800b178:	2100      	movs	r1, #0
 800b17a:	4618      	mov	r0, r3
 800b17c:	f00b fba1 	bl	80168c2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a3a      	ldr	r2, [r7, #32]
 800b18a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b18c:	4b3f      	ldr	r3, [pc, #252]	; (800b28c <netif_add+0x19c>)
 800b18e:	781a      	ldrb	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b19a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	68b9      	ldr	r1, [r7, #8]
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 f914 	bl	800b3d0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	4798      	blx	r3
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d001      	beq.n	800b1b8 <netif_add+0xc8>
    return NULL;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	e058      	b.n	800b26a <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1be:	2bff      	cmp	r3, #255	; 0xff
 800b1c0:	d103      	bne.n	800b1ca <netif_add+0xda>
        netif->num = 0;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b1ce:	4b30      	ldr	r3, [pc, #192]	; (800b290 <netif_add+0x1a0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	e02b      	b.n	800b22e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b1d6:	697a      	ldr	r2, [r7, #20]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d106      	bne.n	800b1ec <netif_add+0xfc>
 800b1de:	4b25      	ldr	r3, [pc, #148]	; (800b274 <netif_add+0x184>)
 800b1e0:	f240 128b 	movw	r2, #395	; 0x18b
 800b1e4:	492b      	ldr	r1, [pc, #172]	; (800b294 <netif_add+0x1a4>)
 800b1e6:	4825      	ldr	r0, [pc, #148]	; (800b27c <netif_add+0x18c>)
 800b1e8:	f00b fb06 	bl	80167f8 <iprintf>
        num_netifs++;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2bff      	cmp	r3, #255	; 0xff
 800b1f6:	dd06      	ble.n	800b206 <netif_add+0x116>
 800b1f8:	4b1e      	ldr	r3, [pc, #120]	; (800b274 <netif_add+0x184>)
 800b1fa:	f240 128d 	movw	r2, #397	; 0x18d
 800b1fe:	4926      	ldr	r1, [pc, #152]	; (800b298 <netif_add+0x1a8>)
 800b200:	481e      	ldr	r0, [pc, #120]	; (800b27c <netif_add+0x18c>)
 800b202:	f00b faf9 	bl	80167f8 <iprintf>
        if (netif2->num == netif->num) {
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b212:	429a      	cmp	r2, r3
 800b214:	d108      	bne.n	800b228 <netif_add+0x138>
          netif->num++;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b21c:	3301      	adds	r3, #1
 800b21e:	b2da      	uxtb	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b226:	e005      	b.n	800b234 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	617b      	str	r3, [r7, #20]
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1d0      	bne.n	800b1d6 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1be      	bne.n	800b1b8 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b240:	2bfe      	cmp	r3, #254	; 0xfe
 800b242:	d103      	bne.n	800b24c <netif_add+0x15c>
    netif_num = 0;
 800b244:	4b11      	ldr	r3, [pc, #68]	; (800b28c <netif_add+0x19c>)
 800b246:	2200      	movs	r2, #0
 800b248:	701a      	strb	r2, [r3, #0]
 800b24a:	e006      	b.n	800b25a <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b252:	3301      	adds	r3, #1
 800b254:	b2da      	uxtb	r2, r3
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <netif_add+0x19c>)
 800b258:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b25a:	4b0d      	ldr	r3, [pc, #52]	; (800b290 <netif_add+0x1a0>)
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b262:	4a0b      	ldr	r2, [pc, #44]	; (800b290 <netif_add+0x1a0>)
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b268:	68fb      	ldr	r3, [r7, #12]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	08017be8 	.word	0x08017be8
 800b278:	08017c7c 	.word	0x08017c7c
 800b27c:	08017c38 	.word	0x08017c38
 800b280:	08017c98 	.word	0x08017c98
 800b284:	0801a75c 	.word	0x0801a75c
 800b288:	0800b5e3 	.word	0x0800b5e3
 800b28c:	2000de30 	.word	0x2000de30
 800b290:	2000de28 	.word	0x2000de28
 800b294:	08017cbc 	.word	0x08017cbc
 800b298:	08017cd0 	.word	0x08017cd0

0800b29c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b2a6:	6839      	ldr	r1, [r7, #0]
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f002 fb29 	bl	800d900 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f006 ff3f 	bl	8012134 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b2b6:	bf00      	nop
 800b2b8:	3708      	adds	r7, #8
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
	...

0800b2c0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	60b9      	str	r1, [r7, #8]
 800b2ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d106      	bne.n	800b2e0 <netif_do_set_ipaddr+0x20>
 800b2d2:	4b1d      	ldr	r3, [pc, #116]	; (800b348 <netif_do_set_ipaddr+0x88>)
 800b2d4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b2d8:	491c      	ldr	r1, [pc, #112]	; (800b34c <netif_do_set_ipaddr+0x8c>)
 800b2da:	481d      	ldr	r0, [pc, #116]	; (800b350 <netif_do_set_ipaddr+0x90>)
 800b2dc:	f00b fa8c 	bl	80167f8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d106      	bne.n	800b2f4 <netif_do_set_ipaddr+0x34>
 800b2e6:	4b18      	ldr	r3, [pc, #96]	; (800b348 <netif_do_set_ipaddr+0x88>)
 800b2e8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b2ec:	4917      	ldr	r1, [pc, #92]	; (800b34c <netif_do_set_ipaddr+0x8c>)
 800b2ee:	4818      	ldr	r0, [pc, #96]	; (800b350 <netif_do_set_ipaddr+0x90>)
 800b2f0:	f00b fa82 	bl	80167f8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d01c      	beq.n	800b33c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	3304      	adds	r3, #4
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b312:	f107 0314 	add.w	r3, r7, #20
 800b316:	4619      	mov	r1, r3
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f7ff ffbf 	bl	800b29c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b31e:	68bb      	ldr	r3, [r7, #8]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d002      	beq.n	800b32a <netif_do_set_ipaddr+0x6a>
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	e000      	b.n	800b32c <netif_do_set_ipaddr+0x6c>
 800b32a:	2300      	movs	r3, #0
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b330:	2101      	movs	r1, #1
 800b332:	68f8      	ldr	r0, [r7, #12]
 800b334:	f000 f8d2 	bl	800b4dc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b338:	2301      	movs	r3, #1
 800b33a:	e000      	b.n	800b33e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	08017be8 	.word	0x08017be8
 800b34c:	08017d00 	.word	0x08017d00
 800b350:	08017c38 	.word	0x08017c38

0800b354 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	681a      	ldr	r2, [r3, #0]
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	3308      	adds	r3, #8
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d00a      	beq.n	800b384 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d002      	beq.n	800b37a <netif_do_set_netmask+0x26>
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	e000      	b.n	800b37c <netif_do_set_netmask+0x28>
 800b37a:	2300      	movs	r3, #0
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b380:	2301      	movs	r3, #1
 800b382:	e000      	b.n	800b386 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b392:	b480      	push	{r7}
 800b394:	b085      	sub	sp, #20
 800b396:	af00      	add	r7, sp, #0
 800b398:	60f8      	str	r0, [r7, #12]
 800b39a:	60b9      	str	r1, [r7, #8]
 800b39c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	330c      	adds	r3, #12
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d00a      	beq.n	800b3c2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d002      	beq.n	800b3b8 <netif_do_set_gw+0x26>
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	e000      	b.n	800b3ba <netif_do_set_gw+0x28>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	68fa      	ldr	r2, [r7, #12]
 800b3bc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b3be:	2301      	movs	r3, #1
 800b3c0:	e000      	b.n	800b3c4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b088      	sub	sp, #32
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
 800b3dc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d101      	bne.n	800b3f0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b3ec:	4b1c      	ldr	r3, [pc, #112]	; (800b460 <netif_set_addr+0x90>)
 800b3ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d101      	bne.n	800b3fa <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b3f6:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <netif_set_addr+0x90>)
 800b3f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b400:	4b17      	ldr	r3, [pc, #92]	; (800b460 <netif_set_addr+0x90>)
 800b402:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d003      	beq.n	800b412 <netif_set_addr+0x42>
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d101      	bne.n	800b416 <netif_set_addr+0x46>
 800b412:	2301      	movs	r3, #1
 800b414:	e000      	b.n	800b418 <netif_set_addr+0x48>
 800b416:	2300      	movs	r3, #0
 800b418:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d006      	beq.n	800b42e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b420:	f107 0310 	add.w	r3, r7, #16
 800b424:	461a      	mov	r2, r3
 800b426:	68b9      	ldr	r1, [r7, #8]
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7ff ff49 	bl	800b2c0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b42e:	69fa      	ldr	r2, [r7, #28]
 800b430:	6879      	ldr	r1, [r7, #4]
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f7ff ff8e 	bl	800b354 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f7ff ffa8 	bl	800b392 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d106      	bne.n	800b456 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b448:	f107 0310 	add.w	r3, r7, #16
 800b44c:	461a      	mov	r2, r3
 800b44e:	68b9      	ldr	r1, [r7, #8]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff ff35 	bl	800b2c0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b456:	bf00      	nop
 800b458:	3720      	adds	r7, #32
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	0801a75c 	.word	0x0801a75c

0800b464 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b46c:	4a04      	ldr	r2, [pc, #16]	; (800b480 <netif_set_default+0x1c>)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b472:	bf00      	nop
 800b474:	370c      	adds	r7, #12
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	2000de2c 	.word	0x2000de2c

0800b484 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d107      	bne.n	800b4a2 <netif_set_up+0x1e>
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <netif_set_up+0x4c>)
 800b494:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b498:	490e      	ldr	r1, [pc, #56]	; (800b4d4 <netif_set_up+0x50>)
 800b49a:	480f      	ldr	r0, [pc, #60]	; (800b4d8 <netif_set_up+0x54>)
 800b49c:	f00b f9ac 	bl	80167f8 <iprintf>
 800b4a0:	e013      	b.n	800b4ca <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d10c      	bne.n	800b4ca <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b4b6:	f043 0301 	orr.w	r3, r3, #1
 800b4ba:	b2da      	uxtb	r2, r3
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b4c2:	2103      	movs	r1, #3
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f809 	bl	800b4dc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b4ca:	3708      	adds	r7, #8
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	bd80      	pop	{r7, pc}
 800b4d0:	08017be8 	.word	0x08017be8
 800b4d4:	08017d70 	.word	0x08017d70
 800b4d8:	08017c38 	.word	0x08017c38

0800b4dc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	460b      	mov	r3, r1
 800b4e6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d106      	bne.n	800b4fc <netif_issue_reports+0x20>
 800b4ee:	4b18      	ldr	r3, [pc, #96]	; (800b550 <netif_issue_reports+0x74>)
 800b4f0:	f240 326d 	movw	r2, #877	; 0x36d
 800b4f4:	4917      	ldr	r1, [pc, #92]	; (800b554 <netif_issue_reports+0x78>)
 800b4f6:	4818      	ldr	r0, [pc, #96]	; (800b558 <netif_issue_reports+0x7c>)
 800b4f8:	f00b f97e 	bl	80167f8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b502:	f003 0304 	and.w	r3, r3, #4
 800b506:	2b00      	cmp	r3, #0
 800b508:	d01e      	beq.n	800b548 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b510:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b514:	2b00      	cmp	r3, #0
 800b516:	d017      	beq.n	800b548 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	f003 0301 	and.w	r3, r3, #1
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d013      	beq.n	800b54a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	3304      	adds	r3, #4
 800b526:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d00e      	beq.n	800b54a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b532:	f003 0308 	and.w	r3, r3, #8
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	3304      	adds	r3, #4
 800b53e:	4619      	mov	r1, r3
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f009 fbbd 	bl	8014cc0 <etharp_request>
 800b546:	e000      	b.n	800b54a <netif_issue_reports+0x6e>
    return;
 800b548:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b54a:	3708      	adds	r7, #8
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	08017be8 	.word	0x08017be8
 800b554:	08017d8c 	.word	0x08017d8c
 800b558:	08017c38 	.word	0x08017c38

0800b55c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b082      	sub	sp, #8
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d107      	bne.n	800b57a <netif_set_down+0x1e>
 800b56a:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <netif_set_down+0x58>)
 800b56c:	f240 329b 	movw	r2, #923	; 0x39b
 800b570:	4911      	ldr	r1, [pc, #68]	; (800b5b8 <netif_set_down+0x5c>)
 800b572:	4812      	ldr	r0, [pc, #72]	; (800b5bc <netif_set_down+0x60>)
 800b574:	f00b f940 	bl	80167f8 <iprintf>
 800b578:	e019      	b.n	800b5ae <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b580:	f003 0301 	and.w	r3, r3, #1
 800b584:	2b00      	cmp	r3, #0
 800b586:	d012      	beq.n	800b5ae <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b58e:	f023 0301 	bic.w	r3, r3, #1
 800b592:	b2da      	uxtb	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b5a0:	f003 0308 	and.w	r3, r3, #8
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d002      	beq.n	800b5ae <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f008 ff43 	bl	8014434 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b5ae:	3708      	adds	r7, #8
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	08017be8 	.word	0x08017be8
 800b5b8:	08017db0 	.word	0x08017db0
 800b5bc:	08017c38 	.word	0x08017c38

0800b5c0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	61da      	str	r2, [r3, #28]
  }
}
 800b5d6:	bf00      	nop
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b5e2:	b480      	push	{r7}
 800b5e4:	b085      	sub	sp, #20
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b5ee:	f06f 030b 	mvn.w	r3, #11
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3714      	adds	r7, #20
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr
	...

0800b600 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	4603      	mov	r3, r0
 800b608:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b60a:	79fb      	ldrb	r3, [r7, #7]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d013      	beq.n	800b638 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b610:	4b0d      	ldr	r3, [pc, #52]	; (800b648 <netif_get_by_index+0x48>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	60fb      	str	r3, [r7, #12]
 800b616:	e00c      	b.n	800b632 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b61e:	3301      	adds	r3, #1
 800b620:	b2db      	uxtb	r3, r3
 800b622:	79fa      	ldrb	r2, [r7, #7]
 800b624:	429a      	cmp	r2, r3
 800b626:	d101      	bne.n	800b62c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	e006      	b.n	800b63a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d1ef      	bne.n	800b618 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	2000de28 	.word	0x2000de28

0800b64c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b082      	sub	sp, #8
 800b650:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b652:	f00a ffb3 	bl	80165bc <sys_arch_protect>
 800b656:	6038      	str	r0, [r7, #0]
 800b658:	4b0d      	ldr	r3, [pc, #52]	; (800b690 <pbuf_free_ooseq+0x44>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	701a      	strb	r2, [r3, #0]
 800b65e:	6838      	ldr	r0, [r7, #0]
 800b660:	f00a ffba 	bl	80165d8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b664:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <pbuf_free_ooseq+0x48>)
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	e00a      	b.n	800b682 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b670:	2b00      	cmp	r3, #0
 800b672:	d003      	beq.n	800b67c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f002 f981 	bl	800d97c <tcp_free_ooseq>
      return;
 800b67a:	e005      	b.n	800b688 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	607b      	str	r3, [r7, #4]
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1f1      	bne.n	800b66c <pbuf_free_ooseq+0x20>
    }
  }
}
 800b688:	3708      	adds	r7, #8
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	2000de31 	.word	0x2000de31
 800b694:	2000de40 	.word	0x2000de40

0800b698 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b6a0:	f7ff ffd4 	bl	800b64c <pbuf_free_ooseq>
}
 800b6a4:	bf00      	nop
 800b6a6:	3708      	adds	r7, #8
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd80      	pop	{r7, pc}

0800b6ac <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b6b2:	f00a ff83 	bl	80165bc <sys_arch_protect>
 800b6b6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b6b8:	4b0f      	ldr	r3, [pc, #60]	; (800b6f8 <pbuf_pool_is_empty+0x4c>)
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b6be:	4b0e      	ldr	r3, [pc, #56]	; (800b6f8 <pbuf_pool_is_empty+0x4c>)
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f00a ff87 	bl	80165d8 <sys_arch_unprotect>

  if (!queued) {
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10f      	bne.n	800b6f0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	480a      	ldr	r0, [pc, #40]	; (800b6fc <pbuf_pool_is_empty+0x50>)
 800b6d4:	f7fe ff02 	bl	800a4dc <tcpip_try_callback>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d008      	beq.n	800b6f0 <pbuf_pool_is_empty+0x44>
 800b6de:	f00a ff6d 	bl	80165bc <sys_arch_protect>
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	4b04      	ldr	r3, [pc, #16]	; (800b6f8 <pbuf_pool_is_empty+0x4c>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	701a      	strb	r2, [r3, #0]
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f00a ff74 	bl	80165d8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b6f0:	bf00      	nop
 800b6f2:	3708      	adds	r7, #8
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	2000de31 	.word	0x2000de31
 800b6fc:	0800b699 	.word	0x0800b699

0800b700 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	60b9      	str	r1, [r7, #8]
 800b70a:	4611      	mov	r1, r2
 800b70c:	461a      	mov	r2, r3
 800b70e:	460b      	mov	r3, r1
 800b710:	80fb      	strh	r3, [r7, #6]
 800b712:	4613      	mov	r3, r2
 800b714:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	88fa      	ldrh	r2, [r7, #6]
 800b726:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	88ba      	ldrh	r2, [r7, #4]
 800b72c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b72e:	8b3b      	ldrh	r3, [r7, #24]
 800b730:	b2da      	uxtb	r2, r3
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	7f3a      	ldrb	r2, [r7, #28]
 800b73a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2201      	movs	r2, #1
 800b740:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	2200      	movs	r2, #0
 800b746:	73da      	strb	r2, [r3, #15]
}
 800b748:	bf00      	nop
 800b74a:	3714      	adds	r7, #20
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b08c      	sub	sp, #48	; 0x30
 800b758:	af02      	add	r7, sp, #8
 800b75a:	4603      	mov	r3, r0
 800b75c:	71fb      	strb	r3, [r7, #7]
 800b75e:	460b      	mov	r3, r1
 800b760:	80bb      	strh	r3, [r7, #4]
 800b762:	4613      	mov	r3, r2
 800b764:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b766:	79fb      	ldrb	r3, [r7, #7]
 800b768:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b76a:	887b      	ldrh	r3, [r7, #2]
 800b76c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b770:	d07f      	beq.n	800b872 <pbuf_alloc+0x11e>
 800b772:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b776:	f300 80c8 	bgt.w	800b90a <pbuf_alloc+0x1b6>
 800b77a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b77e:	d010      	beq.n	800b7a2 <pbuf_alloc+0x4e>
 800b780:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b784:	f300 80c1 	bgt.w	800b90a <pbuf_alloc+0x1b6>
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d002      	beq.n	800b792 <pbuf_alloc+0x3e>
 800b78c:	2b41      	cmp	r3, #65	; 0x41
 800b78e:	f040 80bc 	bne.w	800b90a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b792:	887a      	ldrh	r2, [r7, #2]
 800b794:	88bb      	ldrh	r3, [r7, #4]
 800b796:	4619      	mov	r1, r3
 800b798:	2000      	movs	r0, #0
 800b79a:	f000 f8d1 	bl	800b940 <pbuf_alloc_reference>
 800b79e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b7a0:	e0bd      	b.n	800b91e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b7aa:	88bb      	ldrh	r3, [r7, #4]
 800b7ac:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b7ae:	200c      	movs	r0, #12
 800b7b0:	f7ff fbf6 	bl	800afa0 <memp_malloc>
 800b7b4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d109      	bne.n	800b7d0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b7bc:	f7ff ff76 	bl	800b6ac <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <pbuf_alloc+0x78>
            pbuf_free(p);
 800b7c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7c8:	f000 faa8 	bl	800bd1c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	e0a7      	b.n	800b920 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b7d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7d2:	3303      	adds	r3, #3
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	f023 0303 	bic.w	r3, r3, #3
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	8b7a      	ldrh	r2, [r7, #26]
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	bf28      	it	cs
 800b7e8:	4613      	movcs	r3, r2
 800b7ea:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b7ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7ee:	3310      	adds	r3, #16
 800b7f0:	693a      	ldr	r2, [r7, #16]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	3303      	adds	r3, #3
 800b7f6:	f023 0303 	bic.w	r3, r3, #3
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	89f9      	ldrh	r1, [r7, #14]
 800b7fe:	8b7a      	ldrh	r2, [r7, #26]
 800b800:	2300      	movs	r3, #0
 800b802:	9301      	str	r3, [sp, #4]
 800b804:	887b      	ldrh	r3, [r7, #2]
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	460b      	mov	r3, r1
 800b80a:	4601      	mov	r1, r0
 800b80c:	6938      	ldr	r0, [r7, #16]
 800b80e:	f7ff ff77 	bl	800b700 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	685b      	ldr	r3, [r3, #4]
 800b816:	f003 0303 	and.w	r3, r3, #3
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <pbuf_alloc+0xd8>
 800b81e:	4b42      	ldr	r3, [pc, #264]	; (800b928 <pbuf_alloc+0x1d4>)
 800b820:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b824:	4941      	ldr	r1, [pc, #260]	; (800b92c <pbuf_alloc+0x1d8>)
 800b826:	4842      	ldr	r0, [pc, #264]	; (800b930 <pbuf_alloc+0x1dc>)
 800b828:	f00a ffe6 	bl	80167f8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b82c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b82e:	3303      	adds	r3, #3
 800b830:	f023 0303 	bic.w	r3, r3, #3
 800b834:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b838:	d106      	bne.n	800b848 <pbuf_alloc+0xf4>
 800b83a:	4b3b      	ldr	r3, [pc, #236]	; (800b928 <pbuf_alloc+0x1d4>)
 800b83c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b840:	493c      	ldr	r1, [pc, #240]	; (800b934 <pbuf_alloc+0x1e0>)
 800b842:	483b      	ldr	r0, [pc, #236]	; (800b930 <pbuf_alloc+0x1dc>)
 800b844:	f00a ffd8 	bl	80167f8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d102      	bne.n	800b854 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	627b      	str	r3, [r7, #36]	; 0x24
 800b852:	e002      	b.n	800b85a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b85e:	8b7a      	ldrh	r2, [r7, #26]
 800b860:	89fb      	ldrh	r3, [r7, #14]
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b86a:	8b7b      	ldrh	r3, [r7, #26]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d19e      	bne.n	800b7ae <pbuf_alloc+0x5a>
      break;
 800b870:	e055      	b.n	800b91e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b874:	3303      	adds	r3, #3
 800b876:	b29b      	uxth	r3, r3
 800b878:	f023 0303 	bic.w	r3, r3, #3
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	88bb      	ldrh	r3, [r7, #4]
 800b880:	3303      	adds	r3, #3
 800b882:	b29b      	uxth	r3, r3
 800b884:	f023 0303 	bic.w	r3, r3, #3
 800b888:	b29b      	uxth	r3, r3
 800b88a:	4413      	add	r3, r2
 800b88c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b88e:	8b3b      	ldrh	r3, [r7, #24]
 800b890:	3310      	adds	r3, #16
 800b892:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b894:	8b3a      	ldrh	r2, [r7, #24]
 800b896:	88bb      	ldrh	r3, [r7, #4]
 800b898:	3303      	adds	r3, #3
 800b89a:	f023 0303 	bic.w	r3, r3, #3
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d306      	bcc.n	800b8b0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b8a2:	8afa      	ldrh	r2, [r7, #22]
 800b8a4:	88bb      	ldrh	r3, [r7, #4]
 800b8a6:	3303      	adds	r3, #3
 800b8a8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d201      	bcs.n	800b8b4 <pbuf_alloc+0x160>
        return NULL;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e035      	b.n	800b920 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b8b4:	8afb      	ldrh	r3, [r7, #22]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7ff f9ce 	bl	800ac58 <mem_malloc>
 800b8bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d101      	bne.n	800b8c8 <pbuf_alloc+0x174>
        return NULL;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	e02b      	b.n	800b920 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b8c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8ca:	3310      	adds	r3, #16
 800b8cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8ce:	4413      	add	r3, r2
 800b8d0:	3303      	adds	r3, #3
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	88b9      	ldrh	r1, [r7, #4]
 800b8da:	88ba      	ldrh	r2, [r7, #4]
 800b8dc:	2300      	movs	r3, #0
 800b8de:	9301      	str	r3, [sp, #4]
 800b8e0:	887b      	ldrh	r3, [r7, #2]
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4601      	mov	r1, r0
 800b8e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8ea:	f7ff ff09 	bl	800b700 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	f003 0303 	and.w	r3, r3, #3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d010      	beq.n	800b91c <pbuf_alloc+0x1c8>
 800b8fa:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <pbuf_alloc+0x1d4>)
 800b8fc:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b900:	490d      	ldr	r1, [pc, #52]	; (800b938 <pbuf_alloc+0x1e4>)
 800b902:	480b      	ldr	r0, [pc, #44]	; (800b930 <pbuf_alloc+0x1dc>)
 800b904:	f00a ff78 	bl	80167f8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b908:	e008      	b.n	800b91c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b90a:	4b07      	ldr	r3, [pc, #28]	; (800b928 <pbuf_alloc+0x1d4>)
 800b90c:	f240 1227 	movw	r2, #295	; 0x127
 800b910:	490a      	ldr	r1, [pc, #40]	; (800b93c <pbuf_alloc+0x1e8>)
 800b912:	4807      	ldr	r0, [pc, #28]	; (800b930 <pbuf_alloc+0x1dc>)
 800b914:	f00a ff70 	bl	80167f8 <iprintf>
      return NULL;
 800b918:	2300      	movs	r3, #0
 800b91a:	e001      	b.n	800b920 <pbuf_alloc+0x1cc>
      break;
 800b91c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b920:	4618      	mov	r0, r3
 800b922:	3728      	adds	r7, #40	; 0x28
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	08017e18 	.word	0x08017e18
 800b92c:	08017e48 	.word	0x08017e48
 800b930:	08017e78 	.word	0x08017e78
 800b934:	08017ea0 	.word	0x08017ea0
 800b938:	08017ed4 	.word	0x08017ed4
 800b93c:	08017f00 	.word	0x08017f00

0800b940 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af02      	add	r7, sp, #8
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	460b      	mov	r3, r1
 800b94a:	807b      	strh	r3, [r7, #2]
 800b94c:	4613      	mov	r3, r2
 800b94e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b950:	883b      	ldrh	r3, [r7, #0]
 800b952:	2b41      	cmp	r3, #65	; 0x41
 800b954:	d009      	beq.n	800b96a <pbuf_alloc_reference+0x2a>
 800b956:	883b      	ldrh	r3, [r7, #0]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d006      	beq.n	800b96a <pbuf_alloc_reference+0x2a>
 800b95c:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <pbuf_alloc_reference+0x5c>)
 800b95e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b962:	490f      	ldr	r1, [pc, #60]	; (800b9a0 <pbuf_alloc_reference+0x60>)
 800b964:	480f      	ldr	r0, [pc, #60]	; (800b9a4 <pbuf_alloc_reference+0x64>)
 800b966:	f00a ff47 	bl	80167f8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b96a:	200b      	movs	r0, #11
 800b96c:	f7ff fb18 	bl	800afa0 <memp_malloc>
 800b970:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d101      	bne.n	800b97c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b978:	2300      	movs	r3, #0
 800b97a:	e00b      	b.n	800b994 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b97c:	8879      	ldrh	r1, [r7, #2]
 800b97e:	887a      	ldrh	r2, [r7, #2]
 800b980:	2300      	movs	r3, #0
 800b982:	9301      	str	r3, [sp, #4]
 800b984:	883b      	ldrh	r3, [r7, #0]
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	460b      	mov	r3, r1
 800b98a:	6879      	ldr	r1, [r7, #4]
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff feb7 	bl	800b700 <pbuf_init_alloced_pbuf>
  return p;
 800b992:	68fb      	ldr	r3, [r7, #12]
}
 800b994:	4618      	mov	r0, r3
 800b996:	3710      	adds	r7, #16
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}
 800b99c:	08017e18 	.word	0x08017e18
 800b9a0:	08017f1c 	.word	0x08017f1c
 800b9a4:	08017e78 	.word	0x08017e78

0800b9a8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b088      	sub	sp, #32
 800b9ac:	af02      	add	r7, sp, #8
 800b9ae:	607b      	str	r3, [r7, #4]
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	73fb      	strb	r3, [r7, #15]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	81bb      	strh	r3, [r7, #12]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b9bc:	7bfb      	ldrb	r3, [r7, #15]
 800b9be:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b9c0:	8a7b      	ldrh	r3, [r7, #18]
 800b9c2:	3303      	adds	r3, #3
 800b9c4:	f023 0203 	bic.w	r2, r3, #3
 800b9c8:	89bb      	ldrh	r3, [r7, #12]
 800b9ca:	441a      	add	r2, r3
 800b9cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d901      	bls.n	800b9d6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e018      	b.n	800ba08 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b9dc:	8a7b      	ldrh	r3, [r7, #18]
 800b9de:	3303      	adds	r3, #3
 800b9e0:	f023 0303 	bic.w	r3, r3, #3
 800b9e4:	6a3a      	ldr	r2, [r7, #32]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	e001      	b.n	800b9f0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	89b9      	ldrh	r1, [r7, #12]
 800b9f4:	89ba      	ldrh	r2, [r7, #12]
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	9301      	str	r3, [sp, #4]
 800b9fa:	897b      	ldrh	r3, [r7, #10]
 800b9fc:	9300      	str	r3, [sp, #0]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	6979      	ldr	r1, [r7, #20]
 800ba02:	f7ff fe7d 	bl	800b700 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ba06:	687b      	ldr	r3, [r7, #4]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3718      	adds	r7, #24
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d106      	bne.n	800ba30 <pbuf_realloc+0x20>
 800ba22:	4b3a      	ldr	r3, [pc, #232]	; (800bb0c <pbuf_realloc+0xfc>)
 800ba24:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ba28:	4939      	ldr	r1, [pc, #228]	; (800bb10 <pbuf_realloc+0x100>)
 800ba2a:	483a      	ldr	r0, [pc, #232]	; (800bb14 <pbuf_realloc+0x104>)
 800ba2c:	f00a fee4 	bl	80167f8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	891b      	ldrh	r3, [r3, #8]
 800ba34:	887a      	ldrh	r2, [r7, #2]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d263      	bcs.n	800bb02 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	891a      	ldrh	r2, [r3, #8]
 800ba3e:	887b      	ldrh	r3, [r7, #2]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ba44:	887b      	ldrh	r3, [r7, #2]
 800ba46:	817b      	strh	r3, [r7, #10]
  q = p;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ba4c:	e018      	b.n	800ba80 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	895b      	ldrh	r3, [r3, #10]
 800ba52:	897a      	ldrh	r2, [r7, #10]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	891a      	ldrh	r2, [r3, #8]
 800ba5c:	893b      	ldrh	r3, [r7, #8]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d106      	bne.n	800ba80 <pbuf_realloc+0x70>
 800ba72:	4b26      	ldr	r3, [pc, #152]	; (800bb0c <pbuf_realloc+0xfc>)
 800ba74:	f240 12af 	movw	r2, #431	; 0x1af
 800ba78:	4927      	ldr	r1, [pc, #156]	; (800bb18 <pbuf_realloc+0x108>)
 800ba7a:	4826      	ldr	r0, [pc, #152]	; (800bb14 <pbuf_realloc+0x104>)
 800ba7c:	f00a febc 	bl	80167f8 <iprintf>
  while (rem_len > q->len) {
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	895b      	ldrh	r3, [r3, #10]
 800ba84:	897a      	ldrh	r2, [r7, #10]
 800ba86:	429a      	cmp	r2, r3
 800ba88:	d8e1      	bhi.n	800ba4e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	7b1b      	ldrb	r3, [r3, #12]
 800ba8e:	f003 030f 	and.w	r3, r3, #15
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d121      	bne.n	800bada <pbuf_realloc+0xca>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	895b      	ldrh	r3, [r3, #10]
 800ba9a:	897a      	ldrh	r2, [r7, #10]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d01c      	beq.n	800bada <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	7b5b      	ldrb	r3, [r3, #13]
 800baa4:	f003 0302 	and.w	r3, r3, #2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d116      	bne.n	800bada <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	b29a      	uxth	r2, r3
 800bab6:	897b      	ldrh	r3, [r7, #10]
 800bab8:	4413      	add	r3, r2
 800baba:	b29b      	uxth	r3, r3
 800babc:	4619      	mov	r1, r3
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	f7fe ffc0 	bl	800aa44 <mem_trim>
 800bac4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d106      	bne.n	800bada <pbuf_realloc+0xca>
 800bacc:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <pbuf_realloc+0xfc>)
 800bace:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bad2:	4912      	ldr	r1, [pc, #72]	; (800bb1c <pbuf_realloc+0x10c>)
 800bad4:	480f      	ldr	r0, [pc, #60]	; (800bb14 <pbuf_realloc+0x104>)
 800bad6:	f00a fe8f 	bl	80167f8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	897a      	ldrh	r2, [r7, #10]
 800bade:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	895a      	ldrh	r2, [r3, #10]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d004      	beq.n	800bafa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f000 f911 	bl	800bd1c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	601a      	str	r2, [r3, #0]
 800bb00:	e000      	b.n	800bb04 <pbuf_realloc+0xf4>
    return;
 800bb02:	bf00      	nop

}
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	08017e18 	.word	0x08017e18
 800bb10:	08017f30 	.word	0x08017f30
 800bb14:	08017e78 	.word	0x08017e78
 800bb18:	08017f48 	.word	0x08017f48
 800bb1c:	08017f60 	.word	0x08017f60

0800bb20 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d106      	bne.n	800bb42 <pbuf_add_header_impl+0x22>
 800bb34:	4b2b      	ldr	r3, [pc, #172]	; (800bbe4 <pbuf_add_header_impl+0xc4>)
 800bb36:	f240 12df 	movw	r2, #479	; 0x1df
 800bb3a:	492b      	ldr	r1, [pc, #172]	; (800bbe8 <pbuf_add_header_impl+0xc8>)
 800bb3c:	482b      	ldr	r0, [pc, #172]	; (800bbec <pbuf_add_header_impl+0xcc>)
 800bb3e:	f00a fe5b 	bl	80167f8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d003      	beq.n	800bb50 <pbuf_add_header_impl+0x30>
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb4e:	d301      	bcc.n	800bb54 <pbuf_add_header_impl+0x34>
    return 1;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e043      	b.n	800bbdc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d101      	bne.n	800bb5e <pbuf_add_header_impl+0x3e>
    return 0;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	e03e      	b.n	800bbdc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	891a      	ldrh	r2, [r3, #8]
 800bb66:	8a7b      	ldrh	r3, [r7, #18]
 800bb68:	4413      	add	r3, r2
 800bb6a:	b29b      	uxth	r3, r3
 800bb6c:	8a7a      	ldrh	r2, [r7, #18]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d901      	bls.n	800bb76 <pbuf_add_header_impl+0x56>
    return 1;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e032      	b.n	800bbdc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	7b1b      	ldrb	r3, [r3, #12]
 800bb7a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bb7c:	8a3b      	ldrh	r3, [r7, #16]
 800bb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00c      	beq.n	800bba0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	425b      	negs	r3, r3
 800bb8e:	4413      	add	r3, r2
 800bb90:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	3310      	adds	r3, #16
 800bb96:	697a      	ldr	r2, [r7, #20]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d20d      	bcs.n	800bbb8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e01d      	b.n	800bbdc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d006      	beq.n	800bbb4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	685a      	ldr	r2, [r3, #4]
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	425b      	negs	r3, r3
 800bbae:	4413      	add	r3, r2
 800bbb0:	617b      	str	r3, [r7, #20]
 800bbb2:	e001      	b.n	800bbb8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bbb4:	2301      	movs	r3, #1
 800bbb6:	e011      	b.n	800bbdc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	697a      	ldr	r2, [r7, #20]
 800bbbc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	895a      	ldrh	r2, [r3, #10]
 800bbc2:	8a7b      	ldrh	r3, [r7, #18]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	891a      	ldrh	r2, [r3, #8]
 800bbd0:	8a7b      	ldrh	r3, [r7, #18]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	811a      	strh	r2, [r3, #8]


  return 0;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3718      	adds	r7, #24
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	08017e18 	.word	0x08017e18
 800bbe8:	08017f7c 	.word	0x08017f7c
 800bbec:	08017e78 	.word	0x08017e78

0800bbf0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff ff8e 	bl	800bb20 <pbuf_add_header_impl>
 800bc04:	4603      	mov	r3, r0
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <pbuf_remove_header+0x1e>
 800bc20:	4b20      	ldr	r3, [pc, #128]	; (800bca4 <pbuf_remove_header+0x94>)
 800bc22:	f240 224b 	movw	r2, #587	; 0x24b
 800bc26:	4920      	ldr	r1, [pc, #128]	; (800bca8 <pbuf_remove_header+0x98>)
 800bc28:	4820      	ldr	r0, [pc, #128]	; (800bcac <pbuf_remove_header+0x9c>)
 800bc2a:	f00a fde5 	bl	80167f8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d003      	beq.n	800bc3c <pbuf_remove_header+0x2c>
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc3a:	d301      	bcc.n	800bc40 <pbuf_remove_header+0x30>
    return 1;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e02c      	b.n	800bc9a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d101      	bne.n	800bc4a <pbuf_remove_header+0x3a>
    return 0;
 800bc46:	2300      	movs	r3, #0
 800bc48:	e027      	b.n	800bc9a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	895b      	ldrh	r3, [r3, #10]
 800bc52:	89fa      	ldrh	r2, [r7, #14]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d908      	bls.n	800bc6a <pbuf_remove_header+0x5a>
 800bc58:	4b12      	ldr	r3, [pc, #72]	; (800bca4 <pbuf_remove_header+0x94>)
 800bc5a:	f240 2255 	movw	r2, #597	; 0x255
 800bc5e:	4914      	ldr	r1, [pc, #80]	; (800bcb0 <pbuf_remove_header+0xa0>)
 800bc60:	4812      	ldr	r0, [pc, #72]	; (800bcac <pbuf_remove_header+0x9c>)
 800bc62:	f00a fdc9 	bl	80167f8 <iprintf>
 800bc66:	2301      	movs	r3, #1
 800bc68:	e017      	b.n	800bc9a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	441a      	add	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	895a      	ldrh	r2, [r3, #10]
 800bc80:	89fb      	ldrh	r3, [r7, #14]
 800bc82:	1ad3      	subs	r3, r2, r3
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	891a      	ldrh	r2, [r3, #8]
 800bc8e:	89fb      	ldrh	r3, [r7, #14]
 800bc90:	1ad3      	subs	r3, r2, r3
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bc98:	2300      	movs	r3, #0
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	08017e18 	.word	0x08017e18
 800bca8:	08017f7c 	.word	0x08017f7c
 800bcac:	08017e78 	.word	0x08017e78
 800bcb0:	08017f88 	.word	0x08017f88

0800bcb4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	807b      	strh	r3, [r7, #2]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bcc4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	da08      	bge.n	800bcde <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcd0:	425b      	negs	r3, r3
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff ff9b 	bl	800bc10 <pbuf_remove_header>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	e007      	b.n	800bcee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bcde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bce2:	787a      	ldrb	r2, [r7, #1]
 800bce4:	4619      	mov	r1, r3
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f7ff ff1a 	bl	800bb20 <pbuf_add_header_impl>
 800bcec:	4603      	mov	r3, r0
  }
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3708      	adds	r7, #8
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b082      	sub	sp, #8
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bd02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bd06:	2201      	movs	r2, #1
 800bd08:	4619      	mov	r1, r3
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff ffd2 	bl	800bcb4 <pbuf_header_impl>
 800bd10:	4603      	mov	r3, r0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b088      	sub	sp, #32
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d10b      	bne.n	800bd42 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d106      	bne.n	800bd3e <pbuf_free+0x22>
 800bd30:	4b3b      	ldr	r3, [pc, #236]	; (800be20 <pbuf_free+0x104>)
 800bd32:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bd36:	493b      	ldr	r1, [pc, #236]	; (800be24 <pbuf_free+0x108>)
 800bd38:	483b      	ldr	r0, [pc, #236]	; (800be28 <pbuf_free+0x10c>)
 800bd3a:	f00a fd5d 	bl	80167f8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	e069      	b.n	800be16 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bd42:	2300      	movs	r3, #0
 800bd44:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bd46:	e062      	b.n	800be0e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bd48:	f00a fc38 	bl	80165bc <sys_arch_protect>
 800bd4c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	7b9b      	ldrb	r3, [r3, #14]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d106      	bne.n	800bd64 <pbuf_free+0x48>
 800bd56:	4b32      	ldr	r3, [pc, #200]	; (800be20 <pbuf_free+0x104>)
 800bd58:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bd5c:	4933      	ldr	r1, [pc, #204]	; (800be2c <pbuf_free+0x110>)
 800bd5e:	4832      	ldr	r0, [pc, #200]	; (800be28 <pbuf_free+0x10c>)
 800bd60:	f00a fd4a 	bl	80167f8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	7b9b      	ldrb	r3, [r3, #14]
 800bd68:	3b01      	subs	r3, #1
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	739a      	strb	r2, [r3, #14]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	7b9b      	ldrb	r3, [r3, #14]
 800bd74:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bd76:	69b8      	ldr	r0, [r7, #24]
 800bd78:	f00a fc2e 	bl	80165d8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d143      	bne.n	800be0a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	7b1b      	ldrb	r3, [r3, #12]
 800bd8c:	f003 030f 	and.w	r3, r3, #15
 800bd90:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	7b5b      	ldrb	r3, [r3, #13]
 800bd96:	f003 0302 	and.w	r3, r3, #2
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d011      	beq.n	800bdc2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	691b      	ldr	r3, [r3, #16]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d106      	bne.n	800bdb8 <pbuf_free+0x9c>
 800bdaa:	4b1d      	ldr	r3, [pc, #116]	; (800be20 <pbuf_free+0x104>)
 800bdac:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bdb0:	491f      	ldr	r1, [pc, #124]	; (800be30 <pbuf_free+0x114>)
 800bdb2:	481d      	ldr	r0, [pc, #116]	; (800be28 <pbuf_free+0x10c>)
 800bdb4:	f00a fd20 	bl	80167f8 <iprintf>
        pc->custom_free_function(p);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	4798      	blx	r3
 800bdc0:	e01d      	b.n	800bdfe <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bdc2:	7bfb      	ldrb	r3, [r7, #15]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d104      	bne.n	800bdd2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bdc8:	6879      	ldr	r1, [r7, #4]
 800bdca:	200c      	movs	r0, #12
 800bdcc:	f7ff f95e 	bl	800b08c <memp_free>
 800bdd0:	e015      	b.n	800bdfe <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bdd2:	7bfb      	ldrb	r3, [r7, #15]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d104      	bne.n	800bde2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bdd8:	6879      	ldr	r1, [r7, #4]
 800bdda:	200b      	movs	r0, #11
 800bddc:	f7ff f956 	bl	800b08c <memp_free>
 800bde0:	e00d      	b.n	800bdfe <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bde2:	7bfb      	ldrb	r3, [r7, #15]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <pbuf_free+0xd4>
          mem_free(p);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7fe fd9b 	bl	800a924 <mem_free>
 800bdee:	e006      	b.n	800bdfe <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bdf0:	4b0b      	ldr	r3, [pc, #44]	; (800be20 <pbuf_free+0x104>)
 800bdf2:	f240 320f 	movw	r2, #783	; 0x30f
 800bdf6:	490f      	ldr	r1, [pc, #60]	; (800be34 <pbuf_free+0x118>)
 800bdf8:	480b      	ldr	r0, [pc, #44]	; (800be28 <pbuf_free+0x10c>)
 800bdfa:	f00a fcfd 	bl	80167f8 <iprintf>
        }
      }
      count++;
 800bdfe:	7ffb      	ldrb	r3, [r7, #31]
 800be00:	3301      	adds	r3, #1
 800be02:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	607b      	str	r3, [r7, #4]
 800be08:	e001      	b.n	800be0e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800be0a:	2300      	movs	r3, #0
 800be0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d199      	bne.n	800bd48 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800be14:	7ffb      	ldrb	r3, [r7, #31]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3720      	adds	r7, #32
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	08017e18 	.word	0x08017e18
 800be24:	08017f7c 	.word	0x08017f7c
 800be28:	08017e78 	.word	0x08017e78
 800be2c:	08017fa8 	.word	0x08017fa8
 800be30:	08017fc0 	.word	0x08017fc0
 800be34:	08017fe4 	.word	0x08017fe4

0800be38 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800be44:	e005      	b.n	800be52 <pbuf_clen+0x1a>
    ++len;
 800be46:	89fb      	ldrh	r3, [r7, #14]
 800be48:	3301      	adds	r3, #1
 800be4a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1f6      	bne.n	800be46 <pbuf_clen+0xe>
  }
  return len;
 800be58:	89fb      	ldrh	r3, [r7, #14]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3714      	adds	r7, #20
 800be5e:	46bd      	mov	sp, r7
 800be60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be64:	4770      	bx	lr
	...

0800be68 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d016      	beq.n	800bea4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800be76:	f00a fba1 	bl	80165bc <sys_arch_protect>
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	7b9b      	ldrb	r3, [r3, #14]
 800be80:	3301      	adds	r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	739a      	strb	r2, [r3, #14]
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f00a fba5 	bl	80165d8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	7b9b      	ldrb	r3, [r3, #14]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d106      	bne.n	800bea4 <pbuf_ref+0x3c>
 800be96:	4b05      	ldr	r3, [pc, #20]	; (800beac <pbuf_ref+0x44>)
 800be98:	f240 3242 	movw	r2, #834	; 0x342
 800be9c:	4904      	ldr	r1, [pc, #16]	; (800beb0 <pbuf_ref+0x48>)
 800be9e:	4805      	ldr	r0, [pc, #20]	; (800beb4 <pbuf_ref+0x4c>)
 800bea0:	f00a fcaa 	bl	80167f8 <iprintf>
  }
}
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}
 800beac:	08017e18 	.word	0x08017e18
 800beb0:	08017ff8 	.word	0x08017ff8
 800beb4:	08017e78 	.word	0x08017e78

0800beb8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d002      	beq.n	800bece <pbuf_cat+0x16>
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d107      	bne.n	800bede <pbuf_cat+0x26>
 800bece:	4b20      	ldr	r3, [pc, #128]	; (800bf50 <pbuf_cat+0x98>)
 800bed0:	f240 3259 	movw	r2, #857	; 0x359
 800bed4:	491f      	ldr	r1, [pc, #124]	; (800bf54 <pbuf_cat+0x9c>)
 800bed6:	4820      	ldr	r0, [pc, #128]	; (800bf58 <pbuf_cat+0xa0>)
 800bed8:	f00a fc8e 	bl	80167f8 <iprintf>
 800bedc:	e034      	b.n	800bf48 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	60fb      	str	r3, [r7, #12]
 800bee2:	e00a      	b.n	800befa <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	891a      	ldrh	r2, [r3, #8]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	891b      	ldrh	r3, [r3, #8]
 800beec:	4413      	add	r3, r2
 800beee:	b29a      	uxth	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1f0      	bne.n	800bee4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	891a      	ldrh	r2, [r3, #8]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	895b      	ldrh	r3, [r3, #10]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d006      	beq.n	800bf1c <pbuf_cat+0x64>
 800bf0e:	4b10      	ldr	r3, [pc, #64]	; (800bf50 <pbuf_cat+0x98>)
 800bf10:	f240 3262 	movw	r2, #866	; 0x362
 800bf14:	4911      	ldr	r1, [pc, #68]	; (800bf5c <pbuf_cat+0xa4>)
 800bf16:	4810      	ldr	r0, [pc, #64]	; (800bf58 <pbuf_cat+0xa0>)
 800bf18:	f00a fc6e 	bl	80167f8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d006      	beq.n	800bf32 <pbuf_cat+0x7a>
 800bf24:	4b0a      	ldr	r3, [pc, #40]	; (800bf50 <pbuf_cat+0x98>)
 800bf26:	f240 3263 	movw	r2, #867	; 0x363
 800bf2a:	490d      	ldr	r1, [pc, #52]	; (800bf60 <pbuf_cat+0xa8>)
 800bf2c:	480a      	ldr	r0, [pc, #40]	; (800bf58 <pbuf_cat+0xa0>)
 800bf2e:	f00a fc63 	bl	80167f8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	891a      	ldrh	r2, [r3, #8]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	891b      	ldrh	r3, [r3, #8]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	b29a      	uxth	r2, r3
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bf48:	3710      	adds	r7, #16
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	bd80      	pop	{r7, pc}
 800bf4e:	bf00      	nop
 800bf50:	08017e18 	.word	0x08017e18
 800bf54:	0801800c 	.word	0x0801800c
 800bf58:	08017e78 	.word	0x08017e78
 800bf5c:	08018044 	.word	0x08018044
 800bf60:	08018074 	.word	0x08018074

0800bf64 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ffa1 	bl	800beb8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bf76:	6838      	ldr	r0, [r7, #0]
 800bf78:	f7ff ff76 	bl	800be68 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bf7c:	bf00      	nop
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b086      	sub	sp, #24
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	617b      	str	r3, [r7, #20]
 800bf92:	2300      	movs	r3, #0
 800bf94:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d008      	beq.n	800bfae <pbuf_copy+0x2a>
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d005      	beq.n	800bfae <pbuf_copy+0x2a>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	891a      	ldrh	r2, [r3, #8]
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	891b      	ldrh	r3, [r3, #8]
 800bfaa:	429a      	cmp	r2, r3
 800bfac:	d209      	bcs.n	800bfc2 <pbuf_copy+0x3e>
 800bfae:	4b57      	ldr	r3, [pc, #348]	; (800c10c <pbuf_copy+0x188>)
 800bfb0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bfb4:	4956      	ldr	r1, [pc, #344]	; (800c110 <pbuf_copy+0x18c>)
 800bfb6:	4857      	ldr	r0, [pc, #348]	; (800c114 <pbuf_copy+0x190>)
 800bfb8:	f00a fc1e 	bl	80167f8 <iprintf>
 800bfbc:	f06f 030f 	mvn.w	r3, #15
 800bfc0:	e09f      	b.n	800c102 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	895b      	ldrh	r3, [r3, #10]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	1ad2      	subs	r2, r2, r3
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	895b      	ldrh	r3, [r3, #10]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	1acb      	subs	r3, r1, r3
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d306      	bcc.n	800bfe8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	895b      	ldrh	r3, [r3, #10]
 800bfde:	461a      	mov	r2, r3
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	60fb      	str	r3, [r7, #12]
 800bfe6:	e005      	b.n	800bff4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	895b      	ldrh	r3, [r3, #10]
 800bfec:	461a      	mov	r2, r3
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	685a      	ldr	r2, [r3, #4]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	18d0      	adds	r0, r2, r3
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	4413      	add	r3, r2
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	4619      	mov	r1, r3
 800c008:	f00a fd15 	bl	8016a36 <memcpy>
    offset_to += len;
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	4413      	add	r3, r2
 800c012:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c014:	693a      	ldr	r2, [r7, #16]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4413      	add	r3, r2
 800c01a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	895b      	ldrh	r3, [r3, #10]
 800c020:	461a      	mov	r2, r3
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	4293      	cmp	r3, r2
 800c026:	d906      	bls.n	800c036 <pbuf_copy+0xb2>
 800c028:	4b38      	ldr	r3, [pc, #224]	; (800c10c <pbuf_copy+0x188>)
 800c02a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c02e:	493a      	ldr	r1, [pc, #232]	; (800c118 <pbuf_copy+0x194>)
 800c030:	4838      	ldr	r0, [pc, #224]	; (800c114 <pbuf_copy+0x190>)
 800c032:	f00a fbe1 	bl	80167f8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	895b      	ldrh	r3, [r3, #10]
 800c03a:	461a      	mov	r2, r3
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	4293      	cmp	r3, r2
 800c040:	d906      	bls.n	800c050 <pbuf_copy+0xcc>
 800c042:	4b32      	ldr	r3, [pc, #200]	; (800c10c <pbuf_copy+0x188>)
 800c044:	f240 32da 	movw	r2, #986	; 0x3da
 800c048:	4934      	ldr	r1, [pc, #208]	; (800c11c <pbuf_copy+0x198>)
 800c04a:	4832      	ldr	r0, [pc, #200]	; (800c114 <pbuf_copy+0x190>)
 800c04c:	f00a fbd4 	bl	80167f8 <iprintf>
    if (offset_from >= p_from->len) {
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	895b      	ldrh	r3, [r3, #10]
 800c054:	461a      	mov	r2, r3
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	4293      	cmp	r3, r2
 800c05a:	d304      	bcc.n	800c066 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c05c:	2300      	movs	r3, #0
 800c05e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	895b      	ldrh	r3, [r3, #10]
 800c06a:	461a      	mov	r2, r3
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	4293      	cmp	r3, r2
 800c070:	d114      	bne.n	800c09c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10c      	bne.n	800c09c <pbuf_copy+0x118>
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <pbuf_copy+0x118>
 800c088:	4b20      	ldr	r3, [pc, #128]	; (800c10c <pbuf_copy+0x188>)
 800c08a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c08e:	4924      	ldr	r1, [pc, #144]	; (800c120 <pbuf_copy+0x19c>)
 800c090:	4820      	ldr	r0, [pc, #128]	; (800c114 <pbuf_copy+0x190>)
 800c092:	f00a fbb1 	bl	80167f8 <iprintf>
 800c096:	f06f 030f 	mvn.w	r3, #15
 800c09a:	e032      	b.n	800c102 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d013      	beq.n	800c0ca <pbuf_copy+0x146>
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	895a      	ldrh	r2, [r3, #10]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	891b      	ldrh	r3, [r3, #8]
 800c0aa:	429a      	cmp	r2, r3
 800c0ac:	d10d      	bne.n	800c0ca <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d009      	beq.n	800c0ca <pbuf_copy+0x146>
 800c0b6:	4b15      	ldr	r3, [pc, #84]	; (800c10c <pbuf_copy+0x188>)
 800c0b8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c0bc:	4919      	ldr	r1, [pc, #100]	; (800c124 <pbuf_copy+0x1a0>)
 800c0be:	4815      	ldr	r0, [pc, #84]	; (800c114 <pbuf_copy+0x190>)
 800c0c0:	f00a fb9a 	bl	80167f8 <iprintf>
 800c0c4:	f06f 0305 	mvn.w	r3, #5
 800c0c8:	e01b      	b.n	800c102 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d013      	beq.n	800c0f8 <pbuf_copy+0x174>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	895a      	ldrh	r2, [r3, #10]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	891b      	ldrh	r3, [r3, #8]
 800c0d8:	429a      	cmp	r2, r3
 800c0da:	d10d      	bne.n	800c0f8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d009      	beq.n	800c0f8 <pbuf_copy+0x174>
 800c0e4:	4b09      	ldr	r3, [pc, #36]	; (800c10c <pbuf_copy+0x188>)
 800c0e6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c0ea:	490e      	ldr	r1, [pc, #56]	; (800c124 <pbuf_copy+0x1a0>)
 800c0ec:	4809      	ldr	r0, [pc, #36]	; (800c114 <pbuf_copy+0x190>)
 800c0ee:	f00a fb83 	bl	80167f8 <iprintf>
 800c0f2:	f06f 0305 	mvn.w	r3, #5
 800c0f6:	e004      	b.n	800c102 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f47f af61 	bne.w	800bfc2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3718      	adds	r7, #24
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	08017e18 	.word	0x08017e18
 800c110:	080180c0 	.word	0x080180c0
 800c114:	08017e78 	.word	0x08017e78
 800c118:	080180f0 	.word	0x080180f0
 800c11c:	08018108 	.word	0x08018108
 800c120:	08018124 	.word	0x08018124
 800c124:	08018134 	.word	0x08018134

0800c128 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b088      	sub	sp, #32
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	4611      	mov	r1, r2
 800c134:	461a      	mov	r2, r3
 800c136:	460b      	mov	r3, r1
 800c138:	80fb      	strh	r3, [r7, #6]
 800c13a:	4613      	mov	r3, r2
 800c13c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c13e:	2300      	movs	r3, #0
 800c140:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c142:	2300      	movs	r3, #0
 800c144:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d108      	bne.n	800c15e <pbuf_copy_partial+0x36>
 800c14c:	4b2b      	ldr	r3, [pc, #172]	; (800c1fc <pbuf_copy_partial+0xd4>)
 800c14e:	f240 420a 	movw	r2, #1034	; 0x40a
 800c152:	492b      	ldr	r1, [pc, #172]	; (800c200 <pbuf_copy_partial+0xd8>)
 800c154:	482b      	ldr	r0, [pc, #172]	; (800c204 <pbuf_copy_partial+0xdc>)
 800c156:	f00a fb4f 	bl	80167f8 <iprintf>
 800c15a:	2300      	movs	r3, #0
 800c15c:	e04a      	b.n	800c1f4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d108      	bne.n	800c176 <pbuf_copy_partial+0x4e>
 800c164:	4b25      	ldr	r3, [pc, #148]	; (800c1fc <pbuf_copy_partial+0xd4>)
 800c166:	f240 420b 	movw	r2, #1035	; 0x40b
 800c16a:	4927      	ldr	r1, [pc, #156]	; (800c208 <pbuf_copy_partial+0xe0>)
 800c16c:	4825      	ldr	r0, [pc, #148]	; (800c204 <pbuf_copy_partial+0xdc>)
 800c16e:	f00a fb43 	bl	80167f8 <iprintf>
 800c172:	2300      	movs	r3, #0
 800c174:	e03e      	b.n	800c1f4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	61fb      	str	r3, [r7, #28]
 800c17a:	e034      	b.n	800c1e6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c17c:	88bb      	ldrh	r3, [r7, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00a      	beq.n	800c198 <pbuf_copy_partial+0x70>
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	895b      	ldrh	r3, [r3, #10]
 800c186:	88ba      	ldrh	r2, [r7, #4]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d305      	bcc.n	800c198 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c18c:	69fb      	ldr	r3, [r7, #28]
 800c18e:	895b      	ldrh	r3, [r3, #10]
 800c190:	88ba      	ldrh	r2, [r7, #4]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	80bb      	strh	r3, [r7, #4]
 800c196:	e023      	b.n	800c1e0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	895a      	ldrh	r2, [r3, #10]
 800c19c:	88bb      	ldrh	r3, [r7, #4]
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c1a2:	8b3a      	ldrh	r2, [r7, #24]
 800c1a4:	88fb      	ldrh	r3, [r7, #6]
 800c1a6:	429a      	cmp	r2, r3
 800c1a8:	d901      	bls.n	800c1ae <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c1aa:	88fb      	ldrh	r3, [r7, #6]
 800c1ac:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c1ae:	8b7b      	ldrh	r3, [r7, #26]
 800c1b0:	68ba      	ldr	r2, [r7, #8]
 800c1b2:	18d0      	adds	r0, r2, r3
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	88bb      	ldrh	r3, [r7, #4]
 800c1ba:	4413      	add	r3, r2
 800c1bc:	8b3a      	ldrh	r2, [r7, #24]
 800c1be:	4619      	mov	r1, r3
 800c1c0:	f00a fc39 	bl	8016a36 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c1c4:	8afa      	ldrh	r2, [r7, #22]
 800c1c6:	8b3b      	ldrh	r3, [r7, #24]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c1cc:	8b7a      	ldrh	r2, [r7, #26]
 800c1ce:	8b3b      	ldrh	r3, [r7, #24]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c1d4:	88fa      	ldrh	r2, [r7, #6]
 800c1d6:	8b3b      	ldrh	r3, [r7, #24]
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	61fb      	str	r3, [r7, #28]
 800c1e6:	88fb      	ldrh	r3, [r7, #6]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d002      	beq.n	800c1f2 <pbuf_copy_partial+0xca>
 800c1ec:	69fb      	ldr	r3, [r7, #28]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d1c4      	bne.n	800c17c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c1f2:	8afb      	ldrh	r3, [r7, #22]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3720      	adds	r7, #32
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	08017e18 	.word	0x08017e18
 800c200:	08018160 	.word	0x08018160
 800c204:	08017e78 	.word	0x08017e78
 800c208:	08018180 	.word	0x08018180

0800c20c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	4603      	mov	r3, r0
 800c214:	603a      	str	r2, [r7, #0]
 800c216:	71fb      	strb	r3, [r7, #7]
 800c218:	460b      	mov	r3, r1
 800c21a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	8919      	ldrh	r1, [r3, #8]
 800c220:	88ba      	ldrh	r2, [r7, #4]
 800c222:	79fb      	ldrb	r3, [r7, #7]
 800c224:	4618      	mov	r0, r3
 800c226:	f7ff fa95 	bl	800b754 <pbuf_alloc>
 800c22a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d101      	bne.n	800c236 <pbuf_clone+0x2a>
    return NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	e011      	b.n	800c25a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c236:	6839      	ldr	r1, [r7, #0]
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff fea3 	bl	800bf84 <pbuf_copy>
 800c23e:	4603      	mov	r3, r0
 800c240:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c242:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <pbuf_clone+0x4c>
 800c24a:	4b06      	ldr	r3, [pc, #24]	; (800c264 <pbuf_clone+0x58>)
 800c24c:	f240 5224 	movw	r2, #1316	; 0x524
 800c250:	4905      	ldr	r1, [pc, #20]	; (800c268 <pbuf_clone+0x5c>)
 800c252:	4806      	ldr	r0, [pc, #24]	; (800c26c <pbuf_clone+0x60>)
 800c254:	f00a fad0 	bl	80167f8 <iprintf>
  return q;
 800c258:	68fb      	ldr	r3, [r7, #12]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	08017e18 	.word	0x08017e18
 800c268:	0801828c 	.word	0x0801828c
 800c26c:	08017e78 	.word	0x08017e78

0800c270 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c274:	f00a f9c0 	bl	80165f8 <rand>
 800c278:	4603      	mov	r3, r0
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c280:	b29b      	uxth	r3, r3
 800c282:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c286:	b29a      	uxth	r2, r3
 800c288:	4b01      	ldr	r3, [pc, #4]	; (800c290 <tcp_init+0x20>)
 800c28a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c28c:	bf00      	nop
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	20000010 	.word	0x20000010

0800c294 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7d1b      	ldrb	r3, [r3, #20]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d105      	bne.n	800c2b0 <tcp_free+0x1c>
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <tcp_free+0x2c>)
 800c2a6:	22d4      	movs	r2, #212	; 0xd4
 800c2a8:	4906      	ldr	r1, [pc, #24]	; (800c2c4 <tcp_free+0x30>)
 800c2aa:	4807      	ldr	r0, [pc, #28]	; (800c2c8 <tcp_free+0x34>)
 800c2ac:	f00a faa4 	bl	80167f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	2001      	movs	r0, #1
 800c2b4:	f7fe feea 	bl	800b08c <memp_free>
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	08018318 	.word	0x08018318
 800c2c4:	08018348 	.word	0x08018348
 800c2c8:	0801835c 	.word	0x0801835c

0800c2cc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	7d1b      	ldrb	r3, [r3, #20]
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d105      	bne.n	800c2e8 <tcp_free_listen+0x1c>
 800c2dc:	4b06      	ldr	r3, [pc, #24]	; (800c2f8 <tcp_free_listen+0x2c>)
 800c2de:	22df      	movs	r2, #223	; 0xdf
 800c2e0:	4906      	ldr	r1, [pc, #24]	; (800c2fc <tcp_free_listen+0x30>)
 800c2e2:	4807      	ldr	r0, [pc, #28]	; (800c300 <tcp_free_listen+0x34>)
 800c2e4:	f00a fa88 	bl	80167f8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c2e8:	6879      	ldr	r1, [r7, #4]
 800c2ea:	2002      	movs	r0, #2
 800c2ec:	f7fe fece 	bl	800b08c <memp_free>
}
 800c2f0:	bf00      	nop
 800c2f2:	3708      	adds	r7, #8
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	bd80      	pop	{r7, pc}
 800c2f8:	08018318 	.word	0x08018318
 800c2fc:	08018384 	.word	0x08018384
 800c300:	0801835c 	.word	0x0801835c

0800c304 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c308:	f000 fea2 	bl	800d050 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c30c:	4b07      	ldr	r3, [pc, #28]	; (800c32c <tcp_tmr+0x28>)
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	3301      	adds	r3, #1
 800c312:	b2da      	uxtb	r2, r3
 800c314:	4b05      	ldr	r3, [pc, #20]	; (800c32c <tcp_tmr+0x28>)
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	4b04      	ldr	r3, [pc, #16]	; (800c32c <tcp_tmr+0x28>)
 800c31a:	781b      	ldrb	r3, [r3, #0]
 800c31c:	f003 0301 	and.w	r3, r3, #1
 800c320:	2b00      	cmp	r3, #0
 800c322:	d001      	beq.n	800c328 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c324:	f000 fb54 	bl	800c9d0 <tcp_slowtmr>
  }
}
 800c328:	bf00      	nop
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	2000de49 	.word	0x2000de49

0800c330 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <tcp_remove_listener+0x1c>
 800c340:	4b0d      	ldr	r3, [pc, #52]	; (800c378 <tcp_remove_listener+0x48>)
 800c342:	22ff      	movs	r2, #255	; 0xff
 800c344:	490d      	ldr	r1, [pc, #52]	; (800c37c <tcp_remove_listener+0x4c>)
 800c346:	480e      	ldr	r0, [pc, #56]	; (800c380 <tcp_remove_listener+0x50>)
 800c348:	f00a fa56 	bl	80167f8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	60fb      	str	r3, [r7, #12]
 800c350:	e00a      	b.n	800c368 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d102      	bne.n	800c362 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1f1      	bne.n	800c352 <tcp_remove_listener+0x22>
    }
  }
}
 800c36e:	bf00      	nop
 800c370:	bf00      	nop
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	08018318 	.word	0x08018318
 800c37c:	080183a0 	.word	0x080183a0
 800c380:	0801835c 	.word	0x0801835c

0800c384 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b084      	sub	sp, #16
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <tcp_listen_closed+0x1c>
 800c392:	4b14      	ldr	r3, [pc, #80]	; (800c3e4 <tcp_listen_closed+0x60>)
 800c394:	f240 1211 	movw	r2, #273	; 0x111
 800c398:	4913      	ldr	r1, [pc, #76]	; (800c3e8 <tcp_listen_closed+0x64>)
 800c39a:	4814      	ldr	r0, [pc, #80]	; (800c3ec <tcp_listen_closed+0x68>)
 800c39c:	f00a fa2c 	bl	80167f8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	7d1b      	ldrb	r3, [r3, #20]
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d006      	beq.n	800c3b6 <tcp_listen_closed+0x32>
 800c3a8:	4b0e      	ldr	r3, [pc, #56]	; (800c3e4 <tcp_listen_closed+0x60>)
 800c3aa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c3ae:	4910      	ldr	r1, [pc, #64]	; (800c3f0 <tcp_listen_closed+0x6c>)
 800c3b0:	480e      	ldr	r0, [pc, #56]	; (800c3ec <tcp_listen_closed+0x68>)
 800c3b2:	f00a fa21 	bl	80167f8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	e00b      	b.n	800c3d4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c3bc:	4a0d      	ldr	r2, [pc, #52]	; (800c3f4 <tcp_listen_closed+0x70>)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6879      	ldr	r1, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff ffb1 	bl	800c330 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3301      	adds	r3, #1
 800c3d2:	60fb      	str	r3, [r7, #12]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d9f0      	bls.n	800c3bc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	08018318 	.word	0x08018318
 800c3e8:	080183c8 	.word	0x080183c8
 800c3ec:	0801835c 	.word	0x0801835c
 800c3f0:	080183d4 	.word	0x080183d4
 800c3f4:	0801a724 	.word	0x0801a724

0800c3f8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c3f8:	b5b0      	push	{r4, r5, r7, lr}
 800c3fa:	b088      	sub	sp, #32
 800c3fc:	af04      	add	r7, sp, #16
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	460b      	mov	r3, r1
 800c402:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d106      	bne.n	800c418 <tcp_close_shutdown+0x20>
 800c40a:	4b63      	ldr	r3, [pc, #396]	; (800c598 <tcp_close_shutdown+0x1a0>)
 800c40c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c410:	4962      	ldr	r1, [pc, #392]	; (800c59c <tcp_close_shutdown+0x1a4>)
 800c412:	4863      	ldr	r0, [pc, #396]	; (800c5a0 <tcp_close_shutdown+0x1a8>)
 800c414:	f00a f9f0 	bl	80167f8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c418:	78fb      	ldrb	r3, [r7, #3]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d066      	beq.n	800c4ec <tcp_close_shutdown+0xf4>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	7d1b      	ldrb	r3, [r3, #20]
 800c422:	2b04      	cmp	r3, #4
 800c424:	d003      	beq.n	800c42e <tcp_close_shutdown+0x36>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	7d1b      	ldrb	r3, [r3, #20]
 800c42a:	2b07      	cmp	r3, #7
 800c42c:	d15e      	bne.n	800c4ec <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c432:	2b00      	cmp	r3, #0
 800c434:	d104      	bne.n	800c440 <tcp_close_shutdown+0x48>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c43a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c43e:	d055      	beq.n	800c4ec <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	8b5b      	ldrh	r3, [r3, #26]
 800c444:	f003 0310 	and.w	r3, r3, #16
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d106      	bne.n	800c45a <tcp_close_shutdown+0x62>
 800c44c:	4b52      	ldr	r3, [pc, #328]	; (800c598 <tcp_close_shutdown+0x1a0>)
 800c44e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c452:	4954      	ldr	r1, [pc, #336]	; (800c5a4 <tcp_close_shutdown+0x1ac>)
 800c454:	4852      	ldr	r0, [pc, #328]	; (800c5a0 <tcp_close_shutdown+0x1a8>)
 800c456:	f00a f9cf 	bl	80167f8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c462:	687d      	ldr	r5, [r7, #4]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3304      	adds	r3, #4
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	8ad2      	ldrh	r2, [r2, #22]
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	8b09      	ldrh	r1, [r1, #24]
 800c470:	9102      	str	r1, [sp, #8]
 800c472:	9201      	str	r2, [sp, #4]
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	462b      	mov	r3, r5
 800c478:	4622      	mov	r2, r4
 800c47a:	4601      	mov	r1, r0
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f004 fe91 	bl	80111a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 f8c6 	bl	800d614 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c488:	4b47      	ldr	r3, [pc, #284]	; (800c5a8 <tcp_close_shutdown+0x1b0>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	429a      	cmp	r2, r3
 800c490:	d105      	bne.n	800c49e <tcp_close_shutdown+0xa6>
 800c492:	4b45      	ldr	r3, [pc, #276]	; (800c5a8 <tcp_close_shutdown+0x1b0>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	4a43      	ldr	r2, [pc, #268]	; (800c5a8 <tcp_close_shutdown+0x1b0>)
 800c49a:	6013      	str	r3, [r2, #0]
 800c49c:	e013      	b.n	800c4c6 <tcp_close_shutdown+0xce>
 800c49e:	4b42      	ldr	r3, [pc, #264]	; (800c5a8 <tcp_close_shutdown+0x1b0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	e00c      	b.n	800c4c0 <tcp_close_shutdown+0xc8>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	68db      	ldr	r3, [r3, #12]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d104      	bne.n	800c4ba <tcp_close_shutdown+0xc2>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	68da      	ldr	r2, [r3, #12]
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	60da      	str	r2, [r3, #12]
 800c4b8:	e005      	b.n	800c4c6 <tcp_close_shutdown+0xce>
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	60fb      	str	r3, [r7, #12]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1ef      	bne.n	800c4a6 <tcp_close_shutdown+0xae>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	60da      	str	r2, [r3, #12]
 800c4cc:	4b37      	ldr	r3, [pc, #220]	; (800c5ac <tcp_close_shutdown+0x1b4>)
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c4d2:	4b37      	ldr	r3, [pc, #220]	; (800c5b0 <tcp_close_shutdown+0x1b8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d102      	bne.n	800c4e2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c4dc:	f003 fd5e 	bl	800ff9c <tcp_trigger_input_pcb_close>
 800c4e0:	e002      	b.n	800c4e8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fed6 	bl	800c294 <tcp_free>
      }
      return ERR_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	e050      	b.n	800c58e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	7d1b      	ldrb	r3, [r3, #20]
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d03b      	beq.n	800c56c <tcp_close_shutdown+0x174>
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	dc44      	bgt.n	800c582 <tcp_close_shutdown+0x18a>
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d002      	beq.n	800c502 <tcp_close_shutdown+0x10a>
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d02a      	beq.n	800c556 <tcp_close_shutdown+0x15e>
 800c500:	e03f      	b.n	800c582 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	8adb      	ldrh	r3, [r3, #22]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d021      	beq.n	800c54e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c50a:	4b2a      	ldr	r3, [pc, #168]	; (800c5b4 <tcp_close_shutdown+0x1bc>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	d105      	bne.n	800c520 <tcp_close_shutdown+0x128>
 800c514:	4b27      	ldr	r3, [pc, #156]	; (800c5b4 <tcp_close_shutdown+0x1bc>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	68db      	ldr	r3, [r3, #12]
 800c51a:	4a26      	ldr	r2, [pc, #152]	; (800c5b4 <tcp_close_shutdown+0x1bc>)
 800c51c:	6013      	str	r3, [r2, #0]
 800c51e:	e013      	b.n	800c548 <tcp_close_shutdown+0x150>
 800c520:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <tcp_close_shutdown+0x1bc>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	60bb      	str	r3, [r7, #8]
 800c526:	e00c      	b.n	800c542 <tcp_close_shutdown+0x14a>
 800c528:	68bb      	ldr	r3, [r7, #8]
 800c52a:	68db      	ldr	r3, [r3, #12]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d104      	bne.n	800c53c <tcp_close_shutdown+0x144>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	68da      	ldr	r2, [r3, #12]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	60da      	str	r2, [r3, #12]
 800c53a:	e005      	b.n	800c548 <tcp_close_shutdown+0x150>
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	68db      	ldr	r3, [r3, #12]
 800c540:	60bb      	str	r3, [r7, #8]
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1ef      	bne.n	800c528 <tcp_close_shutdown+0x130>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fea0 	bl	800c294 <tcp_free>
      break;
 800c554:	e01a      	b.n	800c58c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff ff14 	bl	800c384 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c55c:	6879      	ldr	r1, [r7, #4]
 800c55e:	4816      	ldr	r0, [pc, #88]	; (800c5b8 <tcp_close_shutdown+0x1c0>)
 800c560:	f001 f8a8 	bl	800d6b4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f7ff feb1 	bl	800c2cc <tcp_free_listen>
      break;
 800c56a:	e00f      	b.n	800c58c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c56c:	6879      	ldr	r1, [r7, #4]
 800c56e:	480e      	ldr	r0, [pc, #56]	; (800c5a8 <tcp_close_shutdown+0x1b0>)
 800c570:	f001 f8a0 	bl	800d6b4 <tcp_pcb_remove>
 800c574:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <tcp_close_shutdown+0x1b4>)
 800c576:	2201      	movs	r2, #1
 800c578:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fe8a 	bl	800c294 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c580:	e004      	b.n	800c58c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f81a 	bl	800c5bc <tcp_close_shutdown_fin>
 800c588:	4603      	mov	r3, r0
 800c58a:	e000      	b.n	800c58e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bdb0      	pop	{r4, r5, r7, pc}
 800c596:	bf00      	nop
 800c598:	08018318 	.word	0x08018318
 800c59c:	080183ec 	.word	0x080183ec
 800c5a0:	0801835c 	.word	0x0801835c
 800c5a4:	0801840c 	.word	0x0801840c
 800c5a8:	2000de40 	.word	0x2000de40
 800c5ac:	2000de48 	.word	0x2000de48
 800c5b0:	2000de80 	.word	0x2000de80
 800c5b4:	2000de38 	.word	0x2000de38
 800c5b8:	2000de3c 	.word	0x2000de3c

0800c5bc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b084      	sub	sp, #16
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d106      	bne.n	800c5d8 <tcp_close_shutdown_fin+0x1c>
 800c5ca:	4b2e      	ldr	r3, [pc, #184]	; (800c684 <tcp_close_shutdown_fin+0xc8>)
 800c5cc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c5d0:	492d      	ldr	r1, [pc, #180]	; (800c688 <tcp_close_shutdown_fin+0xcc>)
 800c5d2:	482e      	ldr	r0, [pc, #184]	; (800c68c <tcp_close_shutdown_fin+0xd0>)
 800c5d4:	f00a f910 	bl	80167f8 <iprintf>

  switch (pcb->state) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	7d1b      	ldrb	r3, [r3, #20]
 800c5dc:	2b07      	cmp	r3, #7
 800c5de:	d020      	beq.n	800c622 <tcp_close_shutdown_fin+0x66>
 800c5e0:	2b07      	cmp	r3, #7
 800c5e2:	dc2b      	bgt.n	800c63c <tcp_close_shutdown_fin+0x80>
 800c5e4:	2b03      	cmp	r3, #3
 800c5e6:	d002      	beq.n	800c5ee <tcp_close_shutdown_fin+0x32>
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d00d      	beq.n	800c608 <tcp_close_shutdown_fin+0x4c>
 800c5ec:	e026      	b.n	800c63c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f003 fee6 	bl	80103c0 <tcp_send_fin>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c5f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d11f      	bne.n	800c640 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2205      	movs	r2, #5
 800c604:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c606:	e01b      	b.n	800c640 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f003 fed9 	bl	80103c0 <tcp_send_fin>
 800c60e:	4603      	mov	r3, r0
 800c610:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d114      	bne.n	800c644 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2205      	movs	r2, #5
 800c61e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c620:	e010      	b.n	800c644 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f003 fecc 	bl	80103c0 <tcp_send_fin>
 800c628:	4603      	mov	r3, r0
 800c62a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c62c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d109      	bne.n	800c648 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2209      	movs	r2, #9
 800c638:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c63a:	e005      	b.n	800c648 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	e01c      	b.n	800c67a <tcp_close_shutdown_fin+0xbe>
      break;
 800c640:	bf00      	nop
 800c642:	e002      	b.n	800c64a <tcp_close_shutdown_fin+0x8e>
      break;
 800c644:	bf00      	nop
 800c646:	e000      	b.n	800c64a <tcp_close_shutdown_fin+0x8e>
      break;
 800c648:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c64a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d103      	bne.n	800c65a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f003 fff2 	bl	801063c <tcp_output>
 800c658:	e00d      	b.n	800c676 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c662:	d108      	bne.n	800c676 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	8b5b      	ldrh	r3, [r3, #26]
 800c668:	f043 0308 	orr.w	r3, r3, #8
 800c66c:	b29a      	uxth	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	e001      	b.n	800c67a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c676:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3710      	adds	r7, #16
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	08018318 	.word	0x08018318
 800c688:	080183c8 	.word	0x080183c8
 800c68c:	0801835c 	.word	0x0801835c

0800c690 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d109      	bne.n	800c6b2 <tcp_close+0x22>
 800c69e:	4b0f      	ldr	r3, [pc, #60]	; (800c6dc <tcp_close+0x4c>)
 800c6a0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c6a4:	490e      	ldr	r1, [pc, #56]	; (800c6e0 <tcp_close+0x50>)
 800c6a6:	480f      	ldr	r0, [pc, #60]	; (800c6e4 <tcp_close+0x54>)
 800c6a8:	f00a f8a6 	bl	80167f8 <iprintf>
 800c6ac:	f06f 030f 	mvn.w	r3, #15
 800c6b0:	e00f      	b.n	800c6d2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	7d1b      	ldrb	r3, [r3, #20]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d006      	beq.n	800c6c8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	8b5b      	ldrh	r3, [r3, #26]
 800c6be:	f043 0310 	orr.w	r3, r3, #16
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c6c8:	2101      	movs	r1, #1
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7ff fe94 	bl	800c3f8 <tcp_close_shutdown>
 800c6d0:	4603      	mov	r3, r0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3708      	adds	r7, #8
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	08018318 	.word	0x08018318
 800c6e0:	08018428 	.word	0x08018428
 800c6e4:	0801835c 	.word	0x0801835c

0800c6e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b08e      	sub	sp, #56	; 0x38
 800c6ec:	af04      	add	r7, sp, #16
 800c6ee:	6078      	str	r0, [r7, #4]
 800c6f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d107      	bne.n	800c708 <tcp_abandon+0x20>
 800c6f8:	4b52      	ldr	r3, [pc, #328]	; (800c844 <tcp_abandon+0x15c>)
 800c6fa:	f240 223d 	movw	r2, #573	; 0x23d
 800c6fe:	4952      	ldr	r1, [pc, #328]	; (800c848 <tcp_abandon+0x160>)
 800c700:	4852      	ldr	r0, [pc, #328]	; (800c84c <tcp_abandon+0x164>)
 800c702:	f00a f879 	bl	80167f8 <iprintf>
 800c706:	e099      	b.n	800c83c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	7d1b      	ldrb	r3, [r3, #20]
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d106      	bne.n	800c71e <tcp_abandon+0x36>
 800c710:	4b4c      	ldr	r3, [pc, #304]	; (800c844 <tcp_abandon+0x15c>)
 800c712:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c716:	494e      	ldr	r1, [pc, #312]	; (800c850 <tcp_abandon+0x168>)
 800c718:	484c      	ldr	r0, [pc, #304]	; (800c84c <tcp_abandon+0x164>)
 800c71a:	f00a f86d 	bl	80167f8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	7d1b      	ldrb	r3, [r3, #20]
 800c722:	2b0a      	cmp	r3, #10
 800c724:	d107      	bne.n	800c736 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c726:	6879      	ldr	r1, [r7, #4]
 800c728:	484a      	ldr	r0, [pc, #296]	; (800c854 <tcp_abandon+0x16c>)
 800c72a:	f000 ffc3 	bl	800d6b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fdb0 	bl	800c294 <tcp_free>
 800c734:	e082      	b.n	800c83c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c736:	2300      	movs	r3, #0
 800c738:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c742:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c748:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c750:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	691b      	ldr	r3, [r3, #16]
 800c756:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7d1b      	ldrb	r3, [r3, #20]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d126      	bne.n	800c7ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	8adb      	ldrh	r3, [r3, #22]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d02e      	beq.n	800c7c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c768:	4b3b      	ldr	r3, [pc, #236]	; (800c858 <tcp_abandon+0x170>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	429a      	cmp	r2, r3
 800c770:	d105      	bne.n	800c77e <tcp_abandon+0x96>
 800c772:	4b39      	ldr	r3, [pc, #228]	; (800c858 <tcp_abandon+0x170>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	4a37      	ldr	r2, [pc, #220]	; (800c858 <tcp_abandon+0x170>)
 800c77a:	6013      	str	r3, [r2, #0]
 800c77c:	e013      	b.n	800c7a6 <tcp_abandon+0xbe>
 800c77e:	4b36      	ldr	r3, [pc, #216]	; (800c858 <tcp_abandon+0x170>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	61fb      	str	r3, [r7, #28]
 800c784:	e00c      	b.n	800c7a0 <tcp_abandon+0xb8>
 800c786:	69fb      	ldr	r3, [r7, #28]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d104      	bne.n	800c79a <tcp_abandon+0xb2>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	68da      	ldr	r2, [r3, #12]
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	60da      	str	r2, [r3, #12]
 800c798:	e005      	b.n	800c7a6 <tcp_abandon+0xbe>
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	61fb      	str	r3, [r7, #28]
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d1ef      	bne.n	800c786 <tcp_abandon+0x9e>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	60da      	str	r2, [r3, #12]
 800c7ac:	e00b      	b.n	800c7c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	8adb      	ldrh	r3, [r3, #22]
 800c7b6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c7b8:	6879      	ldr	r1, [r7, #4]
 800c7ba:	4828      	ldr	r0, [pc, #160]	; (800c85c <tcp_abandon+0x174>)
 800c7bc:	f000 ff7a 	bl	800d6b4 <tcp_pcb_remove>
 800c7c0:	4b27      	ldr	r3, [pc, #156]	; (800c860 <tcp_abandon+0x178>)
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d004      	beq.n	800c7d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 fd1c 	bl	800d210 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 fd13 	bl	800d210 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d004      	beq.n	800c7fc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f000 fd0a 	bl	800d210 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d00e      	beq.n	800c820 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c802:	6879      	ldr	r1, [r7, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3304      	adds	r3, #4
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	8b12      	ldrh	r2, [r2, #24]
 800c80c:	9202      	str	r2, [sp, #8]
 800c80e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c810:	9201      	str	r2, [sp, #4]
 800c812:	9300      	str	r3, [sp, #0]
 800c814:	460b      	mov	r3, r1
 800c816:	697a      	ldr	r2, [r7, #20]
 800c818:	69b9      	ldr	r1, [r7, #24]
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f004 fcc2 	bl	80111a4 <tcp_rst>
    }
    last_state = pcb->state;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	7d1b      	ldrb	r3, [r3, #20]
 800c824:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f7ff fd34 	bl	800c294 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d004      	beq.n	800c83c <tcp_abandon+0x154>
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	f06f 010c 	mvn.w	r1, #12
 800c838:	68f8      	ldr	r0, [r7, #12]
 800c83a:	4798      	blx	r3
  }
}
 800c83c:	3728      	adds	r7, #40	; 0x28
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	08018318 	.word	0x08018318
 800c848:	0801845c 	.word	0x0801845c
 800c84c:	0801835c 	.word	0x0801835c
 800c850:	08018478 	.word	0x08018478
 800c854:	2000de44 	.word	0x2000de44
 800c858:	2000de38 	.word	0x2000de38
 800c85c:	2000de40 	.word	0x2000de40
 800c860:	2000de48 	.word	0x2000de48

0800c864 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c86c:	2101      	movs	r1, #1
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f7ff ff3a 	bl	800c6e8 <tcp_abandon>
}
 800c874:	bf00      	nop
 800c876:	3708      	adds	r7, #8
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d106      	bne.n	800c898 <tcp_update_rcv_ann_wnd+0x1c>
 800c88a:	4b25      	ldr	r3, [pc, #148]	; (800c920 <tcp_update_rcv_ann_wnd+0xa4>)
 800c88c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c890:	4924      	ldr	r1, [pc, #144]	; (800c924 <tcp_update_rcv_ann_wnd+0xa8>)
 800c892:	4825      	ldr	r0, [pc, #148]	; (800c928 <tcp_update_rcv_ann_wnd+0xac>)
 800c894:	f009 ffb0 	bl	80167f8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c8a0:	4413      	add	r3, r2
 800c8a2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c8ac:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c8b0:	bf28      	it	cs
 800c8b2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c8b6:	b292      	uxth	r2, r2
 800c8b8:	4413      	add	r3, r2
 800c8ba:	68fa      	ldr	r2, [r7, #12]
 800c8bc:	1ad3      	subs	r3, r2, r3
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	db08      	blt.n	800c8d4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ce:	68fa      	ldr	r2, [r7, #12]
 800c8d0:	1ad3      	subs	r3, r2, r3
 800c8d2:	e020      	b.n	800c916 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	dd03      	ble.n	800c8ea <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c8e8:	e014      	b.n	800c914 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8fc:	d306      	bcc.n	800c90c <tcp_update_rcv_ann_wnd+0x90>
 800c8fe:	4b08      	ldr	r3, [pc, #32]	; (800c920 <tcp_update_rcv_ann_wnd+0xa4>)
 800c900:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c904:	4909      	ldr	r1, [pc, #36]	; (800c92c <tcp_update_rcv_ann_wnd+0xb0>)
 800c906:	4808      	ldr	r0, [pc, #32]	; (800c928 <tcp_update_rcv_ann_wnd+0xac>)
 800c908:	f009 ff76 	bl	80167f8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	b29a      	uxth	r2, r3
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c914:	2300      	movs	r3, #0
  }
}
 800c916:	4618      	mov	r0, r3
 800c918:	3710      	adds	r7, #16
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
 800c91e:	bf00      	nop
 800c920:	08018318 	.word	0x08018318
 800c924:	08018574 	.word	0x08018574
 800c928:	0801835c 	.word	0x0801835c
 800c92c:	08018598 	.word	0x08018598

0800c930 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
 800c938:	460b      	mov	r3, r1
 800c93a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d107      	bne.n	800c952 <tcp_recved+0x22>
 800c942:	4b1f      	ldr	r3, [pc, #124]	; (800c9c0 <tcp_recved+0x90>)
 800c944:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c948:	491e      	ldr	r1, [pc, #120]	; (800c9c4 <tcp_recved+0x94>)
 800c94a:	481f      	ldr	r0, [pc, #124]	; (800c9c8 <tcp_recved+0x98>)
 800c94c:	f009 ff54 	bl	80167f8 <iprintf>
 800c950:	e032      	b.n	800c9b8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	7d1b      	ldrb	r3, [r3, #20]
 800c956:	2b01      	cmp	r3, #1
 800c958:	d106      	bne.n	800c968 <tcp_recved+0x38>
 800c95a:	4b19      	ldr	r3, [pc, #100]	; (800c9c0 <tcp_recved+0x90>)
 800c95c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c960:	491a      	ldr	r1, [pc, #104]	; (800c9cc <tcp_recved+0x9c>)
 800c962:	4819      	ldr	r0, [pc, #100]	; (800c9c8 <tcp_recved+0x98>)
 800c964:	f009 ff48 	bl	80167f8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c96c:	887b      	ldrh	r3, [r7, #2]
 800c96e:	4413      	add	r3, r2
 800c970:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c972:	89fb      	ldrh	r3, [r7, #14]
 800c974:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c978:	d804      	bhi.n	800c984 <tcp_recved+0x54>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c97e:	89fa      	ldrh	r2, [r7, #14]
 800c980:	429a      	cmp	r2, r3
 800c982:	d204      	bcs.n	800c98e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c98a:	851a      	strh	r2, [r3, #40]	; 0x28
 800c98c:	e002      	b.n	800c994 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	89fa      	ldrh	r2, [r7, #14]
 800c992:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c994:	6878      	ldr	r0, [r7, #4]
 800c996:	f7ff ff71 	bl	800c87c <tcp_update_rcv_ann_wnd>
 800c99a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c9a2:	d309      	bcc.n	800c9b8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	8b5b      	ldrh	r3, [r3, #26]
 800c9a8:	f043 0302 	orr.w	r3, r3, #2
 800c9ac:	b29a      	uxth	r2, r3
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	f003 fe42 	bl	801063c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	08018318 	.word	0x08018318
 800c9c4:	080185b4 	.word	0x080185b4
 800c9c8:	0801835c 	.word	0x0801835c
 800c9cc:	080185cc 	.word	0x080185cc

0800c9d0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c9d0:	b5b0      	push	{r4, r5, r7, lr}
 800c9d2:	b090      	sub	sp, #64	; 0x40
 800c9d4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c9dc:	4b94      	ldr	r3, [pc, #592]	; (800cc30 <tcp_slowtmr+0x260>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	3301      	adds	r3, #1
 800c9e2:	4a93      	ldr	r2, [pc, #588]	; (800cc30 <tcp_slowtmr+0x260>)
 800c9e4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c9e6:	4b93      	ldr	r3, [pc, #588]	; (800cc34 <tcp_slowtmr+0x264>)
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	b2da      	uxtb	r2, r3
 800c9ee:	4b91      	ldr	r3, [pc, #580]	; (800cc34 <tcp_slowtmr+0x264>)
 800c9f0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c9f6:	4b90      	ldr	r3, [pc, #576]	; (800cc38 <tcp_slowtmr+0x268>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c9fc:	e29d      	b.n	800cf3a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca00:	7d1b      	ldrb	r3, [r3, #20]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <tcp_slowtmr+0x44>
 800ca06:	4b8d      	ldr	r3, [pc, #564]	; (800cc3c <tcp_slowtmr+0x26c>)
 800ca08:	f240 42be 	movw	r2, #1214	; 0x4be
 800ca0c:	498c      	ldr	r1, [pc, #560]	; (800cc40 <tcp_slowtmr+0x270>)
 800ca0e:	488d      	ldr	r0, [pc, #564]	; (800cc44 <tcp_slowtmr+0x274>)
 800ca10:	f009 fef2 	bl	80167f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	7d1b      	ldrb	r3, [r3, #20]
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d106      	bne.n	800ca2a <tcp_slowtmr+0x5a>
 800ca1c:	4b87      	ldr	r3, [pc, #540]	; (800cc3c <tcp_slowtmr+0x26c>)
 800ca1e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ca22:	4989      	ldr	r1, [pc, #548]	; (800cc48 <tcp_slowtmr+0x278>)
 800ca24:	4887      	ldr	r0, [pc, #540]	; (800cc44 <tcp_slowtmr+0x274>)
 800ca26:	f009 fee7 	bl	80167f8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2c:	7d1b      	ldrb	r3, [r3, #20]
 800ca2e:	2b0a      	cmp	r3, #10
 800ca30:	d106      	bne.n	800ca40 <tcp_slowtmr+0x70>
 800ca32:	4b82      	ldr	r3, [pc, #520]	; (800cc3c <tcp_slowtmr+0x26c>)
 800ca34:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ca38:	4984      	ldr	r1, [pc, #528]	; (800cc4c <tcp_slowtmr+0x27c>)
 800ca3a:	4882      	ldr	r0, [pc, #520]	; (800cc44 <tcp_slowtmr+0x274>)
 800ca3c:	f009 fedc 	bl	80167f8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ca40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca42:	7f9a      	ldrb	r2, [r3, #30]
 800ca44:	4b7b      	ldr	r3, [pc, #492]	; (800cc34 <tcp_slowtmr+0x264>)
 800ca46:	781b      	ldrb	r3, [r3, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d105      	bne.n	800ca58 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ca4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ca56:	e270      	b.n	800cf3a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ca58:	4b76      	ldr	r3, [pc, #472]	; (800cc34 <tcp_slowtmr+0x264>)
 800ca5a:	781a      	ldrb	r2, [r3, #0]
 800ca5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ca6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6e:	7d1b      	ldrb	r3, [r3, #20]
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d10a      	bne.n	800ca8a <tcp_slowtmr+0xba>
 800ca74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca7a:	2b05      	cmp	r3, #5
 800ca7c:	d905      	bls.n	800ca8a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ca7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca82:	3301      	adds	r3, #1
 800ca84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca88:	e11e      	b.n	800ccc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca90:	2b0b      	cmp	r3, #11
 800ca92:	d905      	bls.n	800caa0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ca94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca98:	3301      	adds	r3, #1
 800ca9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca9e:	e113      	b.n	800ccc8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d075      	beq.n	800cb96 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d006      	beq.n	800cac0 <tcp_slowtmr+0xf0>
 800cab2:	4b62      	ldr	r3, [pc, #392]	; (800cc3c <tcp_slowtmr+0x26c>)
 800cab4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800cab8:	4965      	ldr	r1, [pc, #404]	; (800cc50 <tcp_slowtmr+0x280>)
 800caba:	4862      	ldr	r0, [pc, #392]	; (800cc44 <tcp_slowtmr+0x274>)
 800cabc:	f009 fe9c 	bl	80167f8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800cac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d106      	bne.n	800cad6 <tcp_slowtmr+0x106>
 800cac8:	4b5c      	ldr	r3, [pc, #368]	; (800cc3c <tcp_slowtmr+0x26c>)
 800caca:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cace:	4961      	ldr	r1, [pc, #388]	; (800cc54 <tcp_slowtmr+0x284>)
 800cad0:	485c      	ldr	r0, [pc, #368]	; (800cc44 <tcp_slowtmr+0x274>)
 800cad2:	f009 fe91 	bl	80167f8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cadc:	2b0b      	cmp	r3, #11
 800cade:	d905      	bls.n	800caec <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800cae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cae4:	3301      	adds	r3, #1
 800cae6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800caea:	e0ed      	b.n	800ccc8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caf2:	3b01      	subs	r3, #1
 800caf4:	4a58      	ldr	r2, [pc, #352]	; (800cc58 <tcp_slowtmr+0x288>)
 800caf6:	5cd3      	ldrb	r3, [r2, r3]
 800caf8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb00:	7c7a      	ldrb	r2, [r7, #17]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d907      	bls.n	800cb16 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb08:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb0c:	3301      	adds	r3, #1
 800cb0e:	b2da      	uxtb	r2, r3
 800cb10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb12:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cb1c:	7c7a      	ldrb	r2, [r7, #17]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	f200 80d2 	bhi.w	800ccc8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800cb24:	2301      	movs	r3, #1
 800cb26:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d108      	bne.n	800cb44 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cb32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb34:	f004 fc2a 	bl	801138c <tcp_zero_window_probe>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d014      	beq.n	800cb68 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cb3e:	2300      	movs	r3, #0
 800cb40:	623b      	str	r3, [r7, #32]
 800cb42:	e011      	b.n	800cb68 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb4a:	4619      	mov	r1, r3
 800cb4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb4e:	f003 faef 	bl	8010130 <tcp_split_unsent_seg>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d107      	bne.n	800cb68 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cb58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb5a:	f003 fd6f 	bl	801063c <tcp_output>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d101      	bne.n	800cb68 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cb64:	2300      	movs	r3, #0
 800cb66:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cb68:	6a3b      	ldr	r3, [r7, #32]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 80ac 	beq.w	800ccc8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb7e:	2b06      	cmp	r3, #6
 800cb80:	f200 80a2 	bhi.w	800ccc8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb86:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb8a:	3301      	adds	r3, #1
 800cb8c:	b2da      	uxtb	r2, r3
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cb94:	e098      	b.n	800ccc8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cb96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb98:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	db0f      	blt.n	800cbc0 <tcp_slowtmr+0x1f0>
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cba6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d008      	beq.n	800cbc0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cbae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cbb4:	b29b      	uxth	r3, r3
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	b29b      	uxth	r3, r3
 800cbba:	b21a      	sxth	r2, r3
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cbc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	db7b      	blt.n	800ccc8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cbd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbd2:	f004 f827 	bl	8010c24 <tcp_rexmit_rto_prepare>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d007      	beq.n	800cbec <tcp_slowtmr+0x21c>
 800cbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d171      	bne.n	800ccc8 <tcp_slowtmr+0x2f8>
 800cbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d06d      	beq.n	800ccc8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	7d1b      	ldrb	r3, [r3, #20]
 800cbf0:	2b02      	cmp	r3, #2
 800cbf2:	d03a      	beq.n	800cc6a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbfa:	2b0c      	cmp	r3, #12
 800cbfc:	bf28      	it	cs
 800cbfe:	230c      	movcs	r3, #12
 800cc00:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cc08:	10db      	asrs	r3, r3, #3
 800cc0a:	b21b      	sxth	r3, r3
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cc14:	4413      	add	r3, r2
 800cc16:	7efa      	ldrb	r2, [r7, #27]
 800cc18:	4910      	ldr	r1, [pc, #64]	; (800cc5c <tcp_slowtmr+0x28c>)
 800cc1a:	5c8a      	ldrb	r2, [r1, r2]
 800cc1c:	4093      	lsls	r3, r2
 800cc1e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cc26:	4293      	cmp	r3, r2
 800cc28:	dc1a      	bgt.n	800cc60 <tcp_slowtmr+0x290>
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	b21a      	sxth	r2, r3
 800cc2e:	e019      	b.n	800cc64 <tcp_slowtmr+0x294>
 800cc30:	2000de34 	.word	0x2000de34
 800cc34:	2000de4a 	.word	0x2000de4a
 800cc38:	2000de40 	.word	0x2000de40
 800cc3c:	08018318 	.word	0x08018318
 800cc40:	0801865c 	.word	0x0801865c
 800cc44:	0801835c 	.word	0x0801835c
 800cc48:	08018688 	.word	0x08018688
 800cc4c:	080186b4 	.word	0x080186b4
 800cc50:	080186e4 	.word	0x080186e4
 800cc54:	08018718 	.word	0x08018718
 800cc58:	0801a71c 	.word	0x0801a71c
 800cc5c:	0801a70c 	.word	0x0801a70c
 800cc60:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cc70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cc76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	bf28      	it	cs
 800cc80:	4613      	movcs	r3, r2
 800cc82:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cc84:	8a7b      	ldrh	r3, [r7, #18]
 800cc86:	085b      	lsrs	r3, r3, #1
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc92:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cc96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc9a:	005b      	lsls	r3, r3, #1
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d206      	bcs.n	800ccb0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cca6:	005b      	lsls	r3, r3, #1
 800cca8:	b29a      	uxth	r2, r3
 800ccaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ccb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ccba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ccc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccc4:	f004 f81e 	bl	8010d04 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	7d1b      	ldrb	r3, [r3, #20]
 800cccc:	2b06      	cmp	r3, #6
 800ccce:	d111      	bne.n	800ccf4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	8b5b      	ldrh	r3, [r3, #26]
 800ccd4:	f003 0310 	and.w	r3, r3, #16
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00b      	beq.n	800ccf4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccdc:	4b9c      	ldr	r3, [pc, #624]	; (800cf50 <tcp_slowtmr+0x580>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce2:	6a1b      	ldr	r3, [r3, #32]
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	2b28      	cmp	r3, #40	; 0x28
 800cce8:	d904      	bls.n	800ccf4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ccea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccee:	3301      	adds	r3, #1
 800ccf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ccf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf6:	7a5b      	ldrb	r3, [r3, #9]
 800ccf8:	f003 0308 	and.w	r3, r3, #8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d04a      	beq.n	800cd96 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd02:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cd04:	2b04      	cmp	r3, #4
 800cd06:	d003      	beq.n	800cd10 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cd0c:	2b07      	cmp	r3, #7
 800cd0e:	d142      	bne.n	800cd96 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd10:	4b8f      	ldr	r3, [pc, #572]	; (800cf50 <tcp_slowtmr+0x580>)
 800cd12:	681a      	ldr	r2, [r3, #0]
 800cd14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd16:	6a1b      	ldr	r3, [r3, #32]
 800cd18:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cd20:	4b8c      	ldr	r3, [pc, #560]	; (800cf54 <tcp_slowtmr+0x584>)
 800cd22:	440b      	add	r3, r1
 800cd24:	498c      	ldr	r1, [pc, #560]	; (800cf58 <tcp_slowtmr+0x588>)
 800cd26:	fba1 1303 	umull	r1, r3, r1, r3
 800cd2a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d90a      	bls.n	800cd46 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cd30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd34:	3301      	adds	r3, #1
 800cd36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cd3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd3e:	3301      	adds	r3, #1
 800cd40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd44:	e027      	b.n	800cd96 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd46:	4b82      	ldr	r3, [pc, #520]	; (800cf50 <tcp_slowtmr+0x580>)
 800cd48:	681a      	ldr	r2, [r3, #0]
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cd50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd52:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd58:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	4b7f      	ldr	r3, [pc, #508]	; (800cf5c <tcp_slowtmr+0x58c>)
 800cd60:	fb00 f303 	mul.w	r3, r0, r3
 800cd64:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cd66:	497c      	ldr	r1, [pc, #496]	; (800cf58 <tcp_slowtmr+0x588>)
 800cd68:	fba1 1303 	umull	r1, r3, r1, r3
 800cd6c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d911      	bls.n	800cd96 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cd72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd74:	f004 faca 	bl	801130c <tcp_keepalive>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cd7e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d107      	bne.n	800cd96 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd88:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd8c:	3301      	adds	r3, #1
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd92:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d011      	beq.n	800cdc2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cd9e:	4b6c      	ldr	r3, [pc, #432]	; (800cf50 <tcp_slowtmr+0x580>)
 800cda0:	681a      	ldr	r2, [r3, #0]
 800cda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda4:	6a1b      	ldr	r3, [r3, #32]
 800cda6:	1ad2      	subs	r2, r2, r3
 800cda8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdaa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cdae:	4619      	mov	r1, r3
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	440b      	add	r3, r1
 800cdb6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d302      	bcc.n	800cdc2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cdbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdbe:	f000 fddd 	bl	800d97c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc4:	7d1b      	ldrb	r3, [r3, #20]
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d10b      	bne.n	800cde2 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cdca:	4b61      	ldr	r3, [pc, #388]	; (800cf50 <tcp_slowtmr+0x580>)
 800cdcc:	681a      	ldr	r2, [r3, #0]
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	6a1b      	ldr	r3, [r3, #32]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	2b28      	cmp	r3, #40	; 0x28
 800cdd6:	d904      	bls.n	800cde2 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cdd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cddc:	3301      	adds	r3, #1
 800cdde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde4:	7d1b      	ldrb	r3, [r3, #20]
 800cde6:	2b09      	cmp	r3, #9
 800cde8:	d10b      	bne.n	800ce02 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cdea:	4b59      	ldr	r3, [pc, #356]	; (800cf50 <tcp_slowtmr+0x580>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	2bf0      	cmp	r3, #240	; 0xf0
 800cdf6:	d904      	bls.n	800ce02 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cdf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ce02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d060      	beq.n	800cecc <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ce0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ce12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce14:	f000 fbfe 	bl	800d614 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ce18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d010      	beq.n	800ce40 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ce1e:	4b50      	ldr	r3, [pc, #320]	; (800cf60 <tcp_slowtmr+0x590>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d106      	bne.n	800ce36 <tcp_slowtmr+0x466>
 800ce28:	4b4e      	ldr	r3, [pc, #312]	; (800cf64 <tcp_slowtmr+0x594>)
 800ce2a:	f240 526d 	movw	r2, #1389	; 0x56d
 800ce2e:	494e      	ldr	r1, [pc, #312]	; (800cf68 <tcp_slowtmr+0x598>)
 800ce30:	484e      	ldr	r0, [pc, #312]	; (800cf6c <tcp_slowtmr+0x59c>)
 800ce32:	f009 fce1 	bl	80167f8 <iprintf>
        prev->next = pcb->next;
 800ce36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3c:	60da      	str	r2, [r3, #12]
 800ce3e:	e00f      	b.n	800ce60 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ce40:	4b47      	ldr	r3, [pc, #284]	; (800cf60 <tcp_slowtmr+0x590>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d006      	beq.n	800ce58 <tcp_slowtmr+0x488>
 800ce4a:	4b46      	ldr	r3, [pc, #280]	; (800cf64 <tcp_slowtmr+0x594>)
 800ce4c:	f240 5271 	movw	r2, #1393	; 0x571
 800ce50:	4947      	ldr	r1, [pc, #284]	; (800cf70 <tcp_slowtmr+0x5a0>)
 800ce52:	4846      	ldr	r0, [pc, #280]	; (800cf6c <tcp_slowtmr+0x59c>)
 800ce54:	f009 fcd0 	bl	80167f8 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	68db      	ldr	r3, [r3, #12]
 800ce5c:	4a40      	ldr	r2, [pc, #256]	; (800cf60 <tcp_slowtmr+0x590>)
 800ce5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ce60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d013      	beq.n	800ce90 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ce72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce74:	3304      	adds	r3, #4
 800ce76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce78:	8ad2      	ldrh	r2, [r2, #22]
 800ce7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce7c:	8b09      	ldrh	r1, [r1, #24]
 800ce7e:	9102      	str	r1, [sp, #8]
 800ce80:	9201      	str	r2, [sp, #4]
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	462b      	mov	r3, r5
 800ce86:	4622      	mov	r2, r4
 800ce88:	4601      	mov	r1, r0
 800ce8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce8c:	f004 f98a 	bl	80111a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	691b      	ldr	r3, [r3, #16]
 800ce94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ce96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce98:	7d1b      	ldrb	r3, [r3, #20]
 800ce9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800cea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cea6:	6838      	ldr	r0, [r7, #0]
 800cea8:	f7ff f9f4 	bl	800c294 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ceac:	4b31      	ldr	r3, [pc, #196]	; (800cf74 <tcp_slowtmr+0x5a4>)
 800ceae:	2200      	movs	r2, #0
 800ceb0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d004      	beq.n	800cec2 <tcp_slowtmr+0x4f2>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	f06f 010c 	mvn.w	r1, #12
 800cebe:	68b8      	ldr	r0, [r7, #8]
 800cec0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cec2:	4b2c      	ldr	r3, [pc, #176]	; (800cf74 <tcp_slowtmr+0x5a4>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d037      	beq.n	800cf3a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ceca:	e592      	b.n	800c9f2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800cecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cece:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	68db      	ldr	r3, [r3, #12]
 800ced4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ced6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced8:	7f1b      	ldrb	r3, [r3, #28]
 800ceda:	3301      	adds	r3, #1
 800cedc:	b2da      	uxtb	r2, r3
 800cede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee4:	7f1a      	ldrb	r2, [r3, #28]
 800cee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cee8:	7f5b      	ldrb	r3, [r3, #29]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d325      	bcc.n	800cf3a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ceee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef0:	2200      	movs	r2, #0
 800cef2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cef4:	4b1f      	ldr	r3, [pc, #124]	; (800cf74 <tcp_slowtmr+0x5a4>)
 800cef6:	2200      	movs	r2, #0
 800cef8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00b      	beq.n	800cf1c <tcp_slowtmr+0x54c>
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf0c:	6912      	ldr	r2, [r2, #16]
 800cf0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf10:	4610      	mov	r0, r2
 800cf12:	4798      	blx	r3
 800cf14:	4603      	mov	r3, r0
 800cf16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cf1a:	e002      	b.n	800cf22 <tcp_slowtmr+0x552>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cf22:	4b14      	ldr	r3, [pc, #80]	; (800cf74 <tcp_slowtmr+0x5a4>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d000      	beq.n	800cf2c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cf2a:	e562      	b.n	800c9f2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cf2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d102      	bne.n	800cf3a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cf34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf36:	f003 fb81 	bl	801063c <tcp_output>
  while (pcb != NULL) {
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	f47f ad5e 	bne.w	800c9fe <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cf46:	4b0c      	ldr	r3, [pc, #48]	; (800cf78 <tcp_slowtmr+0x5a8>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf4c:	e069      	b.n	800d022 <tcp_slowtmr+0x652>
 800cf4e:	bf00      	nop
 800cf50:	2000de34 	.word	0x2000de34
 800cf54:	000a4cb8 	.word	0x000a4cb8
 800cf58:	10624dd3 	.word	0x10624dd3
 800cf5c:	000124f8 	.word	0x000124f8
 800cf60:	2000de40 	.word	0x2000de40
 800cf64:	08018318 	.word	0x08018318
 800cf68:	08018750 	.word	0x08018750
 800cf6c:	0801835c 	.word	0x0801835c
 800cf70:	0801877c 	.word	0x0801877c
 800cf74:	2000de48 	.word	0x2000de48
 800cf78:	2000de44 	.word	0x2000de44
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	7d1b      	ldrb	r3, [r3, #20]
 800cf80:	2b0a      	cmp	r3, #10
 800cf82:	d006      	beq.n	800cf92 <tcp_slowtmr+0x5c2>
 800cf84:	4b2b      	ldr	r3, [pc, #172]	; (800d034 <tcp_slowtmr+0x664>)
 800cf86:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cf8a:	492b      	ldr	r1, [pc, #172]	; (800d038 <tcp_slowtmr+0x668>)
 800cf8c:	482b      	ldr	r0, [pc, #172]	; (800d03c <tcp_slowtmr+0x66c>)
 800cf8e:	f009 fc33 	bl	80167f8 <iprintf>
    pcb_remove = 0;
 800cf92:	2300      	movs	r3, #0
 800cf94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf98:	4b29      	ldr	r3, [pc, #164]	; (800d040 <tcp_slowtmr+0x670>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9e:	6a1b      	ldr	r3, [r3, #32]
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2bf0      	cmp	r3, #240	; 0xf0
 800cfa4:	d904      	bls.n	800cfb0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cfa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfaa:	3301      	adds	r3, #1
 800cfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cfb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d02f      	beq.n	800d018 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cfb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfba:	f000 fb2b 	bl	800d614 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cfbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d010      	beq.n	800cfe6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cfc4:	4b1f      	ldr	r3, [pc, #124]	; (800d044 <tcp_slowtmr+0x674>)
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d106      	bne.n	800cfdc <tcp_slowtmr+0x60c>
 800cfce:	4b19      	ldr	r3, [pc, #100]	; (800d034 <tcp_slowtmr+0x664>)
 800cfd0:	f240 52af 	movw	r2, #1455	; 0x5af
 800cfd4:	491c      	ldr	r1, [pc, #112]	; (800d048 <tcp_slowtmr+0x678>)
 800cfd6:	4819      	ldr	r0, [pc, #100]	; (800d03c <tcp_slowtmr+0x66c>)
 800cfd8:	f009 fc0e 	bl	80167f8 <iprintf>
        prev->next = pcb->next;
 800cfdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfde:	68da      	ldr	r2, [r3, #12]
 800cfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe2:	60da      	str	r2, [r3, #12]
 800cfe4:	e00f      	b.n	800d006 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cfe6:	4b17      	ldr	r3, [pc, #92]	; (800d044 <tcp_slowtmr+0x674>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d006      	beq.n	800cffe <tcp_slowtmr+0x62e>
 800cff0:	4b10      	ldr	r3, [pc, #64]	; (800d034 <tcp_slowtmr+0x664>)
 800cff2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cff6:	4915      	ldr	r1, [pc, #84]	; (800d04c <tcp_slowtmr+0x67c>)
 800cff8:	4810      	ldr	r0, [pc, #64]	; (800d03c <tcp_slowtmr+0x66c>)
 800cffa:	f009 fbfd 	bl	80167f8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	4a10      	ldr	r2, [pc, #64]	; (800d044 <tcp_slowtmr+0x674>)
 800d004:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d008:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d010:	69f8      	ldr	r0, [r7, #28]
 800d012:	f7ff f93f 	bl	800c294 <tcp_free>
 800d016:	e004      	b.n	800d022 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d024:	2b00      	cmp	r3, #0
 800d026:	d1a9      	bne.n	800cf7c <tcp_slowtmr+0x5ac>
    }
  }
}
 800d028:	bf00      	nop
 800d02a:	bf00      	nop
 800d02c:	3730      	adds	r7, #48	; 0x30
 800d02e:	46bd      	mov	sp, r7
 800d030:	bdb0      	pop	{r4, r5, r7, pc}
 800d032:	bf00      	nop
 800d034:	08018318 	.word	0x08018318
 800d038:	080187a8 	.word	0x080187a8
 800d03c:	0801835c 	.word	0x0801835c
 800d040:	2000de34 	.word	0x2000de34
 800d044:	2000de44 	.word	0x2000de44
 800d048:	080187d8 	.word	0x080187d8
 800d04c:	08018800 	.word	0x08018800

0800d050 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d056:	4b2d      	ldr	r3, [pc, #180]	; (800d10c <tcp_fasttmr+0xbc>)
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	3301      	adds	r3, #1
 800d05c:	b2da      	uxtb	r2, r3
 800d05e:	4b2b      	ldr	r3, [pc, #172]	; (800d10c <tcp_fasttmr+0xbc>)
 800d060:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d062:	4b2b      	ldr	r3, [pc, #172]	; (800d110 <tcp_fasttmr+0xc0>)
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d068:	e048      	b.n	800d0fc <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7f9a      	ldrb	r2, [r3, #30]
 800d06e:	4b27      	ldr	r3, [pc, #156]	; (800d10c <tcp_fasttmr+0xbc>)
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	429a      	cmp	r2, r3
 800d074:	d03f      	beq.n	800d0f6 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d076:	4b25      	ldr	r3, [pc, #148]	; (800d10c <tcp_fasttmr+0xbc>)
 800d078:	781a      	ldrb	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	8b5b      	ldrh	r3, [r3, #26]
 800d082:	f003 0301 	and.w	r3, r3, #1
 800d086:	2b00      	cmp	r3, #0
 800d088:	d010      	beq.n	800d0ac <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	8b5b      	ldrh	r3, [r3, #26]
 800d08e:	f043 0302 	orr.w	r3, r3, #2
 800d092:	b29a      	uxth	r2, r3
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f003 facf 	bl	801063c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	8b5b      	ldrh	r3, [r3, #26]
 800d0a2:	f023 0303 	bic.w	r3, r3, #3
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	8b5b      	ldrh	r3, [r3, #26]
 800d0b0:	f003 0308 	and.w	r3, r3, #8
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d009      	beq.n	800d0cc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	8b5b      	ldrh	r3, [r3, #26]
 800d0bc:	f023 0308 	bic.w	r3, r3, #8
 800d0c0:	b29a      	uxth	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f7ff fa78 	bl	800c5bc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00a      	beq.n	800d0f0 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d0da:	4b0e      	ldr	r3, [pc, #56]	; (800d114 <tcp_fasttmr+0xc4>)
 800d0dc:	2200      	movs	r2, #0
 800d0de:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 f819 	bl	800d118 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d0e6:	4b0b      	ldr	r3, [pc, #44]	; (800d114 <tcp_fasttmr+0xc4>)
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d000      	beq.n	800d0f0 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d0ee:	e7b8      	b.n	800d062 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	607b      	str	r3, [r7, #4]
 800d0f4:	e002      	b.n	800d0fc <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1b3      	bne.n	800d06a <tcp_fasttmr+0x1a>
    }
  }
}
 800d102:	bf00      	nop
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	2000de4a 	.word	0x2000de4a
 800d110:	2000de40 	.word	0x2000de40
 800d114:	2000de48 	.word	0x2000de48

0800d118 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d118:	b590      	push	{r4, r7, lr}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d109      	bne.n	800d13a <tcp_process_refused_data+0x22>
 800d126:	4b37      	ldr	r3, [pc, #220]	; (800d204 <tcp_process_refused_data+0xec>)
 800d128:	f240 6209 	movw	r2, #1545	; 0x609
 800d12c:	4936      	ldr	r1, [pc, #216]	; (800d208 <tcp_process_refused_data+0xf0>)
 800d12e:	4837      	ldr	r0, [pc, #220]	; (800d20c <tcp_process_refused_data+0xf4>)
 800d130:	f009 fb62 	bl	80167f8 <iprintf>
 800d134:	f06f 030f 	mvn.w	r3, #15
 800d138:	e060      	b.n	800d1fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d13e:	7b5b      	ldrb	r3, [r3, #13]
 800d140:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d146:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d154:	2b00      	cmp	r3, #0
 800d156:	d00b      	beq.n	800d170 <tcp_process_refused_data+0x58>
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6918      	ldr	r0, [r3, #16]
 800d162:	2300      	movs	r3, #0
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	6879      	ldr	r1, [r7, #4]
 800d168:	47a0      	blx	r4
 800d16a:	4603      	mov	r3, r0
 800d16c:	73fb      	strb	r3, [r7, #15]
 800d16e:	e007      	b.n	800d180 <tcp_process_refused_data+0x68>
 800d170:	2300      	movs	r3, #0
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	2000      	movs	r0, #0
 800d178:	f000 f8a4 	bl	800d2c4 <tcp_recv_null>
 800d17c:	4603      	mov	r3, r0
 800d17e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d12a      	bne.n	800d1de <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d188:	7bbb      	ldrb	r3, [r7, #14]
 800d18a:	f003 0320 	and.w	r3, r3, #32
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d033      	beq.n	800d1fa <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d196:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d19a:	d005      	beq.n	800d1a8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	b29a      	uxth	r2, r3
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00b      	beq.n	800d1ca <tcp_process_refused_data+0xb2>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6918      	ldr	r0, [r3, #16]
 800d1bc:	2300      	movs	r3, #0
 800d1be:	2200      	movs	r2, #0
 800d1c0:	6879      	ldr	r1, [r7, #4]
 800d1c2:	47a0      	blx	r4
 800d1c4:	4603      	mov	r3, r0
 800d1c6:	73fb      	strb	r3, [r7, #15]
 800d1c8:	e001      	b.n	800d1ce <tcp_process_refused_data+0xb6>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d1ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1d2:	f113 0f0d 	cmn.w	r3, #13
 800d1d6:	d110      	bne.n	800d1fa <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d1d8:	f06f 030c 	mvn.w	r3, #12
 800d1dc:	e00e      	b.n	800d1fc <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d1de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1e2:	f113 0f0d 	cmn.w	r3, #13
 800d1e6:	d102      	bne.n	800d1ee <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d1e8:	f06f 030c 	mvn.w	r3, #12
 800d1ec:	e006      	b.n	800d1fc <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d1f4:	f06f 0304 	mvn.w	r3, #4
 800d1f8:	e000      	b.n	800d1fc <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d1fa:	2300      	movs	r3, #0
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3714      	adds	r7, #20
 800d200:	46bd      	mov	sp, r7
 800d202:	bd90      	pop	{r4, r7, pc}
 800d204:	08018318 	.word	0x08018318
 800d208:	08018828 	.word	0x08018828
 800d20c:	0801835c 	.word	0x0801835c

0800d210 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b084      	sub	sp, #16
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d218:	e007      	b.n	800d22a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 f80a 	bl	800d23a <tcp_seg_free>
    seg = next;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1f4      	bne.n	800d21a <tcp_segs_free+0xa>
  }
}
 800d230:	bf00      	nop
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00c      	beq.n	800d262 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d004      	beq.n	800d25a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	4618      	mov	r0, r3
 800d256:	f7fe fd61 	bl	800bd1c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d25a:	6879      	ldr	r1, [r7, #4]
 800d25c:	2003      	movs	r0, #3
 800d25e:	f7fd ff15 	bl	800b08c <memp_free>
  }
}
 800d262:	bf00      	nop
 800d264:	3708      	adds	r7, #8
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
	...

0800d26c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <tcp_seg_copy+0x1c>
 800d27a:	4b0f      	ldr	r3, [pc, #60]	; (800d2b8 <tcp_seg_copy+0x4c>)
 800d27c:	f240 6282 	movw	r2, #1666	; 0x682
 800d280:	490e      	ldr	r1, [pc, #56]	; (800d2bc <tcp_seg_copy+0x50>)
 800d282:	480f      	ldr	r0, [pc, #60]	; (800d2c0 <tcp_seg_copy+0x54>)
 800d284:	f009 fab8 	bl	80167f8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d288:	2003      	movs	r0, #3
 800d28a:	f7fd fe89 	bl	800afa0 <memp_malloc>
 800d28e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d101      	bne.n	800d29a <tcp_seg_copy+0x2e>
    return NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	e00a      	b.n	800d2b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d29a:	2210      	movs	r2, #16
 800d29c:	6879      	ldr	r1, [r7, #4]
 800d29e:	68f8      	ldr	r0, [r7, #12]
 800d2a0:	f009 fbc9 	bl	8016a36 <memcpy>
  pbuf_ref(cseg->p);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f7fe fddd 	bl	800be68 <pbuf_ref>
  return cseg;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	08018318 	.word	0x08018318
 800d2bc:	0801886c 	.word	0x0801886c
 800d2c0:	0801835c 	.word	0x0801835c

0800d2c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	60b9      	str	r1, [r7, #8]
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d109      	bne.n	800d2ec <tcp_recv_null+0x28>
 800d2d8:	4b12      	ldr	r3, [pc, #72]	; (800d324 <tcp_recv_null+0x60>)
 800d2da:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d2de:	4912      	ldr	r1, [pc, #72]	; (800d328 <tcp_recv_null+0x64>)
 800d2e0:	4812      	ldr	r0, [pc, #72]	; (800d32c <tcp_recv_null+0x68>)
 800d2e2:	f009 fa89 	bl	80167f8 <iprintf>
 800d2e6:	f06f 030f 	mvn.w	r3, #15
 800d2ea:	e016      	b.n	800d31a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d009      	beq.n	800d306 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	891b      	ldrh	r3, [r3, #8]
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	68b8      	ldr	r0, [r7, #8]
 800d2fa:	f7ff fb19 	bl	800c930 <tcp_recved>
    pbuf_free(p);
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7fe fd0c 	bl	800bd1c <pbuf_free>
 800d304:	e008      	b.n	800d318 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d306:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d104      	bne.n	800d318 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d30e:	68b8      	ldr	r0, [r7, #8]
 800d310:	f7ff f9be 	bl	800c690 <tcp_close>
 800d314:	4603      	mov	r3, r0
 800d316:	e000      	b.n	800d31a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d318:	2300      	movs	r3, #0
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
 800d322:	bf00      	nop
 800d324:	08018318 	.word	0x08018318
 800d328:	08018888 	.word	0x08018888
 800d32c:	0801835c 	.word	0x0801835c

0800d330 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b086      	sub	sp, #24
 800d334:	af00      	add	r7, sp, #0
 800d336:	4603      	mov	r3, r0
 800d338:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d33a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	db01      	blt.n	800d346 <tcp_kill_prio+0x16>
 800d342:	79fb      	ldrb	r3, [r7, #7]
 800d344:	e000      	b.n	800d348 <tcp_kill_prio+0x18>
 800d346:	237f      	movs	r3, #127	; 0x7f
 800d348:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d34a:	7afb      	ldrb	r3, [r7, #11]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d034      	beq.n	800d3ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d350:	7afb      	ldrb	r3, [r7, #11]
 800d352:	3b01      	subs	r3, #1
 800d354:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d35a:	2300      	movs	r3, #0
 800d35c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d35e:	4b19      	ldr	r3, [pc, #100]	; (800d3c4 <tcp_kill_prio+0x94>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	617b      	str	r3, [r7, #20]
 800d364:	e01f      	b.n	800d3a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d366:	697b      	ldr	r3, [r7, #20]
 800d368:	7d5b      	ldrb	r3, [r3, #21]
 800d36a:	7afa      	ldrb	r2, [r7, #11]
 800d36c:	429a      	cmp	r2, r3
 800d36e:	d80c      	bhi.n	800d38a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d374:	7afa      	ldrb	r2, [r7, #11]
 800d376:	429a      	cmp	r2, r3
 800d378:	d112      	bne.n	800d3a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d37a:	4b13      	ldr	r3, [pc, #76]	; (800d3c8 <tcp_kill_prio+0x98>)
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	6a1b      	ldr	r3, [r3, #32]
 800d382:	1ad3      	subs	r3, r2, r3
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	429a      	cmp	r2, r3
 800d388:	d80a      	bhi.n	800d3a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d38a:	4b0f      	ldr	r3, [pc, #60]	; (800d3c8 <tcp_kill_prio+0x98>)
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	6a1b      	ldr	r3, [r3, #32]
 800d392:	1ad3      	subs	r3, r2, r3
 800d394:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	7d5b      	ldrb	r3, [r3, #21]
 800d39e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3a0:	697b      	ldr	r3, [r7, #20]
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	617b      	str	r3, [r7, #20]
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1dc      	bne.n	800d366 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d004      	beq.n	800d3bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d3b2:	6938      	ldr	r0, [r7, #16]
 800d3b4:	f7ff fa56 	bl	800c864 <tcp_abort>
 800d3b8:	e000      	b.n	800d3bc <tcp_kill_prio+0x8c>
    return;
 800d3ba:	bf00      	nop
  }
}
 800d3bc:	3718      	adds	r7, #24
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	2000de40 	.word	0x2000de40
 800d3c8:	2000de34 	.word	0x2000de34

0800d3cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b086      	sub	sp, #24
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d3d6:	79fb      	ldrb	r3, [r7, #7]
 800d3d8:	2b08      	cmp	r3, #8
 800d3da:	d009      	beq.n	800d3f0 <tcp_kill_state+0x24>
 800d3dc:	79fb      	ldrb	r3, [r7, #7]
 800d3de:	2b09      	cmp	r3, #9
 800d3e0:	d006      	beq.n	800d3f0 <tcp_kill_state+0x24>
 800d3e2:	4b1a      	ldr	r3, [pc, #104]	; (800d44c <tcp_kill_state+0x80>)
 800d3e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d3e8:	4919      	ldr	r1, [pc, #100]	; (800d450 <tcp_kill_state+0x84>)
 800d3ea:	481a      	ldr	r0, [pc, #104]	; (800d454 <tcp_kill_state+0x88>)
 800d3ec:	f009 fa04 	bl	80167f8 <iprintf>

  inactivity = 0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3f8:	4b17      	ldr	r3, [pc, #92]	; (800d458 <tcp_kill_state+0x8c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	617b      	str	r3, [r7, #20]
 800d3fe:	e017      	b.n	800d430 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	7d1b      	ldrb	r3, [r3, #20]
 800d404:	79fa      	ldrb	r2, [r7, #7]
 800d406:	429a      	cmp	r2, r3
 800d408:	d10f      	bne.n	800d42a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d40a:	4b14      	ldr	r3, [pc, #80]	; (800d45c <tcp_kill_state+0x90>)
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	6a1b      	ldr	r3, [r3, #32]
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	429a      	cmp	r2, r3
 800d418:	d807      	bhi.n	800d42a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d41a:	4b10      	ldr	r3, [pc, #64]	; (800d45c <tcp_kill_state+0x90>)
 800d41c:	681a      	ldr	r2, [r3, #0]
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	6a1b      	ldr	r3, [r3, #32]
 800d422:	1ad3      	subs	r3, r2, r3
 800d424:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	617b      	str	r3, [r7, #20]
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1e4      	bne.n	800d400 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d003      	beq.n	800d444 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d43c:	2100      	movs	r1, #0
 800d43e:	6938      	ldr	r0, [r7, #16]
 800d440:	f7ff f952 	bl	800c6e8 <tcp_abandon>
  }
}
 800d444:	bf00      	nop
 800d446:	3718      	adds	r7, #24
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}
 800d44c:	08018318 	.word	0x08018318
 800d450:	080188a4 	.word	0x080188a4
 800d454:	0801835c 	.word	0x0801835c
 800d458:	2000de40 	.word	0x2000de40
 800d45c:	2000de34 	.word	0x2000de34

0800d460 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d466:	2300      	movs	r3, #0
 800d468:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d46e:	4b12      	ldr	r3, [pc, #72]	; (800d4b8 <tcp_kill_timewait+0x58>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	60fb      	str	r3, [r7, #12]
 800d474:	e012      	b.n	800d49c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d476:	4b11      	ldr	r3, [pc, #68]	; (800d4bc <tcp_kill_timewait+0x5c>)
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6a1b      	ldr	r3, [r3, #32]
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	429a      	cmp	r2, r3
 800d484:	d807      	bhi.n	800d496 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d486:	4b0d      	ldr	r3, [pc, #52]	; (800d4bc <tcp_kill_timewait+0x5c>)
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6a1b      	ldr	r3, [r3, #32]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	60fb      	str	r3, [r7, #12]
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e9      	bne.n	800d476 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d002      	beq.n	800d4ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d4a8:	68b8      	ldr	r0, [r7, #8]
 800d4aa:	f7ff f9db 	bl	800c864 <tcp_abort>
  }
}
 800d4ae:	bf00      	nop
 800d4b0:	3710      	adds	r7, #16
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	2000de44 	.word	0x2000de44
 800d4bc:	2000de34 	.word	0x2000de34

0800d4c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d4c6:	4b10      	ldr	r3, [pc, #64]	; (800d508 <tcp_handle_closepend+0x48>)
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d4cc:	e014      	b.n	800d4f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	8b5b      	ldrh	r3, [r3, #26]
 800d4d8:	f003 0308 	and.w	r3, r3, #8
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d009      	beq.n	800d4f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	8b5b      	ldrh	r3, [r3, #26]
 800d4e4:	f023 0308 	bic.w	r3, r3, #8
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f7ff f864 	bl	800c5bc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1e7      	bne.n	800d4ce <tcp_handle_closepend+0xe>
  }
}
 800d4fe:	bf00      	nop
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}
 800d508:	2000de40 	.word	0x2000de40

0800d50c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	4603      	mov	r3, r0
 800d514:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d516:	2001      	movs	r0, #1
 800d518:	f7fd fd42 	bl	800afa0 <memp_malloc>
 800d51c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d126      	bne.n	800d572 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d524:	f7ff ffcc 	bl	800d4c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d528:	f7ff ff9a 	bl	800d460 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d52c:	2001      	movs	r0, #1
 800d52e:	f7fd fd37 	bl	800afa0 <memp_malloc>
 800d532:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d11b      	bne.n	800d572 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d53a:	2009      	movs	r0, #9
 800d53c:	f7ff ff46 	bl	800d3cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d540:	2001      	movs	r0, #1
 800d542:	f7fd fd2d 	bl	800afa0 <memp_malloc>
 800d546:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d111      	bne.n	800d572 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d54e:	2008      	movs	r0, #8
 800d550:	f7ff ff3c 	bl	800d3cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d554:	2001      	movs	r0, #1
 800d556:	f7fd fd23 	bl	800afa0 <memp_malloc>
 800d55a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d107      	bne.n	800d572 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d562:	79fb      	ldrb	r3, [r7, #7]
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff fee3 	bl	800d330 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d56a:	2001      	movs	r0, #1
 800d56c:	f7fd fd18 	bl	800afa0 <memp_malloc>
 800d570:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d03f      	beq.n	800d5f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d578:	229c      	movs	r2, #156	; 0x9c
 800d57a:	2100      	movs	r1, #0
 800d57c:	68f8      	ldr	r0, [r7, #12]
 800d57e:	f009 f9a0 	bl	80168c2 <memset>
    pcb->prio = prio;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	79fa      	ldrb	r2, [r7, #7]
 800d586:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d58e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d598:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	22ff      	movs	r2, #255	; 0xff
 800d5a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d5ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2206      	movs	r2, #6
 800d5b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2206      	movs	r2, #6
 800d5bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d5c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d5ce:	4b0d      	ldr	r3, [pc, #52]	; (800d604 <tcp_alloc+0xf8>)
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d5d6:	4b0c      	ldr	r3, [pc, #48]	; (800d608 <tcp_alloc+0xfc>)
 800d5d8:	781a      	ldrb	r2, [r3, #0]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d5e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4a08      	ldr	r2, [pc, #32]	; (800d60c <tcp_alloc+0x100>)
 800d5ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	4a07      	ldr	r2, [pc, #28]	; (800d610 <tcp_alloc+0x104>)
 800d5f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	2000de34 	.word	0x2000de34
 800d608:	2000de4a 	.word	0x2000de4a
 800d60c:	0800d2c5 	.word	0x0800d2c5
 800d610:	006ddd00 	.word	0x006ddd00

0800d614 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b082      	sub	sp, #8
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d107      	bne.n	800d632 <tcp_pcb_purge+0x1e>
 800d622:	4b21      	ldr	r3, [pc, #132]	; (800d6a8 <tcp_pcb_purge+0x94>)
 800d624:	f640 0251 	movw	r2, #2129	; 0x851
 800d628:	4920      	ldr	r1, [pc, #128]	; (800d6ac <tcp_pcb_purge+0x98>)
 800d62a:	4821      	ldr	r0, [pc, #132]	; (800d6b0 <tcp_pcb_purge+0x9c>)
 800d62c:	f009 f8e4 	bl	80167f8 <iprintf>
 800d630:	e037      	b.n	800d6a2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	7d1b      	ldrb	r3, [r3, #20]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d033      	beq.n	800d6a2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d63e:	2b0a      	cmp	r3, #10
 800d640:	d02f      	beq.n	800d6a2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d646:	2b01      	cmp	r3, #1
 800d648:	d02b      	beq.n	800d6a2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d007      	beq.n	800d662 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fb60 	bl	800bd1c <pbuf_free>
      pcb->refused_data = NULL;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d666:	2b00      	cmp	r3, #0
 800d668:	d002      	beq.n	800d670 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f000 f986 	bl	800d97c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d676:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d67c:	4618      	mov	r0, r3
 800d67e:	f7ff fdc7 	bl	800d210 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d686:	4618      	mov	r0, r3
 800d688:	f7ff fdc2 	bl	800d210 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2200      	movs	r2, #0
 800d690:	66da      	str	r2, [r3, #108]	; 0x6c
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2200      	movs	r2, #0
 800d69e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	08018318 	.word	0x08018318
 800d6ac:	08018964 	.word	0x08018964
 800d6b0:	0801835c 	.word	0x0801835c

0800d6b4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	b084      	sub	sp, #16
 800d6b8:	af00      	add	r7, sp, #0
 800d6ba:	6078      	str	r0, [r7, #4]
 800d6bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d106      	bne.n	800d6d2 <tcp_pcb_remove+0x1e>
 800d6c4:	4b3e      	ldr	r3, [pc, #248]	; (800d7c0 <tcp_pcb_remove+0x10c>)
 800d6c6:	f640 0283 	movw	r2, #2179	; 0x883
 800d6ca:	493e      	ldr	r1, [pc, #248]	; (800d7c4 <tcp_pcb_remove+0x110>)
 800d6cc:	483e      	ldr	r0, [pc, #248]	; (800d7c8 <tcp_pcb_remove+0x114>)
 800d6ce:	f009 f893 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d106      	bne.n	800d6e6 <tcp_pcb_remove+0x32>
 800d6d8:	4b39      	ldr	r3, [pc, #228]	; (800d7c0 <tcp_pcb_remove+0x10c>)
 800d6da:	f640 0284 	movw	r2, #2180	; 0x884
 800d6de:	493b      	ldr	r1, [pc, #236]	; (800d7cc <tcp_pcb_remove+0x118>)
 800d6e0:	4839      	ldr	r0, [pc, #228]	; (800d7c8 <tcp_pcb_remove+0x114>)
 800d6e2:	f009 f889 	bl	80167f8 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	683a      	ldr	r2, [r7, #0]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d105      	bne.n	800d6fc <tcp_pcb_remove+0x48>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	68da      	ldr	r2, [r3, #12]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	e013      	b.n	800d724 <tcp_pcb_remove+0x70>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	60fb      	str	r3, [r7, #12]
 800d702:	e00c      	b.n	800d71e <tcp_pcb_remove+0x6a>
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	68db      	ldr	r3, [r3, #12]
 800d708:	683a      	ldr	r2, [r7, #0]
 800d70a:	429a      	cmp	r2, r3
 800d70c:	d104      	bne.n	800d718 <tcp_pcb_remove+0x64>
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	68da      	ldr	r2, [r3, #12]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	60da      	str	r2, [r3, #12]
 800d716:	e005      	b.n	800d724 <tcp_pcb_remove+0x70>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	68db      	ldr	r3, [r3, #12]
 800d71c:	60fb      	str	r3, [r7, #12]
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1ef      	bne.n	800d704 <tcp_pcb_remove+0x50>
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2200      	movs	r2, #0
 800d728:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d72a:	6838      	ldr	r0, [r7, #0]
 800d72c:	f7ff ff72 	bl	800d614 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	7d1b      	ldrb	r3, [r3, #20]
 800d734:	2b0a      	cmp	r3, #10
 800d736:	d013      	beq.n	800d760 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d00f      	beq.n	800d760 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	8b5b      	ldrh	r3, [r3, #26]
 800d744:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d009      	beq.n	800d760 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	8b5b      	ldrh	r3, [r3, #26]
 800d750:	f043 0302 	orr.w	r3, r3, #2
 800d754:	b29a      	uxth	r2, r3
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d75a:	6838      	ldr	r0, [r7, #0]
 800d75c:	f002 ff6e 	bl	801063c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	7d1b      	ldrb	r3, [r3, #20]
 800d764:	2b01      	cmp	r3, #1
 800d766:	d020      	beq.n	800d7aa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d006      	beq.n	800d77e <tcp_pcb_remove+0xca>
 800d770:	4b13      	ldr	r3, [pc, #76]	; (800d7c0 <tcp_pcb_remove+0x10c>)
 800d772:	f640 0293 	movw	r2, #2195	; 0x893
 800d776:	4916      	ldr	r1, [pc, #88]	; (800d7d0 <tcp_pcb_remove+0x11c>)
 800d778:	4813      	ldr	r0, [pc, #76]	; (800d7c8 <tcp_pcb_remove+0x114>)
 800d77a:	f009 f83d 	bl	80167f8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d782:	2b00      	cmp	r3, #0
 800d784:	d006      	beq.n	800d794 <tcp_pcb_remove+0xe0>
 800d786:	4b0e      	ldr	r3, [pc, #56]	; (800d7c0 <tcp_pcb_remove+0x10c>)
 800d788:	f640 0294 	movw	r2, #2196	; 0x894
 800d78c:	4911      	ldr	r1, [pc, #68]	; (800d7d4 <tcp_pcb_remove+0x120>)
 800d78e:	480e      	ldr	r0, [pc, #56]	; (800d7c8 <tcp_pcb_remove+0x114>)
 800d790:	f009 f832 	bl	80167f8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d006      	beq.n	800d7aa <tcp_pcb_remove+0xf6>
 800d79c:	4b08      	ldr	r3, [pc, #32]	; (800d7c0 <tcp_pcb_remove+0x10c>)
 800d79e:	f640 0296 	movw	r2, #2198	; 0x896
 800d7a2:	490d      	ldr	r1, [pc, #52]	; (800d7d8 <tcp_pcb_remove+0x124>)
 800d7a4:	4808      	ldr	r0, [pc, #32]	; (800d7c8 <tcp_pcb_remove+0x114>)
 800d7a6:	f009 f827 	bl	80167f8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d7b6:	bf00      	nop
 800d7b8:	3710      	adds	r7, #16
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	08018318 	.word	0x08018318
 800d7c4:	08018980 	.word	0x08018980
 800d7c8:	0801835c 	.word	0x0801835c
 800d7cc:	0801899c 	.word	0x0801899c
 800d7d0:	080189bc 	.word	0x080189bc
 800d7d4:	080189d4 	.word	0x080189d4
 800d7d8:	080189f0 	.word	0x080189f0

0800d7dc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d106      	bne.n	800d7f8 <tcp_next_iss+0x1c>
 800d7ea:	4b0a      	ldr	r3, [pc, #40]	; (800d814 <tcp_next_iss+0x38>)
 800d7ec:	f640 02af 	movw	r2, #2223	; 0x8af
 800d7f0:	4909      	ldr	r1, [pc, #36]	; (800d818 <tcp_next_iss+0x3c>)
 800d7f2:	480a      	ldr	r0, [pc, #40]	; (800d81c <tcp_next_iss+0x40>)
 800d7f4:	f009 f800 	bl	80167f8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d7f8:	4b09      	ldr	r3, [pc, #36]	; (800d820 <tcp_next_iss+0x44>)
 800d7fa:	681a      	ldr	r2, [r3, #0]
 800d7fc:	4b09      	ldr	r3, [pc, #36]	; (800d824 <tcp_next_iss+0x48>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4413      	add	r3, r2
 800d802:	4a07      	ldr	r2, [pc, #28]	; (800d820 <tcp_next_iss+0x44>)
 800d804:	6013      	str	r3, [r2, #0]
  return iss;
 800d806:	4b06      	ldr	r3, [pc, #24]	; (800d820 <tcp_next_iss+0x44>)
 800d808:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3708      	adds	r7, #8
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	08018318 	.word	0x08018318
 800d818:	08018a08 	.word	0x08018a08
 800d81c:	0801835c 	.word	0x0801835c
 800d820:	20000014 	.word	0x20000014
 800d824:	2000de34 	.word	0x2000de34

0800d828 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b086      	sub	sp, #24
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	4603      	mov	r3, r0
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
 800d834:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d106      	bne.n	800d84a <tcp_eff_send_mss_netif+0x22>
 800d83c:	4b14      	ldr	r3, [pc, #80]	; (800d890 <tcp_eff_send_mss_netif+0x68>)
 800d83e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d842:	4914      	ldr	r1, [pc, #80]	; (800d894 <tcp_eff_send_mss_netif+0x6c>)
 800d844:	4814      	ldr	r0, [pc, #80]	; (800d898 <tcp_eff_send_mss_netif+0x70>)
 800d846:	f008 ffd7 	bl	80167f8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d850:	89fb      	ldrh	r3, [r7, #14]
 800d852:	e019      	b.n	800d888 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d858:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d85a:	8afb      	ldrh	r3, [r7, #22]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d012      	beq.n	800d886 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d860:	2328      	movs	r3, #40	; 0x28
 800d862:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d864:	8afa      	ldrh	r2, [r7, #22]
 800d866:	8abb      	ldrh	r3, [r7, #20]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d904      	bls.n	800d876 <tcp_eff_send_mss_netif+0x4e>
 800d86c:	8afa      	ldrh	r2, [r7, #22]
 800d86e:	8abb      	ldrh	r3, [r7, #20]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	b29b      	uxth	r3, r3
 800d874:	e000      	b.n	800d878 <tcp_eff_send_mss_netif+0x50>
 800d876:	2300      	movs	r3, #0
 800d878:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d87a:	8a7a      	ldrh	r2, [r7, #18]
 800d87c:	89fb      	ldrh	r3, [r7, #14]
 800d87e:	4293      	cmp	r3, r2
 800d880:	bf28      	it	cs
 800d882:	4613      	movcs	r3, r2
 800d884:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d886:	89fb      	ldrh	r3, [r7, #14]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3718      	adds	r7, #24
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	08018318 	.word	0x08018318
 800d894:	08018a24 	.word	0x08018a24
 800d898:	0801835c 	.word	0x0801835c

0800d89c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d119      	bne.n	800d8e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d8b0:	4b10      	ldr	r3, [pc, #64]	; (800d8f4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d8b2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d8b6:	4910      	ldr	r1, [pc, #64]	; (800d8f8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d8b8:	4810      	ldr	r0, [pc, #64]	; (800d8fc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d8ba:	f008 ff9d 	bl	80167f8 <iprintf>

  while (pcb != NULL) {
 800d8be:	e011      	b.n	800d8e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	429a      	cmp	r2, r3
 800d8ca:	d108      	bne.n	800d8de <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	f7fe ffc6 	bl	800c864 <tcp_abort>
      pcb = next;
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	60fb      	str	r3, [r7, #12]
 800d8dc:	e002      	b.n	800d8e4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1ea      	bne.n	800d8c0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d8ea:	bf00      	nop
 800d8ec:	bf00      	nop
 800d8ee:	3710      	adds	r7, #16
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bd80      	pop	{r7, pc}
 800d8f4:	08018318 	.word	0x08018318
 800d8f8:	08018a4c 	.word	0x08018a4c
 800d8fc:	0801835c 	.word	0x0801835c

0800d900 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b084      	sub	sp, #16
 800d904:	af00      	add	r7, sp, #0
 800d906:	6078      	str	r0, [r7, #4]
 800d908:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d02a      	beq.n	800d966 <tcp_netif_ip_addr_changed+0x66>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d026      	beq.n	800d966 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d918:	4b15      	ldr	r3, [pc, #84]	; (800d970 <tcp_netif_ip_addr_changed+0x70>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	4619      	mov	r1, r3
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7ff ffbc 	bl	800d89c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d924:	4b13      	ldr	r3, [pc, #76]	; (800d974 <tcp_netif_ip_addr_changed+0x74>)
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	4619      	mov	r1, r3
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f7ff ffb6 	bl	800d89c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d017      	beq.n	800d966 <tcp_netif_ip_addr_changed+0x66>
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d013      	beq.n	800d966 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d93e:	4b0e      	ldr	r3, [pc, #56]	; (800d978 <tcp_netif_ip_addr_changed+0x78>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	e00c      	b.n	800d960 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d103      	bne.n	800d95a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	68db      	ldr	r3, [r3, #12]
 800d95e:	60fb      	str	r3, [r7, #12]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d1ef      	bne.n	800d946 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d966:	bf00      	nop
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	2000de40 	.word	0x2000de40
 800d974:	2000de38 	.word	0x2000de38
 800d978:	2000de3c 	.word	0x2000de3c

0800d97c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b082      	sub	sp, #8
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d007      	beq.n	800d99c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fc3d 	bl	800d210 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d99c:	bf00      	nop
 800d99e:	3708      	adds	r7, #8
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	bd80      	pop	{r7, pc}

0800d9a4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b08d      	sub	sp, #52	; 0x34
 800d9a8:	af04      	add	r7, sp, #16
 800d9aa:	6078      	str	r0, [r7, #4]
 800d9ac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d105      	bne.n	800d9c0 <tcp_input+0x1c>
 800d9b4:	4b9b      	ldr	r3, [pc, #620]	; (800dc24 <tcp_input+0x280>)
 800d9b6:	2283      	movs	r2, #131	; 0x83
 800d9b8:	499b      	ldr	r1, [pc, #620]	; (800dc28 <tcp_input+0x284>)
 800d9ba:	489c      	ldr	r0, [pc, #624]	; (800dc2c <tcp_input+0x288>)
 800d9bc:	f008 ff1c 	bl	80167f8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	685b      	ldr	r3, [r3, #4]
 800d9c4:	4a9a      	ldr	r2, [pc, #616]	; (800dc30 <tcp_input+0x28c>)
 800d9c6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	895b      	ldrh	r3, [r3, #10]
 800d9cc:	2b13      	cmp	r3, #19
 800d9ce:	f240 83d1 	bls.w	800e174 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d9d2:	4b98      	ldr	r3, [pc, #608]	; (800dc34 <tcp_input+0x290>)
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	4a97      	ldr	r2, [pc, #604]	; (800dc34 <tcp_input+0x290>)
 800d9d8:	6812      	ldr	r2, [r2, #0]
 800d9da:	4611      	mov	r1, r2
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f007 fdc3 	bl	8015568 <ip4_addr_isbroadcast_u32>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	f040 83c7 	bne.w	800e178 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d9ea:	4b92      	ldr	r3, [pc, #584]	; (800dc34 <tcp_input+0x290>)
 800d9ec:	695b      	ldr	r3, [r3, #20]
 800d9ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d9f2:	2be0      	cmp	r3, #224	; 0xe0
 800d9f4:	f000 83c0 	beq.w	800e178 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d9f8:	4b8d      	ldr	r3, [pc, #564]	; (800dc30 <tcp_input+0x28c>)
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	899b      	ldrh	r3, [r3, #12]
 800d9fe:	b29b      	uxth	r3, r3
 800da00:	4618      	mov	r0, r3
 800da02:	f7fc fdf5 	bl	800a5f0 <lwip_htons>
 800da06:	4603      	mov	r3, r0
 800da08:	0b1b      	lsrs	r3, r3, #12
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800da12:	7cbb      	ldrb	r3, [r7, #18]
 800da14:	2b13      	cmp	r3, #19
 800da16:	f240 83b1 	bls.w	800e17c <tcp_input+0x7d8>
 800da1a:	7cbb      	ldrb	r3, [r7, #18]
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	891b      	ldrh	r3, [r3, #8]
 800da22:	429a      	cmp	r2, r3
 800da24:	f200 83aa 	bhi.w	800e17c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800da28:	7cbb      	ldrb	r3, [r7, #18]
 800da2a:	b29b      	uxth	r3, r3
 800da2c:	3b14      	subs	r3, #20
 800da2e:	b29a      	uxth	r2, r3
 800da30:	4b81      	ldr	r3, [pc, #516]	; (800dc38 <tcp_input+0x294>)
 800da32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800da34:	4b81      	ldr	r3, [pc, #516]	; (800dc3c <tcp_input+0x298>)
 800da36:	2200      	movs	r2, #0
 800da38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	895a      	ldrh	r2, [r3, #10]
 800da3e:	7cbb      	ldrb	r3, [r7, #18]
 800da40:	b29b      	uxth	r3, r3
 800da42:	429a      	cmp	r2, r3
 800da44:	d309      	bcc.n	800da5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800da46:	4b7c      	ldr	r3, [pc, #496]	; (800dc38 <tcp_input+0x294>)
 800da48:	881a      	ldrh	r2, [r3, #0]
 800da4a:	4b7d      	ldr	r3, [pc, #500]	; (800dc40 <tcp_input+0x29c>)
 800da4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800da4e:	7cbb      	ldrb	r3, [r7, #18]
 800da50:	4619      	mov	r1, r3
 800da52:	6878      	ldr	r0, [r7, #4]
 800da54:	f7fe f8dc 	bl	800bc10 <pbuf_remove_header>
 800da58:	e04e      	b.n	800daf8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d105      	bne.n	800da6e <tcp_input+0xca>
 800da62:	4b70      	ldr	r3, [pc, #448]	; (800dc24 <tcp_input+0x280>)
 800da64:	22c2      	movs	r2, #194	; 0xc2
 800da66:	4977      	ldr	r1, [pc, #476]	; (800dc44 <tcp_input+0x2a0>)
 800da68:	4870      	ldr	r0, [pc, #448]	; (800dc2c <tcp_input+0x288>)
 800da6a:	f008 fec5 	bl	80167f8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800da6e:	2114      	movs	r1, #20
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f7fe f8cd 	bl	800bc10 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	895a      	ldrh	r2, [r3, #10]
 800da7a:	4b71      	ldr	r3, [pc, #452]	; (800dc40 <tcp_input+0x29c>)
 800da7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800da7e:	4b6e      	ldr	r3, [pc, #440]	; (800dc38 <tcp_input+0x294>)
 800da80:	881a      	ldrh	r2, [r3, #0]
 800da82:	4b6f      	ldr	r3, [pc, #444]	; (800dc40 <tcp_input+0x29c>)
 800da84:	881b      	ldrh	r3, [r3, #0]
 800da86:	1ad3      	subs	r3, r2, r3
 800da88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800da8a:	4b6d      	ldr	r3, [pc, #436]	; (800dc40 <tcp_input+0x29c>)
 800da8c:	881b      	ldrh	r3, [r3, #0]
 800da8e:	4619      	mov	r1, r3
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f7fe f8bd 	bl	800bc10 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	895b      	ldrh	r3, [r3, #10]
 800da9c:	8a3a      	ldrh	r2, [r7, #16]
 800da9e:	429a      	cmp	r2, r3
 800daa0:	f200 836e 	bhi.w	800e180 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	685b      	ldr	r3, [r3, #4]
 800daaa:	4a64      	ldr	r2, [pc, #400]	; (800dc3c <tcp_input+0x298>)
 800daac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	8a3a      	ldrh	r2, [r7, #16]
 800dab4:	4611      	mov	r1, r2
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fe f8aa 	bl	800bc10 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	891a      	ldrh	r2, [r3, #8]
 800dac0:	8a3b      	ldrh	r3, [r7, #16]
 800dac2:	1ad3      	subs	r3, r2, r3
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	895b      	ldrh	r3, [r3, #10]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d005      	beq.n	800dade <tcp_input+0x13a>
 800dad2:	4b54      	ldr	r3, [pc, #336]	; (800dc24 <tcp_input+0x280>)
 800dad4:	22df      	movs	r2, #223	; 0xdf
 800dad6:	495c      	ldr	r1, [pc, #368]	; (800dc48 <tcp_input+0x2a4>)
 800dad8:	4854      	ldr	r0, [pc, #336]	; (800dc2c <tcp_input+0x288>)
 800dada:	f008 fe8d 	bl	80167f8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	891a      	ldrh	r2, [r3, #8]
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	891b      	ldrh	r3, [r3, #8]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d005      	beq.n	800daf8 <tcp_input+0x154>
 800daec:	4b4d      	ldr	r3, [pc, #308]	; (800dc24 <tcp_input+0x280>)
 800daee:	22e0      	movs	r2, #224	; 0xe0
 800daf0:	4956      	ldr	r1, [pc, #344]	; (800dc4c <tcp_input+0x2a8>)
 800daf2:	484e      	ldr	r0, [pc, #312]	; (800dc2c <tcp_input+0x288>)
 800daf4:	f008 fe80 	bl	80167f8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800daf8:	4b4d      	ldr	r3, [pc, #308]	; (800dc30 <tcp_input+0x28c>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	881b      	ldrh	r3, [r3, #0]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	4a4b      	ldr	r2, [pc, #300]	; (800dc30 <tcp_input+0x28c>)
 800db02:	6814      	ldr	r4, [r2, #0]
 800db04:	4618      	mov	r0, r3
 800db06:	f7fc fd73 	bl	800a5f0 <lwip_htons>
 800db0a:	4603      	mov	r3, r0
 800db0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800db0e:	4b48      	ldr	r3, [pc, #288]	; (800dc30 <tcp_input+0x28c>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	885b      	ldrh	r3, [r3, #2]
 800db14:	b29b      	uxth	r3, r3
 800db16:	4a46      	ldr	r2, [pc, #280]	; (800dc30 <tcp_input+0x28c>)
 800db18:	6814      	ldr	r4, [r2, #0]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7fc fd68 	bl	800a5f0 <lwip_htons>
 800db20:	4603      	mov	r3, r0
 800db22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800db24:	4b42      	ldr	r3, [pc, #264]	; (800dc30 <tcp_input+0x28c>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	685b      	ldr	r3, [r3, #4]
 800db2a:	4a41      	ldr	r2, [pc, #260]	; (800dc30 <tcp_input+0x28c>)
 800db2c:	6814      	ldr	r4, [r2, #0]
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fc fd73 	bl	800a61a <lwip_htonl>
 800db34:	4603      	mov	r3, r0
 800db36:	6063      	str	r3, [r4, #4]
 800db38:	6863      	ldr	r3, [r4, #4]
 800db3a:	4a45      	ldr	r2, [pc, #276]	; (800dc50 <tcp_input+0x2ac>)
 800db3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800db3e:	4b3c      	ldr	r3, [pc, #240]	; (800dc30 <tcp_input+0x28c>)
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	689b      	ldr	r3, [r3, #8]
 800db44:	4a3a      	ldr	r2, [pc, #232]	; (800dc30 <tcp_input+0x28c>)
 800db46:	6814      	ldr	r4, [r2, #0]
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fc fd66 	bl	800a61a <lwip_htonl>
 800db4e:	4603      	mov	r3, r0
 800db50:	60a3      	str	r3, [r4, #8]
 800db52:	68a3      	ldr	r3, [r4, #8]
 800db54:	4a3f      	ldr	r2, [pc, #252]	; (800dc54 <tcp_input+0x2b0>)
 800db56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800db58:	4b35      	ldr	r3, [pc, #212]	; (800dc30 <tcp_input+0x28c>)
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	89db      	ldrh	r3, [r3, #14]
 800db5e:	b29b      	uxth	r3, r3
 800db60:	4a33      	ldr	r2, [pc, #204]	; (800dc30 <tcp_input+0x28c>)
 800db62:	6814      	ldr	r4, [r2, #0]
 800db64:	4618      	mov	r0, r3
 800db66:	f7fc fd43 	bl	800a5f0 <lwip_htons>
 800db6a:	4603      	mov	r3, r0
 800db6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800db6e:	4b30      	ldr	r3, [pc, #192]	; (800dc30 <tcp_input+0x28c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	899b      	ldrh	r3, [r3, #12]
 800db74:	b29b      	uxth	r3, r3
 800db76:	4618      	mov	r0, r3
 800db78:	f7fc fd3a 	bl	800a5f0 <lwip_htons>
 800db7c:	4603      	mov	r3, r0
 800db7e:	b2db      	uxtb	r3, r3
 800db80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db84:	b2da      	uxtb	r2, r3
 800db86:	4b34      	ldr	r3, [pc, #208]	; (800dc58 <tcp_input+0x2b4>)
 800db88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	891a      	ldrh	r2, [r3, #8]
 800db8e:	4b33      	ldr	r3, [pc, #204]	; (800dc5c <tcp_input+0x2b8>)
 800db90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800db92:	4b31      	ldr	r3, [pc, #196]	; (800dc58 <tcp_input+0x2b4>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	f003 0303 	and.w	r3, r3, #3
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d00c      	beq.n	800dbb8 <tcp_input+0x214>
    tcplen++;
 800db9e:	4b2f      	ldr	r3, [pc, #188]	; (800dc5c <tcp_input+0x2b8>)
 800dba0:	881b      	ldrh	r3, [r3, #0]
 800dba2:	3301      	adds	r3, #1
 800dba4:	b29a      	uxth	r2, r3
 800dba6:	4b2d      	ldr	r3, [pc, #180]	; (800dc5c <tcp_input+0x2b8>)
 800dba8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	891a      	ldrh	r2, [r3, #8]
 800dbae:	4b2b      	ldr	r3, [pc, #172]	; (800dc5c <tcp_input+0x2b8>)
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	f200 82e6 	bhi.w	800e184 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbbc:	4b28      	ldr	r3, [pc, #160]	; (800dc60 <tcp_input+0x2bc>)
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	61fb      	str	r3, [r7, #28]
 800dbc2:	e09d      	b.n	800dd00 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	7d1b      	ldrb	r3, [r3, #20]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d105      	bne.n	800dbd8 <tcp_input+0x234>
 800dbcc:	4b15      	ldr	r3, [pc, #84]	; (800dc24 <tcp_input+0x280>)
 800dbce:	22fb      	movs	r2, #251	; 0xfb
 800dbd0:	4924      	ldr	r1, [pc, #144]	; (800dc64 <tcp_input+0x2c0>)
 800dbd2:	4816      	ldr	r0, [pc, #88]	; (800dc2c <tcp_input+0x288>)
 800dbd4:	f008 fe10 	bl	80167f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dbd8:	69fb      	ldr	r3, [r7, #28]
 800dbda:	7d1b      	ldrb	r3, [r3, #20]
 800dbdc:	2b0a      	cmp	r3, #10
 800dbde:	d105      	bne.n	800dbec <tcp_input+0x248>
 800dbe0:	4b10      	ldr	r3, [pc, #64]	; (800dc24 <tcp_input+0x280>)
 800dbe2:	22fc      	movs	r2, #252	; 0xfc
 800dbe4:	4920      	ldr	r1, [pc, #128]	; (800dc68 <tcp_input+0x2c4>)
 800dbe6:	4811      	ldr	r0, [pc, #68]	; (800dc2c <tcp_input+0x288>)
 800dbe8:	f008 fe06 	bl	80167f8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dbec:	69fb      	ldr	r3, [r7, #28]
 800dbee:	7d1b      	ldrb	r3, [r3, #20]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d105      	bne.n	800dc00 <tcp_input+0x25c>
 800dbf4:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <tcp_input+0x280>)
 800dbf6:	22fd      	movs	r2, #253	; 0xfd
 800dbf8:	491c      	ldr	r1, [pc, #112]	; (800dc6c <tcp_input+0x2c8>)
 800dbfa:	480c      	ldr	r0, [pc, #48]	; (800dc2c <tcp_input+0x288>)
 800dbfc:	f008 fdfc 	bl	80167f8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	7a1b      	ldrb	r3, [r3, #8]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d033      	beq.n	800dc70 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	7a1a      	ldrb	r2, [r3, #8]
 800dc0c:	4b09      	ldr	r3, [pc, #36]	; (800dc34 <tcp_input+0x290>)
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc14:	3301      	adds	r3, #1
 800dc16:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dc18:	429a      	cmp	r2, r3
 800dc1a:	d029      	beq.n	800dc70 <tcp_input+0x2cc>
      prev = pcb;
 800dc1c:	69fb      	ldr	r3, [r7, #28]
 800dc1e:	61bb      	str	r3, [r7, #24]
      continue;
 800dc20:	e06b      	b.n	800dcfa <tcp_input+0x356>
 800dc22:	bf00      	nop
 800dc24:	08018a80 	.word	0x08018a80
 800dc28:	08018ab4 	.word	0x08018ab4
 800dc2c:	08018acc 	.word	0x08018acc
 800dc30:	2000de5c 	.word	0x2000de5c
 800dc34:	2000a6c0 	.word	0x2000a6c0
 800dc38:	2000de60 	.word	0x2000de60
 800dc3c:	2000de64 	.word	0x2000de64
 800dc40:	2000de62 	.word	0x2000de62
 800dc44:	08018af4 	.word	0x08018af4
 800dc48:	08018b04 	.word	0x08018b04
 800dc4c:	08018b10 	.word	0x08018b10
 800dc50:	2000de6c 	.word	0x2000de6c
 800dc54:	2000de70 	.word	0x2000de70
 800dc58:	2000de78 	.word	0x2000de78
 800dc5c:	2000de76 	.word	0x2000de76
 800dc60:	2000de40 	.word	0x2000de40
 800dc64:	08018b30 	.word	0x08018b30
 800dc68:	08018b58 	.word	0x08018b58
 800dc6c:	08018b84 	.word	0x08018b84
    }

    if (pcb->remote_port == tcphdr->src &&
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	8b1a      	ldrh	r2, [r3, #24]
 800dc74:	4b72      	ldr	r3, [pc, #456]	; (800de40 <tcp_input+0x49c>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d13a      	bne.n	800dcf6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dc80:	69fb      	ldr	r3, [r7, #28]
 800dc82:	8ada      	ldrh	r2, [r3, #22]
 800dc84:	4b6e      	ldr	r3, [pc, #440]	; (800de40 <tcp_input+0x49c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	885b      	ldrh	r3, [r3, #2]
 800dc8a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dc8c:	429a      	cmp	r2, r3
 800dc8e:	d132      	bne.n	800dcf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	4b6b      	ldr	r3, [pc, #428]	; (800de44 <tcp_input+0x4a0>)
 800dc96:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d12c      	bne.n	800dcf6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc9c:	69fb      	ldr	r3, [r7, #28]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	4b68      	ldr	r3, [pc, #416]	; (800de44 <tcp_input+0x4a0>)
 800dca2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d126      	bne.n	800dcf6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	69fa      	ldr	r2, [r7, #28]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d106      	bne.n	800dcc0 <tcp_input+0x31c>
 800dcb2:	4b65      	ldr	r3, [pc, #404]	; (800de48 <tcp_input+0x4a4>)
 800dcb4:	f240 120d 	movw	r2, #269	; 0x10d
 800dcb8:	4964      	ldr	r1, [pc, #400]	; (800de4c <tcp_input+0x4a8>)
 800dcba:	4865      	ldr	r0, [pc, #404]	; (800de50 <tcp_input+0x4ac>)
 800dcbc:	f008 fd9c 	bl	80167f8 <iprintf>
      if (prev != NULL) {
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00a      	beq.n	800dcdc <tcp_input+0x338>
        prev->next = pcb->next;
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	68da      	ldr	r2, [r3, #12]
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dcce:	4b61      	ldr	r3, [pc, #388]	; (800de54 <tcp_input+0x4b0>)
 800dcd0:	681a      	ldr	r2, [r3, #0]
 800dcd2:	69fb      	ldr	r3, [r7, #28]
 800dcd4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dcd6:	4a5f      	ldr	r2, [pc, #380]	; (800de54 <tcp_input+0x4b0>)
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dcdc:	69fb      	ldr	r3, [r7, #28]
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	69fa      	ldr	r2, [r7, #28]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d111      	bne.n	800dd0a <tcp_input+0x366>
 800dce6:	4b58      	ldr	r3, [pc, #352]	; (800de48 <tcp_input+0x4a4>)
 800dce8:	f240 1215 	movw	r2, #277	; 0x115
 800dcec:	495a      	ldr	r1, [pc, #360]	; (800de58 <tcp_input+0x4b4>)
 800dcee:	4858      	ldr	r0, [pc, #352]	; (800de50 <tcp_input+0x4ac>)
 800dcf0:	f008 fd82 	bl	80167f8 <iprintf>
      break;
 800dcf4:	e009      	b.n	800dd0a <tcp_input+0x366>
    }
    prev = pcb;
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	61fb      	str	r3, [r7, #28]
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f47f af5e 	bne.w	800dbc4 <tcp_input+0x220>
 800dd08:	e000      	b.n	800dd0c <tcp_input+0x368>
      break;
 800dd0a:	bf00      	nop
  }

  if (pcb == NULL) {
 800dd0c:	69fb      	ldr	r3, [r7, #28]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f040 80aa 	bne.w	800de68 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd14:	4b51      	ldr	r3, [pc, #324]	; (800de5c <tcp_input+0x4b8>)
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	61fb      	str	r3, [r7, #28]
 800dd1a:	e03f      	b.n	800dd9c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	7d1b      	ldrb	r3, [r3, #20]
 800dd20:	2b0a      	cmp	r3, #10
 800dd22:	d006      	beq.n	800dd32 <tcp_input+0x38e>
 800dd24:	4b48      	ldr	r3, [pc, #288]	; (800de48 <tcp_input+0x4a4>)
 800dd26:	f240 121f 	movw	r2, #287	; 0x11f
 800dd2a:	494d      	ldr	r1, [pc, #308]	; (800de60 <tcp_input+0x4bc>)
 800dd2c:	4848      	ldr	r0, [pc, #288]	; (800de50 <tcp_input+0x4ac>)
 800dd2e:	f008 fd63 	bl	80167f8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	7a1b      	ldrb	r3, [r3, #8]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d009      	beq.n	800dd4e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	7a1a      	ldrb	r2, [r3, #8]
 800dd3e:	4b41      	ldr	r3, [pc, #260]	; (800de44 <tcp_input+0x4a0>)
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dd46:	3301      	adds	r3, #1
 800dd48:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d122      	bne.n	800dd94 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dd4e:	69fb      	ldr	r3, [r7, #28]
 800dd50:	8b1a      	ldrh	r2, [r3, #24]
 800dd52:	4b3b      	ldr	r3, [pc, #236]	; (800de40 <tcp_input+0x49c>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	b29b      	uxth	r3, r3
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d11b      	bne.n	800dd96 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	8ada      	ldrh	r2, [r3, #22]
 800dd62:	4b37      	ldr	r3, [pc, #220]	; (800de40 <tcp_input+0x49c>)
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	885b      	ldrh	r3, [r3, #2]
 800dd68:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dd6a:	429a      	cmp	r2, r3
 800dd6c:	d113      	bne.n	800dd96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	685a      	ldr	r2, [r3, #4]
 800dd72:	4b34      	ldr	r3, [pc, #208]	; (800de44 <tcp_input+0x4a0>)
 800dd74:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d10d      	bne.n	800dd96 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd7a:	69fb      	ldr	r3, [r7, #28]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	4b31      	ldr	r3, [pc, #196]	; (800de44 <tcp_input+0x4a0>)
 800dd80:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d107      	bne.n	800dd96 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dd86:	69f8      	ldr	r0, [r7, #28]
 800dd88:	f000 fb56 	bl	800e438 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7fd ffc5 	bl	800bd1c <pbuf_free>
        return;
 800dd92:	e1fd      	b.n	800e190 <tcp_input+0x7ec>
        continue;
 800dd94:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd96:	69fb      	ldr	r3, [r7, #28]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	61fb      	str	r3, [r7, #28]
 800dd9c:	69fb      	ldr	r3, [r7, #28]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d1bc      	bne.n	800dd1c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dda2:	2300      	movs	r3, #0
 800dda4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dda6:	4b2f      	ldr	r3, [pc, #188]	; (800de64 <tcp_input+0x4c0>)
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	617b      	str	r3, [r7, #20]
 800ddac:	e02a      	b.n	800de04 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	7a1b      	ldrb	r3, [r3, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00c      	beq.n	800ddd0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	7a1a      	ldrb	r2, [r3, #8]
 800ddba:	4b22      	ldr	r3, [pc, #136]	; (800de44 <tcp_input+0x4a0>)
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d002      	beq.n	800ddd0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	61bb      	str	r3, [r7, #24]
        continue;
 800ddce:	e016      	b.n	800ddfe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	8ada      	ldrh	r2, [r3, #22]
 800ddd4:	4b1a      	ldr	r3, [pc, #104]	; (800de40 <tcp_input+0x49c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	885b      	ldrh	r3, [r3, #2]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d10c      	bne.n	800ddfa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	4b17      	ldr	r3, [pc, #92]	; (800de44 <tcp_input+0x4a0>)
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	429a      	cmp	r2, r3
 800ddea:	d00f      	beq.n	800de0c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00d      	beq.n	800de0e <tcp_input+0x46a>
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d009      	beq.n	800de0e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	617b      	str	r3, [r7, #20]
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1d1      	bne.n	800ddae <tcp_input+0x40a>
 800de0a:	e000      	b.n	800de0e <tcp_input+0x46a>
            break;
 800de0c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d029      	beq.n	800de68 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800de14:	69bb      	ldr	r3, [r7, #24]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00a      	beq.n	800de30 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	68da      	ldr	r2, [r3, #12]
 800de1e:	69bb      	ldr	r3, [r7, #24]
 800de20:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800de22:	4b10      	ldr	r3, [pc, #64]	; (800de64 <tcp_input+0x4c0>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800de2a:	4a0e      	ldr	r2, [pc, #56]	; (800de64 <tcp_input+0x4c0>)
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800de30:	6978      	ldr	r0, [r7, #20]
 800de32:	f000 fa03 	bl	800e23c <tcp_listen_input>
      }
      pbuf_free(p);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f7fd ff70 	bl	800bd1c <pbuf_free>
      return;
 800de3c:	e1a8      	b.n	800e190 <tcp_input+0x7ec>
 800de3e:	bf00      	nop
 800de40:	2000de5c 	.word	0x2000de5c
 800de44:	2000a6c0 	.word	0x2000a6c0
 800de48:	08018a80 	.word	0x08018a80
 800de4c:	08018bac 	.word	0x08018bac
 800de50:	08018acc 	.word	0x08018acc
 800de54:	2000de40 	.word	0x2000de40
 800de58:	08018bd8 	.word	0x08018bd8
 800de5c:	2000de44 	.word	0x2000de44
 800de60:	08018c04 	.word	0x08018c04
 800de64:	2000de3c 	.word	0x2000de3c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f000 8158 	beq.w	800e120 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800de70:	4b95      	ldr	r3, [pc, #596]	; (800e0c8 <tcp_input+0x724>)
 800de72:	2200      	movs	r2, #0
 800de74:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	891a      	ldrh	r2, [r3, #8]
 800de7a:	4b93      	ldr	r3, [pc, #588]	; (800e0c8 <tcp_input+0x724>)
 800de7c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800de7e:	4a92      	ldr	r2, [pc, #584]	; (800e0c8 <tcp_input+0x724>)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800de84:	4b91      	ldr	r3, [pc, #580]	; (800e0cc <tcp_input+0x728>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	4a8f      	ldr	r2, [pc, #572]	; (800e0c8 <tcp_input+0x724>)
 800de8a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800de8c:	4b90      	ldr	r3, [pc, #576]	; (800e0d0 <tcp_input+0x72c>)
 800de8e:	2200      	movs	r2, #0
 800de90:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800de92:	4b90      	ldr	r3, [pc, #576]	; (800e0d4 <tcp_input+0x730>)
 800de94:	2200      	movs	r2, #0
 800de96:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800de98:	4b8f      	ldr	r3, [pc, #572]	; (800e0d8 <tcp_input+0x734>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800de9e:	4b8f      	ldr	r3, [pc, #572]	; (800e0dc <tcp_input+0x738>)
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	f003 0308 	and.w	r3, r3, #8
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d006      	beq.n	800deb8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	7b5b      	ldrb	r3, [r3, #13]
 800deae:	f043 0301 	orr.w	r3, r3, #1
 800deb2:	b2da      	uxtb	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800deb8:	69fb      	ldr	r3, [r7, #28]
 800deba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800debc:	2b00      	cmp	r3, #0
 800debe:	d017      	beq.n	800def0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dec0:	69f8      	ldr	r0, [r7, #28]
 800dec2:	f7ff f929 	bl	800d118 <tcp_process_refused_data>
 800dec6:	4603      	mov	r3, r0
 800dec8:	f113 0f0d 	cmn.w	r3, #13
 800decc:	d007      	beq.n	800dede <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00c      	beq.n	800def0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ded6:	4b82      	ldr	r3, [pc, #520]	; (800e0e0 <tcp_input+0x73c>)
 800ded8:	881b      	ldrh	r3, [r3, #0]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d008      	beq.n	800def0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	f040 80e3 	bne.w	800e0ae <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dee8:	69f8      	ldr	r0, [r7, #28]
 800deea:	f003 f9ad 	bl	8011248 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800deee:	e0de      	b.n	800e0ae <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800def0:	4a7c      	ldr	r2, [pc, #496]	; (800e0e4 <tcp_input+0x740>)
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800def6:	69f8      	ldr	r0, [r7, #28]
 800def8:	f000 fb18 	bl	800e52c <tcp_process>
 800defc:	4603      	mov	r3, r0
 800defe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800df00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df04:	f113 0f0d 	cmn.w	r3, #13
 800df08:	f000 80d3 	beq.w	800e0b2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800df0c:	4b71      	ldr	r3, [pc, #452]	; (800e0d4 <tcp_input+0x730>)
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	f003 0308 	and.w	r3, r3, #8
 800df14:	2b00      	cmp	r3, #0
 800df16:	d015      	beq.n	800df44 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800df18:	69fb      	ldr	r3, [r7, #28]
 800df1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d008      	beq.n	800df34 <tcp_input+0x590>
 800df22:	69fb      	ldr	r3, [r7, #28]
 800df24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df28:	69fa      	ldr	r2, [r7, #28]
 800df2a:	6912      	ldr	r2, [r2, #16]
 800df2c:	f06f 010d 	mvn.w	r1, #13
 800df30:	4610      	mov	r0, r2
 800df32:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800df34:	69f9      	ldr	r1, [r7, #28]
 800df36:	486c      	ldr	r0, [pc, #432]	; (800e0e8 <tcp_input+0x744>)
 800df38:	f7ff fbbc 	bl	800d6b4 <tcp_pcb_remove>
        tcp_free(pcb);
 800df3c:	69f8      	ldr	r0, [r7, #28]
 800df3e:	f7fe f9a9 	bl	800c294 <tcp_free>
 800df42:	e0da      	b.n	800e0fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800df44:	2300      	movs	r3, #0
 800df46:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800df48:	4b63      	ldr	r3, [pc, #396]	; (800e0d8 <tcp_input+0x734>)
 800df4a:	881b      	ldrh	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d01d      	beq.n	800df8c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800df50:	4b61      	ldr	r3, [pc, #388]	; (800e0d8 <tcp_input+0x734>)
 800df52:	881b      	ldrh	r3, [r3, #0]
 800df54:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d00a      	beq.n	800df76 <tcp_input+0x5d2>
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df66:	69fa      	ldr	r2, [r7, #28]
 800df68:	6910      	ldr	r0, [r2, #16]
 800df6a:	89fa      	ldrh	r2, [r7, #14]
 800df6c:	69f9      	ldr	r1, [r7, #28]
 800df6e:	4798      	blx	r3
 800df70:	4603      	mov	r3, r0
 800df72:	74fb      	strb	r3, [r7, #19]
 800df74:	e001      	b.n	800df7a <tcp_input+0x5d6>
 800df76:	2300      	movs	r3, #0
 800df78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800df7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df7e:	f113 0f0d 	cmn.w	r3, #13
 800df82:	f000 8098 	beq.w	800e0b6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800df86:	4b54      	ldr	r3, [pc, #336]	; (800e0d8 <tcp_input+0x734>)
 800df88:	2200      	movs	r2, #0
 800df8a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800df8c:	69f8      	ldr	r0, [r7, #28]
 800df8e:	f000 f915 	bl	800e1bc <tcp_input_delayed_close>
 800df92:	4603      	mov	r3, r0
 800df94:	2b00      	cmp	r3, #0
 800df96:	f040 8090 	bne.w	800e0ba <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800df9a:	4b4d      	ldr	r3, [pc, #308]	; (800e0d0 <tcp_input+0x72c>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d041      	beq.n	800e026 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d006      	beq.n	800dfb8 <tcp_input+0x614>
 800dfaa:	4b50      	ldr	r3, [pc, #320]	; (800e0ec <tcp_input+0x748>)
 800dfac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dfb0:	494f      	ldr	r1, [pc, #316]	; (800e0f0 <tcp_input+0x74c>)
 800dfb2:	4850      	ldr	r0, [pc, #320]	; (800e0f4 <tcp_input+0x750>)
 800dfb4:	f008 fc20 	bl	80167f8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dfb8:	69fb      	ldr	r3, [r7, #28]
 800dfba:	8b5b      	ldrh	r3, [r3, #26]
 800dfbc:	f003 0310 	and.w	r3, r3, #16
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d008      	beq.n	800dfd6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dfc4:	4b42      	ldr	r3, [pc, #264]	; (800e0d0 <tcp_input+0x72c>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7fd fea7 	bl	800bd1c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dfce:	69f8      	ldr	r0, [r7, #28]
 800dfd0:	f7fe fc48 	bl	800c864 <tcp_abort>
            goto aborted;
 800dfd4:	e091      	b.n	800e0fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dfd6:	69fb      	ldr	r3, [r7, #28]
 800dfd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d00c      	beq.n	800dffa <tcp_input+0x656>
 800dfe0:	69fb      	ldr	r3, [r7, #28]
 800dfe2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfe6:	69fb      	ldr	r3, [r7, #28]
 800dfe8:	6918      	ldr	r0, [r3, #16]
 800dfea:	4b39      	ldr	r3, [pc, #228]	; (800e0d0 <tcp_input+0x72c>)
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	2300      	movs	r3, #0
 800dff0:	69f9      	ldr	r1, [r7, #28]
 800dff2:	47a0      	blx	r4
 800dff4:	4603      	mov	r3, r0
 800dff6:	74fb      	strb	r3, [r7, #19]
 800dff8:	e008      	b.n	800e00c <tcp_input+0x668>
 800dffa:	4b35      	ldr	r3, [pc, #212]	; (800e0d0 <tcp_input+0x72c>)
 800dffc:	681a      	ldr	r2, [r3, #0]
 800dffe:	2300      	movs	r3, #0
 800e000:	69f9      	ldr	r1, [r7, #28]
 800e002:	2000      	movs	r0, #0
 800e004:	f7ff f95e 	bl	800d2c4 <tcp_recv_null>
 800e008:	4603      	mov	r3, r0
 800e00a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e00c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e010:	f113 0f0d 	cmn.w	r3, #13
 800e014:	d053      	beq.n	800e0be <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e016:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d003      	beq.n	800e026 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e01e:	4b2c      	ldr	r3, [pc, #176]	; (800e0d0 <tcp_input+0x72c>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e026:	4b2b      	ldr	r3, [pc, #172]	; (800e0d4 <tcp_input+0x730>)
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	f003 0320 	and.w	r3, r3, #32
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d030      	beq.n	800e094 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e036:	2b00      	cmp	r3, #0
 800e038:	d009      	beq.n	800e04e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e03a:	69fb      	ldr	r3, [r7, #28]
 800e03c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e03e:	7b5a      	ldrb	r2, [r3, #13]
 800e040:	69fb      	ldr	r3, [r7, #28]
 800e042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e044:	f042 0220 	orr.w	r2, r2, #32
 800e048:	b2d2      	uxtb	r2, r2
 800e04a:	735a      	strb	r2, [r3, #13]
 800e04c:	e022      	b.n	800e094 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e052:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e056:	d005      	beq.n	800e064 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e058:	69fb      	ldr	r3, [r7, #28]
 800e05a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e05c:	3301      	adds	r3, #1
 800e05e:	b29a      	uxth	r2, r3
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e064:	69fb      	ldr	r3, [r7, #28]
 800e066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d00b      	beq.n	800e086 <tcp_input+0x6e2>
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	6918      	ldr	r0, [r3, #16]
 800e078:	2300      	movs	r3, #0
 800e07a:	2200      	movs	r2, #0
 800e07c:	69f9      	ldr	r1, [r7, #28]
 800e07e:	47a0      	blx	r4
 800e080:	4603      	mov	r3, r0
 800e082:	74fb      	strb	r3, [r7, #19]
 800e084:	e001      	b.n	800e08a <tcp_input+0x6e6>
 800e086:	2300      	movs	r3, #0
 800e088:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e08a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e08e:	f113 0f0d 	cmn.w	r3, #13
 800e092:	d016      	beq.n	800e0c2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e094:	4b13      	ldr	r3, [pc, #76]	; (800e0e4 <tcp_input+0x740>)
 800e096:	2200      	movs	r2, #0
 800e098:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e09a:	69f8      	ldr	r0, [r7, #28]
 800e09c:	f000 f88e 	bl	800e1bc <tcp_input_delayed_close>
 800e0a0:	4603      	mov	r3, r0
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d128      	bne.n	800e0f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e0a6:	69f8      	ldr	r0, [r7, #28]
 800e0a8:	f002 fac8 	bl	801063c <tcp_output>
 800e0ac:	e025      	b.n	800e0fa <tcp_input+0x756>
        goto aborted;
 800e0ae:	bf00      	nop
 800e0b0:	e023      	b.n	800e0fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e0b2:	bf00      	nop
 800e0b4:	e021      	b.n	800e0fa <tcp_input+0x756>
              goto aborted;
 800e0b6:	bf00      	nop
 800e0b8:	e01f      	b.n	800e0fa <tcp_input+0x756>
          goto aborted;
 800e0ba:	bf00      	nop
 800e0bc:	e01d      	b.n	800e0fa <tcp_input+0x756>
            goto aborted;
 800e0be:	bf00      	nop
 800e0c0:	e01b      	b.n	800e0fa <tcp_input+0x756>
              goto aborted;
 800e0c2:	bf00      	nop
 800e0c4:	e019      	b.n	800e0fa <tcp_input+0x756>
 800e0c6:	bf00      	nop
 800e0c8:	2000de4c 	.word	0x2000de4c
 800e0cc:	2000de5c 	.word	0x2000de5c
 800e0d0:	2000de7c 	.word	0x2000de7c
 800e0d4:	2000de79 	.word	0x2000de79
 800e0d8:	2000de74 	.word	0x2000de74
 800e0dc:	2000de78 	.word	0x2000de78
 800e0e0:	2000de76 	.word	0x2000de76
 800e0e4:	2000de80 	.word	0x2000de80
 800e0e8:	2000de40 	.word	0x2000de40
 800e0ec:	08018a80 	.word	0x08018a80
 800e0f0:	08018c34 	.word	0x08018c34
 800e0f4:	08018acc 	.word	0x08018acc
          goto aborted;
 800e0f8:	bf00      	nop
    tcp_input_pcb = NULL;
 800e0fa:	4b27      	ldr	r3, [pc, #156]	; (800e198 <tcp_input+0x7f4>)
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e100:	4b26      	ldr	r3, [pc, #152]	; (800e19c <tcp_input+0x7f8>)
 800e102:	2200      	movs	r2, #0
 800e104:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e106:	4b26      	ldr	r3, [pc, #152]	; (800e1a0 <tcp_input+0x7fc>)
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d03f      	beq.n	800e18e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e10e:	4b24      	ldr	r3, [pc, #144]	; (800e1a0 <tcp_input+0x7fc>)
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	4618      	mov	r0, r3
 800e114:	f7fd fe02 	bl	800bd1c <pbuf_free>
      inseg.p = NULL;
 800e118:	4b21      	ldr	r3, [pc, #132]	; (800e1a0 <tcp_input+0x7fc>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e11e:	e036      	b.n	800e18e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e120:	4b20      	ldr	r3, [pc, #128]	; (800e1a4 <tcp_input+0x800>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	899b      	ldrh	r3, [r3, #12]
 800e126:	b29b      	uxth	r3, r3
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fc fa61 	bl	800a5f0 <lwip_htons>
 800e12e:	4603      	mov	r3, r0
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0304 	and.w	r3, r3, #4
 800e136:	2b00      	cmp	r3, #0
 800e138:	d118      	bne.n	800e16c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e13a:	4b1b      	ldr	r3, [pc, #108]	; (800e1a8 <tcp_input+0x804>)
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	4b1b      	ldr	r3, [pc, #108]	; (800e1ac <tcp_input+0x808>)
 800e140:	881b      	ldrh	r3, [r3, #0]
 800e142:	461a      	mov	r2, r3
 800e144:	4b1a      	ldr	r3, [pc, #104]	; (800e1b0 <tcp_input+0x80c>)
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e14a:	4b16      	ldr	r3, [pc, #88]	; (800e1a4 <tcp_input+0x800>)
 800e14c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e14e:	885b      	ldrh	r3, [r3, #2]
 800e150:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e152:	4a14      	ldr	r2, [pc, #80]	; (800e1a4 <tcp_input+0x800>)
 800e154:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e156:	8812      	ldrh	r2, [r2, #0]
 800e158:	b292      	uxth	r2, r2
 800e15a:	9202      	str	r2, [sp, #8]
 800e15c:	9301      	str	r3, [sp, #4]
 800e15e:	4b15      	ldr	r3, [pc, #84]	; (800e1b4 <tcp_input+0x810>)
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	4b15      	ldr	r3, [pc, #84]	; (800e1b8 <tcp_input+0x814>)
 800e164:	4602      	mov	r2, r0
 800e166:	2000      	movs	r0, #0
 800e168:	f003 f81c 	bl	80111a4 <tcp_rst>
    pbuf_free(p);
 800e16c:	6878      	ldr	r0, [r7, #4]
 800e16e:	f7fd fdd5 	bl	800bd1c <pbuf_free>
  return;
 800e172:	e00c      	b.n	800e18e <tcp_input+0x7ea>
    goto dropped;
 800e174:	bf00      	nop
 800e176:	e006      	b.n	800e186 <tcp_input+0x7e2>
    goto dropped;
 800e178:	bf00      	nop
 800e17a:	e004      	b.n	800e186 <tcp_input+0x7e2>
    goto dropped;
 800e17c:	bf00      	nop
 800e17e:	e002      	b.n	800e186 <tcp_input+0x7e2>
      goto dropped;
 800e180:	bf00      	nop
 800e182:	e000      	b.n	800e186 <tcp_input+0x7e2>
      goto dropped;
 800e184:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f7fd fdc8 	bl	800bd1c <pbuf_free>
 800e18c:	e000      	b.n	800e190 <tcp_input+0x7ec>
  return;
 800e18e:	bf00      	nop
}
 800e190:	3724      	adds	r7, #36	; 0x24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd90      	pop	{r4, r7, pc}
 800e196:	bf00      	nop
 800e198:	2000de80 	.word	0x2000de80
 800e19c:	2000de7c 	.word	0x2000de7c
 800e1a0:	2000de4c 	.word	0x2000de4c
 800e1a4:	2000de5c 	.word	0x2000de5c
 800e1a8:	2000de70 	.word	0x2000de70
 800e1ac:	2000de76 	.word	0x2000de76
 800e1b0:	2000de6c 	.word	0x2000de6c
 800e1b4:	2000a6d0 	.word	0x2000a6d0
 800e1b8:	2000a6d4 	.word	0x2000a6d4

0800e1bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d106      	bne.n	800e1d8 <tcp_input_delayed_close+0x1c>
 800e1ca:	4b17      	ldr	r3, [pc, #92]	; (800e228 <tcp_input_delayed_close+0x6c>)
 800e1cc:	f240 225a 	movw	r2, #602	; 0x25a
 800e1d0:	4916      	ldr	r1, [pc, #88]	; (800e22c <tcp_input_delayed_close+0x70>)
 800e1d2:	4817      	ldr	r0, [pc, #92]	; (800e230 <tcp_input_delayed_close+0x74>)
 800e1d4:	f008 fb10 	bl	80167f8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e1d8:	4b16      	ldr	r3, [pc, #88]	; (800e234 <tcp_input_delayed_close+0x78>)
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	f003 0310 	and.w	r3, r3, #16
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d01c      	beq.n	800e21e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	8b5b      	ldrh	r3, [r3, #26]
 800e1e8:	f003 0310 	and.w	r3, r3, #16
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d10d      	bne.n	800e20c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d008      	beq.n	800e20c <tcp_input_delayed_close+0x50>
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e200:	687a      	ldr	r2, [r7, #4]
 800e202:	6912      	ldr	r2, [r2, #16]
 800e204:	f06f 010e 	mvn.w	r1, #14
 800e208:	4610      	mov	r0, r2
 800e20a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e20c:	6879      	ldr	r1, [r7, #4]
 800e20e:	480a      	ldr	r0, [pc, #40]	; (800e238 <tcp_input_delayed_close+0x7c>)
 800e210:	f7ff fa50 	bl	800d6b4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f7fe f83d 	bl	800c294 <tcp_free>
    return 1;
 800e21a:	2301      	movs	r3, #1
 800e21c:	e000      	b.n	800e220 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	08018a80 	.word	0x08018a80
 800e22c:	08018c50 	.word	0x08018c50
 800e230:	08018acc 	.word	0x08018acc
 800e234:	2000de79 	.word	0x2000de79
 800e238:	2000de40 	.word	0x2000de40

0800e23c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e23c:	b590      	push	{r4, r7, lr}
 800e23e:	b08b      	sub	sp, #44	; 0x2c
 800e240:	af04      	add	r7, sp, #16
 800e242:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e244:	4b6f      	ldr	r3, [pc, #444]	; (800e404 <tcp_listen_input+0x1c8>)
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	f003 0304 	and.w	r3, r3, #4
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f040 80d2 	bne.w	800e3f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d106      	bne.n	800e266 <tcp_listen_input+0x2a>
 800e258:	4b6b      	ldr	r3, [pc, #428]	; (800e408 <tcp_listen_input+0x1cc>)
 800e25a:	f240 2281 	movw	r2, #641	; 0x281
 800e25e:	496b      	ldr	r1, [pc, #428]	; (800e40c <tcp_listen_input+0x1d0>)
 800e260:	486b      	ldr	r0, [pc, #428]	; (800e410 <tcp_listen_input+0x1d4>)
 800e262:	f008 fac9 	bl	80167f8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e266:	4b67      	ldr	r3, [pc, #412]	; (800e404 <tcp_listen_input+0x1c8>)
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	f003 0310 	and.w	r3, r3, #16
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d019      	beq.n	800e2a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e272:	4b68      	ldr	r3, [pc, #416]	; (800e414 <tcp_listen_input+0x1d8>)
 800e274:	6819      	ldr	r1, [r3, #0]
 800e276:	4b68      	ldr	r3, [pc, #416]	; (800e418 <tcp_listen_input+0x1dc>)
 800e278:	881b      	ldrh	r3, [r3, #0]
 800e27a:	461a      	mov	r2, r3
 800e27c:	4b67      	ldr	r3, [pc, #412]	; (800e41c <tcp_listen_input+0x1e0>)
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e282:	4b67      	ldr	r3, [pc, #412]	; (800e420 <tcp_listen_input+0x1e4>)
 800e284:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e286:	885b      	ldrh	r3, [r3, #2]
 800e288:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e28a:	4a65      	ldr	r2, [pc, #404]	; (800e420 <tcp_listen_input+0x1e4>)
 800e28c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e28e:	8812      	ldrh	r2, [r2, #0]
 800e290:	b292      	uxth	r2, r2
 800e292:	9202      	str	r2, [sp, #8]
 800e294:	9301      	str	r3, [sp, #4]
 800e296:	4b63      	ldr	r3, [pc, #396]	; (800e424 <tcp_listen_input+0x1e8>)
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	4b63      	ldr	r3, [pc, #396]	; (800e428 <tcp_listen_input+0x1ec>)
 800e29c:	4602      	mov	r2, r0
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f002 ff80 	bl	80111a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e2a4:	e0a9      	b.n	800e3fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e2a6:	4b57      	ldr	r3, [pc, #348]	; (800e404 <tcp_listen_input+0x1c8>)
 800e2a8:	781b      	ldrb	r3, [r3, #0]
 800e2aa:	f003 0302 	and.w	r3, r3, #2
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f000 80a3 	beq.w	800e3fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	7d5b      	ldrb	r3, [r3, #21]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7ff f927 	bl	800d50c <tcp_alloc>
 800e2be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e2c0:	697b      	ldr	r3, [r7, #20]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d111      	bne.n	800e2ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	699b      	ldr	r3, [r3, #24]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00a      	beq.n	800e2e4 <tcp_listen_input+0xa8>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	699b      	ldr	r3, [r3, #24]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	6910      	ldr	r0, [r2, #16]
 800e2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e2da:	2100      	movs	r1, #0
 800e2dc:	4798      	blx	r3
 800e2de:	4603      	mov	r3, r0
 800e2e0:	73bb      	strb	r3, [r7, #14]
      return;
 800e2e2:	e08b      	b.n	800e3fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e2e4:	23f0      	movs	r3, #240	; 0xf0
 800e2e6:	73bb      	strb	r3, [r7, #14]
      return;
 800e2e8:	e088      	b.n	800e3fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e2ea:	4b50      	ldr	r3, [pc, #320]	; (800e42c <tcp_listen_input+0x1f0>)
 800e2ec:	695a      	ldr	r2, [r3, #20]
 800e2ee:	697b      	ldr	r3, [r7, #20]
 800e2f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e2f2:	4b4e      	ldr	r3, [pc, #312]	; (800e42c <tcp_listen_input+0x1f0>)
 800e2f4:	691a      	ldr	r2, [r3, #16]
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	8ada      	ldrh	r2, [r3, #22]
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e302:	4b47      	ldr	r3, [pc, #284]	; (800e420 <tcp_listen_input+0x1e4>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	881b      	ldrh	r3, [r3, #0]
 800e308:	b29a      	uxth	r2, r3
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2203      	movs	r2, #3
 800e312:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e314:	4b41      	ldr	r3, [pc, #260]	; (800e41c <tcp_listen_input+0x1e0>)
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	1c5a      	adds	r2, r3, #1
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e326:	6978      	ldr	r0, [r7, #20]
 800e328:	f7ff fa58 	bl	800d7dc <tcp_next_iss>
 800e32c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	693a      	ldr	r2, [r7, #16]
 800e338:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e33a:	697b      	ldr	r3, [r7, #20]
 800e33c:	693a      	ldr	r2, [r7, #16]
 800e33e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	693a      	ldr	r2, [r7, #16]
 800e344:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e346:	4b35      	ldr	r3, [pc, #212]	; (800e41c <tcp_listen_input+0x1e0>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	1e5a      	subs	r2, r3, #1
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	691a      	ldr	r2, [r3, #16]
 800e354:	697b      	ldr	r3, [r7, #20]
 800e356:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	687a      	ldr	r2, [r7, #4]
 800e35c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	7a5b      	ldrb	r3, [r3, #9]
 800e362:	f003 030c 	and.w	r3, r3, #12
 800e366:	b2da      	uxtb	r2, r3
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	7a1a      	ldrb	r2, [r3, #8]
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e374:	4b2e      	ldr	r3, [pc, #184]	; (800e430 <tcp_listen_input+0x1f4>)
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	60da      	str	r2, [r3, #12]
 800e37c:	4a2c      	ldr	r2, [pc, #176]	; (800e430 <tcp_listen_input+0x1f4>)
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	6013      	str	r3, [r2, #0]
 800e382:	f003 f8d1 	bl	8011528 <tcp_timer_needed>
 800e386:	4b2b      	ldr	r3, [pc, #172]	; (800e434 <tcp_listen_input+0x1f8>)
 800e388:	2201      	movs	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e38c:	6978      	ldr	r0, [r7, #20]
 800e38e:	f001 fd8f 	bl	800feb0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e392:	4b23      	ldr	r3, [pc, #140]	; (800e420 <tcp_listen_input+0x1e4>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	89db      	ldrh	r3, [r3, #14]
 800e398:	b29a      	uxth	r2, r3
 800e39a:	697b      	ldr	r3, [r7, #20]
 800e39c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e3a0:	697b      	ldr	r3, [r7, #20]
 800e3a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e3ac:	697b      	ldr	r3, [r7, #20]
 800e3ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f006 fe23 	bl	8015000 <ip4_route>
 800e3ba:	4601      	mov	r1, r0
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	3304      	adds	r3, #4
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	4620      	mov	r0, r4
 800e3c4:	f7ff fa30 	bl	800d828 <tcp_eff_send_mss_netif>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e3d0:	2112      	movs	r1, #18
 800e3d2:	6978      	ldr	r0, [r7, #20]
 800e3d4:	f002 f844 	bl	8010460 <tcp_enqueue_flags>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e3dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d004      	beq.n	800e3ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e3e4:	2100      	movs	r1, #0
 800e3e6:	6978      	ldr	r0, [r7, #20]
 800e3e8:	f7fe f97e 	bl	800c6e8 <tcp_abandon>
      return;
 800e3ec:	e006      	b.n	800e3fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e3ee:	6978      	ldr	r0, [r7, #20]
 800e3f0:	f002 f924 	bl	801063c <tcp_output>
  return;
 800e3f4:	e001      	b.n	800e3fa <tcp_listen_input+0x1be>
    return;
 800e3f6:	bf00      	nop
 800e3f8:	e000      	b.n	800e3fc <tcp_listen_input+0x1c0>
  return;
 800e3fa:	bf00      	nop
}
 800e3fc:	371c      	adds	r7, #28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd90      	pop	{r4, r7, pc}
 800e402:	bf00      	nop
 800e404:	2000de78 	.word	0x2000de78
 800e408:	08018a80 	.word	0x08018a80
 800e40c:	08018c78 	.word	0x08018c78
 800e410:	08018acc 	.word	0x08018acc
 800e414:	2000de70 	.word	0x2000de70
 800e418:	2000de76 	.word	0x2000de76
 800e41c:	2000de6c 	.word	0x2000de6c
 800e420:	2000de5c 	.word	0x2000de5c
 800e424:	2000a6d0 	.word	0x2000a6d0
 800e428:	2000a6d4 	.word	0x2000a6d4
 800e42c:	2000a6c0 	.word	0x2000a6c0
 800e430:	2000de40 	.word	0x2000de40
 800e434:	2000de48 	.word	0x2000de48

0800e438 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af04      	add	r7, sp, #16
 800e43e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e440:	4b2f      	ldr	r3, [pc, #188]	; (800e500 <tcp_timewait_input+0xc8>)
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	f003 0304 	and.w	r3, r3, #4
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d153      	bne.n	800e4f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d106      	bne.n	800e460 <tcp_timewait_input+0x28>
 800e452:	4b2c      	ldr	r3, [pc, #176]	; (800e504 <tcp_timewait_input+0xcc>)
 800e454:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e458:	492b      	ldr	r1, [pc, #172]	; (800e508 <tcp_timewait_input+0xd0>)
 800e45a:	482c      	ldr	r0, [pc, #176]	; (800e50c <tcp_timewait_input+0xd4>)
 800e45c:	f008 f9cc 	bl	80167f8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e460:	4b27      	ldr	r3, [pc, #156]	; (800e500 <tcp_timewait_input+0xc8>)
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	f003 0302 	and.w	r3, r3, #2
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d02a      	beq.n	800e4c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e46c:	4b28      	ldr	r3, [pc, #160]	; (800e510 <tcp_timewait_input+0xd8>)
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e474:	1ad3      	subs	r3, r2, r3
 800e476:	2b00      	cmp	r3, #0
 800e478:	db2d      	blt.n	800e4d6 <tcp_timewait_input+0x9e>
 800e47a:	4b25      	ldr	r3, [pc, #148]	; (800e510 <tcp_timewait_input+0xd8>)
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e482:	6879      	ldr	r1, [r7, #4]
 800e484:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e486:	440b      	add	r3, r1
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	dc23      	bgt.n	800e4d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e48e:	4b21      	ldr	r3, [pc, #132]	; (800e514 <tcp_timewait_input+0xdc>)
 800e490:	6819      	ldr	r1, [r3, #0]
 800e492:	4b21      	ldr	r3, [pc, #132]	; (800e518 <tcp_timewait_input+0xe0>)
 800e494:	881b      	ldrh	r3, [r3, #0]
 800e496:	461a      	mov	r2, r3
 800e498:	4b1d      	ldr	r3, [pc, #116]	; (800e510 <tcp_timewait_input+0xd8>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e49e:	4b1f      	ldr	r3, [pc, #124]	; (800e51c <tcp_timewait_input+0xe4>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4a2:	885b      	ldrh	r3, [r3, #2]
 800e4a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e4a6:	4a1d      	ldr	r2, [pc, #116]	; (800e51c <tcp_timewait_input+0xe4>)
 800e4a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e4aa:	8812      	ldrh	r2, [r2, #0]
 800e4ac:	b292      	uxth	r2, r2
 800e4ae:	9202      	str	r2, [sp, #8]
 800e4b0:	9301      	str	r3, [sp, #4]
 800e4b2:	4b1b      	ldr	r3, [pc, #108]	; (800e520 <tcp_timewait_input+0xe8>)
 800e4b4:	9300      	str	r3, [sp, #0]
 800e4b6:	4b1b      	ldr	r3, [pc, #108]	; (800e524 <tcp_timewait_input+0xec>)
 800e4b8:	4602      	mov	r2, r0
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f002 fe72 	bl	80111a4 <tcp_rst>
      return;
 800e4c0:	e01b      	b.n	800e4fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e4c2:	4b0f      	ldr	r3, [pc, #60]	; (800e500 <tcp_timewait_input+0xc8>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	f003 0301 	and.w	r3, r3, #1
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d003      	beq.n	800e4d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e4ce:	4b16      	ldr	r3, [pc, #88]	; (800e528 <tcp_timewait_input+0xf0>)
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e4d6:	4b10      	ldr	r3, [pc, #64]	; (800e518 <tcp_timewait_input+0xe0>)
 800e4d8:	881b      	ldrh	r3, [r3, #0]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	8b5b      	ldrh	r3, [r3, #26]
 800e4e2:	f043 0302 	orr.w	r3, r3, #2
 800e4e6:	b29a      	uxth	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f002 f8a5 	bl	801063c <tcp_output>
  }
  return;
 800e4f2:	e001      	b.n	800e4f8 <tcp_timewait_input+0xc0>
    return;
 800e4f4:	bf00      	nop
 800e4f6:	e000      	b.n	800e4fa <tcp_timewait_input+0xc2>
  return;
 800e4f8:	bf00      	nop
}
 800e4fa:	3708      	adds	r7, #8
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}
 800e500:	2000de78 	.word	0x2000de78
 800e504:	08018a80 	.word	0x08018a80
 800e508:	08018c98 	.word	0x08018c98
 800e50c:	08018acc 	.word	0x08018acc
 800e510:	2000de6c 	.word	0x2000de6c
 800e514:	2000de70 	.word	0x2000de70
 800e518:	2000de76 	.word	0x2000de76
 800e51c:	2000de5c 	.word	0x2000de5c
 800e520:	2000a6d0 	.word	0x2000a6d0
 800e524:	2000a6d4 	.word	0x2000a6d4
 800e528:	2000de34 	.word	0x2000de34

0800e52c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e52c:	b590      	push	{r4, r7, lr}
 800e52e:	b08d      	sub	sp, #52	; 0x34
 800e530:	af04      	add	r7, sp, #16
 800e532:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e534:	2300      	movs	r3, #0
 800e536:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e538:	2300      	movs	r3, #0
 800e53a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d106      	bne.n	800e550 <tcp_process+0x24>
 800e542:	4b9d      	ldr	r3, [pc, #628]	; (800e7b8 <tcp_process+0x28c>)
 800e544:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e548:	499c      	ldr	r1, [pc, #624]	; (800e7bc <tcp_process+0x290>)
 800e54a:	489d      	ldr	r0, [pc, #628]	; (800e7c0 <tcp_process+0x294>)
 800e54c:	f008 f954 	bl	80167f8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e550:	4b9c      	ldr	r3, [pc, #624]	; (800e7c4 <tcp_process+0x298>)
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	f003 0304 	and.w	r3, r3, #4
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d04e      	beq.n	800e5fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	2b02      	cmp	r3, #2
 800e562:	d108      	bne.n	800e576 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e568:	4b97      	ldr	r3, [pc, #604]	; (800e7c8 <tcp_process+0x29c>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	429a      	cmp	r2, r3
 800e56e:	d123      	bne.n	800e5b8 <tcp_process+0x8c>
        acceptable = 1;
 800e570:	2301      	movs	r3, #1
 800e572:	76fb      	strb	r3, [r7, #27]
 800e574:	e020      	b.n	800e5b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e57a:	4b94      	ldr	r3, [pc, #592]	; (800e7cc <tcp_process+0x2a0>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d102      	bne.n	800e588 <tcp_process+0x5c>
        acceptable = 1;
 800e582:	2301      	movs	r3, #1
 800e584:	76fb      	strb	r3, [r7, #27]
 800e586:	e017      	b.n	800e5b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e588:	4b90      	ldr	r3, [pc, #576]	; (800e7cc <tcp_process+0x2a0>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e590:	1ad3      	subs	r3, r2, r3
 800e592:	2b00      	cmp	r3, #0
 800e594:	db10      	blt.n	800e5b8 <tcp_process+0x8c>
 800e596:	4b8d      	ldr	r3, [pc, #564]	; (800e7cc <tcp_process+0x2a0>)
 800e598:	681a      	ldr	r2, [r3, #0]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e59e:	6879      	ldr	r1, [r7, #4]
 800e5a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e5a2:	440b      	add	r3, r1
 800e5a4:	1ad3      	subs	r3, r2, r3
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	dc06      	bgt.n	800e5b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	8b5b      	ldrh	r3, [r3, #26]
 800e5ae:	f043 0302 	orr.w	r3, r3, #2
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e5b8:	7efb      	ldrb	r3, [r7, #27]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d01b      	beq.n	800e5f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	7d1b      	ldrb	r3, [r3, #20]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d106      	bne.n	800e5d4 <tcp_process+0xa8>
 800e5c6:	4b7c      	ldr	r3, [pc, #496]	; (800e7b8 <tcp_process+0x28c>)
 800e5c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e5cc:	4980      	ldr	r1, [pc, #512]	; (800e7d0 <tcp_process+0x2a4>)
 800e5ce:	487c      	ldr	r0, [pc, #496]	; (800e7c0 <tcp_process+0x294>)
 800e5d0:	f008 f912 	bl	80167f8 <iprintf>
      recv_flags |= TF_RESET;
 800e5d4:	4b7f      	ldr	r3, [pc, #508]	; (800e7d4 <tcp_process+0x2a8>)
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f043 0308 	orr.w	r3, r3, #8
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	4b7d      	ldr	r3, [pc, #500]	; (800e7d4 <tcp_process+0x2a8>)
 800e5e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	8b5b      	ldrh	r3, [r3, #26]
 800e5e6:	f023 0301 	bic.w	r3, r3, #1
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e5f0:	f06f 030d 	mvn.w	r3, #13
 800e5f4:	e37a      	b.n	800ecec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	e378      	b.n	800ecec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e5fa:	4b72      	ldr	r3, [pc, #456]	; (800e7c4 <tcp_process+0x298>)
 800e5fc:	781b      	ldrb	r3, [r3, #0]
 800e5fe:	f003 0302 	and.w	r3, r3, #2
 800e602:	2b00      	cmp	r3, #0
 800e604:	d010      	beq.n	800e628 <tcp_process+0xfc>
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	7d1b      	ldrb	r3, [r3, #20]
 800e60a:	2b02      	cmp	r3, #2
 800e60c:	d00c      	beq.n	800e628 <tcp_process+0xfc>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7d1b      	ldrb	r3, [r3, #20]
 800e612:	2b03      	cmp	r3, #3
 800e614:	d008      	beq.n	800e628 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	8b5b      	ldrh	r3, [r3, #26]
 800e61a:	f043 0302 	orr.w	r3, r3, #2
 800e61e:	b29a      	uxth	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e624:	2300      	movs	r3, #0
 800e626:	e361      	b.n	800ecec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	8b5b      	ldrh	r3, [r3, #26]
 800e62c:	f003 0310 	and.w	r3, r3, #16
 800e630:	2b00      	cmp	r3, #0
 800e632:	d103      	bne.n	800e63c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e634:	4b68      	ldr	r3, [pc, #416]	; (800e7d8 <tcp_process+0x2ac>)
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	2200      	movs	r2, #0
 800e648:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f001 fc2f 	bl	800feb0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	7d1b      	ldrb	r3, [r3, #20]
 800e656:	3b02      	subs	r3, #2
 800e658:	2b07      	cmp	r3, #7
 800e65a:	f200 8337 	bhi.w	800eccc <tcp_process+0x7a0>
 800e65e:	a201      	add	r2, pc, #4	; (adr r2, 800e664 <tcp_process+0x138>)
 800e660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e664:	0800e685 	.word	0x0800e685
 800e668:	0800e8b5 	.word	0x0800e8b5
 800e66c:	0800ea2d 	.word	0x0800ea2d
 800e670:	0800ea57 	.word	0x0800ea57
 800e674:	0800eb7b 	.word	0x0800eb7b
 800e678:	0800ea2d 	.word	0x0800ea2d
 800e67c:	0800ec07 	.word	0x0800ec07
 800e680:	0800ec97 	.word	0x0800ec97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e684:	4b4f      	ldr	r3, [pc, #316]	; (800e7c4 <tcp_process+0x298>)
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	f003 0310 	and.w	r3, r3, #16
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f000 80e4 	beq.w	800e85a <tcp_process+0x32e>
 800e692:	4b4c      	ldr	r3, [pc, #304]	; (800e7c4 <tcp_process+0x298>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	f003 0302 	and.w	r3, r3, #2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	f000 80dd 	beq.w	800e85a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a4:	1c5a      	adds	r2, r3, #1
 800e6a6:	4b48      	ldr	r3, [pc, #288]	; (800e7c8 <tcp_process+0x29c>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	f040 80d5 	bne.w	800e85a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e6b0:	4b46      	ldr	r3, [pc, #280]	; (800e7cc <tcp_process+0x2a0>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	1c5a      	adds	r2, r3, #1
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e6c2:	4b41      	ldr	r3, [pc, #260]	; (800e7c8 <tcp_process+0x29c>)
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e6ca:	4b44      	ldr	r3, [pc, #272]	; (800e7dc <tcp_process+0x2b0>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	89db      	ldrh	r3, [r3, #14]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e6e4:	4b39      	ldr	r3, [pc, #228]	; (800e7cc <tcp_process+0x2a0>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	1e5a      	subs	r2, r3, #1
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2204      	movs	r2, #4
 800e6f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f006 fc7f 	bl	8015000 <ip4_route>
 800e702:	4601      	mov	r1, r0
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	3304      	adds	r3, #4
 800e708:	461a      	mov	r2, r3
 800e70a:	4620      	mov	r0, r4
 800e70c:	f7ff f88c 	bl	800d828 <tcp_eff_send_mss_netif>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e71c:	009a      	lsls	r2, r3, #2
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e722:	005b      	lsls	r3, r3, #1
 800e724:	f241 111c 	movw	r1, #4380	; 0x111c
 800e728:	428b      	cmp	r3, r1
 800e72a:	bf38      	it	cc
 800e72c:	460b      	movcc	r3, r1
 800e72e:	429a      	cmp	r2, r3
 800e730:	d204      	bcs.n	800e73c <tcp_process+0x210>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e736:	009b      	lsls	r3, r3, #2
 800e738:	b29b      	uxth	r3, r3
 800e73a:	e00d      	b.n	800e758 <tcp_process+0x22c>
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e740:	005b      	lsls	r3, r3, #1
 800e742:	f241 121c 	movw	r2, #4380	; 0x111c
 800e746:	4293      	cmp	r3, r2
 800e748:	d904      	bls.n	800e754 <tcp_process+0x228>
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e74e:	005b      	lsls	r3, r3, #1
 800e750:	b29b      	uxth	r3, r3
 800e752:	e001      	b.n	800e758 <tcp_process+0x22c>
 800e754:	f241 131c 	movw	r3, #4380	; 0x111c
 800e758:	687a      	ldr	r2, [r7, #4]
 800e75a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e764:	2b00      	cmp	r3, #0
 800e766:	d106      	bne.n	800e776 <tcp_process+0x24a>
 800e768:	4b13      	ldr	r3, [pc, #76]	; (800e7b8 <tcp_process+0x28c>)
 800e76a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e76e:	491c      	ldr	r1, [pc, #112]	; (800e7e0 <tcp_process+0x2b4>)
 800e770:	4813      	ldr	r0, [pc, #76]	; (800e7c0 <tcp_process+0x294>)
 800e772:	f008 f841 	bl	80167f8 <iprintf>
        --pcb->snd_queuelen;
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e77c:	3b01      	subs	r3, #1
 800e77e:	b29a      	uxth	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e78a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e78c:	69fb      	ldr	r3, [r7, #28]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d12a      	bne.n	800e7e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e796:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e798:	69fb      	ldr	r3, [r7, #28]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d106      	bne.n	800e7ac <tcp_process+0x280>
 800e79e:	4b06      	ldr	r3, [pc, #24]	; (800e7b8 <tcp_process+0x28c>)
 800e7a0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e7a4:	490f      	ldr	r1, [pc, #60]	; (800e7e4 <tcp_process+0x2b8>)
 800e7a6:	4806      	ldr	r0, [pc, #24]	; (800e7c0 <tcp_process+0x294>)
 800e7a8:	f008 f826 	bl	80167f8 <iprintf>
          pcb->unsent = rseg->next;
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	681a      	ldr	r2, [r3, #0]
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	66da      	str	r2, [r3, #108]	; 0x6c
 800e7b4:	e01c      	b.n	800e7f0 <tcp_process+0x2c4>
 800e7b6:	bf00      	nop
 800e7b8:	08018a80 	.word	0x08018a80
 800e7bc:	08018cb8 	.word	0x08018cb8
 800e7c0:	08018acc 	.word	0x08018acc
 800e7c4:	2000de78 	.word	0x2000de78
 800e7c8:	2000de70 	.word	0x2000de70
 800e7cc:	2000de6c 	.word	0x2000de6c
 800e7d0:	08018cd4 	.word	0x08018cd4
 800e7d4:	2000de79 	.word	0x2000de79
 800e7d8:	2000de34 	.word	0x2000de34
 800e7dc:	2000de5c 	.word	0x2000de5c
 800e7e0:	08018cf4 	.word	0x08018cf4
 800e7e4:	08018d0c 	.word	0x08018d0c
        } else {
          pcb->unacked = rseg->next;
 800e7e8:	69fb      	ldr	r3, [r7, #28]
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e7f0:	69f8      	ldr	r0, [r7, #28]
 800e7f2:	f7fe fd22 	bl	800d23a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d104      	bne.n	800e808 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e804:	861a      	strh	r2, [r3, #48]	; 0x30
 800e806:	e006      	b.n	800e816 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2200      	movs	r2, #0
 800e80c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d00a      	beq.n	800e836 <tcp_process+0x30a>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	6910      	ldr	r0, [r2, #16]
 800e82a:	2200      	movs	r2, #0
 800e82c:	6879      	ldr	r1, [r7, #4]
 800e82e:	4798      	blx	r3
 800e830:	4603      	mov	r3, r0
 800e832:	76bb      	strb	r3, [r7, #26]
 800e834:	e001      	b.n	800e83a <tcp_process+0x30e>
 800e836:	2300      	movs	r3, #0
 800e838:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e83a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e83e:	f113 0f0d 	cmn.w	r3, #13
 800e842:	d102      	bne.n	800e84a <tcp_process+0x31e>
          return ERR_ABRT;
 800e844:	f06f 030c 	mvn.w	r3, #12
 800e848:	e250      	b.n	800ecec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	8b5b      	ldrh	r3, [r3, #26]
 800e84e:	f043 0302 	orr.w	r3, r3, #2
 800e852:	b29a      	uxth	r2, r3
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e858:	e23a      	b.n	800ecd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e85a:	4b98      	ldr	r3, [pc, #608]	; (800eabc <tcp_process+0x590>)
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	f003 0310 	and.w	r3, r3, #16
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 8234 	beq.w	800ecd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e868:	4b95      	ldr	r3, [pc, #596]	; (800eac0 <tcp_process+0x594>)
 800e86a:	6819      	ldr	r1, [r3, #0]
 800e86c:	4b95      	ldr	r3, [pc, #596]	; (800eac4 <tcp_process+0x598>)
 800e86e:	881b      	ldrh	r3, [r3, #0]
 800e870:	461a      	mov	r2, r3
 800e872:	4b95      	ldr	r3, [pc, #596]	; (800eac8 <tcp_process+0x59c>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e878:	4b94      	ldr	r3, [pc, #592]	; (800eacc <tcp_process+0x5a0>)
 800e87a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e87c:	885b      	ldrh	r3, [r3, #2]
 800e87e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e880:	4a92      	ldr	r2, [pc, #584]	; (800eacc <tcp_process+0x5a0>)
 800e882:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e884:	8812      	ldrh	r2, [r2, #0]
 800e886:	b292      	uxth	r2, r2
 800e888:	9202      	str	r2, [sp, #8]
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	4b90      	ldr	r3, [pc, #576]	; (800ead0 <tcp_process+0x5a4>)
 800e88e:	9300      	str	r3, [sp, #0]
 800e890:	4b90      	ldr	r3, [pc, #576]	; (800ead4 <tcp_process+0x5a8>)
 800e892:	4602      	mov	r2, r0
 800e894:	6878      	ldr	r0, [r7, #4]
 800e896:	f002 fc85 	bl	80111a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e8a0:	2b05      	cmp	r3, #5
 800e8a2:	f200 8215 	bhi.w	800ecd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f002 fa51 	bl	8010d54 <tcp_rexmit_rto>
      break;
 800e8b2:	e20d      	b.n	800ecd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e8b4:	4b81      	ldr	r3, [pc, #516]	; (800eabc <tcp_process+0x590>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0310 	and.w	r3, r3, #16
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 80a1 	beq.w	800ea04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e8c2:	4b7f      	ldr	r3, [pc, #508]	; (800eac0 <tcp_process+0x594>)
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	db7e      	blt.n	800e9d0 <tcp_process+0x4a4>
 800e8d2:	4b7b      	ldr	r3, [pc, #492]	; (800eac0 <tcp_process+0x594>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	dc77      	bgt.n	800e9d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2204      	movs	r2, #4
 800e8e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d102      	bne.n	800e8f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e8ee:	23fa      	movs	r3, #250	; 0xfa
 800e8f0:	76bb      	strb	r3, [r7, #26]
 800e8f2:	e01d      	b.n	800e930 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8f8:	699b      	ldr	r3, [r3, #24]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d106      	bne.n	800e90c <tcp_process+0x3e0>
 800e8fe:	4b76      	ldr	r3, [pc, #472]	; (800ead8 <tcp_process+0x5ac>)
 800e900:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e904:	4975      	ldr	r1, [pc, #468]	; (800eadc <tcp_process+0x5b0>)
 800e906:	4876      	ldr	r0, [pc, #472]	; (800eae0 <tcp_process+0x5b4>)
 800e908:	f007 ff76 	bl	80167f8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00a      	beq.n	800e92c <tcp_process+0x400>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e91a:	699b      	ldr	r3, [r3, #24]
 800e91c:	687a      	ldr	r2, [r7, #4]
 800e91e:	6910      	ldr	r0, [r2, #16]
 800e920:	2200      	movs	r2, #0
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	4798      	blx	r3
 800e926:	4603      	mov	r3, r0
 800e928:	76bb      	strb	r3, [r7, #26]
 800e92a:	e001      	b.n	800e930 <tcp_process+0x404>
 800e92c:	23f0      	movs	r3, #240	; 0xf0
 800e92e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e930:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00a      	beq.n	800e94e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e938:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e93c:	f113 0f0d 	cmn.w	r3, #13
 800e940:	d002      	beq.n	800e948 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f7fd ff8e 	bl	800c864 <tcp_abort>
            }
            return ERR_ABRT;
 800e948:	f06f 030c 	mvn.w	r3, #12
 800e94c:	e1ce      	b.n	800ecec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f000 fae0 	bl	800ef14 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e954:	4b63      	ldr	r3, [pc, #396]	; (800eae4 <tcp_process+0x5b8>)
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d005      	beq.n	800e968 <tcp_process+0x43c>
            recv_acked--;
 800e95c:	4b61      	ldr	r3, [pc, #388]	; (800eae4 <tcp_process+0x5b8>)
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	3b01      	subs	r3, #1
 800e962:	b29a      	uxth	r2, r3
 800e964:	4b5f      	ldr	r3, [pc, #380]	; (800eae4 <tcp_process+0x5b8>)
 800e966:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e96c:	009a      	lsls	r2, r3, #2
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e972:	005b      	lsls	r3, r3, #1
 800e974:	f241 111c 	movw	r1, #4380	; 0x111c
 800e978:	428b      	cmp	r3, r1
 800e97a:	bf38      	it	cc
 800e97c:	460b      	movcc	r3, r1
 800e97e:	429a      	cmp	r2, r3
 800e980:	d204      	bcs.n	800e98c <tcp_process+0x460>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e986:	009b      	lsls	r3, r3, #2
 800e988:	b29b      	uxth	r3, r3
 800e98a:	e00d      	b.n	800e9a8 <tcp_process+0x47c>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e990:	005b      	lsls	r3, r3, #1
 800e992:	f241 121c 	movw	r2, #4380	; 0x111c
 800e996:	4293      	cmp	r3, r2
 800e998:	d904      	bls.n	800e9a4 <tcp_process+0x478>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e99e:	005b      	lsls	r3, r3, #1
 800e9a0:	b29b      	uxth	r3, r3
 800e9a2:	e001      	b.n	800e9a8 <tcp_process+0x47c>
 800e9a4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e9a8:	687a      	ldr	r2, [r7, #4]
 800e9aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e9ae:	4b4e      	ldr	r3, [pc, #312]	; (800eae8 <tcp_process+0x5bc>)
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	f003 0320 	and.w	r3, r3, #32
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d037      	beq.n	800ea2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	8b5b      	ldrh	r3, [r3, #26]
 800e9be:	f043 0302 	orr.w	r3, r3, #2
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	2207      	movs	r2, #7
 800e9cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e9ce:	e02c      	b.n	800ea2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9d0:	4b3b      	ldr	r3, [pc, #236]	; (800eac0 <tcp_process+0x594>)
 800e9d2:	6819      	ldr	r1, [r3, #0]
 800e9d4:	4b3b      	ldr	r3, [pc, #236]	; (800eac4 <tcp_process+0x598>)
 800e9d6:	881b      	ldrh	r3, [r3, #0]
 800e9d8:	461a      	mov	r2, r3
 800e9da:	4b3b      	ldr	r3, [pc, #236]	; (800eac8 <tcp_process+0x59c>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e0:	4b3a      	ldr	r3, [pc, #232]	; (800eacc <tcp_process+0x5a0>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9e4:	885b      	ldrh	r3, [r3, #2]
 800e9e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9e8:	4a38      	ldr	r2, [pc, #224]	; (800eacc <tcp_process+0x5a0>)
 800e9ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ec:	8812      	ldrh	r2, [r2, #0]
 800e9ee:	b292      	uxth	r2, r2
 800e9f0:	9202      	str	r2, [sp, #8]
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	4b36      	ldr	r3, [pc, #216]	; (800ead0 <tcp_process+0x5a4>)
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	4b36      	ldr	r3, [pc, #216]	; (800ead4 <tcp_process+0x5a8>)
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f002 fbd1 	bl	80111a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ea02:	e167      	b.n	800ecd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ea04:	4b2d      	ldr	r3, [pc, #180]	; (800eabc <tcp_process+0x590>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	f003 0302 	and.w	r3, r3, #2
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	f000 8161 	beq.w	800ecd4 <tcp_process+0x7a8>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea16:	1e5a      	subs	r2, r3, #1
 800ea18:	4b2b      	ldr	r3, [pc, #172]	; (800eac8 <tcp_process+0x59c>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	429a      	cmp	r2, r3
 800ea1e:	f040 8159 	bne.w	800ecd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f002 f9b8 	bl	8010d98 <tcp_rexmit>
      break;
 800ea28:	e154      	b.n	800ecd4 <tcp_process+0x7a8>
 800ea2a:	e153      	b.n	800ecd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fa71 	bl	800ef14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ea32:	4b2d      	ldr	r3, [pc, #180]	; (800eae8 <tcp_process+0x5bc>)
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	f003 0320 	and.w	r3, r3, #32
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 814c 	beq.w	800ecd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	8b5b      	ldrh	r3, [r3, #26]
 800ea44:	f043 0302 	orr.w	r3, r3, #2
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2207      	movs	r2, #7
 800ea52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ea54:	e140      	b.n	800ecd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ea56:	6878      	ldr	r0, [r7, #4]
 800ea58:	f000 fa5c 	bl	800ef14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ea5c:	4b22      	ldr	r3, [pc, #136]	; (800eae8 <tcp_process+0x5bc>)
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	f003 0320 	and.w	r3, r3, #32
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d071      	beq.n	800eb4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea68:	4b14      	ldr	r3, [pc, #80]	; (800eabc <tcp_process+0x590>)
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	f003 0310 	and.w	r3, r3, #16
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d060      	beq.n	800eb36 <tcp_process+0x60a>
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea78:	4b11      	ldr	r3, [pc, #68]	; (800eac0 <tcp_process+0x594>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d15a      	bne.n	800eb36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d156      	bne.n	800eb36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	8b5b      	ldrh	r3, [r3, #26]
 800ea8c:	f043 0302 	orr.w	r3, r3, #2
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7fe fdbc 	bl	800d614 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ea9c:	4b13      	ldr	r3, [pc, #76]	; (800eaec <tcp_process+0x5c0>)
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d105      	bne.n	800eab2 <tcp_process+0x586>
 800eaa6:	4b11      	ldr	r3, [pc, #68]	; (800eaec <tcp_process+0x5c0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	4a0f      	ldr	r2, [pc, #60]	; (800eaec <tcp_process+0x5c0>)
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	e02e      	b.n	800eb10 <tcp_process+0x5e4>
 800eab2:	4b0e      	ldr	r3, [pc, #56]	; (800eaec <tcp_process+0x5c0>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	617b      	str	r3, [r7, #20]
 800eab8:	e027      	b.n	800eb0a <tcp_process+0x5de>
 800eaba:	bf00      	nop
 800eabc:	2000de78 	.word	0x2000de78
 800eac0:	2000de70 	.word	0x2000de70
 800eac4:	2000de76 	.word	0x2000de76
 800eac8:	2000de6c 	.word	0x2000de6c
 800eacc:	2000de5c 	.word	0x2000de5c
 800ead0:	2000a6d0 	.word	0x2000a6d0
 800ead4:	2000a6d4 	.word	0x2000a6d4
 800ead8:	08018a80 	.word	0x08018a80
 800eadc:	08018d20 	.word	0x08018d20
 800eae0:	08018acc 	.word	0x08018acc
 800eae4:	2000de74 	.word	0x2000de74
 800eae8:	2000de79 	.word	0x2000de79
 800eaec:	2000de40 	.word	0x2000de40
 800eaf0:	697b      	ldr	r3, [r7, #20]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d104      	bne.n	800eb04 <tcp_process+0x5d8>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68da      	ldr	r2, [r3, #12]
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	60da      	str	r2, [r3, #12]
 800eb02:	e005      	b.n	800eb10 <tcp_process+0x5e4>
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	68db      	ldr	r3, [r3, #12]
 800eb08:	617b      	str	r3, [r7, #20]
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d1ef      	bne.n	800eaf0 <tcp_process+0x5c4>
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2200      	movs	r2, #0
 800eb14:	60da      	str	r2, [r3, #12]
 800eb16:	4b77      	ldr	r3, [pc, #476]	; (800ecf4 <tcp_process+0x7c8>)
 800eb18:	2201      	movs	r2, #1
 800eb1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	220a      	movs	r2, #10
 800eb20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eb22:	4b75      	ldr	r3, [pc, #468]	; (800ecf8 <tcp_process+0x7cc>)
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	60da      	str	r2, [r3, #12]
 800eb2a:	4a73      	ldr	r2, [pc, #460]	; (800ecf8 <tcp_process+0x7cc>)
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	6013      	str	r3, [r2, #0]
 800eb30:	f002 fcfa 	bl	8011528 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eb34:	e0d2      	b.n	800ecdc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	8b5b      	ldrh	r3, [r3, #26]
 800eb3a:	f043 0302 	orr.w	r3, r3, #2
 800eb3e:	b29a      	uxth	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2208      	movs	r2, #8
 800eb48:	751a      	strb	r2, [r3, #20]
      break;
 800eb4a:	e0c7      	b.n	800ecdc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb4c:	4b6b      	ldr	r3, [pc, #428]	; (800ecfc <tcp_process+0x7d0>)
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	f003 0310 	and.w	r3, r3, #16
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	f000 80c1 	beq.w	800ecdc <tcp_process+0x7b0>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb5e:	4b68      	ldr	r3, [pc, #416]	; (800ed00 <tcp_process+0x7d4>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	f040 80ba 	bne.w	800ecdc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	f040 80b5 	bne.w	800ecdc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2206      	movs	r2, #6
 800eb76:	751a      	strb	r2, [r3, #20]
      break;
 800eb78:	e0b0      	b.n	800ecdc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 f9ca 	bl	800ef14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb80:	4b60      	ldr	r3, [pc, #384]	; (800ed04 <tcp_process+0x7d8>)
 800eb82:	781b      	ldrb	r3, [r3, #0]
 800eb84:	f003 0320 	and.w	r3, r3, #32
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 80a9 	beq.w	800ece0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	8b5b      	ldrh	r3, [r3, #26]
 800eb92:	f043 0302 	orr.w	r3, r3, #2
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f7fe fd39 	bl	800d614 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eba2:	4b59      	ldr	r3, [pc, #356]	; (800ed08 <tcp_process+0x7dc>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d105      	bne.n	800ebb8 <tcp_process+0x68c>
 800ebac:	4b56      	ldr	r3, [pc, #344]	; (800ed08 <tcp_process+0x7dc>)
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	4a55      	ldr	r2, [pc, #340]	; (800ed08 <tcp_process+0x7dc>)
 800ebb4:	6013      	str	r3, [r2, #0]
 800ebb6:	e013      	b.n	800ebe0 <tcp_process+0x6b4>
 800ebb8:	4b53      	ldr	r3, [pc, #332]	; (800ed08 <tcp_process+0x7dc>)
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	613b      	str	r3, [r7, #16]
 800ebbe:	e00c      	b.n	800ebda <tcp_process+0x6ae>
 800ebc0:	693b      	ldr	r3, [r7, #16]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d104      	bne.n	800ebd4 <tcp_process+0x6a8>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68da      	ldr	r2, [r3, #12]
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	60da      	str	r2, [r3, #12]
 800ebd2:	e005      	b.n	800ebe0 <tcp_process+0x6b4>
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	68db      	ldr	r3, [r3, #12]
 800ebd8:	613b      	str	r3, [r7, #16]
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d1ef      	bne.n	800ebc0 <tcp_process+0x694>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	60da      	str	r2, [r3, #12]
 800ebe6:	4b43      	ldr	r3, [pc, #268]	; (800ecf4 <tcp_process+0x7c8>)
 800ebe8:	2201      	movs	r2, #1
 800ebea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	220a      	movs	r2, #10
 800ebf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebf2:	4b41      	ldr	r3, [pc, #260]	; (800ecf8 <tcp_process+0x7cc>)
 800ebf4:	681a      	ldr	r2, [r3, #0]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	60da      	str	r2, [r3, #12]
 800ebfa:	4a3f      	ldr	r2, [pc, #252]	; (800ecf8 <tcp_process+0x7cc>)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6013      	str	r3, [r2, #0]
 800ec00:	f002 fc92 	bl	8011528 <tcp_timer_needed>
      }
      break;
 800ec04:	e06c      	b.n	800ece0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f000 f984 	bl	800ef14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec0c:	4b3b      	ldr	r3, [pc, #236]	; (800ecfc <tcp_process+0x7d0>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	f003 0310 	and.w	r3, r3, #16
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d065      	beq.n	800ece4 <tcp_process+0x7b8>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec1c:	4b38      	ldr	r3, [pc, #224]	; (800ed00 <tcp_process+0x7d4>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	429a      	cmp	r2, r3
 800ec22:	d15f      	bne.n	800ece4 <tcp_process+0x7b8>
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d15b      	bne.n	800ece4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7fe fcf1 	bl	800d614 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ec32:	4b35      	ldr	r3, [pc, #212]	; (800ed08 <tcp_process+0x7dc>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	d105      	bne.n	800ec48 <tcp_process+0x71c>
 800ec3c:	4b32      	ldr	r3, [pc, #200]	; (800ed08 <tcp_process+0x7dc>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	4a31      	ldr	r2, [pc, #196]	; (800ed08 <tcp_process+0x7dc>)
 800ec44:	6013      	str	r3, [r2, #0]
 800ec46:	e013      	b.n	800ec70 <tcp_process+0x744>
 800ec48:	4b2f      	ldr	r3, [pc, #188]	; (800ed08 <tcp_process+0x7dc>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]
 800ec4e:	e00c      	b.n	800ec6a <tcp_process+0x73e>
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	68db      	ldr	r3, [r3, #12]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d104      	bne.n	800ec64 <tcp_process+0x738>
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	68da      	ldr	r2, [r3, #12]
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	60da      	str	r2, [r3, #12]
 800ec62:	e005      	b.n	800ec70 <tcp_process+0x744>
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	68db      	ldr	r3, [r3, #12]
 800ec68:	60fb      	str	r3, [r7, #12]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d1ef      	bne.n	800ec50 <tcp_process+0x724>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2200      	movs	r2, #0
 800ec74:	60da      	str	r2, [r3, #12]
 800ec76:	4b1f      	ldr	r3, [pc, #124]	; (800ecf4 <tcp_process+0x7c8>)
 800ec78:	2201      	movs	r2, #1
 800ec7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	220a      	movs	r2, #10
 800ec80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec82:	4b1d      	ldr	r3, [pc, #116]	; (800ecf8 <tcp_process+0x7cc>)
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	60da      	str	r2, [r3, #12]
 800ec8a:	4a1b      	ldr	r2, [pc, #108]	; (800ecf8 <tcp_process+0x7cc>)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6013      	str	r3, [r2, #0]
 800ec90:	f002 fc4a 	bl	8011528 <tcp_timer_needed>
      }
      break;
 800ec94:	e026      	b.n	800ece4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f93c 	bl	800ef14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec9c:	4b17      	ldr	r3, [pc, #92]	; (800ecfc <tcp_process+0x7d0>)
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	f003 0310 	and.w	r3, r3, #16
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01f      	beq.n	800ece8 <tcp_process+0x7bc>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ecac:	4b14      	ldr	r3, [pc, #80]	; (800ed00 <tcp_process+0x7d4>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d119      	bne.n	800ece8 <tcp_process+0x7bc>
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d115      	bne.n	800ece8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ecbc:	4b11      	ldr	r3, [pc, #68]	; (800ed04 <tcp_process+0x7d8>)
 800ecbe:	781b      	ldrb	r3, [r3, #0]
 800ecc0:	f043 0310 	orr.w	r3, r3, #16
 800ecc4:	b2da      	uxtb	r2, r3
 800ecc6:	4b0f      	ldr	r3, [pc, #60]	; (800ed04 <tcp_process+0x7d8>)
 800ecc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ecca:	e00d      	b.n	800ece8 <tcp_process+0x7bc>
    default:
      break;
 800eccc:	bf00      	nop
 800ecce:	e00c      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ecd0:	bf00      	nop
 800ecd2:	e00a      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ecd4:	bf00      	nop
 800ecd6:	e008      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ecd8:	bf00      	nop
 800ecda:	e006      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ecdc:	bf00      	nop
 800ecde:	e004      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ece0:	bf00      	nop
 800ece2:	e002      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ece4:	bf00      	nop
 800ece6:	e000      	b.n	800ecea <tcp_process+0x7be>
      break;
 800ece8:	bf00      	nop
  }
  return ERR_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3724      	adds	r7, #36	; 0x24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd90      	pop	{r4, r7, pc}
 800ecf4:	2000de48 	.word	0x2000de48
 800ecf8:	2000de44 	.word	0x2000de44
 800ecfc:	2000de78 	.word	0x2000de78
 800ed00:	2000de70 	.word	0x2000de70
 800ed04:	2000de79 	.word	0x2000de79
 800ed08:	2000de40 	.word	0x2000de40

0800ed0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ed0c:	b590      	push	{r4, r7, lr}
 800ed0e:	b085      	sub	sp, #20
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d106      	bne.n	800ed2a <tcp_oos_insert_segment+0x1e>
 800ed1c:	4b3b      	ldr	r3, [pc, #236]	; (800ee0c <tcp_oos_insert_segment+0x100>)
 800ed1e:	f240 421f 	movw	r2, #1055	; 0x41f
 800ed22:	493b      	ldr	r1, [pc, #236]	; (800ee10 <tcp_oos_insert_segment+0x104>)
 800ed24:	483b      	ldr	r0, [pc, #236]	; (800ee14 <tcp_oos_insert_segment+0x108>)
 800ed26:	f007 fd67 	bl	80167f8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	68db      	ldr	r3, [r3, #12]
 800ed2e:	899b      	ldrh	r3, [r3, #12]
 800ed30:	b29b      	uxth	r3, r3
 800ed32:	4618      	mov	r0, r3
 800ed34:	f7fb fc5c 	bl	800a5f0 <lwip_htons>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d028      	beq.n	800ed96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ed44:	6838      	ldr	r0, [r7, #0]
 800ed46:	f7fe fa63 	bl	800d210 <tcp_segs_free>
    next = NULL;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	603b      	str	r3, [r7, #0]
 800ed4e:	e056      	b.n	800edfe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	899b      	ldrh	r3, [r3, #12]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fb fc49 	bl	800a5f0 <lwip_htons>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	f003 0301 	and.w	r3, r3, #1
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00d      	beq.n	800ed86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	68db      	ldr	r3, [r3, #12]
 800ed6e:	899b      	ldrh	r3, [r3, #12]
 800ed70:	b29c      	uxth	r4, r3
 800ed72:	2001      	movs	r0, #1
 800ed74:	f7fb fc3c 	bl	800a5f0 <lwip_htons>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	4322      	orrs	r2, r4
 800ed82:	b292      	uxth	r2, r2
 800ed84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ed90:	68f8      	ldr	r0, [r7, #12]
 800ed92:	f7fe fa52 	bl	800d23a <tcp_seg_free>
    while (next &&
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00e      	beq.n	800edba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	891b      	ldrh	r3, [r3, #8]
 800eda0:	461a      	mov	r2, r3
 800eda2:	4b1d      	ldr	r3, [pc, #116]	; (800ee18 <tcp_oos_insert_segment+0x10c>)
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	441a      	add	r2, r3
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	685b      	ldr	r3, [r3, #4]
 800edae:	6839      	ldr	r1, [r7, #0]
 800edb0:	8909      	ldrh	r1, [r1, #8]
 800edb2:	440b      	add	r3, r1
 800edb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	daca      	bge.n	800ed50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d01e      	beq.n	800edfe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	891b      	ldrh	r3, [r3, #8]
 800edc4:	461a      	mov	r2, r3
 800edc6:	4b14      	ldr	r3, [pc, #80]	; (800ee18 <tcp_oos_insert_segment+0x10c>)
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	441a      	add	r2, r3
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	dd12      	ble.n	800edfe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	b29a      	uxth	r2, r3
 800ede0:	4b0d      	ldr	r3, [pc, #52]	; (800ee18 <tcp_oos_insert_segment+0x10c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	b29b      	uxth	r3, r3
 800ede6:	1ad3      	subs	r3, r2, r3
 800ede8:	b29a      	uxth	r2, r3
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	891b      	ldrh	r3, [r3, #8]
 800edf6:	4619      	mov	r1, r3
 800edf8:	4610      	mov	r0, r2
 800edfa:	f7fc fe09 	bl	800ba10 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	601a      	str	r2, [r3, #0]
}
 800ee04:	bf00      	nop
 800ee06:	3714      	adds	r7, #20
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd90      	pop	{r4, r7, pc}
 800ee0c:	08018a80 	.word	0x08018a80
 800ee10:	08018d40 	.word	0x08018d40
 800ee14:	08018acc 	.word	0x08018acc
 800ee18:	2000de6c 	.word	0x2000de6c

0800ee1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ee1c:	b5b0      	push	{r4, r5, r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	60f8      	str	r0, [r7, #12]
 800ee24:	60b9      	str	r1, [r7, #8]
 800ee26:	607a      	str	r2, [r7, #4]
 800ee28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ee2a:	e03e      	b.n	800eeaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	685b      	ldr	r3, [r3, #4]
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	f7fc fffc 	bl	800be38 <pbuf_clen>
 800ee40:	4603      	mov	r3, r0
 800ee42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee4a:	8a7a      	ldrh	r2, [r7, #18]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d906      	bls.n	800ee5e <tcp_free_acked_segments+0x42>
 800ee50:	4b2a      	ldr	r3, [pc, #168]	; (800eefc <tcp_free_acked_segments+0xe0>)
 800ee52:	f240 4257 	movw	r2, #1111	; 0x457
 800ee56:	492a      	ldr	r1, [pc, #168]	; (800ef00 <tcp_free_acked_segments+0xe4>)
 800ee58:	482a      	ldr	r0, [pc, #168]	; (800ef04 <tcp_free_acked_segments+0xe8>)
 800ee5a:	f007 fccd 	bl	80167f8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ee64:	8a7b      	ldrh	r3, [r7, #18]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	b29a      	uxth	r2, r3
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	891a      	ldrh	r2, [r3, #8]
 800ee74:	4b24      	ldr	r3, [pc, #144]	; (800ef08 <tcp_free_acked_segments+0xec>)
 800ee76:	881b      	ldrh	r3, [r3, #0]
 800ee78:	4413      	add	r3, r2
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	4b22      	ldr	r3, [pc, #136]	; (800ef08 <tcp_free_acked_segments+0xec>)
 800ee7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ee80:	6978      	ldr	r0, [r7, #20]
 800ee82:	f7fe f9da 	bl	800d23a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d00c      	beq.n	800eeaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ee90:	68bb      	ldr	r3, [r7, #8]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d109      	bne.n	800eeaa <tcp_free_acked_segments+0x8e>
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d106      	bne.n	800eeaa <tcp_free_acked_segments+0x8e>
 800ee9c:	4b17      	ldr	r3, [pc, #92]	; (800eefc <tcp_free_acked_segments+0xe0>)
 800ee9e:	f240 4261 	movw	r2, #1121	; 0x461
 800eea2:	491a      	ldr	r1, [pc, #104]	; (800ef0c <tcp_free_acked_segments+0xf0>)
 800eea4:	4817      	ldr	r0, [pc, #92]	; (800ef04 <tcp_free_acked_segments+0xe8>)
 800eea6:	f007 fca7 	bl	80167f8 <iprintf>
  while (seg_list != NULL &&
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d020      	beq.n	800eef2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eeb0:	68bb      	ldr	r3, [r7, #8]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	685b      	ldr	r3, [r3, #4]
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fb fbaf 	bl	800a61a <lwip_htonl>
 800eebc:	4604      	mov	r4, r0
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	891b      	ldrh	r3, [r3, #8]
 800eec2:	461d      	mov	r5, r3
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	68db      	ldr	r3, [r3, #12]
 800eec8:	899b      	ldrh	r3, [r3, #12]
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fb fb8f 	bl	800a5f0 <lwip_htons>
 800eed2:	4603      	mov	r3, r0
 800eed4:	b2db      	uxtb	r3, r3
 800eed6:	f003 0303 	and.w	r3, r3, #3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d001      	beq.n	800eee2 <tcp_free_acked_segments+0xc6>
 800eede:	2301      	movs	r3, #1
 800eee0:	e000      	b.n	800eee4 <tcp_free_acked_segments+0xc8>
 800eee2:	2300      	movs	r3, #0
 800eee4:	442b      	add	r3, r5
 800eee6:	18e2      	adds	r2, r4, r3
 800eee8:	4b09      	ldr	r3, [pc, #36]	; (800ef10 <tcp_free_acked_segments+0xf4>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	dd9c      	ble.n	800ee2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800eef2:	68bb      	ldr	r3, [r7, #8]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3718      	adds	r7, #24
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bdb0      	pop	{r4, r5, r7, pc}
 800eefc:	08018a80 	.word	0x08018a80
 800ef00:	08018d68 	.word	0x08018d68
 800ef04:	08018acc 	.word	0x08018acc
 800ef08:	2000de74 	.word	0x2000de74
 800ef0c:	08018d90 	.word	0x08018d90
 800ef10:	2000de70 	.word	0x2000de70

0800ef14 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ef14:	b5b0      	push	{r4, r5, r7, lr}
 800ef16:	b094      	sub	sp, #80	; 0x50
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d106      	bne.n	800ef34 <tcp_receive+0x20>
 800ef26:	4b91      	ldr	r3, [pc, #580]	; (800f16c <tcp_receive+0x258>)
 800ef28:	f240 427b 	movw	r2, #1147	; 0x47b
 800ef2c:	4990      	ldr	r1, [pc, #576]	; (800f170 <tcp_receive+0x25c>)
 800ef2e:	4891      	ldr	r0, [pc, #580]	; (800f174 <tcp_receive+0x260>)
 800ef30:	f007 fc62 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	7d1b      	ldrb	r3, [r3, #20]
 800ef38:	2b03      	cmp	r3, #3
 800ef3a:	d806      	bhi.n	800ef4a <tcp_receive+0x36>
 800ef3c:	4b8b      	ldr	r3, [pc, #556]	; (800f16c <tcp_receive+0x258>)
 800ef3e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ef42:	498d      	ldr	r1, [pc, #564]	; (800f178 <tcp_receive+0x264>)
 800ef44:	488b      	ldr	r0, [pc, #556]	; (800f174 <tcp_receive+0x260>)
 800ef46:	f007 fc57 	bl	80167f8 <iprintf>

  if (flags & TCP_ACK) {
 800ef4a:	4b8c      	ldr	r3, [pc, #560]	; (800f17c <tcp_receive+0x268>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 0310 	and.w	r3, r3, #16
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f000 8264 	beq.w	800f420 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef5e:	461a      	mov	r2, r3
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef64:	4413      	add	r3, r2
 800ef66:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef6c:	4b84      	ldr	r3, [pc, #528]	; (800f180 <tcp_receive+0x26c>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	1ad3      	subs	r3, r2, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	db1b      	blt.n	800efae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef7a:	4b81      	ldr	r3, [pc, #516]	; (800f180 <tcp_receive+0x26c>)
 800ef7c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ef7e:	429a      	cmp	r2, r3
 800ef80:	d106      	bne.n	800ef90 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef86:	4b7f      	ldr	r3, [pc, #508]	; (800f184 <tcp_receive+0x270>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	1ad3      	subs	r3, r2, r3
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	db0e      	blt.n	800efae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef94:	4b7b      	ldr	r3, [pc, #492]	; (800f184 <tcp_receive+0x270>)
 800ef96:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef98:	429a      	cmp	r2, r3
 800ef9a:	d125      	bne.n	800efe8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef9c:	4b7a      	ldr	r3, [pc, #488]	; (800f188 <tcp_receive+0x274>)
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	89db      	ldrh	r3, [r3, #14]
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efaa:	429a      	cmp	r2, r3
 800efac:	d91c      	bls.n	800efe8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800efae:	4b76      	ldr	r3, [pc, #472]	; (800f188 <tcp_receive+0x274>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	89db      	ldrh	r3, [r3, #14]
 800efb4:	b29a      	uxth	r2, r3
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800efc8:	429a      	cmp	r2, r3
 800efca:	d205      	bcs.n	800efd8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800efd8:	4b69      	ldr	r3, [pc, #420]	; (800f180 <tcp_receive+0x26c>)
 800efda:	681a      	ldr	r2, [r3, #0]
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800efe0:	4b68      	ldr	r3, [pc, #416]	; (800f184 <tcp_receive+0x270>)
 800efe2:	681a      	ldr	r2, [r3, #0]
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800efe8:	4b66      	ldr	r3, [pc, #408]	; (800f184 <tcp_receive+0x270>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eff0:	1ad3      	subs	r3, r2, r3
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	dc58      	bgt.n	800f0a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800eff6:	4b65      	ldr	r3, [pc, #404]	; (800f18c <tcp_receive+0x278>)
 800eff8:	881b      	ldrh	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d14b      	bne.n	800f096 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f008:	4413      	add	r3, r2
 800f00a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d142      	bne.n	800f096 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f016:	2b00      	cmp	r3, #0
 800f018:	db3d      	blt.n	800f096 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f01e:	4b59      	ldr	r3, [pc, #356]	; (800f184 <tcp_receive+0x270>)
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	429a      	cmp	r2, r3
 800f024:	d137      	bne.n	800f096 <tcp_receive+0x182>
              found_dupack = 1;
 800f026:	2301      	movs	r3, #1
 800f028:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f030:	2bff      	cmp	r3, #255	; 0xff
 800f032:	d007      	beq.n	800f044 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f03a:	3301      	adds	r3, #1
 800f03c:	b2da      	uxtb	r2, r3
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f04a:	2b03      	cmp	r3, #3
 800f04c:	d91b      	bls.n	800f086 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f058:	4413      	add	r3, r2
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f062:	429a      	cmp	r2, r3
 800f064:	d30a      	bcc.n	800f07c <tcp_receive+0x168>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f070:	4413      	add	r3, r2
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f07a:	e004      	b.n	800f086 <tcp_receive+0x172>
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f082:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f08c:	2b02      	cmp	r3, #2
 800f08e:	d902      	bls.n	800f096 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f001 feed 	bl	8010e70 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f096:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f098:	2b00      	cmp	r3, #0
 800f09a:	f040 8161 	bne.w	800f360 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f0a6:	e15b      	b.n	800f360 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f0a8:	4b36      	ldr	r3, [pc, #216]	; (800f184 <tcp_receive+0x270>)
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0b0:	1ad3      	subs	r3, r2, r3
 800f0b2:	3b01      	subs	r3, #1
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f2c0 814e 	blt.w	800f356 <tcp_receive+0x442>
 800f0ba:	4b32      	ldr	r3, [pc, #200]	; (800f184 <tcp_receive+0x270>)
 800f0bc:	681a      	ldr	r2, [r3, #0]
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	f300 8146 	bgt.w	800f356 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	8b5b      	ldrh	r3, [r3, #26]
 800f0ce:	f003 0304 	and.w	r3, r3, #4
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d010      	beq.n	800f0f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8b5b      	ldrh	r3, [r3, #26]
 800f0da:	f023 0304 	bic.w	r3, r3, #4
 800f0de:	b29a      	uxth	r2, r3
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f106:	10db      	asrs	r3, r3, #3
 800f108:	b21b      	sxth	r3, r3
 800f10a:	b29a      	uxth	r2, r3
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f112:	b29b      	uxth	r3, r3
 800f114:	4413      	add	r3, r2
 800f116:	b29b      	uxth	r3, r3
 800f118:	b21a      	sxth	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f120:	4b18      	ldr	r3, [pc, #96]	; (800f184 <tcp_receive+0x270>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	b29a      	uxth	r2, r3
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	1ad3      	subs	r3, r2, r3
 800f12e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f138:	4b12      	ldr	r3, [pc, #72]	; (800f184 <tcp_receive+0x270>)
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	7d1b      	ldrb	r3, [r3, #20]
 800f144:	2b03      	cmp	r3, #3
 800f146:	f240 8097 	bls.w	800f278 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f156:	429a      	cmp	r2, r3
 800f158:	d245      	bcs.n	800f1e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	8b5b      	ldrh	r3, [r3, #26]
 800f15e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f162:	2b00      	cmp	r3, #0
 800f164:	d014      	beq.n	800f190 <tcp_receive+0x27c>
 800f166:	2301      	movs	r3, #1
 800f168:	e013      	b.n	800f192 <tcp_receive+0x27e>
 800f16a:	bf00      	nop
 800f16c:	08018a80 	.word	0x08018a80
 800f170:	08018db0 	.word	0x08018db0
 800f174:	08018acc 	.word	0x08018acc
 800f178:	08018dcc 	.word	0x08018dcc
 800f17c:	2000de78 	.word	0x2000de78
 800f180:	2000de6c 	.word	0x2000de6c
 800f184:	2000de70 	.word	0x2000de70
 800f188:	2000de5c 	.word	0x2000de5c
 800f18c:	2000de76 	.word	0x2000de76
 800f190:	2302      	movs	r3, #2
 800f192:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f196:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f1a0:	fb12 f303 	smulbb	r3, r2, r3
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	bf28      	it	cs
 800f1ac:	4613      	movcs	r3, r2
 800f1ae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1b8:	4413      	add	r3, r2
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d309      	bcc.n	800f1da <tcp_receive+0x2c6>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f1cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f1ce:	4413      	add	r3, r2
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1d8:	e04e      	b.n	800f278 <tcp_receive+0x364>
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1e4:	e048      	b.n	800f278 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f1ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f1ee:	4413      	add	r3, r2
 800f1f0:	b29a      	uxth	r2, r3
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d309      	bcc.n	800f210 <tcp_receive+0x2fc>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f202:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f204:	4413      	add	r3, r2
 800f206:	b29a      	uxth	r2, r3
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f20e:	e004      	b.n	800f21a <tcp_receive+0x306>
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f216:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f226:	429a      	cmp	r2, r3
 800f228:	d326      	bcc.n	800f278 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	b29a      	uxth	r2, r3
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f24a:	4413      	add	r3, r2
 800f24c:	b29a      	uxth	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f254:	429a      	cmp	r2, r3
 800f256:	d30a      	bcc.n	800f26e <tcp_receive+0x35a>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f262:	4413      	add	r3, r2
 800f264:	b29a      	uxth	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f26c:	e004      	b.n	800f278 <tcp_receive+0x364>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f274:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f280:	4a98      	ldr	r2, [pc, #608]	; (800f4e4 <tcp_receive+0x5d0>)
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f7ff fdca 	bl	800ee1c <tcp_free_acked_segments>
 800f288:	4602      	mov	r2, r0
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f296:	4a94      	ldr	r2, [pc, #592]	; (800f4e8 <tcp_receive+0x5d4>)
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff fdbf 	bl	800ee1c <tcp_free_acked_segments>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d104      	bne.n	800f2b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2b2:	861a      	strh	r2, [r3, #48]	; 0x30
 800f2b4:	e002      	b.n	800f2bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d103      	bne.n	800f2d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f2d8:	4b84      	ldr	r3, [pc, #528]	; (800f4ec <tcp_receive+0x5d8>)
 800f2da:	881b      	ldrh	r3, [r3, #0]
 800f2dc:	4413      	add	r3, r2
 800f2de:	b29a      	uxth	r2, r3
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	8b5b      	ldrh	r3, [r3, #26]
 800f2ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d035      	beq.n	800f35e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d118      	bne.n	800f32c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00c      	beq.n	800f31c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fb f983 	bl	800a61a <lwip_htonl>
 800f314:	4603      	mov	r3, r0
 800f316:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc20      	bgt.n	800f35e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	8b5b      	ldrh	r3, [r3, #26]
 800f320:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f324:	b29a      	uxth	r2, r3
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f32a:	e018      	b.n	800f35e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f334:	68db      	ldr	r3, [r3, #12]
 800f336:	685b      	ldr	r3, [r3, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7fb f96e 	bl	800a61a <lwip_htonl>
 800f33e:	4603      	mov	r3, r0
 800f340:	1ae3      	subs	r3, r4, r3
 800f342:	2b00      	cmp	r3, #0
 800f344:	dc0b      	bgt.n	800f35e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	8b5b      	ldrh	r3, [r3, #26]
 800f34a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f34e:	b29a      	uxth	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f354:	e003      	b.n	800f35e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f001 ff76 	bl	8011248 <tcp_send_empty_ack>
 800f35c:	e000      	b.n	800f360 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f35e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f364:	2b00      	cmp	r3, #0
 800f366:	d05b      	beq.n	800f420 <tcp_receive+0x50c>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f36c:	4b60      	ldr	r3, [pc, #384]	; (800f4f0 <tcp_receive+0x5dc>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	1ad3      	subs	r3, r2, r3
 800f372:	2b00      	cmp	r3, #0
 800f374:	da54      	bge.n	800f420 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f376:	4b5f      	ldr	r3, [pc, #380]	; (800f4f4 <tcp_receive+0x5e0>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f380:	b29b      	uxth	r3, r3
 800f382:	1ad3      	subs	r3, r2, r3
 800f384:	b29b      	uxth	r3, r3
 800f386:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f38a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f394:	10db      	asrs	r3, r3, #3
 800f396:	b21b      	sxth	r3, r3
 800f398:	b29b      	uxth	r3, r3
 800f39a:	1ad3      	subs	r3, r2, r3
 800f39c:	b29b      	uxth	r3, r3
 800f39e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3a8:	b29a      	uxth	r2, r3
 800f3aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3ae:	4413      	add	r3, r2
 800f3b0:	b29b      	uxth	r3, r3
 800f3b2:	b21a      	sxth	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f3b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da05      	bge.n	800f3cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f3c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3c4:	425b      	negs	r3, r3
 800f3c6:	b29b      	uxth	r3, r3
 800f3c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f3cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f3d6:	109b      	asrs	r3, r3, #2
 800f3d8:	b21b      	sxth	r3, r3
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	1ad3      	subs	r3, r2, r3
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3f0:	4413      	add	r3, r2
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	b21a      	sxth	r2, r3
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f400:	10db      	asrs	r3, r3, #3
 800f402:	b21b      	sxth	r3, r3
 800f404:	b29a      	uxth	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f40c:	b29b      	uxth	r3, r3
 800f40e:	4413      	add	r3, r2
 800f410:	b29b      	uxth	r3, r3
 800f412:	b21a      	sxth	r2, r3
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f420:	4b35      	ldr	r3, [pc, #212]	; (800f4f8 <tcp_receive+0x5e4>)
 800f422:	881b      	ldrh	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	f000 84e2 	beq.w	800fdee <tcp_receive+0xeda>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	7d1b      	ldrb	r3, [r3, #20]
 800f42e:	2b06      	cmp	r3, #6
 800f430:	f200 84dd 	bhi.w	800fdee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f438:	4b30      	ldr	r3, [pc, #192]	; (800f4fc <tcp_receive+0x5e8>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	1ad3      	subs	r3, r2, r3
 800f43e:	3b01      	subs	r3, #1
 800f440:	2b00      	cmp	r3, #0
 800f442:	f2c0 808f 	blt.w	800f564 <tcp_receive+0x650>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f44a:	4b2b      	ldr	r3, [pc, #172]	; (800f4f8 <tcp_receive+0x5e4>)
 800f44c:	881b      	ldrh	r3, [r3, #0]
 800f44e:	4619      	mov	r1, r3
 800f450:	4b2a      	ldr	r3, [pc, #168]	; (800f4fc <tcp_receive+0x5e8>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	440b      	add	r3, r1
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	3301      	adds	r3, #1
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	f300 8082 	bgt.w	800f564 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f460:	4b27      	ldr	r3, [pc, #156]	; (800f500 <tcp_receive+0x5ec>)
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f46a:	4b24      	ldr	r3, [pc, #144]	; (800f4fc <tcp_receive+0x5e8>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	1ad3      	subs	r3, r2, r3
 800f470:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f472:	4b23      	ldr	r3, [pc, #140]	; (800f500 <tcp_receive+0x5ec>)
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d106      	bne.n	800f488 <tcp_receive+0x574>
 800f47a:	4b22      	ldr	r3, [pc, #136]	; (800f504 <tcp_receive+0x5f0>)
 800f47c:	f240 5294 	movw	r2, #1428	; 0x594
 800f480:	4921      	ldr	r1, [pc, #132]	; (800f508 <tcp_receive+0x5f4>)
 800f482:	4822      	ldr	r0, [pc, #136]	; (800f50c <tcp_receive+0x5f8>)
 800f484:	f007 f9b8 	bl	80167f8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f48e:	4293      	cmp	r3, r2
 800f490:	d906      	bls.n	800f4a0 <tcp_receive+0x58c>
 800f492:	4b1c      	ldr	r3, [pc, #112]	; (800f504 <tcp_receive+0x5f0>)
 800f494:	f240 5295 	movw	r2, #1429	; 0x595
 800f498:	491d      	ldr	r1, [pc, #116]	; (800f510 <tcp_receive+0x5fc>)
 800f49a:	481c      	ldr	r0, [pc, #112]	; (800f50c <tcp_receive+0x5f8>)
 800f49c:	f007 f9ac 	bl	80167f8 <iprintf>
      off = (u16_t)off32;
 800f4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f4a6:	4b16      	ldr	r3, [pc, #88]	; (800f500 <tcp_receive+0x5ec>)
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	891b      	ldrh	r3, [r3, #8]
 800f4ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d906      	bls.n	800f4c2 <tcp_receive+0x5ae>
 800f4b4:	4b13      	ldr	r3, [pc, #76]	; (800f504 <tcp_receive+0x5f0>)
 800f4b6:	f240 5297 	movw	r2, #1431	; 0x597
 800f4ba:	4916      	ldr	r1, [pc, #88]	; (800f514 <tcp_receive+0x600>)
 800f4bc:	4813      	ldr	r0, [pc, #76]	; (800f50c <tcp_receive+0x5f8>)
 800f4be:	f007 f99b 	bl	80167f8 <iprintf>
      inseg.len -= off;
 800f4c2:	4b0f      	ldr	r3, [pc, #60]	; (800f500 <tcp_receive+0x5ec>)
 800f4c4:	891a      	ldrh	r2, [r3, #8]
 800f4c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4ca:	1ad3      	subs	r3, r2, r3
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	4b0c      	ldr	r3, [pc, #48]	; (800f500 <tcp_receive+0x5ec>)
 800f4d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f4d2:	4b0b      	ldr	r3, [pc, #44]	; (800f500 <tcp_receive+0x5ec>)
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	891a      	ldrh	r2, [r3, #8]
 800f4d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4dc:	1ad3      	subs	r3, r2, r3
 800f4de:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f4e0:	e02a      	b.n	800f538 <tcp_receive+0x624>
 800f4e2:	bf00      	nop
 800f4e4:	08018de8 	.word	0x08018de8
 800f4e8:	08018df0 	.word	0x08018df0
 800f4ec:	2000de74 	.word	0x2000de74
 800f4f0:	2000de70 	.word	0x2000de70
 800f4f4:	2000de34 	.word	0x2000de34
 800f4f8:	2000de76 	.word	0x2000de76
 800f4fc:	2000de6c 	.word	0x2000de6c
 800f500:	2000de4c 	.word	0x2000de4c
 800f504:	08018a80 	.word	0x08018a80
 800f508:	08018df8 	.word	0x08018df8
 800f50c:	08018acc 	.word	0x08018acc
 800f510:	08018e08 	.word	0x08018e08
 800f514:	08018e18 	.word	0x08018e18
        off -= p->len;
 800f518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f51a:	895b      	ldrh	r3, [r3, #10]
 800f51c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f520:	1ad3      	subs	r3, r2, r3
 800f522:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f528:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f52a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f52c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f52e:	2200      	movs	r2, #0
 800f530:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f53a:	895b      	ldrh	r3, [r3, #10]
 800f53c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f540:	429a      	cmp	r2, r3
 800f542:	d8e9      	bhi.n	800f518 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f548:	4619      	mov	r1, r3
 800f54a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f54c:	f7fc fb60 	bl	800bc10 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f554:	4a91      	ldr	r2, [pc, #580]	; (800f79c <tcp_receive+0x888>)
 800f556:	6013      	str	r3, [r2, #0]
 800f558:	4b91      	ldr	r3, [pc, #580]	; (800f7a0 <tcp_receive+0x88c>)
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	4a8f      	ldr	r2, [pc, #572]	; (800f79c <tcp_receive+0x888>)
 800f55e:	6812      	ldr	r2, [r2, #0]
 800f560:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f562:	e00d      	b.n	800f580 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f564:	4b8d      	ldr	r3, [pc, #564]	; (800f79c <tcp_receive+0x888>)
 800f566:	681a      	ldr	r2, [r3, #0]
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	2b00      	cmp	r3, #0
 800f570:	da06      	bge.n	800f580 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	8b5b      	ldrh	r3, [r3, #26]
 800f576:	f043 0302 	orr.w	r3, r3, #2
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f580:	4b86      	ldr	r3, [pc, #536]	; (800f79c <tcp_receive+0x888>)
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	f2c0 842a 	blt.w	800fde4 <tcp_receive+0xed0>
 800f590:	4b82      	ldr	r3, [pc, #520]	; (800f79c <tcp_receive+0x888>)
 800f592:	681a      	ldr	r2, [r3, #0]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f598:	6879      	ldr	r1, [r7, #4]
 800f59a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f59c:	440b      	add	r3, r1
 800f59e:	1ad3      	subs	r3, r2, r3
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f300 841e 	bgt.w	800fde4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5ac:	4b7b      	ldr	r3, [pc, #492]	; (800f79c <tcp_receive+0x888>)
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	429a      	cmp	r2, r3
 800f5b2:	f040 829a 	bne.w	800faea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f5b6:	4b7a      	ldr	r3, [pc, #488]	; (800f7a0 <tcp_receive+0x88c>)
 800f5b8:	891c      	ldrh	r4, [r3, #8]
 800f5ba:	4b79      	ldr	r3, [pc, #484]	; (800f7a0 <tcp_receive+0x88c>)
 800f5bc:	68db      	ldr	r3, [r3, #12]
 800f5be:	899b      	ldrh	r3, [r3, #12]
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fb f814 	bl	800a5f0 <lwip_htons>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	f003 0303 	and.w	r3, r3, #3
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d001      	beq.n	800f5d8 <tcp_receive+0x6c4>
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	e000      	b.n	800f5da <tcp_receive+0x6c6>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4423      	add	r3, r4
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	4b71      	ldr	r3, [pc, #452]	; (800f7a4 <tcp_receive+0x890>)
 800f5e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5e6:	4b6f      	ldr	r3, [pc, #444]	; (800f7a4 <tcp_receive+0x890>)
 800f5e8:	881b      	ldrh	r3, [r3, #0]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d275      	bcs.n	800f6da <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5ee:	4b6c      	ldr	r3, [pc, #432]	; (800f7a0 <tcp_receive+0x88c>)
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	899b      	ldrh	r3, [r3, #12]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fa fffa 	bl	800a5f0 <lwip_htons>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	f003 0301 	and.w	r3, r3, #1
 800f604:	2b00      	cmp	r3, #0
 800f606:	d01f      	beq.n	800f648 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f608:	4b65      	ldr	r3, [pc, #404]	; (800f7a0 <tcp_receive+0x88c>)
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	899b      	ldrh	r3, [r3, #12]
 800f60e:	b29b      	uxth	r3, r3
 800f610:	b21b      	sxth	r3, r3
 800f612:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f616:	b21c      	sxth	r4, r3
 800f618:	4b61      	ldr	r3, [pc, #388]	; (800f7a0 <tcp_receive+0x88c>)
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	899b      	ldrh	r3, [r3, #12]
 800f61e:	b29b      	uxth	r3, r3
 800f620:	4618      	mov	r0, r3
 800f622:	f7fa ffe5 	bl	800a5f0 <lwip_htons>
 800f626:	4603      	mov	r3, r0
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f630:	b29b      	uxth	r3, r3
 800f632:	4618      	mov	r0, r3
 800f634:	f7fa ffdc 	bl	800a5f0 <lwip_htons>
 800f638:	4603      	mov	r3, r0
 800f63a:	b21b      	sxth	r3, r3
 800f63c:	4323      	orrs	r3, r4
 800f63e:	b21a      	sxth	r2, r3
 800f640:	4b57      	ldr	r3, [pc, #348]	; (800f7a0 <tcp_receive+0x88c>)
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	b292      	uxth	r2, r2
 800f646:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f64c:	4b54      	ldr	r3, [pc, #336]	; (800f7a0 <tcp_receive+0x88c>)
 800f64e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f650:	4b53      	ldr	r3, [pc, #332]	; (800f7a0 <tcp_receive+0x88c>)
 800f652:	68db      	ldr	r3, [r3, #12]
 800f654:	899b      	ldrh	r3, [r3, #12]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4618      	mov	r0, r3
 800f65a:	f7fa ffc9 	bl	800a5f0 <lwip_htons>
 800f65e:	4603      	mov	r3, r0
 800f660:	b2db      	uxtb	r3, r3
 800f662:	f003 0302 	and.w	r3, r3, #2
 800f666:	2b00      	cmp	r3, #0
 800f668:	d005      	beq.n	800f676 <tcp_receive+0x762>
            inseg.len -= 1;
 800f66a:	4b4d      	ldr	r3, [pc, #308]	; (800f7a0 <tcp_receive+0x88c>)
 800f66c:	891b      	ldrh	r3, [r3, #8]
 800f66e:	3b01      	subs	r3, #1
 800f670:	b29a      	uxth	r2, r3
 800f672:	4b4b      	ldr	r3, [pc, #300]	; (800f7a0 <tcp_receive+0x88c>)
 800f674:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f676:	4b4a      	ldr	r3, [pc, #296]	; (800f7a0 <tcp_receive+0x88c>)
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	4a49      	ldr	r2, [pc, #292]	; (800f7a0 <tcp_receive+0x88c>)
 800f67c:	8912      	ldrh	r2, [r2, #8]
 800f67e:	4611      	mov	r1, r2
 800f680:	4618      	mov	r0, r3
 800f682:	f7fc f9c5 	bl	800ba10 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f686:	4b46      	ldr	r3, [pc, #280]	; (800f7a0 <tcp_receive+0x88c>)
 800f688:	891c      	ldrh	r4, [r3, #8]
 800f68a:	4b45      	ldr	r3, [pc, #276]	; (800f7a0 <tcp_receive+0x88c>)
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	899b      	ldrh	r3, [r3, #12]
 800f690:	b29b      	uxth	r3, r3
 800f692:	4618      	mov	r0, r3
 800f694:	f7fa ffac 	bl	800a5f0 <lwip_htons>
 800f698:	4603      	mov	r3, r0
 800f69a:	b2db      	uxtb	r3, r3
 800f69c:	f003 0303 	and.w	r3, r3, #3
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <tcp_receive+0x794>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	e000      	b.n	800f6aa <tcp_receive+0x796>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	4423      	add	r3, r4
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	4b3d      	ldr	r3, [pc, #244]	; (800f7a4 <tcp_receive+0x890>)
 800f6b0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f6b2:	4b3c      	ldr	r3, [pc, #240]	; (800f7a4 <tcp_receive+0x890>)
 800f6b4:	881b      	ldrh	r3, [r3, #0]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	4b38      	ldr	r3, [pc, #224]	; (800f79c <tcp_receive+0x888>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	441a      	add	r2, r3
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6c2:	6879      	ldr	r1, [r7, #4]
 800f6c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f6c6:	440b      	add	r3, r1
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d006      	beq.n	800f6da <tcp_receive+0x7c6>
 800f6cc:	4b36      	ldr	r3, [pc, #216]	; (800f7a8 <tcp_receive+0x894>)
 800f6ce:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f6d2:	4936      	ldr	r1, [pc, #216]	; (800f7ac <tcp_receive+0x898>)
 800f6d4:	4836      	ldr	r0, [pc, #216]	; (800f7b0 <tcp_receive+0x89c>)
 800f6d6:	f007 f88f 	bl	80167f8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f000 80e7 	beq.w	800f8b2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6e4:	4b2e      	ldr	r3, [pc, #184]	; (800f7a0 <tcp_receive+0x88c>)
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	899b      	ldrh	r3, [r3, #12]
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f7fa ff7f 	bl	800a5f0 <lwip_htons>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d010      	beq.n	800f720 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f6fe:	e00a      	b.n	800f716 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f704:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f7fd fd92 	bl	800d23a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d1f0      	bne.n	800f700 <tcp_receive+0x7ec>
 800f71e:	e0c8      	b.n	800f8b2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f724:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f726:	e052      	b.n	800f7ce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	899b      	ldrh	r3, [r3, #12]
 800f72e:	b29b      	uxth	r3, r3
 800f730:	4618      	mov	r0, r3
 800f732:	f7fa ff5d 	bl	800a5f0 <lwip_htons>
 800f736:	4603      	mov	r3, r0
 800f738:	b2db      	uxtb	r3, r3
 800f73a:	f003 0301 	and.w	r3, r3, #1
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d03d      	beq.n	800f7be <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f742:	4b17      	ldr	r3, [pc, #92]	; (800f7a0 <tcp_receive+0x88c>)
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	899b      	ldrh	r3, [r3, #12]
 800f748:	b29b      	uxth	r3, r3
 800f74a:	4618      	mov	r0, r3
 800f74c:	f7fa ff50 	bl	800a5f0 <lwip_htons>
 800f750:	4603      	mov	r3, r0
 800f752:	b2db      	uxtb	r3, r3
 800f754:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d130      	bne.n	800f7be <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f75c:	4b10      	ldr	r3, [pc, #64]	; (800f7a0 <tcp_receive+0x88c>)
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	899b      	ldrh	r3, [r3, #12]
 800f762:	b29c      	uxth	r4, r3
 800f764:	2001      	movs	r0, #1
 800f766:	f7fa ff43 	bl	800a5f0 <lwip_htons>
 800f76a:	4603      	mov	r3, r0
 800f76c:	461a      	mov	r2, r3
 800f76e:	4b0c      	ldr	r3, [pc, #48]	; (800f7a0 <tcp_receive+0x88c>)
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	4322      	orrs	r2, r4
 800f774:	b292      	uxth	r2, r2
 800f776:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f778:	4b09      	ldr	r3, [pc, #36]	; (800f7a0 <tcp_receive+0x88c>)
 800f77a:	891c      	ldrh	r4, [r3, #8]
 800f77c:	4b08      	ldr	r3, [pc, #32]	; (800f7a0 <tcp_receive+0x88c>)
 800f77e:	68db      	ldr	r3, [r3, #12]
 800f780:	899b      	ldrh	r3, [r3, #12]
 800f782:	b29b      	uxth	r3, r3
 800f784:	4618      	mov	r0, r3
 800f786:	f7fa ff33 	bl	800a5f0 <lwip_htons>
 800f78a:	4603      	mov	r3, r0
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	f003 0303 	and.w	r3, r3, #3
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00e      	beq.n	800f7b4 <tcp_receive+0x8a0>
 800f796:	2301      	movs	r3, #1
 800f798:	e00d      	b.n	800f7b6 <tcp_receive+0x8a2>
 800f79a:	bf00      	nop
 800f79c:	2000de6c 	.word	0x2000de6c
 800f7a0:	2000de4c 	.word	0x2000de4c
 800f7a4:	2000de76 	.word	0x2000de76
 800f7a8:	08018a80 	.word	0x08018a80
 800f7ac:	08018e28 	.word	0x08018e28
 800f7b0:	08018acc 	.word	0x08018acc
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	4423      	add	r3, r4
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	4b98      	ldr	r3, [pc, #608]	; (800fa1c <tcp_receive+0xb08>)
 800f7bc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f7c8:	6938      	ldr	r0, [r7, #16]
 800f7ca:	f7fd fd36 	bl	800d23a <tcp_seg_free>
            while (next &&
 800f7ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d00e      	beq.n	800f7f2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f7d4:	4b91      	ldr	r3, [pc, #580]	; (800fa1c <tcp_receive+0xb08>)
 800f7d6:	881b      	ldrh	r3, [r3, #0]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4b91      	ldr	r3, [pc, #580]	; (800fa20 <tcp_receive+0xb0c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	441a      	add	r2, r3
 800f7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	685b      	ldr	r3, [r3, #4]
 800f7e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7e8:	8909      	ldrh	r1, [r1, #8]
 800f7ea:	440b      	add	r3, r1
 800f7ec:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	da9a      	bge.n	800f728 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d059      	beq.n	800f8ac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f7f8:	4b88      	ldr	r3, [pc, #544]	; (800fa1c <tcp_receive+0xb08>)
 800f7fa:	881b      	ldrh	r3, [r3, #0]
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4b88      	ldr	r3, [pc, #544]	; (800fa20 <tcp_receive+0xb0c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	441a      	add	r2, r3
 800f804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	dd4d      	ble.n	800f8ac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f810:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f812:	68db      	ldr	r3, [r3, #12]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	b29a      	uxth	r2, r3
 800f818:	4b81      	ldr	r3, [pc, #516]	; (800fa20 <tcp_receive+0xb0c>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	1ad3      	subs	r3, r2, r3
 800f820:	b29a      	uxth	r2, r3
 800f822:	4b80      	ldr	r3, [pc, #512]	; (800fa24 <tcp_receive+0xb10>)
 800f824:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f826:	4b7f      	ldr	r3, [pc, #508]	; (800fa24 <tcp_receive+0xb10>)
 800f828:	68db      	ldr	r3, [r3, #12]
 800f82a:	899b      	ldrh	r3, [r3, #12]
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fa fede 	bl	800a5f0 <lwip_htons>
 800f834:	4603      	mov	r3, r0
 800f836:	b2db      	uxtb	r3, r3
 800f838:	f003 0302 	and.w	r3, r3, #2
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d005      	beq.n	800f84c <tcp_receive+0x938>
                inseg.len -= 1;
 800f840:	4b78      	ldr	r3, [pc, #480]	; (800fa24 <tcp_receive+0xb10>)
 800f842:	891b      	ldrh	r3, [r3, #8]
 800f844:	3b01      	subs	r3, #1
 800f846:	b29a      	uxth	r2, r3
 800f848:	4b76      	ldr	r3, [pc, #472]	; (800fa24 <tcp_receive+0xb10>)
 800f84a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f84c:	4b75      	ldr	r3, [pc, #468]	; (800fa24 <tcp_receive+0xb10>)
 800f84e:	685b      	ldr	r3, [r3, #4]
 800f850:	4a74      	ldr	r2, [pc, #464]	; (800fa24 <tcp_receive+0xb10>)
 800f852:	8912      	ldrh	r2, [r2, #8]
 800f854:	4611      	mov	r1, r2
 800f856:	4618      	mov	r0, r3
 800f858:	f7fc f8da 	bl	800ba10 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f85c:	4b71      	ldr	r3, [pc, #452]	; (800fa24 <tcp_receive+0xb10>)
 800f85e:	891c      	ldrh	r4, [r3, #8]
 800f860:	4b70      	ldr	r3, [pc, #448]	; (800fa24 <tcp_receive+0xb10>)
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	899b      	ldrh	r3, [r3, #12]
 800f866:	b29b      	uxth	r3, r3
 800f868:	4618      	mov	r0, r3
 800f86a:	f7fa fec1 	bl	800a5f0 <lwip_htons>
 800f86e:	4603      	mov	r3, r0
 800f870:	b2db      	uxtb	r3, r3
 800f872:	f003 0303 	and.w	r3, r3, #3
 800f876:	2b00      	cmp	r3, #0
 800f878:	d001      	beq.n	800f87e <tcp_receive+0x96a>
 800f87a:	2301      	movs	r3, #1
 800f87c:	e000      	b.n	800f880 <tcp_receive+0x96c>
 800f87e:	2300      	movs	r3, #0
 800f880:	4423      	add	r3, r4
 800f882:	b29a      	uxth	r2, r3
 800f884:	4b65      	ldr	r3, [pc, #404]	; (800fa1c <tcp_receive+0xb08>)
 800f886:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f888:	4b64      	ldr	r3, [pc, #400]	; (800fa1c <tcp_receive+0xb08>)
 800f88a:	881b      	ldrh	r3, [r3, #0]
 800f88c:	461a      	mov	r2, r3
 800f88e:	4b64      	ldr	r3, [pc, #400]	; (800fa20 <tcp_receive+0xb0c>)
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	441a      	add	r2, r3
 800f894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f896:	68db      	ldr	r3, [r3, #12]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d006      	beq.n	800f8ac <tcp_receive+0x998>
 800f89e:	4b62      	ldr	r3, [pc, #392]	; (800fa28 <tcp_receive+0xb14>)
 800f8a0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f8a4:	4961      	ldr	r1, [pc, #388]	; (800fa2c <tcp_receive+0xb18>)
 800f8a6:	4862      	ldr	r0, [pc, #392]	; (800fa30 <tcp_receive+0xb1c>)
 800f8a8:	f006 ffa6 	bl	80167f8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f8b0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f8b2:	4b5a      	ldr	r3, [pc, #360]	; (800fa1c <tcp_receive+0xb08>)
 800f8b4:	881b      	ldrh	r3, [r3, #0]
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	4b59      	ldr	r3, [pc, #356]	; (800fa20 <tcp_receive+0xb0c>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	441a      	add	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8c6:	4b55      	ldr	r3, [pc, #340]	; (800fa1c <tcp_receive+0xb08>)
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d206      	bcs.n	800f8dc <tcp_receive+0x9c8>
 800f8ce:	4b56      	ldr	r3, [pc, #344]	; (800fa28 <tcp_receive+0xb14>)
 800f8d0:	f240 6207 	movw	r2, #1543	; 0x607
 800f8d4:	4957      	ldr	r1, [pc, #348]	; (800fa34 <tcp_receive+0xb20>)
 800f8d6:	4856      	ldr	r0, [pc, #344]	; (800fa30 <tcp_receive+0xb1c>)
 800f8d8:	f006 ff8e 	bl	80167f8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8e0:	4b4e      	ldr	r3, [pc, #312]	; (800fa1c <tcp_receive+0xb08>)
 800f8e2:	881b      	ldrh	r3, [r3, #0]
 800f8e4:	1ad3      	subs	r3, r2, r3
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7fc ffc5 	bl	800c87c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f8f2:	4b4c      	ldr	r3, [pc, #304]	; (800fa24 <tcp_receive+0xb10>)
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	891b      	ldrh	r3, [r3, #8]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d006      	beq.n	800f90a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f8fc:	4b49      	ldr	r3, [pc, #292]	; (800fa24 <tcp_receive+0xb10>)
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	4a4d      	ldr	r2, [pc, #308]	; (800fa38 <tcp_receive+0xb24>)
 800f902:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f904:	4b47      	ldr	r3, [pc, #284]	; (800fa24 <tcp_receive+0xb10>)
 800f906:	2200      	movs	r2, #0
 800f908:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f90a:	4b46      	ldr	r3, [pc, #280]	; (800fa24 <tcp_receive+0xb10>)
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	899b      	ldrh	r3, [r3, #12]
 800f910:	b29b      	uxth	r3, r3
 800f912:	4618      	mov	r0, r3
 800f914:	f7fa fe6c 	bl	800a5f0 <lwip_htons>
 800f918:	4603      	mov	r3, r0
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	f003 0301 	and.w	r3, r3, #1
 800f920:	2b00      	cmp	r3, #0
 800f922:	f000 80b8 	beq.w	800fa96 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f926:	4b45      	ldr	r3, [pc, #276]	; (800fa3c <tcp_receive+0xb28>)
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	f043 0320 	orr.w	r3, r3, #32
 800f92e:	b2da      	uxtb	r2, r3
 800f930:	4b42      	ldr	r3, [pc, #264]	; (800fa3c <tcp_receive+0xb28>)
 800f932:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f934:	e0af      	b.n	800fa96 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f93a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f940:	68db      	ldr	r3, [r3, #12]
 800f942:	685b      	ldr	r3, [r3, #4]
 800f944:	4a36      	ldr	r2, [pc, #216]	; (800fa20 <tcp_receive+0xb0c>)
 800f946:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	461c      	mov	r4, r3
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	899b      	ldrh	r3, [r3, #12]
 800f954:	b29b      	uxth	r3, r3
 800f956:	4618      	mov	r0, r3
 800f958:	f7fa fe4a 	bl	800a5f0 <lwip_htons>
 800f95c:	4603      	mov	r3, r0
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d001      	beq.n	800f96c <tcp_receive+0xa58>
 800f968:	2301      	movs	r3, #1
 800f96a:	e000      	b.n	800f96e <tcp_receive+0xa5a>
 800f96c:	2300      	movs	r3, #0
 800f96e:	191a      	adds	r2, r3, r4
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f974:	441a      	add	r2, r3
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f97e:	461c      	mov	r4, r3
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	891b      	ldrh	r3, [r3, #8]
 800f984:	461d      	mov	r5, r3
 800f986:	68bb      	ldr	r3, [r7, #8]
 800f988:	68db      	ldr	r3, [r3, #12]
 800f98a:	899b      	ldrh	r3, [r3, #12]
 800f98c:	b29b      	uxth	r3, r3
 800f98e:	4618      	mov	r0, r3
 800f990:	f7fa fe2e 	bl	800a5f0 <lwip_htons>
 800f994:	4603      	mov	r3, r0
 800f996:	b2db      	uxtb	r3, r3
 800f998:	f003 0303 	and.w	r3, r3, #3
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d001      	beq.n	800f9a4 <tcp_receive+0xa90>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e000      	b.n	800f9a6 <tcp_receive+0xa92>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	442b      	add	r3, r5
 800f9a8:	429c      	cmp	r4, r3
 800f9aa:	d206      	bcs.n	800f9ba <tcp_receive+0xaa6>
 800f9ac:	4b1e      	ldr	r3, [pc, #120]	; (800fa28 <tcp_receive+0xb14>)
 800f9ae:	f240 622b 	movw	r2, #1579	; 0x62b
 800f9b2:	4923      	ldr	r1, [pc, #140]	; (800fa40 <tcp_receive+0xb2c>)
 800f9b4:	481e      	ldr	r0, [pc, #120]	; (800fa30 <tcp_receive+0xb1c>)
 800f9b6:	f006 ff1f 	bl	80167f8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	891b      	ldrh	r3, [r3, #8]
 800f9be:	461c      	mov	r4, r3
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	899b      	ldrh	r3, [r3, #12]
 800f9c6:	b29b      	uxth	r3, r3
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fa fe11 	bl	800a5f0 <lwip_htons>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	b2db      	uxtb	r3, r3
 800f9d2:	f003 0303 	and.w	r3, r3, #3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d001      	beq.n	800f9de <tcp_receive+0xaca>
 800f9da:	2301      	movs	r3, #1
 800f9dc:	e000      	b.n	800f9e0 <tcp_receive+0xacc>
 800f9de:	2300      	movs	r3, #0
 800f9e0:	1919      	adds	r1, r3, r4
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9e6:	b28b      	uxth	r3, r1
 800f9e8:	1ad3      	subs	r3, r2, r3
 800f9ea:	b29a      	uxth	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f7fc ff43 	bl	800c87c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	685b      	ldr	r3, [r3, #4]
 800f9fa:	891b      	ldrh	r3, [r3, #8]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d028      	beq.n	800fa52 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800fa00:	4b0d      	ldr	r3, [pc, #52]	; (800fa38 <tcp_receive+0xb24>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01d      	beq.n	800fa44 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800fa08:	4b0b      	ldr	r3, [pc, #44]	; (800fa38 <tcp_receive+0xb24>)
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	4619      	mov	r1, r3
 800fa12:	4610      	mov	r0, r2
 800fa14:	f7fc fa50 	bl	800beb8 <pbuf_cat>
 800fa18:	e018      	b.n	800fa4c <tcp_receive+0xb38>
 800fa1a:	bf00      	nop
 800fa1c:	2000de76 	.word	0x2000de76
 800fa20:	2000de6c 	.word	0x2000de6c
 800fa24:	2000de4c 	.word	0x2000de4c
 800fa28:	08018a80 	.word	0x08018a80
 800fa2c:	08018e60 	.word	0x08018e60
 800fa30:	08018acc 	.word	0x08018acc
 800fa34:	08018e9c 	.word	0x08018e9c
 800fa38:	2000de7c 	.word	0x2000de7c
 800fa3c:	2000de79 	.word	0x2000de79
 800fa40:	08018ebc 	.word	0x08018ebc
            } else {
              recv_data = cseg->p;
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	685b      	ldr	r3, [r3, #4]
 800fa48:	4a70      	ldr	r2, [pc, #448]	; (800fc0c <tcp_receive+0xcf8>)
 800fa4a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	899b      	ldrh	r3, [r3, #12]
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f7fa fdc8 	bl	800a5f0 <lwip_htons>
 800fa60:	4603      	mov	r3, r0
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0301 	and.w	r3, r3, #1
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d00d      	beq.n	800fa88 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fa6c:	4b68      	ldr	r3, [pc, #416]	; (800fc10 <tcp_receive+0xcfc>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f043 0320 	orr.w	r3, r3, #32
 800fa74:	b2da      	uxtb	r2, r3
 800fa76:	4b66      	ldr	r3, [pc, #408]	; (800fc10 <tcp_receive+0xcfc>)
 800fa78:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	7d1b      	ldrb	r3, [r3, #20]
 800fa7e:	2b04      	cmp	r3, #4
 800fa80:	d102      	bne.n	800fa88 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2207      	movs	r2, #7
 800fa86:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fa90:	68b8      	ldr	r0, [r7, #8]
 800fa92:	f7fd fbd2 	bl	800d23a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d008      	beq.n	800fab0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800faaa:	429a      	cmp	r2, r3
 800faac:	f43f af43 	beq.w	800f936 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	8b5b      	ldrh	r3, [r3, #26]
 800fab4:	f003 0301 	and.w	r3, r3, #1
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d00e      	beq.n	800fada <tcp_receive+0xbc6>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	8b5b      	ldrh	r3, [r3, #26]
 800fac0:	f023 0301 	bic.w	r3, r3, #1
 800fac4:	b29a      	uxth	r2, r3
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	835a      	strh	r2, [r3, #26]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	8b5b      	ldrh	r3, [r3, #26]
 800face:	f043 0302 	orr.w	r3, r3, #2
 800fad2:	b29a      	uxth	r2, r3
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fad8:	e188      	b.n	800fdec <tcp_receive+0xed8>
        tcp_ack(pcb);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	8b5b      	ldrh	r3, [r3, #26]
 800fade:	f043 0301 	orr.w	r3, r3, #1
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fae8:	e180      	b.n	800fdec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d106      	bne.n	800fb00 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800faf2:	4848      	ldr	r0, [pc, #288]	; (800fc14 <tcp_receive+0xd00>)
 800faf4:	f7fd fbba 	bl	800d26c <tcp_seg_copy>
 800faf8:	4602      	mov	r2, r0
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	675a      	str	r2, [r3, #116]	; 0x74
 800fafe:	e16d      	b.n	800fddc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fb00:	2300      	movs	r3, #0
 800fb02:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb08:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb0a:	e157      	b.n	800fdbc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	4b41      	ldr	r3, [pc, #260]	; (800fc18 <tcp_receive+0xd04>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d11d      	bne.n	800fb56 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fb1a:	4b3e      	ldr	r3, [pc, #248]	; (800fc14 <tcp_receive+0xd00>)
 800fb1c:	891a      	ldrh	r2, [r3, #8]
 800fb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb20:	891b      	ldrh	r3, [r3, #8]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	f240 814f 	bls.w	800fdc6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb28:	483a      	ldr	r0, [pc, #232]	; (800fc14 <tcp_receive+0xd00>)
 800fb2a:	f7fd fb9f 	bl	800d26c <tcp_seg_copy>
 800fb2e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 8149 	beq.w	800fdca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d003      	beq.n	800fb46 <tcp_receive+0xc32>
                    prev->next = cseg;
 800fb3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb40:	697a      	ldr	r2, [r7, #20]
 800fb42:	601a      	str	r2, [r3, #0]
 800fb44:	e002      	b.n	800fb4c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fb4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb4e:	6978      	ldr	r0, [r7, #20]
 800fb50:	f7ff f8dc 	bl	800ed0c <tcp_oos_insert_segment>
                }
                break;
 800fb54:	e139      	b.n	800fdca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fb56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d117      	bne.n	800fb8c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fb5c:	4b2e      	ldr	r3, [pc, #184]	; (800fc18 <tcp_receive+0xd04>)
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	1ad3      	subs	r3, r2, r3
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	da57      	bge.n	800fc1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb6c:	4829      	ldr	r0, [pc, #164]	; (800fc14 <tcp_receive+0xd00>)
 800fb6e:	f7fd fb7d 	bl	800d26c <tcp_seg_copy>
 800fb72:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	f000 8129 	beq.w	800fdce <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	69ba      	ldr	r2, [r7, #24]
 800fb80:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fb82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb84:	69b8      	ldr	r0, [r7, #24]
 800fb86:	f7ff f8c1 	bl	800ed0c <tcp_oos_insert_segment>
                  }
                  break;
 800fb8a:	e120      	b.n	800fdce <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fb8c:	4b22      	ldr	r3, [pc, #136]	; (800fc18 <tcp_receive+0xd04>)
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb92:	68db      	ldr	r3, [r3, #12]
 800fb94:	685b      	ldr	r3, [r3, #4]
 800fb96:	1ad3      	subs	r3, r2, r3
 800fb98:	3b01      	subs	r3, #1
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	db3e      	blt.n	800fc1c <tcp_receive+0xd08>
 800fb9e:	4b1e      	ldr	r3, [pc, #120]	; (800fc18 <tcp_receive+0xd04>)
 800fba0:	681a      	ldr	r2, [r3, #0]
 800fba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fba4:	68db      	ldr	r3, [r3, #12]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	1ad3      	subs	r3, r2, r3
 800fbaa:	3301      	adds	r3, #1
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	dc35      	bgt.n	800fc1c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fbb0:	4818      	ldr	r0, [pc, #96]	; (800fc14 <tcp_receive+0xd00>)
 800fbb2:	f7fd fb5b 	bl	800d26c <tcp_seg_copy>
 800fbb6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	f000 8109 	beq.w	800fdd2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fbc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	685b      	ldr	r3, [r3, #4]
 800fbc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbc8:	8912      	ldrh	r2, [r2, #8]
 800fbca:	441a      	add	r2, r3
 800fbcc:	4b12      	ldr	r3, [pc, #72]	; (800fc18 <tcp_receive+0xd04>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	1ad3      	subs	r3, r2, r3
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	dd12      	ble.n	800fbfc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fbd6:	4b10      	ldr	r3, [pc, #64]	; (800fc18 <tcp_receive+0xd04>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	b29a      	uxth	r2, r3
 800fbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	1ad3      	subs	r3, r2, r3
 800fbe6:	b29a      	uxth	r2, r3
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fbec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbee:	685a      	ldr	r2, [r3, #4]
 800fbf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf2:	891b      	ldrh	r3, [r3, #8]
 800fbf4:	4619      	mov	r1, r3
 800fbf6:	4610      	mov	r0, r2
 800fbf8:	f7fb ff0a 	bl	800ba10 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fbfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbfe:	69fa      	ldr	r2, [r7, #28]
 800fc00:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fc02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fc04:	69f8      	ldr	r0, [r7, #28]
 800fc06:	f7ff f881 	bl	800ed0c <tcp_oos_insert_segment>
                  }
                  break;
 800fc0a:	e0e2      	b.n	800fdd2 <tcp_receive+0xebe>
 800fc0c:	2000de7c 	.word	0x2000de7c
 800fc10:	2000de79 	.word	0x2000de79
 800fc14:	2000de4c 	.word	0x2000de4c
 800fc18:	2000de6c 	.word	0x2000de6c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc1e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fc20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	f040 80c6 	bne.w	800fdb6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fc2a:	4b80      	ldr	r3, [pc, #512]	; (800fe2c <tcp_receive+0xf18>)
 800fc2c:	681a      	ldr	r2, [r3, #0]
 800fc2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc30:	68db      	ldr	r3, [r3, #12]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f340 80bd 	ble.w	800fdb6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	899b      	ldrh	r3, [r3, #12]
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	4618      	mov	r0, r3
 800fc46:	f7fa fcd3 	bl	800a5f0 <lwip_htons>
 800fc4a:	4603      	mov	r3, r0
 800fc4c:	b2db      	uxtb	r3, r3
 800fc4e:	f003 0301 	and.w	r3, r3, #1
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f040 80bf 	bne.w	800fdd6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fc58:	4875      	ldr	r0, [pc, #468]	; (800fe30 <tcp_receive+0xf1c>)
 800fc5a:	f7fd fb07 	bl	800d26c <tcp_seg_copy>
 800fc5e:	4602      	mov	r2, r0
 800fc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc62:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	f000 80b6 	beq.w	800fdda <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	685b      	ldr	r3, [r3, #4]
 800fc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc76:	8912      	ldrh	r2, [r2, #8]
 800fc78:	441a      	add	r2, r3
 800fc7a:	4b6c      	ldr	r3, [pc, #432]	; (800fe2c <tcp_receive+0xf18>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	dd12      	ble.n	800fcaa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fc84:	4b69      	ldr	r3, [pc, #420]	; (800fe2c <tcp_receive+0xf18>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	b29a      	uxth	r2, r3
 800fc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	b29b      	uxth	r3, r3
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc98:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc9c:	685a      	ldr	r2, [r3, #4]
 800fc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca0:	891b      	ldrh	r3, [r3, #8]
 800fca2:	4619      	mov	r1, r3
 800fca4:	4610      	mov	r0, r2
 800fca6:	f7fb feb3 	bl	800ba10 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fcaa:	4b62      	ldr	r3, [pc, #392]	; (800fe34 <tcp_receive+0xf20>)
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	4b5e      	ldr	r3, [pc, #376]	; (800fe2c <tcp_receive+0xf18>)
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	441a      	add	r2, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcba:	6879      	ldr	r1, [r7, #4]
 800fcbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fcbe:	440b      	add	r3, r1
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f340 8089 	ble.w	800fdda <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fcc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	68db      	ldr	r3, [r3, #12]
 800fcce:	899b      	ldrh	r3, [r3, #12]
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fa fc8c 	bl	800a5f0 <lwip_htons>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	b2db      	uxtb	r3, r3
 800fcdc:	f003 0301 	and.w	r3, r3, #1
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d022      	beq.n	800fd2a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	68db      	ldr	r3, [r3, #12]
 800fcea:	899b      	ldrh	r3, [r3, #12]
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	b21b      	sxth	r3, r3
 800fcf0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fcf4:	b21c      	sxth	r4, r3
 800fcf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	68db      	ldr	r3, [r3, #12]
 800fcfc:	899b      	ldrh	r3, [r3, #12]
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7fa fc75 	bl	800a5f0 <lwip_htons>
 800fd06:	4603      	mov	r3, r0
 800fd08:	b2db      	uxtb	r3, r3
 800fd0a:	b29b      	uxth	r3, r3
 800fd0c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7fa fc6c 	bl	800a5f0 <lwip_htons>
 800fd18:	4603      	mov	r3, r0
 800fd1a:	b21b      	sxth	r3, r3
 800fd1c:	4323      	orrs	r3, r4
 800fd1e:	b21a      	sxth	r2, r3
 800fd20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	68db      	ldr	r3, [r3, #12]
 800fd26:	b292      	uxth	r2, r2
 800fd28:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd2e:	b29a      	uxth	r2, r3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd34:	4413      	add	r3, r2
 800fd36:	b299      	uxth	r1, r3
 800fd38:	4b3c      	ldr	r3, [pc, #240]	; (800fe2c <tcp_receive+0xf18>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	b29a      	uxth	r2, r3
 800fd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	1a8a      	subs	r2, r1, r2
 800fd44:	b292      	uxth	r2, r2
 800fd46:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fd48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	685a      	ldr	r2, [r3, #4]
 800fd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	891b      	ldrh	r3, [r3, #8]
 800fd54:	4619      	mov	r1, r3
 800fd56:	4610      	mov	r0, r2
 800fd58:	f7fb fe5a 	bl	800ba10 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	891c      	ldrh	r4, [r3, #8]
 800fd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	899b      	ldrh	r3, [r3, #12]
 800fd6a:	b29b      	uxth	r3, r3
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	f7fa fc3f 	bl	800a5f0 <lwip_htons>
 800fd72:	4603      	mov	r3, r0
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	f003 0303 	and.w	r3, r3, #3
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d001      	beq.n	800fd82 <tcp_receive+0xe6e>
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e000      	b.n	800fd84 <tcp_receive+0xe70>
 800fd82:	2300      	movs	r3, #0
 800fd84:	4423      	add	r3, r4
 800fd86:	b29a      	uxth	r2, r3
 800fd88:	4b2a      	ldr	r3, [pc, #168]	; (800fe34 <tcp_receive+0xf20>)
 800fd8a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fd8c:	4b29      	ldr	r3, [pc, #164]	; (800fe34 <tcp_receive+0xf20>)
 800fd8e:	881b      	ldrh	r3, [r3, #0]
 800fd90:	461a      	mov	r2, r3
 800fd92:	4b26      	ldr	r3, [pc, #152]	; (800fe2c <tcp_receive+0xf18>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	441a      	add	r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd9c:	6879      	ldr	r1, [r7, #4]
 800fd9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fda0:	440b      	add	r3, r1
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d019      	beq.n	800fdda <tcp_receive+0xec6>
 800fda6:	4b24      	ldr	r3, [pc, #144]	; (800fe38 <tcp_receive+0xf24>)
 800fda8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fdac:	4923      	ldr	r1, [pc, #140]	; (800fe3c <tcp_receive+0xf28>)
 800fdae:	4824      	ldr	r0, [pc, #144]	; (800fe40 <tcp_receive+0xf2c>)
 800fdb0:	f006 fd22 	bl	80167f8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fdb4:	e011      	b.n	800fdda <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fdb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	f47f aea4 	bne.w	800fb0c <tcp_receive+0xbf8>
 800fdc4:	e00a      	b.n	800fddc <tcp_receive+0xec8>
                break;
 800fdc6:	bf00      	nop
 800fdc8:	e008      	b.n	800fddc <tcp_receive+0xec8>
                break;
 800fdca:	bf00      	nop
 800fdcc:	e006      	b.n	800fddc <tcp_receive+0xec8>
                  break;
 800fdce:	bf00      	nop
 800fdd0:	e004      	b.n	800fddc <tcp_receive+0xec8>
                  break;
 800fdd2:	bf00      	nop
 800fdd4:	e002      	b.n	800fddc <tcp_receive+0xec8>
                  break;
 800fdd6:	bf00      	nop
 800fdd8:	e000      	b.n	800fddc <tcp_receive+0xec8>
                break;
 800fdda:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fddc:	6878      	ldr	r0, [r7, #4]
 800fdde:	f001 fa33 	bl	8011248 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fde2:	e003      	b.n	800fdec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f001 fa2f 	bl	8011248 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdea:	e01a      	b.n	800fe22 <tcp_receive+0xf0e>
 800fdec:	e019      	b.n	800fe22 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fdee:	4b0f      	ldr	r3, [pc, #60]	; (800fe2c <tcp_receive+0xf18>)
 800fdf0:	681a      	ldr	r2, [r3, #0]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	db0a      	blt.n	800fe12 <tcp_receive+0xefe>
 800fdfc:	4b0b      	ldr	r3, [pc, #44]	; (800fe2c <tcp_receive+0xf18>)
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe04:	6879      	ldr	r1, [r7, #4]
 800fe06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe08:	440b      	add	r3, r1
 800fe0a:	1ad3      	subs	r3, r2, r3
 800fe0c:	3301      	adds	r3, #1
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	dd07      	ble.n	800fe22 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	8b5b      	ldrh	r3, [r3, #26]
 800fe16:	f043 0302 	orr.w	r3, r3, #2
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fe20:	e7ff      	b.n	800fe22 <tcp_receive+0xf0e>
 800fe22:	bf00      	nop
 800fe24:	3750      	adds	r7, #80	; 0x50
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bdb0      	pop	{r4, r5, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	2000de6c 	.word	0x2000de6c
 800fe30:	2000de4c 	.word	0x2000de4c
 800fe34:	2000de76 	.word	0x2000de76
 800fe38:	08018a80 	.word	0x08018a80
 800fe3c:	08018e28 	.word	0x08018e28
 800fe40:	08018acc 	.word	0x08018acc

0800fe44 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fe4a:	4b15      	ldr	r3, [pc, #84]	; (800fea0 <tcp_get_next_optbyte+0x5c>)
 800fe4c:	881b      	ldrh	r3, [r3, #0]
 800fe4e:	1c5a      	adds	r2, r3, #1
 800fe50:	b291      	uxth	r1, r2
 800fe52:	4a13      	ldr	r2, [pc, #76]	; (800fea0 <tcp_get_next_optbyte+0x5c>)
 800fe54:	8011      	strh	r1, [r2, #0]
 800fe56:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fe58:	4b12      	ldr	r3, [pc, #72]	; (800fea4 <tcp_get_next_optbyte+0x60>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d004      	beq.n	800fe6a <tcp_get_next_optbyte+0x26>
 800fe60:	4b11      	ldr	r3, [pc, #68]	; (800fea8 <tcp_get_next_optbyte+0x64>)
 800fe62:	881b      	ldrh	r3, [r3, #0]
 800fe64:	88fa      	ldrh	r2, [r7, #6]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d208      	bcs.n	800fe7c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fe6a:	4b10      	ldr	r3, [pc, #64]	; (800feac <tcp_get_next_optbyte+0x68>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	3314      	adds	r3, #20
 800fe70:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fe72:	88fb      	ldrh	r3, [r7, #6]
 800fe74:	683a      	ldr	r2, [r7, #0]
 800fe76:	4413      	add	r3, r2
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	e00b      	b.n	800fe94 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fe7c:	88fb      	ldrh	r3, [r7, #6]
 800fe7e:	b2da      	uxtb	r2, r3
 800fe80:	4b09      	ldr	r3, [pc, #36]	; (800fea8 <tcp_get_next_optbyte+0x64>)
 800fe82:	881b      	ldrh	r3, [r3, #0]
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	1ad3      	subs	r3, r2, r3
 800fe88:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fe8a:	4b06      	ldr	r3, [pc, #24]	; (800fea4 <tcp_get_next_optbyte+0x60>)
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	797b      	ldrb	r3, [r7, #5]
 800fe90:	4413      	add	r3, r2
 800fe92:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	370c      	adds	r7, #12
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9e:	4770      	bx	lr
 800fea0:	2000de68 	.word	0x2000de68
 800fea4:	2000de64 	.word	0x2000de64
 800fea8:	2000de62 	.word	0x2000de62
 800feac:	2000de5c 	.word	0x2000de5c

0800feb0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d106      	bne.n	800fecc <tcp_parseopt+0x1c>
 800febe:	4b32      	ldr	r3, [pc, #200]	; (800ff88 <tcp_parseopt+0xd8>)
 800fec0:	f240 727d 	movw	r2, #1917	; 0x77d
 800fec4:	4931      	ldr	r1, [pc, #196]	; (800ff8c <tcp_parseopt+0xdc>)
 800fec6:	4832      	ldr	r0, [pc, #200]	; (800ff90 <tcp_parseopt+0xe0>)
 800fec8:	f006 fc96 	bl	80167f8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fecc:	4b31      	ldr	r3, [pc, #196]	; (800ff94 <tcp_parseopt+0xe4>)
 800fece:	881b      	ldrh	r3, [r3, #0]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d055      	beq.n	800ff80 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fed4:	4b30      	ldr	r3, [pc, #192]	; (800ff98 <tcp_parseopt+0xe8>)
 800fed6:	2200      	movs	r2, #0
 800fed8:	801a      	strh	r2, [r3, #0]
 800feda:	e045      	b.n	800ff68 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fedc:	f7ff ffb2 	bl	800fe44 <tcp_get_next_optbyte>
 800fee0:	4603      	mov	r3, r0
 800fee2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fee4:	7bfb      	ldrb	r3, [r7, #15]
 800fee6:	2b02      	cmp	r3, #2
 800fee8:	d006      	beq.n	800fef8 <tcp_parseopt+0x48>
 800feea:	2b02      	cmp	r3, #2
 800feec:	dc2b      	bgt.n	800ff46 <tcp_parseopt+0x96>
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d041      	beq.n	800ff76 <tcp_parseopt+0xc6>
 800fef2:	2b01      	cmp	r3, #1
 800fef4:	d127      	bne.n	800ff46 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fef6:	e037      	b.n	800ff68 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fef8:	f7ff ffa4 	bl	800fe44 <tcp_get_next_optbyte>
 800fefc:	4603      	mov	r3, r0
 800fefe:	2b04      	cmp	r3, #4
 800ff00:	d13b      	bne.n	800ff7a <tcp_parseopt+0xca>
 800ff02:	4b25      	ldr	r3, [pc, #148]	; (800ff98 <tcp_parseopt+0xe8>)
 800ff04:	881b      	ldrh	r3, [r3, #0]
 800ff06:	3301      	adds	r3, #1
 800ff08:	4a22      	ldr	r2, [pc, #136]	; (800ff94 <tcp_parseopt+0xe4>)
 800ff0a:	8812      	ldrh	r2, [r2, #0]
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	da34      	bge.n	800ff7a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ff10:	f7ff ff98 	bl	800fe44 <tcp_get_next_optbyte>
 800ff14:	4603      	mov	r3, r0
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	021b      	lsls	r3, r3, #8
 800ff1a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ff1c:	f7ff ff92 	bl	800fe44 <tcp_get_next_optbyte>
 800ff20:	4603      	mov	r3, r0
 800ff22:	b29a      	uxth	r2, r3
 800ff24:	89bb      	ldrh	r3, [r7, #12]
 800ff26:	4313      	orrs	r3, r2
 800ff28:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ff2a:	89bb      	ldrh	r3, [r7, #12]
 800ff2c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ff30:	d804      	bhi.n	800ff3c <tcp_parseopt+0x8c>
 800ff32:	89bb      	ldrh	r3, [r7, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <tcp_parseopt+0x8c>
 800ff38:	89ba      	ldrh	r2, [r7, #12]
 800ff3a:	e001      	b.n	800ff40 <tcp_parseopt+0x90>
 800ff3c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ff44:	e010      	b.n	800ff68 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ff46:	f7ff ff7d 	bl	800fe44 <tcp_get_next_optbyte>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ff4e:	7afb      	ldrb	r3, [r7, #11]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d914      	bls.n	800ff7e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ff54:	7afb      	ldrb	r3, [r7, #11]
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	4b0f      	ldr	r3, [pc, #60]	; (800ff98 <tcp_parseopt+0xe8>)
 800ff5a:	881b      	ldrh	r3, [r3, #0]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	3b02      	subs	r3, #2
 800ff62:	b29a      	uxth	r2, r3
 800ff64:	4b0c      	ldr	r3, [pc, #48]	; (800ff98 <tcp_parseopt+0xe8>)
 800ff66:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff68:	4b0b      	ldr	r3, [pc, #44]	; (800ff98 <tcp_parseopt+0xe8>)
 800ff6a:	881a      	ldrh	r2, [r3, #0]
 800ff6c:	4b09      	ldr	r3, [pc, #36]	; (800ff94 <tcp_parseopt+0xe4>)
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d3b3      	bcc.n	800fedc <tcp_parseopt+0x2c>
 800ff74:	e004      	b.n	800ff80 <tcp_parseopt+0xd0>
          return;
 800ff76:	bf00      	nop
 800ff78:	e002      	b.n	800ff80 <tcp_parseopt+0xd0>
            return;
 800ff7a:	bf00      	nop
 800ff7c:	e000      	b.n	800ff80 <tcp_parseopt+0xd0>
            return;
 800ff7e:	bf00      	nop
      }
    }
  }
}
 800ff80:	3710      	adds	r7, #16
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	08018a80 	.word	0x08018a80
 800ff8c:	08018ee4 	.word	0x08018ee4
 800ff90:	08018acc 	.word	0x08018acc
 800ff94:	2000de60 	.word	0x2000de60
 800ff98:	2000de68 	.word	0x2000de68

0800ff9c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ffa0:	4b05      	ldr	r3, [pc, #20]	; (800ffb8 <tcp_trigger_input_pcb_close+0x1c>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	f043 0310 	orr.w	r3, r3, #16
 800ffa8:	b2da      	uxtb	r2, r3
 800ffaa:	4b03      	ldr	r3, [pc, #12]	; (800ffb8 <tcp_trigger_input_pcb_close+0x1c>)
 800ffac:	701a      	strb	r2, [r3, #0]
}
 800ffae:	bf00      	nop
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr
 800ffb8:	2000de79 	.word	0x2000de79

0800ffbc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b084      	sub	sp, #16
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00a      	beq.n	800ffe4 <tcp_route+0x28>
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	7a1b      	ldrb	r3, [r3, #8]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d006      	beq.n	800ffe4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	7a1b      	ldrb	r3, [r3, #8]
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7fb fb10 	bl	800b600 <netif_get_by_index>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	e003      	b.n	800ffec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f005 f80b 	bl	8015000 <ip4_route>
 800ffea:	4603      	mov	r3, r0
  }
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3710      	adds	r7, #16
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fff4:	b590      	push	{r4, r7, lr}
 800fff6:	b087      	sub	sp, #28
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	60f8      	str	r0, [r7, #12]
 800fffc:	60b9      	str	r1, [r7, #8]
 800fffe:	603b      	str	r3, [r7, #0]
 8010000:	4613      	mov	r3, r2
 8010002:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d105      	bne.n	8010016 <tcp_create_segment+0x22>
 801000a:	4b44      	ldr	r3, [pc, #272]	; (801011c <tcp_create_segment+0x128>)
 801000c:	22a3      	movs	r2, #163	; 0xa3
 801000e:	4944      	ldr	r1, [pc, #272]	; (8010120 <tcp_create_segment+0x12c>)
 8010010:	4844      	ldr	r0, [pc, #272]	; (8010124 <tcp_create_segment+0x130>)
 8010012:	f006 fbf1 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	2b00      	cmp	r3, #0
 801001a:	d105      	bne.n	8010028 <tcp_create_segment+0x34>
 801001c:	4b3f      	ldr	r3, [pc, #252]	; (801011c <tcp_create_segment+0x128>)
 801001e:	22a4      	movs	r2, #164	; 0xa4
 8010020:	4941      	ldr	r1, [pc, #260]	; (8010128 <tcp_create_segment+0x134>)
 8010022:	4840      	ldr	r0, [pc, #256]	; (8010124 <tcp_create_segment+0x130>)
 8010024:	f006 fbe8 	bl	80167f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010028:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801002c:	009b      	lsls	r3, r3, #2
 801002e:	b2db      	uxtb	r3, r3
 8010030:	f003 0304 	and.w	r3, r3, #4
 8010034:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010036:	2003      	movs	r0, #3
 8010038:	f7fa ffb2 	bl	800afa0 <memp_malloc>
 801003c:	6138      	str	r0, [r7, #16]
 801003e:	693b      	ldr	r3, [r7, #16]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d104      	bne.n	801004e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010044:	68b8      	ldr	r0, [r7, #8]
 8010046:	f7fb fe69 	bl	800bd1c <pbuf_free>
    return NULL;
 801004a:	2300      	movs	r3, #0
 801004c:	e061      	b.n	8010112 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010054:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2200      	movs	r2, #0
 801005a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	68ba      	ldr	r2, [r7, #8]
 8010060:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	891a      	ldrh	r2, [r3, #8]
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	b29b      	uxth	r3, r3
 801006a:	429a      	cmp	r2, r3
 801006c:	d205      	bcs.n	801007a <tcp_create_segment+0x86>
 801006e:	4b2b      	ldr	r3, [pc, #172]	; (801011c <tcp_create_segment+0x128>)
 8010070:	22b0      	movs	r2, #176	; 0xb0
 8010072:	492e      	ldr	r1, [pc, #184]	; (801012c <tcp_create_segment+0x138>)
 8010074:	482b      	ldr	r0, [pc, #172]	; (8010124 <tcp_create_segment+0x130>)
 8010076:	f006 fbbf 	bl	80167f8 <iprintf>
  seg->len = p->tot_len - optlen;
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	891a      	ldrh	r2, [r3, #8]
 801007e:	7dfb      	ldrb	r3, [r7, #23]
 8010080:	b29b      	uxth	r3, r3
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	b29a      	uxth	r2, r3
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801008a:	2114      	movs	r1, #20
 801008c:	68b8      	ldr	r0, [r7, #8]
 801008e:	f7fb fdaf 	bl	800bbf0 <pbuf_add_header>
 8010092:	4603      	mov	r3, r0
 8010094:	2b00      	cmp	r3, #0
 8010096:	d004      	beq.n	80100a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010098:	6938      	ldr	r0, [r7, #16]
 801009a:	f7fd f8ce 	bl	800d23a <tcp_seg_free>
    return NULL;
 801009e:	2300      	movs	r3, #0
 80100a0:	e037      	b.n	8010112 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	685a      	ldr	r2, [r3, #4]
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	8ada      	ldrh	r2, [r3, #22]
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	68dc      	ldr	r4, [r3, #12]
 80100b4:	4610      	mov	r0, r2
 80100b6:	f7fa fa9b 	bl	800a5f0 <lwip_htons>
 80100ba:	4603      	mov	r3, r0
 80100bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	8b1a      	ldrh	r2, [r3, #24]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	68dc      	ldr	r4, [r3, #12]
 80100c6:	4610      	mov	r0, r2
 80100c8:	f7fa fa92 	bl	800a5f0 <lwip_htons>
 80100cc:	4603      	mov	r3, r0
 80100ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80100d0:	693b      	ldr	r3, [r7, #16]
 80100d2:	68dc      	ldr	r4, [r3, #12]
 80100d4:	6838      	ldr	r0, [r7, #0]
 80100d6:	f7fa faa0 	bl	800a61a <lwip_htonl>
 80100da:	4603      	mov	r3, r0
 80100dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80100de:	7dfb      	ldrb	r3, [r7, #23]
 80100e0:	089b      	lsrs	r3, r3, #2
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	3305      	adds	r3, #5
 80100e8:	b29b      	uxth	r3, r3
 80100ea:	031b      	lsls	r3, r3, #12
 80100ec:	b29a      	uxth	r2, r3
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	4313      	orrs	r3, r2
 80100f4:	b29a      	uxth	r2, r3
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	68dc      	ldr	r4, [r3, #12]
 80100fa:	4610      	mov	r0, r2
 80100fc:	f7fa fa78 	bl	800a5f0 <lwip_htons>
 8010100:	4603      	mov	r3, r0
 8010102:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010104:	693b      	ldr	r3, [r7, #16]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	749a      	strb	r2, [r3, #18]
 801010c:	2200      	movs	r2, #0
 801010e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010110:	693b      	ldr	r3, [r7, #16]
}
 8010112:	4618      	mov	r0, r3
 8010114:	371c      	adds	r7, #28
 8010116:	46bd      	mov	sp, r7
 8010118:	bd90      	pop	{r4, r7, pc}
 801011a:	bf00      	nop
 801011c:	08018f00 	.word	0x08018f00
 8010120:	08018f34 	.word	0x08018f34
 8010124:	08018f54 	.word	0x08018f54
 8010128:	08018f7c 	.word	0x08018f7c
 801012c:	08018fa0 	.word	0x08018fa0

08010130 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010130:	b590      	push	{r4, r7, lr}
 8010132:	b08b      	sub	sp, #44	; 0x2c
 8010134:	af02      	add	r7, sp, #8
 8010136:	6078      	str	r0, [r7, #4]
 8010138:	460b      	mov	r3, r1
 801013a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801013c:	2300      	movs	r3, #0
 801013e:	61fb      	str	r3, [r7, #28]
 8010140:	2300      	movs	r3, #0
 8010142:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010144:	2300      	movs	r3, #0
 8010146:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d106      	bne.n	801015c <tcp_split_unsent_seg+0x2c>
 801014e:	4b95      	ldr	r3, [pc, #596]	; (80103a4 <tcp_split_unsent_seg+0x274>)
 8010150:	f240 324b 	movw	r2, #843	; 0x34b
 8010154:	4994      	ldr	r1, [pc, #592]	; (80103a8 <tcp_split_unsent_seg+0x278>)
 8010156:	4895      	ldr	r0, [pc, #596]	; (80103ac <tcp_split_unsent_seg+0x27c>)
 8010158:	f006 fb4e 	bl	80167f8 <iprintf>

  useg = pcb->unsent;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010160:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d102      	bne.n	801016e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010168:	f04f 33ff 	mov.w	r3, #4294967295
 801016c:	e116      	b.n	801039c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801016e:	887b      	ldrh	r3, [r7, #2]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d109      	bne.n	8010188 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010174:	4b8b      	ldr	r3, [pc, #556]	; (80103a4 <tcp_split_unsent_seg+0x274>)
 8010176:	f240 3253 	movw	r2, #851	; 0x353
 801017a:	498d      	ldr	r1, [pc, #564]	; (80103b0 <tcp_split_unsent_seg+0x280>)
 801017c:	488b      	ldr	r0, [pc, #556]	; (80103ac <tcp_split_unsent_seg+0x27c>)
 801017e:	f006 fb3b 	bl	80167f8 <iprintf>
    return ERR_VAL;
 8010182:	f06f 0305 	mvn.w	r3, #5
 8010186:	e109      	b.n	801039c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010188:	697b      	ldr	r3, [r7, #20]
 801018a:	891b      	ldrh	r3, [r3, #8]
 801018c:	887a      	ldrh	r2, [r7, #2]
 801018e:	429a      	cmp	r2, r3
 8010190:	d301      	bcc.n	8010196 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010192:	2300      	movs	r3, #0
 8010194:	e102      	b.n	801039c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801019a:	887a      	ldrh	r2, [r7, #2]
 801019c:	429a      	cmp	r2, r3
 801019e:	d906      	bls.n	80101ae <tcp_split_unsent_seg+0x7e>
 80101a0:	4b80      	ldr	r3, [pc, #512]	; (80103a4 <tcp_split_unsent_seg+0x274>)
 80101a2:	f240 325b 	movw	r2, #859	; 0x35b
 80101a6:	4983      	ldr	r1, [pc, #524]	; (80103b4 <tcp_split_unsent_seg+0x284>)
 80101a8:	4880      	ldr	r0, [pc, #512]	; (80103ac <tcp_split_unsent_seg+0x27c>)
 80101aa:	f006 fb25 	bl	80167f8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80101ae:	697b      	ldr	r3, [r7, #20]
 80101b0:	891b      	ldrh	r3, [r3, #8]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d106      	bne.n	80101c4 <tcp_split_unsent_seg+0x94>
 80101b6:	4b7b      	ldr	r3, [pc, #492]	; (80103a4 <tcp_split_unsent_seg+0x274>)
 80101b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80101bc:	497e      	ldr	r1, [pc, #504]	; (80103b8 <tcp_split_unsent_seg+0x288>)
 80101be:	487b      	ldr	r0, [pc, #492]	; (80103ac <tcp_split_unsent_seg+0x27c>)
 80101c0:	f006 fb1a 	bl	80167f8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	7a9b      	ldrb	r3, [r3, #10]
 80101c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80101ca:	7bfb      	ldrb	r3, [r7, #15]
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	f003 0304 	and.w	r3, r3, #4
 80101d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80101d6:	697b      	ldr	r3, [r7, #20]
 80101d8:	891a      	ldrh	r2, [r3, #8]
 80101da:	887b      	ldrh	r3, [r7, #2]
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80101e0:	7bbb      	ldrb	r3, [r7, #14]
 80101e2:	b29a      	uxth	r2, r3
 80101e4:	89bb      	ldrh	r3, [r7, #12]
 80101e6:	4413      	add	r3, r2
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101ee:	4619      	mov	r1, r3
 80101f0:	2036      	movs	r0, #54	; 0x36
 80101f2:	f7fb faaf 	bl	800b754 <pbuf_alloc>
 80101f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101f8:	693b      	ldr	r3, [r7, #16]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	f000 80b7 	beq.w	801036e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	685b      	ldr	r3, [r3, #4]
 8010204:	891a      	ldrh	r2, [r3, #8]
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	891b      	ldrh	r3, [r3, #8]
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	b29a      	uxth	r2, r3
 801020e:	887b      	ldrh	r3, [r7, #2]
 8010210:	4413      	add	r3, r2
 8010212:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	6858      	ldr	r0, [r3, #4]
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	685a      	ldr	r2, [r3, #4]
 801021c:	7bbb      	ldrb	r3, [r7, #14]
 801021e:	18d1      	adds	r1, r2, r3
 8010220:	897b      	ldrh	r3, [r7, #10]
 8010222:	89ba      	ldrh	r2, [r7, #12]
 8010224:	f7fb ff80 	bl	800c128 <pbuf_copy_partial>
 8010228:	4603      	mov	r3, r0
 801022a:	461a      	mov	r2, r3
 801022c:	89bb      	ldrh	r3, [r7, #12]
 801022e:	4293      	cmp	r3, r2
 8010230:	f040 809f 	bne.w	8010372 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010234:	697b      	ldr	r3, [r7, #20]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	899b      	ldrh	r3, [r3, #12]
 801023a:	b29b      	uxth	r3, r3
 801023c:	4618      	mov	r0, r3
 801023e:	f7fa f9d7 	bl	800a5f0 <lwip_htons>
 8010242:	4603      	mov	r3, r0
 8010244:	b2db      	uxtb	r3, r3
 8010246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801024a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801024c:	2300      	movs	r3, #0
 801024e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010250:	7efb      	ldrb	r3, [r7, #27]
 8010252:	f003 0308 	and.w	r3, r3, #8
 8010256:	2b00      	cmp	r3, #0
 8010258:	d007      	beq.n	801026a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801025a:	7efb      	ldrb	r3, [r7, #27]
 801025c:	f023 0308 	bic.w	r3, r3, #8
 8010260:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010262:	7ebb      	ldrb	r3, [r7, #26]
 8010264:	f043 0308 	orr.w	r3, r3, #8
 8010268:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801026a:	7efb      	ldrb	r3, [r7, #27]
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	2b00      	cmp	r3, #0
 8010272:	d007      	beq.n	8010284 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010274:	7efb      	ldrb	r3, [r7, #27]
 8010276:	f023 0301 	bic.w	r3, r3, #1
 801027a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801027c:	7ebb      	ldrb	r3, [r7, #26]
 801027e:	f043 0301 	orr.w	r3, r3, #1
 8010282:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	68db      	ldr	r3, [r3, #12]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	4618      	mov	r0, r3
 801028c:	f7fa f9c5 	bl	800a61a <lwip_htonl>
 8010290:	4602      	mov	r2, r0
 8010292:	887b      	ldrh	r3, [r7, #2]
 8010294:	18d1      	adds	r1, r2, r3
 8010296:	7eba      	ldrb	r2, [r7, #26]
 8010298:	7bfb      	ldrb	r3, [r7, #15]
 801029a:	9300      	str	r3, [sp, #0]
 801029c:	460b      	mov	r3, r1
 801029e:	6939      	ldr	r1, [r7, #16]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7ff fea7 	bl	800fff4 <tcp_create_segment>
 80102a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d063      	beq.n	8010376 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80102ae:	697b      	ldr	r3, [r7, #20]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	4618      	mov	r0, r3
 80102b4:	f7fb fdc0 	bl	800be38 <pbuf_clen>
 80102b8:	4603      	mov	r3, r0
 80102ba:	461a      	mov	r2, r3
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102c2:	1a9b      	subs	r3, r3, r2
 80102c4:	b29a      	uxth	r2, r3
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	6858      	ldr	r0, [r3, #4]
 80102d0:	697b      	ldr	r3, [r7, #20]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	891a      	ldrh	r2, [r3, #8]
 80102d6:	89bb      	ldrh	r3, [r7, #12]
 80102d8:	1ad3      	subs	r3, r2, r3
 80102da:	b29b      	uxth	r3, r3
 80102dc:	4619      	mov	r1, r3
 80102de:	f7fb fb97 	bl	800ba10 <pbuf_realloc>
  useg->len -= remainder;
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	891a      	ldrh	r2, [r3, #8]
 80102e6:	89bb      	ldrh	r3, [r7, #12]
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	697b      	ldr	r3, [r7, #20]
 80102ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	68db      	ldr	r3, [r3, #12]
 80102f4:	899b      	ldrh	r3, [r3, #12]
 80102f6:	b29c      	uxth	r4, r3
 80102f8:	7efb      	ldrb	r3, [r7, #27]
 80102fa:	b29b      	uxth	r3, r3
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7fa f977 	bl	800a5f0 <lwip_htons>
 8010302:	4603      	mov	r3, r0
 8010304:	461a      	mov	r2, r3
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	68db      	ldr	r3, [r3, #12]
 801030a:	4322      	orrs	r2, r4
 801030c:	b292      	uxth	r2, r2
 801030e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	685b      	ldr	r3, [r3, #4]
 8010314:	4618      	mov	r0, r3
 8010316:	f7fb fd8f 	bl	800be38 <pbuf_clen>
 801031a:	4603      	mov	r3, r0
 801031c:	461a      	mov	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010324:	4413      	add	r3, r2
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	4618      	mov	r0, r3
 8010334:	f7fb fd80 	bl	800be38 <pbuf_clen>
 8010338:	4603      	mov	r3, r0
 801033a:	461a      	mov	r2, r3
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010342:	4413      	add	r3, r2
 8010344:	b29a      	uxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	69fb      	ldr	r3, [r7, #28]
 8010352:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	69fa      	ldr	r2, [r7, #28]
 8010358:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	681b      	ldr	r3, [r3, #0]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d103      	bne.n	801036a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2200      	movs	r2, #0
 8010366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801036a:	2300      	movs	r3, #0
 801036c:	e016      	b.n	801039c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801036e:	bf00      	nop
 8010370:	e002      	b.n	8010378 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010372:	bf00      	nop
 8010374:	e000      	b.n	8010378 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010376:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010378:	69fb      	ldr	r3, [r7, #28]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d006      	beq.n	801038c <tcp_split_unsent_seg+0x25c>
 801037e:	4b09      	ldr	r3, [pc, #36]	; (80103a4 <tcp_split_unsent_seg+0x274>)
 8010380:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010384:	490d      	ldr	r1, [pc, #52]	; (80103bc <tcp_split_unsent_seg+0x28c>)
 8010386:	4809      	ldr	r0, [pc, #36]	; (80103ac <tcp_split_unsent_seg+0x27c>)
 8010388:	f006 fa36 	bl	80167f8 <iprintf>
  if (p != NULL) {
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d002      	beq.n	8010398 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010392:	6938      	ldr	r0, [r7, #16]
 8010394:	f7fb fcc2 	bl	800bd1c <pbuf_free>
  }

  return ERR_MEM;
 8010398:	f04f 33ff 	mov.w	r3, #4294967295
}
 801039c:	4618      	mov	r0, r3
 801039e:	3724      	adds	r7, #36	; 0x24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd90      	pop	{r4, r7, pc}
 80103a4:	08018f00 	.word	0x08018f00
 80103a8:	08019294 	.word	0x08019294
 80103ac:	08018f54 	.word	0x08018f54
 80103b0:	080192b8 	.word	0x080192b8
 80103b4:	080192dc 	.word	0x080192dc
 80103b8:	080192ec 	.word	0x080192ec
 80103bc:	080192fc 	.word	0x080192fc

080103c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80103c0:	b590      	push	{r4, r7, lr}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d106      	bne.n	80103dc <tcp_send_fin+0x1c>
 80103ce:	4b21      	ldr	r3, [pc, #132]	; (8010454 <tcp_send_fin+0x94>)
 80103d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80103d4:	4920      	ldr	r1, [pc, #128]	; (8010458 <tcp_send_fin+0x98>)
 80103d6:	4821      	ldr	r0, [pc, #132]	; (801045c <tcp_send_fin+0x9c>)
 80103d8:	f006 fa0e 	bl	80167f8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d02e      	beq.n	8010442 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103e8:	60fb      	str	r3, [r7, #12]
 80103ea:	e002      	b.n	80103f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d1f8      	bne.n	80103ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	899b      	ldrh	r3, [r3, #12]
 8010400:	b29b      	uxth	r3, r3
 8010402:	4618      	mov	r0, r3
 8010404:	f7fa f8f4 	bl	800a5f0 <lwip_htons>
 8010408:	4603      	mov	r3, r0
 801040a:	b2db      	uxtb	r3, r3
 801040c:	f003 0307 	and.w	r3, r3, #7
 8010410:	2b00      	cmp	r3, #0
 8010412:	d116      	bne.n	8010442 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	899b      	ldrh	r3, [r3, #12]
 801041a:	b29c      	uxth	r4, r3
 801041c:	2001      	movs	r0, #1
 801041e:	f7fa f8e7 	bl	800a5f0 <lwip_htons>
 8010422:	4603      	mov	r3, r0
 8010424:	461a      	mov	r2, r3
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	4322      	orrs	r2, r4
 801042c:	b292      	uxth	r2, r2
 801042e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	8b5b      	ldrh	r3, [r3, #26]
 8010434:	f043 0320 	orr.w	r3, r3, #32
 8010438:	b29a      	uxth	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	e004      	b.n	801044c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010442:	2101      	movs	r1, #1
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f000 f80b 	bl	8010460 <tcp_enqueue_flags>
 801044a:	4603      	mov	r3, r0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3714      	adds	r7, #20
 8010450:	46bd      	mov	sp, r7
 8010452:	bd90      	pop	{r4, r7, pc}
 8010454:	08018f00 	.word	0x08018f00
 8010458:	08019308 	.word	0x08019308
 801045c:	08018f54 	.word	0x08018f54

08010460 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b08a      	sub	sp, #40	; 0x28
 8010464:	af02      	add	r7, sp, #8
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801046c:	2300      	movs	r3, #0
 801046e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010470:	2300      	movs	r3, #0
 8010472:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010474:	78fb      	ldrb	r3, [r7, #3]
 8010476:	f003 0303 	and.w	r3, r3, #3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d106      	bne.n	801048c <tcp_enqueue_flags+0x2c>
 801047e:	4b67      	ldr	r3, [pc, #412]	; (801061c <tcp_enqueue_flags+0x1bc>)
 8010480:	f240 4211 	movw	r2, #1041	; 0x411
 8010484:	4966      	ldr	r1, [pc, #408]	; (8010620 <tcp_enqueue_flags+0x1c0>)
 8010486:	4867      	ldr	r0, [pc, #412]	; (8010624 <tcp_enqueue_flags+0x1c4>)
 8010488:	f006 f9b6 	bl	80167f8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	2b00      	cmp	r3, #0
 8010490:	d106      	bne.n	80104a0 <tcp_enqueue_flags+0x40>
 8010492:	4b62      	ldr	r3, [pc, #392]	; (801061c <tcp_enqueue_flags+0x1bc>)
 8010494:	f240 4213 	movw	r2, #1043	; 0x413
 8010498:	4963      	ldr	r1, [pc, #396]	; (8010628 <tcp_enqueue_flags+0x1c8>)
 801049a:	4862      	ldr	r0, [pc, #392]	; (8010624 <tcp_enqueue_flags+0x1c4>)
 801049c:	f006 f9ac 	bl	80167f8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80104a0:	78fb      	ldrb	r3, [r7, #3]
 80104a2:	f003 0302 	and.w	r3, r3, #2
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d001      	beq.n	80104ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80104aa:	2301      	movs	r3, #1
 80104ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80104ae:	7ffb      	ldrb	r3, [r7, #31]
 80104b0:	009b      	lsls	r3, r3, #2
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	f003 0304 	and.w	r3, r3, #4
 80104b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80104ba:	7dfb      	ldrb	r3, [r7, #23]
 80104bc:	b29b      	uxth	r3, r3
 80104be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80104c2:	4619      	mov	r1, r3
 80104c4:	2036      	movs	r0, #54	; 0x36
 80104c6:	f7fb f945 	bl	800b754 <pbuf_alloc>
 80104ca:	6138      	str	r0, [r7, #16]
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d109      	bne.n	80104e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	8b5b      	ldrh	r3, [r3, #26]
 80104d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104da:	b29a      	uxth	r2, r3
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80104e0:	f04f 33ff 	mov.w	r3, #4294967295
 80104e4:	e095      	b.n	8010612 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	895a      	ldrh	r2, [r3, #10]
 80104ea:	7dfb      	ldrb	r3, [r7, #23]
 80104ec:	b29b      	uxth	r3, r3
 80104ee:	429a      	cmp	r2, r3
 80104f0:	d206      	bcs.n	8010500 <tcp_enqueue_flags+0xa0>
 80104f2:	4b4a      	ldr	r3, [pc, #296]	; (801061c <tcp_enqueue_flags+0x1bc>)
 80104f4:	f240 4239 	movw	r2, #1081	; 0x439
 80104f8:	494c      	ldr	r1, [pc, #304]	; (801062c <tcp_enqueue_flags+0x1cc>)
 80104fa:	484a      	ldr	r0, [pc, #296]	; (8010624 <tcp_enqueue_flags+0x1c4>)
 80104fc:	f006 f97c 	bl	80167f8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010504:	78fa      	ldrb	r2, [r7, #3]
 8010506:	7ffb      	ldrb	r3, [r7, #31]
 8010508:	9300      	str	r3, [sp, #0]
 801050a:	460b      	mov	r3, r1
 801050c:	6939      	ldr	r1, [r7, #16]
 801050e:	6878      	ldr	r0, [r7, #4]
 8010510:	f7ff fd70 	bl	800fff4 <tcp_create_segment>
 8010514:	60f8      	str	r0, [r7, #12]
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d109      	bne.n	8010530 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	8b5b      	ldrh	r3, [r3, #26]
 8010520:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010524:	b29a      	uxth	r2, r3
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801052a:	f04f 33ff 	mov.w	r3, #4294967295
 801052e:	e070      	b.n	8010612 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68db      	ldr	r3, [r3, #12]
 8010534:	f003 0303 	and.w	r3, r3, #3
 8010538:	2b00      	cmp	r3, #0
 801053a:	d006      	beq.n	801054a <tcp_enqueue_flags+0xea>
 801053c:	4b37      	ldr	r3, [pc, #220]	; (801061c <tcp_enqueue_flags+0x1bc>)
 801053e:	f240 4242 	movw	r2, #1090	; 0x442
 8010542:	493b      	ldr	r1, [pc, #236]	; (8010630 <tcp_enqueue_flags+0x1d0>)
 8010544:	4837      	ldr	r0, [pc, #220]	; (8010624 <tcp_enqueue_flags+0x1c4>)
 8010546:	f006 f957 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	891b      	ldrh	r3, [r3, #8]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d006      	beq.n	8010560 <tcp_enqueue_flags+0x100>
 8010552:	4b32      	ldr	r3, [pc, #200]	; (801061c <tcp_enqueue_flags+0x1bc>)
 8010554:	f240 4243 	movw	r2, #1091	; 0x443
 8010558:	4936      	ldr	r1, [pc, #216]	; (8010634 <tcp_enqueue_flags+0x1d4>)
 801055a:	4832      	ldr	r0, [pc, #200]	; (8010624 <tcp_enqueue_flags+0x1c4>)
 801055c:	f006 f94c 	bl	80167f8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d103      	bne.n	8010570 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	66da      	str	r2, [r3, #108]	; 0x6c
 801056e:	e00d      	b.n	801058c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010574:	61bb      	str	r3, [r7, #24]
 8010576:	e002      	b.n	801057e <tcp_enqueue_flags+0x11e>
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	61bb      	str	r3, [r7, #24]
 801057e:	69bb      	ldr	r3, [r7, #24]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d1f8      	bne.n	8010578 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	68fa      	ldr	r2, [r7, #12]
 801058a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010594:	78fb      	ldrb	r3, [r7, #3]
 8010596:	f003 0302 	and.w	r3, r3, #2
 801059a:	2b00      	cmp	r3, #0
 801059c:	d104      	bne.n	80105a8 <tcp_enqueue_flags+0x148>
 801059e:	78fb      	ldrb	r3, [r7, #3]
 80105a0:	f003 0301 	and.w	r3, r3, #1
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d004      	beq.n	80105b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80105ac:	1c5a      	adds	r2, r3, #1
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80105b2:	78fb      	ldrb	r3, [r7, #3]
 80105b4:	f003 0301 	and.w	r3, r3, #1
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d006      	beq.n	80105ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	8b5b      	ldrh	r3, [r3, #26]
 80105c0:	f043 0320 	orr.w	r3, r3, #32
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fb fc32 	bl	800be38 <pbuf_clen>
 80105d4:	4603      	mov	r3, r0
 80105d6:	461a      	mov	r2, r3
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105de:	4413      	add	r3, r2
 80105e0:	b29a      	uxth	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d00e      	beq.n	8010610 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d10a      	bne.n	8010610 <tcp_enqueue_flags+0x1b0>
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d106      	bne.n	8010610 <tcp_enqueue_flags+0x1b0>
 8010602:	4b06      	ldr	r3, [pc, #24]	; (801061c <tcp_enqueue_flags+0x1bc>)
 8010604:	f240 4265 	movw	r2, #1125	; 0x465
 8010608:	490b      	ldr	r1, [pc, #44]	; (8010638 <tcp_enqueue_flags+0x1d8>)
 801060a:	4806      	ldr	r0, [pc, #24]	; (8010624 <tcp_enqueue_flags+0x1c4>)
 801060c:	f006 f8f4 	bl	80167f8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010610:	2300      	movs	r3, #0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3720      	adds	r7, #32
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	08018f00 	.word	0x08018f00
 8010620:	08019324 	.word	0x08019324
 8010624:	08018f54 	.word	0x08018f54
 8010628:	0801937c 	.word	0x0801937c
 801062c:	0801939c 	.word	0x0801939c
 8010630:	080193d8 	.word	0x080193d8
 8010634:	080193f0 	.word	0x080193f0
 8010638:	0801941c 	.word	0x0801941c

0801063c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801063c:	b5b0      	push	{r4, r5, r7, lr}
 801063e:	b08a      	sub	sp, #40	; 0x28
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <tcp_output+0x1c>
 801064a:	4b8a      	ldr	r3, [pc, #552]	; (8010874 <tcp_output+0x238>)
 801064c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010650:	4989      	ldr	r1, [pc, #548]	; (8010878 <tcp_output+0x23c>)
 8010652:	488a      	ldr	r0, [pc, #552]	; (801087c <tcp_output+0x240>)
 8010654:	f006 f8d0 	bl	80167f8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	7d1b      	ldrb	r3, [r3, #20]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d106      	bne.n	801066e <tcp_output+0x32>
 8010660:	4b84      	ldr	r3, [pc, #528]	; (8010874 <tcp_output+0x238>)
 8010662:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010666:	4986      	ldr	r1, [pc, #536]	; (8010880 <tcp_output+0x244>)
 8010668:	4884      	ldr	r0, [pc, #528]	; (801087c <tcp_output+0x240>)
 801066a:	f006 f8c5 	bl	80167f8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801066e:	4b85      	ldr	r3, [pc, #532]	; (8010884 <tcp_output+0x248>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	429a      	cmp	r2, r3
 8010676:	d101      	bne.n	801067c <tcp_output+0x40>
    return ERR_OK;
 8010678:	2300      	movs	r3, #0
 801067a:	e1ce      	b.n	8010a1a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010688:	4293      	cmp	r3, r2
 801068a:	bf28      	it	cs
 801068c:	4613      	movcs	r3, r2
 801068e:	b29b      	uxth	r3, r3
 8010690:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010696:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801069a:	2b00      	cmp	r3, #0
 801069c:	d10b      	bne.n	80106b6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	8b5b      	ldrh	r3, [r3, #26]
 80106a2:	f003 0302 	and.w	r3, r3, #2
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	f000 81aa 	beq.w	8010a00 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f000 fdcb 	bl	8011248 <tcp_send_empty_ack>
 80106b2:	4603      	mov	r3, r0
 80106b4:	e1b1      	b.n	8010a1a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80106b6:	6879      	ldr	r1, [r7, #4]
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	3304      	adds	r3, #4
 80106bc:	461a      	mov	r2, r3
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f7ff fc7c 	bl	800ffbc <tcp_route>
 80106c4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d102      	bne.n	80106d2 <tcp_output+0x96>
    return ERR_RTE;
 80106cc:	f06f 0303 	mvn.w	r3, #3
 80106d0:	e1a3      	b.n	8010a1a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d003      	beq.n	80106e0 <tcp_output+0xa4>
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d111      	bne.n	8010704 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d002      	beq.n	80106ec <tcp_output+0xb0>
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	3304      	adds	r3, #4
 80106ea:	e000      	b.n	80106ee <tcp_output+0xb2>
 80106ec:	2300      	movs	r3, #0
 80106ee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80106f0:	693b      	ldr	r3, [r7, #16]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d102      	bne.n	80106fc <tcp_output+0xc0>
      return ERR_RTE;
 80106f6:	f06f 0303 	mvn.w	r3, #3
 80106fa:	e18e      	b.n	8010a1a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	681a      	ldr	r2, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	4618      	mov	r0, r3
 801070c:	f7f9 ff85 	bl	800a61a <lwip_htonl>
 8010710:	4602      	mov	r2, r0
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010716:	1ad3      	subs	r3, r2, r3
 8010718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071a:	8912      	ldrh	r2, [r2, #8]
 801071c:	4413      	add	r3, r2
 801071e:	69ba      	ldr	r2, [r7, #24]
 8010720:	429a      	cmp	r2, r3
 8010722:	d227      	bcs.n	8010774 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801072a:	461a      	mov	r2, r3
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	4293      	cmp	r3, r2
 8010730:	d114      	bne.n	801075c <tcp_output+0x120>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010736:	2b00      	cmp	r3, #0
 8010738:	d110      	bne.n	801075c <tcp_output+0x120>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010740:	2b00      	cmp	r3, #0
 8010742:	d10b      	bne.n	801075c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	2200      	movs	r2, #0
 8010748:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2201      	movs	r2, #1
 8010750:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	8b5b      	ldrh	r3, [r3, #26]
 8010760:	f003 0302 	and.w	r3, r3, #2
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 814d 	beq.w	8010a04 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f000 fd6c 	bl	8011248 <tcp_send_empty_ack>
 8010770:	4603      	mov	r3, r0
 8010772:	e152      	b.n	8010a1a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	2200      	movs	r2, #0
 8010778:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010780:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010782:	6a3b      	ldr	r3, [r7, #32]
 8010784:	2b00      	cmp	r3, #0
 8010786:	f000 811c 	beq.w	80109c2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801078a:	e002      	b.n	8010792 <tcp_output+0x156>
 801078c:	6a3b      	ldr	r3, [r7, #32]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	623b      	str	r3, [r7, #32]
 8010792:	6a3b      	ldr	r3, [r7, #32]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d1f8      	bne.n	801078c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801079a:	e112      	b.n	80109c2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801079c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801079e:	68db      	ldr	r3, [r3, #12]
 80107a0:	899b      	ldrh	r3, [r3, #12]
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7f9 ff23 	bl	800a5f0 <lwip_htons>
 80107aa:	4603      	mov	r3, r0
 80107ac:	b2db      	uxtb	r3, r3
 80107ae:	f003 0304 	and.w	r3, r3, #4
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d006      	beq.n	80107c4 <tcp_output+0x188>
 80107b6:	4b2f      	ldr	r3, [pc, #188]	; (8010874 <tcp_output+0x238>)
 80107b8:	f240 5236 	movw	r2, #1334	; 0x536
 80107bc:	4932      	ldr	r1, [pc, #200]	; (8010888 <tcp_output+0x24c>)
 80107be:	482f      	ldr	r0, [pc, #188]	; (801087c <tcp_output+0x240>)
 80107c0:	f006 f81a 	bl	80167f8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d01f      	beq.n	801080c <tcp_output+0x1d0>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	8b5b      	ldrh	r3, [r3, #26]
 80107d0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d119      	bne.n	801080c <tcp_output+0x1d0>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00b      	beq.n	80107f8 <tcp_output+0x1bc>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d110      	bne.n	801080c <tcp_output+0x1d0>
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ee:	891a      	ldrh	r2, [r3, #8]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d209      	bcs.n	801080c <tcp_output+0x1d0>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d004      	beq.n	801080c <tcp_output+0x1d0>
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010808:	2b08      	cmp	r3, #8
 801080a:	d901      	bls.n	8010810 <tcp_output+0x1d4>
 801080c:	2301      	movs	r3, #1
 801080e:	e000      	b.n	8010812 <tcp_output+0x1d6>
 8010810:	2300      	movs	r3, #0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d106      	bne.n	8010824 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	8b5b      	ldrh	r3, [r3, #26]
 801081a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801081e:	2b00      	cmp	r3, #0
 8010820:	f000 80e4 	beq.w	80109ec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	7d1b      	ldrb	r3, [r3, #20]
 8010828:	2b02      	cmp	r3, #2
 801082a:	d00d      	beq.n	8010848 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801082c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	899b      	ldrh	r3, [r3, #12]
 8010832:	b29c      	uxth	r4, r3
 8010834:	2010      	movs	r0, #16
 8010836:	f7f9 fedb 	bl	800a5f0 <lwip_htons>
 801083a:	4603      	mov	r3, r0
 801083c:	461a      	mov	r2, r3
 801083e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	4322      	orrs	r2, r4
 8010844:	b292      	uxth	r2, r2
 8010846:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010848:	697a      	ldr	r2, [r7, #20]
 801084a:	6879      	ldr	r1, [r7, #4]
 801084c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801084e:	f000 f909 	bl	8010a64 <tcp_output_segment>
 8010852:	4603      	mov	r3, r0
 8010854:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d016      	beq.n	801088c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	8b5b      	ldrh	r3, [r3, #26]
 8010862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010866:	b29a      	uxth	r2, r3
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	835a      	strh	r2, [r3, #26]
      return err;
 801086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010870:	e0d3      	b.n	8010a1a <tcp_output+0x3de>
 8010872:	bf00      	nop
 8010874:	08018f00 	.word	0x08018f00
 8010878:	08019444 	.word	0x08019444
 801087c:	08018f54 	.word	0x08018f54
 8010880:	0801945c 	.word	0x0801945c
 8010884:	2000de80 	.word	0x2000de80
 8010888:	08019484 	.word	0x08019484
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801088c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	7d1b      	ldrb	r3, [r3, #20]
 8010898:	2b02      	cmp	r3, #2
 801089a:	d006      	beq.n	80108aa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	8b5b      	ldrh	r3, [r3, #26]
 80108a0:	f023 0303 	bic.w	r3, r3, #3
 80108a4:	b29a      	uxth	r2, r3
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80108aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	685b      	ldr	r3, [r3, #4]
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7f9 feb2 	bl	800a61a <lwip_htonl>
 80108b6:	4604      	mov	r4, r0
 80108b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ba:	891b      	ldrh	r3, [r3, #8]
 80108bc:	461d      	mov	r5, r3
 80108be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	899b      	ldrh	r3, [r3, #12]
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	4618      	mov	r0, r3
 80108c8:	f7f9 fe92 	bl	800a5f0 <lwip_htons>
 80108cc:	4603      	mov	r3, r0
 80108ce:	b2db      	uxtb	r3, r3
 80108d0:	f003 0303 	and.w	r3, r3, #3
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d001      	beq.n	80108dc <tcp_output+0x2a0>
 80108d8:	2301      	movs	r3, #1
 80108da:	e000      	b.n	80108de <tcp_output+0x2a2>
 80108dc:	2300      	movs	r3, #0
 80108de:	442b      	add	r3, r5
 80108e0:	4423      	add	r3, r4
 80108e2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108e8:	68bb      	ldr	r3, [r7, #8]
 80108ea:	1ad3      	subs	r3, r2, r3
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	da02      	bge.n	80108f6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68ba      	ldr	r2, [r7, #8]
 80108f4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80108f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108f8:	891b      	ldrh	r3, [r3, #8]
 80108fa:	461c      	mov	r4, r3
 80108fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fe:	68db      	ldr	r3, [r3, #12]
 8010900:	899b      	ldrh	r3, [r3, #12]
 8010902:	b29b      	uxth	r3, r3
 8010904:	4618      	mov	r0, r3
 8010906:	f7f9 fe73 	bl	800a5f0 <lwip_htons>
 801090a:	4603      	mov	r3, r0
 801090c:	b2db      	uxtb	r3, r3
 801090e:	f003 0303 	and.w	r3, r3, #3
 8010912:	2b00      	cmp	r3, #0
 8010914:	d001      	beq.n	801091a <tcp_output+0x2de>
 8010916:	2301      	movs	r3, #1
 8010918:	e000      	b.n	801091c <tcp_output+0x2e0>
 801091a:	2300      	movs	r3, #0
 801091c:	4423      	add	r3, r4
 801091e:	2b00      	cmp	r3, #0
 8010920:	d049      	beq.n	80109b6 <tcp_output+0x37a>
      seg->next = NULL;
 8010922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010924:	2200      	movs	r2, #0
 8010926:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801092c:	2b00      	cmp	r3, #0
 801092e:	d105      	bne.n	801093c <tcp_output+0x300>
        pcb->unacked = seg;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010934:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010938:	623b      	str	r3, [r7, #32]
 801093a:	e03f      	b.n	80109bc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	685b      	ldr	r3, [r3, #4]
 8010942:	4618      	mov	r0, r3
 8010944:	f7f9 fe69 	bl	800a61a <lwip_htonl>
 8010948:	4604      	mov	r4, r0
 801094a:	6a3b      	ldr	r3, [r7, #32]
 801094c:	68db      	ldr	r3, [r3, #12]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	4618      	mov	r0, r3
 8010952:	f7f9 fe62 	bl	800a61a <lwip_htonl>
 8010956:	4603      	mov	r3, r0
 8010958:	1ae3      	subs	r3, r4, r3
 801095a:	2b00      	cmp	r3, #0
 801095c:	da24      	bge.n	80109a8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	3370      	adds	r3, #112	; 0x70
 8010962:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010964:	e002      	b.n	801096c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010966:	69fb      	ldr	r3, [r7, #28]
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d011      	beq.n	8010998 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010974:	69fb      	ldr	r3, [r7, #28]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	68db      	ldr	r3, [r3, #12]
 801097a:	685b      	ldr	r3, [r3, #4]
 801097c:	4618      	mov	r0, r3
 801097e:	f7f9 fe4c 	bl	800a61a <lwip_htonl>
 8010982:	4604      	mov	r4, r0
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	4618      	mov	r0, r3
 801098c:	f7f9 fe45 	bl	800a61a <lwip_htonl>
 8010990:	4603      	mov	r3, r0
 8010992:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010994:	2b00      	cmp	r3, #0
 8010996:	dbe6      	blt.n	8010966 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010998:	69fb      	ldr	r3, [r7, #28]
 801099a:	681a      	ldr	r2, [r3, #0]
 801099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801099e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80109a0:	69fb      	ldr	r3, [r7, #28]
 80109a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109a4:	601a      	str	r2, [r3, #0]
 80109a6:	e009      	b.n	80109bc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80109a8:	6a3b      	ldr	r3, [r7, #32]
 80109aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80109ae:	6a3b      	ldr	r3, [r7, #32]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	623b      	str	r3, [r7, #32]
 80109b4:	e002      	b.n	80109bc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80109b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109b8:	f7fc fc3f 	bl	800d23a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80109c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d012      	beq.n	80109ee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80109c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7f9 fe23 	bl	800a61a <lwip_htonl>
 80109d4:	4602      	mov	r2, r0
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109de:	8912      	ldrh	r2, [r2, #8]
 80109e0:	4413      	add	r3, r2
  while (seg != NULL &&
 80109e2:	69ba      	ldr	r2, [r7, #24]
 80109e4:	429a      	cmp	r2, r3
 80109e6:	f4bf aed9 	bcs.w	801079c <tcp_output+0x160>
 80109ea:	e000      	b.n	80109ee <tcp_output+0x3b2>
      break;
 80109ec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d108      	bne.n	8010a08 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	2200      	movs	r2, #0
 80109fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80109fe:	e004      	b.n	8010a0a <tcp_output+0x3ce>
    goto output_done;
 8010a00:	bf00      	nop
 8010a02:	e002      	b.n	8010a0a <tcp_output+0x3ce>
    goto output_done;
 8010a04:	bf00      	nop
 8010a06:	e000      	b.n	8010a0a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010a08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	8b5b      	ldrh	r3, [r3, #26]
 8010a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a12:	b29a      	uxth	r2, r3
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010a18:	2300      	movs	r3, #0
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3728      	adds	r7, #40	; 0x28
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bdb0      	pop	{r4, r5, r7, pc}
 8010a22:	bf00      	nop

08010a24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d106      	bne.n	8010a40 <tcp_output_segment_busy+0x1c>
 8010a32:	4b09      	ldr	r3, [pc, #36]	; (8010a58 <tcp_output_segment_busy+0x34>)
 8010a34:	f240 529a 	movw	r2, #1434	; 0x59a
 8010a38:	4908      	ldr	r1, [pc, #32]	; (8010a5c <tcp_output_segment_busy+0x38>)
 8010a3a:	4809      	ldr	r0, [pc, #36]	; (8010a60 <tcp_output_segment_busy+0x3c>)
 8010a3c:	f005 fedc 	bl	80167f8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	7b9b      	ldrb	r3, [r3, #14]
 8010a46:	2b01      	cmp	r3, #1
 8010a48:	d001      	beq.n	8010a4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010a4a:	2301      	movs	r3, #1
 8010a4c:	e000      	b.n	8010a50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010a4e:	2300      	movs	r3, #0
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	08018f00 	.word	0x08018f00
 8010a5c:	0801949c 	.word	0x0801949c
 8010a60:	08018f54 	.word	0x08018f54

08010a64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010a64:	b5b0      	push	{r4, r5, r7, lr}
 8010a66:	b08c      	sub	sp, #48	; 0x30
 8010a68:	af04      	add	r7, sp, #16
 8010a6a:	60f8      	str	r0, [r7, #12]
 8010a6c:	60b9      	str	r1, [r7, #8]
 8010a6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d106      	bne.n	8010a84 <tcp_output_segment+0x20>
 8010a76:	4b64      	ldr	r3, [pc, #400]	; (8010c08 <tcp_output_segment+0x1a4>)
 8010a78:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010a7c:	4963      	ldr	r1, [pc, #396]	; (8010c0c <tcp_output_segment+0x1a8>)
 8010a7e:	4864      	ldr	r0, [pc, #400]	; (8010c10 <tcp_output_segment+0x1ac>)
 8010a80:	f005 feba 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d106      	bne.n	8010a98 <tcp_output_segment+0x34>
 8010a8a:	4b5f      	ldr	r3, [pc, #380]	; (8010c08 <tcp_output_segment+0x1a4>)
 8010a8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010a90:	4960      	ldr	r1, [pc, #384]	; (8010c14 <tcp_output_segment+0x1b0>)
 8010a92:	485f      	ldr	r0, [pc, #380]	; (8010c10 <tcp_output_segment+0x1ac>)
 8010a94:	f005 feb0 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d106      	bne.n	8010aac <tcp_output_segment+0x48>
 8010a9e:	4b5a      	ldr	r3, [pc, #360]	; (8010c08 <tcp_output_segment+0x1a4>)
 8010aa0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010aa4:	495c      	ldr	r1, [pc, #368]	; (8010c18 <tcp_output_segment+0x1b4>)
 8010aa6:	485a      	ldr	r0, [pc, #360]	; (8010c10 <tcp_output_segment+0x1ac>)
 8010aa8:	f005 fea6 	bl	80167f8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010aac:	68f8      	ldr	r0, [r7, #12]
 8010aae:	f7ff ffb9 	bl	8010a24 <tcp_output_segment_busy>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d001      	beq.n	8010abc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	e0a1      	b.n	8010c00 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	68dc      	ldr	r4, [r3, #12]
 8010ac4:	4610      	mov	r0, r2
 8010ac6:	f7f9 fda8 	bl	800a61a <lwip_htonl>
 8010aca:	4603      	mov	r3, r0
 8010acc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	68dc      	ldr	r4, [r3, #12]
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	f7f9 fd8a 	bl	800a5f0 <lwip_htons>
 8010adc:	4603      	mov	r3, r0
 8010ade:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ae4:	68ba      	ldr	r2, [r7, #8]
 8010ae6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010ae8:	441a      	add	r2, r3
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	68db      	ldr	r3, [r3, #12]
 8010af2:	3314      	adds	r3, #20
 8010af4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	7a9b      	ldrb	r3, [r3, #10]
 8010afa:	f003 0301 	and.w	r3, r3, #1
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d015      	beq.n	8010b2e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	3304      	adds	r3, #4
 8010b06:	461a      	mov	r2, r3
 8010b08:	6879      	ldr	r1, [r7, #4]
 8010b0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010b0e:	f7fc fe8b 	bl	800d828 <tcp_eff_send_mss_netif>
 8010b12:	4603      	mov	r3, r0
 8010b14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010b16:	8b7b      	ldrh	r3, [r7, #26]
 8010b18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f9 fd7c 	bl	800a61a <lwip_htonl>
 8010b22:	4602      	mov	r2, r0
 8010b24:	69fb      	ldr	r3, [r7, #28]
 8010b26:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	3304      	adds	r3, #4
 8010b2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	da02      	bge.n	8010b3e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d10c      	bne.n	8010b60 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010b46:	4b35      	ldr	r3, [pc, #212]	; (8010c1c <tcp_output_segment+0x1b8>)
 8010b48:	681a      	ldr	r2, [r3, #0]
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	685b      	ldr	r3, [r3, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7f9 fd60 	bl	800a61a <lwip_htonl>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	68bb      	ldr	r3, [r7, #8]
 8010b5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	68da      	ldr	r2, [r3, #12]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	685b      	ldr	r3, [r3, #4]
 8010b6a:	1ad3      	subs	r3, r2, r3
 8010b6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	685b      	ldr	r3, [r3, #4]
 8010b72:	8959      	ldrh	r1, [r3, #10]
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	8b3a      	ldrh	r2, [r7, #24]
 8010b7a:	1a8a      	subs	r2, r1, r2
 8010b7c:	b292      	uxth	r2, r2
 8010b7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	8919      	ldrh	r1, [r3, #8]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	8b3a      	ldrh	r2, [r7, #24]
 8010b8c:	1a8a      	subs	r2, r1, r2
 8010b8e:	b292      	uxth	r2, r2
 8010b90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	685b      	ldr	r3, [r3, #4]
 8010b96:	68fa      	ldr	r2, [r7, #12]
 8010b98:	68d2      	ldr	r2, [r2, #12]
 8010b9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	68db      	ldr	r3, [r3, #12]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	741a      	strb	r2, [r3, #16]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	68da      	ldr	r2, [r3, #12]
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	7a9b      	ldrb	r3, [r3, #10]
 8010bb0:	f003 0301 	and.w	r3, r3, #1
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <tcp_output_segment+0x158>
 8010bb8:	2318      	movs	r3, #24
 8010bba:	e000      	b.n	8010bbe <tcp_output_segment+0x15a>
 8010bbc:	2314      	movs	r3, #20
 8010bbe:	4413      	add	r3, r2
 8010bc0:	69fa      	ldr	r2, [r7, #28]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d006      	beq.n	8010bd4 <tcp_output_segment+0x170>
 8010bc6:	4b10      	ldr	r3, [pc, #64]	; (8010c08 <tcp_output_segment+0x1a4>)
 8010bc8:	f240 621c 	movw	r2, #1564	; 0x61c
 8010bcc:	4914      	ldr	r1, [pc, #80]	; (8010c20 <tcp_output_segment+0x1bc>)
 8010bce:	4810      	ldr	r0, [pc, #64]	; (8010c10 <tcp_output_segment+0x1ac>)
 8010bd0:	f005 fe12 	bl	80167f8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	6858      	ldr	r0, [r3, #4]
 8010bd8:	68b9      	ldr	r1, [r7, #8]
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	1d1c      	adds	r4, r3, #4
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	7add      	ldrb	r5, [r3, #11]
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	7a9b      	ldrb	r3, [r3, #10]
 8010be6:	687a      	ldr	r2, [r7, #4]
 8010be8:	9202      	str	r2, [sp, #8]
 8010bea:	2206      	movs	r2, #6
 8010bec:	9201      	str	r2, [sp, #4]
 8010bee:	9300      	str	r3, [sp, #0]
 8010bf0:	462b      	mov	r3, r5
 8010bf2:	4622      	mov	r2, r4
 8010bf4:	f004 fbe0 	bl	80153b8 <ip4_output_if>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010bfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	3720      	adds	r7, #32
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bdb0      	pop	{r4, r5, r7, pc}
 8010c08:	08018f00 	.word	0x08018f00
 8010c0c:	080194c4 	.word	0x080194c4
 8010c10:	08018f54 	.word	0x08018f54
 8010c14:	080194e4 	.word	0x080194e4
 8010c18:	08019504 	.word	0x08019504
 8010c1c:	2000de34 	.word	0x2000de34
 8010c20:	08019528 	.word	0x08019528

08010c24 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010c24:	b5b0      	push	{r4, r5, r7, lr}
 8010c26:	b084      	sub	sp, #16
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d106      	bne.n	8010c40 <tcp_rexmit_rto_prepare+0x1c>
 8010c32:	4b31      	ldr	r3, [pc, #196]	; (8010cf8 <tcp_rexmit_rto_prepare+0xd4>)
 8010c34:	f240 6263 	movw	r2, #1635	; 0x663
 8010c38:	4930      	ldr	r1, [pc, #192]	; (8010cfc <tcp_rexmit_rto_prepare+0xd8>)
 8010c3a:	4831      	ldr	r0, [pc, #196]	; (8010d00 <tcp_rexmit_rto_prepare+0xdc>)
 8010c3c:	f005 fddc 	bl	80167f8 <iprintf>

  if (pcb->unacked == NULL) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d102      	bne.n	8010c4e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010c48:	f06f 0305 	mvn.w	r3, #5
 8010c4c:	e050      	b.n	8010cf0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	e00b      	b.n	8010c6e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f7ff fee4 	bl	8010a24 <tcp_output_segment_busy>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d002      	beq.n	8010c68 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010c62:	f06f 0305 	mvn.w	r3, #5
 8010c66:	e043      	b.n	8010cf0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	60fb      	str	r3, [r7, #12]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d1ef      	bne.n	8010c56 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010c76:	68f8      	ldr	r0, [r7, #12]
 8010c78:	f7ff fed4 	bl	8010a24 <tcp_output_segment_busy>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010c82:	f06f 0305 	mvn.w	r3, #5
 8010c86:	e033      	b.n	8010cf0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	8b5b      	ldrh	r3, [r3, #26]
 8010ca2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	685b      	ldr	r3, [r3, #4]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7f9 fcb1 	bl	800a61a <lwip_htonl>
 8010cb8:	4604      	mov	r4, r0
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	891b      	ldrh	r3, [r3, #8]
 8010cbe:	461d      	mov	r5, r3
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	899b      	ldrh	r3, [r3, #12]
 8010cc6:	b29b      	uxth	r3, r3
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7f9 fc91 	bl	800a5f0 <lwip_htons>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	f003 0303 	and.w	r3, r3, #3
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <tcp_rexmit_rto_prepare+0xba>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e000      	b.n	8010ce0 <tcp_rexmit_rto_prepare+0xbc>
 8010cde:	2300      	movs	r3, #0
 8010ce0:	442b      	add	r3, r5
 8010ce2:	18e2      	adds	r2, r4, r3
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2200      	movs	r2, #0
 8010cec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010cee:	2300      	movs	r3, #0
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8010cf8:	08018f00 	.word	0x08018f00
 8010cfc:	0801953c 	.word	0x0801953c
 8010d00:	08018f54 	.word	0x08018f54

08010d04 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d106      	bne.n	8010d20 <tcp_rexmit_rto_commit+0x1c>
 8010d12:	4b0d      	ldr	r3, [pc, #52]	; (8010d48 <tcp_rexmit_rto_commit+0x44>)
 8010d14:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010d18:	490c      	ldr	r1, [pc, #48]	; (8010d4c <tcp_rexmit_rto_commit+0x48>)
 8010d1a:	480d      	ldr	r0, [pc, #52]	; (8010d50 <tcp_rexmit_rto_commit+0x4c>)
 8010d1c:	f005 fd6c 	bl	80167f8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d26:	2bff      	cmp	r3, #255	; 0xff
 8010d28:	d007      	beq.n	8010d3a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d30:	3301      	adds	r3, #1
 8010d32:	b2da      	uxtb	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010d3a:	6878      	ldr	r0, [r7, #4]
 8010d3c:	f7ff fc7e 	bl	801063c <tcp_output>
}
 8010d40:	bf00      	nop
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	08018f00 	.word	0x08018f00
 8010d4c:	08019560 	.word	0x08019560
 8010d50:	08018f54 	.word	0x08018f54

08010d54 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b082      	sub	sp, #8
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <tcp_rexmit_rto+0x1c>
 8010d62:	4b0a      	ldr	r3, [pc, #40]	; (8010d8c <tcp_rexmit_rto+0x38>)
 8010d64:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010d68:	4909      	ldr	r1, [pc, #36]	; (8010d90 <tcp_rexmit_rto+0x3c>)
 8010d6a:	480a      	ldr	r0, [pc, #40]	; (8010d94 <tcp_rexmit_rto+0x40>)
 8010d6c:	f005 fd44 	bl	80167f8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f7ff ff57 	bl	8010c24 <tcp_rexmit_rto_prepare>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d102      	bne.n	8010d82 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff ffc1 	bl	8010d04 <tcp_rexmit_rto_commit>
  }
}
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	08018f00 	.word	0x08018f00
 8010d90:	08019584 	.word	0x08019584
 8010d94:	08018f54 	.word	0x08018f54

08010d98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010d98:	b590      	push	{r4, r7, lr}
 8010d9a:	b085      	sub	sp, #20
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d106      	bne.n	8010db4 <tcp_rexmit+0x1c>
 8010da6:	4b2f      	ldr	r3, [pc, #188]	; (8010e64 <tcp_rexmit+0xcc>)
 8010da8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010dac:	492e      	ldr	r1, [pc, #184]	; (8010e68 <tcp_rexmit+0xd0>)
 8010dae:	482f      	ldr	r0, [pc, #188]	; (8010e6c <tcp_rexmit+0xd4>)
 8010db0:	f005 fd22 	bl	80167f8 <iprintf>

  if (pcb->unacked == NULL) {
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010dbc:	f06f 0305 	mvn.w	r3, #5
 8010dc0:	e04c      	b.n	8010e5c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dc6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010dc8:	68b8      	ldr	r0, [r7, #8]
 8010dca:	f7ff fe2b 	bl	8010a24 <tcp_output_segment_busy>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d002      	beq.n	8010dda <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010dd4:	f06f 0305 	mvn.w	r3, #5
 8010dd8:	e040      	b.n	8010e5c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	681a      	ldr	r2, [r3, #0]
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	336c      	adds	r3, #108	; 0x6c
 8010de6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010de8:	e002      	b.n	8010df0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d011      	beq.n	8010e1c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	68db      	ldr	r3, [r3, #12]
 8010dfe:	685b      	ldr	r3, [r3, #4]
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f9 fc0a 	bl	800a61a <lwip_htonl>
 8010e06:	4604      	mov	r4, r0
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	685b      	ldr	r3, [r3, #4]
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7f9 fc03 	bl	800a61a <lwip_htonl>
 8010e14:	4603      	mov	r3, r0
 8010e16:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	dbe6      	blt.n	8010dea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	681a      	ldr	r2, [r3, #0]
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d103      	bne.n	8010e3a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e40:	2bff      	cmp	r3, #255	; 0xff
 8010e42:	d007      	beq.n	8010e54 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e4a:	3301      	adds	r3, #1
 8010e4c:	b2da      	uxtb	r2, r3
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2200      	movs	r2, #0
 8010e58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3714      	adds	r7, #20
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd90      	pop	{r4, r7, pc}
 8010e64:	08018f00 	.word	0x08018f00
 8010e68:	080195a0 	.word	0x080195a0
 8010e6c:	08018f54 	.word	0x08018f54

08010e70 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b082      	sub	sp, #8
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d106      	bne.n	8010e8c <tcp_rexmit_fast+0x1c>
 8010e7e:	4b2a      	ldr	r3, [pc, #168]	; (8010f28 <tcp_rexmit_fast+0xb8>)
 8010e80:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010e84:	4929      	ldr	r1, [pc, #164]	; (8010f2c <tcp_rexmit_fast+0xbc>)
 8010e86:	482a      	ldr	r0, [pc, #168]	; (8010f30 <tcp_rexmit_fast+0xc0>)
 8010e88:	f005 fcb6 	bl	80167f8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d045      	beq.n	8010f20 <tcp_rexmit_fast+0xb0>
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8b5b      	ldrh	r3, [r3, #26]
 8010e98:	f003 0304 	and.w	r3, r3, #4
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d13f      	bne.n	8010f20 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7ff ff79 	bl	8010d98 <tcp_rexmit>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d139      	bne.n	8010f20 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010eb8:	4293      	cmp	r3, r2
 8010eba:	bf28      	it	cs
 8010ebc:	4613      	movcs	r3, r2
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	da00      	bge.n	8010ec6 <tcp_rexmit_fast+0x56>
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	105b      	asrs	r3, r3, #1
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010ed6:	461a      	mov	r2, r3
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010edc:	005b      	lsls	r3, r3, #1
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d206      	bcs.n	8010ef0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ee6:	005b      	lsls	r3, r3, #1
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010efa:	4619      	mov	r1, r3
 8010efc:	0049      	lsls	r1, r1, #1
 8010efe:	440b      	add	r3, r1
 8010f00:	b29b      	uxth	r3, r3
 8010f02:	4413      	add	r3, r2
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	8b5b      	ldrh	r3, [r3, #26]
 8010f10:	f043 0304 	orr.w	r3, r3, #4
 8010f14:	b29a      	uxth	r2, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	08018f00 	.word	0x08018f00
 8010f2c:	080195b8 	.word	0x080195b8
 8010f30:	08018f54 	.word	0x08018f54

08010f34 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b086      	sub	sp, #24
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	60f8      	str	r0, [r7, #12]
 8010f3c:	607b      	str	r3, [r7, #4]
 8010f3e:	460b      	mov	r3, r1
 8010f40:	817b      	strh	r3, [r7, #10]
 8010f42:	4613      	mov	r3, r2
 8010f44:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010f46:	897a      	ldrh	r2, [r7, #10]
 8010f48:	893b      	ldrh	r3, [r7, #8]
 8010f4a:	4413      	add	r3, r2
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	3314      	adds	r3, #20
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f56:	4619      	mov	r1, r3
 8010f58:	2022      	movs	r0, #34	; 0x22
 8010f5a:	f7fa fbfb 	bl	800b754 <pbuf_alloc>
 8010f5e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d04d      	beq.n	8011002 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010f66:	897b      	ldrh	r3, [r7, #10]
 8010f68:	3313      	adds	r3, #19
 8010f6a:	697a      	ldr	r2, [r7, #20]
 8010f6c:	8952      	ldrh	r2, [r2, #10]
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	db06      	blt.n	8010f80 <tcp_output_alloc_header_common+0x4c>
 8010f72:	4b26      	ldr	r3, [pc, #152]	; (801100c <tcp_output_alloc_header_common+0xd8>)
 8010f74:	f240 7223 	movw	r2, #1827	; 0x723
 8010f78:	4925      	ldr	r1, [pc, #148]	; (8011010 <tcp_output_alloc_header_common+0xdc>)
 8010f7a:	4826      	ldr	r0, [pc, #152]	; (8011014 <tcp_output_alloc_header_common+0xe0>)
 8010f7c:	f005 fc3c 	bl	80167f8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010f80:	697b      	ldr	r3, [r7, #20]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010f86:	8c3b      	ldrh	r3, [r7, #32]
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f7f9 fb31 	bl	800a5f0 <lwip_htons>
 8010f8e:	4603      	mov	r3, r0
 8010f90:	461a      	mov	r2, r3
 8010f92:	693b      	ldr	r3, [r7, #16]
 8010f94:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f98:	4618      	mov	r0, r3
 8010f9a:	f7f9 fb29 	bl	800a5f0 <lwip_htons>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	461a      	mov	r2, r3
 8010fa2:	693b      	ldr	r3, [r7, #16]
 8010fa4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	687a      	ldr	r2, [r7, #4]
 8010faa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f7f9 fb34 	bl	800a61a <lwip_htonl>
 8010fb2:	4602      	mov	r2, r0
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010fb8:	897b      	ldrh	r3, [r7, #10]
 8010fba:	089b      	lsrs	r3, r3, #2
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	3305      	adds	r3, #5
 8010fc0:	b29b      	uxth	r3, r3
 8010fc2:	031b      	lsls	r3, r3, #12
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	4313      	orrs	r3, r2
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	f7f9 fb0d 	bl	800a5f0 <lwip_htons>
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	461a      	mov	r2, r3
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010fde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7f9 fb05 	bl	800a5f0 <lwip_htons>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	461a      	mov	r2, r3
 8010fea:	693b      	ldr	r3, [r7, #16]
 8010fec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010fee:	693b      	ldr	r3, [r7, #16]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	741a      	strb	r2, [r3, #16]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	749a      	strb	r2, [r3, #18]
 8010ffe:	2200      	movs	r2, #0
 8011000:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011002:	697b      	ldr	r3, [r7, #20]
}
 8011004:	4618      	mov	r0, r3
 8011006:	3718      	adds	r7, #24
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}
 801100c:	08018f00 	.word	0x08018f00
 8011010:	080195d8 	.word	0x080195d8
 8011014:	08018f54 	.word	0x08018f54

08011018 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011018:	b5b0      	push	{r4, r5, r7, lr}
 801101a:	b08a      	sub	sp, #40	; 0x28
 801101c:	af04      	add	r7, sp, #16
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	607b      	str	r3, [r7, #4]
 8011022:	460b      	mov	r3, r1
 8011024:	817b      	strh	r3, [r7, #10]
 8011026:	4613      	mov	r3, r2
 8011028:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d106      	bne.n	801103e <tcp_output_alloc_header+0x26>
 8011030:	4b15      	ldr	r3, [pc, #84]	; (8011088 <tcp_output_alloc_header+0x70>)
 8011032:	f240 7242 	movw	r2, #1858	; 0x742
 8011036:	4915      	ldr	r1, [pc, #84]	; (801108c <tcp_output_alloc_header+0x74>)
 8011038:	4815      	ldr	r0, [pc, #84]	; (8011090 <tcp_output_alloc_header+0x78>)
 801103a:	f005 fbdd 	bl	80167f8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	8adb      	ldrh	r3, [r3, #22]
 8011046:	68fa      	ldr	r2, [r7, #12]
 8011048:	8b12      	ldrh	r2, [r2, #24]
 801104a:	68f9      	ldr	r1, [r7, #12]
 801104c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801104e:	893d      	ldrh	r5, [r7, #8]
 8011050:	897c      	ldrh	r4, [r7, #10]
 8011052:	9103      	str	r1, [sp, #12]
 8011054:	2110      	movs	r1, #16
 8011056:	9102      	str	r1, [sp, #8]
 8011058:	9201      	str	r2, [sp, #4]
 801105a:	9300      	str	r3, [sp, #0]
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	462a      	mov	r2, r5
 8011060:	4621      	mov	r1, r4
 8011062:	f7ff ff67 	bl	8010f34 <tcp_output_alloc_header_common>
 8011066:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d006      	beq.n	801107c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011072:	68fa      	ldr	r2, [r7, #12]
 8011074:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011076:	441a      	add	r2, r3
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801107c:	697b      	ldr	r3, [r7, #20]
}
 801107e:	4618      	mov	r0, r3
 8011080:	3718      	adds	r7, #24
 8011082:	46bd      	mov	sp, r7
 8011084:	bdb0      	pop	{r4, r5, r7, pc}
 8011086:	bf00      	nop
 8011088:	08018f00 	.word	0x08018f00
 801108c:	08019608 	.word	0x08019608
 8011090:	08018f54 	.word	0x08018f54

08011094 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b088      	sub	sp, #32
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	4611      	mov	r1, r2
 80110a0:	461a      	mov	r2, r3
 80110a2:	460b      	mov	r3, r1
 80110a4:	71fb      	strb	r3, [r7, #7]
 80110a6:	4613      	mov	r3, r2
 80110a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80110aa:	2300      	movs	r3, #0
 80110ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80110ae:	68bb      	ldr	r3, [r7, #8]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <tcp_output_fill_options+0x2e>
 80110b4:	4b12      	ldr	r3, [pc, #72]	; (8011100 <tcp_output_fill_options+0x6c>)
 80110b6:	f240 7256 	movw	r2, #1878	; 0x756
 80110ba:	4912      	ldr	r1, [pc, #72]	; (8011104 <tcp_output_fill_options+0x70>)
 80110bc:	4812      	ldr	r0, [pc, #72]	; (8011108 <tcp_output_fill_options+0x74>)
 80110be:	f005 fb9b 	bl	80167f8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80110c2:	68bb      	ldr	r3, [r7, #8]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80110c8:	69bb      	ldr	r3, [r7, #24]
 80110ca:	3314      	adds	r3, #20
 80110cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80110ce:	8bfb      	ldrh	r3, [r7, #30]
 80110d0:	009b      	lsls	r3, r3, #2
 80110d2:	461a      	mov	r2, r3
 80110d4:	79fb      	ldrb	r3, [r7, #7]
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	f003 0304 	and.w	r3, r3, #4
 80110dc:	4413      	add	r3, r2
 80110de:	3314      	adds	r3, #20
 80110e0:	69ba      	ldr	r2, [r7, #24]
 80110e2:	4413      	add	r3, r2
 80110e4:	697a      	ldr	r2, [r7, #20]
 80110e6:	429a      	cmp	r2, r3
 80110e8:	d006      	beq.n	80110f8 <tcp_output_fill_options+0x64>
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <tcp_output_fill_options+0x6c>)
 80110ec:	f240 7275 	movw	r2, #1909	; 0x775
 80110f0:	4906      	ldr	r1, [pc, #24]	; (801110c <tcp_output_fill_options+0x78>)
 80110f2:	4805      	ldr	r0, [pc, #20]	; (8011108 <tcp_output_fill_options+0x74>)
 80110f4:	f005 fb80 	bl	80167f8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80110f8:	bf00      	nop
 80110fa:	3720      	adds	r7, #32
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}
 8011100:	08018f00 	.word	0x08018f00
 8011104:	08019630 	.word	0x08019630
 8011108:	08018f54 	.word	0x08018f54
 801110c:	08019528 	.word	0x08019528

08011110 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b08a      	sub	sp, #40	; 0x28
 8011114:	af04      	add	r7, sp, #16
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
 801111c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d106      	bne.n	8011132 <tcp_output_control_segment+0x22>
 8011124:	4b1c      	ldr	r3, [pc, #112]	; (8011198 <tcp_output_control_segment+0x88>)
 8011126:	f240 7287 	movw	r2, #1927	; 0x787
 801112a:	491c      	ldr	r1, [pc, #112]	; (801119c <tcp_output_control_segment+0x8c>)
 801112c:	481c      	ldr	r0, [pc, #112]	; (80111a0 <tcp_output_control_segment+0x90>)
 801112e:	f005 fb63 	bl	80167f8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011132:	683a      	ldr	r2, [r7, #0]
 8011134:	6879      	ldr	r1, [r7, #4]
 8011136:	68f8      	ldr	r0, [r7, #12]
 8011138:	f7fe ff40 	bl	800ffbc <tcp_route>
 801113c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d102      	bne.n	801114a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011144:	23fc      	movs	r3, #252	; 0xfc
 8011146:	75fb      	strb	r3, [r7, #23]
 8011148:	e01c      	b.n	8011184 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d006      	beq.n	801115e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	7adb      	ldrb	r3, [r3, #11]
 8011154:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	7a9b      	ldrb	r3, [r3, #10]
 801115a:	757b      	strb	r3, [r7, #21]
 801115c:	e003      	b.n	8011166 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801115e:	23ff      	movs	r3, #255	; 0xff
 8011160:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011162:	2300      	movs	r3, #0
 8011164:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8011166:	7dba      	ldrb	r2, [r7, #22]
 8011168:	693b      	ldr	r3, [r7, #16]
 801116a:	9302      	str	r3, [sp, #8]
 801116c:	2306      	movs	r3, #6
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	7d7b      	ldrb	r3, [r7, #21]
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	4613      	mov	r3, r2
 8011176:	683a      	ldr	r2, [r7, #0]
 8011178:	6879      	ldr	r1, [r7, #4]
 801117a:	68b8      	ldr	r0, [r7, #8]
 801117c:	f004 f91c 	bl	80153b8 <ip4_output_if>
 8011180:	4603      	mov	r3, r0
 8011182:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011184:	68b8      	ldr	r0, [r7, #8]
 8011186:	f7fa fdc9 	bl	800bd1c <pbuf_free>
  return err;
 801118a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801118e:	4618      	mov	r0, r3
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	08018f00 	.word	0x08018f00
 801119c:	08019658 	.word	0x08019658
 80111a0:	08018f54 	.word	0x08018f54

080111a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80111a4:	b590      	push	{r4, r7, lr}
 80111a6:	b08b      	sub	sp, #44	; 0x2c
 80111a8:	af04      	add	r7, sp, #16
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
 80111b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80111b2:	683b      	ldr	r3, [r7, #0]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d106      	bne.n	80111c6 <tcp_rst+0x22>
 80111b8:	4b1f      	ldr	r3, [pc, #124]	; (8011238 <tcp_rst+0x94>)
 80111ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80111be:	491f      	ldr	r1, [pc, #124]	; (801123c <tcp_rst+0x98>)
 80111c0:	481f      	ldr	r0, [pc, #124]	; (8011240 <tcp_rst+0x9c>)
 80111c2:	f005 fb19 	bl	80167f8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80111c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d106      	bne.n	80111da <tcp_rst+0x36>
 80111cc:	4b1a      	ldr	r3, [pc, #104]	; (8011238 <tcp_rst+0x94>)
 80111ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80111d2:	491c      	ldr	r1, [pc, #112]	; (8011244 <tcp_rst+0xa0>)
 80111d4:	481a      	ldr	r0, [pc, #104]	; (8011240 <tcp_rst+0x9c>)
 80111d6:	f005 fb0f 	bl	80167f8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111da:	2300      	movs	r3, #0
 80111dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80111de:	f246 0308 	movw	r3, #24584	; 0x6008
 80111e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80111e4:	7dfb      	ldrb	r3, [r7, #23]
 80111e6:	b29c      	uxth	r4, r3
 80111e8:	68b8      	ldr	r0, [r7, #8]
 80111ea:	f7f9 fa16 	bl	800a61a <lwip_htonl>
 80111ee:	4602      	mov	r2, r0
 80111f0:	8abb      	ldrh	r3, [r7, #20]
 80111f2:	9303      	str	r3, [sp, #12]
 80111f4:	2314      	movs	r3, #20
 80111f6:	9302      	str	r3, [sp, #8]
 80111f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80111fa:	9301      	str	r3, [sp, #4]
 80111fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111fe:	9300      	str	r3, [sp, #0]
 8011200:	4613      	mov	r3, r2
 8011202:	2200      	movs	r2, #0
 8011204:	4621      	mov	r1, r4
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f7ff fe94 	bl	8010f34 <tcp_output_alloc_header_common>
 801120c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00c      	beq.n	801122e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011214:	7dfb      	ldrb	r3, [r7, #23]
 8011216:	2200      	movs	r2, #0
 8011218:	6939      	ldr	r1, [r7, #16]
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f7ff ff3a 	bl	8011094 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	6939      	ldr	r1, [r7, #16]
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	f7ff ff72 	bl	8011110 <tcp_output_control_segment>
 801122c:	e000      	b.n	8011230 <tcp_rst+0x8c>
    return;
 801122e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011230:	371c      	adds	r7, #28
 8011232:	46bd      	mov	sp, r7
 8011234:	bd90      	pop	{r4, r7, pc}
 8011236:	bf00      	nop
 8011238:	08018f00 	.word	0x08018f00
 801123c:	08019684 	.word	0x08019684
 8011240:	08018f54 	.word	0x08018f54
 8011244:	080196a0 	.word	0x080196a0

08011248 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011248:	b590      	push	{r4, r7, lr}
 801124a:	b087      	sub	sp, #28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011250:	2300      	movs	r3, #0
 8011252:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011254:	2300      	movs	r3, #0
 8011256:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d106      	bne.n	801126c <tcp_send_empty_ack+0x24>
 801125e:	4b28      	ldr	r3, [pc, #160]	; (8011300 <tcp_send_empty_ack+0xb8>)
 8011260:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011264:	4927      	ldr	r1, [pc, #156]	; (8011304 <tcp_send_empty_ack+0xbc>)
 8011266:	4828      	ldr	r0, [pc, #160]	; (8011308 <tcp_send_empty_ack+0xc0>)
 8011268:	f005 fac6 	bl	80167f8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801126c:	7dfb      	ldrb	r3, [r7, #23]
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	b2db      	uxtb	r3, r3
 8011272:	f003 0304 	and.w	r3, r3, #4
 8011276:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011278:	7d7b      	ldrb	r3, [r7, #21]
 801127a:	b29c      	uxth	r4, r3
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011280:	4618      	mov	r0, r3
 8011282:	f7f9 f9ca 	bl	800a61a <lwip_htonl>
 8011286:	4603      	mov	r3, r0
 8011288:	2200      	movs	r2, #0
 801128a:	4621      	mov	r1, r4
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f7ff fec3 	bl	8011018 <tcp_output_alloc_header>
 8011292:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d109      	bne.n	80112ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	8b5b      	ldrh	r3, [r3, #26]
 801129e:	f043 0303 	orr.w	r3, r3, #3
 80112a2:	b29a      	uxth	r2, r3
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80112a8:	f06f 0301 	mvn.w	r3, #1
 80112ac:	e023      	b.n	80112f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80112ae:	7dbb      	ldrb	r3, [r7, #22]
 80112b0:	7dfa      	ldrb	r2, [r7, #23]
 80112b2:	6939      	ldr	r1, [r7, #16]
 80112b4:	6878      	ldr	r0, [r7, #4]
 80112b6:	f7ff feed 	bl	8011094 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	3304      	adds	r3, #4
 80112c0:	6939      	ldr	r1, [r7, #16]
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f7ff ff24 	bl	8011110 <tcp_output_control_segment>
 80112c8:	4603      	mov	r3, r0
 80112ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80112cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d007      	beq.n	80112e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	8b5b      	ldrh	r3, [r3, #26]
 80112d8:	f043 0303 	orr.w	r3, r3, #3
 80112dc:	b29a      	uxth	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	835a      	strh	r2, [r3, #26]
 80112e2:	e006      	b.n	80112f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	8b5b      	ldrh	r3, [r3, #26]
 80112e8:	f023 0303 	bic.w	r3, r3, #3
 80112ec:	b29a      	uxth	r2, r3
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80112f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	371c      	adds	r7, #28
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd90      	pop	{r4, r7, pc}
 80112fe:	bf00      	nop
 8011300:	08018f00 	.word	0x08018f00
 8011304:	080196bc 	.word	0x080196bc
 8011308:	08018f54 	.word	0x08018f54

0801130c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801130c:	b590      	push	{r4, r7, lr}
 801130e:	b087      	sub	sp, #28
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011314:	2300      	movs	r3, #0
 8011316:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d106      	bne.n	801132c <tcp_keepalive+0x20>
 801131e:	4b18      	ldr	r3, [pc, #96]	; (8011380 <tcp_keepalive+0x74>)
 8011320:	f640 0224 	movw	r2, #2084	; 0x824
 8011324:	4917      	ldr	r1, [pc, #92]	; (8011384 <tcp_keepalive+0x78>)
 8011326:	4818      	ldr	r0, [pc, #96]	; (8011388 <tcp_keepalive+0x7c>)
 8011328:	f005 fa66 	bl	80167f8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801132c:	7dfb      	ldrb	r3, [r7, #23]
 801132e:	b29c      	uxth	r4, r3
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011334:	3b01      	subs	r3, #1
 8011336:	4618      	mov	r0, r3
 8011338:	f7f9 f96f 	bl	800a61a <lwip_htonl>
 801133c:	4603      	mov	r3, r0
 801133e:	2200      	movs	r2, #0
 8011340:	4621      	mov	r1, r4
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f7ff fe68 	bl	8011018 <tcp_output_alloc_header>
 8011348:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801134a:	693b      	ldr	r3, [r7, #16]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d102      	bne.n	8011356 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011350:	f04f 33ff 	mov.w	r3, #4294967295
 8011354:	e010      	b.n	8011378 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011356:	7dfb      	ldrb	r3, [r7, #23]
 8011358:	2200      	movs	r2, #0
 801135a:	6939      	ldr	r1, [r7, #16]
 801135c:	6878      	ldr	r0, [r7, #4]
 801135e:	f7ff fe99 	bl	8011094 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	3304      	adds	r3, #4
 8011368:	6939      	ldr	r1, [r7, #16]
 801136a:	6878      	ldr	r0, [r7, #4]
 801136c:	f7ff fed0 	bl	8011110 <tcp_output_control_segment>
 8011370:	4603      	mov	r3, r0
 8011372:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011378:	4618      	mov	r0, r3
 801137a:	371c      	adds	r7, #28
 801137c:	46bd      	mov	sp, r7
 801137e:	bd90      	pop	{r4, r7, pc}
 8011380:	08018f00 	.word	0x08018f00
 8011384:	080196dc 	.word	0x080196dc
 8011388:	08018f54 	.word	0x08018f54

0801138c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801138c:	b590      	push	{r4, r7, lr}
 801138e:	b08b      	sub	sp, #44	; 0x2c
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011394:	2300      	movs	r3, #0
 8011396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d106      	bne.n	80113ae <tcp_zero_window_probe+0x22>
 80113a0:	4b4c      	ldr	r3, [pc, #304]	; (80114d4 <tcp_zero_window_probe+0x148>)
 80113a2:	f640 024f 	movw	r2, #2127	; 0x84f
 80113a6:	494c      	ldr	r1, [pc, #304]	; (80114d8 <tcp_zero_window_probe+0x14c>)
 80113a8:	484c      	ldr	r0, [pc, #304]	; (80114dc <tcp_zero_window_probe+0x150>)
 80113aa:	f005 fa25 	bl	80167f8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80113b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80113b4:	6a3b      	ldr	r3, [r7, #32]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d101      	bne.n	80113be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	e086      	b.n	80114cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80113c4:	2bff      	cmp	r3, #255	; 0xff
 80113c6:	d007      	beq.n	80113d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80113ce:	3301      	adds	r3, #1
 80113d0:	b2da      	uxtb	r2, r3
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	68db      	ldr	r3, [r3, #12]
 80113dc:	899b      	ldrh	r3, [r3, #12]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	4618      	mov	r0, r3
 80113e2:	f7f9 f905 	bl	800a5f0 <lwip_htons>
 80113e6:	4603      	mov	r3, r0
 80113e8:	b2db      	uxtb	r3, r3
 80113ea:	f003 0301 	and.w	r3, r3, #1
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d005      	beq.n	80113fe <tcp_zero_window_probe+0x72>
 80113f2:	6a3b      	ldr	r3, [r7, #32]
 80113f4:	891b      	ldrh	r3, [r3, #8]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d101      	bne.n	80113fe <tcp_zero_window_probe+0x72>
 80113fa:	2301      	movs	r3, #1
 80113fc:	e000      	b.n	8011400 <tcp_zero_window_probe+0x74>
 80113fe:	2300      	movs	r3, #0
 8011400:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011402:	7ffb      	ldrb	r3, [r7, #31]
 8011404:	2b00      	cmp	r3, #0
 8011406:	bf0c      	ite	eq
 8011408:	2301      	moveq	r3, #1
 801140a:	2300      	movne	r3, #0
 801140c:	b2db      	uxtb	r3, r3
 801140e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011414:	b299      	uxth	r1, r3
 8011416:	6a3b      	ldr	r3, [r7, #32]
 8011418:	68db      	ldr	r3, [r3, #12]
 801141a:	685b      	ldr	r3, [r3, #4]
 801141c:	8bba      	ldrh	r2, [r7, #28]
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	f7ff fdfa 	bl	8011018 <tcp_output_alloc_header>
 8011424:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011426:	69bb      	ldr	r3, [r7, #24]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801142c:	f04f 33ff 	mov.w	r3, #4294967295
 8011430:	e04c      	b.n	80114cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	685b      	ldr	r3, [r3, #4]
 8011436:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011438:	7ffb      	ldrb	r3, [r7, #31]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d011      	beq.n	8011462 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	899b      	ldrh	r3, [r3, #12]
 8011442:	b29b      	uxth	r3, r3
 8011444:	b21b      	sxth	r3, r3
 8011446:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801144a:	b21c      	sxth	r4, r3
 801144c:	2011      	movs	r0, #17
 801144e:	f7f9 f8cf 	bl	800a5f0 <lwip_htons>
 8011452:	4603      	mov	r3, r0
 8011454:	b21b      	sxth	r3, r3
 8011456:	4323      	orrs	r3, r4
 8011458:	b21b      	sxth	r3, r3
 801145a:	b29a      	uxth	r2, r3
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	819a      	strh	r2, [r3, #12]
 8011460:	e010      	b.n	8011484 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011462:	69bb      	ldr	r3, [r7, #24]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	3314      	adds	r3, #20
 8011468:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801146a:	6a3b      	ldr	r3, [r7, #32]
 801146c:	6858      	ldr	r0, [r3, #4]
 801146e:	6a3b      	ldr	r3, [r7, #32]
 8011470:	685b      	ldr	r3, [r3, #4]
 8011472:	891a      	ldrh	r2, [r3, #8]
 8011474:	6a3b      	ldr	r3, [r7, #32]
 8011476:	891b      	ldrh	r3, [r3, #8]
 8011478:	1ad3      	subs	r3, r2, r3
 801147a:	b29b      	uxth	r3, r3
 801147c:	2201      	movs	r2, #1
 801147e:	6939      	ldr	r1, [r7, #16]
 8011480:	f7fa fe52 	bl	800c128 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011484:	6a3b      	ldr	r3, [r7, #32]
 8011486:	68db      	ldr	r3, [r3, #12]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	4618      	mov	r0, r3
 801148c:	f7f9 f8c5 	bl	800a61a <lwip_htonl>
 8011490:	4603      	mov	r3, r0
 8011492:	3301      	adds	r3, #1
 8011494:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801149a:	68fb      	ldr	r3, [r7, #12]
 801149c:	1ad3      	subs	r3, r2, r3
 801149e:	2b00      	cmp	r3, #0
 80114a0:	da02      	bge.n	80114a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	68fa      	ldr	r2, [r7, #12]
 80114a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80114a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ac:	2200      	movs	r2, #0
 80114ae:	69b9      	ldr	r1, [r7, #24]
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f7ff fdef 	bl	8011094 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	3304      	adds	r3, #4
 80114bc:	69b9      	ldr	r1, [r7, #24]
 80114be:	6878      	ldr	r0, [r7, #4]
 80114c0:	f7ff fe26 	bl	8011110 <tcp_output_control_segment>
 80114c4:	4603      	mov	r3, r0
 80114c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80114c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	372c      	adds	r7, #44	; 0x2c
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd90      	pop	{r4, r7, pc}
 80114d4:	08018f00 	.word	0x08018f00
 80114d8:	080196f8 	.word	0x080196f8
 80114dc:	08018f54 	.word	0x08018f54

080114e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b082      	sub	sp, #8
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80114e8:	f7fa ff0c 	bl	800c304 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80114ec:	4b0a      	ldr	r3, [pc, #40]	; (8011518 <tcpip_tcp_timer+0x38>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d103      	bne.n	80114fc <tcpip_tcp_timer+0x1c>
 80114f4:	4b09      	ldr	r3, [pc, #36]	; (801151c <tcpip_tcp_timer+0x3c>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d005      	beq.n	8011508 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80114fc:	2200      	movs	r2, #0
 80114fe:	4908      	ldr	r1, [pc, #32]	; (8011520 <tcpip_tcp_timer+0x40>)
 8011500:	20fa      	movs	r0, #250	; 0xfa
 8011502:	f000 f8f3 	bl	80116ec <sys_timeout>
 8011506:	e003      	b.n	8011510 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011508:	4b06      	ldr	r3, [pc, #24]	; (8011524 <tcpip_tcp_timer+0x44>)
 801150a:	2200      	movs	r2, #0
 801150c:	601a      	str	r2, [r3, #0]
  }
}
 801150e:	bf00      	nop
 8011510:	bf00      	nop
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	2000de40 	.word	0x2000de40
 801151c:	2000de44 	.word	0x2000de44
 8011520:	080114e1 	.word	0x080114e1
 8011524:	2000de8c 	.word	0x2000de8c

08011528 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801152c:	4b0a      	ldr	r3, [pc, #40]	; (8011558 <tcp_timer_needed+0x30>)
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	2b00      	cmp	r3, #0
 8011532:	d10f      	bne.n	8011554 <tcp_timer_needed+0x2c>
 8011534:	4b09      	ldr	r3, [pc, #36]	; (801155c <tcp_timer_needed+0x34>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d103      	bne.n	8011544 <tcp_timer_needed+0x1c>
 801153c:	4b08      	ldr	r3, [pc, #32]	; (8011560 <tcp_timer_needed+0x38>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d007      	beq.n	8011554 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011544:	4b04      	ldr	r3, [pc, #16]	; (8011558 <tcp_timer_needed+0x30>)
 8011546:	2201      	movs	r2, #1
 8011548:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801154a:	2200      	movs	r2, #0
 801154c:	4905      	ldr	r1, [pc, #20]	; (8011564 <tcp_timer_needed+0x3c>)
 801154e:	20fa      	movs	r0, #250	; 0xfa
 8011550:	f000 f8cc 	bl	80116ec <sys_timeout>
  }
}
 8011554:	bf00      	nop
 8011556:	bd80      	pop	{r7, pc}
 8011558:	2000de8c 	.word	0x2000de8c
 801155c:	2000de40 	.word	0x2000de40
 8011560:	2000de44 	.word	0x2000de44
 8011564:	080114e1 	.word	0x080114e1

08011568 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b086      	sub	sp, #24
 801156c:	af00      	add	r7, sp, #0
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	60b9      	str	r1, [r7, #8]
 8011572:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011574:	200a      	movs	r0, #10
 8011576:	f7f9 fd13 	bl	800afa0 <memp_malloc>
 801157a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d109      	bne.n	8011596 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d151      	bne.n	801162c <sys_timeout_abs+0xc4>
 8011588:	4b2a      	ldr	r3, [pc, #168]	; (8011634 <sys_timeout_abs+0xcc>)
 801158a:	22be      	movs	r2, #190	; 0xbe
 801158c:	492a      	ldr	r1, [pc, #168]	; (8011638 <sys_timeout_abs+0xd0>)
 801158e:	482b      	ldr	r0, [pc, #172]	; (801163c <sys_timeout_abs+0xd4>)
 8011590:	f005 f932 	bl	80167f8 <iprintf>
    return;
 8011594:	e04a      	b.n	801162c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801159c:	693b      	ldr	r3, [r7, #16]
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	687a      	ldr	r2, [r7, #4]
 80115a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	68fa      	ldr	r2, [r7, #12]
 80115ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80115ae:	4b24      	ldr	r3, [pc, #144]	; (8011640 <sys_timeout_abs+0xd8>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d103      	bne.n	80115be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80115b6:	4a22      	ldr	r2, [pc, #136]	; (8011640 <sys_timeout_abs+0xd8>)
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	6013      	str	r3, [r2, #0]
    return;
 80115bc:	e037      	b.n	801162e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	4b1f      	ldr	r3, [pc, #124]	; (8011640 <sys_timeout_abs+0xd8>)
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	0fdb      	lsrs	r3, r3, #31
 80115cc:	f003 0301 	and.w	r3, r3, #1
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d007      	beq.n	80115e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80115d6:	4b1a      	ldr	r3, [pc, #104]	; (8011640 <sys_timeout_abs+0xd8>)
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80115de:	4a18      	ldr	r2, [pc, #96]	; (8011640 <sys_timeout_abs+0xd8>)
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	6013      	str	r3, [r2, #0]
 80115e4:	e023      	b.n	801162e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80115e6:	4b16      	ldr	r3, [pc, #88]	; (8011640 <sys_timeout_abs+0xd8>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	617b      	str	r3, [r7, #20]
 80115ec:	e01a      	b.n	8011624 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80115ee:	697b      	ldr	r3, [r7, #20]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d00b      	beq.n	801160e <sys_timeout_abs+0xa6>
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	685a      	ldr	r2, [r3, #4]
 80115fa:	697b      	ldr	r3, [r7, #20]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	1ad3      	subs	r3, r2, r3
 8011602:	0fdb      	lsrs	r3, r3, #31
 8011604:	f003 0301 	and.w	r3, r3, #1
 8011608:	b2db      	uxtb	r3, r3
 801160a:	2b00      	cmp	r3, #0
 801160c:	d007      	beq.n	801161e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801160e:	697b      	ldr	r3, [r7, #20]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	693a      	ldr	r2, [r7, #16]
 801161a:	601a      	str	r2, [r3, #0]
        break;
 801161c:	e007      	b.n	801162e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	617b      	str	r3, [r7, #20]
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1e1      	bne.n	80115ee <sys_timeout_abs+0x86>
 801162a:	e000      	b.n	801162e <sys_timeout_abs+0xc6>
    return;
 801162c:	bf00      	nop
      }
    }
  }
}
 801162e:	3718      	adds	r7, #24
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	0801971c 	.word	0x0801971c
 8011638:	08019750 	.word	0x08019750
 801163c:	08019790 	.word	0x08019790
 8011640:	2000de84 	.word	0x2000de84

08011644 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b086      	sub	sp, #24
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	685b      	ldr	r3, [r3, #4]
 8011654:	4798      	blx	r3

  now = sys_now();
 8011656:	f7f4 fe07 	bl	8006268 <sys_now>
 801165a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	4b0f      	ldr	r3, [pc, #60]	; (80116a0 <lwip_cyclic_timer+0x5c>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	4413      	add	r3, r2
 8011666:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011668:	68fa      	ldr	r2, [r7, #12]
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	1ad3      	subs	r3, r2, r3
 801166e:	0fdb      	lsrs	r3, r3, #31
 8011670:	f003 0301 	and.w	r3, r3, #1
 8011674:	b2db      	uxtb	r3, r3
 8011676:	2b00      	cmp	r3, #0
 8011678:	d009      	beq.n	801168e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	4413      	add	r3, r2
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	4907      	ldr	r1, [pc, #28]	; (80116a4 <lwip_cyclic_timer+0x60>)
 8011686:	4618      	mov	r0, r3
 8011688:	f7ff ff6e 	bl	8011568 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801168c:	e004      	b.n	8011698 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801168e:	687a      	ldr	r2, [r7, #4]
 8011690:	4904      	ldr	r1, [pc, #16]	; (80116a4 <lwip_cyclic_timer+0x60>)
 8011692:	68f8      	ldr	r0, [r7, #12]
 8011694:	f7ff ff68 	bl	8011568 <sys_timeout_abs>
}
 8011698:	bf00      	nop
 801169a:	3718      	adds	r7, #24
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	2000de88 	.word	0x2000de88
 80116a4:	08011645 	.word	0x08011645

080116a8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80116ae:	2301      	movs	r3, #1
 80116b0:	607b      	str	r3, [r7, #4]
 80116b2:	e00e      	b.n	80116d2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80116b4:	4a0b      	ldr	r2, [pc, #44]	; (80116e4 <sys_timeouts_init+0x3c>)
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	4a08      	ldr	r2, [pc, #32]	; (80116e4 <sys_timeouts_init+0x3c>)
 80116c2:	4413      	add	r3, r2
 80116c4:	461a      	mov	r2, r3
 80116c6:	4908      	ldr	r1, [pc, #32]	; (80116e8 <sys_timeouts_init+0x40>)
 80116c8:	f000 f810 	bl	80116ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	3301      	adds	r3, #1
 80116d0:	607b      	str	r3, [r7, #4]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2b04      	cmp	r3, #4
 80116d6:	d9ed      	bls.n	80116b4 <sys_timeouts_init+0xc>
  }
}
 80116d8:	bf00      	nop
 80116da:	bf00      	nop
 80116dc:	3708      	adds	r7, #8
 80116de:	46bd      	mov	sp, r7
 80116e0:	bd80      	pop	{r7, pc}
 80116e2:	bf00      	nop
 80116e4:	0801a734 	.word	0x0801a734
 80116e8:	08011645 	.word	0x08011645

080116ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b086      	sub	sp, #24
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	60f8      	str	r0, [r7, #12]
 80116f4:	60b9      	str	r1, [r7, #8]
 80116f6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116fe:	d306      	bcc.n	801170e <sys_timeout+0x22>
 8011700:	4b0a      	ldr	r3, [pc, #40]	; (801172c <sys_timeout+0x40>)
 8011702:	f240 1229 	movw	r2, #297	; 0x129
 8011706:	490a      	ldr	r1, [pc, #40]	; (8011730 <sys_timeout+0x44>)
 8011708:	480a      	ldr	r0, [pc, #40]	; (8011734 <sys_timeout+0x48>)
 801170a:	f005 f875 	bl	80167f8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801170e:	f7f4 fdab 	bl	8006268 <sys_now>
 8011712:	4602      	mov	r2, r0
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	4413      	add	r3, r2
 8011718:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	68b9      	ldr	r1, [r7, #8]
 801171e:	6978      	ldr	r0, [r7, #20]
 8011720:	f7ff ff22 	bl	8011568 <sys_timeout_abs>
#endif
}
 8011724:	bf00      	nop
 8011726:	3718      	adds	r7, #24
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}
 801172c:	0801971c 	.word	0x0801971c
 8011730:	080197b8 	.word	0x080197b8
 8011734:	08019790 	.word	0x08019790

08011738 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011738:	b580      	push	{r7, lr}
 801173a:	b084      	sub	sp, #16
 801173c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801173e:	f7f4 fd93 	bl	8006268 <sys_now>
 8011742:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011744:	4b17      	ldr	r3, [pc, #92]	; (80117a4 <sys_check_timeouts+0x6c>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d022      	beq.n	8011796 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011750:	68bb      	ldr	r3, [r7, #8]
 8011752:	685b      	ldr	r3, [r3, #4]
 8011754:	68fa      	ldr	r2, [r7, #12]
 8011756:	1ad3      	subs	r3, r2, r3
 8011758:	0fdb      	lsrs	r3, r3, #31
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	b2db      	uxtb	r3, r3
 8011760:	2b00      	cmp	r3, #0
 8011762:	d11a      	bne.n	801179a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4a0e      	ldr	r2, [pc, #56]	; (80117a4 <sys_check_timeouts+0x6c>)
 801176a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011772:	68bb      	ldr	r3, [r7, #8]
 8011774:	68db      	ldr	r3, [r3, #12]
 8011776:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	4a0a      	ldr	r2, [pc, #40]	; (80117a8 <sys_check_timeouts+0x70>)
 801177e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011780:	68b9      	ldr	r1, [r7, #8]
 8011782:	200a      	movs	r0, #10
 8011784:	f7f9 fc82 	bl	800b08c <memp_free>
    if (handler != NULL) {
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d0da      	beq.n	8011744 <sys_check_timeouts+0xc>
      handler(arg);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	6838      	ldr	r0, [r7, #0]
 8011792:	4798      	blx	r3
  do {
 8011794:	e7d6      	b.n	8011744 <sys_check_timeouts+0xc>
      return;
 8011796:	bf00      	nop
 8011798:	e000      	b.n	801179c <sys_check_timeouts+0x64>
      return;
 801179a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	2000de84 	.word	0x2000de84
 80117a8:	2000de88 	.word	0x2000de88

080117ac <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80117b2:	4b16      	ldr	r3, [pc, #88]	; (801180c <sys_timeouts_sleeptime+0x60>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d102      	bne.n	80117c0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80117ba:	f04f 33ff 	mov.w	r3, #4294967295
 80117be:	e020      	b.n	8011802 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80117c0:	f7f4 fd52 	bl	8006268 <sys_now>
 80117c4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80117c6:	4b11      	ldr	r3, [pc, #68]	; (801180c <sys_timeouts_sleeptime+0x60>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	1ad3      	subs	r3, r2, r3
 80117d0:	0fdb      	lsrs	r3, r3, #31
 80117d2:	f003 0301 	and.w	r3, r3, #1
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d001      	beq.n	80117e0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	e010      	b.n	8011802 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80117e0:	4b0a      	ldr	r3, [pc, #40]	; (801180c <sys_timeouts_sleeptime+0x60>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	685a      	ldr	r2, [r3, #4]
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	da06      	bge.n	8011800 <sys_timeouts_sleeptime+0x54>
 80117f2:	4b07      	ldr	r3, [pc, #28]	; (8011810 <sys_timeouts_sleeptime+0x64>)
 80117f4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80117f8:	4906      	ldr	r1, [pc, #24]	; (8011814 <sys_timeouts_sleeptime+0x68>)
 80117fa:	4807      	ldr	r0, [pc, #28]	; (8011818 <sys_timeouts_sleeptime+0x6c>)
 80117fc:	f004 fffc 	bl	80167f8 <iprintf>
    return ret;
 8011800:	683b      	ldr	r3, [r7, #0]
  }
}
 8011802:	4618      	mov	r0, r3
 8011804:	3708      	adds	r7, #8
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	2000de84 	.word	0x2000de84
 8011810:	0801971c 	.word	0x0801971c
 8011814:	080197f0 	.word	0x080197f0
 8011818:	08019790 	.word	0x08019790

0801181c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011820:	f004 feea 	bl	80165f8 <rand>
 8011824:	4603      	mov	r3, r0
 8011826:	b29b      	uxth	r3, r3
 8011828:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801182c:	b29b      	uxth	r3, r3
 801182e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011832:	b29a      	uxth	r2, r3
 8011834:	4b01      	ldr	r3, [pc, #4]	; (801183c <udp_init+0x20>)
 8011836:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011838:	bf00      	nop
 801183a:	bd80      	pop	{r7, pc}
 801183c:	20000018 	.word	0x20000018

08011840 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011846:	2300      	movs	r3, #0
 8011848:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801184a:	4b17      	ldr	r3, [pc, #92]	; (80118a8 <udp_new_port+0x68>)
 801184c:	881b      	ldrh	r3, [r3, #0]
 801184e:	1c5a      	adds	r2, r3, #1
 8011850:	b291      	uxth	r1, r2
 8011852:	4a15      	ldr	r2, [pc, #84]	; (80118a8 <udp_new_port+0x68>)
 8011854:	8011      	strh	r1, [r2, #0]
 8011856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801185a:	4293      	cmp	r3, r2
 801185c:	d103      	bne.n	8011866 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801185e:	4b12      	ldr	r3, [pc, #72]	; (80118a8 <udp_new_port+0x68>)
 8011860:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011864:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011866:	4b11      	ldr	r3, [pc, #68]	; (80118ac <udp_new_port+0x6c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	603b      	str	r3, [r7, #0]
 801186c:	e011      	b.n	8011892 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	8a5a      	ldrh	r2, [r3, #18]
 8011872:	4b0d      	ldr	r3, [pc, #52]	; (80118a8 <udp_new_port+0x68>)
 8011874:	881b      	ldrh	r3, [r3, #0]
 8011876:	429a      	cmp	r2, r3
 8011878:	d108      	bne.n	801188c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801187a:	88fb      	ldrh	r3, [r7, #6]
 801187c:	3301      	adds	r3, #1
 801187e:	80fb      	strh	r3, [r7, #6]
 8011880:	88fb      	ldrh	r3, [r7, #6]
 8011882:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011886:	d3e0      	bcc.n	801184a <udp_new_port+0xa>
        return 0;
 8011888:	2300      	movs	r3, #0
 801188a:	e007      	b.n	801189c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	68db      	ldr	r3, [r3, #12]
 8011890:	603b      	str	r3, [r7, #0]
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1ea      	bne.n	801186e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011898:	4b03      	ldr	r3, [pc, #12]	; (80118a8 <udp_new_port+0x68>)
 801189a:	881b      	ldrh	r3, [r3, #0]
}
 801189c:	4618      	mov	r0, r3
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr
 80118a8:	20000018 	.word	0x20000018
 80118ac:	2000de90 	.word	0x2000de90

080118b0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	4613      	mov	r3, r2
 80118bc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d105      	bne.n	80118d0 <udp_input_local_match+0x20>
 80118c4:	4b27      	ldr	r3, [pc, #156]	; (8011964 <udp_input_local_match+0xb4>)
 80118c6:	2287      	movs	r2, #135	; 0x87
 80118c8:	4927      	ldr	r1, [pc, #156]	; (8011968 <udp_input_local_match+0xb8>)
 80118ca:	4828      	ldr	r0, [pc, #160]	; (801196c <udp_input_local_match+0xbc>)
 80118cc:	f004 ff94 	bl	80167f8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d105      	bne.n	80118e2 <udp_input_local_match+0x32>
 80118d6:	4b23      	ldr	r3, [pc, #140]	; (8011964 <udp_input_local_match+0xb4>)
 80118d8:	2288      	movs	r2, #136	; 0x88
 80118da:	4925      	ldr	r1, [pc, #148]	; (8011970 <udp_input_local_match+0xc0>)
 80118dc:	4823      	ldr	r0, [pc, #140]	; (801196c <udp_input_local_match+0xbc>)
 80118de:	f004 ff8b 	bl	80167f8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	7a1b      	ldrb	r3, [r3, #8]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d00b      	beq.n	8011902 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	7a1a      	ldrb	r2, [r3, #8]
 80118ee:	4b21      	ldr	r3, [pc, #132]	; (8011974 <udp_input_local_match+0xc4>)
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80118f6:	3301      	adds	r3, #1
 80118f8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80118fa:	429a      	cmp	r2, r3
 80118fc:	d001      	beq.n	8011902 <udp_input_local_match+0x52>
    return 0;
 80118fe:	2300      	movs	r3, #0
 8011900:	e02b      	b.n	801195a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011902:	79fb      	ldrb	r3, [r7, #7]
 8011904:	2b00      	cmp	r3, #0
 8011906:	d018      	beq.n	801193a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d013      	beq.n	8011936 <udp_input_local_match+0x86>
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d00f      	beq.n	8011936 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011916:	4b17      	ldr	r3, [pc, #92]	; (8011974 <udp_input_local_match+0xc4>)
 8011918:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801191a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801191e:	d00a      	beq.n	8011936 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	681a      	ldr	r2, [r3, #0]
 8011924:	4b13      	ldr	r3, [pc, #76]	; (8011974 <udp_input_local_match+0xc4>)
 8011926:	695b      	ldr	r3, [r3, #20]
 8011928:	405a      	eors	r2, r3
 801192a:	68bb      	ldr	r3, [r7, #8]
 801192c:	3308      	adds	r3, #8
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011932:	2b00      	cmp	r3, #0
 8011934:	d110      	bne.n	8011958 <udp_input_local_match+0xa8>
          return 1;
 8011936:	2301      	movs	r3, #1
 8011938:	e00f      	b.n	801195a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d009      	beq.n	8011954 <udp_input_local_match+0xa4>
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	681b      	ldr	r3, [r3, #0]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d005      	beq.n	8011954 <udp_input_local_match+0xa4>
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	681a      	ldr	r2, [r3, #0]
 801194c:	4b09      	ldr	r3, [pc, #36]	; (8011974 <udp_input_local_match+0xc4>)
 801194e:	695b      	ldr	r3, [r3, #20]
 8011950:	429a      	cmp	r2, r3
 8011952:	d101      	bne.n	8011958 <udp_input_local_match+0xa8>
        return 1;
 8011954:	2301      	movs	r3, #1
 8011956:	e000      	b.n	801195a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011958:	2300      	movs	r3, #0
}
 801195a:	4618      	mov	r0, r3
 801195c:	3710      	adds	r7, #16
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	08019804 	.word	0x08019804
 8011968:	08019834 	.word	0x08019834
 801196c:	08019858 	.word	0x08019858
 8011970:	08019880 	.word	0x08019880
 8011974:	2000a6c0 	.word	0x2000a6c0

08011978 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011978:	b590      	push	{r4, r7, lr}
 801197a:	b08d      	sub	sp, #52	; 0x34
 801197c:	af02      	add	r7, sp, #8
 801197e:	6078      	str	r0, [r7, #4]
 8011980:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d105      	bne.n	8011998 <udp_input+0x20>
 801198c:	4b7c      	ldr	r3, [pc, #496]	; (8011b80 <udp_input+0x208>)
 801198e:	22cf      	movs	r2, #207	; 0xcf
 8011990:	497c      	ldr	r1, [pc, #496]	; (8011b84 <udp_input+0x20c>)
 8011992:	487d      	ldr	r0, [pc, #500]	; (8011b88 <udp_input+0x210>)
 8011994:	f004 ff30 	bl	80167f8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d105      	bne.n	80119aa <udp_input+0x32>
 801199e:	4b78      	ldr	r3, [pc, #480]	; (8011b80 <udp_input+0x208>)
 80119a0:	22d0      	movs	r2, #208	; 0xd0
 80119a2:	497a      	ldr	r1, [pc, #488]	; (8011b8c <udp_input+0x214>)
 80119a4:	4878      	ldr	r0, [pc, #480]	; (8011b88 <udp_input+0x210>)
 80119a6:	f004 ff27 	bl	80167f8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	895b      	ldrh	r3, [r3, #10]
 80119ae:	2b07      	cmp	r3, #7
 80119b0:	d803      	bhi.n	80119ba <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7fa f9b2 	bl	800bd1c <pbuf_free>
    goto end;
 80119b8:	e0de      	b.n	8011b78 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80119c0:	4b73      	ldr	r3, [pc, #460]	; (8011b90 <udp_input+0x218>)
 80119c2:	695b      	ldr	r3, [r3, #20]
 80119c4:	4a72      	ldr	r2, [pc, #456]	; (8011b90 <udp_input+0x218>)
 80119c6:	6812      	ldr	r2, [r2, #0]
 80119c8:	4611      	mov	r1, r2
 80119ca:	4618      	mov	r0, r3
 80119cc:	f003 fdcc 	bl	8015568 <ip4_addr_isbroadcast_u32>
 80119d0:	4603      	mov	r3, r0
 80119d2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80119d4:	697b      	ldr	r3, [r7, #20]
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	b29b      	uxth	r3, r3
 80119da:	4618      	mov	r0, r3
 80119dc:	f7f8 fe08 	bl	800a5f0 <lwip_htons>
 80119e0:	4603      	mov	r3, r0
 80119e2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80119e4:	697b      	ldr	r3, [r7, #20]
 80119e6:	885b      	ldrh	r3, [r3, #2]
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7f8 fe00 	bl	800a5f0 <lwip_htons>
 80119f0:	4603      	mov	r3, r0
 80119f2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80119f4:	2300      	movs	r3, #0
 80119f6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80119f8:	2300      	movs	r3, #0
 80119fa:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80119fc:	2300      	movs	r3, #0
 80119fe:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a00:	4b64      	ldr	r3, [pc, #400]	; (8011b94 <udp_input+0x21c>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	627b      	str	r3, [r7, #36]	; 0x24
 8011a06:	e054      	b.n	8011ab2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0a:	8a5b      	ldrh	r3, [r3, #18]
 8011a0c:	89fa      	ldrh	r2, [r7, #14]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d14a      	bne.n	8011aa8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011a12:	7cfb      	ldrb	r3, [r7, #19]
 8011a14:	461a      	mov	r2, r3
 8011a16:	6839      	ldr	r1, [r7, #0]
 8011a18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a1a:	f7ff ff49 	bl	80118b0 <udp_input_local_match>
 8011a1e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d041      	beq.n	8011aa8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a26:	7c1b      	ldrb	r3, [r3, #16]
 8011a28:	f003 0304 	and.w	r3, r3, #4
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d11d      	bne.n	8011a6c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d102      	bne.n	8011a3c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a38:	61fb      	str	r3, [r7, #28]
 8011a3a:	e017      	b.n	8011a6c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011a3c:	7cfb      	ldrb	r3, [r7, #19]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d014      	beq.n	8011a6c <udp_input+0xf4>
 8011a42:	4b53      	ldr	r3, [pc, #332]	; (8011b90 <udp_input+0x218>)
 8011a44:	695b      	ldr	r3, [r3, #20]
 8011a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a4a:	d10f      	bne.n	8011a6c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011a4c:	69fb      	ldr	r3, [r7, #28]
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	683b      	ldr	r3, [r7, #0]
 8011a52:	3304      	adds	r3, #4
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	429a      	cmp	r2, r3
 8011a58:	d008      	beq.n	8011a6c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a5c:	681a      	ldr	r2, [r3, #0]
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	3304      	adds	r3, #4
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d101      	bne.n	8011a6c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6e:	8a9b      	ldrh	r3, [r3, #20]
 8011a70:	8a3a      	ldrh	r2, [r7, #16]
 8011a72:	429a      	cmp	r2, r3
 8011a74:	d118      	bne.n	8011aa8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a78:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d005      	beq.n	8011a8a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a80:	685a      	ldr	r2, [r3, #4]
 8011a82:	4b43      	ldr	r3, [pc, #268]	; (8011b90 <udp_input+0x218>)
 8011a84:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d10e      	bne.n	8011aa8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011a8a:	6a3b      	ldr	r3, [r7, #32]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d014      	beq.n	8011aba <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a92:	68da      	ldr	r2, [r3, #12]
 8011a94:	6a3b      	ldr	r3, [r7, #32]
 8011a96:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011a98:	4b3e      	ldr	r3, [pc, #248]	; (8011b94 <udp_input+0x21c>)
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a9e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011aa0:	4a3c      	ldr	r2, [pc, #240]	; (8011b94 <udp_input+0x21c>)
 8011aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aa4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011aa6:	e008      	b.n	8011aba <udp_input+0x142>
      }
    }

    prev = pcb;
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aaa:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aae:	68db      	ldr	r3, [r3, #12]
 8011ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1a7      	bne.n	8011a08 <udp_input+0x90>
 8011ab8:	e000      	b.n	8011abc <udp_input+0x144>
        break;
 8011aba:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8011ac2:	69fb      	ldr	r3, [r7, #28]
 8011ac4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d002      	beq.n	8011ad2 <udp_input+0x15a>
    for_us = 1;
 8011acc:	2301      	movs	r3, #1
 8011ace:	76fb      	strb	r3, [r7, #27]
 8011ad0:	e00a      	b.n	8011ae8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	681a      	ldr	r2, [r3, #0]
 8011ad8:	4b2d      	ldr	r3, [pc, #180]	; (8011b90 <udp_input+0x218>)
 8011ada:	695b      	ldr	r3, [r3, #20]
 8011adc:	429a      	cmp	r2, r3
 8011ade:	bf0c      	ite	eq
 8011ae0:	2301      	moveq	r3, #1
 8011ae2:	2300      	movne	r3, #0
 8011ae4:	b2db      	uxtb	r3, r3
 8011ae6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011ae8:	7efb      	ldrb	r3, [r7, #27]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d041      	beq.n	8011b72 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011aee:	2108      	movs	r1, #8
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7fa f88d 	bl	800bc10 <pbuf_remove_header>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d00a      	beq.n	8011b12 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011afc:	4b20      	ldr	r3, [pc, #128]	; (8011b80 <udp_input+0x208>)
 8011afe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011b02:	4925      	ldr	r1, [pc, #148]	; (8011b98 <udp_input+0x220>)
 8011b04:	4820      	ldr	r0, [pc, #128]	; (8011b88 <udp_input+0x210>)
 8011b06:	f004 fe77 	bl	80167f8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	f7fa f906 	bl	800bd1c <pbuf_free>
      goto end;
 8011b10:	e032      	b.n	8011b78 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d012      	beq.n	8011b3e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1a:	699b      	ldr	r3, [r3, #24]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d00a      	beq.n	8011b36 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b22:	699c      	ldr	r4, [r3, #24]
 8011b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b26:	69d8      	ldr	r0, [r3, #28]
 8011b28:	8a3b      	ldrh	r3, [r7, #16]
 8011b2a:	9300      	str	r3, [sp, #0]
 8011b2c:	4b1b      	ldr	r3, [pc, #108]	; (8011b9c <udp_input+0x224>)
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011b32:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011b34:	e021      	b.n	8011b7a <udp_input+0x202>
        pbuf_free(p);
 8011b36:	6878      	ldr	r0, [r7, #4]
 8011b38:	f7fa f8f0 	bl	800bd1c <pbuf_free>
        goto end;
 8011b3c:	e01c      	b.n	8011b78 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011b3e:	7cfb      	ldrb	r3, [r7, #19]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d112      	bne.n	8011b6a <udp_input+0x1f2>
 8011b44:	4b12      	ldr	r3, [pc, #72]	; (8011b90 <udp_input+0x218>)
 8011b46:	695b      	ldr	r3, [r3, #20]
 8011b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011b4c:	2be0      	cmp	r3, #224	; 0xe0
 8011b4e:	d00c      	beq.n	8011b6a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011b50:	4b0f      	ldr	r3, [pc, #60]	; (8011b90 <udp_input+0x218>)
 8011b52:	899b      	ldrh	r3, [r3, #12]
 8011b54:	3308      	adds	r3, #8
 8011b56:	b29b      	uxth	r3, r3
 8011b58:	b21b      	sxth	r3, r3
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f7fa f8ca 	bl	800bcf6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011b62:	2103      	movs	r1, #3
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f003 f9c1 	bl	8014eec <icmp_dest_unreach>
      pbuf_free(p);
 8011b6a:	6878      	ldr	r0, [r7, #4]
 8011b6c:	f7fa f8d6 	bl	800bd1c <pbuf_free>
  return;
 8011b70:	e003      	b.n	8011b7a <udp_input+0x202>
    pbuf_free(p);
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7fa f8d2 	bl	800bd1c <pbuf_free>
  return;
 8011b78:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011b7a:	372c      	adds	r7, #44	; 0x2c
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd90      	pop	{r4, r7, pc}
 8011b80:	08019804 	.word	0x08019804
 8011b84:	080198a8 	.word	0x080198a8
 8011b88:	08019858 	.word	0x08019858
 8011b8c:	080198c0 	.word	0x080198c0
 8011b90:	2000a6c0 	.word	0x2000a6c0
 8011b94:	2000de90 	.word	0x2000de90
 8011b98:	080198dc 	.word	0x080198dc
 8011b9c:	2000a6d0 	.word	0x2000a6d0

08011ba0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b088      	sub	sp, #32
 8011ba4:	af02      	add	r7, sp, #8
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	60b9      	str	r1, [r7, #8]
 8011baa:	607a      	str	r2, [r7, #4]
 8011bac:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d109      	bne.n	8011bc8 <udp_sendto_if+0x28>
 8011bb4:	4b2e      	ldr	r3, [pc, #184]	; (8011c70 <udp_sendto_if+0xd0>)
 8011bb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011bba:	492e      	ldr	r1, [pc, #184]	; (8011c74 <udp_sendto_if+0xd4>)
 8011bbc:	482e      	ldr	r0, [pc, #184]	; (8011c78 <udp_sendto_if+0xd8>)
 8011bbe:	f004 fe1b 	bl	80167f8 <iprintf>
 8011bc2:	f06f 030f 	mvn.w	r3, #15
 8011bc6:	e04f      	b.n	8011c68 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8011bc8:	68bb      	ldr	r3, [r7, #8]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d109      	bne.n	8011be2 <udp_sendto_if+0x42>
 8011bce:	4b28      	ldr	r3, [pc, #160]	; (8011c70 <udp_sendto_if+0xd0>)
 8011bd0:	f240 2281 	movw	r2, #641	; 0x281
 8011bd4:	4929      	ldr	r1, [pc, #164]	; (8011c7c <udp_sendto_if+0xdc>)
 8011bd6:	4828      	ldr	r0, [pc, #160]	; (8011c78 <udp_sendto_if+0xd8>)
 8011bd8:	f004 fe0e 	bl	80167f8 <iprintf>
 8011bdc:	f06f 030f 	mvn.w	r3, #15
 8011be0:	e042      	b.n	8011c68 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d109      	bne.n	8011bfc <udp_sendto_if+0x5c>
 8011be8:	4b21      	ldr	r3, [pc, #132]	; (8011c70 <udp_sendto_if+0xd0>)
 8011bea:	f240 2282 	movw	r2, #642	; 0x282
 8011bee:	4924      	ldr	r1, [pc, #144]	; (8011c80 <udp_sendto_if+0xe0>)
 8011bf0:	4821      	ldr	r0, [pc, #132]	; (8011c78 <udp_sendto_if+0xd8>)
 8011bf2:	f004 fe01 	bl	80167f8 <iprintf>
 8011bf6:	f06f 030f 	mvn.w	r3, #15
 8011bfa:	e035      	b.n	8011c68 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011bfc:	6a3b      	ldr	r3, [r7, #32]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d109      	bne.n	8011c16 <udp_sendto_if+0x76>
 8011c02:	4b1b      	ldr	r3, [pc, #108]	; (8011c70 <udp_sendto_if+0xd0>)
 8011c04:	f240 2283 	movw	r2, #643	; 0x283
 8011c08:	491e      	ldr	r1, [pc, #120]	; (8011c84 <udp_sendto_if+0xe4>)
 8011c0a:	481b      	ldr	r0, [pc, #108]	; (8011c78 <udp_sendto_if+0xd8>)
 8011c0c:	f004 fdf4 	bl	80167f8 <iprintf>
 8011c10:	f06f 030f 	mvn.w	r3, #15
 8011c14:	e028      	b.n	8011c68 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d009      	beq.n	8011c30 <udp_sendto_if+0x90>
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d005      	beq.n	8011c30 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011c2c:	2be0      	cmp	r3, #224	; 0xe0
 8011c2e:	d103      	bne.n	8011c38 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011c30:	6a3b      	ldr	r3, [r7, #32]
 8011c32:	3304      	adds	r3, #4
 8011c34:	617b      	str	r3, [r7, #20]
 8011c36:	e00b      	b.n	8011c50 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	6a3b      	ldr	r3, [r7, #32]
 8011c3e:	3304      	adds	r3, #4
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d002      	beq.n	8011c4c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011c46:	f06f 0303 	mvn.w	r3, #3
 8011c4a:	e00d      	b.n	8011c68 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011c50:	887a      	ldrh	r2, [r7, #2]
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	9301      	str	r3, [sp, #4]
 8011c56:	6a3b      	ldr	r3, [r7, #32]
 8011c58:	9300      	str	r3, [sp, #0]
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	68b9      	ldr	r1, [r7, #8]
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f000 f811 	bl	8011c88 <udp_sendto_if_src>
 8011c66:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3718      	adds	r7, #24
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	08019804 	.word	0x08019804
 8011c74:	08019978 	.word	0x08019978
 8011c78:	08019858 	.word	0x08019858
 8011c7c:	08019994 	.word	0x08019994
 8011c80:	080199b0 	.word	0x080199b0
 8011c84:	080199d0 	.word	0x080199d0

08011c88 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b08c      	sub	sp, #48	; 0x30
 8011c8c:	af04      	add	r7, sp, #16
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	607a      	str	r2, [r7, #4]
 8011c94:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d109      	bne.n	8011cb0 <udp_sendto_if_src+0x28>
 8011c9c:	4b65      	ldr	r3, [pc, #404]	; (8011e34 <udp_sendto_if_src+0x1ac>)
 8011c9e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011ca2:	4965      	ldr	r1, [pc, #404]	; (8011e38 <udp_sendto_if_src+0x1b0>)
 8011ca4:	4865      	ldr	r0, [pc, #404]	; (8011e3c <udp_sendto_if_src+0x1b4>)
 8011ca6:	f004 fda7 	bl	80167f8 <iprintf>
 8011caa:	f06f 030f 	mvn.w	r3, #15
 8011cae:	e0bc      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d109      	bne.n	8011cca <udp_sendto_if_src+0x42>
 8011cb6:	4b5f      	ldr	r3, [pc, #380]	; (8011e34 <udp_sendto_if_src+0x1ac>)
 8011cb8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011cbc:	4960      	ldr	r1, [pc, #384]	; (8011e40 <udp_sendto_if_src+0x1b8>)
 8011cbe:	485f      	ldr	r0, [pc, #380]	; (8011e3c <udp_sendto_if_src+0x1b4>)
 8011cc0:	f004 fd9a 	bl	80167f8 <iprintf>
 8011cc4:	f06f 030f 	mvn.w	r3, #15
 8011cc8:	e0af      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d109      	bne.n	8011ce4 <udp_sendto_if_src+0x5c>
 8011cd0:	4b58      	ldr	r3, [pc, #352]	; (8011e34 <udp_sendto_if_src+0x1ac>)
 8011cd2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011cd6:	495b      	ldr	r1, [pc, #364]	; (8011e44 <udp_sendto_if_src+0x1bc>)
 8011cd8:	4858      	ldr	r0, [pc, #352]	; (8011e3c <udp_sendto_if_src+0x1b4>)
 8011cda:	f004 fd8d 	bl	80167f8 <iprintf>
 8011cde:	f06f 030f 	mvn.w	r3, #15
 8011ce2:	e0a2      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d109      	bne.n	8011cfe <udp_sendto_if_src+0x76>
 8011cea:	4b52      	ldr	r3, [pc, #328]	; (8011e34 <udp_sendto_if_src+0x1ac>)
 8011cec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011cf0:	4955      	ldr	r1, [pc, #340]	; (8011e48 <udp_sendto_if_src+0x1c0>)
 8011cf2:	4852      	ldr	r0, [pc, #328]	; (8011e3c <udp_sendto_if_src+0x1b4>)
 8011cf4:	f004 fd80 	bl	80167f8 <iprintf>
 8011cf8:	f06f 030f 	mvn.w	r3, #15
 8011cfc:	e095      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d109      	bne.n	8011d18 <udp_sendto_if_src+0x90>
 8011d04:	4b4b      	ldr	r3, [pc, #300]	; (8011e34 <udp_sendto_if_src+0x1ac>)
 8011d06:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011d0a:	4950      	ldr	r1, [pc, #320]	; (8011e4c <udp_sendto_if_src+0x1c4>)
 8011d0c:	484b      	ldr	r0, [pc, #300]	; (8011e3c <udp_sendto_if_src+0x1b4>)
 8011d0e:	f004 fd73 	bl	80167f8 <iprintf>
 8011d12:	f06f 030f 	mvn.w	r3, #15
 8011d16:	e088      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	8a5b      	ldrh	r3, [r3, #18]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d10f      	bne.n	8011d40 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011d20:	68f9      	ldr	r1, [r7, #12]
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	8a5b      	ldrh	r3, [r3, #18]
 8011d26:	461a      	mov	r2, r3
 8011d28:	68f8      	ldr	r0, [r7, #12]
 8011d2a:	f000 f893 	bl	8011e54 <udp_bind>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011d32:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d002      	beq.n	8011d40 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011d3a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d3e:	e074      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	891b      	ldrh	r3, [r3, #8]
 8011d44:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011d48:	4293      	cmp	r3, r2
 8011d4a:	d902      	bls.n	8011d52 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011d50:	e06b      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011d52:	2108      	movs	r1, #8
 8011d54:	68b8      	ldr	r0, [r7, #8]
 8011d56:	f7f9 ff4b 	bl	800bbf0 <pbuf_add_header>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d015      	beq.n	8011d8c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011d60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d64:	2108      	movs	r1, #8
 8011d66:	2022      	movs	r0, #34	; 0x22
 8011d68:	f7f9 fcf4 	bl	800b754 <pbuf_alloc>
 8011d6c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011d6e:	69fb      	ldr	r3, [r7, #28]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d102      	bne.n	8011d7a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011d74:	f04f 33ff 	mov.w	r3, #4294967295
 8011d78:	e057      	b.n	8011e2a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	891b      	ldrh	r3, [r3, #8]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d006      	beq.n	8011d90 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011d82:	68b9      	ldr	r1, [r7, #8]
 8011d84:	69f8      	ldr	r0, [r7, #28]
 8011d86:	f7fa f8ed 	bl	800bf64 <pbuf_chain>
 8011d8a:	e001      	b.n	8011d90 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011d8c:	68bb      	ldr	r3, [r7, #8]
 8011d8e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	895b      	ldrh	r3, [r3, #10]
 8011d94:	2b07      	cmp	r3, #7
 8011d96:	d806      	bhi.n	8011da6 <udp_sendto_if_src+0x11e>
 8011d98:	4b26      	ldr	r3, [pc, #152]	; (8011e34 <udp_sendto_if_src+0x1ac>)
 8011d9a:	f240 320d 	movw	r2, #781	; 0x30d
 8011d9e:	492c      	ldr	r1, [pc, #176]	; (8011e50 <udp_sendto_if_src+0x1c8>)
 8011da0:	4826      	ldr	r0, [pc, #152]	; (8011e3c <udp_sendto_if_src+0x1b4>)
 8011da2:	f004 fd29 	bl	80167f8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011da6:	69fb      	ldr	r3, [r7, #28]
 8011da8:	685b      	ldr	r3, [r3, #4]
 8011daa:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	8a5b      	ldrh	r3, [r3, #18]
 8011db0:	4618      	mov	r0, r3
 8011db2:	f7f8 fc1d 	bl	800a5f0 <lwip_htons>
 8011db6:	4603      	mov	r3, r0
 8011db8:	461a      	mov	r2, r3
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011dbe:	887b      	ldrh	r3, [r7, #2]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7f8 fc15 	bl	800a5f0 <lwip_htons>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	461a      	mov	r2, r3
 8011dca:	697b      	ldr	r3, [r7, #20]
 8011dcc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	719a      	strb	r2, [r3, #6]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	891b      	ldrh	r3, [r3, #8]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f7f8 fc07 	bl	800a5f0 <lwip_htons>
 8011de2:	4603      	mov	r3, r0
 8011de4:	461a      	mov	r2, r3
 8011de6:	697b      	ldr	r3, [r7, #20]
 8011de8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011dea:	2311      	movs	r3, #17
 8011dec:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	7adb      	ldrb	r3, [r3, #11]
 8011df2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	7a9b      	ldrb	r3, [r3, #10]
 8011df8:	7cb9      	ldrb	r1, [r7, #18]
 8011dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dfc:	9202      	str	r2, [sp, #8]
 8011dfe:	7cfa      	ldrb	r2, [r7, #19]
 8011e00:	9201      	str	r2, [sp, #4]
 8011e02:	9300      	str	r3, [sp, #0]
 8011e04:	460b      	mov	r3, r1
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011e0a:	69f8      	ldr	r0, [r7, #28]
 8011e0c:	f003 fafe 	bl	801540c <ip4_output_if_src>
 8011e10:	4603      	mov	r3, r0
 8011e12:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011e14:	69fa      	ldr	r2, [r7, #28]
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	d004      	beq.n	8011e26 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011e1c:	69f8      	ldr	r0, [r7, #28]
 8011e1e:	f7f9 ff7d 	bl	800bd1c <pbuf_free>
    q = NULL;
 8011e22:	2300      	movs	r3, #0
 8011e24:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011e26:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3720      	adds	r7, #32
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	08019804 	.word	0x08019804
 8011e38:	080199f0 	.word	0x080199f0
 8011e3c:	08019858 	.word	0x08019858
 8011e40:	08019a10 	.word	0x08019a10
 8011e44:	08019a30 	.word	0x08019a30
 8011e48:	08019a54 	.word	0x08019a54
 8011e4c:	08019a78 	.word	0x08019a78
 8011e50:	08019a9c 	.word	0x08019a9c

08011e54 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b086      	sub	sp, #24
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	60f8      	str	r0, [r7, #12]
 8011e5c:	60b9      	str	r1, [r7, #8]
 8011e5e:	4613      	mov	r3, r2
 8011e60:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011e62:	68bb      	ldr	r3, [r7, #8]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d101      	bne.n	8011e6c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011e68:	4b39      	ldr	r3, [pc, #228]	; (8011f50 <udp_bind+0xfc>)
 8011e6a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d109      	bne.n	8011e86 <udp_bind+0x32>
 8011e72:	4b38      	ldr	r3, [pc, #224]	; (8011f54 <udp_bind+0x100>)
 8011e74:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011e78:	4937      	ldr	r1, [pc, #220]	; (8011f58 <udp_bind+0x104>)
 8011e7a:	4838      	ldr	r0, [pc, #224]	; (8011f5c <udp_bind+0x108>)
 8011e7c:	f004 fcbc 	bl	80167f8 <iprintf>
 8011e80:	f06f 030f 	mvn.w	r3, #15
 8011e84:	e060      	b.n	8011f48 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011e86:	2300      	movs	r3, #0
 8011e88:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e8a:	4b35      	ldr	r3, [pc, #212]	; (8011f60 <udp_bind+0x10c>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	617b      	str	r3, [r7, #20]
 8011e90:	e009      	b.n	8011ea6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011e92:	68fa      	ldr	r2, [r7, #12]
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d102      	bne.n	8011ea0 <udp_bind+0x4c>
      rebind = 1;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8011e9e:	e005      	b.n	8011eac <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ea0:	697b      	ldr	r3, [r7, #20]
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	617b      	str	r3, [r7, #20]
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d1f2      	bne.n	8011e92 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011eac:	88fb      	ldrh	r3, [r7, #6]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d109      	bne.n	8011ec6 <udp_bind+0x72>
    port = udp_new_port();
 8011eb2:	f7ff fcc5 	bl	8011840 <udp_new_port>
 8011eb6:	4603      	mov	r3, r0
 8011eb8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011eba:	88fb      	ldrh	r3, [r7, #6]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d12c      	bne.n	8011f1a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011ec0:	f06f 0307 	mvn.w	r3, #7
 8011ec4:	e040      	b.n	8011f48 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ec6:	4b26      	ldr	r3, [pc, #152]	; (8011f60 <udp_bind+0x10c>)
 8011ec8:	681b      	ldr	r3, [r3, #0]
 8011eca:	617b      	str	r3, [r7, #20]
 8011ecc:	e022      	b.n	8011f14 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011ece:	68fa      	ldr	r2, [r7, #12]
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d01b      	beq.n	8011f0e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	8a5b      	ldrh	r3, [r3, #18]
 8011eda:	88fa      	ldrh	r2, [r7, #6]
 8011edc:	429a      	cmp	r2, r3
 8011ede:	d116      	bne.n	8011f0e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	68bb      	ldr	r3, [r7, #8]
 8011ee6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011ee8:	429a      	cmp	r2, r3
 8011eea:	d00d      	beq.n	8011f08 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00a      	beq.n	8011f08 <udp_bind+0xb4>
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d006      	beq.n	8011f08 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011efa:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d003      	beq.n	8011f08 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011f00:	697b      	ldr	r3, [r7, #20]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d102      	bne.n	8011f0e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011f08:	f06f 0307 	mvn.w	r3, #7
 8011f0c:	e01c      	b.n	8011f48 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011f0e:	697b      	ldr	r3, [r7, #20]
 8011f10:	68db      	ldr	r3, [r3, #12]
 8011f12:	617b      	str	r3, [r7, #20]
 8011f14:	697b      	ldr	r3, [r7, #20]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d1d9      	bne.n	8011ece <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d002      	beq.n	8011f26 <udp_bind+0xd2>
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	e000      	b.n	8011f28 <udp_bind+0xd4>
 8011f26:	2300      	movs	r3, #0
 8011f28:	68fa      	ldr	r2, [r7, #12]
 8011f2a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	88fa      	ldrh	r2, [r7, #6]
 8011f30:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011f32:	7cfb      	ldrb	r3, [r7, #19]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d106      	bne.n	8011f46 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011f38:	4b09      	ldr	r3, [pc, #36]	; (8011f60 <udp_bind+0x10c>)
 8011f3a:	681a      	ldr	r2, [r3, #0]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011f40:	4a07      	ldr	r2, [pc, #28]	; (8011f60 <udp_bind+0x10c>)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011f46:	2300      	movs	r3, #0
}
 8011f48:	4618      	mov	r0, r3
 8011f4a:	3718      	adds	r7, #24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bd80      	pop	{r7, pc}
 8011f50:	0801a75c 	.word	0x0801a75c
 8011f54:	08019804 	.word	0x08019804
 8011f58:	08019acc 	.word	0x08019acc
 8011f5c:	08019858 	.word	0x08019858
 8011f60:	2000de90 	.word	0x2000de90

08011f64 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b086      	sub	sp, #24
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	60f8      	str	r0, [r7, #12]
 8011f6c:	60b9      	str	r1, [r7, #8]
 8011f6e:	4613      	mov	r3, r2
 8011f70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d109      	bne.n	8011f8c <udp_connect+0x28>
 8011f78:	4b2c      	ldr	r3, [pc, #176]	; (801202c <udp_connect+0xc8>)
 8011f7a:	f240 4235 	movw	r2, #1077	; 0x435
 8011f7e:	492c      	ldr	r1, [pc, #176]	; (8012030 <udp_connect+0xcc>)
 8011f80:	482c      	ldr	r0, [pc, #176]	; (8012034 <udp_connect+0xd0>)
 8011f82:	f004 fc39 	bl	80167f8 <iprintf>
 8011f86:	f06f 030f 	mvn.w	r3, #15
 8011f8a:	e04b      	b.n	8012024 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011f8c:	68bb      	ldr	r3, [r7, #8]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d109      	bne.n	8011fa6 <udp_connect+0x42>
 8011f92:	4b26      	ldr	r3, [pc, #152]	; (801202c <udp_connect+0xc8>)
 8011f94:	f240 4236 	movw	r2, #1078	; 0x436
 8011f98:	4927      	ldr	r1, [pc, #156]	; (8012038 <udp_connect+0xd4>)
 8011f9a:	4826      	ldr	r0, [pc, #152]	; (8012034 <udp_connect+0xd0>)
 8011f9c:	f004 fc2c 	bl	80167f8 <iprintf>
 8011fa0:	f06f 030f 	mvn.w	r3, #15
 8011fa4:	e03e      	b.n	8012024 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	8a5b      	ldrh	r3, [r3, #18]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d10f      	bne.n	8011fce <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011fae:	68f9      	ldr	r1, [r7, #12]
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	8a5b      	ldrh	r3, [r3, #18]
 8011fb4:	461a      	mov	r2, r3
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f7ff ff4c 	bl	8011e54 <udp_bind>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011fc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d002      	beq.n	8011fce <udp_connect+0x6a>
      return err;
 8011fc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011fcc:	e02a      	b.n	8012024 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d002      	beq.n	8011fda <udp_connect+0x76>
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	e000      	b.n	8011fdc <udp_connect+0x78>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	68fa      	ldr	r2, [r7, #12]
 8011fde:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	88fa      	ldrh	r2, [r7, #6]
 8011fe4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	7c1b      	ldrb	r3, [r3, #16]
 8011fea:	f043 0304 	orr.w	r3, r3, #4
 8011fee:	b2da      	uxtb	r2, r3
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ff4:	4b11      	ldr	r3, [pc, #68]	; (801203c <udp_connect+0xd8>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	617b      	str	r3, [r7, #20]
 8011ffa:	e008      	b.n	801200e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011ffc:	68fa      	ldr	r2, [r7, #12]
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	429a      	cmp	r2, r3
 8012002:	d101      	bne.n	8012008 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012004:	2300      	movs	r3, #0
 8012006:	e00d      	b.n	8012024 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012008:	697b      	ldr	r3, [r7, #20]
 801200a:	68db      	ldr	r3, [r3, #12]
 801200c:	617b      	str	r3, [r7, #20]
 801200e:	697b      	ldr	r3, [r7, #20]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1f3      	bne.n	8011ffc <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012014:	4b09      	ldr	r3, [pc, #36]	; (801203c <udp_connect+0xd8>)
 8012016:	681a      	ldr	r2, [r3, #0]
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801201c:	4a07      	ldr	r2, [pc, #28]	; (801203c <udp_connect+0xd8>)
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012022:	2300      	movs	r3, #0
}
 8012024:	4618      	mov	r0, r3
 8012026:	3718      	adds	r7, #24
 8012028:	46bd      	mov	sp, r7
 801202a:	bd80      	pop	{r7, pc}
 801202c:	08019804 	.word	0x08019804
 8012030:	08019ae4 	.word	0x08019ae4
 8012034:	08019858 	.word	0x08019858
 8012038:	08019b00 	.word	0x08019b00
 801203c:	2000de90 	.word	0x2000de90

08012040 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	60f8      	str	r0, [r7, #12]
 8012048:	60b9      	str	r1, [r7, #8]
 801204a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d107      	bne.n	8012062 <udp_recv+0x22>
 8012052:	4b08      	ldr	r3, [pc, #32]	; (8012074 <udp_recv+0x34>)
 8012054:	f240 428a 	movw	r2, #1162	; 0x48a
 8012058:	4907      	ldr	r1, [pc, #28]	; (8012078 <udp_recv+0x38>)
 801205a:	4808      	ldr	r0, [pc, #32]	; (801207c <udp_recv+0x3c>)
 801205c:	f004 fbcc 	bl	80167f8 <iprintf>
 8012060:	e005      	b.n	801206e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012062:	68fb      	ldr	r3, [r7, #12]
 8012064:	68ba      	ldr	r2, [r7, #8]
 8012066:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	687a      	ldr	r2, [r7, #4]
 801206c:	61da      	str	r2, [r3, #28]
}
 801206e:	3710      	adds	r7, #16
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}
 8012074:	08019804 	.word	0x08019804
 8012078:	08019b38 	.word	0x08019b38
 801207c:	08019858 	.word	0x08019858

08012080 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012080:	b580      	push	{r7, lr}
 8012082:	b084      	sub	sp, #16
 8012084:	af00      	add	r7, sp, #0
 8012086:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d107      	bne.n	801209e <udp_remove+0x1e>
 801208e:	4b19      	ldr	r3, [pc, #100]	; (80120f4 <udp_remove+0x74>)
 8012090:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012094:	4918      	ldr	r1, [pc, #96]	; (80120f8 <udp_remove+0x78>)
 8012096:	4819      	ldr	r0, [pc, #100]	; (80120fc <udp_remove+0x7c>)
 8012098:	f004 fbae 	bl	80167f8 <iprintf>
 801209c:	e026      	b.n	80120ec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801209e:	4b18      	ldr	r3, [pc, #96]	; (8012100 <udp_remove+0x80>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d105      	bne.n	80120b4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80120a8:	4b15      	ldr	r3, [pc, #84]	; (8012100 <udp_remove+0x80>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	68db      	ldr	r3, [r3, #12]
 80120ae:	4a14      	ldr	r2, [pc, #80]	; (8012100 <udp_remove+0x80>)
 80120b0:	6013      	str	r3, [r2, #0]
 80120b2:	e017      	b.n	80120e4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80120b4:	4b12      	ldr	r3, [pc, #72]	; (8012100 <udp_remove+0x80>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	60fb      	str	r3, [r7, #12]
 80120ba:	e010      	b.n	80120de <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d009      	beq.n	80120d8 <udp_remove+0x58>
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	687a      	ldr	r2, [r7, #4]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d104      	bne.n	80120d8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	68da      	ldr	r2, [r3, #12]
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	60da      	str	r2, [r3, #12]
        break;
 80120d6:	e005      	b.n	80120e4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	60fb      	str	r3, [r7, #12]
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d1eb      	bne.n	80120bc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80120e4:	6879      	ldr	r1, [r7, #4]
 80120e6:	2000      	movs	r0, #0
 80120e8:	f7f8 ffd0 	bl	800b08c <memp_free>
}
 80120ec:	3710      	adds	r7, #16
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	08019804 	.word	0x08019804
 80120f8:	08019b50 	.word	0x08019b50
 80120fc:	08019858 	.word	0x08019858
 8012100:	2000de90 	.word	0x2000de90

08012104 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b082      	sub	sp, #8
 8012108:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801210a:	2000      	movs	r0, #0
 801210c:	f7f8 ff48 	bl	800afa0 <memp_malloc>
 8012110:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d007      	beq.n	8012128 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012118:	2220      	movs	r2, #32
 801211a:	2100      	movs	r1, #0
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f004 fbd0 	bl	80168c2 <memset>
    pcb->ttl = UDP_TTL;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	22ff      	movs	r2, #255	; 0xff
 8012126:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012128:	687b      	ldr	r3, [r7, #4]
}
 801212a:	4618      	mov	r0, r3
 801212c:	3708      	adds	r7, #8
 801212e:	46bd      	mov	sp, r7
 8012130:	bd80      	pop	{r7, pc}
	...

08012134 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012134:	b480      	push	{r7}
 8012136:	b085      	sub	sp, #20
 8012138:	af00      	add	r7, sp, #0
 801213a:	6078      	str	r0, [r7, #4]
 801213c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d01e      	beq.n	8012182 <udp_netif_ip_addr_changed+0x4e>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d01a      	beq.n	8012182 <udp_netif_ip_addr_changed+0x4e>
 801214c:	683b      	ldr	r3, [r7, #0]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d017      	beq.n	8012182 <udp_netif_ip_addr_changed+0x4e>
 8012152:	683b      	ldr	r3, [r7, #0]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d013      	beq.n	8012182 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801215a:	4b0d      	ldr	r3, [pc, #52]	; (8012190 <udp_netif_ip_addr_changed+0x5c>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	60fb      	str	r3, [r7, #12]
 8012160:	e00c      	b.n	801217c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	429a      	cmp	r2, r3
 801216c:	d103      	bne.n	8012176 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	681a      	ldr	r2, [r3, #0]
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	68db      	ldr	r3, [r3, #12]
 801217a:	60fb      	str	r3, [r7, #12]
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d1ef      	bne.n	8012162 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012182:	bf00      	nop
 8012184:	3714      	adds	r7, #20
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	2000de90 	.word	0x2000de90

08012194 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012198:	4b20      	ldr	r3, [pc, #128]	; (801221c <dhcp_inc_pcb_refcount+0x88>)
 801219a:	781b      	ldrb	r3, [r3, #0]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d133      	bne.n	8012208 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80121a0:	4b1f      	ldr	r3, [pc, #124]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d005      	beq.n	80121b4 <dhcp_inc_pcb_refcount+0x20>
 80121a8:	4b1e      	ldr	r3, [pc, #120]	; (8012224 <dhcp_inc_pcb_refcount+0x90>)
 80121aa:	22e5      	movs	r2, #229	; 0xe5
 80121ac:	491e      	ldr	r1, [pc, #120]	; (8012228 <dhcp_inc_pcb_refcount+0x94>)
 80121ae:	481f      	ldr	r0, [pc, #124]	; (801222c <dhcp_inc_pcb_refcount+0x98>)
 80121b0:	f004 fb22 	bl	80167f8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80121b4:	f7ff ffa6 	bl	8012104 <udp_new>
 80121b8:	4603      	mov	r3, r0
 80121ba:	4a19      	ldr	r2, [pc, #100]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121bc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80121be:	4b18      	ldr	r3, [pc, #96]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d102      	bne.n	80121cc <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80121c6:	f04f 33ff 	mov.w	r3, #4294967295
 80121ca:	e024      	b.n	8012216 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80121cc:	4b14      	ldr	r3, [pc, #80]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	7a5a      	ldrb	r2, [r3, #9]
 80121d2:	4b13      	ldr	r3, [pc, #76]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	f042 0220 	orr.w	r2, r2, #32
 80121da:	b2d2      	uxtb	r2, r2
 80121dc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80121de:	4b10      	ldr	r3, [pc, #64]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	2244      	movs	r2, #68	; 0x44
 80121e4:	4912      	ldr	r1, [pc, #72]	; (8012230 <dhcp_inc_pcb_refcount+0x9c>)
 80121e6:	4618      	mov	r0, r3
 80121e8:	f7ff fe34 	bl	8011e54 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80121ec:	4b0c      	ldr	r3, [pc, #48]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	2243      	movs	r2, #67	; 0x43
 80121f2:	490f      	ldr	r1, [pc, #60]	; (8012230 <dhcp_inc_pcb_refcount+0x9c>)
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7ff feb5 	bl	8011f64 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80121fa:	4b09      	ldr	r3, [pc, #36]	; (8012220 <dhcp_inc_pcb_refcount+0x8c>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	2200      	movs	r2, #0
 8012200:	490c      	ldr	r1, [pc, #48]	; (8012234 <dhcp_inc_pcb_refcount+0xa0>)
 8012202:	4618      	mov	r0, r3
 8012204:	f7ff ff1c 	bl	8012040 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012208:	4b04      	ldr	r3, [pc, #16]	; (801221c <dhcp_inc_pcb_refcount+0x88>)
 801220a:	781b      	ldrb	r3, [r3, #0]
 801220c:	3301      	adds	r3, #1
 801220e:	b2da      	uxtb	r2, r3
 8012210:	4b02      	ldr	r3, [pc, #8]	; (801221c <dhcp_inc_pcb_refcount+0x88>)
 8012212:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012214:	2300      	movs	r3, #0
}
 8012216:	4618      	mov	r0, r3
 8012218:	bd80      	pop	{r7, pc}
 801221a:	bf00      	nop
 801221c:	2000dec0 	.word	0x2000dec0
 8012220:	2000debc 	.word	0x2000debc
 8012224:	08019b68 	.word	0x08019b68
 8012228:	08019ba0 	.word	0x08019ba0
 801222c:	08019bc8 	.word	0x08019bc8
 8012230:	0801a75c 	.word	0x0801a75c
 8012234:	08013a55 	.word	0x08013a55

08012238 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801223c:	4b0e      	ldr	r3, [pc, #56]	; (8012278 <dhcp_dec_pcb_refcount+0x40>)
 801223e:	781b      	ldrb	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d105      	bne.n	8012250 <dhcp_dec_pcb_refcount+0x18>
 8012244:	4b0d      	ldr	r3, [pc, #52]	; (801227c <dhcp_dec_pcb_refcount+0x44>)
 8012246:	22ff      	movs	r2, #255	; 0xff
 8012248:	490d      	ldr	r1, [pc, #52]	; (8012280 <dhcp_dec_pcb_refcount+0x48>)
 801224a:	480e      	ldr	r0, [pc, #56]	; (8012284 <dhcp_dec_pcb_refcount+0x4c>)
 801224c:	f004 fad4 	bl	80167f8 <iprintf>
  dhcp_pcb_refcount--;
 8012250:	4b09      	ldr	r3, [pc, #36]	; (8012278 <dhcp_dec_pcb_refcount+0x40>)
 8012252:	781b      	ldrb	r3, [r3, #0]
 8012254:	3b01      	subs	r3, #1
 8012256:	b2da      	uxtb	r2, r3
 8012258:	4b07      	ldr	r3, [pc, #28]	; (8012278 <dhcp_dec_pcb_refcount+0x40>)
 801225a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801225c:	4b06      	ldr	r3, [pc, #24]	; (8012278 <dhcp_dec_pcb_refcount+0x40>)
 801225e:	781b      	ldrb	r3, [r3, #0]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d107      	bne.n	8012274 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012264:	4b08      	ldr	r3, [pc, #32]	; (8012288 <dhcp_dec_pcb_refcount+0x50>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	4618      	mov	r0, r3
 801226a:	f7ff ff09 	bl	8012080 <udp_remove>
    dhcp_pcb = NULL;
 801226e:	4b06      	ldr	r3, [pc, #24]	; (8012288 <dhcp_dec_pcb_refcount+0x50>)
 8012270:	2200      	movs	r2, #0
 8012272:	601a      	str	r2, [r3, #0]
  }
}
 8012274:	bf00      	nop
 8012276:	bd80      	pop	{r7, pc}
 8012278:	2000dec0 	.word	0x2000dec0
 801227c:	08019b68 	.word	0x08019b68
 8012280:	08019bf0 	.word	0x08019bf0
 8012284:	08019bc8 	.word	0x08019bc8
 8012288:	2000debc 	.word	0x2000debc

0801228c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012298:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801229a:	210c      	movs	r1, #12
 801229c:	68f8      	ldr	r0, [r7, #12]
 801229e:	f001 f81b 	bl	80132d8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80122a2:	4b06      	ldr	r3, [pc, #24]	; (80122bc <dhcp_handle_nak+0x30>)
 80122a4:	4a05      	ldr	r2, [pc, #20]	; (80122bc <dhcp_handle_nak+0x30>)
 80122a6:	4905      	ldr	r1, [pc, #20]	; (80122bc <dhcp_handle_nak+0x30>)
 80122a8:	6878      	ldr	r0, [r7, #4]
 80122aa:	f7f9 f891 	bl	800b3d0 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fc0e 	bl	8012ad0 <dhcp_discover>
}
 80122b4:	bf00      	nop
 80122b6:	3710      	adds	r7, #16
 80122b8:	46bd      	mov	sp, r7
 80122ba:	bd80      	pop	{r7, pc}
 80122bc:	0801a75c 	.word	0x0801a75c

080122c0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122cc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80122ce:	2108      	movs	r1, #8
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f001 f801 	bl	80132d8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	331c      	adds	r3, #28
 80122da:	2200      	movs	r2, #0
 80122dc:	4619      	mov	r1, r3
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f002 fb02 	bl	80148e8 <etharp_query>
 80122e4:	4603      	mov	r3, r0
 80122e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	799b      	ldrb	r3, [r3, #6]
 80122ec:	2bff      	cmp	r3, #255	; 0xff
 80122ee:	d005      	beq.n	80122fc <dhcp_check+0x3c>
    dhcp->tries++;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	799b      	ldrb	r3, [r3, #6]
 80122f4:	3301      	adds	r3, #1
 80122f6:	b2da      	uxtb	r2, r3
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80122fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012300:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012302:	893b      	ldrh	r3, [r7, #8]
 8012304:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012308:	4a06      	ldr	r2, [pc, #24]	; (8012324 <dhcp_check+0x64>)
 801230a:	fb82 1203 	smull	r1, r2, r2, r3
 801230e:	1152      	asrs	r2, r2, #5
 8012310:	17db      	asrs	r3, r3, #31
 8012312:	1ad3      	subs	r3, r2, r3
 8012314:	b29a      	uxth	r2, r3
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801231a:	bf00      	nop
 801231c:	3710      	adds	r7, #16
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	10624dd3 	.word	0x10624dd3

08012328 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b084      	sub	sp, #16
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
 8012330:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012336:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012338:	4b0c      	ldr	r3, [pc, #48]	; (801236c <dhcp_handle_offer+0x44>)
 801233a:	789b      	ldrb	r3, [r3, #2]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d011      	beq.n	8012364 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	2200      	movs	r2, #0
 8012344:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012346:	4b0a      	ldr	r3, [pc, #40]	; (8012370 <dhcp_handle_offer+0x48>)
 8012348:	689b      	ldr	r3, [r3, #8]
 801234a:	4618      	mov	r0, r3
 801234c:	f7f8 f965 	bl	800a61a <lwip_htonl>
 8012350:	4602      	mov	r2, r0
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	691a      	ldr	r2, [r3, #16]
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 f808 	bl	8012374 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012364:	bf00      	nop
 8012366:	3710      	adds	r7, #16
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}
 801236c:	2000deb4 	.word	0x2000deb4
 8012370:	2000de94 	.word	0x2000de94

08012374 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012374:	b5b0      	push	{r4, r5, r7, lr}
 8012376:	b08a      	sub	sp, #40	; 0x28
 8012378:	af02      	add	r7, sp, #8
 801237a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d109      	bne.n	8012396 <dhcp_select+0x22>
 8012382:	4b71      	ldr	r3, [pc, #452]	; (8012548 <dhcp_select+0x1d4>)
 8012384:	f240 1277 	movw	r2, #375	; 0x177
 8012388:	4970      	ldr	r1, [pc, #448]	; (801254c <dhcp_select+0x1d8>)
 801238a:	4871      	ldr	r0, [pc, #452]	; (8012550 <dhcp_select+0x1dc>)
 801238c:	f004 fa34 	bl	80167f8 <iprintf>
 8012390:	f06f 030f 	mvn.w	r3, #15
 8012394:	e0d3      	b.n	801253e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801239c:	69bb      	ldr	r3, [r7, #24]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d109      	bne.n	80123b6 <dhcp_select+0x42>
 80123a2:	4b69      	ldr	r3, [pc, #420]	; (8012548 <dhcp_select+0x1d4>)
 80123a4:	f240 1279 	movw	r2, #377	; 0x179
 80123a8:	496a      	ldr	r1, [pc, #424]	; (8012554 <dhcp_select+0x1e0>)
 80123aa:	4869      	ldr	r0, [pc, #420]	; (8012550 <dhcp_select+0x1dc>)
 80123ac:	f004 fa24 	bl	80167f8 <iprintf>
 80123b0:	f06f 0305 	mvn.w	r3, #5
 80123b4:	e0c3      	b.n	801253e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80123b6:	2101      	movs	r1, #1
 80123b8:	69b8      	ldr	r0, [r7, #24]
 80123ba:	f000 ff8d 	bl	80132d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80123be:	f107 030c 	add.w	r3, r7, #12
 80123c2:	2203      	movs	r2, #3
 80123c4:	69b9      	ldr	r1, [r7, #24]
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f001 fc12 	bl	8013bf0 <dhcp_create_msg>
 80123cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80123ce:	697b      	ldr	r3, [r7, #20]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f000 8085 	beq.w	80124e0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80123dc:	89b8      	ldrh	r0, [r7, #12]
 80123de:	693b      	ldr	r3, [r7, #16]
 80123e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123e4:	2302      	movs	r3, #2
 80123e6:	2239      	movs	r2, #57	; 0x39
 80123e8:	f000 ff90 	bl	801330c <dhcp_option>
 80123ec:	4603      	mov	r3, r0
 80123ee:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80123f0:	89b8      	ldrh	r0, [r7, #12]
 80123f2:	693b      	ldr	r3, [r7, #16]
 80123f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80123fc:	461a      	mov	r2, r3
 80123fe:	f000 ffdf 	bl	80133c0 <dhcp_option_short>
 8012402:	4603      	mov	r3, r0
 8012404:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012406:	89b8      	ldrh	r0, [r7, #12]
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801240e:	2304      	movs	r3, #4
 8012410:	2232      	movs	r2, #50	; 0x32
 8012412:	f000 ff7b 	bl	801330c <dhcp_option>
 8012416:	4603      	mov	r3, r0
 8012418:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801241a:	89bc      	ldrh	r4, [r7, #12]
 801241c:	693b      	ldr	r3, [r7, #16]
 801241e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012422:	69bb      	ldr	r3, [r7, #24]
 8012424:	69db      	ldr	r3, [r3, #28]
 8012426:	4618      	mov	r0, r3
 8012428:	f7f8 f8f7 	bl	800a61a <lwip_htonl>
 801242c:	4603      	mov	r3, r0
 801242e:	461a      	mov	r2, r3
 8012430:	4629      	mov	r1, r5
 8012432:	4620      	mov	r0, r4
 8012434:	f000 fff6 	bl	8013424 <dhcp_option_long>
 8012438:	4603      	mov	r3, r0
 801243a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801243c:	89b8      	ldrh	r0, [r7, #12]
 801243e:	693b      	ldr	r3, [r7, #16]
 8012440:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012444:	2304      	movs	r3, #4
 8012446:	2236      	movs	r2, #54	; 0x36
 8012448:	f000 ff60 	bl	801330c <dhcp_option>
 801244c:	4603      	mov	r3, r0
 801244e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012450:	89bc      	ldrh	r4, [r7, #12]
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	699b      	ldr	r3, [r3, #24]
 801245c:	4618      	mov	r0, r3
 801245e:	f7f8 f8dc 	bl	800a61a <lwip_htonl>
 8012462:	4603      	mov	r3, r0
 8012464:	461a      	mov	r2, r3
 8012466:	4629      	mov	r1, r5
 8012468:	4620      	mov	r0, r4
 801246a:	f000 ffdb 	bl	8013424 <dhcp_option_long>
 801246e:	4603      	mov	r3, r0
 8012470:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012472:	89b8      	ldrh	r0, [r7, #12]
 8012474:	693b      	ldr	r3, [r7, #16]
 8012476:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801247a:	2303      	movs	r3, #3
 801247c:	2237      	movs	r2, #55	; 0x37
 801247e:	f000 ff45 	bl	801330c <dhcp_option>
 8012482:	4603      	mov	r3, r0
 8012484:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012486:	2300      	movs	r3, #0
 8012488:	77bb      	strb	r3, [r7, #30]
 801248a:	e00e      	b.n	80124aa <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801248c:	89b8      	ldrh	r0, [r7, #12]
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012494:	7fbb      	ldrb	r3, [r7, #30]
 8012496:	4a30      	ldr	r2, [pc, #192]	; (8012558 <dhcp_select+0x1e4>)
 8012498:	5cd3      	ldrb	r3, [r2, r3]
 801249a:	461a      	mov	r2, r3
 801249c:	f000 ff6a 	bl	8013374 <dhcp_option_byte>
 80124a0:	4603      	mov	r3, r0
 80124a2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80124a4:	7fbb      	ldrb	r3, [r7, #30]
 80124a6:	3301      	adds	r3, #1
 80124a8:	77bb      	strb	r3, [r7, #30]
 80124aa:	7fbb      	ldrb	r3, [r7, #30]
 80124ac:	2b02      	cmp	r3, #2
 80124ae:	d9ed      	bls.n	801248c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80124b0:	89b8      	ldrh	r0, [r7, #12]
 80124b2:	693b      	ldr	r3, [r7, #16]
 80124b4:	33f0      	adds	r3, #240	; 0xf0
 80124b6:	697a      	ldr	r2, [r7, #20]
 80124b8:	4619      	mov	r1, r3
 80124ba:	f001 fc6f 	bl	8013d9c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80124be:	4b27      	ldr	r3, [pc, #156]	; (801255c <dhcp_select+0x1e8>)
 80124c0:	6818      	ldr	r0, [r3, #0]
 80124c2:	4b27      	ldr	r3, [pc, #156]	; (8012560 <dhcp_select+0x1ec>)
 80124c4:	9301      	str	r3, [sp, #4]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	9300      	str	r3, [sp, #0]
 80124ca:	2343      	movs	r3, #67	; 0x43
 80124cc:	4a25      	ldr	r2, [pc, #148]	; (8012564 <dhcp_select+0x1f0>)
 80124ce:	6979      	ldr	r1, [r7, #20]
 80124d0:	f7ff fbda 	bl	8011c88 <udp_sendto_if_src>
 80124d4:	4603      	mov	r3, r0
 80124d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80124d8:	6978      	ldr	r0, [r7, #20]
 80124da:	f7f9 fc1f 	bl	800bd1c <pbuf_free>
 80124de:	e001      	b.n	80124e4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80124e0:	23ff      	movs	r3, #255	; 0xff
 80124e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	799b      	ldrb	r3, [r3, #6]
 80124e8:	2bff      	cmp	r3, #255	; 0xff
 80124ea:	d005      	beq.n	80124f8 <dhcp_select+0x184>
    dhcp->tries++;
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	799b      	ldrb	r3, [r3, #6]
 80124f0:	3301      	adds	r3, #1
 80124f2:	b2da      	uxtb	r2, r3
 80124f4:	69bb      	ldr	r3, [r7, #24]
 80124f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80124f8:	69bb      	ldr	r3, [r7, #24]
 80124fa:	799b      	ldrb	r3, [r3, #6]
 80124fc:	2b05      	cmp	r3, #5
 80124fe:	d80d      	bhi.n	801251c <dhcp_select+0x1a8>
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	799b      	ldrb	r3, [r3, #6]
 8012504:	461a      	mov	r2, r3
 8012506:	2301      	movs	r3, #1
 8012508:	4093      	lsls	r3, r2
 801250a:	b29b      	uxth	r3, r3
 801250c:	461a      	mov	r2, r3
 801250e:	0152      	lsls	r2, r2, #5
 8012510:	1ad2      	subs	r2, r2, r3
 8012512:	0092      	lsls	r2, r2, #2
 8012514:	4413      	add	r3, r2
 8012516:	00db      	lsls	r3, r3, #3
 8012518:	b29b      	uxth	r3, r3
 801251a:	e001      	b.n	8012520 <dhcp_select+0x1ac>
 801251c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012520:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012522:	89fb      	ldrh	r3, [r7, #14]
 8012524:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012528:	4a0f      	ldr	r2, [pc, #60]	; (8012568 <dhcp_select+0x1f4>)
 801252a:	fb82 1203 	smull	r1, r2, r2, r3
 801252e:	1152      	asrs	r2, r2, #5
 8012530:	17db      	asrs	r3, r3, #31
 8012532:	1ad3      	subs	r3, r2, r3
 8012534:	b29a      	uxth	r2, r3
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801253a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801253e:	4618      	mov	r0, r3
 8012540:	3720      	adds	r7, #32
 8012542:	46bd      	mov	sp, r7
 8012544:	bdb0      	pop	{r4, r5, r7, pc}
 8012546:	bf00      	nop
 8012548:	08019b68 	.word	0x08019b68
 801254c:	08019c14 	.word	0x08019c14
 8012550:	08019bc8 	.word	0x08019bc8
 8012554:	08019c30 	.word	0x08019c30
 8012558:	2000001c 	.word	0x2000001c
 801255c:	2000debc 	.word	0x2000debc
 8012560:	0801a75c 	.word	0x0801a75c
 8012564:	0801a760 	.word	0x0801a760
 8012568:	10624dd3 	.word	0x10624dd3

0801256c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012572:	4b27      	ldr	r3, [pc, #156]	; (8012610 <dhcp_coarse_tmr+0xa4>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	607b      	str	r3, [r7, #4]
 8012578:	e042      	b.n	8012600 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801257e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d039      	beq.n	80125fa <dhcp_coarse_tmr+0x8e>
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	795b      	ldrb	r3, [r3, #5]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d035      	beq.n	80125fa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	8a9b      	ldrh	r3, [r3, #20]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d012      	beq.n	80125bc <dhcp_coarse_tmr+0x50>
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	8a5b      	ldrh	r3, [r3, #18]
 801259a:	3301      	adds	r3, #1
 801259c:	b29a      	uxth	r2, r3
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	825a      	strh	r2, [r3, #18]
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	8a5a      	ldrh	r2, [r3, #18]
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	8a9b      	ldrh	r3, [r3, #20]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d106      	bne.n	80125bc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fdf8 	bl	80131a4 <dhcp_release_and_stop>
        dhcp_start(netif);
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 f96b 	bl	8012890 <dhcp_start>
 80125ba:	e01e      	b.n	80125fa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	8a1b      	ldrh	r3, [r3, #16]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00b      	beq.n	80125dc <dhcp_coarse_tmr+0x70>
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	8a1b      	ldrh	r3, [r3, #16]
 80125c8:	1e5a      	subs	r2, r3, #1
 80125ca:	b291      	uxth	r1, r2
 80125cc:	683a      	ldr	r2, [r7, #0]
 80125ce:	8211      	strh	r1, [r2, #16]
 80125d0:	2b01      	cmp	r3, #1
 80125d2:	d103      	bne.n	80125dc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f000 f8c7 	bl	8012768 <dhcp_t2_timeout>
 80125da:	e00e      	b.n	80125fa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	89db      	ldrh	r3, [r3, #14]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d00a      	beq.n	80125fa <dhcp_coarse_tmr+0x8e>
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	89db      	ldrh	r3, [r3, #14]
 80125e8:	1e5a      	subs	r2, r3, #1
 80125ea:	b291      	uxth	r1, r2
 80125ec:	683a      	ldr	r2, [r7, #0]
 80125ee:	81d1      	strh	r1, [r2, #14]
 80125f0:	2b01      	cmp	r3, #1
 80125f2:	d102      	bne.n	80125fa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f000 f888 	bl	801270a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	607b      	str	r3, [r7, #4]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1b9      	bne.n	801257a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012606:	bf00      	nop
 8012608:	bf00      	nop
 801260a:	3708      	adds	r7, #8
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	2000de28 	.word	0x2000de28

08012614 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b082      	sub	sp, #8
 8012618:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801261a:	4b16      	ldr	r3, [pc, #88]	; (8012674 <dhcp_fine_tmr+0x60>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	607b      	str	r3, [r7, #4]
 8012620:	e020      	b.n	8012664 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012626:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012628:	683b      	ldr	r3, [r7, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d017      	beq.n	801265e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	891b      	ldrh	r3, [r3, #8]
 8012632:	2b01      	cmp	r3, #1
 8012634:	d906      	bls.n	8012644 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	891b      	ldrh	r3, [r3, #8]
 801263a:	3b01      	subs	r3, #1
 801263c:	b29a      	uxth	r2, r3
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	811a      	strh	r2, [r3, #8]
 8012642:	e00c      	b.n	801265e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	891b      	ldrh	r3, [r3, #8]
 8012648:	2b01      	cmp	r3, #1
 801264a:	d108      	bne.n	801265e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	891b      	ldrh	r3, [r3, #8]
 8012650:	3b01      	subs	r3, #1
 8012652:	b29a      	uxth	r2, r3
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f000 f80d 	bl	8012678 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	607b      	str	r3, [r7, #4]
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d1db      	bne.n	8012622 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801266a:	bf00      	nop
 801266c:	bf00      	nop
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	2000de28 	.word	0x2000de28

08012678 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012684:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	795b      	ldrb	r3, [r3, #5]
 801268a:	2b0c      	cmp	r3, #12
 801268c:	d003      	beq.n	8012696 <dhcp_timeout+0x1e>
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	795b      	ldrb	r3, [r3, #5]
 8012692:	2b06      	cmp	r3, #6
 8012694:	d103      	bne.n	801269e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012696:	6878      	ldr	r0, [r7, #4]
 8012698:	f000 fa1a 	bl	8012ad0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801269c:	e031      	b.n	8012702 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	795b      	ldrb	r3, [r3, #5]
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d10e      	bne.n	80126c4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	799b      	ldrb	r3, [r3, #6]
 80126aa:	2b05      	cmp	r3, #5
 80126ac:	d803      	bhi.n	80126b6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7ff fe60 	bl	8012374 <dhcp_select>
}
 80126b4:	e025      	b.n	8012702 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fd74 	bl	80131a4 <dhcp_release_and_stop>
      dhcp_start(netif);
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f8e7 	bl	8012890 <dhcp_start>
}
 80126c2:	e01e      	b.n	8012702 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	795b      	ldrb	r3, [r3, #5]
 80126c8:	2b08      	cmp	r3, #8
 80126ca:	d10b      	bne.n	80126e4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	799b      	ldrb	r3, [r3, #6]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d803      	bhi.n	80126dc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80126d4:	6878      	ldr	r0, [r7, #4]
 80126d6:	f7ff fdf3 	bl	80122c0 <dhcp_check>
}
 80126da:	e012      	b.n	8012702 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80126dc:	6878      	ldr	r0, [r7, #4]
 80126de:	f000 fa99 	bl	8012c14 <dhcp_bind>
}
 80126e2:	e00e      	b.n	8012702 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	795b      	ldrb	r3, [r3, #5]
 80126e8:	2b03      	cmp	r3, #3
 80126ea:	d10a      	bne.n	8012702 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80126ec:	68fb      	ldr	r3, [r7, #12]
 80126ee:	799b      	ldrb	r3, [r3, #6]
 80126f0:	2b01      	cmp	r3, #1
 80126f2:	d803      	bhi.n	80126fc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80126f4:	6878      	ldr	r0, [r7, #4]
 80126f6:	f000 fc9f 	bl	8013038 <dhcp_reboot>
}
 80126fa:	e002      	b.n	8012702 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 f9e7 	bl	8012ad0 <dhcp_discover>
}
 8012702:	bf00      	nop
 8012704:	3710      	adds	r7, #16
 8012706:	46bd      	mov	sp, r7
 8012708:	bd80      	pop	{r7, pc}

0801270a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801270a:	b580      	push	{r7, lr}
 801270c:	b084      	sub	sp, #16
 801270e:	af00      	add	r7, sp, #0
 8012710:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012716:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	795b      	ldrb	r3, [r3, #5]
 801271c:	2b01      	cmp	r3, #1
 801271e:	d007      	beq.n	8012730 <dhcp_t1_timeout+0x26>
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	795b      	ldrb	r3, [r3, #5]
 8012724:	2b0a      	cmp	r3, #10
 8012726:	d003      	beq.n	8012730 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801272c:	2b05      	cmp	r3, #5
 801272e:	d117      	bne.n	8012760 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 fb49 	bl	8012dc8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	899b      	ldrh	r3, [r3, #12]
 801273a:	461a      	mov	r2, r3
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	8a5b      	ldrh	r3, [r3, #18]
 8012740:	1ad3      	subs	r3, r2, r3
 8012742:	2b01      	cmp	r3, #1
 8012744:	dd0c      	ble.n	8012760 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	899b      	ldrh	r3, [r3, #12]
 801274a:	461a      	mov	r2, r3
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	8a5b      	ldrh	r3, [r3, #18]
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	2b00      	cmp	r3, #0
 8012754:	da00      	bge.n	8012758 <dhcp_t1_timeout+0x4e>
 8012756:	3301      	adds	r3, #1
 8012758:	105b      	asrs	r3, r3, #1
 801275a:	b29a      	uxth	r2, r3
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012760:	bf00      	nop
 8012762:	3710      	adds	r7, #16
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}

08012768 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012774:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	795b      	ldrb	r3, [r3, #5]
 801277a:	2b01      	cmp	r3, #1
 801277c:	d00b      	beq.n	8012796 <dhcp_t2_timeout+0x2e>
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	795b      	ldrb	r3, [r3, #5]
 8012782:	2b0a      	cmp	r3, #10
 8012784:	d007      	beq.n	8012796 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801278a:	2b05      	cmp	r3, #5
 801278c:	d003      	beq.n	8012796 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	795b      	ldrb	r3, [r3, #5]
 8012792:	2b04      	cmp	r3, #4
 8012794:	d117      	bne.n	80127c6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f000 fbb2 	bl	8012f00 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	8a9b      	ldrh	r3, [r3, #20]
 80127a0:	461a      	mov	r2, r3
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	8a5b      	ldrh	r3, [r3, #18]
 80127a6:	1ad3      	subs	r3, r2, r3
 80127a8:	2b01      	cmp	r3, #1
 80127aa:	dd0c      	ble.n	80127c6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	8a9b      	ldrh	r3, [r3, #20]
 80127b0:	461a      	mov	r2, r3
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	8a5b      	ldrh	r3, [r3, #18]
 80127b6:	1ad3      	subs	r3, r2, r3
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	da00      	bge.n	80127be <dhcp_t2_timeout+0x56>
 80127bc:	3301      	adds	r3, #1
 80127be:	105b      	asrs	r3, r3, #1
 80127c0:	b29a      	uxth	r2, r3
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80127c6:	bf00      	nop
 80127c8:	3710      	adds	r7, #16
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
	...

080127d0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b084      	sub	sp, #16
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	6078      	str	r0, [r7, #4]
 80127d8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127de:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	2200      	movs	r2, #0
 80127e4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	2200      	movs	r2, #0
 80127ea:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80127ec:	4b26      	ldr	r3, [pc, #152]	; (8012888 <dhcp_handle_ack+0xb8>)
 80127ee:	78db      	ldrb	r3, [r3, #3]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d003      	beq.n	80127fc <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80127f4:	4b25      	ldr	r3, [pc, #148]	; (801288c <dhcp_handle_ack+0xbc>)
 80127f6:	68da      	ldr	r2, [r3, #12]
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80127fc:	4b22      	ldr	r3, [pc, #136]	; (8012888 <dhcp_handle_ack+0xb8>)
 80127fe:	791b      	ldrb	r3, [r3, #4]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d004      	beq.n	801280e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012804:	4b21      	ldr	r3, [pc, #132]	; (801288c <dhcp_handle_ack+0xbc>)
 8012806:	691a      	ldr	r2, [r3, #16]
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	62da      	str	r2, [r3, #44]	; 0x2c
 801280c:	e004      	b.n	8012818 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012812:	085a      	lsrs	r2, r3, #1
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012818:	4b1b      	ldr	r3, [pc, #108]	; (8012888 <dhcp_handle_ack+0xb8>)
 801281a:	795b      	ldrb	r3, [r3, #5]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d004      	beq.n	801282a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012820:	4b1a      	ldr	r3, [pc, #104]	; (801288c <dhcp_handle_ack+0xbc>)
 8012822:	695a      	ldr	r2, [r3, #20]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	631a      	str	r2, [r3, #48]	; 0x30
 8012828:	e007      	b.n	801283a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801282e:	4613      	mov	r3, r2
 8012830:	00db      	lsls	r3, r3, #3
 8012832:	1a9b      	subs	r3, r3, r2
 8012834:	08da      	lsrs	r2, r3, #3
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	691a      	ldr	r2, [r3, #16]
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012842:	4b11      	ldr	r3, [pc, #68]	; (8012888 <dhcp_handle_ack+0xb8>)
 8012844:	799b      	ldrb	r3, [r3, #6]
 8012846:	2b00      	cmp	r3, #0
 8012848:	d00b      	beq.n	8012862 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801284a:	4b10      	ldr	r3, [pc, #64]	; (801288c <dhcp_handle_ack+0xbc>)
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	4618      	mov	r0, r3
 8012850:	f7f7 fee3 	bl	800a61a <lwip_htonl>
 8012854:	4602      	mov	r2, r0
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	2201      	movs	r2, #1
 801285e:	71da      	strb	r2, [r3, #7]
 8012860:	e002      	b.n	8012868 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2200      	movs	r2, #0
 8012866:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012868:	4b07      	ldr	r3, [pc, #28]	; (8012888 <dhcp_handle_ack+0xb8>)
 801286a:	79db      	ldrb	r3, [r3, #7]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d007      	beq.n	8012880 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012870:	4b06      	ldr	r3, [pc, #24]	; (801288c <dhcp_handle_ack+0xbc>)
 8012872:	69db      	ldr	r3, [r3, #28]
 8012874:	4618      	mov	r0, r3
 8012876:	f7f7 fed0 	bl	800a61a <lwip_htonl>
 801287a:	4602      	mov	r2, r0
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012880:	bf00      	nop
 8012882:	3710      	adds	r7, #16
 8012884:	46bd      	mov	sp, r7
 8012886:	bd80      	pop	{r7, pc}
 8012888:	2000deb4 	.word	0x2000deb4
 801288c:	2000de94 	.word	0x2000de94

08012890 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b084      	sub	sp, #16
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d109      	bne.n	80128b2 <dhcp_start+0x22>
 801289e:	4b37      	ldr	r3, [pc, #220]	; (801297c <dhcp_start+0xec>)
 80128a0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80128a4:	4936      	ldr	r1, [pc, #216]	; (8012980 <dhcp_start+0xf0>)
 80128a6:	4837      	ldr	r0, [pc, #220]	; (8012984 <dhcp_start+0xf4>)
 80128a8:	f003 ffa6 	bl	80167f8 <iprintf>
 80128ac:	f06f 030f 	mvn.w	r3, #15
 80128b0:	e060      	b.n	8012974 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80128b8:	f003 0301 	and.w	r3, r3, #1
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d109      	bne.n	80128d4 <dhcp_start+0x44>
 80128c0:	4b2e      	ldr	r3, [pc, #184]	; (801297c <dhcp_start+0xec>)
 80128c2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80128c6:	4930      	ldr	r1, [pc, #192]	; (8012988 <dhcp_start+0xf8>)
 80128c8:	482e      	ldr	r0, [pc, #184]	; (8012984 <dhcp_start+0xf4>)
 80128ca:	f003 ff95 	bl	80167f8 <iprintf>
 80128ce:	f06f 030f 	mvn.w	r3, #15
 80128d2:	e04f      	b.n	8012974 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80128de:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80128e2:	d202      	bcs.n	80128ea <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80128e4:	f04f 33ff 	mov.w	r3, #4294967295
 80128e8:	e044      	b.n	8012974 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10d      	bne.n	801290c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80128f0:	2034      	movs	r0, #52	; 0x34
 80128f2:	f7f8 f9b1 	bl	800ac58 <mem_malloc>
 80128f6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d102      	bne.n	8012904 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80128fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012902:	e037      	b.n	8012974 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	68fa      	ldr	r2, [r7, #12]
 8012908:	625a      	str	r2, [r3, #36]	; 0x24
 801290a:	e005      	b.n	8012918 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	791b      	ldrb	r3, [r3, #4]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012914:	f7ff fc90 	bl	8012238 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012918:	2234      	movs	r2, #52	; 0x34
 801291a:	2100      	movs	r1, #0
 801291c:	68f8      	ldr	r0, [r7, #12]
 801291e:	f003 ffd0 	bl	80168c2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012922:	f7ff fc37 	bl	8012194 <dhcp_inc_pcb_refcount>
 8012926:	4603      	mov	r3, r0
 8012928:	2b00      	cmp	r3, #0
 801292a:	d002      	beq.n	8012932 <dhcp_start+0xa2>
    return ERR_MEM;
 801292c:	f04f 33ff 	mov.w	r3, #4294967295
 8012930:	e020      	b.n	8012974 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	2201      	movs	r2, #1
 8012936:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801293e:	f003 0304 	and.w	r3, r3, #4
 8012942:	2b00      	cmp	r3, #0
 8012944:	d105      	bne.n	8012952 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012946:	2102      	movs	r1, #2
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f000 fcc5 	bl	80132d8 <dhcp_set_state>
    return ERR_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	e010      	b.n	8012974 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 f8bc 	bl	8012ad0 <dhcp_discover>
 8012958:	4603      	mov	r3, r0
 801295a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801295c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d005      	beq.n	8012970 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	f000 fc1d 	bl	80131a4 <dhcp_release_and_stop>
    return ERR_MEM;
 801296a:	f04f 33ff 	mov.w	r3, #4294967295
 801296e:	e001      	b.n	8012974 <dhcp_start+0xe4>
  }
  return result;
 8012970:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012974:	4618      	mov	r0, r3
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}
 801297c:	08019b68 	.word	0x08019b68
 8012980:	08019c4c 	.word	0x08019c4c
 8012984:	08019bc8 	.word	0x08019bc8
 8012988:	08019c90 	.word	0x08019c90

0801298c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b084      	sub	sp, #16
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d107      	bne.n	80129ac <dhcp_arp_reply+0x20>
 801299c:	4b0e      	ldr	r3, [pc, #56]	; (80129d8 <dhcp_arp_reply+0x4c>)
 801299e:	f240 328b 	movw	r2, #907	; 0x38b
 80129a2:	490e      	ldr	r1, [pc, #56]	; (80129dc <dhcp_arp_reply+0x50>)
 80129a4:	480e      	ldr	r0, [pc, #56]	; (80129e0 <dhcp_arp_reply+0x54>)
 80129a6:	f003 ff27 	bl	80167f8 <iprintf>
 80129aa:	e012      	b.n	80129d2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129b0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d00c      	beq.n	80129d2 <dhcp_arp_reply+0x46>
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	795b      	ldrb	r3, [r3, #5]
 80129bc:	2b08      	cmp	r3, #8
 80129be:	d108      	bne.n	80129d2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	681a      	ldr	r2, [r3, #0]
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	69db      	ldr	r3, [r3, #28]
 80129c8:	429a      	cmp	r2, r3
 80129ca:	d102      	bne.n	80129d2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80129cc:	6878      	ldr	r0, [r7, #4]
 80129ce:	f000 f809 	bl	80129e4 <dhcp_decline>
    }
  }
}
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	08019b68 	.word	0x08019b68
 80129dc:	08019c4c 	.word	0x08019c4c
 80129e0:	08019bc8 	.word	0x08019bc8

080129e4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80129e4:	b5b0      	push	{r4, r5, r7, lr}
 80129e6:	b08a      	sub	sp, #40	; 0x28
 80129e8:	af02      	add	r7, sp, #8
 80129ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129f0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80129f2:	210c      	movs	r1, #12
 80129f4:	69b8      	ldr	r0, [r7, #24]
 80129f6:	f000 fc6f 	bl	80132d8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80129fa:	f107 030c 	add.w	r3, r7, #12
 80129fe:	2204      	movs	r2, #4
 8012a00:	69b9      	ldr	r1, [r7, #24]
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f001 f8f4 	bl	8013bf0 <dhcp_create_msg>
 8012a08:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d035      	beq.n	8012a7c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a10:	697b      	ldr	r3, [r7, #20]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012a16:	89b8      	ldrh	r0, [r7, #12]
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a1e:	2304      	movs	r3, #4
 8012a20:	2232      	movs	r2, #50	; 0x32
 8012a22:	f000 fc73 	bl	801330c <dhcp_option>
 8012a26:	4603      	mov	r3, r0
 8012a28:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012a2a:	89bc      	ldrh	r4, [r7, #12]
 8012a2c:	693b      	ldr	r3, [r7, #16]
 8012a2e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012a32:	69bb      	ldr	r3, [r7, #24]
 8012a34:	69db      	ldr	r3, [r3, #28]
 8012a36:	4618      	mov	r0, r3
 8012a38:	f7f7 fdef 	bl	800a61a <lwip_htonl>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	461a      	mov	r2, r3
 8012a40:	4629      	mov	r1, r5
 8012a42:	4620      	mov	r0, r4
 8012a44:	f000 fcee 	bl	8013424 <dhcp_option_long>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012a4c:	89b8      	ldrh	r0, [r7, #12]
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	33f0      	adds	r3, #240	; 0xf0
 8012a52:	697a      	ldr	r2, [r7, #20]
 8012a54:	4619      	mov	r1, r3
 8012a56:	f001 f9a1 	bl	8013d9c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012a5a:	4b19      	ldr	r3, [pc, #100]	; (8012ac0 <dhcp_decline+0xdc>)
 8012a5c:	6818      	ldr	r0, [r3, #0]
 8012a5e:	4b19      	ldr	r3, [pc, #100]	; (8012ac4 <dhcp_decline+0xe0>)
 8012a60:	9301      	str	r3, [sp, #4]
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	9300      	str	r3, [sp, #0]
 8012a66:	2343      	movs	r3, #67	; 0x43
 8012a68:	4a17      	ldr	r2, [pc, #92]	; (8012ac8 <dhcp_decline+0xe4>)
 8012a6a:	6979      	ldr	r1, [r7, #20]
 8012a6c:	f7ff f90c 	bl	8011c88 <udp_sendto_if_src>
 8012a70:	4603      	mov	r3, r0
 8012a72:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012a74:	6978      	ldr	r0, [r7, #20]
 8012a76:	f7f9 f951 	bl	800bd1c <pbuf_free>
 8012a7a:	e001      	b.n	8012a80 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012a7c:	23ff      	movs	r3, #255	; 0xff
 8012a7e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	799b      	ldrb	r3, [r3, #6]
 8012a84:	2bff      	cmp	r3, #255	; 0xff
 8012a86:	d005      	beq.n	8012a94 <dhcp_decline+0xb0>
    dhcp->tries++;
 8012a88:	69bb      	ldr	r3, [r7, #24]
 8012a8a:	799b      	ldrb	r3, [r3, #6]
 8012a8c:	3301      	adds	r3, #1
 8012a8e:	b2da      	uxtb	r2, r3
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8012a94:	f242 7310 	movw	r3, #10000	; 0x2710
 8012a98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012a9a:	89fb      	ldrh	r3, [r7, #14]
 8012a9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012aa0:	4a0a      	ldr	r2, [pc, #40]	; (8012acc <dhcp_decline+0xe8>)
 8012aa2:	fb82 1203 	smull	r1, r2, r2, r3
 8012aa6:	1152      	asrs	r2, r2, #5
 8012aa8:	17db      	asrs	r3, r3, #31
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ab2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3720      	adds	r7, #32
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bdb0      	pop	{r4, r5, r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	2000debc 	.word	0x2000debc
 8012ac4:	0801a75c 	.word	0x0801a75c
 8012ac8:	0801a760 	.word	0x0801a760
 8012acc:	10624dd3 	.word	0x10624dd3

08012ad0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b08a      	sub	sp, #40	; 0x28
 8012ad4:	af02      	add	r7, sp, #8
 8012ad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012adc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012ade:	2300      	movs	r3, #0
 8012ae0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8012ae2:	69bb      	ldr	r3, [r7, #24]
 8012ae4:	2200      	movs	r2, #0
 8012ae6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012ae8:	2106      	movs	r1, #6
 8012aea:	69b8      	ldr	r0, [r7, #24]
 8012aec:	f000 fbf4 	bl	80132d8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012af0:	f107 0308 	add.w	r3, r7, #8
 8012af4:	2201      	movs	r2, #1
 8012af6:	69b9      	ldr	r1, [r7, #24]
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f001 f879 	bl	8013bf0 <dhcp_create_msg>
 8012afe:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012b00:	693b      	ldr	r3, [r7, #16]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d04b      	beq.n	8012b9e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012b06:	693b      	ldr	r3, [r7, #16]
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012b0c:	8938      	ldrh	r0, [r7, #8]
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b14:	2302      	movs	r3, #2
 8012b16:	2239      	movs	r2, #57	; 0x39
 8012b18:	f000 fbf8 	bl	801330c <dhcp_option>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012b20:	8938      	ldrh	r0, [r7, #8]
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	f000 fc47 	bl	80133c0 <dhcp_option_short>
 8012b32:	4603      	mov	r3, r0
 8012b34:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b36:	8938      	ldrh	r0, [r7, #8]
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b3e:	2303      	movs	r3, #3
 8012b40:	2237      	movs	r2, #55	; 0x37
 8012b42:	f000 fbe3 	bl	801330c <dhcp_option>
 8012b46:	4603      	mov	r3, r0
 8012b48:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	77fb      	strb	r3, [r7, #31]
 8012b4e:	e00e      	b.n	8012b6e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012b50:	8938      	ldrh	r0, [r7, #8]
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b58:	7ffb      	ldrb	r3, [r7, #31]
 8012b5a:	4a29      	ldr	r2, [pc, #164]	; (8012c00 <dhcp_discover+0x130>)
 8012b5c:	5cd3      	ldrb	r3, [r2, r3]
 8012b5e:	461a      	mov	r2, r3
 8012b60:	f000 fc08 	bl	8013374 <dhcp_option_byte>
 8012b64:	4603      	mov	r3, r0
 8012b66:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b68:	7ffb      	ldrb	r3, [r7, #31]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	77fb      	strb	r3, [r7, #31]
 8012b6e:	7ffb      	ldrb	r3, [r7, #31]
 8012b70:	2b02      	cmp	r3, #2
 8012b72:	d9ed      	bls.n	8012b50 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b74:	8938      	ldrh	r0, [r7, #8]
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	33f0      	adds	r3, #240	; 0xf0
 8012b7a:	693a      	ldr	r2, [r7, #16]
 8012b7c:	4619      	mov	r1, r3
 8012b7e:	f001 f90d 	bl	8013d9c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012b82:	4b20      	ldr	r3, [pc, #128]	; (8012c04 <dhcp_discover+0x134>)
 8012b84:	6818      	ldr	r0, [r3, #0]
 8012b86:	4b20      	ldr	r3, [pc, #128]	; (8012c08 <dhcp_discover+0x138>)
 8012b88:	9301      	str	r3, [sp, #4]
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	9300      	str	r3, [sp, #0]
 8012b8e:	2343      	movs	r3, #67	; 0x43
 8012b90:	4a1e      	ldr	r2, [pc, #120]	; (8012c0c <dhcp_discover+0x13c>)
 8012b92:	6939      	ldr	r1, [r7, #16]
 8012b94:	f7ff f878 	bl	8011c88 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012b98:	6938      	ldr	r0, [r7, #16]
 8012b9a:	f7f9 f8bf 	bl	800bd1c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012b9e:	69bb      	ldr	r3, [r7, #24]
 8012ba0:	799b      	ldrb	r3, [r3, #6]
 8012ba2:	2bff      	cmp	r3, #255	; 0xff
 8012ba4:	d005      	beq.n	8012bb2 <dhcp_discover+0xe2>
    dhcp->tries++;
 8012ba6:	69bb      	ldr	r3, [r7, #24]
 8012ba8:	799b      	ldrb	r3, [r3, #6]
 8012baa:	3301      	adds	r3, #1
 8012bac:	b2da      	uxtb	r2, r3
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	799b      	ldrb	r3, [r3, #6]
 8012bb6:	2b05      	cmp	r3, #5
 8012bb8:	d80d      	bhi.n	8012bd6 <dhcp_discover+0x106>
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	799b      	ldrb	r3, [r3, #6]
 8012bbe:	461a      	mov	r2, r3
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	4093      	lsls	r3, r2
 8012bc4:	b29b      	uxth	r3, r3
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	0152      	lsls	r2, r2, #5
 8012bca:	1ad2      	subs	r2, r2, r3
 8012bcc:	0092      	lsls	r2, r2, #2
 8012bce:	4413      	add	r3, r2
 8012bd0:	00db      	lsls	r3, r3, #3
 8012bd2:	b29b      	uxth	r3, r3
 8012bd4:	e001      	b.n	8012bda <dhcp_discover+0x10a>
 8012bd6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012bda:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bdc:	897b      	ldrh	r3, [r7, #10]
 8012bde:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012be2:	4a0b      	ldr	r2, [pc, #44]	; (8012c10 <dhcp_discover+0x140>)
 8012be4:	fb82 1203 	smull	r1, r2, r2, r3
 8012be8:	1152      	asrs	r2, r2, #5
 8012bea:	17db      	asrs	r3, r3, #31
 8012bec:	1ad3      	subs	r3, r2, r3
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	69bb      	ldr	r3, [r7, #24]
 8012bf2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bf8:	4618      	mov	r0, r3
 8012bfa:	3720      	adds	r7, #32
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}
 8012c00:	2000001c 	.word	0x2000001c
 8012c04:	2000debc 	.word	0x2000debc
 8012c08:	0801a75c 	.word	0x0801a75c
 8012c0c:	0801a760 	.word	0x0801a760
 8012c10:	10624dd3 	.word	0x10624dd3

08012c14 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b088      	sub	sp, #32
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d107      	bne.n	8012c32 <dhcp_bind+0x1e>
 8012c22:	4b64      	ldr	r3, [pc, #400]	; (8012db4 <dhcp_bind+0x1a0>)
 8012c24:	f240 4215 	movw	r2, #1045	; 0x415
 8012c28:	4963      	ldr	r1, [pc, #396]	; (8012db8 <dhcp_bind+0x1a4>)
 8012c2a:	4864      	ldr	r0, [pc, #400]	; (8012dbc <dhcp_bind+0x1a8>)
 8012c2c:	f003 fde4 	bl	80167f8 <iprintf>
 8012c30:	e0bc      	b.n	8012dac <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c36:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012c38:	69bb      	ldr	r3, [r7, #24]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d107      	bne.n	8012c4e <dhcp_bind+0x3a>
 8012c3e:	4b5d      	ldr	r3, [pc, #372]	; (8012db4 <dhcp_bind+0x1a0>)
 8012c40:	f240 4217 	movw	r2, #1047	; 0x417
 8012c44:	495e      	ldr	r1, [pc, #376]	; (8012dc0 <dhcp_bind+0x1ac>)
 8012c46:	485d      	ldr	r0, [pc, #372]	; (8012dbc <dhcp_bind+0x1a8>)
 8012c48:	f003 fdd6 	bl	80167f8 <iprintf>
 8012c4c:	e0ae      	b.n	8012dac <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	2200      	movs	r2, #0
 8012c52:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c5c:	d019      	beq.n	8012c92 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012c5e:	69bb      	ldr	r3, [r7, #24]
 8012c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c62:	331e      	adds	r3, #30
 8012c64:	4a57      	ldr	r2, [pc, #348]	; (8012dc4 <dhcp_bind+0x1b0>)
 8012c66:	fba2 2303 	umull	r2, r3, r2, r3
 8012c6a:	095b      	lsrs	r3, r3, #5
 8012c6c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012c74:	d302      	bcc.n	8012c7c <dhcp_bind+0x68>
      timeout = 0xffff;
 8012c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c7a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	b29a      	uxth	r2, r3
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	8a9b      	ldrh	r3, [r3, #20]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d102      	bne.n	8012c92 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	2201      	movs	r2, #1
 8012c90:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012c92:	69bb      	ldr	r3, [r7, #24]
 8012c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c9a:	d01d      	beq.n	8012cd8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ca0:	331e      	adds	r3, #30
 8012ca2:	4a48      	ldr	r2, [pc, #288]	; (8012dc4 <dhcp_bind+0x1b0>)
 8012ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8012ca8:	095b      	lsrs	r3, r3, #5
 8012caa:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012cac:	69fb      	ldr	r3, [r7, #28]
 8012cae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cb2:	d302      	bcc.n	8012cba <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cb8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	69bb      	ldr	r3, [r7, #24]
 8012cc0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012cc2:	69bb      	ldr	r3, [r7, #24]
 8012cc4:	895b      	ldrh	r3, [r3, #10]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d102      	bne.n	8012cd0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2201      	movs	r2, #1
 8012cce:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	895a      	ldrh	r2, [r3, #10]
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ce0:	d01d      	beq.n	8012d1e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012ce2:	69bb      	ldr	r3, [r7, #24]
 8012ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ce6:	331e      	adds	r3, #30
 8012ce8:	4a36      	ldr	r2, [pc, #216]	; (8012dc4 <dhcp_bind+0x1b0>)
 8012cea:	fba2 2303 	umull	r2, r3, r2, r3
 8012cee:	095b      	lsrs	r3, r3, #5
 8012cf0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012cf8:	d302      	bcc.n	8012d00 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012cfe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	b29a      	uxth	r2, r3
 8012d04:	69bb      	ldr	r3, [r7, #24]
 8012d06:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	899b      	ldrh	r3, [r3, #12]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d102      	bne.n	8012d16 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012d10:	69bb      	ldr	r3, [r7, #24]
 8012d12:	2201      	movs	r2, #1
 8012d14:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012d16:	69bb      	ldr	r3, [r7, #24]
 8012d18:	899a      	ldrh	r2, [r3, #12]
 8012d1a:	69bb      	ldr	r3, [r7, #24]
 8012d1c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012d1e:	69bb      	ldr	r3, [r7, #24]
 8012d20:	895a      	ldrh	r2, [r3, #10]
 8012d22:	69bb      	ldr	r3, [r7, #24]
 8012d24:	899b      	ldrh	r3, [r3, #12]
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d306      	bcc.n	8012d38 <dhcp_bind+0x124>
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	899b      	ldrh	r3, [r3, #12]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d002      	beq.n	8012d38 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012d32:	69bb      	ldr	r3, [r7, #24]
 8012d34:	2200      	movs	r2, #0
 8012d36:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012d38:	69bb      	ldr	r3, [r7, #24]
 8012d3a:	79db      	ldrb	r3, [r3, #7]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d003      	beq.n	8012d48 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	6a1b      	ldr	r3, [r3, #32]
 8012d44:	613b      	str	r3, [r7, #16]
 8012d46:	e014      	b.n	8012d72 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	331c      	adds	r3, #28
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	db02      	blt.n	8012d5e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012d58:	23ff      	movs	r3, #255	; 0xff
 8012d5a:	613b      	str	r3, [r7, #16]
 8012d5c:	e009      	b.n	8012d72 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012d5e:	7dfb      	ldrb	r3, [r7, #23]
 8012d60:	2bbf      	cmp	r3, #191	; 0xbf
 8012d62:	d903      	bls.n	8012d6c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012d64:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012d68:	613b      	str	r3, [r7, #16]
 8012d6a:	e002      	b.n	8012d72 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d70:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012d72:	69bb      	ldr	r3, [r7, #24]
 8012d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d76:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d108      	bne.n	8012d90 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012d7e:	69bb      	ldr	r3, [r7, #24]
 8012d80:	69da      	ldr	r2, [r3, #28]
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	4013      	ands	r3, r2
 8012d86:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012d8e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012d90:	210a      	movs	r1, #10
 8012d92:	69b8      	ldr	r0, [r7, #24]
 8012d94:	f000 faa0 	bl	80132d8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	f103 011c 	add.w	r1, r3, #28
 8012d9e:	f107 030c 	add.w	r3, r7, #12
 8012da2:	f107 0210 	add.w	r2, r7, #16
 8012da6:	6878      	ldr	r0, [r7, #4]
 8012da8:	f7f8 fb12 	bl	800b3d0 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012dac:	3720      	adds	r7, #32
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	08019b68 	.word	0x08019b68
 8012db8:	08019cc8 	.word	0x08019cc8
 8012dbc:	08019bc8 	.word	0x08019bc8
 8012dc0:	08019ce4 	.word	0x08019ce4
 8012dc4:	88888889 	.word	0x88888889

08012dc8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08a      	sub	sp, #40	; 0x28
 8012dcc:	af02      	add	r7, sp, #8
 8012dce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012dd6:	2105      	movs	r1, #5
 8012dd8:	69b8      	ldr	r0, [r7, #24]
 8012dda:	f000 fa7d 	bl	80132d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012dde:	f107 030c 	add.w	r3, r7, #12
 8012de2:	2203      	movs	r2, #3
 8012de4:	69b9      	ldr	r1, [r7, #24]
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f000 ff02 	bl	8013bf0 <dhcp_create_msg>
 8012dec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d04e      	beq.n	8012e92 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012dfa:	89b8      	ldrh	r0, [r7, #12]
 8012dfc:	693b      	ldr	r3, [r7, #16]
 8012dfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e02:	2302      	movs	r3, #2
 8012e04:	2239      	movs	r2, #57	; 0x39
 8012e06:	f000 fa81 	bl	801330c <dhcp_option>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012e0e:	89b8      	ldrh	r0, [r7, #12]
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e1a:	461a      	mov	r2, r3
 8012e1c:	f000 fad0 	bl	80133c0 <dhcp_option_short>
 8012e20:	4603      	mov	r3, r0
 8012e22:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012e24:	89b8      	ldrh	r0, [r7, #12]
 8012e26:	693b      	ldr	r3, [r7, #16]
 8012e28:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e2c:	2303      	movs	r3, #3
 8012e2e:	2237      	movs	r2, #55	; 0x37
 8012e30:	f000 fa6c 	bl	801330c <dhcp_option>
 8012e34:	4603      	mov	r3, r0
 8012e36:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e38:	2300      	movs	r3, #0
 8012e3a:	77bb      	strb	r3, [r7, #30]
 8012e3c:	e00e      	b.n	8012e5c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012e3e:	89b8      	ldrh	r0, [r7, #12]
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e46:	7fbb      	ldrb	r3, [r7, #30]
 8012e48:	4a2a      	ldr	r2, [pc, #168]	; (8012ef4 <dhcp_renew+0x12c>)
 8012e4a:	5cd3      	ldrb	r3, [r2, r3]
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	f000 fa91 	bl	8013374 <dhcp_option_byte>
 8012e52:	4603      	mov	r3, r0
 8012e54:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e56:	7fbb      	ldrb	r3, [r7, #30]
 8012e58:	3301      	adds	r3, #1
 8012e5a:	77bb      	strb	r3, [r7, #30]
 8012e5c:	7fbb      	ldrb	r3, [r7, #30]
 8012e5e:	2b02      	cmp	r3, #2
 8012e60:	d9ed      	bls.n	8012e3e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e62:	89b8      	ldrh	r0, [r7, #12]
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	33f0      	adds	r3, #240	; 0xf0
 8012e68:	697a      	ldr	r2, [r7, #20]
 8012e6a:	4619      	mov	r1, r3
 8012e6c:	f000 ff96 	bl	8013d9c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012e70:	4b21      	ldr	r3, [pc, #132]	; (8012ef8 <dhcp_renew+0x130>)
 8012e72:	6818      	ldr	r0, [r3, #0]
 8012e74:	69bb      	ldr	r3, [r7, #24]
 8012e76:	f103 0218 	add.w	r2, r3, #24
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	9300      	str	r3, [sp, #0]
 8012e7e:	2343      	movs	r3, #67	; 0x43
 8012e80:	6979      	ldr	r1, [r7, #20]
 8012e82:	f7fe fe8d 	bl	8011ba0 <udp_sendto_if>
 8012e86:	4603      	mov	r3, r0
 8012e88:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012e8a:	6978      	ldr	r0, [r7, #20]
 8012e8c:	f7f8 ff46 	bl	800bd1c <pbuf_free>
 8012e90:	e001      	b.n	8012e96 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e92:	23ff      	movs	r3, #255	; 0xff
 8012e94:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	799b      	ldrb	r3, [r3, #6]
 8012e9a:	2bff      	cmp	r3, #255	; 0xff
 8012e9c:	d005      	beq.n	8012eaa <dhcp_renew+0xe2>
    dhcp->tries++;
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	799b      	ldrb	r3, [r3, #6]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	b2da      	uxtb	r2, r3
 8012ea6:	69bb      	ldr	r3, [r7, #24]
 8012ea8:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012eaa:	69bb      	ldr	r3, [r7, #24]
 8012eac:	799b      	ldrb	r3, [r3, #6]
 8012eae:	2b09      	cmp	r3, #9
 8012eb0:	d80a      	bhi.n	8012ec8 <dhcp_renew+0x100>
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	799b      	ldrb	r3, [r3, #6]
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	461a      	mov	r2, r3
 8012eba:	0152      	lsls	r2, r2, #5
 8012ebc:	1ad2      	subs	r2, r2, r3
 8012ebe:	0092      	lsls	r2, r2, #2
 8012ec0:	4413      	add	r3, r2
 8012ec2:	011b      	lsls	r3, r3, #4
 8012ec4:	b29b      	uxth	r3, r3
 8012ec6:	e001      	b.n	8012ecc <dhcp_renew+0x104>
 8012ec8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012ecc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012ece:	89fb      	ldrh	r3, [r7, #14]
 8012ed0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ed4:	4a09      	ldr	r2, [pc, #36]	; (8012efc <dhcp_renew+0x134>)
 8012ed6:	fb82 1203 	smull	r1, r2, r2, r3
 8012eda:	1152      	asrs	r2, r2, #5
 8012edc:	17db      	asrs	r3, r3, #31
 8012ede:	1ad3      	subs	r3, r2, r3
 8012ee0:	b29a      	uxth	r2, r3
 8012ee2:	69bb      	ldr	r3, [r7, #24]
 8012ee4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012ee6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012eea:	4618      	mov	r0, r3
 8012eec:	3720      	adds	r7, #32
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	bd80      	pop	{r7, pc}
 8012ef2:	bf00      	nop
 8012ef4:	2000001c 	.word	0x2000001c
 8012ef8:	2000debc 	.word	0x2000debc
 8012efc:	10624dd3 	.word	0x10624dd3

08012f00 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b08a      	sub	sp, #40	; 0x28
 8012f04:	af02      	add	r7, sp, #8
 8012f06:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f0c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012f0e:	2104      	movs	r1, #4
 8012f10:	69b8      	ldr	r0, [r7, #24]
 8012f12:	f000 f9e1 	bl	80132d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012f16:	f107 030c 	add.w	r3, r7, #12
 8012f1a:	2203      	movs	r2, #3
 8012f1c:	69b9      	ldr	r1, [r7, #24]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 fe66 	bl	8013bf0 <dhcp_create_msg>
 8012f24:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d04c      	beq.n	8012fc6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	685b      	ldr	r3, [r3, #4]
 8012f30:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012f32:	89b8      	ldrh	r0, [r7, #12]
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f3a:	2302      	movs	r3, #2
 8012f3c:	2239      	movs	r2, #57	; 0x39
 8012f3e:	f000 f9e5 	bl	801330c <dhcp_option>
 8012f42:	4603      	mov	r3, r0
 8012f44:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012f46:	89b8      	ldrh	r0, [r7, #12]
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f52:	461a      	mov	r2, r3
 8012f54:	f000 fa34 	bl	80133c0 <dhcp_option_short>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f5c:	89b8      	ldrh	r0, [r7, #12]
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f64:	2303      	movs	r3, #3
 8012f66:	2237      	movs	r2, #55	; 0x37
 8012f68:	f000 f9d0 	bl	801330c <dhcp_option>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f70:	2300      	movs	r3, #0
 8012f72:	77bb      	strb	r3, [r7, #30]
 8012f74:	e00e      	b.n	8012f94 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012f76:	89b8      	ldrh	r0, [r7, #12]
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f7e:	7fbb      	ldrb	r3, [r7, #30]
 8012f80:	4a29      	ldr	r2, [pc, #164]	; (8013028 <dhcp_rebind+0x128>)
 8012f82:	5cd3      	ldrb	r3, [r2, r3]
 8012f84:	461a      	mov	r2, r3
 8012f86:	f000 f9f5 	bl	8013374 <dhcp_option_byte>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f8e:	7fbb      	ldrb	r3, [r7, #30]
 8012f90:	3301      	adds	r3, #1
 8012f92:	77bb      	strb	r3, [r7, #30]
 8012f94:	7fbb      	ldrb	r3, [r7, #30]
 8012f96:	2b02      	cmp	r3, #2
 8012f98:	d9ed      	bls.n	8012f76 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f9a:	89b8      	ldrh	r0, [r7, #12]
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	33f0      	adds	r3, #240	; 0xf0
 8012fa0:	697a      	ldr	r2, [r7, #20]
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	f000 fefa 	bl	8013d9c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012fa8:	4b20      	ldr	r3, [pc, #128]	; (801302c <dhcp_rebind+0x12c>)
 8012faa:	6818      	ldr	r0, [r3, #0]
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	9300      	str	r3, [sp, #0]
 8012fb0:	2343      	movs	r3, #67	; 0x43
 8012fb2:	4a1f      	ldr	r2, [pc, #124]	; (8013030 <dhcp_rebind+0x130>)
 8012fb4:	6979      	ldr	r1, [r7, #20]
 8012fb6:	f7fe fdf3 	bl	8011ba0 <udp_sendto_if>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012fbe:	6978      	ldr	r0, [r7, #20]
 8012fc0:	f7f8 feac 	bl	800bd1c <pbuf_free>
 8012fc4:	e001      	b.n	8012fca <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012fc6:	23ff      	movs	r3, #255	; 0xff
 8012fc8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012fca:	69bb      	ldr	r3, [r7, #24]
 8012fcc:	799b      	ldrb	r3, [r3, #6]
 8012fce:	2bff      	cmp	r3, #255	; 0xff
 8012fd0:	d005      	beq.n	8012fde <dhcp_rebind+0xde>
    dhcp->tries++;
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	799b      	ldrb	r3, [r3, #6]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	b2da      	uxtb	r2, r3
 8012fda:	69bb      	ldr	r3, [r7, #24]
 8012fdc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	799b      	ldrb	r3, [r3, #6]
 8012fe2:	2b09      	cmp	r3, #9
 8012fe4:	d80a      	bhi.n	8012ffc <dhcp_rebind+0xfc>
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	799b      	ldrb	r3, [r3, #6]
 8012fea:	b29b      	uxth	r3, r3
 8012fec:	461a      	mov	r2, r3
 8012fee:	0152      	lsls	r2, r2, #5
 8012ff0:	1ad2      	subs	r2, r2, r3
 8012ff2:	0092      	lsls	r2, r2, #2
 8012ff4:	4413      	add	r3, r2
 8012ff6:	00db      	lsls	r3, r3, #3
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	e001      	b.n	8013000 <dhcp_rebind+0x100>
 8012ffc:	f242 7310 	movw	r3, #10000	; 0x2710
 8013000:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013002:	89fb      	ldrh	r3, [r7, #14]
 8013004:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013008:	4a0a      	ldr	r2, [pc, #40]	; (8013034 <dhcp_rebind+0x134>)
 801300a:	fb82 1203 	smull	r1, r2, r2, r3
 801300e:	1152      	asrs	r2, r2, #5
 8013010:	17db      	asrs	r3, r3, #31
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	b29a      	uxth	r2, r3
 8013016:	69bb      	ldr	r3, [r7, #24]
 8013018:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801301a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801301e:	4618      	mov	r0, r3
 8013020:	3720      	adds	r7, #32
 8013022:	46bd      	mov	sp, r7
 8013024:	bd80      	pop	{r7, pc}
 8013026:	bf00      	nop
 8013028:	2000001c 	.word	0x2000001c
 801302c:	2000debc 	.word	0x2000debc
 8013030:	0801a760 	.word	0x0801a760
 8013034:	10624dd3 	.word	0x10624dd3

08013038 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013038:	b5b0      	push	{r4, r5, r7, lr}
 801303a:	b08a      	sub	sp, #40	; 0x28
 801303c:	af02      	add	r7, sp, #8
 801303e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013044:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013046:	2103      	movs	r1, #3
 8013048:	69b8      	ldr	r0, [r7, #24]
 801304a:	f000 f945 	bl	80132d8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801304e:	f107 030c 	add.w	r3, r7, #12
 8013052:	2203      	movs	r2, #3
 8013054:	69b9      	ldr	r1, [r7, #24]
 8013056:	6878      	ldr	r0, [r7, #4]
 8013058:	f000 fdca 	bl	8013bf0 <dhcp_create_msg>
 801305c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801305e:	697b      	ldr	r3, [r7, #20]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d066      	beq.n	8013132 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	685b      	ldr	r3, [r3, #4]
 8013068:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801306a:	89b8      	ldrh	r0, [r7, #12]
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013072:	2302      	movs	r3, #2
 8013074:	2239      	movs	r2, #57	; 0x39
 8013076:	f000 f949 	bl	801330c <dhcp_option>
 801307a:	4603      	mov	r3, r0
 801307c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801307e:	89b8      	ldrh	r0, [r7, #12]
 8013080:	693b      	ldr	r3, [r7, #16]
 8013082:	33f0      	adds	r3, #240	; 0xf0
 8013084:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013088:	4619      	mov	r1, r3
 801308a:	f000 f999 	bl	80133c0 <dhcp_option_short>
 801308e:	4603      	mov	r3, r0
 8013090:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013092:	89b8      	ldrh	r0, [r7, #12]
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801309a:	2304      	movs	r3, #4
 801309c:	2232      	movs	r2, #50	; 0x32
 801309e:	f000 f935 	bl	801330c <dhcp_option>
 80130a2:	4603      	mov	r3, r0
 80130a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80130a6:	89bc      	ldrh	r4, [r7, #12]
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80130ae:	69bb      	ldr	r3, [r7, #24]
 80130b0:	69db      	ldr	r3, [r3, #28]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f7 fab1 	bl	800a61a <lwip_htonl>
 80130b8:	4603      	mov	r3, r0
 80130ba:	461a      	mov	r2, r3
 80130bc:	4629      	mov	r1, r5
 80130be:	4620      	mov	r0, r4
 80130c0:	f000 f9b0 	bl	8013424 <dhcp_option_long>
 80130c4:	4603      	mov	r3, r0
 80130c6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80130c8:	89b8      	ldrh	r0, [r7, #12]
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80130d0:	2303      	movs	r3, #3
 80130d2:	2237      	movs	r2, #55	; 0x37
 80130d4:	f000 f91a 	bl	801330c <dhcp_option>
 80130d8:	4603      	mov	r3, r0
 80130da:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130dc:	2300      	movs	r3, #0
 80130de:	77bb      	strb	r3, [r7, #30]
 80130e0:	e00e      	b.n	8013100 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80130e2:	89b8      	ldrh	r0, [r7, #12]
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80130ea:	7fbb      	ldrb	r3, [r7, #30]
 80130ec:	4a29      	ldr	r2, [pc, #164]	; (8013194 <dhcp_reboot+0x15c>)
 80130ee:	5cd3      	ldrb	r3, [r2, r3]
 80130f0:	461a      	mov	r2, r3
 80130f2:	f000 f93f 	bl	8013374 <dhcp_option_byte>
 80130f6:	4603      	mov	r3, r0
 80130f8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80130fa:	7fbb      	ldrb	r3, [r7, #30]
 80130fc:	3301      	adds	r3, #1
 80130fe:	77bb      	strb	r3, [r7, #30]
 8013100:	7fbb      	ldrb	r3, [r7, #30]
 8013102:	2b02      	cmp	r3, #2
 8013104:	d9ed      	bls.n	80130e2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013106:	89b8      	ldrh	r0, [r7, #12]
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	33f0      	adds	r3, #240	; 0xf0
 801310c:	697a      	ldr	r2, [r7, #20]
 801310e:	4619      	mov	r1, r3
 8013110:	f000 fe44 	bl	8013d9c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013114:	4b20      	ldr	r3, [pc, #128]	; (8013198 <dhcp_reboot+0x160>)
 8013116:	6818      	ldr	r0, [r3, #0]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	9300      	str	r3, [sp, #0]
 801311c:	2343      	movs	r3, #67	; 0x43
 801311e:	4a1f      	ldr	r2, [pc, #124]	; (801319c <dhcp_reboot+0x164>)
 8013120:	6979      	ldr	r1, [r7, #20]
 8013122:	f7fe fd3d 	bl	8011ba0 <udp_sendto_if>
 8013126:	4603      	mov	r3, r0
 8013128:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801312a:	6978      	ldr	r0, [r7, #20]
 801312c:	f7f8 fdf6 	bl	800bd1c <pbuf_free>
 8013130:	e001      	b.n	8013136 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013132:	23ff      	movs	r3, #255	; 0xff
 8013134:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013136:	69bb      	ldr	r3, [r7, #24]
 8013138:	799b      	ldrb	r3, [r3, #6]
 801313a:	2bff      	cmp	r3, #255	; 0xff
 801313c:	d005      	beq.n	801314a <dhcp_reboot+0x112>
    dhcp->tries++;
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	799b      	ldrb	r3, [r3, #6]
 8013142:	3301      	adds	r3, #1
 8013144:	b2da      	uxtb	r2, r3
 8013146:	69bb      	ldr	r3, [r7, #24]
 8013148:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801314a:	69bb      	ldr	r3, [r7, #24]
 801314c:	799b      	ldrb	r3, [r3, #6]
 801314e:	2b09      	cmp	r3, #9
 8013150:	d80a      	bhi.n	8013168 <dhcp_reboot+0x130>
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	799b      	ldrb	r3, [r3, #6]
 8013156:	b29b      	uxth	r3, r3
 8013158:	461a      	mov	r2, r3
 801315a:	0152      	lsls	r2, r2, #5
 801315c:	1ad2      	subs	r2, r2, r3
 801315e:	0092      	lsls	r2, r2, #2
 8013160:	4413      	add	r3, r2
 8013162:	00db      	lsls	r3, r3, #3
 8013164:	b29b      	uxth	r3, r3
 8013166:	e001      	b.n	801316c <dhcp_reboot+0x134>
 8013168:	f242 7310 	movw	r3, #10000	; 0x2710
 801316c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801316e:	89fb      	ldrh	r3, [r7, #14]
 8013170:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013174:	4a0a      	ldr	r2, [pc, #40]	; (80131a0 <dhcp_reboot+0x168>)
 8013176:	fb82 1203 	smull	r1, r2, r2, r3
 801317a:	1152      	asrs	r2, r2, #5
 801317c:	17db      	asrs	r3, r3, #31
 801317e:	1ad3      	subs	r3, r2, r3
 8013180:	b29a      	uxth	r2, r3
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013186:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801318a:	4618      	mov	r0, r3
 801318c:	3720      	adds	r7, #32
 801318e:	46bd      	mov	sp, r7
 8013190:	bdb0      	pop	{r4, r5, r7, pc}
 8013192:	bf00      	nop
 8013194:	2000001c 	.word	0x2000001c
 8013198:	2000debc 	.word	0x2000debc
 801319c:	0801a760 	.word	0x0801a760
 80131a0:	10624dd3 	.word	0x10624dd3

080131a4 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80131a4:	b5b0      	push	{r4, r5, r7, lr}
 80131a6:	b08a      	sub	sp, #40	; 0x28
 80131a8:	af02      	add	r7, sp, #8
 80131aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131b0:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	f000 8084 	beq.w	80132c2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	795b      	ldrb	r3, [r3, #5]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	f000 8081 	beq.w	80132c6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	699b      	ldr	r3, [r3, #24]
 80131c8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80131ca:	69fb      	ldr	r3, [r7, #28]
 80131cc:	2200      	movs	r2, #0
 80131ce:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	2200      	movs	r2, #0
 80131d4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80131d6:	69fb      	ldr	r3, [r7, #28]
 80131d8:	2200      	movs	r2, #0
 80131da:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	2200      	movs	r2, #0
 80131e0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80131e2:	69fb      	ldr	r3, [r7, #28]
 80131e4:	2200      	movs	r2, #0
 80131e6:	631a      	str	r2, [r3, #48]	; 0x30
 80131e8:	69fb      	ldr	r3, [r7, #28]
 80131ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131f4:	69fb      	ldr	r3, [r7, #28]
 80131f6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	2200      	movs	r2, #0
 80131fc:	829a      	strh	r2, [r3, #20]
 80131fe:	69fb      	ldr	r3, [r7, #28]
 8013200:	8a9a      	ldrh	r2, [r3, #20]
 8013202:	69fb      	ldr	r3, [r7, #28]
 8013204:	825a      	strh	r2, [r3, #18]
 8013206:	69fb      	ldr	r3, [r7, #28]
 8013208:	8a5a      	ldrh	r2, [r3, #18]
 801320a:	69fb      	ldr	r3, [r7, #28]
 801320c:	821a      	strh	r2, [r3, #16]
 801320e:	69fb      	ldr	r3, [r7, #28]
 8013210:	8a1a      	ldrh	r2, [r3, #16]
 8013212:	69fb      	ldr	r3, [r7, #28]
 8013214:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013216:	6878      	ldr	r0, [r7, #4]
 8013218:	f000 fdee 	bl	8013df8 <dhcp_supplied_address>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d03b      	beq.n	801329a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013222:	f107 030e 	add.w	r3, r7, #14
 8013226:	2207      	movs	r2, #7
 8013228:	69f9      	ldr	r1, [r7, #28]
 801322a:	6878      	ldr	r0, [r7, #4]
 801322c:	f000 fce0 	bl	8013bf0 <dhcp_create_msg>
 8013230:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013232:	69bb      	ldr	r3, [r7, #24]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d030      	beq.n	801329a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013238:	69bb      	ldr	r3, [r7, #24]
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801323e:	89f8      	ldrh	r0, [r7, #14]
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013246:	2304      	movs	r3, #4
 8013248:	2236      	movs	r2, #54	; 0x36
 801324a:	f000 f85f 	bl	801330c <dhcp_option>
 801324e:	4603      	mov	r3, r0
 8013250:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013252:	89fc      	ldrh	r4, [r7, #14]
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801325a:	693b      	ldr	r3, [r7, #16]
 801325c:	4618      	mov	r0, r3
 801325e:	f7f7 f9dc 	bl	800a61a <lwip_htonl>
 8013262:	4603      	mov	r3, r0
 8013264:	461a      	mov	r2, r3
 8013266:	4629      	mov	r1, r5
 8013268:	4620      	mov	r0, r4
 801326a:	f000 f8db 	bl	8013424 <dhcp_option_long>
 801326e:	4603      	mov	r3, r0
 8013270:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013272:	89f8      	ldrh	r0, [r7, #14]
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	33f0      	adds	r3, #240	; 0xf0
 8013278:	69ba      	ldr	r2, [r7, #24]
 801327a:	4619      	mov	r1, r3
 801327c:	f000 fd8e 	bl	8013d9c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013280:	4b13      	ldr	r3, [pc, #76]	; (80132d0 <dhcp_release_and_stop+0x12c>)
 8013282:	6818      	ldr	r0, [r3, #0]
 8013284:	f107 0210 	add.w	r2, r7, #16
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	9300      	str	r3, [sp, #0]
 801328c:	2343      	movs	r3, #67	; 0x43
 801328e:	69b9      	ldr	r1, [r7, #24]
 8013290:	f7fe fc86 	bl	8011ba0 <udp_sendto_if>
      pbuf_free(p_out);
 8013294:	69b8      	ldr	r0, [r7, #24]
 8013296:	f7f8 fd41 	bl	800bd1c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801329a:	4b0e      	ldr	r3, [pc, #56]	; (80132d4 <dhcp_release_and_stop+0x130>)
 801329c:	4a0d      	ldr	r2, [pc, #52]	; (80132d4 <dhcp_release_and_stop+0x130>)
 801329e:	490d      	ldr	r1, [pc, #52]	; (80132d4 <dhcp_release_and_stop+0x130>)
 80132a0:	6878      	ldr	r0, [r7, #4]
 80132a2:	f7f8 f895 	bl	800b3d0 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80132a6:	2100      	movs	r1, #0
 80132a8:	69f8      	ldr	r0, [r7, #28]
 80132aa:	f000 f815 	bl	80132d8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80132ae:	69fb      	ldr	r3, [r7, #28]
 80132b0:	791b      	ldrb	r3, [r3, #4]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d008      	beq.n	80132c8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80132b6:	f7fe ffbf 	bl	8012238 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80132ba:	69fb      	ldr	r3, [r7, #28]
 80132bc:	2200      	movs	r2, #0
 80132be:	711a      	strb	r2, [r3, #4]
 80132c0:	e002      	b.n	80132c8 <dhcp_release_and_stop+0x124>
    return;
 80132c2:	bf00      	nop
 80132c4:	e000      	b.n	80132c8 <dhcp_release_and_stop+0x124>
    return;
 80132c6:	bf00      	nop
  }
}
 80132c8:	3720      	adds	r7, #32
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bdb0      	pop	{r4, r5, r7, pc}
 80132ce:	bf00      	nop
 80132d0:	2000debc 	.word	0x2000debc
 80132d4:	0801a75c 	.word	0x0801a75c

080132d8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	460b      	mov	r3, r1
 80132e2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	795b      	ldrb	r3, [r3, #5]
 80132e8:	78fa      	ldrb	r2, [r7, #3]
 80132ea:	429a      	cmp	r2, r3
 80132ec:	d008      	beq.n	8013300 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	78fa      	ldrb	r2, [r7, #3]
 80132f2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	2200      	movs	r2, #0
 80132f8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	2200      	movs	r2, #0
 80132fe:	811a      	strh	r2, [r3, #8]
  }
}
 8013300:	bf00      	nop
 8013302:	370c      	adds	r7, #12
 8013304:	46bd      	mov	sp, r7
 8013306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801330a:	4770      	bx	lr

0801330c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6039      	str	r1, [r7, #0]
 8013314:	4611      	mov	r1, r2
 8013316:	461a      	mov	r2, r3
 8013318:	4603      	mov	r3, r0
 801331a:	80fb      	strh	r3, [r7, #6]
 801331c:	460b      	mov	r3, r1
 801331e:	717b      	strb	r3, [r7, #5]
 8013320:	4613      	mov	r3, r2
 8013322:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013324:	88fa      	ldrh	r2, [r7, #6]
 8013326:	793b      	ldrb	r3, [r7, #4]
 8013328:	4413      	add	r3, r2
 801332a:	3302      	adds	r3, #2
 801332c:	2b44      	cmp	r3, #68	; 0x44
 801332e:	d906      	bls.n	801333e <dhcp_option+0x32>
 8013330:	4b0d      	ldr	r3, [pc, #52]	; (8013368 <dhcp_option+0x5c>)
 8013332:	f240 529a 	movw	r2, #1434	; 0x59a
 8013336:	490d      	ldr	r1, [pc, #52]	; (801336c <dhcp_option+0x60>)
 8013338:	480d      	ldr	r0, [pc, #52]	; (8013370 <dhcp_option+0x64>)
 801333a:	f003 fa5d 	bl	80167f8 <iprintf>
  options[options_out_len++] = option_type;
 801333e:	88fb      	ldrh	r3, [r7, #6]
 8013340:	1c5a      	adds	r2, r3, #1
 8013342:	80fa      	strh	r2, [r7, #6]
 8013344:	461a      	mov	r2, r3
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	4413      	add	r3, r2
 801334a:	797a      	ldrb	r2, [r7, #5]
 801334c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801334e:	88fb      	ldrh	r3, [r7, #6]
 8013350:	1c5a      	adds	r2, r3, #1
 8013352:	80fa      	strh	r2, [r7, #6]
 8013354:	461a      	mov	r2, r3
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	4413      	add	r3, r2
 801335a:	793a      	ldrb	r2, [r7, #4]
 801335c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801335e:	88fb      	ldrh	r3, [r7, #6]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	08019b68 	.word	0x08019b68
 801336c:	08019cfc 	.word	0x08019cfc
 8013370:	08019bc8 	.word	0x08019bc8

08013374 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	6039      	str	r1, [r7, #0]
 801337e:	80fb      	strh	r3, [r7, #6]
 8013380:	4613      	mov	r3, r2
 8013382:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013384:	88fb      	ldrh	r3, [r7, #6]
 8013386:	2b43      	cmp	r3, #67	; 0x43
 8013388:	d906      	bls.n	8013398 <dhcp_option_byte+0x24>
 801338a:	4b0a      	ldr	r3, [pc, #40]	; (80133b4 <dhcp_option_byte+0x40>)
 801338c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013390:	4909      	ldr	r1, [pc, #36]	; (80133b8 <dhcp_option_byte+0x44>)
 8013392:	480a      	ldr	r0, [pc, #40]	; (80133bc <dhcp_option_byte+0x48>)
 8013394:	f003 fa30 	bl	80167f8 <iprintf>
  options[options_out_len++] = value;
 8013398:	88fb      	ldrh	r3, [r7, #6]
 801339a:	1c5a      	adds	r2, r3, #1
 801339c:	80fa      	strh	r2, [r7, #6]
 801339e:	461a      	mov	r2, r3
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	4413      	add	r3, r2
 80133a4:	797a      	ldrb	r2, [r7, #5]
 80133a6:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80133a8:	88fb      	ldrh	r3, [r7, #6]
}
 80133aa:	4618      	mov	r0, r3
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	08019b68 	.word	0x08019b68
 80133b8:	08019d40 	.word	0x08019d40
 80133bc:	08019bc8 	.word	0x08019bc8

080133c0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b082      	sub	sp, #8
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	4603      	mov	r3, r0
 80133c8:	6039      	str	r1, [r7, #0]
 80133ca:	80fb      	strh	r3, [r7, #6]
 80133cc:	4613      	mov	r3, r2
 80133ce:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80133d0:	88fb      	ldrh	r3, [r7, #6]
 80133d2:	3302      	adds	r3, #2
 80133d4:	2b44      	cmp	r3, #68	; 0x44
 80133d6:	d906      	bls.n	80133e6 <dhcp_option_short+0x26>
 80133d8:	4b0f      	ldr	r3, [pc, #60]	; (8013418 <dhcp_option_short+0x58>)
 80133da:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80133de:	490f      	ldr	r1, [pc, #60]	; (801341c <dhcp_option_short+0x5c>)
 80133e0:	480f      	ldr	r0, [pc, #60]	; (8013420 <dhcp_option_short+0x60>)
 80133e2:	f003 fa09 	bl	80167f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80133e6:	88bb      	ldrh	r3, [r7, #4]
 80133e8:	0a1b      	lsrs	r3, r3, #8
 80133ea:	b29a      	uxth	r2, r3
 80133ec:	88fb      	ldrh	r3, [r7, #6]
 80133ee:	1c59      	adds	r1, r3, #1
 80133f0:	80f9      	strh	r1, [r7, #6]
 80133f2:	4619      	mov	r1, r3
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	440b      	add	r3, r1
 80133f8:	b2d2      	uxtb	r2, r2
 80133fa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80133fc:	88fb      	ldrh	r3, [r7, #6]
 80133fe:	1c5a      	adds	r2, r3, #1
 8013400:	80fa      	strh	r2, [r7, #6]
 8013402:	461a      	mov	r2, r3
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	4413      	add	r3, r2
 8013408:	88ba      	ldrh	r2, [r7, #4]
 801340a:	b2d2      	uxtb	r2, r2
 801340c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801340e:	88fb      	ldrh	r3, [r7, #6]
}
 8013410:	4618      	mov	r0, r3
 8013412:	3708      	adds	r7, #8
 8013414:	46bd      	mov	sp, r7
 8013416:	bd80      	pop	{r7, pc}
 8013418:	08019b68 	.word	0x08019b68
 801341c:	08019d78 	.word	0x08019d78
 8013420:	08019bc8 	.word	0x08019bc8

08013424 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b084      	sub	sp, #16
 8013428:	af00      	add	r7, sp, #0
 801342a:	4603      	mov	r3, r0
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
 8013430:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013432:	89fb      	ldrh	r3, [r7, #14]
 8013434:	3304      	adds	r3, #4
 8013436:	2b44      	cmp	r3, #68	; 0x44
 8013438:	d906      	bls.n	8013448 <dhcp_option_long+0x24>
 801343a:	4b19      	ldr	r3, [pc, #100]	; (80134a0 <dhcp_option_long+0x7c>)
 801343c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013440:	4918      	ldr	r1, [pc, #96]	; (80134a4 <dhcp_option_long+0x80>)
 8013442:	4819      	ldr	r0, [pc, #100]	; (80134a8 <dhcp_option_long+0x84>)
 8013444:	f003 f9d8 	bl	80167f8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	0e1a      	lsrs	r2, r3, #24
 801344c:	89fb      	ldrh	r3, [r7, #14]
 801344e:	1c59      	adds	r1, r3, #1
 8013450:	81f9      	strh	r1, [r7, #14]
 8013452:	4619      	mov	r1, r3
 8013454:	68bb      	ldr	r3, [r7, #8]
 8013456:	440b      	add	r3, r1
 8013458:	b2d2      	uxtb	r2, r2
 801345a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	0c1a      	lsrs	r2, r3, #16
 8013460:	89fb      	ldrh	r3, [r7, #14]
 8013462:	1c59      	adds	r1, r3, #1
 8013464:	81f9      	strh	r1, [r7, #14]
 8013466:	4619      	mov	r1, r3
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	440b      	add	r3, r1
 801346c:	b2d2      	uxtb	r2, r2
 801346e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	0a1a      	lsrs	r2, r3, #8
 8013474:	89fb      	ldrh	r3, [r7, #14]
 8013476:	1c59      	adds	r1, r3, #1
 8013478:	81f9      	strh	r1, [r7, #14]
 801347a:	4619      	mov	r1, r3
 801347c:	68bb      	ldr	r3, [r7, #8]
 801347e:	440b      	add	r3, r1
 8013480:	b2d2      	uxtb	r2, r2
 8013482:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013484:	89fb      	ldrh	r3, [r7, #14]
 8013486:	1c5a      	adds	r2, r3, #1
 8013488:	81fa      	strh	r2, [r7, #14]
 801348a:	461a      	mov	r2, r3
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	4413      	add	r3, r2
 8013490:	687a      	ldr	r2, [r7, #4]
 8013492:	b2d2      	uxtb	r2, r2
 8013494:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013496:	89fb      	ldrh	r3, [r7, #14]
}
 8013498:	4618      	mov	r0, r3
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	08019b68 	.word	0x08019b68
 80134a4:	08019db4 	.word	0x08019db4
 80134a8:	08019bc8 	.word	0x08019bc8

080134ac <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b090      	sub	sp, #64	; 0x40
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80134b6:	2300      	movs	r3, #0
 80134b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 80134ba:	2300      	movs	r3, #0
 80134bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80134be:	2208      	movs	r2, #8
 80134c0:	2100      	movs	r1, #0
 80134c2:	48b5      	ldr	r0, [pc, #724]	; (8013798 <dhcp_parse_reply+0x2ec>)
 80134c4:	f003 f9fd 	bl	80168c2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	895b      	ldrh	r3, [r3, #10]
 80134cc:	2b2b      	cmp	r3, #43	; 0x2b
 80134ce:	d802      	bhi.n	80134d6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80134d0:	f06f 0301 	mvn.w	r3, #1
 80134d4:	e2a7      	b.n	8013a26 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80134dc:	23f0      	movs	r3, #240	; 0xf0
 80134de:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	891b      	ldrh	r3, [r3, #8]
 80134e4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80134ea:	e00c      	b.n	8013506 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80134ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ee:	895b      	ldrh	r3, [r3, #10]
 80134f0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80134f2:	1ad3      	subs	r3, r2, r3
 80134f4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	895b      	ldrh	r3, [r3, #10]
 80134fa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80134fc:	1ad3      	subs	r3, r2, r3
 80134fe:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013508:	2b00      	cmp	r3, #0
 801350a:	d004      	beq.n	8013516 <dhcp_parse_reply+0x6a>
 801350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801350e:	895b      	ldrh	r3, [r3, #10]
 8013510:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013512:	429a      	cmp	r2, r3
 8013514:	d2ea      	bcs.n	80134ec <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013518:	2b00      	cmp	r3, #0
 801351a:	d102      	bne.n	8013522 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801351c:	f06f 0301 	mvn.w	r3, #1
 8013520:	e281      	b.n	8013a26 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8013522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013524:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013526:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013528:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801352a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801352c:	685b      	ldr	r3, [r3, #4]
 801352e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013530:	e239      	b.n	80139a6 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8013532:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013534:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013536:	4413      	add	r3, r2
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801353c:	2300      	movs	r3, #0
 801353e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013542:	f04f 33ff 	mov.w	r3, #4294967295
 8013546:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013548:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801354a:	3302      	adds	r3, #2
 801354c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801354e:	8bfa      	ldrh	r2, [r7, #30]
 8013550:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013552:	429a      	cmp	r2, r3
 8013554:	d202      	bcs.n	801355c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013556:	f06f 0301 	mvn.w	r3, #1
 801355a:	e264      	b.n	8013a26 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801355c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801355e:	3301      	adds	r3, #1
 8013560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013562:	8952      	ldrh	r2, [r2, #10]
 8013564:	4293      	cmp	r3, r2
 8013566:	da07      	bge.n	8013578 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013568:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801356a:	3301      	adds	r3, #1
 801356c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801356e:	4413      	add	r3, r2
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013576:	e00b      	b.n	8013590 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d004      	beq.n	801358a <dhcp_parse_reply+0xde>
 8013580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	e000      	b.n	801358c <dhcp_parse_reply+0xe0>
 801358a:	2300      	movs	r3, #0
 801358c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013590:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013598:	7dfb      	ldrb	r3, [r7, #23]
 801359a:	2b3b      	cmp	r3, #59	; 0x3b
 801359c:	f200 812c 	bhi.w	80137f8 <dhcp_parse_reply+0x34c>
 80135a0:	a201      	add	r2, pc, #4	; (adr r2, 80135a8 <dhcp_parse_reply+0xfc>)
 80135a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135a6:	bf00      	nop
 80135a8:	08013699 	.word	0x08013699
 80135ac:	080136a9 	.word	0x080136a9
 80135b0:	080137f9 	.word	0x080137f9
 80135b4:	080136cb 	.word	0x080136cb
 80135b8:	080137f9 	.word	0x080137f9
 80135bc:	080137f9 	.word	0x080137f9
 80135c0:	080137f9 	.word	0x080137f9
 80135c4:	080137f9 	.word	0x080137f9
 80135c8:	080137f9 	.word	0x080137f9
 80135cc:	080137f9 	.word	0x080137f9
 80135d0:	080137f9 	.word	0x080137f9
 80135d4:	080137f9 	.word	0x080137f9
 80135d8:	080137f9 	.word	0x080137f9
 80135dc:	080137f9 	.word	0x080137f9
 80135e0:	080137f9 	.word	0x080137f9
 80135e4:	080137f9 	.word	0x080137f9
 80135e8:	080137f9 	.word	0x080137f9
 80135ec:	080137f9 	.word	0x080137f9
 80135f0:	080137f9 	.word	0x080137f9
 80135f4:	080137f9 	.word	0x080137f9
 80135f8:	080137f9 	.word	0x080137f9
 80135fc:	080137f9 	.word	0x080137f9
 8013600:	080137f9 	.word	0x080137f9
 8013604:	080137f9 	.word	0x080137f9
 8013608:	080137f9 	.word	0x080137f9
 801360c:	080137f9 	.word	0x080137f9
 8013610:	080137f9 	.word	0x080137f9
 8013614:	080137f9 	.word	0x080137f9
 8013618:	080137f9 	.word	0x080137f9
 801361c:	080137f9 	.word	0x080137f9
 8013620:	080137f9 	.word	0x080137f9
 8013624:	080137f9 	.word	0x080137f9
 8013628:	080137f9 	.word	0x080137f9
 801362c:	080137f9 	.word	0x080137f9
 8013630:	080137f9 	.word	0x080137f9
 8013634:	080137f9 	.word	0x080137f9
 8013638:	080137f9 	.word	0x080137f9
 801363c:	080137f9 	.word	0x080137f9
 8013640:	080137f9 	.word	0x080137f9
 8013644:	080137f9 	.word	0x080137f9
 8013648:	080137f9 	.word	0x080137f9
 801364c:	080137f9 	.word	0x080137f9
 8013650:	080137f9 	.word	0x080137f9
 8013654:	080137f9 	.word	0x080137f9
 8013658:	080137f9 	.word	0x080137f9
 801365c:	080137f9 	.word	0x080137f9
 8013660:	080137f9 	.word	0x080137f9
 8013664:	080137f9 	.word	0x080137f9
 8013668:	080137f9 	.word	0x080137f9
 801366c:	080137f9 	.word	0x080137f9
 8013670:	080137f9 	.word	0x080137f9
 8013674:	080136f7 	.word	0x080136f7
 8013678:	08013719 	.word	0x08013719
 801367c:	08013755 	.word	0x08013755
 8013680:	08013777 	.word	0x08013777
 8013684:	080137f9 	.word	0x080137f9
 8013688:	080137f9 	.word	0x080137f9
 801368c:	080137f9 	.word	0x080137f9
 8013690:	080137b5 	.word	0x080137b5
 8013694:	080137d7 	.word	0x080137d7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013698:	2300      	movs	r3, #0
 801369a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801369e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 80136a6:	e0ab      	b.n	8013800 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80136a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ac:	2b04      	cmp	r3, #4
 80136ae:	d009      	beq.n	80136c4 <dhcp_parse_reply+0x218>
 80136b0:	4b3a      	ldr	r3, [pc, #232]	; (801379c <dhcp_parse_reply+0x2f0>)
 80136b2:	f240 622e 	movw	r2, #1582	; 0x62e
 80136b6:	493a      	ldr	r1, [pc, #232]	; (80137a0 <dhcp_parse_reply+0x2f4>)
 80136b8:	483a      	ldr	r0, [pc, #232]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 80136ba:	f003 f89d 	bl	80167f8 <iprintf>
 80136be:	f06f 0305 	mvn.w	r3, #5
 80136c2:	e1b0      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80136c4:	2306      	movs	r3, #6
 80136c6:	623b      	str	r3, [r7, #32]
        break;
 80136c8:	e09a      	b.n	8013800 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80136ca:	2304      	movs	r3, #4
 80136cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80136d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80136d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80136d8:	429a      	cmp	r2, r3
 80136da:	d209      	bcs.n	80136f0 <dhcp_parse_reply+0x244>
 80136dc:	4b2f      	ldr	r3, [pc, #188]	; (801379c <dhcp_parse_reply+0x2f0>)
 80136de:	f240 6233 	movw	r2, #1587	; 0x633
 80136e2:	4931      	ldr	r1, [pc, #196]	; (80137a8 <dhcp_parse_reply+0x2fc>)
 80136e4:	482f      	ldr	r0, [pc, #188]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 80136e6:	f003 f887 	bl	80167f8 <iprintf>
 80136ea:	f06f 0305 	mvn.w	r3, #5
 80136ee:	e19a      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80136f0:	2307      	movs	r3, #7
 80136f2:	623b      	str	r3, [r7, #32]
        break;
 80136f4:	e084      	b.n	8013800 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80136f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136fa:	2b04      	cmp	r3, #4
 80136fc:	d009      	beq.n	8013712 <dhcp_parse_reply+0x266>
 80136fe:	4b27      	ldr	r3, [pc, #156]	; (801379c <dhcp_parse_reply+0x2f0>)
 8013700:	f240 6241 	movw	r2, #1601	; 0x641
 8013704:	4926      	ldr	r1, [pc, #152]	; (80137a0 <dhcp_parse_reply+0x2f4>)
 8013706:	4827      	ldr	r0, [pc, #156]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 8013708:	f003 f876 	bl	80167f8 <iprintf>
 801370c:	f06f 0305 	mvn.w	r3, #5
 8013710:	e189      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013712:	2303      	movs	r3, #3
 8013714:	623b      	str	r3, [r7, #32]
        break;
 8013716:	e073      	b.n	8013800 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013718:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801371c:	2b01      	cmp	r3, #1
 801371e:	d009      	beq.n	8013734 <dhcp_parse_reply+0x288>
 8013720:	4b1e      	ldr	r3, [pc, #120]	; (801379c <dhcp_parse_reply+0x2f0>)
 8013722:	f240 624f 	movw	r2, #1615	; 0x64f
 8013726:	4921      	ldr	r1, [pc, #132]	; (80137ac <dhcp_parse_reply+0x300>)
 8013728:	481e      	ldr	r0, [pc, #120]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 801372a:	f003 f865 	bl	80167f8 <iprintf>
 801372e:	f06f 0305 	mvn.w	r3, #5
 8013732:	e178      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013736:	2bf0      	cmp	r3, #240	; 0xf0
 8013738:	d009      	beq.n	801374e <dhcp_parse_reply+0x2a2>
 801373a:	4b18      	ldr	r3, [pc, #96]	; (801379c <dhcp_parse_reply+0x2f0>)
 801373c:	f240 6251 	movw	r2, #1617	; 0x651
 8013740:	491b      	ldr	r1, [pc, #108]	; (80137b0 <dhcp_parse_reply+0x304>)
 8013742:	4818      	ldr	r0, [pc, #96]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 8013744:	f003 f858 	bl	80167f8 <iprintf>
 8013748:	f06f 0305 	mvn.w	r3, #5
 801374c:	e16b      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801374e:	2300      	movs	r3, #0
 8013750:	623b      	str	r3, [r7, #32]
        break;
 8013752:	e055      	b.n	8013800 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013758:	2b01      	cmp	r3, #1
 801375a:	d009      	beq.n	8013770 <dhcp_parse_reply+0x2c4>
 801375c:	4b0f      	ldr	r3, [pc, #60]	; (801379c <dhcp_parse_reply+0x2f0>)
 801375e:	f240 6255 	movw	r2, #1621	; 0x655
 8013762:	4912      	ldr	r1, [pc, #72]	; (80137ac <dhcp_parse_reply+0x300>)
 8013764:	480f      	ldr	r0, [pc, #60]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 8013766:	f003 f847 	bl	80167f8 <iprintf>
 801376a:	f06f 0305 	mvn.w	r3, #5
 801376e:	e15a      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013770:	2301      	movs	r3, #1
 8013772:	623b      	str	r3, [r7, #32]
        break;
 8013774:	e044      	b.n	8013800 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801377a:	2b04      	cmp	r3, #4
 801377c:	d009      	beq.n	8013792 <dhcp_parse_reply+0x2e6>
 801377e:	4b07      	ldr	r3, [pc, #28]	; (801379c <dhcp_parse_reply+0x2f0>)
 8013780:	f240 6259 	movw	r2, #1625	; 0x659
 8013784:	4906      	ldr	r1, [pc, #24]	; (80137a0 <dhcp_parse_reply+0x2f4>)
 8013786:	4807      	ldr	r0, [pc, #28]	; (80137a4 <dhcp_parse_reply+0x2f8>)
 8013788:	f003 f836 	bl	80167f8 <iprintf>
 801378c:	f06f 0305 	mvn.w	r3, #5
 8013790:	e149      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013792:	2302      	movs	r3, #2
 8013794:	623b      	str	r3, [r7, #32]
        break;
 8013796:	e033      	b.n	8013800 <dhcp_parse_reply+0x354>
 8013798:	2000deb4 	.word	0x2000deb4
 801379c:	08019b68 	.word	0x08019b68
 80137a0:	08019df0 	.word	0x08019df0
 80137a4:	08019bc8 	.word	0x08019bc8
 80137a8:	08019dfc 	.word	0x08019dfc
 80137ac:	08019e10 	.word	0x08019e10
 80137b0:	08019e1c 	.word	0x08019e1c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137b8:	2b04      	cmp	r3, #4
 80137ba:	d009      	beq.n	80137d0 <dhcp_parse_reply+0x324>
 80137bc:	4b9c      	ldr	r3, [pc, #624]	; (8013a30 <dhcp_parse_reply+0x584>)
 80137be:	f240 625d 	movw	r2, #1629	; 0x65d
 80137c2:	499c      	ldr	r1, [pc, #624]	; (8013a34 <dhcp_parse_reply+0x588>)
 80137c4:	489c      	ldr	r0, [pc, #624]	; (8013a38 <dhcp_parse_reply+0x58c>)
 80137c6:	f003 f817 	bl	80167f8 <iprintf>
 80137ca:	f06f 0305 	mvn.w	r3, #5
 80137ce:	e12a      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 80137d0:	2304      	movs	r3, #4
 80137d2:	623b      	str	r3, [r7, #32]
        break;
 80137d4:	e014      	b.n	8013800 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80137d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80137da:	2b04      	cmp	r3, #4
 80137dc:	d009      	beq.n	80137f2 <dhcp_parse_reply+0x346>
 80137de:	4b94      	ldr	r3, [pc, #592]	; (8013a30 <dhcp_parse_reply+0x584>)
 80137e0:	f240 6261 	movw	r2, #1633	; 0x661
 80137e4:	4993      	ldr	r1, [pc, #588]	; (8013a34 <dhcp_parse_reply+0x588>)
 80137e6:	4894      	ldr	r0, [pc, #592]	; (8013a38 <dhcp_parse_reply+0x58c>)
 80137e8:	f003 f806 	bl	80167f8 <iprintf>
 80137ec:	f06f 0305 	mvn.w	r3, #5
 80137f0:	e119      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 80137f2:	2305      	movs	r3, #5
 80137f4:	623b      	str	r3, [r7, #32]
        break;
 80137f6:	e003      	b.n	8013800 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 80137f8:	2300      	movs	r3, #0
 80137fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80137fe:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013800:	7dfb      	ldrb	r3, [r7, #23]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d103      	bne.n	801380e <dhcp_parse_reply+0x362>
      offset++;
 8013806:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013808:	3301      	adds	r3, #1
 801380a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801380c:	e0a1      	b.n	8013952 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801380e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013814:	4413      	add	r3, r2
 8013816:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801381a:	4293      	cmp	r3, r2
 801381c:	dd02      	ble.n	8013824 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801381e:	f06f 0301 	mvn.w	r3, #1
 8013822:	e100      	b.n	8013a26 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8013824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013828:	b29a      	uxth	r2, r3
 801382a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801382c:	4413      	add	r3, r2
 801382e:	b29b      	uxth	r3, r3
 8013830:	3302      	adds	r3, #2
 8013832:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013834:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013838:	2b00      	cmp	r3, #0
 801383a:	f000 808a 	beq.w	8013952 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801383e:	2300      	movs	r3, #0
 8013840:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013842:	6a3b      	ldr	r3, [r7, #32]
 8013844:	2b00      	cmp	r3, #0
 8013846:	db02      	blt.n	801384e <dhcp_parse_reply+0x3a2>
 8013848:	6a3b      	ldr	r3, [r7, #32]
 801384a:	2b07      	cmp	r3, #7
 801384c:	dd06      	ble.n	801385c <dhcp_parse_reply+0x3b0>
 801384e:	4b78      	ldr	r3, [pc, #480]	; (8013a30 <dhcp_parse_reply+0x584>)
 8013850:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013854:	4979      	ldr	r1, [pc, #484]	; (8013a3c <dhcp_parse_reply+0x590>)
 8013856:	4878      	ldr	r0, [pc, #480]	; (8013a38 <dhcp_parse_reply+0x58c>)
 8013858:	f002 ffce 	bl	80167f8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801385c:	4a78      	ldr	r2, [pc, #480]	; (8013a40 <dhcp_parse_reply+0x594>)
 801385e:	6a3b      	ldr	r3, [r7, #32]
 8013860:	4413      	add	r3, r2
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d174      	bne.n	8013952 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8013868:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801386c:	2b04      	cmp	r3, #4
 801386e:	bf28      	it	cs
 8013870:	2304      	movcs	r3, #4
 8013872:	b2db      	uxtb	r3, r3
 8013874:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013876:	8bfb      	ldrh	r3, [r7, #30]
 8013878:	8aba      	ldrh	r2, [r7, #20]
 801387a:	f107 0108 	add.w	r1, r7, #8
 801387e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013880:	f7f8 fc52 	bl	800c128 <pbuf_copy_partial>
 8013884:	4603      	mov	r3, r0
 8013886:	461a      	mov	r2, r3
 8013888:	8abb      	ldrh	r3, [r7, #20]
 801388a:	4293      	cmp	r3, r2
 801388c:	d002      	beq.n	8013894 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801388e:	f06f 0301 	mvn.w	r3, #1
 8013892:	e0c8      	b.n	8013a26 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8013894:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013898:	2b04      	cmp	r3, #4
 801389a:	d933      	bls.n	8013904 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801389c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138a0:	f003 0303 	and.w	r3, r3, #3
 80138a4:	b2db      	uxtb	r3, r3
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d009      	beq.n	80138be <dhcp_parse_reply+0x412>
 80138aa:	4b61      	ldr	r3, [pc, #388]	; (8013a30 <dhcp_parse_reply+0x584>)
 80138ac:	f240 6281 	movw	r2, #1665	; 0x681
 80138b0:	4964      	ldr	r1, [pc, #400]	; (8013a44 <dhcp_parse_reply+0x598>)
 80138b2:	4861      	ldr	r0, [pc, #388]	; (8013a38 <dhcp_parse_reply+0x58c>)
 80138b4:	f002 ffa0 	bl	80167f8 <iprintf>
 80138b8:	f06f 0305 	mvn.w	r3, #5
 80138bc:	e0b3      	b.n	8013a26 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 80138be:	4a60      	ldr	r2, [pc, #384]	; (8013a40 <dhcp_parse_reply+0x594>)
 80138c0:	6a3b      	ldr	r3, [r7, #32]
 80138c2:	4413      	add	r3, r2
 80138c4:	2201      	movs	r2, #1
 80138c6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7f6 fea5 	bl	800a61a <lwip_htonl>
 80138d0:	4602      	mov	r2, r0
 80138d2:	495d      	ldr	r1, [pc, #372]	; (8013a48 <dhcp_parse_reply+0x59c>)
 80138d4:	6a3b      	ldr	r3, [r7, #32]
 80138d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 80138da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80138de:	3b04      	subs	r3, #4
 80138e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 80138e4:	8bfb      	ldrh	r3, [r7, #30]
 80138e6:	3304      	adds	r3, #4
 80138e8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 80138ea:	8a7a      	ldrh	r2, [r7, #18]
 80138ec:	8bfb      	ldrh	r3, [r7, #30]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d202      	bcs.n	80138f8 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 80138f2:	f06f 0301 	mvn.w	r3, #1
 80138f6:	e096      	b.n	8013a26 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 80138f8:	8a7b      	ldrh	r3, [r7, #18]
 80138fa:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80138fc:	6a3b      	ldr	r3, [r7, #32]
 80138fe:	3301      	adds	r3, #1
 8013900:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013902:	e79e      	b.n	8013842 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8013904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013908:	2b04      	cmp	r3, #4
 801390a:	d106      	bne.n	801391a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	4618      	mov	r0, r3
 8013910:	f7f6 fe83 	bl	800a61a <lwip_htonl>
 8013914:	4603      	mov	r3, r0
 8013916:	60bb      	str	r3, [r7, #8]
 8013918:	e011      	b.n	801393e <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801391a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801391e:	2b01      	cmp	r3, #1
 8013920:	d009      	beq.n	8013936 <dhcp_parse_reply+0x48a>
 8013922:	4b43      	ldr	r3, [pc, #268]	; (8013a30 <dhcp_parse_reply+0x584>)
 8013924:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013928:	4948      	ldr	r1, [pc, #288]	; (8013a4c <dhcp_parse_reply+0x5a0>)
 801392a:	4843      	ldr	r0, [pc, #268]	; (8013a38 <dhcp_parse_reply+0x58c>)
 801392c:	f002 ff64 	bl	80167f8 <iprintf>
 8013930:	f06f 0305 	mvn.w	r3, #5
 8013934:	e077      	b.n	8013a26 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8013936:	f107 0308 	add.w	r3, r7, #8
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801393e:	4a40      	ldr	r2, [pc, #256]	; (8013a40 <dhcp_parse_reply+0x594>)
 8013940:	6a3b      	ldr	r3, [r7, #32]
 8013942:	4413      	add	r3, r2
 8013944:	2201      	movs	r2, #1
 8013946:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	493f      	ldr	r1, [pc, #252]	; (8013a48 <dhcp_parse_reply+0x59c>)
 801394c:	6a3b      	ldr	r3, [r7, #32]
 801394e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013954:	895b      	ldrh	r3, [r3, #10]
 8013956:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013958:	429a      	cmp	r2, r3
 801395a:	d324      	bcc.n	80139a6 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801395c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395e:	895b      	ldrh	r3, [r3, #10]
 8013960:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013962:	1ad3      	subs	r3, r2, r3
 8013964:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013968:	895b      	ldrh	r3, [r3, #10]
 801396a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801396c:	1ad3      	subs	r3, r2, r3
 801396e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013970:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013972:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013974:	429a      	cmp	r2, r3
 8013976:	d213      	bcs.n	80139a0 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8013978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013980:	2b00      	cmp	r3, #0
 8013982:	d109      	bne.n	8013998 <dhcp_parse_reply+0x4ec>
 8013984:	4b2a      	ldr	r3, [pc, #168]	; (8013a30 <dhcp_parse_reply+0x584>)
 8013986:	f240 629d 	movw	r2, #1693	; 0x69d
 801398a:	4931      	ldr	r1, [pc, #196]	; (8013a50 <dhcp_parse_reply+0x5a4>)
 801398c:	482a      	ldr	r0, [pc, #168]	; (8013a38 <dhcp_parse_reply+0x58c>)
 801398e:	f002 ff33 	bl	80167f8 <iprintf>
 8013992:	f06f 0305 	mvn.w	r3, #5
 8013996:	e046      	b.n	8013a26 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8013998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801399e:	e002      	b.n	80139a6 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80139a0:	f06f 0301 	mvn.w	r3, #1
 80139a4:	e03f      	b.n	8013a26 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80139a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d00a      	beq.n	80139c2 <dhcp_parse_reply+0x516>
 80139ac:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80139ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d206      	bcs.n	80139c2 <dhcp_parse_reply+0x516>
 80139b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80139b8:	4413      	add	r3, r2
 80139ba:	781b      	ldrb	r3, [r3, #0]
 80139bc:	2bff      	cmp	r3, #255	; 0xff
 80139be:	f47f adb8 	bne.w	8013532 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80139c2:	4b1f      	ldr	r3, [pc, #124]	; (8013a40 <dhcp_parse_reply+0x594>)
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d018      	beq.n	80139fc <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80139ca:	4b1f      	ldr	r3, [pc, #124]	; (8013a48 <dhcp_parse_reply+0x59c>)
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80139d0:	4b1b      	ldr	r3, [pc, #108]	; (8013a40 <dhcp_parse_reply+0x594>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	2b01      	cmp	r3, #1
 80139da:	d102      	bne.n	80139e2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80139dc:	2301      	movs	r3, #1
 80139de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139e0:	e00c      	b.n	80139fc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2b02      	cmp	r3, #2
 80139e6:	d102      	bne.n	80139ee <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 80139e8:	2301      	movs	r3, #1
 80139ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80139ec:	e006      	b.n	80139fc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2b03      	cmp	r3, #3
 80139f2:	d103      	bne.n	80139fc <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 80139f4:	2301      	movs	r3, #1
 80139f6:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 80139f8:	2301      	movs	r3, #1
 80139fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80139fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d006      	beq.n	8013a10 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013a02:	2300      	movs	r3, #0
 8013a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013a06:	236c      	movs	r3, #108	; 0x6c
 8013a08:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013a0a:	23ec      	movs	r3, #236	; 0xec
 8013a0c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013a0e:	e56a      	b.n	80134e6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d006      	beq.n	8013a24 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8013a16:	2300      	movs	r3, #0
 8013a18:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013a1a:	232c      	movs	r3, #44	; 0x2c
 8013a1c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8013a1e:	236c      	movs	r3, #108	; 0x6c
 8013a20:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8013a22:	e560      	b.n	80134e6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8013a24:	2300      	movs	r3, #0
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3740      	adds	r7, #64	; 0x40
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bd80      	pop	{r7, pc}
 8013a2e:	bf00      	nop
 8013a30:	08019b68 	.word	0x08019b68
 8013a34:	08019df0 	.word	0x08019df0
 8013a38:	08019bc8 	.word	0x08019bc8
 8013a3c:	08019e34 	.word	0x08019e34
 8013a40:	2000deb4 	.word	0x2000deb4
 8013a44:	08019e48 	.word	0x08019e48
 8013a48:	2000de94 	.word	0x2000de94
 8013a4c:	08019e60 	.word	0x08019e60
 8013a50:	08019e74 	.word	0x08019e74

08013a54 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b08a      	sub	sp, #40	; 0x28
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	60f8      	str	r0, [r7, #12]
 8013a5c:	60b9      	str	r1, [r7, #8]
 8013a5e:	607a      	str	r2, [r7, #4]
 8013a60:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8013a62:	4b60      	ldr	r3, [pc, #384]	; (8013be4 <dhcp_recv+0x190>)
 8013a64:	685b      	ldr	r3, [r3, #4]
 8013a66:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a68:	6a3b      	ldr	r3, [r7, #32]
 8013a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a6c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	685b      	ldr	r3, [r3, #4]
 8013a72:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f000 809d 	beq.w	8013bb6 <dhcp_recv+0x162>
 8013a7c:	69fb      	ldr	r3, [r7, #28]
 8013a7e:	791b      	ldrb	r3, [r3, #4]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f000 8098 	beq.w	8013bb6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	895b      	ldrh	r3, [r3, #10]
 8013a8a:	2b2b      	cmp	r3, #43	; 0x2b
 8013a8c:	f240 8095 	bls.w	8013bba <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013a90:	69bb      	ldr	r3, [r7, #24]
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	2b02      	cmp	r3, #2
 8013a96:	f040 8092 	bne.w	8013bbe <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013aa0:	e012      	b.n	8013ac8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8013aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013aa6:	6a3a      	ldr	r2, [r7, #32]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013aae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ab2:	69b9      	ldr	r1, [r7, #24]
 8013ab4:	440b      	add	r3, r1
 8013ab6:	7f1b      	ldrb	r3, [r3, #28]
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	f040 8082 	bne.w	8013bc2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013abe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ac2:	3301      	adds	r3, #1
 8013ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013ac8:	6a3b      	ldr	r3, [r7, #32]
 8013aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ace:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d203      	bcs.n	8013ade <dhcp_recv+0x8a>
 8013ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ada:	2b05      	cmp	r3, #5
 8013adc:	d9e1      	bls.n	8013aa2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7f6 fd99 	bl	800a61a <lwip_htonl>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	69fb      	ldr	r3, [r7, #28]
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	429a      	cmp	r2, r3
 8013af0:	d169      	bne.n	8013bc6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8013af2:	69f9      	ldr	r1, [r7, #28]
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7ff fcd9 	bl	80134ac <dhcp_parse_reply>
 8013afa:	4603      	mov	r3, r0
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d164      	bne.n	8013bca <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013b00:	4b39      	ldr	r3, [pc, #228]	; (8013be8 <dhcp_recv+0x194>)
 8013b02:	785b      	ldrb	r3, [r3, #1]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d062      	beq.n	8013bce <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	685b      	ldr	r3, [r3, #4]
 8013b0c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8013b0e:	4b37      	ldr	r3, [pc, #220]	; (8013bec <dhcp_recv+0x198>)
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8013b14:	7cfb      	ldrb	r3, [r7, #19]
 8013b16:	2b05      	cmp	r3, #5
 8013b18:	d12a      	bne.n	8013b70 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	795b      	ldrb	r3, [r3, #5]
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	d112      	bne.n	8013b48 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8013b22:	6979      	ldr	r1, [r7, #20]
 8013b24:	6a38      	ldr	r0, [r7, #32]
 8013b26:	f7fe fe53 	bl	80127d0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8013b2a:	6a3b      	ldr	r3, [r7, #32]
 8013b2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013b30:	f003 0308 	and.w	r3, r3, #8
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d003      	beq.n	8013b40 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8013b38:	6a38      	ldr	r0, [r7, #32]
 8013b3a:	f7fe fbc1 	bl	80122c0 <dhcp_check>
 8013b3e:	e049      	b.n	8013bd4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8013b40:	6a38      	ldr	r0, [r7, #32]
 8013b42:	f7ff f867 	bl	8012c14 <dhcp_bind>
 8013b46:	e045      	b.n	8013bd4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013b48:	69fb      	ldr	r3, [r7, #28]
 8013b4a:	795b      	ldrb	r3, [r3, #5]
 8013b4c:	2b03      	cmp	r3, #3
 8013b4e:	d007      	beq.n	8013b60 <dhcp_recv+0x10c>
 8013b50:	69fb      	ldr	r3, [r7, #28]
 8013b52:	795b      	ldrb	r3, [r3, #5]
 8013b54:	2b04      	cmp	r3, #4
 8013b56:	d003      	beq.n	8013b60 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8013b58:	69fb      	ldr	r3, [r7, #28]
 8013b5a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8013b5c:	2b05      	cmp	r3, #5
 8013b5e:	d139      	bne.n	8013bd4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8013b60:	6979      	ldr	r1, [r7, #20]
 8013b62:	6a38      	ldr	r0, [r7, #32]
 8013b64:	f7fe fe34 	bl	80127d0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013b68:	6a38      	ldr	r0, [r7, #32]
 8013b6a:	f7ff f853 	bl	8012c14 <dhcp_bind>
 8013b6e:	e031      	b.n	8013bd4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013b70:	7cfb      	ldrb	r3, [r7, #19]
 8013b72:	2b06      	cmp	r3, #6
 8013b74:	d113      	bne.n	8013b9e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013b7a:	2b03      	cmp	r3, #3
 8013b7c:	d00b      	beq.n	8013b96 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013b7e:	69fb      	ldr	r3, [r7, #28]
 8013b80:	795b      	ldrb	r3, [r3, #5]
 8013b82:	2b01      	cmp	r3, #1
 8013b84:	d007      	beq.n	8013b96 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013b8a:	2b04      	cmp	r3, #4
 8013b8c:	d003      	beq.n	8013b96 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013b8e:	69fb      	ldr	r3, [r7, #28]
 8013b90:	795b      	ldrb	r3, [r3, #5]
 8013b92:	2b05      	cmp	r3, #5
 8013b94:	d103      	bne.n	8013b9e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013b96:	6a38      	ldr	r0, [r7, #32]
 8013b98:	f7fe fb78 	bl	801228c <dhcp_handle_nak>
 8013b9c:	e01a      	b.n	8013bd4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013b9e:	7cfb      	ldrb	r3, [r7, #19]
 8013ba0:	2b02      	cmp	r3, #2
 8013ba2:	d116      	bne.n	8013bd2 <dhcp_recv+0x17e>
 8013ba4:	69fb      	ldr	r3, [r7, #28]
 8013ba6:	795b      	ldrb	r3, [r3, #5]
 8013ba8:	2b06      	cmp	r3, #6
 8013baa:	d112      	bne.n	8013bd2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013bac:	6979      	ldr	r1, [r7, #20]
 8013bae:	6a38      	ldr	r0, [r7, #32]
 8013bb0:	f7fe fbba 	bl	8012328 <dhcp_handle_offer>
 8013bb4:	e00e      	b.n	8013bd4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bb6:	bf00      	nop
 8013bb8:	e00c      	b.n	8013bd4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bba:	bf00      	nop
 8013bbc:	e00a      	b.n	8013bd4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bbe:	bf00      	nop
 8013bc0:	e008      	b.n	8013bd4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013bc2:	bf00      	nop
 8013bc4:	e006      	b.n	8013bd4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bc6:	bf00      	nop
 8013bc8:	e004      	b.n	8013bd4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bca:	bf00      	nop
 8013bcc:	e002      	b.n	8013bd4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013bce:	bf00      	nop
 8013bd0:	e000      	b.n	8013bd4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013bd2:	bf00      	nop
  pbuf_free(p);
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f7f8 f8a1 	bl	800bd1c <pbuf_free>
}
 8013bda:	bf00      	nop
 8013bdc:	3728      	adds	r7, #40	; 0x28
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
 8013be2:	bf00      	nop
 8013be4:	2000a6c0 	.word	0x2000a6c0
 8013be8:	2000deb4 	.word	0x2000deb4
 8013bec:	2000de94 	.word	0x2000de94

08013bf0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013bf0:	b580      	push	{r7, lr}
 8013bf2:	b088      	sub	sp, #32
 8013bf4:	af00      	add	r7, sp, #0
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	60b9      	str	r1, [r7, #8]
 8013bfa:	603b      	str	r3, [r7, #0]
 8013bfc:	4613      	mov	r3, r2
 8013bfe:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	d108      	bne.n	8013c18 <dhcp_create_msg+0x28>
 8013c06:	4b5f      	ldr	r3, [pc, #380]	; (8013d84 <dhcp_create_msg+0x194>)
 8013c08:	f240 7269 	movw	r2, #1897	; 0x769
 8013c0c:	495e      	ldr	r1, [pc, #376]	; (8013d88 <dhcp_create_msg+0x198>)
 8013c0e:	485f      	ldr	r0, [pc, #380]	; (8013d8c <dhcp_create_msg+0x19c>)
 8013c10:	f002 fdf2 	bl	80167f8 <iprintf>
 8013c14:	2300      	movs	r3, #0
 8013c16:	e0b1      	b.n	8013d7c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d108      	bne.n	8013c30 <dhcp_create_msg+0x40>
 8013c1e:	4b59      	ldr	r3, [pc, #356]	; (8013d84 <dhcp_create_msg+0x194>)
 8013c20:	f240 726a 	movw	r2, #1898	; 0x76a
 8013c24:	495a      	ldr	r1, [pc, #360]	; (8013d90 <dhcp_create_msg+0x1a0>)
 8013c26:	4859      	ldr	r0, [pc, #356]	; (8013d8c <dhcp_create_msg+0x19c>)
 8013c28:	f002 fde6 	bl	80167f8 <iprintf>
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	e0a5      	b.n	8013d7c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013c30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c34:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013c38:	2036      	movs	r0, #54	; 0x36
 8013c3a:	f7f7 fd8b 	bl	800b754 <pbuf_alloc>
 8013c3e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013c40:	69bb      	ldr	r3, [r7, #24]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d101      	bne.n	8013c4a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013c46:	2300      	movs	r3, #0
 8013c48:	e098      	b.n	8013d7c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013c4a:	69bb      	ldr	r3, [r7, #24]
 8013c4c:	895b      	ldrh	r3, [r3, #10]
 8013c4e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013c52:	d206      	bcs.n	8013c62 <dhcp_create_msg+0x72>
 8013c54:	4b4b      	ldr	r3, [pc, #300]	; (8013d84 <dhcp_create_msg+0x194>)
 8013c56:	f240 7271 	movw	r2, #1905	; 0x771
 8013c5a:	494e      	ldr	r1, [pc, #312]	; (8013d94 <dhcp_create_msg+0x1a4>)
 8013c5c:	484b      	ldr	r0, [pc, #300]	; (8013d8c <dhcp_create_msg+0x19c>)
 8013c5e:	f002 fdcb 	bl	80167f8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013c62:	79fb      	ldrb	r3, [r7, #7]
 8013c64:	2b03      	cmp	r3, #3
 8013c66:	d103      	bne.n	8013c70 <dhcp_create_msg+0x80>
 8013c68:	68bb      	ldr	r3, [r7, #8]
 8013c6a:	795b      	ldrb	r3, [r3, #5]
 8013c6c:	2b03      	cmp	r3, #3
 8013c6e:	d10d      	bne.n	8013c8c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	799b      	ldrb	r3, [r3, #6]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d105      	bne.n	8013c84 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013c78:	f002 fcbe 	bl	80165f8 <rand>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	461a      	mov	r2, r3
 8013c80:	4b45      	ldr	r3, [pc, #276]	; (8013d98 <dhcp_create_msg+0x1a8>)
 8013c82:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013c84:	4b44      	ldr	r3, [pc, #272]	; (8013d98 <dhcp_create_msg+0x1a8>)
 8013c86:	681a      	ldr	r2, [r3, #0]
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013c8c:	69bb      	ldr	r3, [r7, #24]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013c92:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013c96:	2100      	movs	r1, #0
 8013c98:	6978      	ldr	r0, [r7, #20]
 8013c9a:	f002 fe12 	bl	80168c2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	2201      	movs	r2, #1
 8013ca2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013cb4:	68bb      	ldr	r3, [r7, #8]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f6 fcae 	bl	800a61a <lwip_htonl>
 8013cbe:	4602      	mov	r2, r0
 8013cc0:	697b      	ldr	r3, [r7, #20]
 8013cc2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013cc4:	79fb      	ldrb	r3, [r7, #7]
 8013cc6:	2b08      	cmp	r3, #8
 8013cc8:	d010      	beq.n	8013cec <dhcp_create_msg+0xfc>
 8013cca:	79fb      	ldrb	r3, [r7, #7]
 8013ccc:	2b04      	cmp	r3, #4
 8013cce:	d00d      	beq.n	8013cec <dhcp_create_msg+0xfc>
 8013cd0:	79fb      	ldrb	r3, [r7, #7]
 8013cd2:	2b07      	cmp	r3, #7
 8013cd4:	d00a      	beq.n	8013cec <dhcp_create_msg+0xfc>
 8013cd6:	79fb      	ldrb	r3, [r7, #7]
 8013cd8:	2b03      	cmp	r3, #3
 8013cda:	d10c      	bne.n	8013cf6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013cdc:	68bb      	ldr	r3, [r7, #8]
 8013cde:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013ce0:	2b05      	cmp	r3, #5
 8013ce2:	d003      	beq.n	8013cec <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013ce4:	68bb      	ldr	r3, [r7, #8]
 8013ce6:	795b      	ldrb	r3, [r3, #5]
 8013ce8:	2b04      	cmp	r3, #4
 8013cea:	d104      	bne.n	8013cf6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	3304      	adds	r3, #4
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	697b      	ldr	r3, [r7, #20]
 8013cf4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	83fb      	strh	r3, [r7, #30]
 8013cfa:	e00c      	b.n	8013d16 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013cfc:	8bfa      	ldrh	r2, [r7, #30]
 8013cfe:	8bfb      	ldrh	r3, [r7, #30]
 8013d00:	68f9      	ldr	r1, [r7, #12]
 8013d02:	440a      	add	r2, r1
 8013d04:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8013d08:	697a      	ldr	r2, [r7, #20]
 8013d0a:	4413      	add	r3, r2
 8013d0c:	460a      	mov	r2, r1
 8013d0e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013d10:	8bfb      	ldrh	r3, [r7, #30]
 8013d12:	3301      	adds	r3, #1
 8013d14:	83fb      	strh	r3, [r7, #30]
 8013d16:	8bfb      	ldrh	r3, [r7, #30]
 8013d18:	2b05      	cmp	r3, #5
 8013d1a:	d9ef      	bls.n	8013cfc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013d1c:	697b      	ldr	r3, [r7, #20]
 8013d1e:	2200      	movs	r2, #0
 8013d20:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013d24:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013d28:	2200      	movs	r2, #0
 8013d2a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013d2e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013d32:	2200      	movs	r2, #0
 8013d34:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013d38:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013d42:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013d46:	697b      	ldr	r3, [r7, #20]
 8013d48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d4c:	2301      	movs	r3, #1
 8013d4e:	2235      	movs	r2, #53	; 0x35
 8013d50:	2000      	movs	r0, #0
 8013d52:	f7ff fadb 	bl	801330c <dhcp_option>
 8013d56:	4603      	mov	r3, r0
 8013d58:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013d5a:	697b      	ldr	r3, [r7, #20]
 8013d5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013d60:	79fa      	ldrb	r2, [r7, #7]
 8013d62:	8a7b      	ldrh	r3, [r7, #18]
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7ff fb05 	bl	8013374 <dhcp_option_byte>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d002      	beq.n	8013d7a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013d74:	683b      	ldr	r3, [r7, #0]
 8013d76:	8a7a      	ldrh	r2, [r7, #18]
 8013d78:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013d7a:	69bb      	ldr	r3, [r7, #24]
}
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	3720      	adds	r7, #32
 8013d80:	46bd      	mov	sp, r7
 8013d82:	bd80      	pop	{r7, pc}
 8013d84:	08019b68 	.word	0x08019b68
 8013d88:	08019e88 	.word	0x08019e88
 8013d8c:	08019bc8 	.word	0x08019bc8
 8013d90:	08019ea8 	.word	0x08019ea8
 8013d94:	08019ec8 	.word	0x08019ec8
 8013d98:	2000dec4 	.word	0x2000dec4

08013d9c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	4603      	mov	r3, r0
 8013da4:	60b9      	str	r1, [r7, #8]
 8013da6:	607a      	str	r2, [r7, #4]
 8013da8:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013daa:	89fb      	ldrh	r3, [r7, #14]
 8013dac:	1c5a      	adds	r2, r3, #1
 8013dae:	81fa      	strh	r2, [r7, #14]
 8013db0:	461a      	mov	r2, r3
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	4413      	add	r3, r2
 8013db6:	22ff      	movs	r2, #255	; 0xff
 8013db8:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013dba:	e007      	b.n	8013dcc <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013dbc:	89fb      	ldrh	r3, [r7, #14]
 8013dbe:	1c5a      	adds	r2, r3, #1
 8013dc0:	81fa      	strh	r2, [r7, #14]
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	4413      	add	r3, r2
 8013dc8:	2200      	movs	r2, #0
 8013dca:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013dcc:	89fb      	ldrh	r3, [r7, #14]
 8013dce:	2b43      	cmp	r3, #67	; 0x43
 8013dd0:	d904      	bls.n	8013ddc <dhcp_option_trailer+0x40>
 8013dd2:	89fb      	ldrh	r3, [r7, #14]
 8013dd4:	f003 0303 	and.w	r3, r3, #3
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d002      	beq.n	8013de2 <dhcp_option_trailer+0x46>
 8013ddc:	89fb      	ldrh	r3, [r7, #14]
 8013dde:	2b43      	cmp	r3, #67	; 0x43
 8013de0:	d9ec      	bls.n	8013dbc <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013de2:	89fb      	ldrh	r3, [r7, #14]
 8013de4:	33f0      	adds	r3, #240	; 0xf0
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	4619      	mov	r1, r3
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f7f7 fe10 	bl	800ba10 <pbuf_realloc>
}
 8013df0:	bf00      	nop
 8013df2:	3710      	adds	r7, #16
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013df8:	b480      	push	{r7}
 8013dfa:	b085      	sub	sp, #20
 8013dfc:	af00      	add	r7, sp, #0
 8013dfe:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d017      	beq.n	8013e36 <dhcp_supplied_address+0x3e>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d013      	beq.n	8013e36 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e12:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	795b      	ldrb	r3, [r3, #5]
 8013e18:	2b0a      	cmp	r3, #10
 8013e1a:	d007      	beq.n	8013e2c <dhcp_supplied_address+0x34>
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	795b      	ldrb	r3, [r3, #5]
 8013e20:	2b05      	cmp	r3, #5
 8013e22:	d003      	beq.n	8013e2c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013e28:	2b04      	cmp	r3, #4
 8013e2a:	d101      	bne.n	8013e30 <dhcp_supplied_address+0x38>
 8013e2c:	2301      	movs	r3, #1
 8013e2e:	e000      	b.n	8013e32 <dhcp_supplied_address+0x3a>
 8013e30:	2300      	movs	r3, #0
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	e000      	b.n	8013e38 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013e36:	2300      	movs	r3, #0
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3714      	adds	r7, #20
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e42:	4770      	bx	lr

08013e44 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b082      	sub	sp, #8
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013e4c:	4915      	ldr	r1, [pc, #84]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d013      	beq.n	8013e88 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013e60:	4910      	ldr	r1, [pc, #64]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e62:	687a      	ldr	r2, [r7, #4]
 8013e64:	4613      	mov	r3, r2
 8013e66:	005b      	lsls	r3, r3, #1
 8013e68:	4413      	add	r3, r2
 8013e6a:	00db      	lsls	r3, r3, #3
 8013e6c:	440b      	add	r3, r1
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7f7 ff53 	bl	800bd1c <pbuf_free>
    arp_table[i].q = NULL;
 8013e76:	490b      	ldr	r1, [pc, #44]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e78:	687a      	ldr	r2, [r7, #4]
 8013e7a:	4613      	mov	r3, r2
 8013e7c:	005b      	lsls	r3, r3, #1
 8013e7e:	4413      	add	r3, r2
 8013e80:	00db      	lsls	r3, r3, #3
 8013e82:	440b      	add	r3, r1
 8013e84:	2200      	movs	r2, #0
 8013e86:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013e88:	4906      	ldr	r1, [pc, #24]	; (8013ea4 <etharp_free_entry+0x60>)
 8013e8a:	687a      	ldr	r2, [r7, #4]
 8013e8c:	4613      	mov	r3, r2
 8013e8e:	005b      	lsls	r3, r3, #1
 8013e90:	4413      	add	r3, r2
 8013e92:	00db      	lsls	r3, r3, #3
 8013e94:	440b      	add	r3, r1
 8013e96:	3314      	adds	r3, #20
 8013e98:	2200      	movs	r2, #0
 8013e9a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013e9c:	bf00      	nop
 8013e9e:	3708      	adds	r7, #8
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}
 8013ea4:	2000dec8 	.word	0x2000dec8

08013ea8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013eae:	2300      	movs	r3, #0
 8013eb0:	607b      	str	r3, [r7, #4]
 8013eb2:	e096      	b.n	8013fe2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013eb4:	494f      	ldr	r1, [pc, #316]	; (8013ff4 <etharp_tmr+0x14c>)
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	4613      	mov	r3, r2
 8013eba:	005b      	lsls	r3, r3, #1
 8013ebc:	4413      	add	r3, r2
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	440b      	add	r3, r1
 8013ec2:	3314      	adds	r3, #20
 8013ec4:	781b      	ldrb	r3, [r3, #0]
 8013ec6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013ec8:	78fb      	ldrb	r3, [r7, #3]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	f000 8086 	beq.w	8013fdc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013ed0:	4948      	ldr	r1, [pc, #288]	; (8013ff4 <etharp_tmr+0x14c>)
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	005b      	lsls	r3, r3, #1
 8013ed8:	4413      	add	r3, r2
 8013eda:	00db      	lsls	r3, r3, #3
 8013edc:	440b      	add	r3, r1
 8013ede:	3312      	adds	r3, #18
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	b298      	uxth	r0, r3
 8013ee6:	4943      	ldr	r1, [pc, #268]	; (8013ff4 <etharp_tmr+0x14c>)
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	4613      	mov	r3, r2
 8013eec:	005b      	lsls	r3, r3, #1
 8013eee:	4413      	add	r3, r2
 8013ef0:	00db      	lsls	r3, r3, #3
 8013ef2:	440b      	add	r3, r1
 8013ef4:	3312      	adds	r3, #18
 8013ef6:	4602      	mov	r2, r0
 8013ef8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013efa:	493e      	ldr	r1, [pc, #248]	; (8013ff4 <etharp_tmr+0x14c>)
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	4613      	mov	r3, r2
 8013f00:	005b      	lsls	r3, r3, #1
 8013f02:	4413      	add	r3, r2
 8013f04:	00db      	lsls	r3, r3, #3
 8013f06:	440b      	add	r3, r1
 8013f08:	3312      	adds	r3, #18
 8013f0a:	881b      	ldrh	r3, [r3, #0]
 8013f0c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013f10:	d215      	bcs.n	8013f3e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f12:	4938      	ldr	r1, [pc, #224]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	4613      	mov	r3, r2
 8013f18:	005b      	lsls	r3, r3, #1
 8013f1a:	4413      	add	r3, r2
 8013f1c:	00db      	lsls	r3, r3, #3
 8013f1e:	440b      	add	r3, r1
 8013f20:	3314      	adds	r3, #20
 8013f22:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013f24:	2b01      	cmp	r3, #1
 8013f26:	d10e      	bne.n	8013f46 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013f28:	4932      	ldr	r1, [pc, #200]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f2a:	687a      	ldr	r2, [r7, #4]
 8013f2c:	4613      	mov	r3, r2
 8013f2e:	005b      	lsls	r3, r3, #1
 8013f30:	4413      	add	r3, r2
 8013f32:	00db      	lsls	r3, r3, #3
 8013f34:	440b      	add	r3, r1
 8013f36:	3312      	adds	r3, #18
 8013f38:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013f3a:	2b04      	cmp	r3, #4
 8013f3c:	d903      	bls.n	8013f46 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff ff80 	bl	8013e44 <etharp_free_entry>
 8013f44:	e04a      	b.n	8013fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013f46:	492b      	ldr	r1, [pc, #172]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	4613      	mov	r3, r2
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	4413      	add	r3, r2
 8013f50:	00db      	lsls	r3, r3, #3
 8013f52:	440b      	add	r3, r1
 8013f54:	3314      	adds	r3, #20
 8013f56:	781b      	ldrb	r3, [r3, #0]
 8013f58:	2b03      	cmp	r3, #3
 8013f5a:	d10a      	bne.n	8013f72 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013f5c:	4925      	ldr	r1, [pc, #148]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f5e:	687a      	ldr	r2, [r7, #4]
 8013f60:	4613      	mov	r3, r2
 8013f62:	005b      	lsls	r3, r3, #1
 8013f64:	4413      	add	r3, r2
 8013f66:	00db      	lsls	r3, r3, #3
 8013f68:	440b      	add	r3, r1
 8013f6a:	3314      	adds	r3, #20
 8013f6c:	2204      	movs	r2, #4
 8013f6e:	701a      	strb	r2, [r3, #0]
 8013f70:	e034      	b.n	8013fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013f72:	4920      	ldr	r1, [pc, #128]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f74:	687a      	ldr	r2, [r7, #4]
 8013f76:	4613      	mov	r3, r2
 8013f78:	005b      	lsls	r3, r3, #1
 8013f7a:	4413      	add	r3, r2
 8013f7c:	00db      	lsls	r3, r3, #3
 8013f7e:	440b      	add	r3, r1
 8013f80:	3314      	adds	r3, #20
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	2b04      	cmp	r3, #4
 8013f86:	d10a      	bne.n	8013f9e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013f88:	491a      	ldr	r1, [pc, #104]	; (8013ff4 <etharp_tmr+0x14c>)
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	4613      	mov	r3, r2
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	4413      	add	r3, r2
 8013f92:	00db      	lsls	r3, r3, #3
 8013f94:	440b      	add	r3, r1
 8013f96:	3314      	adds	r3, #20
 8013f98:	2202      	movs	r2, #2
 8013f9a:	701a      	strb	r2, [r3, #0]
 8013f9c:	e01e      	b.n	8013fdc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013f9e:	4915      	ldr	r1, [pc, #84]	; (8013ff4 <etharp_tmr+0x14c>)
 8013fa0:	687a      	ldr	r2, [r7, #4]
 8013fa2:	4613      	mov	r3, r2
 8013fa4:	005b      	lsls	r3, r3, #1
 8013fa6:	4413      	add	r3, r2
 8013fa8:	00db      	lsls	r3, r3, #3
 8013faa:	440b      	add	r3, r1
 8013fac:	3314      	adds	r3, #20
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b01      	cmp	r3, #1
 8013fb2:	d113      	bne.n	8013fdc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013fb4:	490f      	ldr	r1, [pc, #60]	; (8013ff4 <etharp_tmr+0x14c>)
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	4613      	mov	r3, r2
 8013fba:	005b      	lsls	r3, r3, #1
 8013fbc:	4413      	add	r3, r2
 8013fbe:	00db      	lsls	r3, r3, #3
 8013fc0:	440b      	add	r3, r1
 8013fc2:	3308      	adds	r3, #8
 8013fc4:	6818      	ldr	r0, [r3, #0]
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	4613      	mov	r3, r2
 8013fca:	005b      	lsls	r3, r3, #1
 8013fcc:	4413      	add	r3, r2
 8013fce:	00db      	lsls	r3, r3, #3
 8013fd0:	4a08      	ldr	r2, [pc, #32]	; (8013ff4 <etharp_tmr+0x14c>)
 8013fd2:	4413      	add	r3, r2
 8013fd4:	3304      	adds	r3, #4
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	f000 fe72 	bl	8014cc0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	3301      	adds	r3, #1
 8013fe0:	607b      	str	r3, [r7, #4]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2b09      	cmp	r3, #9
 8013fe6:	f77f af65 	ble.w	8013eb4 <etharp_tmr+0xc>
      }
    }
  }
}
 8013fea:	bf00      	nop
 8013fec:	bf00      	nop
 8013fee:	3708      	adds	r7, #8
 8013ff0:	46bd      	mov	sp, r7
 8013ff2:	bd80      	pop	{r7, pc}
 8013ff4:	2000dec8 	.word	0x2000dec8

08013ff8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	60f8      	str	r0, [r7, #12]
 8014000:	460b      	mov	r3, r1
 8014002:	607a      	str	r2, [r7, #4]
 8014004:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014006:	230a      	movs	r3, #10
 8014008:	84fb      	strh	r3, [r7, #38]	; 0x26
 801400a:	230a      	movs	r3, #10
 801400c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801400e:	230a      	movs	r3, #10
 8014010:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8014012:	2300      	movs	r3, #0
 8014014:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014016:	230a      	movs	r3, #10
 8014018:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801401a:	2300      	movs	r3, #0
 801401c:	83bb      	strh	r3, [r7, #28]
 801401e:	2300      	movs	r3, #0
 8014020:	837b      	strh	r3, [r7, #26]
 8014022:	2300      	movs	r3, #0
 8014024:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014026:	2300      	movs	r3, #0
 8014028:	843b      	strh	r3, [r7, #32]
 801402a:	e0ae      	b.n	801418a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801402c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014030:	49a6      	ldr	r1, [pc, #664]	; (80142cc <etharp_find_entry+0x2d4>)
 8014032:	4613      	mov	r3, r2
 8014034:	005b      	lsls	r3, r3, #1
 8014036:	4413      	add	r3, r2
 8014038:	00db      	lsls	r3, r3, #3
 801403a:	440b      	add	r3, r1
 801403c:	3314      	adds	r3, #20
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014042:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014046:	2b0a      	cmp	r3, #10
 8014048:	d105      	bne.n	8014056 <etharp_find_entry+0x5e>
 801404a:	7dfb      	ldrb	r3, [r7, #23]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d102      	bne.n	8014056 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014050:	8c3b      	ldrh	r3, [r7, #32]
 8014052:	847b      	strh	r3, [r7, #34]	; 0x22
 8014054:	e095      	b.n	8014182 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014056:	7dfb      	ldrb	r3, [r7, #23]
 8014058:	2b00      	cmp	r3, #0
 801405a:	f000 8092 	beq.w	8014182 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801405e:	7dfb      	ldrb	r3, [r7, #23]
 8014060:	2b01      	cmp	r3, #1
 8014062:	d009      	beq.n	8014078 <etharp_find_entry+0x80>
 8014064:	7dfb      	ldrb	r3, [r7, #23]
 8014066:	2b01      	cmp	r3, #1
 8014068:	d806      	bhi.n	8014078 <etharp_find_entry+0x80>
 801406a:	4b99      	ldr	r3, [pc, #612]	; (80142d0 <etharp_find_entry+0x2d8>)
 801406c:	f240 1223 	movw	r2, #291	; 0x123
 8014070:	4998      	ldr	r1, [pc, #608]	; (80142d4 <etharp_find_entry+0x2dc>)
 8014072:	4899      	ldr	r0, [pc, #612]	; (80142d8 <etharp_find_entry+0x2e0>)
 8014074:	f002 fbc0 	bl	80167f8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014078:	68fb      	ldr	r3, [r7, #12]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d020      	beq.n	80140c0 <etharp_find_entry+0xc8>
 801407e:	68fb      	ldr	r3, [r7, #12]
 8014080:	6819      	ldr	r1, [r3, #0]
 8014082:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014086:	4891      	ldr	r0, [pc, #580]	; (80142cc <etharp_find_entry+0x2d4>)
 8014088:	4613      	mov	r3, r2
 801408a:	005b      	lsls	r3, r3, #1
 801408c:	4413      	add	r3, r2
 801408e:	00db      	lsls	r3, r3, #3
 8014090:	4403      	add	r3, r0
 8014092:	3304      	adds	r3, #4
 8014094:	681b      	ldr	r3, [r3, #0]
 8014096:	4299      	cmp	r1, r3
 8014098:	d112      	bne.n	80140c0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00c      	beq.n	80140ba <etharp_find_entry+0xc2>
 80140a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140a4:	4989      	ldr	r1, [pc, #548]	; (80142cc <etharp_find_entry+0x2d4>)
 80140a6:	4613      	mov	r3, r2
 80140a8:	005b      	lsls	r3, r3, #1
 80140aa:	4413      	add	r3, r2
 80140ac:	00db      	lsls	r3, r3, #3
 80140ae:	440b      	add	r3, r1
 80140b0:	3308      	adds	r3, #8
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	429a      	cmp	r2, r3
 80140b8:	d102      	bne.n	80140c0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80140ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140be:	e100      	b.n	80142c2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80140c0:	7dfb      	ldrb	r3, [r7, #23]
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d140      	bne.n	8014148 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80140c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ca:	4980      	ldr	r1, [pc, #512]	; (80142cc <etharp_find_entry+0x2d4>)
 80140cc:	4613      	mov	r3, r2
 80140ce:	005b      	lsls	r3, r3, #1
 80140d0:	4413      	add	r3, r2
 80140d2:	00db      	lsls	r3, r3, #3
 80140d4:	440b      	add	r3, r1
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d01a      	beq.n	8014112 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80140dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140e0:	497a      	ldr	r1, [pc, #488]	; (80142cc <etharp_find_entry+0x2d4>)
 80140e2:	4613      	mov	r3, r2
 80140e4:	005b      	lsls	r3, r3, #1
 80140e6:	4413      	add	r3, r2
 80140e8:	00db      	lsls	r3, r3, #3
 80140ea:	440b      	add	r3, r1
 80140ec:	3312      	adds	r3, #18
 80140ee:	881b      	ldrh	r3, [r3, #0]
 80140f0:	8bba      	ldrh	r2, [r7, #28]
 80140f2:	429a      	cmp	r2, r3
 80140f4:	d845      	bhi.n	8014182 <etharp_find_entry+0x18a>
            old_queue = i;
 80140f6:	8c3b      	ldrh	r3, [r7, #32]
 80140f8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80140fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140fe:	4973      	ldr	r1, [pc, #460]	; (80142cc <etharp_find_entry+0x2d4>)
 8014100:	4613      	mov	r3, r2
 8014102:	005b      	lsls	r3, r3, #1
 8014104:	4413      	add	r3, r2
 8014106:	00db      	lsls	r3, r3, #3
 8014108:	440b      	add	r3, r1
 801410a:	3312      	adds	r3, #18
 801410c:	881b      	ldrh	r3, [r3, #0]
 801410e:	83bb      	strh	r3, [r7, #28]
 8014110:	e037      	b.n	8014182 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014116:	496d      	ldr	r1, [pc, #436]	; (80142cc <etharp_find_entry+0x2d4>)
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	3312      	adds	r3, #18
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	8b7a      	ldrh	r2, [r7, #26]
 8014128:	429a      	cmp	r2, r3
 801412a:	d82a      	bhi.n	8014182 <etharp_find_entry+0x18a>
            old_pending = i;
 801412c:	8c3b      	ldrh	r3, [r7, #32]
 801412e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014130:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014134:	4965      	ldr	r1, [pc, #404]	; (80142cc <etharp_find_entry+0x2d4>)
 8014136:	4613      	mov	r3, r2
 8014138:	005b      	lsls	r3, r3, #1
 801413a:	4413      	add	r3, r2
 801413c:	00db      	lsls	r3, r3, #3
 801413e:	440b      	add	r3, r1
 8014140:	3312      	adds	r3, #18
 8014142:	881b      	ldrh	r3, [r3, #0]
 8014144:	837b      	strh	r3, [r7, #26]
 8014146:	e01c      	b.n	8014182 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014148:	7dfb      	ldrb	r3, [r7, #23]
 801414a:	2b01      	cmp	r3, #1
 801414c:	d919      	bls.n	8014182 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801414e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014152:	495e      	ldr	r1, [pc, #376]	; (80142cc <etharp_find_entry+0x2d4>)
 8014154:	4613      	mov	r3, r2
 8014156:	005b      	lsls	r3, r3, #1
 8014158:	4413      	add	r3, r2
 801415a:	00db      	lsls	r3, r3, #3
 801415c:	440b      	add	r3, r1
 801415e:	3312      	adds	r3, #18
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	8b3a      	ldrh	r2, [r7, #24]
 8014164:	429a      	cmp	r2, r3
 8014166:	d80c      	bhi.n	8014182 <etharp_find_entry+0x18a>
            old_stable = i;
 8014168:	8c3b      	ldrh	r3, [r7, #32]
 801416a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801416c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014170:	4956      	ldr	r1, [pc, #344]	; (80142cc <etharp_find_entry+0x2d4>)
 8014172:	4613      	mov	r3, r2
 8014174:	005b      	lsls	r3, r3, #1
 8014176:	4413      	add	r3, r2
 8014178:	00db      	lsls	r3, r3, #3
 801417a:	440b      	add	r3, r1
 801417c:	3312      	adds	r3, #18
 801417e:	881b      	ldrh	r3, [r3, #0]
 8014180:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014182:	8c3b      	ldrh	r3, [r7, #32]
 8014184:	3301      	adds	r3, #1
 8014186:	b29b      	uxth	r3, r3
 8014188:	843b      	strh	r3, [r7, #32]
 801418a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801418e:	2b09      	cmp	r3, #9
 8014190:	f77f af4c 	ble.w	801402c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014194:	7afb      	ldrb	r3, [r7, #11]
 8014196:	f003 0302 	and.w	r3, r3, #2
 801419a:	2b00      	cmp	r3, #0
 801419c:	d108      	bne.n	80141b0 <etharp_find_entry+0x1b8>
 801419e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141a2:	2b0a      	cmp	r3, #10
 80141a4:	d107      	bne.n	80141b6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80141a6:	7afb      	ldrb	r3, [r7, #11]
 80141a8:	f003 0301 	and.w	r3, r3, #1
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d102      	bne.n	80141b6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80141b0:	f04f 33ff 	mov.w	r3, #4294967295
 80141b4:	e085      	b.n	80142c2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80141b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80141ba:	2b09      	cmp	r3, #9
 80141bc:	dc02      	bgt.n	80141c4 <etharp_find_entry+0x1cc>
    i = empty;
 80141be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80141c0:	843b      	strh	r3, [r7, #32]
 80141c2:	e039      	b.n	8014238 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80141c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80141c8:	2b09      	cmp	r3, #9
 80141ca:	dc14      	bgt.n	80141f6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80141cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80141ce:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80141d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80141d4:	493d      	ldr	r1, [pc, #244]	; (80142cc <etharp_find_entry+0x2d4>)
 80141d6:	4613      	mov	r3, r2
 80141d8:	005b      	lsls	r3, r3, #1
 80141da:	4413      	add	r3, r2
 80141dc:	00db      	lsls	r3, r3, #3
 80141de:	440b      	add	r3, r1
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d018      	beq.n	8014218 <etharp_find_entry+0x220>
 80141e6:	4b3a      	ldr	r3, [pc, #232]	; (80142d0 <etharp_find_entry+0x2d8>)
 80141e8:	f240 126d 	movw	r2, #365	; 0x16d
 80141ec:	493b      	ldr	r1, [pc, #236]	; (80142dc <etharp_find_entry+0x2e4>)
 80141ee:	483a      	ldr	r0, [pc, #232]	; (80142d8 <etharp_find_entry+0x2e0>)
 80141f0:	f002 fb02 	bl	80167f8 <iprintf>
 80141f4:	e010      	b.n	8014218 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80141f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80141fa:	2b09      	cmp	r3, #9
 80141fc:	dc02      	bgt.n	8014204 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80141fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014200:	843b      	strh	r3, [r7, #32]
 8014202:	e009      	b.n	8014218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014204:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014208:	2b09      	cmp	r3, #9
 801420a:	dc02      	bgt.n	8014212 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801420c:	8bfb      	ldrh	r3, [r7, #30]
 801420e:	843b      	strh	r3, [r7, #32]
 8014210:	e002      	b.n	8014218 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8014212:	f04f 33ff 	mov.w	r3, #4294967295
 8014216:	e054      	b.n	80142c2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014218:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801421c:	2b09      	cmp	r3, #9
 801421e:	dd06      	ble.n	801422e <etharp_find_entry+0x236>
 8014220:	4b2b      	ldr	r3, [pc, #172]	; (80142d0 <etharp_find_entry+0x2d8>)
 8014222:	f240 127f 	movw	r2, #383	; 0x17f
 8014226:	492e      	ldr	r1, [pc, #184]	; (80142e0 <etharp_find_entry+0x2e8>)
 8014228:	482b      	ldr	r0, [pc, #172]	; (80142d8 <etharp_find_entry+0x2e0>)
 801422a:	f002 fae5 	bl	80167f8 <iprintf>
    etharp_free_entry(i);
 801422e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014232:	4618      	mov	r0, r3
 8014234:	f7ff fe06 	bl	8013e44 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014238:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801423c:	2b09      	cmp	r3, #9
 801423e:	dd06      	ble.n	801424e <etharp_find_entry+0x256>
 8014240:	4b23      	ldr	r3, [pc, #140]	; (80142d0 <etharp_find_entry+0x2d8>)
 8014242:	f240 1283 	movw	r2, #387	; 0x183
 8014246:	4926      	ldr	r1, [pc, #152]	; (80142e0 <etharp_find_entry+0x2e8>)
 8014248:	4823      	ldr	r0, [pc, #140]	; (80142d8 <etharp_find_entry+0x2e0>)
 801424a:	f002 fad5 	bl	80167f8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801424e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014252:	491e      	ldr	r1, [pc, #120]	; (80142cc <etharp_find_entry+0x2d4>)
 8014254:	4613      	mov	r3, r2
 8014256:	005b      	lsls	r3, r3, #1
 8014258:	4413      	add	r3, r2
 801425a:	00db      	lsls	r3, r3, #3
 801425c:	440b      	add	r3, r1
 801425e:	3314      	adds	r3, #20
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d006      	beq.n	8014274 <etharp_find_entry+0x27c>
 8014266:	4b1a      	ldr	r3, [pc, #104]	; (80142d0 <etharp_find_entry+0x2d8>)
 8014268:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801426c:	491d      	ldr	r1, [pc, #116]	; (80142e4 <etharp_find_entry+0x2ec>)
 801426e:	481a      	ldr	r0, [pc, #104]	; (80142d8 <etharp_find_entry+0x2e0>)
 8014270:	f002 fac2 	bl	80167f8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00b      	beq.n	8014292 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801427a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	6819      	ldr	r1, [r3, #0]
 8014282:	4812      	ldr	r0, [pc, #72]	; (80142cc <etharp_find_entry+0x2d4>)
 8014284:	4613      	mov	r3, r2
 8014286:	005b      	lsls	r3, r3, #1
 8014288:	4413      	add	r3, r2
 801428a:	00db      	lsls	r3, r3, #3
 801428c:	4403      	add	r3, r0
 801428e:	3304      	adds	r3, #4
 8014290:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014292:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014296:	490d      	ldr	r1, [pc, #52]	; (80142cc <etharp_find_entry+0x2d4>)
 8014298:	4613      	mov	r3, r2
 801429a:	005b      	lsls	r3, r3, #1
 801429c:	4413      	add	r3, r2
 801429e:	00db      	lsls	r3, r3, #3
 80142a0:	440b      	add	r3, r1
 80142a2:	3312      	adds	r3, #18
 80142a4:	2200      	movs	r2, #0
 80142a6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80142a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80142ac:	4907      	ldr	r1, [pc, #28]	; (80142cc <etharp_find_entry+0x2d4>)
 80142ae:	4613      	mov	r3, r2
 80142b0:	005b      	lsls	r3, r3, #1
 80142b2:	4413      	add	r3, r2
 80142b4:	00db      	lsls	r3, r3, #3
 80142b6:	440b      	add	r3, r1
 80142b8:	3308      	adds	r3, #8
 80142ba:	687a      	ldr	r2, [r7, #4]
 80142bc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80142be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80142c2:	4618      	mov	r0, r3
 80142c4:	3728      	adds	r7, #40	; 0x28
 80142c6:	46bd      	mov	sp, r7
 80142c8:	bd80      	pop	{r7, pc}
 80142ca:	bf00      	nop
 80142cc:	2000dec8 	.word	0x2000dec8
 80142d0:	08019f08 	.word	0x08019f08
 80142d4:	08019f40 	.word	0x08019f40
 80142d8:	08019f80 	.word	0x08019f80
 80142dc:	08019fa8 	.word	0x08019fa8
 80142e0:	08019fc0 	.word	0x08019fc0
 80142e4:	08019fd4 	.word	0x08019fd4

080142e8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b088      	sub	sp, #32
 80142ec:	af02      	add	r7, sp, #8
 80142ee:	60f8      	str	r0, [r7, #12]
 80142f0:	60b9      	str	r1, [r7, #8]
 80142f2:	607a      	str	r2, [r7, #4]
 80142f4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142fc:	2b06      	cmp	r3, #6
 80142fe:	d006      	beq.n	801430e <etharp_update_arp_entry+0x26>
 8014300:	4b48      	ldr	r3, [pc, #288]	; (8014424 <etharp_update_arp_entry+0x13c>)
 8014302:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014306:	4948      	ldr	r1, [pc, #288]	; (8014428 <etharp_update_arp_entry+0x140>)
 8014308:	4848      	ldr	r0, [pc, #288]	; (801442c <etharp_update_arp_entry+0x144>)
 801430a:	f002 fa75 	bl	80167f8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d012      	beq.n	801433a <etharp_update_arp_entry+0x52>
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d00e      	beq.n	801433a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	68f9      	ldr	r1, [r7, #12]
 8014322:	4618      	mov	r0, r3
 8014324:	f001 f920 	bl	8015568 <ip4_addr_isbroadcast_u32>
 8014328:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801432a:	2b00      	cmp	r3, #0
 801432c:	d105      	bne.n	801433a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014336:	2be0      	cmp	r3, #224	; 0xe0
 8014338:	d102      	bne.n	8014340 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801433a:	f06f 030f 	mvn.w	r3, #15
 801433e:	e06c      	b.n	801441a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014340:	78fb      	ldrb	r3, [r7, #3]
 8014342:	68fa      	ldr	r2, [r7, #12]
 8014344:	4619      	mov	r1, r3
 8014346:	68b8      	ldr	r0, [r7, #8]
 8014348:	f7ff fe56 	bl	8013ff8 <etharp_find_entry>
 801434c:	4603      	mov	r3, r0
 801434e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014350:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014354:	2b00      	cmp	r3, #0
 8014356:	da02      	bge.n	801435e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014358:	8afb      	ldrh	r3, [r7, #22]
 801435a:	b25b      	sxtb	r3, r3
 801435c:	e05d      	b.n	801441a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801435e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014362:	4933      	ldr	r1, [pc, #204]	; (8014430 <etharp_update_arp_entry+0x148>)
 8014364:	4613      	mov	r3, r2
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	440b      	add	r3, r1
 801436e:	3314      	adds	r3, #20
 8014370:	2202      	movs	r2, #2
 8014372:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014374:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014378:	492d      	ldr	r1, [pc, #180]	; (8014430 <etharp_update_arp_entry+0x148>)
 801437a:	4613      	mov	r3, r2
 801437c:	005b      	lsls	r3, r3, #1
 801437e:	4413      	add	r3, r2
 8014380:	00db      	lsls	r3, r3, #3
 8014382:	440b      	add	r3, r1
 8014384:	3308      	adds	r3, #8
 8014386:	68fa      	ldr	r2, [r7, #12]
 8014388:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801438a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801438e:	4613      	mov	r3, r2
 8014390:	005b      	lsls	r3, r3, #1
 8014392:	4413      	add	r3, r2
 8014394:	00db      	lsls	r3, r3, #3
 8014396:	3308      	adds	r3, #8
 8014398:	4a25      	ldr	r2, [pc, #148]	; (8014430 <etharp_update_arp_entry+0x148>)
 801439a:	4413      	add	r3, r2
 801439c:	3304      	adds	r3, #4
 801439e:	2206      	movs	r2, #6
 80143a0:	6879      	ldr	r1, [r7, #4]
 80143a2:	4618      	mov	r0, r3
 80143a4:	f002 fb47 	bl	8016a36 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80143a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ac:	4920      	ldr	r1, [pc, #128]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	00db      	lsls	r3, r3, #3
 80143b6:	440b      	add	r3, r1
 80143b8:	3312      	adds	r3, #18
 80143ba:	2200      	movs	r2, #0
 80143bc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80143be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143c2:	491b      	ldr	r1, [pc, #108]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143c4:	4613      	mov	r3, r2
 80143c6:	005b      	lsls	r3, r3, #1
 80143c8:	4413      	add	r3, r2
 80143ca:	00db      	lsls	r3, r3, #3
 80143cc:	440b      	add	r3, r1
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d021      	beq.n	8014418 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80143d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143d8:	4915      	ldr	r1, [pc, #84]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143da:	4613      	mov	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	00db      	lsls	r3, r3, #3
 80143e2:	440b      	add	r3, r1
 80143e4:	681b      	ldr	r3, [r3, #0]
 80143e6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80143e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80143ec:	4910      	ldr	r1, [pc, #64]	; (8014430 <etharp_update_arp_entry+0x148>)
 80143ee:	4613      	mov	r3, r2
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	4413      	add	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	440b      	add	r3, r1
 80143f8:	2200      	movs	r2, #0
 80143fa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014402:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014406:	9300      	str	r3, [sp, #0]
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6939      	ldr	r1, [r7, #16]
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f001 ffb9 	bl	8016384 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014412:	6938      	ldr	r0, [r7, #16]
 8014414:	f7f7 fc82 	bl	800bd1c <pbuf_free>
  }
  return ERR_OK;
 8014418:	2300      	movs	r3, #0
}
 801441a:	4618      	mov	r0, r3
 801441c:	3718      	adds	r7, #24
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	08019f08 	.word	0x08019f08
 8014428:	0801a000 	.word	0x0801a000
 801442c:	08019f80 	.word	0x08019f80
 8014430:	2000dec8 	.word	0x2000dec8

08014434 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b084      	sub	sp, #16
 8014438:	af00      	add	r7, sp, #0
 801443a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801443c:	2300      	movs	r3, #0
 801443e:	60fb      	str	r3, [r7, #12]
 8014440:	e01e      	b.n	8014480 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014442:	4913      	ldr	r1, [pc, #76]	; (8014490 <etharp_cleanup_netif+0x5c>)
 8014444:	68fa      	ldr	r2, [r7, #12]
 8014446:	4613      	mov	r3, r2
 8014448:	005b      	lsls	r3, r3, #1
 801444a:	4413      	add	r3, r2
 801444c:	00db      	lsls	r3, r3, #3
 801444e:	440b      	add	r3, r1
 8014450:	3314      	adds	r3, #20
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014456:	7afb      	ldrb	r3, [r7, #11]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d00e      	beq.n	801447a <etharp_cleanup_netif+0x46>
 801445c:	490c      	ldr	r1, [pc, #48]	; (8014490 <etharp_cleanup_netif+0x5c>)
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	4613      	mov	r3, r2
 8014462:	005b      	lsls	r3, r3, #1
 8014464:	4413      	add	r3, r2
 8014466:	00db      	lsls	r3, r3, #3
 8014468:	440b      	add	r3, r1
 801446a:	3308      	adds	r3, #8
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	687a      	ldr	r2, [r7, #4]
 8014470:	429a      	cmp	r2, r3
 8014472:	d102      	bne.n	801447a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014474:	68f8      	ldr	r0, [r7, #12]
 8014476:	f7ff fce5 	bl	8013e44 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	3301      	adds	r3, #1
 801447e:	60fb      	str	r3, [r7, #12]
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2b09      	cmp	r3, #9
 8014484:	dddd      	ble.n	8014442 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014486:	bf00      	nop
 8014488:	bf00      	nop
 801448a:	3710      	adds	r7, #16
 801448c:	46bd      	mov	sp, r7
 801448e:	bd80      	pop	{r7, pc}
 8014490:	2000dec8 	.word	0x2000dec8

08014494 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014494:	b5b0      	push	{r4, r5, r7, lr}
 8014496:	b08a      	sub	sp, #40	; 0x28
 8014498:	af04      	add	r7, sp, #16
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801449e:	683b      	ldr	r3, [r7, #0]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d107      	bne.n	80144b4 <etharp_input+0x20>
 80144a4:	4b3f      	ldr	r3, [pc, #252]	; (80145a4 <etharp_input+0x110>)
 80144a6:	f240 228a 	movw	r2, #650	; 0x28a
 80144aa:	493f      	ldr	r1, [pc, #252]	; (80145a8 <etharp_input+0x114>)
 80144ac:	483f      	ldr	r0, [pc, #252]	; (80145ac <etharp_input+0x118>)
 80144ae:	f002 f9a3 	bl	80167f8 <iprintf>
 80144b2:	e074      	b.n	801459e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	685b      	ldr	r3, [r3, #4]
 80144b8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	881b      	ldrh	r3, [r3, #0]
 80144be:	b29b      	uxth	r3, r3
 80144c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80144c4:	d10c      	bne.n	80144e0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80144ca:	2b06      	cmp	r3, #6
 80144cc:	d108      	bne.n	80144e0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144ce:	693b      	ldr	r3, [r7, #16]
 80144d0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80144d2:	2b04      	cmp	r3, #4
 80144d4:	d104      	bne.n	80144e0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80144d6:	693b      	ldr	r3, [r7, #16]
 80144d8:	885b      	ldrh	r3, [r3, #2]
 80144da:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80144dc:	2b08      	cmp	r3, #8
 80144de:	d003      	beq.n	80144e8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7f7 fc1b 	bl	800bd1c <pbuf_free>
    return;
 80144e6:	e05a      	b.n	801459e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80144e8:	693b      	ldr	r3, [r7, #16]
 80144ea:	330e      	adds	r3, #14
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	3318      	adds	r3, #24
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	3304      	adds	r3, #4
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d102      	bne.n	8014508 <etharp_input+0x74>
    for_us = 0;
 8014502:	2300      	movs	r3, #0
 8014504:	75fb      	strb	r3, [r7, #23]
 8014506:	e009      	b.n	801451c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014508:	68ba      	ldr	r2, [r7, #8]
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	3304      	adds	r3, #4
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	429a      	cmp	r2, r3
 8014512:	bf0c      	ite	eq
 8014514:	2301      	moveq	r3, #1
 8014516:	2300      	movne	r3, #0
 8014518:	b2db      	uxtb	r3, r3
 801451a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801451c:	693b      	ldr	r3, [r7, #16]
 801451e:	f103 0208 	add.w	r2, r3, #8
 8014522:	7dfb      	ldrb	r3, [r7, #23]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d001      	beq.n	801452c <etharp_input+0x98>
 8014528:	2301      	movs	r3, #1
 801452a:	e000      	b.n	801452e <etharp_input+0x9a>
 801452c:	2302      	movs	r3, #2
 801452e:	f107 010c 	add.w	r1, r7, #12
 8014532:	6838      	ldr	r0, [r7, #0]
 8014534:	f7ff fed8 	bl	80142e8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014538:	693b      	ldr	r3, [r7, #16]
 801453a:	88db      	ldrh	r3, [r3, #6]
 801453c:	b29b      	uxth	r3, r3
 801453e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014542:	d003      	beq.n	801454c <etharp_input+0xb8>
 8014544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014548:	d01e      	beq.n	8014588 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801454a:	e025      	b.n	8014598 <etharp_input+0x104>
      if (for_us) {
 801454c:	7dfb      	ldrb	r3, [r7, #23]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d021      	beq.n	8014596 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014558:	693b      	ldr	r3, [r7, #16]
 801455a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014568:	693a      	ldr	r2, [r7, #16]
 801456a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801456c:	2102      	movs	r1, #2
 801456e:	9103      	str	r1, [sp, #12]
 8014570:	f107 010c 	add.w	r1, r7, #12
 8014574:	9102      	str	r1, [sp, #8]
 8014576:	9201      	str	r2, [sp, #4]
 8014578:	9300      	str	r3, [sp, #0]
 801457a:	462b      	mov	r3, r5
 801457c:	4622      	mov	r2, r4
 801457e:	4601      	mov	r1, r0
 8014580:	6838      	ldr	r0, [r7, #0]
 8014582:	f000 faef 	bl	8014b64 <etharp_raw>
      break;
 8014586:	e006      	b.n	8014596 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014588:	f107 030c 	add.w	r3, r7, #12
 801458c:	4619      	mov	r1, r3
 801458e:	6838      	ldr	r0, [r7, #0]
 8014590:	f7fe f9fc 	bl	801298c <dhcp_arp_reply>
      break;
 8014594:	e000      	b.n	8014598 <etharp_input+0x104>
      break;
 8014596:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f7f7 fbbf 	bl	800bd1c <pbuf_free>
}
 801459e:	3718      	adds	r7, #24
 80145a0:	46bd      	mov	sp, r7
 80145a2:	bdb0      	pop	{r4, r5, r7, pc}
 80145a4:	08019f08 	.word	0x08019f08
 80145a8:	0801a058 	.word	0x0801a058
 80145ac:	08019f80 	.word	0x08019f80

080145b0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80145b0:	b580      	push	{r7, lr}
 80145b2:	b086      	sub	sp, #24
 80145b4:	af02      	add	r7, sp, #8
 80145b6:	60f8      	str	r0, [r7, #12]
 80145b8:	60b9      	str	r1, [r7, #8]
 80145ba:	4613      	mov	r3, r2
 80145bc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80145be:	79fa      	ldrb	r2, [r7, #7]
 80145c0:	4944      	ldr	r1, [pc, #272]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 80145c2:	4613      	mov	r3, r2
 80145c4:	005b      	lsls	r3, r3, #1
 80145c6:	4413      	add	r3, r2
 80145c8:	00db      	lsls	r3, r3, #3
 80145ca:	440b      	add	r3, r1
 80145cc:	3314      	adds	r3, #20
 80145ce:	781b      	ldrb	r3, [r3, #0]
 80145d0:	2b01      	cmp	r3, #1
 80145d2:	d806      	bhi.n	80145e2 <etharp_output_to_arp_index+0x32>
 80145d4:	4b40      	ldr	r3, [pc, #256]	; (80146d8 <etharp_output_to_arp_index+0x128>)
 80145d6:	f240 22ee 	movw	r2, #750	; 0x2ee
 80145da:	4940      	ldr	r1, [pc, #256]	; (80146dc <etharp_output_to_arp_index+0x12c>)
 80145dc:	4840      	ldr	r0, [pc, #256]	; (80146e0 <etharp_output_to_arp_index+0x130>)
 80145de:	f002 f90b 	bl	80167f8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80145e2:	79fa      	ldrb	r2, [r7, #7]
 80145e4:	493b      	ldr	r1, [pc, #236]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 80145e6:	4613      	mov	r3, r2
 80145e8:	005b      	lsls	r3, r3, #1
 80145ea:	4413      	add	r3, r2
 80145ec:	00db      	lsls	r3, r3, #3
 80145ee:	440b      	add	r3, r1
 80145f0:	3314      	adds	r3, #20
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	2b02      	cmp	r3, #2
 80145f6:	d153      	bne.n	80146a0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80145f8:	79fa      	ldrb	r2, [r7, #7]
 80145fa:	4936      	ldr	r1, [pc, #216]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 80145fc:	4613      	mov	r3, r2
 80145fe:	005b      	lsls	r3, r3, #1
 8014600:	4413      	add	r3, r2
 8014602:	00db      	lsls	r3, r3, #3
 8014604:	440b      	add	r3, r1
 8014606:	3312      	adds	r3, #18
 8014608:	881b      	ldrh	r3, [r3, #0]
 801460a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801460e:	d919      	bls.n	8014644 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014610:	79fa      	ldrb	r2, [r7, #7]
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	4a2e      	ldr	r2, [pc, #184]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 801461c:	4413      	add	r3, r2
 801461e:	3304      	adds	r3, #4
 8014620:	4619      	mov	r1, r3
 8014622:	68f8      	ldr	r0, [r7, #12]
 8014624:	f000 fb4c 	bl	8014cc0 <etharp_request>
 8014628:	4603      	mov	r3, r0
 801462a:	2b00      	cmp	r3, #0
 801462c:	d138      	bne.n	80146a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801462e:	79fa      	ldrb	r2, [r7, #7]
 8014630:	4928      	ldr	r1, [pc, #160]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 8014632:	4613      	mov	r3, r2
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	440b      	add	r3, r1
 801463c:	3314      	adds	r3, #20
 801463e:	2203      	movs	r2, #3
 8014640:	701a      	strb	r2, [r3, #0]
 8014642:	e02d      	b.n	80146a0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014644:	79fa      	ldrb	r2, [r7, #7]
 8014646:	4923      	ldr	r1, [pc, #140]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 8014648:	4613      	mov	r3, r2
 801464a:	005b      	lsls	r3, r3, #1
 801464c:	4413      	add	r3, r2
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	440b      	add	r3, r1
 8014652:	3312      	adds	r3, #18
 8014654:	881b      	ldrh	r3, [r3, #0]
 8014656:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801465a:	d321      	bcc.n	80146a0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801465c:	79fa      	ldrb	r2, [r7, #7]
 801465e:	4613      	mov	r3, r2
 8014660:	005b      	lsls	r3, r3, #1
 8014662:	4413      	add	r3, r2
 8014664:	00db      	lsls	r3, r3, #3
 8014666:	4a1b      	ldr	r2, [pc, #108]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 8014668:	4413      	add	r3, r2
 801466a:	1d19      	adds	r1, r3, #4
 801466c:	79fa      	ldrb	r2, [r7, #7]
 801466e:	4613      	mov	r3, r2
 8014670:	005b      	lsls	r3, r3, #1
 8014672:	4413      	add	r3, r2
 8014674:	00db      	lsls	r3, r3, #3
 8014676:	3308      	adds	r3, #8
 8014678:	4a16      	ldr	r2, [pc, #88]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 801467a:	4413      	add	r3, r2
 801467c:	3304      	adds	r3, #4
 801467e:	461a      	mov	r2, r3
 8014680:	68f8      	ldr	r0, [r7, #12]
 8014682:	f000 fafb 	bl	8014c7c <etharp_request_dst>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d109      	bne.n	80146a0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801468c:	79fa      	ldrb	r2, [r7, #7]
 801468e:	4911      	ldr	r1, [pc, #68]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 8014690:	4613      	mov	r3, r2
 8014692:	005b      	lsls	r3, r3, #1
 8014694:	4413      	add	r3, r2
 8014696:	00db      	lsls	r3, r3, #3
 8014698:	440b      	add	r3, r1
 801469a:	3314      	adds	r3, #20
 801469c:	2203      	movs	r2, #3
 801469e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80146a6:	79fa      	ldrb	r2, [r7, #7]
 80146a8:	4613      	mov	r3, r2
 80146aa:	005b      	lsls	r3, r3, #1
 80146ac:	4413      	add	r3, r2
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	3308      	adds	r3, #8
 80146b2:	4a08      	ldr	r2, [pc, #32]	; (80146d4 <etharp_output_to_arp_index+0x124>)
 80146b4:	4413      	add	r3, r2
 80146b6:	3304      	adds	r3, #4
 80146b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80146bc:	9200      	str	r2, [sp, #0]
 80146be:	460a      	mov	r2, r1
 80146c0:	68b9      	ldr	r1, [r7, #8]
 80146c2:	68f8      	ldr	r0, [r7, #12]
 80146c4:	f001 fe5e 	bl	8016384 <ethernet_output>
 80146c8:	4603      	mov	r3, r0
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3710      	adds	r7, #16
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	2000dec8 	.word	0x2000dec8
 80146d8:	08019f08 	.word	0x08019f08
 80146dc:	0801a078 	.word	0x0801a078
 80146e0:	08019f80 	.word	0x08019f80

080146e4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80146e4:	b580      	push	{r7, lr}
 80146e6:	b08a      	sub	sp, #40	; 0x28
 80146e8:	af02      	add	r7, sp, #8
 80146ea:	60f8      	str	r0, [r7, #12]
 80146ec:	60b9      	str	r1, [r7, #8]
 80146ee:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d106      	bne.n	8014708 <etharp_output+0x24>
 80146fa:	4b73      	ldr	r3, [pc, #460]	; (80148c8 <etharp_output+0x1e4>)
 80146fc:	f240 321e 	movw	r2, #798	; 0x31e
 8014700:	4972      	ldr	r1, [pc, #456]	; (80148cc <etharp_output+0x1e8>)
 8014702:	4873      	ldr	r0, [pc, #460]	; (80148d0 <etharp_output+0x1ec>)
 8014704:	f002 f878 	bl	80167f8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d106      	bne.n	801471c <etharp_output+0x38>
 801470e:	4b6e      	ldr	r3, [pc, #440]	; (80148c8 <etharp_output+0x1e4>)
 8014710:	f240 321f 	movw	r2, #799	; 0x31f
 8014714:	496f      	ldr	r1, [pc, #444]	; (80148d4 <etharp_output+0x1f0>)
 8014716:	486e      	ldr	r0, [pc, #440]	; (80148d0 <etharp_output+0x1ec>)
 8014718:	f002 f86e 	bl	80167f8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2b00      	cmp	r3, #0
 8014720:	d106      	bne.n	8014730 <etharp_output+0x4c>
 8014722:	4b69      	ldr	r3, [pc, #420]	; (80148c8 <etharp_output+0x1e4>)
 8014724:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014728:	496b      	ldr	r1, [pc, #428]	; (80148d8 <etharp_output+0x1f4>)
 801472a:	4869      	ldr	r0, [pc, #420]	; (80148d0 <etharp_output+0x1ec>)
 801472c:	f002 f864 	bl	80167f8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	68f9      	ldr	r1, [r7, #12]
 8014736:	4618      	mov	r0, r3
 8014738:	f000 ff16 	bl	8015568 <ip4_addr_isbroadcast_u32>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d002      	beq.n	8014748 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014742:	4b66      	ldr	r3, [pc, #408]	; (80148dc <etharp_output+0x1f8>)
 8014744:	61fb      	str	r3, [r7, #28]
 8014746:	e0af      	b.n	80148a8 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014750:	2be0      	cmp	r3, #224	; 0xe0
 8014752:	d118      	bne.n	8014786 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014754:	2301      	movs	r3, #1
 8014756:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014758:	2300      	movs	r3, #0
 801475a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801475c:	235e      	movs	r3, #94	; 0x5e
 801475e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	3301      	adds	r3, #1
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801476a:	b2db      	uxtb	r3, r3
 801476c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	3302      	adds	r3, #2
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	3303      	adds	r3, #3
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801477e:	f107 0310 	add.w	r3, r7, #16
 8014782:	61fb      	str	r3, [r7, #28]
 8014784:	e090      	b.n	80148a8 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	681a      	ldr	r2, [r3, #0]
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	3304      	adds	r3, #4
 801478e:	681b      	ldr	r3, [r3, #0]
 8014790:	405a      	eors	r2, r3
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	3308      	adds	r3, #8
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	4013      	ands	r3, r2
 801479a:	2b00      	cmp	r3, #0
 801479c:	d012      	beq.n	80147c4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80147a4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80147a8:	4293      	cmp	r3, r2
 80147aa:	d00b      	beq.n	80147c4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	330c      	adds	r3, #12
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d003      	beq.n	80147be <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	330c      	adds	r3, #12
 80147ba:	61bb      	str	r3, [r7, #24]
 80147bc:	e002      	b.n	80147c4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80147be:	f06f 0303 	mvn.w	r3, #3
 80147c2:	e07d      	b.n	80148c0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147c4:	4b46      	ldr	r3, [pc, #280]	; (80148e0 <etharp_output+0x1fc>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	4619      	mov	r1, r3
 80147ca:	4a46      	ldr	r2, [pc, #280]	; (80148e4 <etharp_output+0x200>)
 80147cc:	460b      	mov	r3, r1
 80147ce:	005b      	lsls	r3, r3, #1
 80147d0:	440b      	add	r3, r1
 80147d2:	00db      	lsls	r3, r3, #3
 80147d4:	4413      	add	r3, r2
 80147d6:	3314      	adds	r3, #20
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	2b01      	cmp	r3, #1
 80147dc:	d925      	bls.n	801482a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80147de:	4b40      	ldr	r3, [pc, #256]	; (80148e0 <etharp_output+0x1fc>)
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	4619      	mov	r1, r3
 80147e4:	4a3f      	ldr	r2, [pc, #252]	; (80148e4 <etharp_output+0x200>)
 80147e6:	460b      	mov	r3, r1
 80147e8:	005b      	lsls	r3, r3, #1
 80147ea:	440b      	add	r3, r1
 80147ec:	00db      	lsls	r3, r3, #3
 80147ee:	4413      	add	r3, r2
 80147f0:	3308      	adds	r3, #8
 80147f2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80147f4:	68fa      	ldr	r2, [r7, #12]
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d117      	bne.n	801482a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	681a      	ldr	r2, [r3, #0]
 80147fe:	4b38      	ldr	r3, [pc, #224]	; (80148e0 <etharp_output+0x1fc>)
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	4618      	mov	r0, r3
 8014804:	4937      	ldr	r1, [pc, #220]	; (80148e4 <etharp_output+0x200>)
 8014806:	4603      	mov	r3, r0
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	4403      	add	r3, r0
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	440b      	add	r3, r1
 8014810:	3304      	adds	r3, #4
 8014812:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014814:	429a      	cmp	r2, r3
 8014816:	d108      	bne.n	801482a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014818:	4b31      	ldr	r3, [pc, #196]	; (80148e0 <etharp_output+0x1fc>)
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	461a      	mov	r2, r3
 801481e:	68b9      	ldr	r1, [r7, #8]
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f7ff fec5 	bl	80145b0 <etharp_output_to_arp_index>
 8014826:	4603      	mov	r3, r0
 8014828:	e04a      	b.n	80148c0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801482a:	2300      	movs	r3, #0
 801482c:	75fb      	strb	r3, [r7, #23]
 801482e:	e031      	b.n	8014894 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014830:	7dfa      	ldrb	r2, [r7, #23]
 8014832:	492c      	ldr	r1, [pc, #176]	; (80148e4 <etharp_output+0x200>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	3314      	adds	r3, #20
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	2b01      	cmp	r3, #1
 8014844:	d923      	bls.n	801488e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014846:	7dfa      	ldrb	r2, [r7, #23]
 8014848:	4926      	ldr	r1, [pc, #152]	; (80148e4 <etharp_output+0x200>)
 801484a:	4613      	mov	r3, r2
 801484c:	005b      	lsls	r3, r3, #1
 801484e:	4413      	add	r3, r2
 8014850:	00db      	lsls	r3, r3, #3
 8014852:	440b      	add	r3, r1
 8014854:	3308      	adds	r3, #8
 8014856:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014858:	68fa      	ldr	r2, [r7, #12]
 801485a:	429a      	cmp	r2, r3
 801485c:	d117      	bne.n	801488e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801485e:	69bb      	ldr	r3, [r7, #24]
 8014860:	6819      	ldr	r1, [r3, #0]
 8014862:	7dfa      	ldrb	r2, [r7, #23]
 8014864:	481f      	ldr	r0, [pc, #124]	; (80148e4 <etharp_output+0x200>)
 8014866:	4613      	mov	r3, r2
 8014868:	005b      	lsls	r3, r3, #1
 801486a:	4413      	add	r3, r2
 801486c:	00db      	lsls	r3, r3, #3
 801486e:	4403      	add	r3, r0
 8014870:	3304      	adds	r3, #4
 8014872:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014874:	4299      	cmp	r1, r3
 8014876:	d10a      	bne.n	801488e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014878:	4a19      	ldr	r2, [pc, #100]	; (80148e0 <etharp_output+0x1fc>)
 801487a:	7dfb      	ldrb	r3, [r7, #23]
 801487c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801487e:	7dfb      	ldrb	r3, [r7, #23]
 8014880:	461a      	mov	r2, r3
 8014882:	68b9      	ldr	r1, [r7, #8]
 8014884:	68f8      	ldr	r0, [r7, #12]
 8014886:	f7ff fe93 	bl	80145b0 <etharp_output_to_arp_index>
 801488a:	4603      	mov	r3, r0
 801488c:	e018      	b.n	80148c0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801488e:	7dfb      	ldrb	r3, [r7, #23]
 8014890:	3301      	adds	r3, #1
 8014892:	75fb      	strb	r3, [r7, #23]
 8014894:	7dfb      	ldrb	r3, [r7, #23]
 8014896:	2b09      	cmp	r3, #9
 8014898:	d9ca      	bls.n	8014830 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801489a:	68ba      	ldr	r2, [r7, #8]
 801489c:	69b9      	ldr	r1, [r7, #24]
 801489e:	68f8      	ldr	r0, [r7, #12]
 80148a0:	f000 f822 	bl	80148e8 <etharp_query>
 80148a4:	4603      	mov	r3, r0
 80148a6:	e00b      	b.n	80148c0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80148ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148b2:	9300      	str	r3, [sp, #0]
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	68b9      	ldr	r1, [r7, #8]
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	f001 fd63 	bl	8016384 <ethernet_output>
 80148be:	4603      	mov	r3, r0
}
 80148c0:	4618      	mov	r0, r3
 80148c2:	3720      	adds	r7, #32
 80148c4:	46bd      	mov	sp, r7
 80148c6:	bd80      	pop	{r7, pc}
 80148c8:	08019f08 	.word	0x08019f08
 80148cc:	0801a058 	.word	0x0801a058
 80148d0:	08019f80 	.word	0x08019f80
 80148d4:	0801a0a8 	.word	0x0801a0a8
 80148d8:	0801a048 	.word	0x0801a048
 80148dc:	0801a764 	.word	0x0801a764
 80148e0:	2000dfb8 	.word	0x2000dfb8
 80148e4:	2000dec8 	.word	0x2000dec8

080148e8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80148e8:	b580      	push	{r7, lr}
 80148ea:	b08c      	sub	sp, #48	; 0x30
 80148ec:	af02      	add	r7, sp, #8
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	332a      	adds	r3, #42	; 0x2a
 80148f8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80148fa:	23ff      	movs	r3, #255	; 0xff
 80148fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014900:	2300      	movs	r3, #0
 8014902:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	68f9      	ldr	r1, [r7, #12]
 801490a:	4618      	mov	r0, r3
 801490c:	f000 fe2c 	bl	8015568 <ip4_addr_isbroadcast_u32>
 8014910:	4603      	mov	r3, r0
 8014912:	2b00      	cmp	r3, #0
 8014914:	d10c      	bne.n	8014930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	681b      	ldr	r3, [r3, #0]
 801491a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801491e:	2be0      	cmp	r3, #224	; 0xe0
 8014920:	d006      	beq.n	8014930 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d003      	beq.n	8014930 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014928:	68bb      	ldr	r3, [r7, #8]
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d102      	bne.n	8014936 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014930:	f06f 030f 	mvn.w	r3, #15
 8014934:	e101      	b.n	8014b3a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014936:	68fa      	ldr	r2, [r7, #12]
 8014938:	2101      	movs	r1, #1
 801493a:	68b8      	ldr	r0, [r7, #8]
 801493c:	f7ff fb5c 	bl	8013ff8 <etharp_find_entry>
 8014940:	4603      	mov	r3, r0
 8014942:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014948:	2b00      	cmp	r3, #0
 801494a:	da02      	bge.n	8014952 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801494c:	8a7b      	ldrh	r3, [r7, #18]
 801494e:	b25b      	sxtb	r3, r3
 8014950:	e0f3      	b.n	8014b3a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014952:	8a7b      	ldrh	r3, [r7, #18]
 8014954:	2b7e      	cmp	r3, #126	; 0x7e
 8014956:	d906      	bls.n	8014966 <etharp_query+0x7e>
 8014958:	4b7a      	ldr	r3, [pc, #488]	; (8014b44 <etharp_query+0x25c>)
 801495a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801495e:	497a      	ldr	r1, [pc, #488]	; (8014b48 <etharp_query+0x260>)
 8014960:	487a      	ldr	r0, [pc, #488]	; (8014b4c <etharp_query+0x264>)
 8014962:	f001 ff49 	bl	80167f8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014966:	8a7b      	ldrh	r3, [r7, #18]
 8014968:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801496a:	7c7a      	ldrb	r2, [r7, #17]
 801496c:	4978      	ldr	r1, [pc, #480]	; (8014b50 <etharp_query+0x268>)
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	440b      	add	r3, r1
 8014978:	3314      	adds	r3, #20
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d115      	bne.n	80149ac <etharp_query+0xc4>
    is_new_entry = 1;
 8014980:	2301      	movs	r3, #1
 8014982:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014984:	7c7a      	ldrb	r2, [r7, #17]
 8014986:	4972      	ldr	r1, [pc, #456]	; (8014b50 <etharp_query+0x268>)
 8014988:	4613      	mov	r3, r2
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	4413      	add	r3, r2
 801498e:	00db      	lsls	r3, r3, #3
 8014990:	440b      	add	r3, r1
 8014992:	3314      	adds	r3, #20
 8014994:	2201      	movs	r2, #1
 8014996:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014998:	7c7a      	ldrb	r2, [r7, #17]
 801499a:	496d      	ldr	r1, [pc, #436]	; (8014b50 <etharp_query+0x268>)
 801499c:	4613      	mov	r3, r2
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	4413      	add	r3, r2
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	440b      	add	r3, r1
 80149a6:	3308      	adds	r3, #8
 80149a8:	68fa      	ldr	r2, [r7, #12]
 80149aa:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80149ac:	7c7a      	ldrb	r2, [r7, #17]
 80149ae:	4968      	ldr	r1, [pc, #416]	; (8014b50 <etharp_query+0x268>)
 80149b0:	4613      	mov	r3, r2
 80149b2:	005b      	lsls	r3, r3, #1
 80149b4:	4413      	add	r3, r2
 80149b6:	00db      	lsls	r3, r3, #3
 80149b8:	440b      	add	r3, r1
 80149ba:	3314      	adds	r3, #20
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	2b01      	cmp	r3, #1
 80149c0:	d011      	beq.n	80149e6 <etharp_query+0xfe>
 80149c2:	7c7a      	ldrb	r2, [r7, #17]
 80149c4:	4962      	ldr	r1, [pc, #392]	; (8014b50 <etharp_query+0x268>)
 80149c6:	4613      	mov	r3, r2
 80149c8:	005b      	lsls	r3, r3, #1
 80149ca:	4413      	add	r3, r2
 80149cc:	00db      	lsls	r3, r3, #3
 80149ce:	440b      	add	r3, r1
 80149d0:	3314      	adds	r3, #20
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d806      	bhi.n	80149e6 <etharp_query+0xfe>
 80149d8:	4b5a      	ldr	r3, [pc, #360]	; (8014b44 <etharp_query+0x25c>)
 80149da:	f240 32cd 	movw	r2, #973	; 0x3cd
 80149de:	495d      	ldr	r1, [pc, #372]	; (8014b54 <etharp_query+0x26c>)
 80149e0:	485a      	ldr	r0, [pc, #360]	; (8014b4c <etharp_query+0x264>)
 80149e2:	f001 ff09 	bl	80167f8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80149e6:	6a3b      	ldr	r3, [r7, #32]
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d102      	bne.n	80149f2 <etharp_query+0x10a>
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d10c      	bne.n	8014a0c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80149f2:	68b9      	ldr	r1, [r7, #8]
 80149f4:	68f8      	ldr	r0, [r7, #12]
 80149f6:	f000 f963 	bl	8014cc0 <etharp_request>
 80149fa:	4603      	mov	r3, r0
 80149fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d102      	bne.n	8014a0c <etharp_query+0x124>
      return result;
 8014a06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014a0a:	e096      	b.n	8014b3a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d106      	bne.n	8014a20 <etharp_query+0x138>
 8014a12:	4b4c      	ldr	r3, [pc, #304]	; (8014b44 <etharp_query+0x25c>)
 8014a14:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014a18:	494f      	ldr	r1, [pc, #316]	; (8014b58 <etharp_query+0x270>)
 8014a1a:	484c      	ldr	r0, [pc, #304]	; (8014b4c <etharp_query+0x264>)
 8014a1c:	f001 feec 	bl	80167f8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014a20:	7c7a      	ldrb	r2, [r7, #17]
 8014a22:	494b      	ldr	r1, [pc, #300]	; (8014b50 <etharp_query+0x268>)
 8014a24:	4613      	mov	r3, r2
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	4413      	add	r3, r2
 8014a2a:	00db      	lsls	r3, r3, #3
 8014a2c:	440b      	add	r3, r1
 8014a2e:	3314      	adds	r3, #20
 8014a30:	781b      	ldrb	r3, [r3, #0]
 8014a32:	2b01      	cmp	r3, #1
 8014a34:	d917      	bls.n	8014a66 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014a36:	4a49      	ldr	r2, [pc, #292]	; (8014b5c <etharp_query+0x274>)
 8014a38:	7c7b      	ldrb	r3, [r7, #17]
 8014a3a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014a3c:	7c7a      	ldrb	r2, [r7, #17]
 8014a3e:	4613      	mov	r3, r2
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	4413      	add	r3, r2
 8014a44:	00db      	lsls	r3, r3, #3
 8014a46:	3308      	adds	r3, #8
 8014a48:	4a41      	ldr	r2, [pc, #260]	; (8014b50 <etharp_query+0x268>)
 8014a4a:	4413      	add	r3, r2
 8014a4c:	3304      	adds	r3, #4
 8014a4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014a52:	9200      	str	r2, [sp, #0]
 8014a54:	697a      	ldr	r2, [r7, #20]
 8014a56:	6879      	ldr	r1, [r7, #4]
 8014a58:	68f8      	ldr	r0, [r7, #12]
 8014a5a:	f001 fc93 	bl	8016384 <ethernet_output>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a64:	e067      	b.n	8014b36 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014a66:	7c7a      	ldrb	r2, [r7, #17]
 8014a68:	4939      	ldr	r1, [pc, #228]	; (8014b50 <etharp_query+0x268>)
 8014a6a:	4613      	mov	r3, r2
 8014a6c:	005b      	lsls	r3, r3, #1
 8014a6e:	4413      	add	r3, r2
 8014a70:	00db      	lsls	r3, r3, #3
 8014a72:	440b      	add	r3, r1
 8014a74:	3314      	adds	r3, #20
 8014a76:	781b      	ldrb	r3, [r3, #0]
 8014a78:	2b01      	cmp	r3, #1
 8014a7a:	d15c      	bne.n	8014b36 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014a84:	e01c      	b.n	8014ac0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014a86:	69fb      	ldr	r3, [r7, #28]
 8014a88:	895a      	ldrh	r2, [r3, #10]
 8014a8a:	69fb      	ldr	r3, [r7, #28]
 8014a8c:	891b      	ldrh	r3, [r3, #8]
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d10a      	bne.n	8014aa8 <etharp_query+0x1c0>
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d006      	beq.n	8014aa8 <etharp_query+0x1c0>
 8014a9a:	4b2a      	ldr	r3, [pc, #168]	; (8014b44 <etharp_query+0x25c>)
 8014a9c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014aa0:	492f      	ldr	r1, [pc, #188]	; (8014b60 <etharp_query+0x278>)
 8014aa2:	482a      	ldr	r0, [pc, #168]	; (8014b4c <etharp_query+0x264>)
 8014aa4:	f001 fea8 	bl	80167f8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	7b1b      	ldrb	r3, [r3, #12]
 8014aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d002      	beq.n	8014aba <etharp_query+0x1d2>
        copy_needed = 1;
 8014ab4:	2301      	movs	r3, #1
 8014ab6:	61bb      	str	r3, [r7, #24]
        break;
 8014ab8:	e005      	b.n	8014ac6 <etharp_query+0x1de>
      }
      p = p->next;
 8014aba:	69fb      	ldr	r3, [r7, #28]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014ac0:	69fb      	ldr	r3, [r7, #28]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d1df      	bne.n	8014a86 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014ac6:	69bb      	ldr	r3, [r7, #24]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d007      	beq.n	8014adc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014acc:	687a      	ldr	r2, [r7, #4]
 8014ace:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014ad2:	200e      	movs	r0, #14
 8014ad4:	f7f7 fb9a 	bl	800c20c <pbuf_clone>
 8014ad8:	61f8      	str	r0, [r7, #28]
 8014ada:	e004      	b.n	8014ae6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014ae0:	69f8      	ldr	r0, [r7, #28]
 8014ae2:	f7f7 f9c1 	bl	800be68 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014ae6:	69fb      	ldr	r3, [r7, #28]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d021      	beq.n	8014b30 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014aec:	7c7a      	ldrb	r2, [r7, #17]
 8014aee:	4918      	ldr	r1, [pc, #96]	; (8014b50 <etharp_query+0x268>)
 8014af0:	4613      	mov	r3, r2
 8014af2:	005b      	lsls	r3, r3, #1
 8014af4:	4413      	add	r3, r2
 8014af6:	00db      	lsls	r3, r3, #3
 8014af8:	440b      	add	r3, r1
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00a      	beq.n	8014b16 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014b00:	7c7a      	ldrb	r2, [r7, #17]
 8014b02:	4913      	ldr	r1, [pc, #76]	; (8014b50 <etharp_query+0x268>)
 8014b04:	4613      	mov	r3, r2
 8014b06:	005b      	lsls	r3, r3, #1
 8014b08:	4413      	add	r3, r2
 8014b0a:	00db      	lsls	r3, r3, #3
 8014b0c:	440b      	add	r3, r1
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7f7 f903 	bl	800bd1c <pbuf_free>
      }
      arp_table[i].q = p;
 8014b16:	7c7a      	ldrb	r2, [r7, #17]
 8014b18:	490d      	ldr	r1, [pc, #52]	; (8014b50 <etharp_query+0x268>)
 8014b1a:	4613      	mov	r3, r2
 8014b1c:	005b      	lsls	r3, r3, #1
 8014b1e:	4413      	add	r3, r2
 8014b20:	00db      	lsls	r3, r3, #3
 8014b22:	440b      	add	r3, r1
 8014b24:	69fa      	ldr	r2, [r7, #28]
 8014b26:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014b28:	2300      	movs	r3, #0
 8014b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b2e:	e002      	b.n	8014b36 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014b30:	23ff      	movs	r3, #255	; 0xff
 8014b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8014b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3728      	adds	r7, #40	; 0x28
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
 8014b42:	bf00      	nop
 8014b44:	08019f08 	.word	0x08019f08
 8014b48:	0801a0b4 	.word	0x0801a0b4
 8014b4c:	08019f80 	.word	0x08019f80
 8014b50:	2000dec8 	.word	0x2000dec8
 8014b54:	0801a0c4 	.word	0x0801a0c4
 8014b58:	0801a0a8 	.word	0x0801a0a8
 8014b5c:	2000dfb8 	.word	0x2000dfb8
 8014b60:	0801a0ec 	.word	0x0801a0ec

08014b64 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b08a      	sub	sp, #40	; 0x28
 8014b68:	af02      	add	r7, sp, #8
 8014b6a:	60f8      	str	r0, [r7, #12]
 8014b6c:	60b9      	str	r1, [r7, #8]
 8014b6e:	607a      	str	r2, [r7, #4]
 8014b70:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014b72:	2300      	movs	r3, #0
 8014b74:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d106      	bne.n	8014b8a <etharp_raw+0x26>
 8014b7c:	4b3a      	ldr	r3, [pc, #232]	; (8014c68 <etharp_raw+0x104>)
 8014b7e:	f240 4257 	movw	r2, #1111	; 0x457
 8014b82:	493a      	ldr	r1, [pc, #232]	; (8014c6c <etharp_raw+0x108>)
 8014b84:	483a      	ldr	r0, [pc, #232]	; (8014c70 <etharp_raw+0x10c>)
 8014b86:	f001 fe37 	bl	80167f8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014b8a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014b8e:	211c      	movs	r1, #28
 8014b90:	200e      	movs	r0, #14
 8014b92:	f7f6 fddf 	bl	800b754 <pbuf_alloc>
 8014b96:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014b98:	69bb      	ldr	r3, [r7, #24]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d102      	bne.n	8014ba4 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba2:	e05d      	b.n	8014c60 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	895b      	ldrh	r3, [r3, #10]
 8014ba8:	2b1b      	cmp	r3, #27
 8014baa:	d806      	bhi.n	8014bba <etharp_raw+0x56>
 8014bac:	4b2e      	ldr	r3, [pc, #184]	; (8014c68 <etharp_raw+0x104>)
 8014bae:	f240 4262 	movw	r2, #1122	; 0x462
 8014bb2:	4930      	ldr	r1, [pc, #192]	; (8014c74 <etharp_raw+0x110>)
 8014bb4:	482e      	ldr	r0, [pc, #184]	; (8014c70 <etharp_raw+0x10c>)
 8014bb6:	f001 fe1f 	bl	80167f8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014bba:	69bb      	ldr	r3, [r7, #24]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7f5 fd14 	bl	800a5f0 <lwip_htons>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	461a      	mov	r2, r3
 8014bcc:	697b      	ldr	r3, [r7, #20]
 8014bce:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014bd6:	2b06      	cmp	r3, #6
 8014bd8:	d006      	beq.n	8014be8 <etharp_raw+0x84>
 8014bda:	4b23      	ldr	r3, [pc, #140]	; (8014c68 <etharp_raw+0x104>)
 8014bdc:	f240 4269 	movw	r2, #1129	; 0x469
 8014be0:	4925      	ldr	r1, [pc, #148]	; (8014c78 <etharp_raw+0x114>)
 8014be2:	4823      	ldr	r0, [pc, #140]	; (8014c70 <etharp_raw+0x10c>)
 8014be4:	f001 fe08 	bl	80167f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	3308      	adds	r3, #8
 8014bec:	2206      	movs	r2, #6
 8014bee:	6839      	ldr	r1, [r7, #0]
 8014bf0:	4618      	mov	r0, r3
 8014bf2:	f001 ff20 	bl	8016a36 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014bf6:	697b      	ldr	r3, [r7, #20]
 8014bf8:	3312      	adds	r3, #18
 8014bfa:	2206      	movs	r2, #6
 8014bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bfe:	4618      	mov	r0, r3
 8014c00:	f001 ff19 	bl	8016a36 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014c04:	697b      	ldr	r3, [r7, #20]
 8014c06:	330e      	adds	r3, #14
 8014c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c0a:	6812      	ldr	r2, [r2, #0]
 8014c0c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	3318      	adds	r3, #24
 8014c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c14:	6812      	ldr	r2, [r2, #0]
 8014c16:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	701a      	strb	r2, [r3, #0]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	f042 0201 	orr.w	r2, r2, #1
 8014c24:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	2200      	movs	r2, #0
 8014c2a:	f042 0208 	orr.w	r2, r2, #8
 8014c2e:	709a      	strb	r2, [r3, #2]
 8014c30:	2200      	movs	r2, #0
 8014c32:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2206      	movs	r2, #6
 8014c38:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	2204      	movs	r2, #4
 8014c3e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014c40:	f640 0306 	movw	r3, #2054	; 0x806
 8014c44:	9300      	str	r3, [sp, #0]
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	68ba      	ldr	r2, [r7, #8]
 8014c4a:	69b9      	ldr	r1, [r7, #24]
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f001 fb99 	bl	8016384 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014c52:	69b8      	ldr	r0, [r7, #24]
 8014c54:	f7f7 f862 	bl	800bd1c <pbuf_free>
  p = NULL;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014c5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3720      	adds	r7, #32
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}
 8014c68:	08019f08 	.word	0x08019f08
 8014c6c:	0801a058 	.word	0x0801a058
 8014c70:	08019f80 	.word	0x08019f80
 8014c74:	0801a108 	.word	0x0801a108
 8014c78:	0801a13c 	.word	0x0801a13c

08014c7c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014c7c:	b580      	push	{r7, lr}
 8014c7e:	b088      	sub	sp, #32
 8014c80:	af04      	add	r7, sp, #16
 8014c82:	60f8      	str	r0, [r7, #12]
 8014c84:	60b9      	str	r1, [r7, #8]
 8014c86:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c88:	68fb      	ldr	r3, [r7, #12]
 8014c8a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014c98:	2201      	movs	r2, #1
 8014c9a:	9203      	str	r2, [sp, #12]
 8014c9c:	68ba      	ldr	r2, [r7, #8]
 8014c9e:	9202      	str	r2, [sp, #8]
 8014ca0:	4a06      	ldr	r2, [pc, #24]	; (8014cbc <etharp_request_dst+0x40>)
 8014ca2:	9201      	str	r2, [sp, #4]
 8014ca4:	9300      	str	r3, [sp, #0]
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	687a      	ldr	r2, [r7, #4]
 8014caa:	68f8      	ldr	r0, [r7, #12]
 8014cac:	f7ff ff5a 	bl	8014b64 <etharp_raw>
 8014cb0:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3710      	adds	r7, #16
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	0801a76c 	.word	0x0801a76c

08014cc0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b082      	sub	sp, #8
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
 8014cc8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014cca:	4a05      	ldr	r2, [pc, #20]	; (8014ce0 <etharp_request+0x20>)
 8014ccc:	6839      	ldr	r1, [r7, #0]
 8014cce:	6878      	ldr	r0, [r7, #4]
 8014cd0:	f7ff ffd4 	bl	8014c7c <etharp_request_dst>
 8014cd4:	4603      	mov	r3, r0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3708      	adds	r7, #8
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	0801a764 	.word	0x0801a764

08014ce4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014ce4:	b580      	push	{r7, lr}
 8014ce6:	b08e      	sub	sp, #56	; 0x38
 8014ce8:	af04      	add	r7, sp, #16
 8014cea:	6078      	str	r0, [r7, #4]
 8014cec:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014cee:	4b79      	ldr	r3, [pc, #484]	; (8014ed4 <icmp_input+0x1f0>)
 8014cf0:	689b      	ldr	r3, [r3, #8]
 8014cf2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cf6:	781b      	ldrb	r3, [r3, #0]
 8014cf8:	f003 030f 	and.w	r3, r3, #15
 8014cfc:	b2db      	uxtb	r3, r3
 8014cfe:	009b      	lsls	r3, r3, #2
 8014d00:	b2db      	uxtb	r3, r3
 8014d02:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d06:	2b13      	cmp	r3, #19
 8014d08:	f240 80cd 	bls.w	8014ea6 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	895b      	ldrh	r3, [r3, #10]
 8014d10:	2b03      	cmp	r3, #3
 8014d12:	f240 80ca 	bls.w	8014eaa <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014d20:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 80b7 	beq.w	8014e98 <icmp_input+0x1b4>
 8014d2a:	2b08      	cmp	r3, #8
 8014d2c:	f040 80b7 	bne.w	8014e9e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014d30:	4b69      	ldr	r3, [pc, #420]	; (8014ed8 <icmp_input+0x1f4>)
 8014d32:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014d34:	4b67      	ldr	r3, [pc, #412]	; (8014ed4 <icmp_input+0x1f0>)
 8014d36:	695b      	ldr	r3, [r3, #20]
 8014d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d3c:	2be0      	cmp	r3, #224	; 0xe0
 8014d3e:	f000 80bb 	beq.w	8014eb8 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014d42:	4b64      	ldr	r3, [pc, #400]	; (8014ed4 <icmp_input+0x1f0>)
 8014d44:	695b      	ldr	r3, [r3, #20]
 8014d46:	4a63      	ldr	r2, [pc, #396]	; (8014ed4 <icmp_input+0x1f0>)
 8014d48:	6812      	ldr	r2, [r2, #0]
 8014d4a:	4611      	mov	r1, r2
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f000 fc0b 	bl	8015568 <ip4_addr_isbroadcast_u32>
 8014d52:	4603      	mov	r3, r0
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	f040 80b1 	bne.w	8014ebc <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	891b      	ldrh	r3, [r3, #8]
 8014d5e:	2b07      	cmp	r3, #7
 8014d60:	f240 80a5 	bls.w	8014eae <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d66:	330e      	adds	r3, #14
 8014d68:	4619      	mov	r1, r3
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f7f6 ff40 	bl	800bbf0 <pbuf_add_header>
 8014d70:	4603      	mov	r3, r0
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d04b      	beq.n	8014e0e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	891a      	ldrh	r2, [r3, #8]
 8014d7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014d7c:	4413      	add	r3, r2
 8014d7e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	891b      	ldrh	r3, [r3, #8]
 8014d84:	8b7a      	ldrh	r2, [r7, #26]
 8014d86:	429a      	cmp	r2, r3
 8014d88:	f0c0 809a 	bcc.w	8014ec0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014d8c:	8b7b      	ldrh	r3, [r7, #26]
 8014d8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014d92:	4619      	mov	r1, r3
 8014d94:	200e      	movs	r0, #14
 8014d96:	f7f6 fcdd 	bl	800b754 <pbuf_alloc>
 8014d9a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	f000 8090 	beq.w	8014ec4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	895b      	ldrh	r3, [r3, #10]
 8014da8:	461a      	mov	r2, r3
 8014daa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dac:	3308      	adds	r3, #8
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d203      	bcs.n	8014dba <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014db2:	6978      	ldr	r0, [r7, #20]
 8014db4:	f7f6 ffb2 	bl	800bd1c <pbuf_free>
          goto icmperr;
 8014db8:	e085      	b.n	8014ec6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	685b      	ldr	r3, [r3, #4]
 8014dbe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f001 fe37 	bl	8016a36 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014dca:	4619      	mov	r1, r3
 8014dcc:	6978      	ldr	r0, [r7, #20]
 8014dce:	f7f6 ff1f 	bl	800bc10 <pbuf_remove_header>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d009      	beq.n	8014dec <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014dd8:	4b40      	ldr	r3, [pc, #256]	; (8014edc <icmp_input+0x1f8>)
 8014dda:	22b6      	movs	r2, #182	; 0xb6
 8014ddc:	4940      	ldr	r1, [pc, #256]	; (8014ee0 <icmp_input+0x1fc>)
 8014dde:	4841      	ldr	r0, [pc, #260]	; (8014ee4 <icmp_input+0x200>)
 8014de0:	f001 fd0a 	bl	80167f8 <iprintf>
          pbuf_free(r);
 8014de4:	6978      	ldr	r0, [r7, #20]
 8014de6:	f7f6 ff99 	bl	800bd1c <pbuf_free>
          goto icmperr;
 8014dea:	e06c      	b.n	8014ec6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014dec:	6879      	ldr	r1, [r7, #4]
 8014dee:	6978      	ldr	r0, [r7, #20]
 8014df0:	f7f7 f8c8 	bl	800bf84 <pbuf_copy>
 8014df4:	4603      	mov	r3, r0
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d003      	beq.n	8014e02 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014dfa:	6978      	ldr	r0, [r7, #20]
 8014dfc:	f7f6 ff8e 	bl	800bd1c <pbuf_free>
          goto icmperr;
 8014e00:	e061      	b.n	8014ec6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014e02:	6878      	ldr	r0, [r7, #4]
 8014e04:	f7f6 ff8a 	bl	800bd1c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	607b      	str	r3, [r7, #4]
 8014e0c:	e00f      	b.n	8014e2e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014e0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e10:	330e      	adds	r3, #14
 8014e12:	4619      	mov	r1, r3
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	f7f6 fefb 	bl	800bc10 <pbuf_remove_header>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d006      	beq.n	8014e2e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014e20:	4b2e      	ldr	r3, [pc, #184]	; (8014edc <icmp_input+0x1f8>)
 8014e22:	22c7      	movs	r2, #199	; 0xc7
 8014e24:	4930      	ldr	r1, [pc, #192]	; (8014ee8 <icmp_input+0x204>)
 8014e26:	482f      	ldr	r0, [pc, #188]	; (8014ee4 <icmp_input+0x200>)
 8014e28:	f001 fce6 	bl	80167f8 <iprintf>
          goto icmperr;
 8014e2c:	e04b      	b.n	8014ec6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	685b      	ldr	r3, [r3, #4]
 8014e32:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014e34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014e36:	4619      	mov	r1, r3
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7f6 fed9 	bl	800bbf0 <pbuf_add_header>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d12b      	bne.n	8014e9c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014e52:	4b20      	ldr	r3, [pc, #128]	; (8014ed4 <icmp_input+0x1f0>)
 8014e54:	691a      	ldr	r2, [r3, #16]
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014e5a:	693b      	ldr	r3, [r7, #16]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014e60:	693b      	ldr	r3, [r7, #16]
 8014e62:	2200      	movs	r2, #0
 8014e64:	709a      	strb	r2, [r3, #2]
 8014e66:	2200      	movs	r2, #0
 8014e68:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	22ff      	movs	r2, #255	; 0xff
 8014e6e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	2200      	movs	r2, #0
 8014e74:	729a      	strb	r2, [r3, #10]
 8014e76:	2200      	movs	r2, #0
 8014e78:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	9302      	str	r3, [sp, #8]
 8014e7e:	2301      	movs	r3, #1
 8014e80:	9301      	str	r3, [sp, #4]
 8014e82:	2300      	movs	r3, #0
 8014e84:	9300      	str	r3, [sp, #0]
 8014e86:	23ff      	movs	r3, #255	; 0xff
 8014e88:	2200      	movs	r2, #0
 8014e8a:	69f9      	ldr	r1, [r7, #28]
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f000 fa93 	bl	80153b8 <ip4_output_if>
 8014e92:	4603      	mov	r3, r0
 8014e94:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014e96:	e001      	b.n	8014e9c <icmp_input+0x1b8>
      break;
 8014e98:	bf00      	nop
 8014e9a:	e000      	b.n	8014e9e <icmp_input+0x1ba>
      break;
 8014e9c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014e9e:	6878      	ldr	r0, [r7, #4]
 8014ea0:	f7f6 ff3c 	bl	800bd1c <pbuf_free>
  return;
 8014ea4:	e013      	b.n	8014ece <icmp_input+0x1ea>
    goto lenerr;
 8014ea6:	bf00      	nop
 8014ea8:	e002      	b.n	8014eb0 <icmp_input+0x1cc>
    goto lenerr;
 8014eaa:	bf00      	nop
 8014eac:	e000      	b.n	8014eb0 <icmp_input+0x1cc>
        goto lenerr;
 8014eae:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f7f6 ff33 	bl	800bd1c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014eb6:	e00a      	b.n	8014ece <icmp_input+0x1ea>
        goto icmperr;
 8014eb8:	bf00      	nop
 8014eba:	e004      	b.n	8014ec6 <icmp_input+0x1e2>
        goto icmperr;
 8014ebc:	bf00      	nop
 8014ebe:	e002      	b.n	8014ec6 <icmp_input+0x1e2>
          goto icmperr;
 8014ec0:	bf00      	nop
 8014ec2:	e000      	b.n	8014ec6 <icmp_input+0x1e2>
          goto icmperr;
 8014ec4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f7f6 ff28 	bl	800bd1c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014ecc:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014ece:	3728      	adds	r7, #40	; 0x28
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	2000a6c0 	.word	0x2000a6c0
 8014ed8:	2000a6d4 	.word	0x2000a6d4
 8014edc:	0801a180 	.word	0x0801a180
 8014ee0:	0801a1b8 	.word	0x0801a1b8
 8014ee4:	0801a1f0 	.word	0x0801a1f0
 8014ee8:	0801a218 	.word	0x0801a218

08014eec <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b082      	sub	sp, #8
 8014ef0:	af00      	add	r7, sp, #0
 8014ef2:	6078      	str	r0, [r7, #4]
 8014ef4:	460b      	mov	r3, r1
 8014ef6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014ef8:	78fb      	ldrb	r3, [r7, #3]
 8014efa:	461a      	mov	r2, r3
 8014efc:	2103      	movs	r1, #3
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f000 f814 	bl	8014f2c <icmp_send_response>
}
 8014f04:	bf00      	nop
 8014f06:	3708      	adds	r7, #8
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	460b      	mov	r3, r1
 8014f16:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014f18:	78fb      	ldrb	r3, [r7, #3]
 8014f1a:	461a      	mov	r2, r3
 8014f1c:	210b      	movs	r1, #11
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f000 f804 	bl	8014f2c <icmp_send_response>
}
 8014f24:	bf00      	nop
 8014f26:	3708      	adds	r7, #8
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	bd80      	pop	{r7, pc}

08014f2c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014f2c:	b580      	push	{r7, lr}
 8014f2e:	b08c      	sub	sp, #48	; 0x30
 8014f30:	af04      	add	r7, sp, #16
 8014f32:	6078      	str	r0, [r7, #4]
 8014f34:	460b      	mov	r3, r1
 8014f36:	70fb      	strb	r3, [r7, #3]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014f3c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014f40:	2124      	movs	r1, #36	; 0x24
 8014f42:	2022      	movs	r0, #34	; 0x22
 8014f44:	f7f6 fc06 	bl	800b754 <pbuf_alloc>
 8014f48:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014f4a:	69fb      	ldr	r3, [r7, #28]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d04c      	beq.n	8014fea <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014f50:	69fb      	ldr	r3, [r7, #28]
 8014f52:	895b      	ldrh	r3, [r3, #10]
 8014f54:	2b23      	cmp	r3, #35	; 0x23
 8014f56:	d806      	bhi.n	8014f66 <icmp_send_response+0x3a>
 8014f58:	4b26      	ldr	r3, [pc, #152]	; (8014ff4 <icmp_send_response+0xc8>)
 8014f5a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014f5e:	4926      	ldr	r1, [pc, #152]	; (8014ff8 <icmp_send_response+0xcc>)
 8014f60:	4826      	ldr	r0, [pc, #152]	; (8014ffc <icmp_send_response+0xd0>)
 8014f62:	f001 fc49 	bl	80167f8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014f6c:	69fb      	ldr	r3, [r7, #28]
 8014f6e:	685b      	ldr	r3, [r3, #4]
 8014f70:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014f72:	697b      	ldr	r3, [r7, #20]
 8014f74:	78fa      	ldrb	r2, [r7, #3]
 8014f76:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	78ba      	ldrb	r2, [r7, #2]
 8014f7c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014f7e:	697b      	ldr	r3, [r7, #20]
 8014f80:	2200      	movs	r2, #0
 8014f82:	711a      	strb	r2, [r3, #4]
 8014f84:	2200      	movs	r2, #0
 8014f86:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	719a      	strb	r2, [r3, #6]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	f103 0008 	add.w	r0, r3, #8
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	685b      	ldr	r3, [r3, #4]
 8014f9e:	221c      	movs	r2, #28
 8014fa0:	4619      	mov	r1, r3
 8014fa2:	f001 fd48 	bl	8016a36 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014fa6:	69bb      	ldr	r3, [r7, #24]
 8014fa8:	68db      	ldr	r3, [r3, #12]
 8014faa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014fac:	f107 030c 	add.w	r3, r7, #12
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f000 f825 	bl	8015000 <ip4_route>
 8014fb6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d011      	beq.n	8014fe2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014fbe:	697b      	ldr	r3, [r7, #20]
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	709a      	strb	r2, [r3, #2]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014fc8:	f107 020c 	add.w	r2, r7, #12
 8014fcc:	693b      	ldr	r3, [r7, #16]
 8014fce:	9302      	str	r3, [sp, #8]
 8014fd0:	2301      	movs	r3, #1
 8014fd2:	9301      	str	r3, [sp, #4]
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	9300      	str	r3, [sp, #0]
 8014fd8:	23ff      	movs	r3, #255	; 0xff
 8014fda:	2100      	movs	r1, #0
 8014fdc:	69f8      	ldr	r0, [r7, #28]
 8014fde:	f000 f9eb 	bl	80153b8 <ip4_output_if>
  }
  pbuf_free(q);
 8014fe2:	69f8      	ldr	r0, [r7, #28]
 8014fe4:	f7f6 fe9a 	bl	800bd1c <pbuf_free>
 8014fe8:	e000      	b.n	8014fec <icmp_send_response+0xc0>
    return;
 8014fea:	bf00      	nop
}
 8014fec:	3720      	adds	r7, #32
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	0801a180 	.word	0x0801a180
 8014ff8:	0801a24c 	.word	0x0801a24c
 8014ffc:	0801a1f0 	.word	0x0801a1f0

08015000 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015000:	b480      	push	{r7}
 8015002:	b085      	sub	sp, #20
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015008:	4b33      	ldr	r3, [pc, #204]	; (80150d8 <ip4_route+0xd8>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	60fb      	str	r3, [r7, #12]
 801500e:	e036      	b.n	801507e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015016:	f003 0301 	and.w	r3, r3, #1
 801501a:	b2db      	uxtb	r3, r3
 801501c:	2b00      	cmp	r3, #0
 801501e:	d02b      	beq.n	8015078 <ip4_route+0x78>
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015026:	089b      	lsrs	r3, r3, #2
 8015028:	f003 0301 	and.w	r3, r3, #1
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2b00      	cmp	r3, #0
 8015030:	d022      	beq.n	8015078 <ip4_route+0x78>
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	3304      	adds	r3, #4
 8015036:	681b      	ldr	r3, [r3, #0]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d01d      	beq.n	8015078 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	681a      	ldr	r2, [r3, #0]
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	3304      	adds	r3, #4
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	405a      	eors	r2, r3
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	3308      	adds	r3, #8
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	4013      	ands	r3, r2
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	e038      	b.n	80150ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801505e:	f003 0302 	and.w	r3, r3, #2
 8015062:	2b00      	cmp	r3, #0
 8015064:	d108      	bne.n	8015078 <ip4_route+0x78>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	681a      	ldr	r2, [r3, #0]
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	330c      	adds	r3, #12
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	429a      	cmp	r2, r3
 8015072:	d101      	bne.n	8015078 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	e028      	b.n	80150ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	60fb      	str	r3, [r7, #12]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d1c5      	bne.n	8015010 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015084:	4b15      	ldr	r3, [pc, #84]	; (80150dc <ip4_route+0xdc>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	2b00      	cmp	r3, #0
 801508a:	d01a      	beq.n	80150c2 <ip4_route+0xc2>
 801508c:	4b13      	ldr	r3, [pc, #76]	; (80150dc <ip4_route+0xdc>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015094:	f003 0301 	and.w	r3, r3, #1
 8015098:	2b00      	cmp	r3, #0
 801509a:	d012      	beq.n	80150c2 <ip4_route+0xc2>
 801509c:	4b0f      	ldr	r3, [pc, #60]	; (80150dc <ip4_route+0xdc>)
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80150a4:	f003 0304 	and.w	r3, r3, #4
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d00a      	beq.n	80150c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150ac:	4b0b      	ldr	r3, [pc, #44]	; (80150dc <ip4_route+0xdc>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	3304      	adds	r3, #4
 80150b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d004      	beq.n	80150c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	2b7f      	cmp	r3, #127	; 0x7f
 80150c0:	d101      	bne.n	80150c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80150c2:	2300      	movs	r3, #0
 80150c4:	e001      	b.n	80150ca <ip4_route+0xca>
  }

  return netif_default;
 80150c6:	4b05      	ldr	r3, [pc, #20]	; (80150dc <ip4_route+0xdc>)
 80150c8:	681b      	ldr	r3, [r3, #0]
}
 80150ca:	4618      	mov	r0, r3
 80150cc:	3714      	adds	r7, #20
 80150ce:	46bd      	mov	sp, r7
 80150d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150d4:	4770      	bx	lr
 80150d6:	bf00      	nop
 80150d8:	2000de28 	.word	0x2000de28
 80150dc:	2000de2c 	.word	0x2000de2c

080150e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80150ee:	f003 0301 	and.w	r3, r3, #1
 80150f2:	b2db      	uxtb	r3, r3
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d016      	beq.n	8015126 <ip4_input_accept+0x46>
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	3304      	adds	r3, #4
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d011      	beq.n	8015126 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015102:	4b0b      	ldr	r3, [pc, #44]	; (8015130 <ip4_input_accept+0x50>)
 8015104:	695a      	ldr	r2, [r3, #20]
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	3304      	adds	r3, #4
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	429a      	cmp	r2, r3
 801510e:	d008      	beq.n	8015122 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015110:	4b07      	ldr	r3, [pc, #28]	; (8015130 <ip4_input_accept+0x50>)
 8015112:	695b      	ldr	r3, [r3, #20]
 8015114:	6879      	ldr	r1, [r7, #4]
 8015116:	4618      	mov	r0, r3
 8015118:	f000 fa26 	bl	8015568 <ip4_addr_isbroadcast_u32>
 801511c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801511e:	2b00      	cmp	r3, #0
 8015120:	d001      	beq.n	8015126 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015122:	2301      	movs	r3, #1
 8015124:	e000      	b.n	8015128 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015126:	2300      	movs	r3, #0
}
 8015128:	4618      	mov	r0, r3
 801512a:	3708      	adds	r7, #8
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	2000a6c0 	.word	0x2000a6c0

08015134 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b088      	sub	sp, #32
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801513e:	2301      	movs	r3, #1
 8015140:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	685b      	ldr	r3, [r3, #4]
 8015146:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015148:	69fb      	ldr	r3, [r7, #28]
 801514a:	781b      	ldrb	r3, [r3, #0]
 801514c:	091b      	lsrs	r3, r3, #4
 801514e:	b2db      	uxtb	r3, r3
 8015150:	2b04      	cmp	r3, #4
 8015152:	d004      	beq.n	801515e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015154:	6878      	ldr	r0, [r7, #4]
 8015156:	f7f6 fde1 	bl	800bd1c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801515a:	2300      	movs	r3, #0
 801515c:	e123      	b.n	80153a6 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801515e:	69fb      	ldr	r3, [r7, #28]
 8015160:	781b      	ldrb	r3, [r3, #0]
 8015162:	f003 030f 	and.w	r3, r3, #15
 8015166:	b2db      	uxtb	r3, r3
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	b2db      	uxtb	r3, r3
 801516c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801516e:	69fb      	ldr	r3, [r7, #28]
 8015170:	885b      	ldrh	r3, [r3, #2]
 8015172:	b29b      	uxth	r3, r3
 8015174:	4618      	mov	r0, r3
 8015176:	f7f5 fa3b 	bl	800a5f0 <lwip_htons>
 801517a:	4603      	mov	r3, r0
 801517c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	891b      	ldrh	r3, [r3, #8]
 8015182:	8a3a      	ldrh	r2, [r7, #16]
 8015184:	429a      	cmp	r2, r3
 8015186:	d204      	bcs.n	8015192 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015188:	8a3b      	ldrh	r3, [r7, #16]
 801518a:	4619      	mov	r1, r3
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f7f6 fc3f 	bl	800ba10 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	895b      	ldrh	r3, [r3, #10]
 8015196:	8a7a      	ldrh	r2, [r7, #18]
 8015198:	429a      	cmp	r2, r3
 801519a:	d807      	bhi.n	80151ac <ip4_input+0x78>
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	891b      	ldrh	r3, [r3, #8]
 80151a0:	8a3a      	ldrh	r2, [r7, #16]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d802      	bhi.n	80151ac <ip4_input+0x78>
 80151a6:	8a7b      	ldrh	r3, [r7, #18]
 80151a8:	2b13      	cmp	r3, #19
 80151aa:	d804      	bhi.n	80151b6 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f7f6 fdb5 	bl	800bd1c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80151b2:	2300      	movs	r3, #0
 80151b4:	e0f7      	b.n	80153a6 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80151b6:	69fb      	ldr	r3, [r7, #28]
 80151b8:	691b      	ldr	r3, [r3, #16]
 80151ba:	4a7d      	ldr	r2, [pc, #500]	; (80153b0 <ip4_input+0x27c>)
 80151bc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80151be:	69fb      	ldr	r3, [r7, #28]
 80151c0:	68db      	ldr	r3, [r3, #12]
 80151c2:	4a7b      	ldr	r2, [pc, #492]	; (80153b0 <ip4_input+0x27c>)
 80151c4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151c6:	4b7a      	ldr	r3, [pc, #488]	; (80153b0 <ip4_input+0x27c>)
 80151c8:	695b      	ldr	r3, [r3, #20]
 80151ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80151ce:	2be0      	cmp	r3, #224	; 0xe0
 80151d0:	d112      	bne.n	80151f8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80151d2:	683b      	ldr	r3, [r7, #0]
 80151d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80151d8:	f003 0301 	and.w	r3, r3, #1
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d007      	beq.n	80151f2 <ip4_input+0xbe>
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	3304      	adds	r3, #4
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d002      	beq.n	80151f2 <ip4_input+0xbe>
      netif = inp;
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	61bb      	str	r3, [r7, #24]
 80151f0:	e02a      	b.n	8015248 <ip4_input+0x114>
    } else {
      netif = NULL;
 80151f2:	2300      	movs	r3, #0
 80151f4:	61bb      	str	r3, [r7, #24]
 80151f6:	e027      	b.n	8015248 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80151f8:	6838      	ldr	r0, [r7, #0]
 80151fa:	f7ff ff71 	bl	80150e0 <ip4_input_accept>
 80151fe:	4603      	mov	r3, r0
 8015200:	2b00      	cmp	r3, #0
 8015202:	d002      	beq.n	801520a <ip4_input+0xd6>
      netif = inp;
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	61bb      	str	r3, [r7, #24]
 8015208:	e01e      	b.n	8015248 <ip4_input+0x114>
    } else {
      netif = NULL;
 801520a:	2300      	movs	r3, #0
 801520c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801520e:	4b68      	ldr	r3, [pc, #416]	; (80153b0 <ip4_input+0x27c>)
 8015210:	695b      	ldr	r3, [r3, #20]
 8015212:	b2db      	uxtb	r3, r3
 8015214:	2b7f      	cmp	r3, #127	; 0x7f
 8015216:	d017      	beq.n	8015248 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015218:	4b66      	ldr	r3, [pc, #408]	; (80153b4 <ip4_input+0x280>)
 801521a:	681b      	ldr	r3, [r3, #0]
 801521c:	61bb      	str	r3, [r7, #24]
 801521e:	e00e      	b.n	801523e <ip4_input+0x10a>
          if (netif == inp) {
 8015220:	69ba      	ldr	r2, [r7, #24]
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	429a      	cmp	r2, r3
 8015226:	d006      	beq.n	8015236 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015228:	69b8      	ldr	r0, [r7, #24]
 801522a:	f7ff ff59 	bl	80150e0 <ip4_input_accept>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d108      	bne.n	8015246 <ip4_input+0x112>
 8015234:	e000      	b.n	8015238 <ip4_input+0x104>
            continue;
 8015236:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	61bb      	str	r3, [r7, #24]
 801523e:	69bb      	ldr	r3, [r7, #24]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d1ed      	bne.n	8015220 <ip4_input+0xec>
 8015244:	e000      	b.n	8015248 <ip4_input+0x114>
            break;
 8015246:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	2b00      	cmp	r3, #0
 801524c:	d111      	bne.n	8015272 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801524e:	69fb      	ldr	r3, [r7, #28]
 8015250:	7a5b      	ldrb	r3, [r3, #9]
 8015252:	2b11      	cmp	r3, #17
 8015254:	d10d      	bne.n	8015272 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015256:	8a7b      	ldrh	r3, [r7, #18]
 8015258:	69fa      	ldr	r2, [r7, #28]
 801525a:	4413      	add	r3, r2
 801525c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	885b      	ldrh	r3, [r3, #2]
 8015262:	b29b      	uxth	r3, r3
 8015264:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015268:	d103      	bne.n	8015272 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801526e:	2300      	movs	r3, #0
 8015270:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d017      	beq.n	80152a8 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015278:	4b4d      	ldr	r3, [pc, #308]	; (80153b0 <ip4_input+0x27c>)
 801527a:	691b      	ldr	r3, [r3, #16]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d013      	beq.n	80152a8 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015280:	4b4b      	ldr	r3, [pc, #300]	; (80153b0 <ip4_input+0x27c>)
 8015282:	691b      	ldr	r3, [r3, #16]
 8015284:	6839      	ldr	r1, [r7, #0]
 8015286:	4618      	mov	r0, r3
 8015288:	f000 f96e 	bl	8015568 <ip4_addr_isbroadcast_u32>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	d105      	bne.n	801529e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015292:	4b47      	ldr	r3, [pc, #284]	; (80153b0 <ip4_input+0x27c>)
 8015294:	691b      	ldr	r3, [r3, #16]
 8015296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801529a:	2be0      	cmp	r3, #224	; 0xe0
 801529c:	d104      	bne.n	80152a8 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801529e:	6878      	ldr	r0, [r7, #4]
 80152a0:	f7f6 fd3c 	bl	800bd1c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80152a4:	2300      	movs	r3, #0
 80152a6:	e07e      	b.n	80153a6 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80152a8:	69bb      	ldr	r3, [r7, #24]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d104      	bne.n	80152b8 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7f6 fd34 	bl	800bd1c <pbuf_free>
    return ERR_OK;
 80152b4:	2300      	movs	r3, #0
 80152b6:	e076      	b.n	80153a6 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80152b8:	69fb      	ldr	r3, [r7, #28]
 80152ba:	88db      	ldrh	r3, [r3, #6]
 80152bc:	b29b      	uxth	r3, r3
 80152be:	461a      	mov	r2, r3
 80152c0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80152c4:	4013      	ands	r3, r2
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d00b      	beq.n	80152e2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	f000 fc92 	bl	8015bf4 <ip4_reass>
 80152d0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d101      	bne.n	80152dc <ip4_input+0x1a8>
      return ERR_OK;
 80152d8:	2300      	movs	r3, #0
 80152da:	e064      	b.n	80153a6 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	685b      	ldr	r3, [r3, #4]
 80152e0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80152e2:	4a33      	ldr	r2, [pc, #204]	; (80153b0 <ip4_input+0x27c>)
 80152e4:	69bb      	ldr	r3, [r7, #24]
 80152e6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80152e8:	4a31      	ldr	r2, [pc, #196]	; (80153b0 <ip4_input+0x27c>)
 80152ea:	683b      	ldr	r3, [r7, #0]
 80152ec:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80152ee:	4a30      	ldr	r2, [pc, #192]	; (80153b0 <ip4_input+0x27c>)
 80152f0:	69fb      	ldr	r3, [r7, #28]
 80152f2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	f003 030f 	and.w	r3, r3, #15
 80152fc:	b2db      	uxtb	r3, r3
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	b2db      	uxtb	r3, r3
 8015302:	b29a      	uxth	r2, r3
 8015304:	4b2a      	ldr	r3, [pc, #168]	; (80153b0 <ip4_input+0x27c>)
 8015306:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015308:	8a7b      	ldrh	r3, [r7, #18]
 801530a:	4619      	mov	r1, r3
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f7f6 fc7f 	bl	800bc10 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	7a5b      	ldrb	r3, [r3, #9]
 8015316:	2b11      	cmp	r3, #17
 8015318:	d006      	beq.n	8015328 <ip4_input+0x1f4>
 801531a:	2b11      	cmp	r3, #17
 801531c:	dc13      	bgt.n	8015346 <ip4_input+0x212>
 801531e:	2b01      	cmp	r3, #1
 8015320:	d00c      	beq.n	801533c <ip4_input+0x208>
 8015322:	2b06      	cmp	r3, #6
 8015324:	d005      	beq.n	8015332 <ip4_input+0x1fe>
 8015326:	e00e      	b.n	8015346 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015328:	6839      	ldr	r1, [r7, #0]
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f7fc fb24 	bl	8011978 <udp_input>
        break;
 8015330:	e026      	b.n	8015380 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015332:	6839      	ldr	r1, [r7, #0]
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7f8 fb35 	bl	800d9a4 <tcp_input>
        break;
 801533a:	e021      	b.n	8015380 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801533c:	6839      	ldr	r1, [r7, #0]
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f7ff fcd0 	bl	8014ce4 <icmp_input>
        break;
 8015344:	e01c      	b.n	8015380 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015346:	4b1a      	ldr	r3, [pc, #104]	; (80153b0 <ip4_input+0x27c>)
 8015348:	695b      	ldr	r3, [r3, #20]
 801534a:	69b9      	ldr	r1, [r7, #24]
 801534c:	4618      	mov	r0, r3
 801534e:	f000 f90b 	bl	8015568 <ip4_addr_isbroadcast_u32>
 8015352:	4603      	mov	r3, r0
 8015354:	2b00      	cmp	r3, #0
 8015356:	d10f      	bne.n	8015378 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015358:	4b15      	ldr	r3, [pc, #84]	; (80153b0 <ip4_input+0x27c>)
 801535a:	695b      	ldr	r3, [r3, #20]
 801535c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015360:	2be0      	cmp	r3, #224	; 0xe0
 8015362:	d009      	beq.n	8015378 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015364:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015368:	4619      	mov	r1, r3
 801536a:	6878      	ldr	r0, [r7, #4]
 801536c:	f7f6 fcc3 	bl	800bcf6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015370:	2102      	movs	r1, #2
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	f7ff fdba 	bl	8014eec <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f7f6 fccf 	bl	800bd1c <pbuf_free>
        break;
 801537e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015380:	4b0b      	ldr	r3, [pc, #44]	; (80153b0 <ip4_input+0x27c>)
 8015382:	2200      	movs	r2, #0
 8015384:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015386:	4b0a      	ldr	r3, [pc, #40]	; (80153b0 <ip4_input+0x27c>)
 8015388:	2200      	movs	r2, #0
 801538a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801538c:	4b08      	ldr	r3, [pc, #32]	; (80153b0 <ip4_input+0x27c>)
 801538e:	2200      	movs	r2, #0
 8015390:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015392:	4b07      	ldr	r3, [pc, #28]	; (80153b0 <ip4_input+0x27c>)
 8015394:	2200      	movs	r2, #0
 8015396:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015398:	4b05      	ldr	r3, [pc, #20]	; (80153b0 <ip4_input+0x27c>)
 801539a:	2200      	movs	r2, #0
 801539c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801539e:	4b04      	ldr	r3, [pc, #16]	; (80153b0 <ip4_input+0x27c>)
 80153a0:	2200      	movs	r2, #0
 80153a2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80153a4:	2300      	movs	r3, #0
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3720      	adds	r7, #32
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}
 80153ae:	bf00      	nop
 80153b0:	2000a6c0 	.word	0x2000a6c0
 80153b4:	2000de28 	.word	0x2000de28

080153b8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b08a      	sub	sp, #40	; 0x28
 80153bc:	af04      	add	r7, sp, #16
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d009      	beq.n	80153e4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80153d0:	68bb      	ldr	r3, [r7, #8]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d003      	beq.n	80153de <ip4_output_if+0x26>
 80153d6:	68bb      	ldr	r3, [r7, #8]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d102      	bne.n	80153e4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80153de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e0:	3304      	adds	r3, #4
 80153e2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80153e4:	78fa      	ldrb	r2, [r7, #3]
 80153e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e8:	9302      	str	r3, [sp, #8]
 80153ea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80153ee:	9301      	str	r3, [sp, #4]
 80153f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80153f4:	9300      	str	r3, [sp, #0]
 80153f6:	4613      	mov	r3, r2
 80153f8:	687a      	ldr	r2, [r7, #4]
 80153fa:	6979      	ldr	r1, [r7, #20]
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f000 f805 	bl	801540c <ip4_output_if_src>
 8015402:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015404:	4618      	mov	r0, r3
 8015406:	3718      	adds	r7, #24
 8015408:	46bd      	mov	sp, r7
 801540a:	bd80      	pop	{r7, pc}

0801540c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801540c:	b580      	push	{r7, lr}
 801540e:	b088      	sub	sp, #32
 8015410:	af00      	add	r7, sp, #0
 8015412:	60f8      	str	r0, [r7, #12]
 8015414:	60b9      	str	r1, [r7, #8]
 8015416:	607a      	str	r2, [r7, #4]
 8015418:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	7b9b      	ldrb	r3, [r3, #14]
 801541e:	2b01      	cmp	r3, #1
 8015420:	d006      	beq.n	8015430 <ip4_output_if_src+0x24>
 8015422:	4b4b      	ldr	r3, [pc, #300]	; (8015550 <ip4_output_if_src+0x144>)
 8015424:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015428:	494a      	ldr	r1, [pc, #296]	; (8015554 <ip4_output_if_src+0x148>)
 801542a:	484b      	ldr	r0, [pc, #300]	; (8015558 <ip4_output_if_src+0x14c>)
 801542c:	f001 f9e4 	bl	80167f8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d060      	beq.n	80154f8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015436:	2314      	movs	r3, #20
 8015438:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801543a:	2114      	movs	r1, #20
 801543c:	68f8      	ldr	r0, [r7, #12]
 801543e:	f7f6 fbd7 	bl	800bbf0 <pbuf_add_header>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	d002      	beq.n	801544e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015448:	f06f 0301 	mvn.w	r3, #1
 801544c:	e07c      	b.n	8015548 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	685b      	ldr	r3, [r3, #4]
 8015452:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	895b      	ldrh	r3, [r3, #10]
 8015458:	2b13      	cmp	r3, #19
 801545a:	d806      	bhi.n	801546a <ip4_output_if_src+0x5e>
 801545c:	4b3c      	ldr	r3, [pc, #240]	; (8015550 <ip4_output_if_src+0x144>)
 801545e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015462:	493e      	ldr	r1, [pc, #248]	; (801555c <ip4_output_if_src+0x150>)
 8015464:	483c      	ldr	r0, [pc, #240]	; (8015558 <ip4_output_if_src+0x14c>)
 8015466:	f001 f9c7 	bl	80167f8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	78fa      	ldrb	r2, [r7, #3]
 801546e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015470:	69fb      	ldr	r3, [r7, #28]
 8015472:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015476:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	69fb      	ldr	r3, [r7, #28]
 801547e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015480:	8b7b      	ldrh	r3, [r7, #26]
 8015482:	089b      	lsrs	r3, r3, #2
 8015484:	b29b      	uxth	r3, r3
 8015486:	b2db      	uxtb	r3, r3
 8015488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801548c:	b2da      	uxtb	r2, r3
 801548e:	69fb      	ldr	r3, [r7, #28]
 8015490:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015492:	69fb      	ldr	r3, [r7, #28]
 8015494:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015498:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	891b      	ldrh	r3, [r3, #8]
 801549e:	4618      	mov	r0, r3
 80154a0:	f7f5 f8a6 	bl	800a5f0 <lwip_htons>
 80154a4:	4603      	mov	r3, r0
 80154a6:	461a      	mov	r2, r3
 80154a8:	69fb      	ldr	r3, [r7, #28]
 80154aa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	2200      	movs	r2, #0
 80154b0:	719a      	strb	r2, [r3, #6]
 80154b2:	2200      	movs	r2, #0
 80154b4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80154b6:	4b2a      	ldr	r3, [pc, #168]	; (8015560 <ip4_output_if_src+0x154>)
 80154b8:	881b      	ldrh	r3, [r3, #0]
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f5 f898 	bl	800a5f0 <lwip_htons>
 80154c0:	4603      	mov	r3, r0
 80154c2:	461a      	mov	r2, r3
 80154c4:	69fb      	ldr	r3, [r7, #28]
 80154c6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80154c8:	4b25      	ldr	r3, [pc, #148]	; (8015560 <ip4_output_if_src+0x154>)
 80154ca:	881b      	ldrh	r3, [r3, #0]
 80154cc:	3301      	adds	r3, #1
 80154ce:	b29a      	uxth	r2, r3
 80154d0:	4b23      	ldr	r3, [pc, #140]	; (8015560 <ip4_output_if_src+0x154>)
 80154d2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80154d4:	68bb      	ldr	r3, [r7, #8]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d104      	bne.n	80154e4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80154da:	4b22      	ldr	r3, [pc, #136]	; (8015564 <ip4_output_if_src+0x158>)
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	69fb      	ldr	r3, [r7, #28]
 80154e0:	60da      	str	r2, [r3, #12]
 80154e2:	e003      	b.n	80154ec <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	681a      	ldr	r2, [r3, #0]
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80154ec:	69fb      	ldr	r3, [r7, #28]
 80154ee:	2200      	movs	r2, #0
 80154f0:	729a      	strb	r2, [r3, #10]
 80154f2:	2200      	movs	r2, #0
 80154f4:	72da      	strb	r2, [r3, #11]
 80154f6:	e00f      	b.n	8015518 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	895b      	ldrh	r3, [r3, #10]
 80154fc:	2b13      	cmp	r3, #19
 80154fe:	d802      	bhi.n	8015506 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015500:	f06f 0301 	mvn.w	r3, #1
 8015504:	e020      	b.n	8015548 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	685b      	ldr	r3, [r3, #4]
 801550a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801550c:	69fb      	ldr	r3, [r7, #28]
 801550e:	691b      	ldr	r3, [r3, #16]
 8015510:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015512:	f107 0314 	add.w	r3, r7, #20
 8015516:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801551a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801551c:	2b00      	cmp	r3, #0
 801551e:	d00c      	beq.n	801553a <ip4_output_if_src+0x12e>
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	891a      	ldrh	r2, [r3, #8]
 8015524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015528:	429a      	cmp	r2, r3
 801552a:	d906      	bls.n	801553a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801552c:	687a      	ldr	r2, [r7, #4]
 801552e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	f000 fd53 	bl	8015fdc <ip4_frag>
 8015536:	4603      	mov	r3, r0
 8015538:	e006      	b.n	8015548 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553c:	695b      	ldr	r3, [r3, #20]
 801553e:	687a      	ldr	r2, [r7, #4]
 8015540:	68f9      	ldr	r1, [r7, #12]
 8015542:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015544:	4798      	blx	r3
 8015546:	4603      	mov	r3, r0
}
 8015548:	4618      	mov	r0, r3
 801554a:	3720      	adds	r7, #32
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	0801a278 	.word	0x0801a278
 8015554:	0801a2ac 	.word	0x0801a2ac
 8015558:	0801a2b8 	.word	0x0801a2b8
 801555c:	0801a2e0 	.word	0x0801a2e0
 8015560:	2000dfba 	.word	0x2000dfba
 8015564:	0801a75c 	.word	0x0801a75c

08015568 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015568:	b480      	push	{r7}
 801556a:	b085      	sub	sp, #20
 801556c:	af00      	add	r7, sp, #0
 801556e:	6078      	str	r0, [r7, #4]
 8015570:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	f1b3 3fff 	cmp.w	r3, #4294967295
 801557c:	d002      	beq.n	8015584 <ip4_addr_isbroadcast_u32+0x1c>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d101      	bne.n	8015588 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015584:	2301      	movs	r3, #1
 8015586:	e02a      	b.n	80155de <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015588:	683b      	ldr	r3, [r7, #0]
 801558a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801558e:	f003 0302 	and.w	r3, r3, #2
 8015592:	2b00      	cmp	r3, #0
 8015594:	d101      	bne.n	801559a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015596:	2300      	movs	r3, #0
 8015598:	e021      	b.n	80155de <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801559a:	683b      	ldr	r3, [r7, #0]
 801559c:	3304      	adds	r3, #4
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	687a      	ldr	r2, [r7, #4]
 80155a2:	429a      	cmp	r2, r3
 80155a4:	d101      	bne.n	80155aa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80155a6:	2300      	movs	r3, #0
 80155a8:	e019      	b.n	80155de <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80155aa:	68fa      	ldr	r2, [r7, #12]
 80155ac:	683b      	ldr	r3, [r7, #0]
 80155ae:	3304      	adds	r3, #4
 80155b0:	681b      	ldr	r3, [r3, #0]
 80155b2:	405a      	eors	r2, r3
 80155b4:	683b      	ldr	r3, [r7, #0]
 80155b6:	3308      	adds	r3, #8
 80155b8:	681b      	ldr	r3, [r3, #0]
 80155ba:	4013      	ands	r3, r2
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d10d      	bne.n	80155dc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80155c0:	683b      	ldr	r3, [r7, #0]
 80155c2:	3308      	adds	r3, #8
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	43da      	mvns	r2, r3
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	3308      	adds	r3, #8
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d101      	bne.n	80155dc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80155d8:	2301      	movs	r3, #1
 80155da:	e000      	b.n	80155de <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80155dc:	2300      	movs	r3, #0
  }
}
 80155de:	4618      	mov	r0, r3
 80155e0:	3714      	adds	r7, #20
 80155e2:	46bd      	mov	sp, r7
 80155e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e8:	4770      	bx	lr
	...

080155ec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b084      	sub	sp, #16
 80155f0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80155f2:	2300      	movs	r3, #0
 80155f4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80155f6:	4b12      	ldr	r3, [pc, #72]	; (8015640 <ip_reass_tmr+0x54>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80155fc:	e018      	b.n	8015630 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	7fdb      	ldrb	r3, [r3, #31]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d00b      	beq.n	801561e <ip_reass_tmr+0x32>
      r->timer--;
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	7fdb      	ldrb	r3, [r3, #31]
 801560a:	3b01      	subs	r3, #1
 801560c:	b2da      	uxtb	r2, r3
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015616:	68fb      	ldr	r3, [r7, #12]
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	60fb      	str	r3, [r7, #12]
 801561c:	e008      	b.n	8015630 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015628:	68b9      	ldr	r1, [r7, #8]
 801562a:	6878      	ldr	r0, [r7, #4]
 801562c:	f000 f80a 	bl	8015644 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d1e3      	bne.n	80155fe <ip_reass_tmr+0x12>
    }
  }
}
 8015636:	bf00      	nop
 8015638:	bf00      	nop
 801563a:	3710      	adds	r7, #16
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	2000dfbc 	.word	0x2000dfbc

08015644 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b088      	sub	sp, #32
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801564e:	2300      	movs	r3, #0
 8015650:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015652:	683a      	ldr	r2, [r7, #0]
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	429a      	cmp	r2, r3
 8015658:	d105      	bne.n	8015666 <ip_reass_free_complete_datagram+0x22>
 801565a:	4b45      	ldr	r3, [pc, #276]	; (8015770 <ip_reass_free_complete_datagram+0x12c>)
 801565c:	22ab      	movs	r2, #171	; 0xab
 801565e:	4945      	ldr	r1, [pc, #276]	; (8015774 <ip_reass_free_complete_datagram+0x130>)
 8015660:	4845      	ldr	r0, [pc, #276]	; (8015778 <ip_reass_free_complete_datagram+0x134>)
 8015662:	f001 f8c9 	bl	80167f8 <iprintf>
  if (prev != NULL) {
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d00a      	beq.n	8015682 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801566c:	683b      	ldr	r3, [r7, #0]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	687a      	ldr	r2, [r7, #4]
 8015672:	429a      	cmp	r2, r3
 8015674:	d005      	beq.n	8015682 <ip_reass_free_complete_datagram+0x3e>
 8015676:	4b3e      	ldr	r3, [pc, #248]	; (8015770 <ip_reass_free_complete_datagram+0x12c>)
 8015678:	22ad      	movs	r2, #173	; 0xad
 801567a:	4940      	ldr	r1, [pc, #256]	; (801577c <ip_reass_free_complete_datagram+0x138>)
 801567c:	483e      	ldr	r0, [pc, #248]	; (8015778 <ip_reass_free_complete_datagram+0x134>)
 801567e:	f001 f8bb 	bl	80167f8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	889b      	ldrh	r3, [r3, #4]
 801568e:	b29b      	uxth	r3, r3
 8015690:	2b00      	cmp	r3, #0
 8015692:	d12a      	bne.n	80156ea <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	685b      	ldr	r3, [r3, #4]
 8015698:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80156a2:	69bb      	ldr	r3, [r7, #24]
 80156a4:	6858      	ldr	r0, [r3, #4]
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	3308      	adds	r3, #8
 80156aa:	2214      	movs	r2, #20
 80156ac:	4619      	mov	r1, r3
 80156ae:	f001 f9c2 	bl	8016a36 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80156b2:	2101      	movs	r1, #1
 80156b4:	69b8      	ldr	r0, [r7, #24]
 80156b6:	f7ff fc29 	bl	8014f0c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80156ba:	69b8      	ldr	r0, [r7, #24]
 80156bc:	f7f6 fbbc 	bl	800be38 <pbuf_clen>
 80156c0:	4603      	mov	r3, r0
 80156c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80156c4:	8bfa      	ldrh	r2, [r7, #30]
 80156c6:	8a7b      	ldrh	r3, [r7, #18]
 80156c8:	4413      	add	r3, r2
 80156ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80156ce:	db05      	blt.n	80156dc <ip_reass_free_complete_datagram+0x98>
 80156d0:	4b27      	ldr	r3, [pc, #156]	; (8015770 <ip_reass_free_complete_datagram+0x12c>)
 80156d2:	22bc      	movs	r2, #188	; 0xbc
 80156d4:	492a      	ldr	r1, [pc, #168]	; (8015780 <ip_reass_free_complete_datagram+0x13c>)
 80156d6:	4828      	ldr	r0, [pc, #160]	; (8015778 <ip_reass_free_complete_datagram+0x134>)
 80156d8:	f001 f88e 	bl	80167f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80156dc:	8bfa      	ldrh	r2, [r7, #30]
 80156de:	8a7b      	ldrh	r3, [r7, #18]
 80156e0:	4413      	add	r3, r2
 80156e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80156e4:	69b8      	ldr	r0, [r7, #24]
 80156e6:	f7f6 fb19 	bl	800bd1c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80156f0:	e01f      	b.n	8015732 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80156f2:	69bb      	ldr	r3, [r7, #24]
 80156f4:	685b      	ldr	r3, [r3, #4]
 80156f6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80156f8:	69bb      	ldr	r3, [r7, #24]
 80156fa:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015702:	68f8      	ldr	r0, [r7, #12]
 8015704:	f7f6 fb98 	bl	800be38 <pbuf_clen>
 8015708:	4603      	mov	r3, r0
 801570a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801570c:	8bfa      	ldrh	r2, [r7, #30]
 801570e:	8a7b      	ldrh	r3, [r7, #18]
 8015710:	4413      	add	r3, r2
 8015712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015716:	db05      	blt.n	8015724 <ip_reass_free_complete_datagram+0xe0>
 8015718:	4b15      	ldr	r3, [pc, #84]	; (8015770 <ip_reass_free_complete_datagram+0x12c>)
 801571a:	22cc      	movs	r2, #204	; 0xcc
 801571c:	4918      	ldr	r1, [pc, #96]	; (8015780 <ip_reass_free_complete_datagram+0x13c>)
 801571e:	4816      	ldr	r0, [pc, #88]	; (8015778 <ip_reass_free_complete_datagram+0x134>)
 8015720:	f001 f86a 	bl	80167f8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015724:	8bfa      	ldrh	r2, [r7, #30]
 8015726:	8a7b      	ldrh	r3, [r7, #18]
 8015728:	4413      	add	r3, r2
 801572a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801572c:	68f8      	ldr	r0, [r7, #12]
 801572e:	f7f6 faf5 	bl	800bd1c <pbuf_free>
  while (p != NULL) {
 8015732:	69bb      	ldr	r3, [r7, #24]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d1dc      	bne.n	80156f2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015738:	6839      	ldr	r1, [r7, #0]
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f000 f8c2 	bl	80158c4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015740:	4b10      	ldr	r3, [pc, #64]	; (8015784 <ip_reass_free_complete_datagram+0x140>)
 8015742:	881b      	ldrh	r3, [r3, #0]
 8015744:	8bfa      	ldrh	r2, [r7, #30]
 8015746:	429a      	cmp	r2, r3
 8015748:	d905      	bls.n	8015756 <ip_reass_free_complete_datagram+0x112>
 801574a:	4b09      	ldr	r3, [pc, #36]	; (8015770 <ip_reass_free_complete_datagram+0x12c>)
 801574c:	22d2      	movs	r2, #210	; 0xd2
 801574e:	490e      	ldr	r1, [pc, #56]	; (8015788 <ip_reass_free_complete_datagram+0x144>)
 8015750:	4809      	ldr	r0, [pc, #36]	; (8015778 <ip_reass_free_complete_datagram+0x134>)
 8015752:	f001 f851 	bl	80167f8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015756:	4b0b      	ldr	r3, [pc, #44]	; (8015784 <ip_reass_free_complete_datagram+0x140>)
 8015758:	881a      	ldrh	r2, [r3, #0]
 801575a:	8bfb      	ldrh	r3, [r7, #30]
 801575c:	1ad3      	subs	r3, r2, r3
 801575e:	b29a      	uxth	r2, r3
 8015760:	4b08      	ldr	r3, [pc, #32]	; (8015784 <ip_reass_free_complete_datagram+0x140>)
 8015762:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015764:	8bfb      	ldrh	r3, [r7, #30]
}
 8015766:	4618      	mov	r0, r3
 8015768:	3720      	adds	r7, #32
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	0801a310 	.word	0x0801a310
 8015774:	0801a34c 	.word	0x0801a34c
 8015778:	0801a358 	.word	0x0801a358
 801577c:	0801a380 	.word	0x0801a380
 8015780:	0801a394 	.word	0x0801a394
 8015784:	2000dfc0 	.word	0x2000dfc0
 8015788:	0801a3b4 	.word	0x0801a3b4

0801578c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b08a      	sub	sp, #40	; 0x28
 8015790:	af00      	add	r7, sp, #0
 8015792:	6078      	str	r0, [r7, #4]
 8015794:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015796:	2300      	movs	r3, #0
 8015798:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801579a:	2300      	movs	r3, #0
 801579c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801579e:	2300      	movs	r3, #0
 80157a0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80157a2:	2300      	movs	r3, #0
 80157a4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80157a6:	2300      	movs	r3, #0
 80157a8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80157aa:	4b28      	ldr	r3, [pc, #160]	; (801584c <ip_reass_remove_oldest_datagram+0xc0>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80157b0:	e030      	b.n	8015814 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80157b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b4:	695a      	ldr	r2, [r3, #20]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	68db      	ldr	r3, [r3, #12]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d10c      	bne.n	80157d8 <ip_reass_remove_oldest_datagram+0x4c>
 80157be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157c0:	699a      	ldr	r2, [r3, #24]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	691b      	ldr	r3, [r3, #16]
 80157c6:	429a      	cmp	r2, r3
 80157c8:	d106      	bne.n	80157d8 <ip_reass_remove_oldest_datagram+0x4c>
 80157ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157cc:	899a      	ldrh	r2, [r3, #12]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	889b      	ldrh	r3, [r3, #4]
 80157d2:	b29b      	uxth	r3, r3
 80157d4:	429a      	cmp	r2, r3
 80157d6:	d014      	beq.n	8015802 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	3301      	adds	r3, #1
 80157dc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80157de:	6a3b      	ldr	r3, [r7, #32]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d104      	bne.n	80157ee <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80157e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157e6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80157e8:	69fb      	ldr	r3, [r7, #28]
 80157ea:	61bb      	str	r3, [r7, #24]
 80157ec:	e009      	b.n	8015802 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80157ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157f0:	7fda      	ldrb	r2, [r3, #31]
 80157f2:	6a3b      	ldr	r3, [r7, #32]
 80157f4:	7fdb      	ldrb	r3, [r3, #31]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d803      	bhi.n	8015802 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80157fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157fc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80157fe:	69fb      	ldr	r3, [r7, #28]
 8015800:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d001      	beq.n	801580e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801580c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015816:	2b00      	cmp	r3, #0
 8015818:	d1cb      	bne.n	80157b2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801581a:	6a3b      	ldr	r3, [r7, #32]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d008      	beq.n	8015832 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015820:	69b9      	ldr	r1, [r7, #24]
 8015822:	6a38      	ldr	r0, [r7, #32]
 8015824:	f7ff ff0e 	bl	8015644 <ip_reass_free_complete_datagram>
 8015828:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801582a:	697a      	ldr	r2, [r7, #20]
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	4413      	add	r3, r2
 8015830:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015832:	697a      	ldr	r2, [r7, #20]
 8015834:	683b      	ldr	r3, [r7, #0]
 8015836:	429a      	cmp	r2, r3
 8015838:	da02      	bge.n	8015840 <ip_reass_remove_oldest_datagram+0xb4>
 801583a:	693b      	ldr	r3, [r7, #16]
 801583c:	2b01      	cmp	r3, #1
 801583e:	dcac      	bgt.n	801579a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015840:	697b      	ldr	r3, [r7, #20]
}
 8015842:	4618      	mov	r0, r3
 8015844:	3728      	adds	r7, #40	; 0x28
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}
 801584a:	bf00      	nop
 801584c:	2000dfbc 	.word	0x2000dfbc

08015850 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b084      	sub	sp, #16
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
 8015858:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801585a:	2004      	movs	r0, #4
 801585c:	f7f5 fba0 	bl	800afa0 <memp_malloc>
 8015860:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015862:	68fb      	ldr	r3, [r7, #12]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d110      	bne.n	801588a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015868:	6839      	ldr	r1, [r7, #0]
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f7ff ff8e 	bl	801578c <ip_reass_remove_oldest_datagram>
 8015870:	4602      	mov	r2, r0
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	4293      	cmp	r3, r2
 8015876:	dc03      	bgt.n	8015880 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015878:	2004      	movs	r0, #4
 801587a:	f7f5 fb91 	bl	800afa0 <memp_malloc>
 801587e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d101      	bne.n	801588a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015886:	2300      	movs	r3, #0
 8015888:	e016      	b.n	80158b8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801588a:	2220      	movs	r2, #32
 801588c:	2100      	movs	r1, #0
 801588e:	68f8      	ldr	r0, [r7, #12]
 8015890:	f001 f817 	bl	80168c2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	220f      	movs	r2, #15
 8015898:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801589a:	4b09      	ldr	r3, [pc, #36]	; (80158c0 <ip_reass_enqueue_new_datagram+0x70>)
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80158a2:	4a07      	ldr	r2, [pc, #28]	; (80158c0 <ip_reass_enqueue_new_datagram+0x70>)
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	3308      	adds	r3, #8
 80158ac:	2214      	movs	r2, #20
 80158ae:	6879      	ldr	r1, [r7, #4]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f001 f8c0 	bl	8016a36 <memcpy>
  return ipr;
 80158b6:	68fb      	ldr	r3, [r7, #12]
}
 80158b8:	4618      	mov	r0, r3
 80158ba:	3710      	adds	r7, #16
 80158bc:	46bd      	mov	sp, r7
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	2000dfbc 	.word	0x2000dfbc

080158c4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
 80158cc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80158ce:	4b10      	ldr	r3, [pc, #64]	; (8015910 <ip_reass_dequeue_datagram+0x4c>)
 80158d0:	681b      	ldr	r3, [r3, #0]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d104      	bne.n	80158e2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	4a0c      	ldr	r2, [pc, #48]	; (8015910 <ip_reass_dequeue_datagram+0x4c>)
 80158de:	6013      	str	r3, [r2, #0]
 80158e0:	e00d      	b.n	80158fe <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80158e2:	683b      	ldr	r3, [r7, #0]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d106      	bne.n	80158f6 <ip_reass_dequeue_datagram+0x32>
 80158e8:	4b0a      	ldr	r3, [pc, #40]	; (8015914 <ip_reass_dequeue_datagram+0x50>)
 80158ea:	f240 1245 	movw	r2, #325	; 0x145
 80158ee:	490a      	ldr	r1, [pc, #40]	; (8015918 <ip_reass_dequeue_datagram+0x54>)
 80158f0:	480a      	ldr	r0, [pc, #40]	; (801591c <ip_reass_dequeue_datagram+0x58>)
 80158f2:	f000 ff81 	bl	80167f8 <iprintf>
    prev->next = ipr->next;
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681a      	ldr	r2, [r3, #0]
 80158fa:	683b      	ldr	r3, [r7, #0]
 80158fc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80158fe:	6879      	ldr	r1, [r7, #4]
 8015900:	2004      	movs	r0, #4
 8015902:	f7f5 fbc3 	bl	800b08c <memp_free>
}
 8015906:	bf00      	nop
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	2000dfbc 	.word	0x2000dfbc
 8015914:	0801a310 	.word	0x0801a310
 8015918:	0801a3d8 	.word	0x0801a3d8
 801591c:	0801a358 	.word	0x0801a358

08015920 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015920:	b580      	push	{r7, lr}
 8015922:	b08c      	sub	sp, #48	; 0x30
 8015924:	af00      	add	r7, sp, #0
 8015926:	60f8      	str	r0, [r7, #12]
 8015928:	60b9      	str	r1, [r7, #8]
 801592a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801592c:	2300      	movs	r3, #0
 801592e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015930:	2301      	movs	r3, #1
 8015932:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	685b      	ldr	r3, [r3, #4]
 8015938:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	885b      	ldrh	r3, [r3, #2]
 801593e:	b29b      	uxth	r3, r3
 8015940:	4618      	mov	r0, r3
 8015942:	f7f4 fe55 	bl	800a5f0 <lwip_htons>
 8015946:	4603      	mov	r3, r0
 8015948:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	781b      	ldrb	r3, [r3, #0]
 801594e:	f003 030f 	and.w	r3, r3, #15
 8015952:	b2db      	uxtb	r3, r3
 8015954:	009b      	lsls	r3, r3, #2
 8015956:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015958:	7e7b      	ldrb	r3, [r7, #25]
 801595a:	b29b      	uxth	r3, r3
 801595c:	8b7a      	ldrh	r2, [r7, #26]
 801595e:	429a      	cmp	r2, r3
 8015960:	d202      	bcs.n	8015968 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015962:	f04f 33ff 	mov.w	r3, #4294967295
 8015966:	e135      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015968:	7e7b      	ldrb	r3, [r7, #25]
 801596a:	b29b      	uxth	r3, r3
 801596c:	8b7a      	ldrh	r2, [r7, #26]
 801596e:	1ad3      	subs	r3, r2, r3
 8015970:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	88db      	ldrh	r3, [r3, #6]
 8015976:	b29b      	uxth	r3, r3
 8015978:	4618      	mov	r0, r3
 801597a:	f7f4 fe39 	bl	800a5f0 <lwip_htons>
 801597e:	4603      	mov	r3, r0
 8015980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015984:	b29b      	uxth	r3, r3
 8015986:	00db      	lsls	r3, r3, #3
 8015988:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801598a:	68bb      	ldr	r3, [r7, #8]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015992:	2200      	movs	r2, #0
 8015994:	701a      	strb	r2, [r3, #0]
 8015996:	2200      	movs	r2, #0
 8015998:	705a      	strb	r2, [r3, #1]
 801599a:	2200      	movs	r2, #0
 801599c:	709a      	strb	r2, [r3, #2]
 801599e:	2200      	movs	r2, #0
 80159a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80159a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a4:	8afa      	ldrh	r2, [r7, #22]
 80159a6:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80159a8:	8afa      	ldrh	r2, [r7, #22]
 80159aa:	8b7b      	ldrh	r3, [r7, #26]
 80159ac:	4413      	add	r3, r2
 80159ae:	b29a      	uxth	r2, r3
 80159b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80159b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b6:	88db      	ldrh	r3, [r3, #6]
 80159b8:	b29b      	uxth	r3, r3
 80159ba:	8afa      	ldrh	r2, [r7, #22]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d902      	bls.n	80159c6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80159c0:	f04f 33ff 	mov.w	r3, #4294967295
 80159c4:	e106      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	627b      	str	r3, [r7, #36]	; 0x24
 80159cc:	e068      	b.n	8015aa0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80159ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80159d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d6:	889b      	ldrh	r3, [r3, #4]
 80159d8:	b29a      	uxth	r2, r3
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	889b      	ldrh	r3, [r3, #4]
 80159de:	b29b      	uxth	r3, r3
 80159e0:	429a      	cmp	r2, r3
 80159e2:	d235      	bcs.n	8015a50 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159e8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80159ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d020      	beq.n	8015a32 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80159f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f2:	889b      	ldrh	r3, [r3, #4]
 80159f4:	b29a      	uxth	r2, r3
 80159f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159f8:	88db      	ldrh	r3, [r3, #6]
 80159fa:	b29b      	uxth	r3, r3
 80159fc:	429a      	cmp	r2, r3
 80159fe:	d307      	bcc.n	8015a10 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a02:	88db      	ldrh	r3, [r3, #6]
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	889b      	ldrh	r3, [r3, #4]
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	429a      	cmp	r2, r3
 8015a0e:	d902      	bls.n	8015a16 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a10:	f04f 33ff 	mov.w	r3, #4294967295
 8015a14:	e0de      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a18:	68ba      	ldr	r2, [r7, #8]
 8015a1a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a1e:	88db      	ldrh	r3, [r3, #6]
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a24:	889b      	ldrh	r3, [r3, #4]
 8015a26:	b29b      	uxth	r3, r3
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d03d      	beq.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015a30:	e03a      	b.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a34:	88db      	ldrh	r3, [r3, #6]
 8015a36:	b29a      	uxth	r2, r3
 8015a38:	693b      	ldr	r3, [r7, #16]
 8015a3a:	889b      	ldrh	r3, [r3, #4]
 8015a3c:	b29b      	uxth	r3, r3
 8015a3e:	429a      	cmp	r2, r3
 8015a40:	d902      	bls.n	8015a48 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a42:	f04f 33ff 	mov.w	r3, #4294967295
 8015a46:	e0c5      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	605a      	str	r2, [r3, #4]
      break;
 8015a4e:	e02b      	b.n	8015aa8 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a52:	889b      	ldrh	r3, [r3, #4]
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	693b      	ldr	r3, [r7, #16]
 8015a58:	889b      	ldrh	r3, [r3, #4]
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d102      	bne.n	8015a66 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a60:	f04f 33ff 	mov.w	r3, #4294967295
 8015a64:	e0b6      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a68:	889b      	ldrh	r3, [r3, #4]
 8015a6a:	b29a      	uxth	r2, r3
 8015a6c:	693b      	ldr	r3, [r7, #16]
 8015a6e:	88db      	ldrh	r3, [r3, #6]
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	429a      	cmp	r2, r3
 8015a74:	d202      	bcs.n	8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015a76:	f04f 33ff 	mov.w	r3, #4294967295
 8015a7a:	e0ab      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d009      	beq.n	8015a96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a84:	88db      	ldrh	r3, [r3, #6]
 8015a86:	b29a      	uxth	r2, r3
 8015a88:	693b      	ldr	r3, [r7, #16]
 8015a8a:	889b      	ldrh	r3, [r3, #4]
 8015a8c:	b29b      	uxth	r3, r3
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d001      	beq.n	8015a96 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015a92:	2300      	movs	r3, #0
 8015a94:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015a9c:	693b      	ldr	r3, [r7, #16]
 8015a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d193      	bne.n	80159ce <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015aa6:	e000      	b.n	8015aaa <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015aa8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d12d      	bne.n	8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d01c      	beq.n	8015af0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab8:	88db      	ldrh	r3, [r3, #6]
 8015aba:	b29a      	uxth	r2, r3
 8015abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abe:	889b      	ldrh	r3, [r3, #4]
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	429a      	cmp	r2, r3
 8015ac4:	d906      	bls.n	8015ad4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015ac6:	4b45      	ldr	r3, [pc, #276]	; (8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ac8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015acc:	4944      	ldr	r1, [pc, #272]	; (8015be0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015ace:	4845      	ldr	r0, [pc, #276]	; (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015ad0:	f000 fe92 	bl	80167f8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad6:	68ba      	ldr	r2, [r7, #8]
 8015ad8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015adc:	88db      	ldrh	r3, [r3, #6]
 8015ade:	b29a      	uxth	r2, r3
 8015ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ae2:	889b      	ldrh	r3, [r3, #4]
 8015ae4:	b29b      	uxth	r3, r3
 8015ae6:	429a      	cmp	r2, r3
 8015ae8:	d010      	beq.n	8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015aea:	2300      	movs	r3, #0
 8015aec:	623b      	str	r3, [r7, #32]
 8015aee:	e00d      	b.n	8015b0c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d006      	beq.n	8015b06 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015af8:	4b38      	ldr	r3, [pc, #224]	; (8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015afa:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015afe:	493a      	ldr	r1, [pc, #232]	; (8015be8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015b00:	4838      	ldr	r0, [pc, #224]	; (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b02:	f000 fe79 	bl	80167f8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	68ba      	ldr	r2, [r7, #8]
 8015b0a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d105      	bne.n	8015b1e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	7f9b      	ldrb	r3, [r3, #30]
 8015b16:	f003 0301 	and.w	r3, r3, #1
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d059      	beq.n	8015bd2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015b1e:	6a3b      	ldr	r3, [r7, #32]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d04f      	beq.n	8015bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	685b      	ldr	r3, [r3, #4]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d006      	beq.n	8015b3a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	685b      	ldr	r3, [r3, #4]
 8015b32:	889b      	ldrh	r3, [r3, #4]
 8015b34:	b29b      	uxth	r3, r3
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d002      	beq.n	8015b40 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	623b      	str	r3, [r7, #32]
 8015b3e:	e041      	b.n	8015bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b42:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b46:	681b      	ldr	r3, [r3, #0]
 8015b48:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015b4a:	e012      	b.n	8015b72 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b4e:	685b      	ldr	r3, [r3, #4]
 8015b50:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	88db      	ldrh	r3, [r3, #6]
 8015b56:	b29a      	uxth	r2, r3
 8015b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b5a:	889b      	ldrh	r3, [r3, #4]
 8015b5c:	b29b      	uxth	r3, r3
 8015b5e:	429a      	cmp	r2, r3
 8015b60:	d002      	beq.n	8015b68 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015b62:	2300      	movs	r3, #0
 8015b64:	623b      	str	r3, [r7, #32]
            break;
 8015b66:	e007      	b.n	8015b78 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d1e9      	bne.n	8015b4c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015b78:	6a3b      	ldr	r3, [r7, #32]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d022      	beq.n	8015bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015b7e:	68fb      	ldr	r3, [r7, #12]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d106      	bne.n	8015b94 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015b86:	4b15      	ldr	r3, [pc, #84]	; (8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015b88:	f240 12df 	movw	r2, #479	; 0x1df
 8015b8c:	4917      	ldr	r1, [pc, #92]	; (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015b8e:	4815      	ldr	r0, [pc, #84]	; (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015b90:	f000 fe32 	bl	80167f8 <iprintf>
          LWIP_ASSERT("sanity check",
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	685b      	ldr	r3, [r3, #4]
 8015b98:	685b      	ldr	r3, [r3, #4]
 8015b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b9c:	429a      	cmp	r2, r3
 8015b9e:	d106      	bne.n	8015bae <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015ba0:	4b0e      	ldr	r3, [pc, #56]	; (8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015ba2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015ba6:	4911      	ldr	r1, [pc, #68]	; (8015bec <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015ba8:	480e      	ldr	r0, [pc, #56]	; (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015baa:	f000 fe25 	bl	80167f8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d006      	beq.n	8015bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015bb6:	4b09      	ldr	r3, [pc, #36]	; (8015bdc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015bb8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015bbc:	490c      	ldr	r1, [pc, #48]	; (8015bf0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015bbe:	4809      	ldr	r0, [pc, #36]	; (8015be4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015bc0:	f000 fe1a 	bl	80167f8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015bc4:	6a3b      	ldr	r3, [r7, #32]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	bf14      	ite	ne
 8015bca:	2301      	movne	r3, #1
 8015bcc:	2300      	moveq	r3, #0
 8015bce:	b2db      	uxtb	r3, r3
 8015bd0:	e000      	b.n	8015bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015bd2:	2300      	movs	r3, #0
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3730      	adds	r7, #48	; 0x30
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}
 8015bdc:	0801a310 	.word	0x0801a310
 8015be0:	0801a3f4 	.word	0x0801a3f4
 8015be4:	0801a358 	.word	0x0801a358
 8015be8:	0801a414 	.word	0x0801a414
 8015bec:	0801a44c 	.word	0x0801a44c
 8015bf0:	0801a45c 	.word	0x0801a45c

08015bf4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08e      	sub	sp, #56	; 0x38
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	685b      	ldr	r3, [r3, #4]
 8015c00:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c04:	781b      	ldrb	r3, [r3, #0]
 8015c06:	f003 030f 	and.w	r3, r3, #15
 8015c0a:	b2db      	uxtb	r3, r3
 8015c0c:	009b      	lsls	r3, r3, #2
 8015c0e:	b2db      	uxtb	r3, r3
 8015c10:	2b14      	cmp	r3, #20
 8015c12:	f040 8171 	bne.w	8015ef8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c18:	88db      	ldrh	r3, [r3, #6]
 8015c1a:	b29b      	uxth	r3, r3
 8015c1c:	4618      	mov	r0, r3
 8015c1e:	f7f4 fce7 	bl	800a5f0 <lwip_htons>
 8015c22:	4603      	mov	r3, r0
 8015c24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015c28:	b29b      	uxth	r3, r3
 8015c2a:	00db      	lsls	r3, r3, #3
 8015c2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c30:	885b      	ldrh	r3, [r3, #2]
 8015c32:	b29b      	uxth	r3, r3
 8015c34:	4618      	mov	r0, r3
 8015c36:	f7f4 fcdb 	bl	800a5f0 <lwip_htons>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c40:	781b      	ldrb	r3, [r3, #0]
 8015c42:	f003 030f 	and.w	r3, r3, #15
 8015c46:	b2db      	uxtb	r3, r3
 8015c48:	009b      	lsls	r3, r3, #2
 8015c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015c4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015c52:	b29b      	uxth	r3, r3
 8015c54:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015c56:	429a      	cmp	r2, r3
 8015c58:	f0c0 8150 	bcc.w	8015efc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015c60:	b29b      	uxth	r3, r3
 8015c62:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015c64:	1ad3      	subs	r3, r2, r3
 8015c66:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015c68:	6878      	ldr	r0, [r7, #4]
 8015c6a:	f7f6 f8e5 	bl	800be38 <pbuf_clen>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015c72:	4b8c      	ldr	r3, [pc, #560]	; (8015ea4 <ip4_reass+0x2b0>)
 8015c74:	881b      	ldrh	r3, [r3, #0]
 8015c76:	461a      	mov	r2, r3
 8015c78:	8c3b      	ldrh	r3, [r7, #32]
 8015c7a:	4413      	add	r3, r2
 8015c7c:	2b0a      	cmp	r3, #10
 8015c7e:	dd10      	ble.n	8015ca2 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c80:	8c3b      	ldrh	r3, [r7, #32]
 8015c82:	4619      	mov	r1, r3
 8015c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c86:	f7ff fd81 	bl	801578c <ip_reass_remove_oldest_datagram>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f000 8137 	beq.w	8015f00 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015c92:	4b84      	ldr	r3, [pc, #528]	; (8015ea4 <ip4_reass+0x2b0>)
 8015c94:	881b      	ldrh	r3, [r3, #0]
 8015c96:	461a      	mov	r2, r3
 8015c98:	8c3b      	ldrh	r3, [r7, #32]
 8015c9a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015c9c:	2b0a      	cmp	r3, #10
 8015c9e:	f300 812f 	bgt.w	8015f00 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015ca2:	4b81      	ldr	r3, [pc, #516]	; (8015ea8 <ip4_reass+0x2b4>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	633b      	str	r3, [r7, #48]	; 0x30
 8015ca8:	e015      	b.n	8015cd6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cac:	695a      	ldr	r2, [r3, #20]
 8015cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb0:	68db      	ldr	r3, [r3, #12]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d10c      	bne.n	8015cd0 <ip4_reass+0xdc>
 8015cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cb8:	699a      	ldr	r2, [r3, #24]
 8015cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cbc:	691b      	ldr	r3, [r3, #16]
 8015cbe:	429a      	cmp	r2, r3
 8015cc0:	d106      	bne.n	8015cd0 <ip4_reass+0xdc>
 8015cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cc4:	899a      	ldrh	r2, [r3, #12]
 8015cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc8:	889b      	ldrh	r3, [r3, #4]
 8015cca:	b29b      	uxth	r3, r3
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d006      	beq.n	8015cde <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8015cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d1e6      	bne.n	8015caa <ip4_reass+0xb6>
 8015cdc:	e000      	b.n	8015ce0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015cde:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d109      	bne.n	8015cfa <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015ce6:	8c3b      	ldrh	r3, [r7, #32]
 8015ce8:	4619      	mov	r1, r3
 8015cea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015cec:	f7ff fdb0 	bl	8015850 <ip_reass_enqueue_new_datagram>
 8015cf0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d11c      	bne.n	8015d32 <ip4_reass+0x13e>
      goto nullreturn;
 8015cf8:	e105      	b.n	8015f06 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cfc:	88db      	ldrh	r3, [r3, #6]
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7f4 fc75 	bl	800a5f0 <lwip_htons>
 8015d06:	4603      	mov	r3, r0
 8015d08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d110      	bne.n	8015d32 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d12:	89db      	ldrh	r3, [r3, #14]
 8015d14:	4618      	mov	r0, r3
 8015d16:	f7f4 fc6b 	bl	800a5f0 <lwip_htons>
 8015d1a:	4603      	mov	r3, r0
 8015d1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d006      	beq.n	8015d32 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d26:	3308      	adds	r3, #8
 8015d28:	2214      	movs	r2, #20
 8015d2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f000 fe82 	bl	8016a36 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d34:	88db      	ldrh	r3, [r3, #6]
 8015d36:	b29b      	uxth	r3, r3
 8015d38:	f003 0320 	and.w	r3, r3, #32
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	bf0c      	ite	eq
 8015d40:	2301      	moveq	r3, #1
 8015d42:	2300      	movne	r3, #0
 8015d44:	b2db      	uxtb	r3, r3
 8015d46:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015d48:	69fb      	ldr	r3, [r7, #28]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d00e      	beq.n	8015d6c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d52:	4413      	add	r3, r2
 8015d54:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015d56:	8b7a      	ldrh	r2, [r7, #26]
 8015d58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015d5a:	429a      	cmp	r2, r3
 8015d5c:	f0c0 80a0 	bcc.w	8015ea0 <ip4_reass+0x2ac>
 8015d60:	8b7b      	ldrh	r3, [r7, #26]
 8015d62:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015d66:	4293      	cmp	r3, r2
 8015d68:	f200 809a 	bhi.w	8015ea0 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015d6c:	69fa      	ldr	r2, [r7, #28]
 8015d6e:	6879      	ldr	r1, [r7, #4]
 8015d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d72:	f7ff fdd5 	bl	8015920 <ip_reass_chain_frag_into_datagram_and_validate>
 8015d76:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015d78:	697b      	ldr	r3, [r7, #20]
 8015d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d7e:	f000 809b 	beq.w	8015eb8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015d82:	4b48      	ldr	r3, [pc, #288]	; (8015ea4 <ip4_reass+0x2b0>)
 8015d84:	881a      	ldrh	r2, [r3, #0]
 8015d86:	8c3b      	ldrh	r3, [r7, #32]
 8015d88:	4413      	add	r3, r2
 8015d8a:	b29a      	uxth	r2, r3
 8015d8c:	4b45      	ldr	r3, [pc, #276]	; (8015ea4 <ip4_reass+0x2b0>)
 8015d8e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015d90:	69fb      	ldr	r3, [r7, #28]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d00d      	beq.n	8015db2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015d96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015d98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d9a:	4413      	add	r3, r2
 8015d9c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da0:	8a7a      	ldrh	r2, [r7, #18]
 8015da2:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015da6:	7f9b      	ldrb	r3, [r3, #30]
 8015da8:	f043 0301 	orr.w	r3, r3, #1
 8015dac:	b2da      	uxtb	r2, r3
 8015dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015db0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015db2:	697b      	ldr	r3, [r7, #20]
 8015db4:	2b01      	cmp	r3, #1
 8015db6:	d171      	bne.n	8015e9c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dba:	8b9b      	ldrh	r3, [r3, #28]
 8015dbc:	3314      	adds	r3, #20
 8015dbe:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dc2:	685b      	ldr	r3, [r3, #4]
 8015dc4:	685b      	ldr	r3, [r3, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015dd4:	3308      	adds	r3, #8
 8015dd6:	2214      	movs	r2, #20
 8015dd8:	4619      	mov	r1, r3
 8015dda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ddc:	f000 fe2b 	bl	8016a36 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015de0:	8a3b      	ldrh	r3, [r7, #16]
 8015de2:	4618      	mov	r0, r3
 8015de4:	f7f4 fc04 	bl	800a5f0 <lwip_htons>
 8015de8:	4603      	mov	r3, r0
 8015dea:	461a      	mov	r2, r3
 8015dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015df2:	2200      	movs	r2, #0
 8015df4:	719a      	strb	r2, [r3, #6]
 8015df6:	2200      	movs	r2, #0
 8015df8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	729a      	strb	r2, [r3, #10]
 8015e00:	2200      	movs	r2, #0
 8015e02:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e06:	685b      	ldr	r3, [r3, #4]
 8015e08:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015e0a:	e00d      	b.n	8015e28 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015e12:	2114      	movs	r1, #20
 8015e14:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015e16:	f7f5 fefb 	bl	800bc10 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015e1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f7f6 f84b 	bl	800beb8 <pbuf_cat>
      r = iprh->next_pbuf;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d1ee      	bne.n	8015e0c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015e2e:	4b1e      	ldr	r3, [pc, #120]	; (8015ea8 <ip4_reass+0x2b4>)
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e34:	429a      	cmp	r2, r3
 8015e36:	d102      	bne.n	8015e3e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015e38:	2300      	movs	r3, #0
 8015e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e3c:	e010      	b.n	8015e60 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e3e:	4b1a      	ldr	r3, [pc, #104]	; (8015ea8 <ip4_reass+0x2b4>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e44:	e007      	b.n	8015e56 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d006      	beq.n	8015e5e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d1f4      	bne.n	8015e46 <ip4_reass+0x252>
 8015e5c:	e000      	b.n	8015e60 <ip4_reass+0x26c>
          break;
 8015e5e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015e64:	f7ff fd2e 	bl	80158c4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f7f5 ffe5 	bl	800be38 <pbuf_clen>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015e72:	4b0c      	ldr	r3, [pc, #48]	; (8015ea4 <ip4_reass+0x2b0>)
 8015e74:	881b      	ldrh	r3, [r3, #0]
 8015e76:	8c3a      	ldrh	r2, [r7, #32]
 8015e78:	429a      	cmp	r2, r3
 8015e7a:	d906      	bls.n	8015e8a <ip4_reass+0x296>
 8015e7c:	4b0b      	ldr	r3, [pc, #44]	; (8015eac <ip4_reass+0x2b8>)
 8015e7e:	f240 229b 	movw	r2, #667	; 0x29b
 8015e82:	490b      	ldr	r1, [pc, #44]	; (8015eb0 <ip4_reass+0x2bc>)
 8015e84:	480b      	ldr	r0, [pc, #44]	; (8015eb4 <ip4_reass+0x2c0>)
 8015e86:	f000 fcb7 	bl	80167f8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015e8a:	4b06      	ldr	r3, [pc, #24]	; (8015ea4 <ip4_reass+0x2b0>)
 8015e8c:	881a      	ldrh	r2, [r3, #0]
 8015e8e:	8c3b      	ldrh	r3, [r7, #32]
 8015e90:	1ad3      	subs	r3, r2, r3
 8015e92:	b29a      	uxth	r2, r3
 8015e94:	4b03      	ldr	r3, [pc, #12]	; (8015ea4 <ip4_reass+0x2b0>)
 8015e96:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	e038      	b.n	8015f0e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	e036      	b.n	8015f0e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015ea0:	bf00      	nop
 8015ea2:	e00a      	b.n	8015eba <ip4_reass+0x2c6>
 8015ea4:	2000dfc0 	.word	0x2000dfc0
 8015ea8:	2000dfbc 	.word	0x2000dfbc
 8015eac:	0801a310 	.word	0x0801a310
 8015eb0:	0801a480 	.word	0x0801a480
 8015eb4:	0801a358 	.word	0x0801a358
    goto nullreturn_ipr;
 8015eb8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d106      	bne.n	8015ece <ip4_reass+0x2da>
 8015ec0:	4b15      	ldr	r3, [pc, #84]	; (8015f18 <ip4_reass+0x324>)
 8015ec2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015ec6:	4915      	ldr	r1, [pc, #84]	; (8015f1c <ip4_reass+0x328>)
 8015ec8:	4815      	ldr	r0, [pc, #84]	; (8015f20 <ip4_reass+0x32c>)
 8015eca:	f000 fc95 	bl	80167f8 <iprintf>
  if (ipr->p == NULL) {
 8015ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ed0:	685b      	ldr	r3, [r3, #4]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d116      	bne.n	8015f04 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015ed6:	4b13      	ldr	r3, [pc, #76]	; (8015f24 <ip4_reass+0x330>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015edc:	429a      	cmp	r2, r3
 8015ede:	d006      	beq.n	8015eee <ip4_reass+0x2fa>
 8015ee0:	4b0d      	ldr	r3, [pc, #52]	; (8015f18 <ip4_reass+0x324>)
 8015ee2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015ee6:	4910      	ldr	r1, [pc, #64]	; (8015f28 <ip4_reass+0x334>)
 8015ee8:	480d      	ldr	r0, [pc, #52]	; (8015f20 <ip4_reass+0x32c>)
 8015eea:	f000 fc85 	bl	80167f8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015eee:	2100      	movs	r1, #0
 8015ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015ef2:	f7ff fce7 	bl	80158c4 <ip_reass_dequeue_datagram>
 8015ef6:	e006      	b.n	8015f06 <ip4_reass+0x312>
    goto nullreturn;
 8015ef8:	bf00      	nop
 8015efa:	e004      	b.n	8015f06 <ip4_reass+0x312>
    goto nullreturn;
 8015efc:	bf00      	nop
 8015efe:	e002      	b.n	8015f06 <ip4_reass+0x312>
      goto nullreturn;
 8015f00:	bf00      	nop
 8015f02:	e000      	b.n	8015f06 <ip4_reass+0x312>
  }

nullreturn:
 8015f04:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015f06:	6878      	ldr	r0, [r7, #4]
 8015f08:	f7f5 ff08 	bl	800bd1c <pbuf_free>
  return NULL;
 8015f0c:	2300      	movs	r3, #0
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3738      	adds	r7, #56	; 0x38
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	0801a310 	.word	0x0801a310
 8015f1c:	0801a49c 	.word	0x0801a49c
 8015f20:	0801a358 	.word	0x0801a358
 8015f24:	2000dfbc 	.word	0x2000dfbc
 8015f28:	0801a4a8 	.word	0x0801a4a8

08015f2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015f30:	2005      	movs	r0, #5
 8015f32:	f7f5 f835 	bl	800afa0 <memp_malloc>
 8015f36:	4603      	mov	r3, r0
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	bd80      	pop	{r7, pc}

08015f3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d106      	bne.n	8015f58 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015f4a:	4b07      	ldr	r3, [pc, #28]	; (8015f68 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015f4c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015f50:	4906      	ldr	r1, [pc, #24]	; (8015f6c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015f52:	4807      	ldr	r0, [pc, #28]	; (8015f70 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015f54:	f000 fc50 	bl	80167f8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015f58:	6879      	ldr	r1, [r7, #4]
 8015f5a:	2005      	movs	r0, #5
 8015f5c:	f7f5 f896 	bl	800b08c <memp_free>
}
 8015f60:	bf00      	nop
 8015f62:	3708      	adds	r7, #8
 8015f64:	46bd      	mov	sp, r7
 8015f66:	bd80      	pop	{r7, pc}
 8015f68:	0801a310 	.word	0x0801a310
 8015f6c:	0801a4c8 	.word	0x0801a4c8
 8015f70:	0801a358 	.word	0x0801a358

08015f74 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b084      	sub	sp, #16
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d106      	bne.n	8015f94 <ipfrag_free_pbuf_custom+0x20>
 8015f86:	4b11      	ldr	r3, [pc, #68]	; (8015fcc <ipfrag_free_pbuf_custom+0x58>)
 8015f88:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015f8c:	4910      	ldr	r1, [pc, #64]	; (8015fd0 <ipfrag_free_pbuf_custom+0x5c>)
 8015f8e:	4811      	ldr	r0, [pc, #68]	; (8015fd4 <ipfrag_free_pbuf_custom+0x60>)
 8015f90:	f000 fc32 	bl	80167f8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015f94:	68fa      	ldr	r2, [r7, #12]
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	429a      	cmp	r2, r3
 8015f9a:	d006      	beq.n	8015faa <ipfrag_free_pbuf_custom+0x36>
 8015f9c:	4b0b      	ldr	r3, [pc, #44]	; (8015fcc <ipfrag_free_pbuf_custom+0x58>)
 8015f9e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015fa2:	490d      	ldr	r1, [pc, #52]	; (8015fd8 <ipfrag_free_pbuf_custom+0x64>)
 8015fa4:	480b      	ldr	r0, [pc, #44]	; (8015fd4 <ipfrag_free_pbuf_custom+0x60>)
 8015fa6:	f000 fc27 	bl	80167f8 <iprintf>
  if (pcr->original != NULL) {
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	695b      	ldr	r3, [r3, #20]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d004      	beq.n	8015fbc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	695b      	ldr	r3, [r3, #20]
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	f7f5 feb0 	bl	800bd1c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f7ff ffbd 	bl	8015f3c <ip_frag_free_pbuf_custom_ref>
}
 8015fc2:	bf00      	nop
 8015fc4:	3710      	adds	r7, #16
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bd80      	pop	{r7, pc}
 8015fca:	bf00      	nop
 8015fcc:	0801a310 	.word	0x0801a310
 8015fd0:	0801a4d4 	.word	0x0801a4d4
 8015fd4:	0801a358 	.word	0x0801a358
 8015fd8:	0801a4e0 	.word	0x0801a4e0

08015fdc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b094      	sub	sp, #80	; 0x50
 8015fe0:	af02      	add	r7, sp, #8
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	60b9      	str	r1, [r7, #8]
 8015fe6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015fee:	68bb      	ldr	r3, [r7, #8]
 8015ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ff2:	3b14      	subs	r3, #20
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	da00      	bge.n	8015ffa <ip4_frag+0x1e>
 8015ff8:	3307      	adds	r3, #7
 8015ffa:	10db      	asrs	r3, r3, #3
 8015ffc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015ffe:	2314      	movs	r3, #20
 8016000:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801600a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801600c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801600e:	781b      	ldrb	r3, [r3, #0]
 8016010:	f003 030f 	and.w	r3, r3, #15
 8016014:	b2db      	uxtb	r3, r3
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	b2db      	uxtb	r3, r3
 801601a:	2b14      	cmp	r3, #20
 801601c:	d002      	beq.n	8016024 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801601e:	f06f 0305 	mvn.w	r3, #5
 8016022:	e110      	b.n	8016246 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	895b      	ldrh	r3, [r3, #10]
 8016028:	2b13      	cmp	r3, #19
 801602a:	d809      	bhi.n	8016040 <ip4_frag+0x64>
 801602c:	4b88      	ldr	r3, [pc, #544]	; (8016250 <ip4_frag+0x274>)
 801602e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016032:	4988      	ldr	r1, [pc, #544]	; (8016254 <ip4_frag+0x278>)
 8016034:	4888      	ldr	r0, [pc, #544]	; (8016258 <ip4_frag+0x27c>)
 8016036:	f000 fbdf 	bl	80167f8 <iprintf>
 801603a:	f06f 0305 	mvn.w	r3, #5
 801603e:	e102      	b.n	8016246 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016042:	88db      	ldrh	r3, [r3, #6]
 8016044:	b29b      	uxth	r3, r3
 8016046:	4618      	mov	r0, r3
 8016048:	f7f4 fad2 	bl	800a5f0 <lwip_htons>
 801604c:	4603      	mov	r3, r0
 801604e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016050:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016052:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016056:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801605a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801605c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016060:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	891b      	ldrh	r3, [r3, #8]
 8016066:	3b14      	subs	r3, #20
 8016068:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801606c:	e0e1      	b.n	8016232 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801606e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016070:	00db      	lsls	r3, r3, #3
 8016072:	b29b      	uxth	r3, r3
 8016074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016078:	4293      	cmp	r3, r2
 801607a:	bf28      	it	cs
 801607c:	4613      	movcs	r3, r2
 801607e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016080:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016084:	2114      	movs	r1, #20
 8016086:	200e      	movs	r0, #14
 8016088:	f7f5 fb64 	bl	800b754 <pbuf_alloc>
 801608c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801608e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016090:	2b00      	cmp	r3, #0
 8016092:	f000 80d5 	beq.w	8016240 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016098:	895b      	ldrh	r3, [r3, #10]
 801609a:	2b13      	cmp	r3, #19
 801609c:	d806      	bhi.n	80160ac <ip4_frag+0xd0>
 801609e:	4b6c      	ldr	r3, [pc, #432]	; (8016250 <ip4_frag+0x274>)
 80160a0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80160a4:	496d      	ldr	r1, [pc, #436]	; (801625c <ip4_frag+0x280>)
 80160a6:	486c      	ldr	r0, [pc, #432]	; (8016258 <ip4_frag+0x27c>)
 80160a8:	f000 fba6 	bl	80167f8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80160ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ae:	685b      	ldr	r3, [r3, #4]
 80160b0:	2214      	movs	r2, #20
 80160b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80160b4:	4618      	mov	r0, r3
 80160b6:	f000 fcbe 	bl	8016a36 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80160ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160bc:	685b      	ldr	r3, [r3, #4]
 80160be:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80160c0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160c2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80160c6:	e064      	b.n	8016192 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	895a      	ldrh	r2, [r3, #10]
 80160cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80160ce:	1ad3      	subs	r3, r2, r3
 80160d0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	895b      	ldrh	r3, [r3, #10]
 80160d6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80160d8:	429a      	cmp	r2, r3
 80160da:	d906      	bls.n	80160ea <ip4_frag+0x10e>
 80160dc:	4b5c      	ldr	r3, [pc, #368]	; (8016250 <ip4_frag+0x274>)
 80160de:	f240 322d 	movw	r2, #813	; 0x32d
 80160e2:	495f      	ldr	r1, [pc, #380]	; (8016260 <ip4_frag+0x284>)
 80160e4:	485c      	ldr	r0, [pc, #368]	; (8016258 <ip4_frag+0x27c>)
 80160e6:	f000 fb87 	bl	80167f8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80160ea:	8bfa      	ldrh	r2, [r7, #30]
 80160ec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80160f0:	4293      	cmp	r3, r2
 80160f2:	bf28      	it	cs
 80160f4:	4613      	movcs	r3, r2
 80160f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80160fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d105      	bne.n	801610e <ip4_frag+0x132>
        poff = 0;
 8016102:	2300      	movs	r3, #0
 8016104:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	60fb      	str	r3, [r7, #12]
        continue;
 801610c:	e041      	b.n	8016192 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801610e:	f7ff ff0d 	bl	8015f2c <ip_frag_alloc_pbuf_custom_ref>
 8016112:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8016114:	69bb      	ldr	r3, [r7, #24]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d103      	bne.n	8016122 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801611a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801611c:	f7f5 fdfe 	bl	800bd1c <pbuf_free>
        goto memerr;
 8016120:	e08f      	b.n	8016242 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016122:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016128:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801612a:	4413      	add	r3, r2
 801612c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016130:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016134:	9201      	str	r2, [sp, #4]
 8016136:	9300      	str	r3, [sp, #0]
 8016138:	4603      	mov	r3, r0
 801613a:	2241      	movs	r2, #65	; 0x41
 801613c:	2000      	movs	r0, #0
 801613e:	f7f5 fc33 	bl	800b9a8 <pbuf_alloced_custom>
 8016142:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016144:	697b      	ldr	r3, [r7, #20]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d106      	bne.n	8016158 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801614a:	69b8      	ldr	r0, [r7, #24]
 801614c:	f7ff fef6 	bl	8015f3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016150:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016152:	f7f5 fde3 	bl	800bd1c <pbuf_free>
        goto memerr;
 8016156:	e074      	b.n	8016242 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016158:	68f8      	ldr	r0, [r7, #12]
 801615a:	f7f5 fe85 	bl	800be68 <pbuf_ref>
      pcr->original = p;
 801615e:	69bb      	ldr	r3, [r7, #24]
 8016160:	68fa      	ldr	r2, [r7, #12]
 8016162:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016164:	69bb      	ldr	r3, [r7, #24]
 8016166:	4a3f      	ldr	r2, [pc, #252]	; (8016264 <ip4_frag+0x288>)
 8016168:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801616a:	6979      	ldr	r1, [r7, #20]
 801616c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801616e:	f7f5 fea3 	bl	800beb8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016172:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8016176:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801617a:	1ad3      	subs	r3, r2, r3
 801617c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016180:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016184:	2b00      	cmp	r3, #0
 8016186:	d004      	beq.n	8016192 <ip4_frag+0x1b6>
        poff = 0;
 8016188:	2300      	movs	r3, #0
 801618a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016192:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016196:	2b00      	cmp	r3, #0
 8016198:	d196      	bne.n	80160c8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801619a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801619c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80161a0:	4413      	add	r3, r2
 80161a2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80161a4:	68bb      	ldr	r3, [r7, #8]
 80161a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80161a8:	f1a3 0213 	sub.w	r2, r3, #19
 80161ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161b0:	429a      	cmp	r2, r3
 80161b2:	bfcc      	ite	gt
 80161b4:	2301      	movgt	r3, #1
 80161b6:	2300      	movle	r3, #0
 80161b8:	b2db      	uxtb	r3, r3
 80161ba:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80161bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80161c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80161c6:	6a3b      	ldr	r3, [r7, #32]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d002      	beq.n	80161d2 <ip4_frag+0x1f6>
 80161cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d003      	beq.n	80161da <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80161d2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80161d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80161da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80161dc:	4618      	mov	r0, r3
 80161de:	f7f4 fa07 	bl	800a5f0 <lwip_htons>
 80161e2:	4603      	mov	r3, r0
 80161e4:	461a      	mov	r2, r3
 80161e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161e8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80161ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80161ec:	3314      	adds	r3, #20
 80161ee:	b29b      	uxth	r3, r3
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7f4 f9fd 	bl	800a5f0 <lwip_htons>
 80161f6:	4603      	mov	r3, r0
 80161f8:	461a      	mov	r2, r3
 80161fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161fc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80161fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016200:	2200      	movs	r2, #0
 8016202:	729a      	strb	r2, [r3, #10]
 8016204:	2200      	movs	r2, #0
 8016206:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	695b      	ldr	r3, [r3, #20]
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016210:	68b8      	ldr	r0, [r7, #8]
 8016212:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016216:	f7f5 fd81 	bl	800bd1c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801621a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801621e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016220:	1ad3      	subs	r3, r2, r3
 8016222:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8016226:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801622a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801622c:	4413      	add	r3, r2
 801622e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016232:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016236:	2b00      	cmp	r3, #0
 8016238:	f47f af19 	bne.w	801606e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801623c:	2300      	movs	r3, #0
 801623e:	e002      	b.n	8016246 <ip4_frag+0x26a>
      goto memerr;
 8016240:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016242:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016246:	4618      	mov	r0, r3
 8016248:	3748      	adds	r7, #72	; 0x48
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	0801a310 	.word	0x0801a310
 8016254:	0801a4ec 	.word	0x0801a4ec
 8016258:	0801a358 	.word	0x0801a358
 801625c:	0801a508 	.word	0x0801a508
 8016260:	0801a528 	.word	0x0801a528
 8016264:	08015f75 	.word	0x08015f75

08016268 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016268:	b580      	push	{r7, lr}
 801626a:	b086      	sub	sp, #24
 801626c:	af00      	add	r7, sp, #0
 801626e:	6078      	str	r0, [r7, #4]
 8016270:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016272:	230e      	movs	r3, #14
 8016274:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	895b      	ldrh	r3, [r3, #10]
 801627a:	2b0e      	cmp	r3, #14
 801627c:	d96e      	bls.n	801635c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	7bdb      	ldrb	r3, [r3, #15]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d106      	bne.n	8016294 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801628c:	3301      	adds	r3, #1
 801628e:	b2da      	uxtb	r2, r3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801629a:	693b      	ldr	r3, [r7, #16]
 801629c:	7b1a      	ldrb	r2, [r3, #12]
 801629e:	7b5b      	ldrb	r3, [r3, #13]
 80162a0:	021b      	lsls	r3, r3, #8
 80162a2:	4313      	orrs	r3, r2
 80162a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80162a6:	693b      	ldr	r3, [r7, #16]
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	f003 0301 	and.w	r3, r3, #1
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d023      	beq.n	80162fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80162b2:	693b      	ldr	r3, [r7, #16]
 80162b4:	781b      	ldrb	r3, [r3, #0]
 80162b6:	2b01      	cmp	r3, #1
 80162b8:	d10f      	bne.n	80162da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80162ba:	693b      	ldr	r3, [r7, #16]
 80162bc:	785b      	ldrb	r3, [r3, #1]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d11b      	bne.n	80162fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80162c2:	693b      	ldr	r3, [r7, #16]
 80162c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80162c6:	2b5e      	cmp	r3, #94	; 0x5e
 80162c8:	d117      	bne.n	80162fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	7b5b      	ldrb	r3, [r3, #13]
 80162ce:	f043 0310 	orr.w	r3, r3, #16
 80162d2:	b2da      	uxtb	r2, r3
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	735a      	strb	r2, [r3, #13]
 80162d8:	e00f      	b.n	80162fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80162da:	693b      	ldr	r3, [r7, #16]
 80162dc:	2206      	movs	r2, #6
 80162de:	4928      	ldr	r1, [pc, #160]	; (8016380 <ethernet_input+0x118>)
 80162e0:	4618      	mov	r0, r3
 80162e2:	f000 fade 	bl	80168a2 <memcmp>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d106      	bne.n	80162fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	7b5b      	ldrb	r3, [r3, #13]
 80162f0:	f043 0308 	orr.w	r3, r3, #8
 80162f4:	b2da      	uxtb	r2, r3
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80162fa:	89fb      	ldrh	r3, [r7, #14]
 80162fc:	2b08      	cmp	r3, #8
 80162fe:	d003      	beq.n	8016308 <ethernet_input+0xa0>
 8016300:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016304:	d014      	beq.n	8016330 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016306:	e032      	b.n	801636e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016308:	683b      	ldr	r3, [r7, #0]
 801630a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801630e:	f003 0308 	and.w	r3, r3, #8
 8016312:	2b00      	cmp	r3, #0
 8016314:	d024      	beq.n	8016360 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016316:	8afb      	ldrh	r3, [r7, #22]
 8016318:	4619      	mov	r1, r3
 801631a:	6878      	ldr	r0, [r7, #4]
 801631c:	f7f5 fc78 	bl	800bc10 <pbuf_remove_header>
 8016320:	4603      	mov	r3, r0
 8016322:	2b00      	cmp	r3, #0
 8016324:	d11e      	bne.n	8016364 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016326:	6839      	ldr	r1, [r7, #0]
 8016328:	6878      	ldr	r0, [r7, #4]
 801632a:	f7fe ff03 	bl	8015134 <ip4_input>
      break;
 801632e:	e013      	b.n	8016358 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016336:	f003 0308 	and.w	r3, r3, #8
 801633a:	2b00      	cmp	r3, #0
 801633c:	d014      	beq.n	8016368 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801633e:	8afb      	ldrh	r3, [r7, #22]
 8016340:	4619      	mov	r1, r3
 8016342:	6878      	ldr	r0, [r7, #4]
 8016344:	f7f5 fc64 	bl	800bc10 <pbuf_remove_header>
 8016348:	4603      	mov	r3, r0
 801634a:	2b00      	cmp	r3, #0
 801634c:	d10e      	bne.n	801636c <ethernet_input+0x104>
        etharp_input(p, netif);
 801634e:	6839      	ldr	r1, [r7, #0]
 8016350:	6878      	ldr	r0, [r7, #4]
 8016352:	f7fe f89f 	bl	8014494 <etharp_input>
      break;
 8016356:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016358:	2300      	movs	r3, #0
 801635a:	e00c      	b.n	8016376 <ethernet_input+0x10e>
    goto free_and_return;
 801635c:	bf00      	nop
 801635e:	e006      	b.n	801636e <ethernet_input+0x106>
        goto free_and_return;
 8016360:	bf00      	nop
 8016362:	e004      	b.n	801636e <ethernet_input+0x106>
        goto free_and_return;
 8016364:	bf00      	nop
 8016366:	e002      	b.n	801636e <ethernet_input+0x106>
        goto free_and_return;
 8016368:	bf00      	nop
 801636a:	e000      	b.n	801636e <ethernet_input+0x106>
        goto free_and_return;
 801636c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f7f5 fcd4 	bl	800bd1c <pbuf_free>
  return ERR_OK;
 8016374:	2300      	movs	r3, #0
}
 8016376:	4618      	mov	r0, r3
 8016378:	3718      	adds	r7, #24
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	0801a764 	.word	0x0801a764

08016384 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016384:	b580      	push	{r7, lr}
 8016386:	b086      	sub	sp, #24
 8016388:	af00      	add	r7, sp, #0
 801638a:	60f8      	str	r0, [r7, #12]
 801638c:	60b9      	str	r1, [r7, #8]
 801638e:	607a      	str	r2, [r7, #4]
 8016390:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016392:	8c3b      	ldrh	r3, [r7, #32]
 8016394:	4618      	mov	r0, r3
 8016396:	f7f4 f92b 	bl	800a5f0 <lwip_htons>
 801639a:	4603      	mov	r3, r0
 801639c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801639e:	210e      	movs	r1, #14
 80163a0:	68b8      	ldr	r0, [r7, #8]
 80163a2:	f7f5 fc25 	bl	800bbf0 <pbuf_add_header>
 80163a6:	4603      	mov	r3, r0
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d125      	bne.n	80163f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80163ac:	68bb      	ldr	r3, [r7, #8]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80163b2:	693b      	ldr	r3, [r7, #16]
 80163b4:	8afa      	ldrh	r2, [r7, #22]
 80163b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80163b8:	693b      	ldr	r3, [r7, #16]
 80163ba:	2206      	movs	r2, #6
 80163bc:	6839      	ldr	r1, [r7, #0]
 80163be:	4618      	mov	r0, r3
 80163c0:	f000 fb39 	bl	8016a36 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80163c4:	693b      	ldr	r3, [r7, #16]
 80163c6:	3306      	adds	r3, #6
 80163c8:	2206      	movs	r2, #6
 80163ca:	6879      	ldr	r1, [r7, #4]
 80163cc:	4618      	mov	r0, r3
 80163ce:	f000 fb32 	bl	8016a36 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80163d8:	2b06      	cmp	r3, #6
 80163da:	d006      	beq.n	80163ea <ethernet_output+0x66>
 80163dc:	4b0a      	ldr	r3, [pc, #40]	; (8016408 <ethernet_output+0x84>)
 80163de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80163e2:	490a      	ldr	r1, [pc, #40]	; (801640c <ethernet_output+0x88>)
 80163e4:	480a      	ldr	r0, [pc, #40]	; (8016410 <ethernet_output+0x8c>)
 80163e6:	f000 fa07 	bl	80167f8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	699b      	ldr	r3, [r3, #24]
 80163ee:	68b9      	ldr	r1, [r7, #8]
 80163f0:	68f8      	ldr	r0, [r7, #12]
 80163f2:	4798      	blx	r3
 80163f4:	4603      	mov	r3, r0
 80163f6:	e002      	b.n	80163fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80163f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80163fa:	f06f 0301 	mvn.w	r3, #1
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3718      	adds	r7, #24
 8016402:	46bd      	mov	sp, r7
 8016404:	bd80      	pop	{r7, pc}
 8016406:	bf00      	nop
 8016408:	0801a538 	.word	0x0801a538
 801640c:	0801a570 	.word	0x0801a570
 8016410:	0801a5a4 	.word	0x0801a5a4

08016414 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b082      	sub	sp, #8
 8016418:	af00      	add	r7, sp, #0
 801641a:	6078      	str	r0, [r7, #4]
 801641c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	2200      	movs	r2, #0
 8016422:	2104      	movs	r1, #4
 8016424:	4618      	mov	r0, r3
 8016426:	f7f0 fbbb 	bl	8006ba0 <osMessageQueueNew>
 801642a:	4602      	mov	r2, r0
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d102      	bne.n	801643e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016438:	f04f 33ff 	mov.w	r3, #4294967295
 801643c:	e000      	b.n	8016440 <sys_mbox_new+0x2c>

  return ERR_OK;
 801643e:	2300      	movs	r3, #0
}
 8016440:	4618      	mov	r0, r3
 8016442:	3708      	adds	r7, #8
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}

08016448 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	6818      	ldr	r0, [r3, #0]
 8016456:	4639      	mov	r1, r7
 8016458:	2300      	movs	r3, #0
 801645a:	2200      	movs	r2, #0
 801645c:	f7f0 fc26 	bl	8006cac <osMessageQueuePut>
 8016460:	4603      	mov	r3, r0
 8016462:	2b00      	cmp	r3, #0
 8016464:	d102      	bne.n	801646c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016466:	2300      	movs	r3, #0
 8016468:	73fb      	strb	r3, [r7, #15]
 801646a:	e001      	b.n	8016470 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801646c:	23ff      	movs	r3, #255	; 0xff
 801646e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016474:	4618      	mov	r0, r3
 8016476:	3710      	adds	r7, #16
 8016478:	46bd      	mov	sp, r7
 801647a:	bd80      	pop	{r7, pc}

0801647c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b086      	sub	sp, #24
 8016480:	af00      	add	r7, sp, #0
 8016482:	60f8      	str	r0, [r7, #12]
 8016484:	60b9      	str	r1, [r7, #8]
 8016486:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016488:	f7ef ffec 	bl	8006464 <osKernelGetTickCount>
 801648c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d013      	beq.n	80164bc <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	6818      	ldr	r0, [r3, #0]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2200      	movs	r2, #0
 801649c:	68b9      	ldr	r1, [r7, #8]
 801649e:	f7f0 fc79 	bl	8006d94 <osMessageQueueGet>
 80164a2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80164a4:	693b      	ldr	r3, [r7, #16]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d105      	bne.n	80164b6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80164aa:	f7ef ffdb 	bl	8006464 <osKernelGetTickCount>
 80164ae:	4602      	mov	r2, r0
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	1ad3      	subs	r3, r2, r3
 80164b4:	e00f      	b.n	80164d6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80164b6:	f04f 33ff 	mov.w	r3, #4294967295
 80164ba:	e00c      	b.n	80164d6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	6818      	ldr	r0, [r3, #0]
 80164c0:	f04f 33ff 	mov.w	r3, #4294967295
 80164c4:	2200      	movs	r2, #0
 80164c6:	68b9      	ldr	r1, [r7, #8]
 80164c8:	f7f0 fc64 	bl	8006d94 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 80164cc:	f7ef ffca 	bl	8006464 <osKernelGetTickCount>
 80164d0:	4602      	mov	r2, r0
 80164d2:	697b      	ldr	r3, [r7, #20]
 80164d4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3718      	adds	r7, #24
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80164de:	b480      	push	{r7}
 80164e0:	b083      	sub	sp, #12
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d101      	bne.n	80164f2 <sys_mbox_valid+0x14>
    return 0;
 80164ee:	2300      	movs	r3, #0
 80164f0:	e000      	b.n	80164f4 <sys_mbox_valid+0x16>
  else
    return 1;
 80164f2:	2301      	movs	r3, #1
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	370c      	adds	r7, #12
 80164f8:	46bd      	mov	sp, r7
 80164fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164fe:	4770      	bx	lr

08016500 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016504:	2000      	movs	r0, #0
 8016506:	f7f0 f8a9 	bl	800665c <osMutexNew>
 801650a:	4603      	mov	r3, r0
 801650c:	4a01      	ldr	r2, [pc, #4]	; (8016514 <sys_init+0x14>)
 801650e:	6013      	str	r3, [r2, #0]
#endif
}
 8016510:	bf00      	nop
 8016512:	bd80      	pop	{r7, pc}
 8016514:	2000dfc4 	.word	0x2000dfc4

08016518 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016518:	b580      	push	{r7, lr}
 801651a:	b082      	sub	sp, #8
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016520:	2000      	movs	r0, #0
 8016522:	f7f0 f89b 	bl	800665c <osMutexNew>
 8016526:	4602      	mov	r2, r0
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	2b00      	cmp	r3, #0
 8016532:	d102      	bne.n	801653a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016534:	f04f 33ff 	mov.w	r3, #4294967295
 8016538:	e000      	b.n	801653c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801653a:	2300      	movs	r3, #0
}
 801653c:	4618      	mov	r0, r3
 801653e:	3708      	adds	r7, #8
 8016540:	46bd      	mov	sp, r7
 8016542:	bd80      	pop	{r7, pc}

08016544 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016544:	b580      	push	{r7, lr}
 8016546:	b082      	sub	sp, #8
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801654c:	687b      	ldr	r3, [r7, #4]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	f04f 31ff 	mov.w	r1, #4294967295
 8016554:	4618      	mov	r0, r3
 8016556:	f7f0 f91b 	bl	8006790 <osMutexAcquire>
#endif
}
 801655a:	bf00      	nop
 801655c:	3708      	adds	r7, #8
 801655e:	46bd      	mov	sp, r7
 8016560:	bd80      	pop	{r7, pc}

08016562 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016562:	b580      	push	{r7, lr}
 8016564:	b082      	sub	sp, #8
 8016566:	af00      	add	r7, sp, #0
 8016568:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	4618      	mov	r0, r3
 8016570:	f7f0 f96c 	bl	800684c <osMutexRelease>
}
 8016574:	bf00      	nop
 8016576:	3708      	adds	r7, #8
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b08e      	sub	sp, #56	; 0x38
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	60b9      	str	r1, [r7, #8]
 8016586:	607a      	str	r2, [r7, #4]
 8016588:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801658a:	f107 0314 	add.w	r3, r7, #20
 801658e:	2224      	movs	r2, #36	; 0x24
 8016590:	2100      	movs	r1, #0
 8016592:	4618      	mov	r0, r3
 8016594:	f000 f995 	bl	80168c2 <memset>
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	617b      	str	r3, [r7, #20]
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	62bb      	str	r3, [r7, #40]	; 0x28
 80165a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 80165a4:	f107 0314 	add.w	r3, r7, #20
 80165a8:	461a      	mov	r2, r3
 80165aa:	6879      	ldr	r1, [r7, #4]
 80165ac:	68b8      	ldr	r0, [r7, #8]
 80165ae:	f7ef ff81 	bl	80064b4 <osThreadNew>
 80165b2:	4603      	mov	r3, r0
#endif
}
 80165b4:	4618      	mov	r0, r3
 80165b6:	3738      	adds	r7, #56	; 0x38
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}

080165bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80165bc:	b580      	push	{r7, lr}
 80165be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 80165c0:	4b04      	ldr	r3, [pc, #16]	; (80165d4 <sys_arch_protect+0x18>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	f04f 31ff 	mov.w	r1, #4294967295
 80165c8:	4618      	mov	r0, r3
 80165ca:	f7f0 f8e1 	bl	8006790 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 80165ce:	2301      	movs	r3, #1
}
 80165d0:	4618      	mov	r0, r3
 80165d2:	bd80      	pop	{r7, pc}
 80165d4:	2000dfc4 	.word	0x2000dfc4

080165d8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80165d8:	b580      	push	{r7, lr}
 80165da:	b082      	sub	sp, #8
 80165dc:	af00      	add	r7, sp, #0
 80165de:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80165e0:	4b04      	ldr	r3, [pc, #16]	; (80165f4 <sys_arch_unprotect+0x1c>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7f0 f931 	bl	800684c <osMutexRelease>
}
 80165ea:	bf00      	nop
 80165ec:	3708      	adds	r7, #8
 80165ee:	46bd      	mov	sp, r7
 80165f0:	bd80      	pop	{r7, pc}
 80165f2:	bf00      	nop
 80165f4:	2000dfc4 	.word	0x2000dfc4

080165f8 <rand>:
 80165f8:	4b16      	ldr	r3, [pc, #88]	; (8016654 <rand+0x5c>)
 80165fa:	b510      	push	{r4, lr}
 80165fc:	681c      	ldr	r4, [r3, #0]
 80165fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016600:	b9b3      	cbnz	r3, 8016630 <rand+0x38>
 8016602:	2018      	movs	r0, #24
 8016604:	f000 fa90 	bl	8016b28 <malloc>
 8016608:	4602      	mov	r2, r0
 801660a:	6320      	str	r0, [r4, #48]	; 0x30
 801660c:	b920      	cbnz	r0, 8016618 <rand+0x20>
 801660e:	4b12      	ldr	r3, [pc, #72]	; (8016658 <rand+0x60>)
 8016610:	4812      	ldr	r0, [pc, #72]	; (801665c <rand+0x64>)
 8016612:	2152      	movs	r1, #82	; 0x52
 8016614:	f000 fa1e 	bl	8016a54 <__assert_func>
 8016618:	4911      	ldr	r1, [pc, #68]	; (8016660 <rand+0x68>)
 801661a:	4b12      	ldr	r3, [pc, #72]	; (8016664 <rand+0x6c>)
 801661c:	e9c0 1300 	strd	r1, r3, [r0]
 8016620:	4b11      	ldr	r3, [pc, #68]	; (8016668 <rand+0x70>)
 8016622:	6083      	str	r3, [r0, #8]
 8016624:	230b      	movs	r3, #11
 8016626:	8183      	strh	r3, [r0, #12]
 8016628:	2100      	movs	r1, #0
 801662a:	2001      	movs	r0, #1
 801662c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016630:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016632:	480e      	ldr	r0, [pc, #56]	; (801666c <rand+0x74>)
 8016634:	690b      	ldr	r3, [r1, #16]
 8016636:	694c      	ldr	r4, [r1, #20]
 8016638:	4a0d      	ldr	r2, [pc, #52]	; (8016670 <rand+0x78>)
 801663a:	4358      	muls	r0, r3
 801663c:	fb02 0004 	mla	r0, r2, r4, r0
 8016640:	fba3 3202 	umull	r3, r2, r3, r2
 8016644:	3301      	adds	r3, #1
 8016646:	eb40 0002 	adc.w	r0, r0, r2
 801664a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801664e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016652:	bd10      	pop	{r4, pc}
 8016654:	20000078 	.word	0x20000078
 8016658:	0801a772 	.word	0x0801a772
 801665c:	0801a789 	.word	0x0801a789
 8016660:	abcd330e 	.word	0xabcd330e
 8016664:	e66d1234 	.word	0xe66d1234
 8016668:	0005deec 	.word	0x0005deec
 801666c:	5851f42d 	.word	0x5851f42d
 8016670:	4c957f2d 	.word	0x4c957f2d

08016674 <std>:
 8016674:	2300      	movs	r3, #0
 8016676:	b510      	push	{r4, lr}
 8016678:	4604      	mov	r4, r0
 801667a:	e9c0 3300 	strd	r3, r3, [r0]
 801667e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016682:	6083      	str	r3, [r0, #8]
 8016684:	8181      	strh	r1, [r0, #12]
 8016686:	6643      	str	r3, [r0, #100]	; 0x64
 8016688:	81c2      	strh	r2, [r0, #14]
 801668a:	6183      	str	r3, [r0, #24]
 801668c:	4619      	mov	r1, r3
 801668e:	2208      	movs	r2, #8
 8016690:	305c      	adds	r0, #92	; 0x5c
 8016692:	f000 f916 	bl	80168c2 <memset>
 8016696:	4b0d      	ldr	r3, [pc, #52]	; (80166cc <std+0x58>)
 8016698:	6263      	str	r3, [r4, #36]	; 0x24
 801669a:	4b0d      	ldr	r3, [pc, #52]	; (80166d0 <std+0x5c>)
 801669c:	62a3      	str	r3, [r4, #40]	; 0x28
 801669e:	4b0d      	ldr	r3, [pc, #52]	; (80166d4 <std+0x60>)
 80166a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166a2:	4b0d      	ldr	r3, [pc, #52]	; (80166d8 <std+0x64>)
 80166a4:	6323      	str	r3, [r4, #48]	; 0x30
 80166a6:	4b0d      	ldr	r3, [pc, #52]	; (80166dc <std+0x68>)
 80166a8:	6224      	str	r4, [r4, #32]
 80166aa:	429c      	cmp	r4, r3
 80166ac:	d006      	beq.n	80166bc <std+0x48>
 80166ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80166b2:	4294      	cmp	r4, r2
 80166b4:	d002      	beq.n	80166bc <std+0x48>
 80166b6:	33d0      	adds	r3, #208	; 0xd0
 80166b8:	429c      	cmp	r4, r3
 80166ba:	d105      	bne.n	80166c8 <std+0x54>
 80166bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80166c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80166c4:	f000 b9b4 	b.w	8016a30 <__retarget_lock_init_recursive>
 80166c8:	bd10      	pop	{r4, pc}
 80166ca:	bf00      	nop
 80166cc:	0801681d 	.word	0x0801681d
 80166d0:	0801683f 	.word	0x0801683f
 80166d4:	08016877 	.word	0x08016877
 80166d8:	0801689b 	.word	0x0801689b
 80166dc:	2000dfc8 	.word	0x2000dfc8

080166e0 <stdio_exit_handler>:
 80166e0:	4a02      	ldr	r2, [pc, #8]	; (80166ec <stdio_exit_handler+0xc>)
 80166e2:	4903      	ldr	r1, [pc, #12]	; (80166f0 <stdio_exit_handler+0x10>)
 80166e4:	4803      	ldr	r0, [pc, #12]	; (80166f4 <stdio_exit_handler+0x14>)
 80166e6:	f000 b869 	b.w	80167bc <_fwalk_sglue>
 80166ea:	bf00      	nop
 80166ec:	20000020 	.word	0x20000020
 80166f0:	08017345 	.word	0x08017345
 80166f4:	2000002c 	.word	0x2000002c

080166f8 <cleanup_stdio>:
 80166f8:	6841      	ldr	r1, [r0, #4]
 80166fa:	4b0c      	ldr	r3, [pc, #48]	; (801672c <cleanup_stdio+0x34>)
 80166fc:	4299      	cmp	r1, r3
 80166fe:	b510      	push	{r4, lr}
 8016700:	4604      	mov	r4, r0
 8016702:	d001      	beq.n	8016708 <cleanup_stdio+0x10>
 8016704:	f000 fe1e 	bl	8017344 <_fflush_r>
 8016708:	68a1      	ldr	r1, [r4, #8]
 801670a:	4b09      	ldr	r3, [pc, #36]	; (8016730 <cleanup_stdio+0x38>)
 801670c:	4299      	cmp	r1, r3
 801670e:	d002      	beq.n	8016716 <cleanup_stdio+0x1e>
 8016710:	4620      	mov	r0, r4
 8016712:	f000 fe17 	bl	8017344 <_fflush_r>
 8016716:	68e1      	ldr	r1, [r4, #12]
 8016718:	4b06      	ldr	r3, [pc, #24]	; (8016734 <cleanup_stdio+0x3c>)
 801671a:	4299      	cmp	r1, r3
 801671c:	d004      	beq.n	8016728 <cleanup_stdio+0x30>
 801671e:	4620      	mov	r0, r4
 8016720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016724:	f000 be0e 	b.w	8017344 <_fflush_r>
 8016728:	bd10      	pop	{r4, pc}
 801672a:	bf00      	nop
 801672c:	2000dfc8 	.word	0x2000dfc8
 8016730:	2000e030 	.word	0x2000e030
 8016734:	2000e098 	.word	0x2000e098

08016738 <global_stdio_init.part.0>:
 8016738:	b510      	push	{r4, lr}
 801673a:	4b0b      	ldr	r3, [pc, #44]	; (8016768 <global_stdio_init.part.0+0x30>)
 801673c:	4c0b      	ldr	r4, [pc, #44]	; (801676c <global_stdio_init.part.0+0x34>)
 801673e:	4a0c      	ldr	r2, [pc, #48]	; (8016770 <global_stdio_init.part.0+0x38>)
 8016740:	601a      	str	r2, [r3, #0]
 8016742:	4620      	mov	r0, r4
 8016744:	2200      	movs	r2, #0
 8016746:	2104      	movs	r1, #4
 8016748:	f7ff ff94 	bl	8016674 <std>
 801674c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016750:	2201      	movs	r2, #1
 8016752:	2109      	movs	r1, #9
 8016754:	f7ff ff8e 	bl	8016674 <std>
 8016758:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801675c:	2202      	movs	r2, #2
 801675e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016762:	2112      	movs	r1, #18
 8016764:	f7ff bf86 	b.w	8016674 <std>
 8016768:	2000e100 	.word	0x2000e100
 801676c:	2000dfc8 	.word	0x2000dfc8
 8016770:	080166e1 	.word	0x080166e1

08016774 <__sfp_lock_acquire>:
 8016774:	4801      	ldr	r0, [pc, #4]	; (801677c <__sfp_lock_acquire+0x8>)
 8016776:	f000 b95c 	b.w	8016a32 <__retarget_lock_acquire_recursive>
 801677a:	bf00      	nop
 801677c:	2000e109 	.word	0x2000e109

08016780 <__sfp_lock_release>:
 8016780:	4801      	ldr	r0, [pc, #4]	; (8016788 <__sfp_lock_release+0x8>)
 8016782:	f000 b957 	b.w	8016a34 <__retarget_lock_release_recursive>
 8016786:	bf00      	nop
 8016788:	2000e109 	.word	0x2000e109

0801678c <__sinit>:
 801678c:	b510      	push	{r4, lr}
 801678e:	4604      	mov	r4, r0
 8016790:	f7ff fff0 	bl	8016774 <__sfp_lock_acquire>
 8016794:	6a23      	ldr	r3, [r4, #32]
 8016796:	b11b      	cbz	r3, 80167a0 <__sinit+0x14>
 8016798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801679c:	f7ff bff0 	b.w	8016780 <__sfp_lock_release>
 80167a0:	4b04      	ldr	r3, [pc, #16]	; (80167b4 <__sinit+0x28>)
 80167a2:	6223      	str	r3, [r4, #32]
 80167a4:	4b04      	ldr	r3, [pc, #16]	; (80167b8 <__sinit+0x2c>)
 80167a6:	681b      	ldr	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d1f5      	bne.n	8016798 <__sinit+0xc>
 80167ac:	f7ff ffc4 	bl	8016738 <global_stdio_init.part.0>
 80167b0:	e7f2      	b.n	8016798 <__sinit+0xc>
 80167b2:	bf00      	nop
 80167b4:	080166f9 	.word	0x080166f9
 80167b8:	2000e100 	.word	0x2000e100

080167bc <_fwalk_sglue>:
 80167bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167c0:	4607      	mov	r7, r0
 80167c2:	4688      	mov	r8, r1
 80167c4:	4614      	mov	r4, r2
 80167c6:	2600      	movs	r6, #0
 80167c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80167cc:	f1b9 0901 	subs.w	r9, r9, #1
 80167d0:	d505      	bpl.n	80167de <_fwalk_sglue+0x22>
 80167d2:	6824      	ldr	r4, [r4, #0]
 80167d4:	2c00      	cmp	r4, #0
 80167d6:	d1f7      	bne.n	80167c8 <_fwalk_sglue+0xc>
 80167d8:	4630      	mov	r0, r6
 80167da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80167de:	89ab      	ldrh	r3, [r5, #12]
 80167e0:	2b01      	cmp	r3, #1
 80167e2:	d907      	bls.n	80167f4 <_fwalk_sglue+0x38>
 80167e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80167e8:	3301      	adds	r3, #1
 80167ea:	d003      	beq.n	80167f4 <_fwalk_sglue+0x38>
 80167ec:	4629      	mov	r1, r5
 80167ee:	4638      	mov	r0, r7
 80167f0:	47c0      	blx	r8
 80167f2:	4306      	orrs	r6, r0
 80167f4:	3568      	adds	r5, #104	; 0x68
 80167f6:	e7e9      	b.n	80167cc <_fwalk_sglue+0x10>

080167f8 <iprintf>:
 80167f8:	b40f      	push	{r0, r1, r2, r3}
 80167fa:	b507      	push	{r0, r1, r2, lr}
 80167fc:	4906      	ldr	r1, [pc, #24]	; (8016818 <iprintf+0x20>)
 80167fe:	ab04      	add	r3, sp, #16
 8016800:	6808      	ldr	r0, [r1, #0]
 8016802:	f853 2b04 	ldr.w	r2, [r3], #4
 8016806:	6881      	ldr	r1, [r0, #8]
 8016808:	9301      	str	r3, [sp, #4]
 801680a:	f000 fa6b 	bl	8016ce4 <_vfiprintf_r>
 801680e:	b003      	add	sp, #12
 8016810:	f85d eb04 	ldr.w	lr, [sp], #4
 8016814:	b004      	add	sp, #16
 8016816:	4770      	bx	lr
 8016818:	20000078 	.word	0x20000078

0801681c <__sread>:
 801681c:	b510      	push	{r4, lr}
 801681e:	460c      	mov	r4, r1
 8016820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016824:	f000 f8ce 	bl	80169c4 <_read_r>
 8016828:	2800      	cmp	r0, #0
 801682a:	bfab      	itete	ge
 801682c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801682e:	89a3      	ldrhlt	r3, [r4, #12]
 8016830:	181b      	addge	r3, r3, r0
 8016832:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016836:	bfac      	ite	ge
 8016838:	6563      	strge	r3, [r4, #84]	; 0x54
 801683a:	81a3      	strhlt	r3, [r4, #12]
 801683c:	bd10      	pop	{r4, pc}

0801683e <__swrite>:
 801683e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016842:	461f      	mov	r7, r3
 8016844:	898b      	ldrh	r3, [r1, #12]
 8016846:	05db      	lsls	r3, r3, #23
 8016848:	4605      	mov	r5, r0
 801684a:	460c      	mov	r4, r1
 801684c:	4616      	mov	r6, r2
 801684e:	d505      	bpl.n	801685c <__swrite+0x1e>
 8016850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016854:	2302      	movs	r3, #2
 8016856:	2200      	movs	r2, #0
 8016858:	f000 f8a2 	bl	80169a0 <_lseek_r>
 801685c:	89a3      	ldrh	r3, [r4, #12]
 801685e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016862:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016866:	81a3      	strh	r3, [r4, #12]
 8016868:	4632      	mov	r2, r6
 801686a:	463b      	mov	r3, r7
 801686c:	4628      	mov	r0, r5
 801686e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016872:	f7ea b9f1 	b.w	8000c58 <_write_r>

08016876 <__sseek>:
 8016876:	b510      	push	{r4, lr}
 8016878:	460c      	mov	r4, r1
 801687a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801687e:	f000 f88f 	bl	80169a0 <_lseek_r>
 8016882:	1c43      	adds	r3, r0, #1
 8016884:	89a3      	ldrh	r3, [r4, #12]
 8016886:	bf15      	itete	ne
 8016888:	6560      	strne	r0, [r4, #84]	; 0x54
 801688a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801688e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016892:	81a3      	strheq	r3, [r4, #12]
 8016894:	bf18      	it	ne
 8016896:	81a3      	strhne	r3, [r4, #12]
 8016898:	bd10      	pop	{r4, pc}

0801689a <__sclose>:
 801689a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801689e:	f000 b819 	b.w	80168d4 <_close_r>

080168a2 <memcmp>:
 80168a2:	b510      	push	{r4, lr}
 80168a4:	3901      	subs	r1, #1
 80168a6:	4402      	add	r2, r0
 80168a8:	4290      	cmp	r0, r2
 80168aa:	d101      	bne.n	80168b0 <memcmp+0xe>
 80168ac:	2000      	movs	r0, #0
 80168ae:	e005      	b.n	80168bc <memcmp+0x1a>
 80168b0:	7803      	ldrb	r3, [r0, #0]
 80168b2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80168b6:	42a3      	cmp	r3, r4
 80168b8:	d001      	beq.n	80168be <memcmp+0x1c>
 80168ba:	1b18      	subs	r0, r3, r4
 80168bc:	bd10      	pop	{r4, pc}
 80168be:	3001      	adds	r0, #1
 80168c0:	e7f2      	b.n	80168a8 <memcmp+0x6>

080168c2 <memset>:
 80168c2:	4402      	add	r2, r0
 80168c4:	4603      	mov	r3, r0
 80168c6:	4293      	cmp	r3, r2
 80168c8:	d100      	bne.n	80168cc <memset+0xa>
 80168ca:	4770      	bx	lr
 80168cc:	f803 1b01 	strb.w	r1, [r3], #1
 80168d0:	e7f9      	b.n	80168c6 <memset+0x4>
	...

080168d4 <_close_r>:
 80168d4:	b538      	push	{r3, r4, r5, lr}
 80168d6:	4d06      	ldr	r5, [pc, #24]	; (80168f0 <_close_r+0x1c>)
 80168d8:	2300      	movs	r3, #0
 80168da:	4604      	mov	r4, r0
 80168dc:	4608      	mov	r0, r1
 80168de:	602b      	str	r3, [r5, #0]
 80168e0:	f7eb fd07 	bl	80022f2 <_close>
 80168e4:	1c43      	adds	r3, r0, #1
 80168e6:	d102      	bne.n	80168ee <_close_r+0x1a>
 80168e8:	682b      	ldr	r3, [r5, #0]
 80168ea:	b103      	cbz	r3, 80168ee <_close_r+0x1a>
 80168ec:	6023      	str	r3, [r4, #0]
 80168ee:	bd38      	pop	{r3, r4, r5, pc}
 80168f0:	2000e104 	.word	0x2000e104

080168f4 <_reclaim_reent>:
 80168f4:	4b29      	ldr	r3, [pc, #164]	; (801699c <_reclaim_reent+0xa8>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	4283      	cmp	r3, r0
 80168fa:	b570      	push	{r4, r5, r6, lr}
 80168fc:	4604      	mov	r4, r0
 80168fe:	d04b      	beq.n	8016998 <_reclaim_reent+0xa4>
 8016900:	69c3      	ldr	r3, [r0, #28]
 8016902:	b143      	cbz	r3, 8016916 <_reclaim_reent+0x22>
 8016904:	68db      	ldr	r3, [r3, #12]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d144      	bne.n	8016994 <_reclaim_reent+0xa0>
 801690a:	69e3      	ldr	r3, [r4, #28]
 801690c:	6819      	ldr	r1, [r3, #0]
 801690e:	b111      	cbz	r1, 8016916 <_reclaim_reent+0x22>
 8016910:	4620      	mov	r0, r4
 8016912:	f000 f8bd 	bl	8016a90 <_free_r>
 8016916:	6961      	ldr	r1, [r4, #20]
 8016918:	b111      	cbz	r1, 8016920 <_reclaim_reent+0x2c>
 801691a:	4620      	mov	r0, r4
 801691c:	f000 f8b8 	bl	8016a90 <_free_r>
 8016920:	69e1      	ldr	r1, [r4, #28]
 8016922:	b111      	cbz	r1, 801692a <_reclaim_reent+0x36>
 8016924:	4620      	mov	r0, r4
 8016926:	f000 f8b3 	bl	8016a90 <_free_r>
 801692a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801692c:	b111      	cbz	r1, 8016934 <_reclaim_reent+0x40>
 801692e:	4620      	mov	r0, r4
 8016930:	f000 f8ae 	bl	8016a90 <_free_r>
 8016934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016936:	b111      	cbz	r1, 801693e <_reclaim_reent+0x4a>
 8016938:	4620      	mov	r0, r4
 801693a:	f000 f8a9 	bl	8016a90 <_free_r>
 801693e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016940:	b111      	cbz	r1, 8016948 <_reclaim_reent+0x54>
 8016942:	4620      	mov	r0, r4
 8016944:	f000 f8a4 	bl	8016a90 <_free_r>
 8016948:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801694a:	b111      	cbz	r1, 8016952 <_reclaim_reent+0x5e>
 801694c:	4620      	mov	r0, r4
 801694e:	f000 f89f 	bl	8016a90 <_free_r>
 8016952:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016954:	b111      	cbz	r1, 801695c <_reclaim_reent+0x68>
 8016956:	4620      	mov	r0, r4
 8016958:	f000 f89a 	bl	8016a90 <_free_r>
 801695c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801695e:	b111      	cbz	r1, 8016966 <_reclaim_reent+0x72>
 8016960:	4620      	mov	r0, r4
 8016962:	f000 f895 	bl	8016a90 <_free_r>
 8016966:	6a23      	ldr	r3, [r4, #32]
 8016968:	b1b3      	cbz	r3, 8016998 <_reclaim_reent+0xa4>
 801696a:	4620      	mov	r0, r4
 801696c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016970:	4718      	bx	r3
 8016972:	5949      	ldr	r1, [r1, r5]
 8016974:	b941      	cbnz	r1, 8016988 <_reclaim_reent+0x94>
 8016976:	3504      	adds	r5, #4
 8016978:	69e3      	ldr	r3, [r4, #28]
 801697a:	2d80      	cmp	r5, #128	; 0x80
 801697c:	68d9      	ldr	r1, [r3, #12]
 801697e:	d1f8      	bne.n	8016972 <_reclaim_reent+0x7e>
 8016980:	4620      	mov	r0, r4
 8016982:	f000 f885 	bl	8016a90 <_free_r>
 8016986:	e7c0      	b.n	801690a <_reclaim_reent+0x16>
 8016988:	680e      	ldr	r6, [r1, #0]
 801698a:	4620      	mov	r0, r4
 801698c:	f000 f880 	bl	8016a90 <_free_r>
 8016990:	4631      	mov	r1, r6
 8016992:	e7ef      	b.n	8016974 <_reclaim_reent+0x80>
 8016994:	2500      	movs	r5, #0
 8016996:	e7ef      	b.n	8016978 <_reclaim_reent+0x84>
 8016998:	bd70      	pop	{r4, r5, r6, pc}
 801699a:	bf00      	nop
 801699c:	20000078 	.word	0x20000078

080169a0 <_lseek_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4d07      	ldr	r5, [pc, #28]	; (80169c0 <_lseek_r+0x20>)
 80169a4:	4604      	mov	r4, r0
 80169a6:	4608      	mov	r0, r1
 80169a8:	4611      	mov	r1, r2
 80169aa:	2200      	movs	r2, #0
 80169ac:	602a      	str	r2, [r5, #0]
 80169ae:	461a      	mov	r2, r3
 80169b0:	f7eb fcc6 	bl	8002340 <_lseek>
 80169b4:	1c43      	adds	r3, r0, #1
 80169b6:	d102      	bne.n	80169be <_lseek_r+0x1e>
 80169b8:	682b      	ldr	r3, [r5, #0]
 80169ba:	b103      	cbz	r3, 80169be <_lseek_r+0x1e>
 80169bc:	6023      	str	r3, [r4, #0]
 80169be:	bd38      	pop	{r3, r4, r5, pc}
 80169c0:	2000e104 	.word	0x2000e104

080169c4 <_read_r>:
 80169c4:	b538      	push	{r3, r4, r5, lr}
 80169c6:	4d07      	ldr	r5, [pc, #28]	; (80169e4 <_read_r+0x20>)
 80169c8:	4604      	mov	r4, r0
 80169ca:	4608      	mov	r0, r1
 80169cc:	4611      	mov	r1, r2
 80169ce:	2200      	movs	r2, #0
 80169d0:	602a      	str	r2, [r5, #0]
 80169d2:	461a      	mov	r2, r3
 80169d4:	f7eb fc70 	bl	80022b8 <_read>
 80169d8:	1c43      	adds	r3, r0, #1
 80169da:	d102      	bne.n	80169e2 <_read_r+0x1e>
 80169dc:	682b      	ldr	r3, [r5, #0]
 80169de:	b103      	cbz	r3, 80169e2 <_read_r+0x1e>
 80169e0:	6023      	str	r3, [r4, #0]
 80169e2:	bd38      	pop	{r3, r4, r5, pc}
 80169e4:	2000e104 	.word	0x2000e104

080169e8 <__libc_init_array>:
 80169e8:	b570      	push	{r4, r5, r6, lr}
 80169ea:	4d0d      	ldr	r5, [pc, #52]	; (8016a20 <__libc_init_array+0x38>)
 80169ec:	4c0d      	ldr	r4, [pc, #52]	; (8016a24 <__libc_init_array+0x3c>)
 80169ee:	1b64      	subs	r4, r4, r5
 80169f0:	10a4      	asrs	r4, r4, #2
 80169f2:	2600      	movs	r6, #0
 80169f4:	42a6      	cmp	r6, r4
 80169f6:	d109      	bne.n	8016a0c <__libc_init_array+0x24>
 80169f8:	4d0b      	ldr	r5, [pc, #44]	; (8016a28 <__libc_init_array+0x40>)
 80169fa:	4c0c      	ldr	r4, [pc, #48]	; (8016a2c <__libc_init_array+0x44>)
 80169fc:	f000 fe52 	bl	80176a4 <_init>
 8016a00:	1b64      	subs	r4, r4, r5
 8016a02:	10a4      	asrs	r4, r4, #2
 8016a04:	2600      	movs	r6, #0
 8016a06:	42a6      	cmp	r6, r4
 8016a08:	d105      	bne.n	8016a16 <__libc_init_array+0x2e>
 8016a0a:	bd70      	pop	{r4, r5, r6, pc}
 8016a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a10:	4798      	blx	r3
 8016a12:	3601      	adds	r6, #1
 8016a14:	e7ee      	b.n	80169f4 <__libc_init_array+0xc>
 8016a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8016a1a:	4798      	blx	r3
 8016a1c:	3601      	adds	r6, #1
 8016a1e:	e7f2      	b.n	8016a06 <__libc_init_array+0x1e>
 8016a20:	0801a858 	.word	0x0801a858
 8016a24:	0801a858 	.word	0x0801a858
 8016a28:	0801a858 	.word	0x0801a858
 8016a2c:	0801a85c 	.word	0x0801a85c

08016a30 <__retarget_lock_init_recursive>:
 8016a30:	4770      	bx	lr

08016a32 <__retarget_lock_acquire_recursive>:
 8016a32:	4770      	bx	lr

08016a34 <__retarget_lock_release_recursive>:
 8016a34:	4770      	bx	lr

08016a36 <memcpy>:
 8016a36:	440a      	add	r2, r1
 8016a38:	4291      	cmp	r1, r2
 8016a3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8016a3e:	d100      	bne.n	8016a42 <memcpy+0xc>
 8016a40:	4770      	bx	lr
 8016a42:	b510      	push	{r4, lr}
 8016a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016a4c:	4291      	cmp	r1, r2
 8016a4e:	d1f9      	bne.n	8016a44 <memcpy+0xe>
 8016a50:	bd10      	pop	{r4, pc}
	...

08016a54 <__assert_func>:
 8016a54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a56:	4614      	mov	r4, r2
 8016a58:	461a      	mov	r2, r3
 8016a5a:	4b09      	ldr	r3, [pc, #36]	; (8016a80 <__assert_func+0x2c>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4605      	mov	r5, r0
 8016a60:	68d8      	ldr	r0, [r3, #12]
 8016a62:	b14c      	cbz	r4, 8016a78 <__assert_func+0x24>
 8016a64:	4b07      	ldr	r3, [pc, #28]	; (8016a84 <__assert_func+0x30>)
 8016a66:	9100      	str	r1, [sp, #0]
 8016a68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a6c:	4906      	ldr	r1, [pc, #24]	; (8016a88 <__assert_func+0x34>)
 8016a6e:	462b      	mov	r3, r5
 8016a70:	f000 fc90 	bl	8017394 <fiprintf>
 8016a74:	f000 fd46 	bl	8017504 <abort>
 8016a78:	4b04      	ldr	r3, [pc, #16]	; (8016a8c <__assert_func+0x38>)
 8016a7a:	461c      	mov	r4, r3
 8016a7c:	e7f3      	b.n	8016a66 <__assert_func+0x12>
 8016a7e:	bf00      	nop
 8016a80:	20000078 	.word	0x20000078
 8016a84:	0801a7e1 	.word	0x0801a7e1
 8016a88:	0801a7ee 	.word	0x0801a7ee
 8016a8c:	0801a81c 	.word	0x0801a81c

08016a90 <_free_r>:
 8016a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016a92:	2900      	cmp	r1, #0
 8016a94:	d044      	beq.n	8016b20 <_free_r+0x90>
 8016a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a9a:	9001      	str	r0, [sp, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8016aa2:	bfb8      	it	lt
 8016aa4:	18e4      	addlt	r4, r4, r3
 8016aa6:	f000 f8e7 	bl	8016c78 <__malloc_lock>
 8016aaa:	4a1e      	ldr	r2, [pc, #120]	; (8016b24 <_free_r+0x94>)
 8016aac:	9801      	ldr	r0, [sp, #4]
 8016aae:	6813      	ldr	r3, [r2, #0]
 8016ab0:	b933      	cbnz	r3, 8016ac0 <_free_r+0x30>
 8016ab2:	6063      	str	r3, [r4, #4]
 8016ab4:	6014      	str	r4, [r2, #0]
 8016ab6:	b003      	add	sp, #12
 8016ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016abc:	f000 b8e2 	b.w	8016c84 <__malloc_unlock>
 8016ac0:	42a3      	cmp	r3, r4
 8016ac2:	d908      	bls.n	8016ad6 <_free_r+0x46>
 8016ac4:	6825      	ldr	r5, [r4, #0]
 8016ac6:	1961      	adds	r1, r4, r5
 8016ac8:	428b      	cmp	r3, r1
 8016aca:	bf01      	itttt	eq
 8016acc:	6819      	ldreq	r1, [r3, #0]
 8016ace:	685b      	ldreq	r3, [r3, #4]
 8016ad0:	1949      	addeq	r1, r1, r5
 8016ad2:	6021      	streq	r1, [r4, #0]
 8016ad4:	e7ed      	b.n	8016ab2 <_free_r+0x22>
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	685b      	ldr	r3, [r3, #4]
 8016ada:	b10b      	cbz	r3, 8016ae0 <_free_r+0x50>
 8016adc:	42a3      	cmp	r3, r4
 8016ade:	d9fa      	bls.n	8016ad6 <_free_r+0x46>
 8016ae0:	6811      	ldr	r1, [r2, #0]
 8016ae2:	1855      	adds	r5, r2, r1
 8016ae4:	42a5      	cmp	r5, r4
 8016ae6:	d10b      	bne.n	8016b00 <_free_r+0x70>
 8016ae8:	6824      	ldr	r4, [r4, #0]
 8016aea:	4421      	add	r1, r4
 8016aec:	1854      	adds	r4, r2, r1
 8016aee:	42a3      	cmp	r3, r4
 8016af0:	6011      	str	r1, [r2, #0]
 8016af2:	d1e0      	bne.n	8016ab6 <_free_r+0x26>
 8016af4:	681c      	ldr	r4, [r3, #0]
 8016af6:	685b      	ldr	r3, [r3, #4]
 8016af8:	6053      	str	r3, [r2, #4]
 8016afa:	440c      	add	r4, r1
 8016afc:	6014      	str	r4, [r2, #0]
 8016afe:	e7da      	b.n	8016ab6 <_free_r+0x26>
 8016b00:	d902      	bls.n	8016b08 <_free_r+0x78>
 8016b02:	230c      	movs	r3, #12
 8016b04:	6003      	str	r3, [r0, #0]
 8016b06:	e7d6      	b.n	8016ab6 <_free_r+0x26>
 8016b08:	6825      	ldr	r5, [r4, #0]
 8016b0a:	1961      	adds	r1, r4, r5
 8016b0c:	428b      	cmp	r3, r1
 8016b0e:	bf04      	itt	eq
 8016b10:	6819      	ldreq	r1, [r3, #0]
 8016b12:	685b      	ldreq	r3, [r3, #4]
 8016b14:	6063      	str	r3, [r4, #4]
 8016b16:	bf04      	itt	eq
 8016b18:	1949      	addeq	r1, r1, r5
 8016b1a:	6021      	streq	r1, [r4, #0]
 8016b1c:	6054      	str	r4, [r2, #4]
 8016b1e:	e7ca      	b.n	8016ab6 <_free_r+0x26>
 8016b20:	b003      	add	sp, #12
 8016b22:	bd30      	pop	{r4, r5, pc}
 8016b24:	2000e10c 	.word	0x2000e10c

08016b28 <malloc>:
 8016b28:	4b02      	ldr	r3, [pc, #8]	; (8016b34 <malloc+0xc>)
 8016b2a:	4601      	mov	r1, r0
 8016b2c:	6818      	ldr	r0, [r3, #0]
 8016b2e:	f000 b823 	b.w	8016b78 <_malloc_r>
 8016b32:	bf00      	nop
 8016b34:	20000078 	.word	0x20000078

08016b38 <sbrk_aligned>:
 8016b38:	b570      	push	{r4, r5, r6, lr}
 8016b3a:	4e0e      	ldr	r6, [pc, #56]	; (8016b74 <sbrk_aligned+0x3c>)
 8016b3c:	460c      	mov	r4, r1
 8016b3e:	6831      	ldr	r1, [r6, #0]
 8016b40:	4605      	mov	r5, r0
 8016b42:	b911      	cbnz	r1, 8016b4a <sbrk_aligned+0x12>
 8016b44:	f000 fcce 	bl	80174e4 <_sbrk_r>
 8016b48:	6030      	str	r0, [r6, #0]
 8016b4a:	4621      	mov	r1, r4
 8016b4c:	4628      	mov	r0, r5
 8016b4e:	f000 fcc9 	bl	80174e4 <_sbrk_r>
 8016b52:	1c43      	adds	r3, r0, #1
 8016b54:	d00a      	beq.n	8016b6c <sbrk_aligned+0x34>
 8016b56:	1cc4      	adds	r4, r0, #3
 8016b58:	f024 0403 	bic.w	r4, r4, #3
 8016b5c:	42a0      	cmp	r0, r4
 8016b5e:	d007      	beq.n	8016b70 <sbrk_aligned+0x38>
 8016b60:	1a21      	subs	r1, r4, r0
 8016b62:	4628      	mov	r0, r5
 8016b64:	f000 fcbe 	bl	80174e4 <_sbrk_r>
 8016b68:	3001      	adds	r0, #1
 8016b6a:	d101      	bne.n	8016b70 <sbrk_aligned+0x38>
 8016b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8016b70:	4620      	mov	r0, r4
 8016b72:	bd70      	pop	{r4, r5, r6, pc}
 8016b74:	2000e110 	.word	0x2000e110

08016b78 <_malloc_r>:
 8016b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016b7c:	1ccd      	adds	r5, r1, #3
 8016b7e:	f025 0503 	bic.w	r5, r5, #3
 8016b82:	3508      	adds	r5, #8
 8016b84:	2d0c      	cmp	r5, #12
 8016b86:	bf38      	it	cc
 8016b88:	250c      	movcc	r5, #12
 8016b8a:	2d00      	cmp	r5, #0
 8016b8c:	4607      	mov	r7, r0
 8016b8e:	db01      	blt.n	8016b94 <_malloc_r+0x1c>
 8016b90:	42a9      	cmp	r1, r5
 8016b92:	d905      	bls.n	8016ba0 <_malloc_r+0x28>
 8016b94:	230c      	movs	r3, #12
 8016b96:	603b      	str	r3, [r7, #0]
 8016b98:	2600      	movs	r6, #0
 8016b9a:	4630      	mov	r0, r6
 8016b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ba0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8016c74 <_malloc_r+0xfc>
 8016ba4:	f000 f868 	bl	8016c78 <__malloc_lock>
 8016ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8016bac:	461c      	mov	r4, r3
 8016bae:	bb5c      	cbnz	r4, 8016c08 <_malloc_r+0x90>
 8016bb0:	4629      	mov	r1, r5
 8016bb2:	4638      	mov	r0, r7
 8016bb4:	f7ff ffc0 	bl	8016b38 <sbrk_aligned>
 8016bb8:	1c43      	adds	r3, r0, #1
 8016bba:	4604      	mov	r4, r0
 8016bbc:	d155      	bne.n	8016c6a <_malloc_r+0xf2>
 8016bbe:	f8d8 4000 	ldr.w	r4, [r8]
 8016bc2:	4626      	mov	r6, r4
 8016bc4:	2e00      	cmp	r6, #0
 8016bc6:	d145      	bne.n	8016c54 <_malloc_r+0xdc>
 8016bc8:	2c00      	cmp	r4, #0
 8016bca:	d048      	beq.n	8016c5e <_malloc_r+0xe6>
 8016bcc:	6823      	ldr	r3, [r4, #0]
 8016bce:	4631      	mov	r1, r6
 8016bd0:	4638      	mov	r0, r7
 8016bd2:	eb04 0903 	add.w	r9, r4, r3
 8016bd6:	f000 fc85 	bl	80174e4 <_sbrk_r>
 8016bda:	4581      	cmp	r9, r0
 8016bdc:	d13f      	bne.n	8016c5e <_malloc_r+0xe6>
 8016bde:	6821      	ldr	r1, [r4, #0]
 8016be0:	1a6d      	subs	r5, r5, r1
 8016be2:	4629      	mov	r1, r5
 8016be4:	4638      	mov	r0, r7
 8016be6:	f7ff ffa7 	bl	8016b38 <sbrk_aligned>
 8016bea:	3001      	adds	r0, #1
 8016bec:	d037      	beq.n	8016c5e <_malloc_r+0xe6>
 8016bee:	6823      	ldr	r3, [r4, #0]
 8016bf0:	442b      	add	r3, r5
 8016bf2:	6023      	str	r3, [r4, #0]
 8016bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d038      	beq.n	8016c6e <_malloc_r+0xf6>
 8016bfc:	685a      	ldr	r2, [r3, #4]
 8016bfe:	42a2      	cmp	r2, r4
 8016c00:	d12b      	bne.n	8016c5a <_malloc_r+0xe2>
 8016c02:	2200      	movs	r2, #0
 8016c04:	605a      	str	r2, [r3, #4]
 8016c06:	e00f      	b.n	8016c28 <_malloc_r+0xb0>
 8016c08:	6822      	ldr	r2, [r4, #0]
 8016c0a:	1b52      	subs	r2, r2, r5
 8016c0c:	d41f      	bmi.n	8016c4e <_malloc_r+0xd6>
 8016c0e:	2a0b      	cmp	r2, #11
 8016c10:	d917      	bls.n	8016c42 <_malloc_r+0xca>
 8016c12:	1961      	adds	r1, r4, r5
 8016c14:	42a3      	cmp	r3, r4
 8016c16:	6025      	str	r5, [r4, #0]
 8016c18:	bf18      	it	ne
 8016c1a:	6059      	strne	r1, [r3, #4]
 8016c1c:	6863      	ldr	r3, [r4, #4]
 8016c1e:	bf08      	it	eq
 8016c20:	f8c8 1000 	streq.w	r1, [r8]
 8016c24:	5162      	str	r2, [r4, r5]
 8016c26:	604b      	str	r3, [r1, #4]
 8016c28:	4638      	mov	r0, r7
 8016c2a:	f104 060b 	add.w	r6, r4, #11
 8016c2e:	f000 f829 	bl	8016c84 <__malloc_unlock>
 8016c32:	f026 0607 	bic.w	r6, r6, #7
 8016c36:	1d23      	adds	r3, r4, #4
 8016c38:	1af2      	subs	r2, r6, r3
 8016c3a:	d0ae      	beq.n	8016b9a <_malloc_r+0x22>
 8016c3c:	1b9b      	subs	r3, r3, r6
 8016c3e:	50a3      	str	r3, [r4, r2]
 8016c40:	e7ab      	b.n	8016b9a <_malloc_r+0x22>
 8016c42:	42a3      	cmp	r3, r4
 8016c44:	6862      	ldr	r2, [r4, #4]
 8016c46:	d1dd      	bne.n	8016c04 <_malloc_r+0x8c>
 8016c48:	f8c8 2000 	str.w	r2, [r8]
 8016c4c:	e7ec      	b.n	8016c28 <_malloc_r+0xb0>
 8016c4e:	4623      	mov	r3, r4
 8016c50:	6864      	ldr	r4, [r4, #4]
 8016c52:	e7ac      	b.n	8016bae <_malloc_r+0x36>
 8016c54:	4634      	mov	r4, r6
 8016c56:	6876      	ldr	r6, [r6, #4]
 8016c58:	e7b4      	b.n	8016bc4 <_malloc_r+0x4c>
 8016c5a:	4613      	mov	r3, r2
 8016c5c:	e7cc      	b.n	8016bf8 <_malloc_r+0x80>
 8016c5e:	230c      	movs	r3, #12
 8016c60:	603b      	str	r3, [r7, #0]
 8016c62:	4638      	mov	r0, r7
 8016c64:	f000 f80e 	bl	8016c84 <__malloc_unlock>
 8016c68:	e797      	b.n	8016b9a <_malloc_r+0x22>
 8016c6a:	6025      	str	r5, [r4, #0]
 8016c6c:	e7dc      	b.n	8016c28 <_malloc_r+0xb0>
 8016c6e:	605b      	str	r3, [r3, #4]
 8016c70:	deff      	udf	#255	; 0xff
 8016c72:	bf00      	nop
 8016c74:	2000e10c 	.word	0x2000e10c

08016c78 <__malloc_lock>:
 8016c78:	4801      	ldr	r0, [pc, #4]	; (8016c80 <__malloc_lock+0x8>)
 8016c7a:	f7ff beda 	b.w	8016a32 <__retarget_lock_acquire_recursive>
 8016c7e:	bf00      	nop
 8016c80:	2000e108 	.word	0x2000e108

08016c84 <__malloc_unlock>:
 8016c84:	4801      	ldr	r0, [pc, #4]	; (8016c8c <__malloc_unlock+0x8>)
 8016c86:	f7ff bed5 	b.w	8016a34 <__retarget_lock_release_recursive>
 8016c8a:	bf00      	nop
 8016c8c:	2000e108 	.word	0x2000e108

08016c90 <__sfputc_r>:
 8016c90:	6893      	ldr	r3, [r2, #8]
 8016c92:	3b01      	subs	r3, #1
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	b410      	push	{r4}
 8016c98:	6093      	str	r3, [r2, #8]
 8016c9a:	da08      	bge.n	8016cae <__sfputc_r+0x1e>
 8016c9c:	6994      	ldr	r4, [r2, #24]
 8016c9e:	42a3      	cmp	r3, r4
 8016ca0:	db01      	blt.n	8016ca6 <__sfputc_r+0x16>
 8016ca2:	290a      	cmp	r1, #10
 8016ca4:	d103      	bne.n	8016cae <__sfputc_r+0x1e>
 8016ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016caa:	f000 bb85 	b.w	80173b8 <__swbuf_r>
 8016cae:	6813      	ldr	r3, [r2, #0]
 8016cb0:	1c58      	adds	r0, r3, #1
 8016cb2:	6010      	str	r0, [r2, #0]
 8016cb4:	7019      	strb	r1, [r3, #0]
 8016cb6:	4608      	mov	r0, r1
 8016cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016cbc:	4770      	bx	lr

08016cbe <__sfputs_r>:
 8016cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc0:	4606      	mov	r6, r0
 8016cc2:	460f      	mov	r7, r1
 8016cc4:	4614      	mov	r4, r2
 8016cc6:	18d5      	adds	r5, r2, r3
 8016cc8:	42ac      	cmp	r4, r5
 8016cca:	d101      	bne.n	8016cd0 <__sfputs_r+0x12>
 8016ccc:	2000      	movs	r0, #0
 8016cce:	e007      	b.n	8016ce0 <__sfputs_r+0x22>
 8016cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016cd4:	463a      	mov	r2, r7
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f7ff ffda 	bl	8016c90 <__sfputc_r>
 8016cdc:	1c43      	adds	r3, r0, #1
 8016cde:	d1f3      	bne.n	8016cc8 <__sfputs_r+0xa>
 8016ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016ce4 <_vfiprintf_r>:
 8016ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce8:	460d      	mov	r5, r1
 8016cea:	b09d      	sub	sp, #116	; 0x74
 8016cec:	4614      	mov	r4, r2
 8016cee:	4698      	mov	r8, r3
 8016cf0:	4606      	mov	r6, r0
 8016cf2:	b118      	cbz	r0, 8016cfc <_vfiprintf_r+0x18>
 8016cf4:	6a03      	ldr	r3, [r0, #32]
 8016cf6:	b90b      	cbnz	r3, 8016cfc <_vfiprintf_r+0x18>
 8016cf8:	f7ff fd48 	bl	801678c <__sinit>
 8016cfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016cfe:	07d9      	lsls	r1, r3, #31
 8016d00:	d405      	bmi.n	8016d0e <_vfiprintf_r+0x2a>
 8016d02:	89ab      	ldrh	r3, [r5, #12]
 8016d04:	059a      	lsls	r2, r3, #22
 8016d06:	d402      	bmi.n	8016d0e <_vfiprintf_r+0x2a>
 8016d08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d0a:	f7ff fe92 	bl	8016a32 <__retarget_lock_acquire_recursive>
 8016d0e:	89ab      	ldrh	r3, [r5, #12]
 8016d10:	071b      	lsls	r3, r3, #28
 8016d12:	d501      	bpl.n	8016d18 <_vfiprintf_r+0x34>
 8016d14:	692b      	ldr	r3, [r5, #16]
 8016d16:	b99b      	cbnz	r3, 8016d40 <_vfiprintf_r+0x5c>
 8016d18:	4629      	mov	r1, r5
 8016d1a:	4630      	mov	r0, r6
 8016d1c:	f000 fb8a 	bl	8017434 <__swsetup_r>
 8016d20:	b170      	cbz	r0, 8016d40 <_vfiprintf_r+0x5c>
 8016d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016d24:	07dc      	lsls	r4, r3, #31
 8016d26:	d504      	bpl.n	8016d32 <_vfiprintf_r+0x4e>
 8016d28:	f04f 30ff 	mov.w	r0, #4294967295
 8016d2c:	b01d      	add	sp, #116	; 0x74
 8016d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d32:	89ab      	ldrh	r3, [r5, #12]
 8016d34:	0598      	lsls	r0, r3, #22
 8016d36:	d4f7      	bmi.n	8016d28 <_vfiprintf_r+0x44>
 8016d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016d3a:	f7ff fe7b 	bl	8016a34 <__retarget_lock_release_recursive>
 8016d3e:	e7f3      	b.n	8016d28 <_vfiprintf_r+0x44>
 8016d40:	2300      	movs	r3, #0
 8016d42:	9309      	str	r3, [sp, #36]	; 0x24
 8016d44:	2320      	movs	r3, #32
 8016d46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d4e:	2330      	movs	r3, #48	; 0x30
 8016d50:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016f04 <_vfiprintf_r+0x220>
 8016d54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d58:	f04f 0901 	mov.w	r9, #1
 8016d5c:	4623      	mov	r3, r4
 8016d5e:	469a      	mov	sl, r3
 8016d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d64:	b10a      	cbz	r2, 8016d6a <_vfiprintf_r+0x86>
 8016d66:	2a25      	cmp	r2, #37	; 0x25
 8016d68:	d1f9      	bne.n	8016d5e <_vfiprintf_r+0x7a>
 8016d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8016d6e:	d00b      	beq.n	8016d88 <_vfiprintf_r+0xa4>
 8016d70:	465b      	mov	r3, fp
 8016d72:	4622      	mov	r2, r4
 8016d74:	4629      	mov	r1, r5
 8016d76:	4630      	mov	r0, r6
 8016d78:	f7ff ffa1 	bl	8016cbe <__sfputs_r>
 8016d7c:	3001      	adds	r0, #1
 8016d7e:	f000 80a9 	beq.w	8016ed4 <_vfiprintf_r+0x1f0>
 8016d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d84:	445a      	add	r2, fp
 8016d86:	9209      	str	r2, [sp, #36]	; 0x24
 8016d88:	f89a 3000 	ldrb.w	r3, [sl]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	f000 80a1 	beq.w	8016ed4 <_vfiprintf_r+0x1f0>
 8016d92:	2300      	movs	r3, #0
 8016d94:	f04f 32ff 	mov.w	r2, #4294967295
 8016d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d9c:	f10a 0a01 	add.w	sl, sl, #1
 8016da0:	9304      	str	r3, [sp, #16]
 8016da2:	9307      	str	r3, [sp, #28]
 8016da4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016da8:	931a      	str	r3, [sp, #104]	; 0x68
 8016daa:	4654      	mov	r4, sl
 8016dac:	2205      	movs	r2, #5
 8016dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016db2:	4854      	ldr	r0, [pc, #336]	; (8016f04 <_vfiprintf_r+0x220>)
 8016db4:	f7e9 fa94 	bl	80002e0 <memchr>
 8016db8:	9a04      	ldr	r2, [sp, #16]
 8016dba:	b9d8      	cbnz	r0, 8016df4 <_vfiprintf_r+0x110>
 8016dbc:	06d1      	lsls	r1, r2, #27
 8016dbe:	bf44      	itt	mi
 8016dc0:	2320      	movmi	r3, #32
 8016dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016dc6:	0713      	lsls	r3, r2, #28
 8016dc8:	bf44      	itt	mi
 8016dca:	232b      	movmi	r3, #43	; 0x2b
 8016dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8016dd4:	2b2a      	cmp	r3, #42	; 0x2a
 8016dd6:	d015      	beq.n	8016e04 <_vfiprintf_r+0x120>
 8016dd8:	9a07      	ldr	r2, [sp, #28]
 8016dda:	4654      	mov	r4, sl
 8016ddc:	2000      	movs	r0, #0
 8016dde:	f04f 0c0a 	mov.w	ip, #10
 8016de2:	4621      	mov	r1, r4
 8016de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016de8:	3b30      	subs	r3, #48	; 0x30
 8016dea:	2b09      	cmp	r3, #9
 8016dec:	d94d      	bls.n	8016e8a <_vfiprintf_r+0x1a6>
 8016dee:	b1b0      	cbz	r0, 8016e1e <_vfiprintf_r+0x13a>
 8016df0:	9207      	str	r2, [sp, #28]
 8016df2:	e014      	b.n	8016e1e <_vfiprintf_r+0x13a>
 8016df4:	eba0 0308 	sub.w	r3, r0, r8
 8016df8:	fa09 f303 	lsl.w	r3, r9, r3
 8016dfc:	4313      	orrs	r3, r2
 8016dfe:	9304      	str	r3, [sp, #16]
 8016e00:	46a2      	mov	sl, r4
 8016e02:	e7d2      	b.n	8016daa <_vfiprintf_r+0xc6>
 8016e04:	9b03      	ldr	r3, [sp, #12]
 8016e06:	1d19      	adds	r1, r3, #4
 8016e08:	681b      	ldr	r3, [r3, #0]
 8016e0a:	9103      	str	r1, [sp, #12]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	bfbb      	ittet	lt
 8016e10:	425b      	neglt	r3, r3
 8016e12:	f042 0202 	orrlt.w	r2, r2, #2
 8016e16:	9307      	strge	r3, [sp, #28]
 8016e18:	9307      	strlt	r3, [sp, #28]
 8016e1a:	bfb8      	it	lt
 8016e1c:	9204      	strlt	r2, [sp, #16]
 8016e1e:	7823      	ldrb	r3, [r4, #0]
 8016e20:	2b2e      	cmp	r3, #46	; 0x2e
 8016e22:	d10c      	bne.n	8016e3e <_vfiprintf_r+0x15a>
 8016e24:	7863      	ldrb	r3, [r4, #1]
 8016e26:	2b2a      	cmp	r3, #42	; 0x2a
 8016e28:	d134      	bne.n	8016e94 <_vfiprintf_r+0x1b0>
 8016e2a:	9b03      	ldr	r3, [sp, #12]
 8016e2c:	1d1a      	adds	r2, r3, #4
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	9203      	str	r2, [sp, #12]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	bfb8      	it	lt
 8016e36:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e3a:	3402      	adds	r4, #2
 8016e3c:	9305      	str	r3, [sp, #20]
 8016e3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016f14 <_vfiprintf_r+0x230>
 8016e42:	7821      	ldrb	r1, [r4, #0]
 8016e44:	2203      	movs	r2, #3
 8016e46:	4650      	mov	r0, sl
 8016e48:	f7e9 fa4a 	bl	80002e0 <memchr>
 8016e4c:	b138      	cbz	r0, 8016e5e <_vfiprintf_r+0x17a>
 8016e4e:	9b04      	ldr	r3, [sp, #16]
 8016e50:	eba0 000a 	sub.w	r0, r0, sl
 8016e54:	2240      	movs	r2, #64	; 0x40
 8016e56:	4082      	lsls	r2, r0
 8016e58:	4313      	orrs	r3, r2
 8016e5a:	3401      	adds	r4, #1
 8016e5c:	9304      	str	r3, [sp, #16]
 8016e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e62:	4829      	ldr	r0, [pc, #164]	; (8016f08 <_vfiprintf_r+0x224>)
 8016e64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e68:	2206      	movs	r2, #6
 8016e6a:	f7e9 fa39 	bl	80002e0 <memchr>
 8016e6e:	2800      	cmp	r0, #0
 8016e70:	d03f      	beq.n	8016ef2 <_vfiprintf_r+0x20e>
 8016e72:	4b26      	ldr	r3, [pc, #152]	; (8016f0c <_vfiprintf_r+0x228>)
 8016e74:	bb1b      	cbnz	r3, 8016ebe <_vfiprintf_r+0x1da>
 8016e76:	9b03      	ldr	r3, [sp, #12]
 8016e78:	3307      	adds	r3, #7
 8016e7a:	f023 0307 	bic.w	r3, r3, #7
 8016e7e:	3308      	adds	r3, #8
 8016e80:	9303      	str	r3, [sp, #12]
 8016e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e84:	443b      	add	r3, r7
 8016e86:	9309      	str	r3, [sp, #36]	; 0x24
 8016e88:	e768      	b.n	8016d5c <_vfiprintf_r+0x78>
 8016e8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e8e:	460c      	mov	r4, r1
 8016e90:	2001      	movs	r0, #1
 8016e92:	e7a6      	b.n	8016de2 <_vfiprintf_r+0xfe>
 8016e94:	2300      	movs	r3, #0
 8016e96:	3401      	adds	r4, #1
 8016e98:	9305      	str	r3, [sp, #20]
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	f04f 0c0a 	mov.w	ip, #10
 8016ea0:	4620      	mov	r0, r4
 8016ea2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ea6:	3a30      	subs	r2, #48	; 0x30
 8016ea8:	2a09      	cmp	r2, #9
 8016eaa:	d903      	bls.n	8016eb4 <_vfiprintf_r+0x1d0>
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d0c6      	beq.n	8016e3e <_vfiprintf_r+0x15a>
 8016eb0:	9105      	str	r1, [sp, #20]
 8016eb2:	e7c4      	b.n	8016e3e <_vfiprintf_r+0x15a>
 8016eb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8016eb8:	4604      	mov	r4, r0
 8016eba:	2301      	movs	r3, #1
 8016ebc:	e7f0      	b.n	8016ea0 <_vfiprintf_r+0x1bc>
 8016ebe:	ab03      	add	r3, sp, #12
 8016ec0:	9300      	str	r3, [sp, #0]
 8016ec2:	462a      	mov	r2, r5
 8016ec4:	4b12      	ldr	r3, [pc, #72]	; (8016f10 <_vfiprintf_r+0x22c>)
 8016ec6:	a904      	add	r1, sp, #16
 8016ec8:	4630      	mov	r0, r6
 8016eca:	f3af 8000 	nop.w
 8016ece:	4607      	mov	r7, r0
 8016ed0:	1c78      	adds	r0, r7, #1
 8016ed2:	d1d6      	bne.n	8016e82 <_vfiprintf_r+0x19e>
 8016ed4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016ed6:	07d9      	lsls	r1, r3, #31
 8016ed8:	d405      	bmi.n	8016ee6 <_vfiprintf_r+0x202>
 8016eda:	89ab      	ldrh	r3, [r5, #12]
 8016edc:	059a      	lsls	r2, r3, #22
 8016ede:	d402      	bmi.n	8016ee6 <_vfiprintf_r+0x202>
 8016ee0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ee2:	f7ff fda7 	bl	8016a34 <__retarget_lock_release_recursive>
 8016ee6:	89ab      	ldrh	r3, [r5, #12]
 8016ee8:	065b      	lsls	r3, r3, #25
 8016eea:	f53f af1d 	bmi.w	8016d28 <_vfiprintf_r+0x44>
 8016eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ef0:	e71c      	b.n	8016d2c <_vfiprintf_r+0x48>
 8016ef2:	ab03      	add	r3, sp, #12
 8016ef4:	9300      	str	r3, [sp, #0]
 8016ef6:	462a      	mov	r2, r5
 8016ef8:	4b05      	ldr	r3, [pc, #20]	; (8016f10 <_vfiprintf_r+0x22c>)
 8016efa:	a904      	add	r1, sp, #16
 8016efc:	4630      	mov	r0, r6
 8016efe:	f000 f879 	bl	8016ff4 <_printf_i>
 8016f02:	e7e4      	b.n	8016ece <_vfiprintf_r+0x1ea>
 8016f04:	0801a81d 	.word	0x0801a81d
 8016f08:	0801a827 	.word	0x0801a827
 8016f0c:	00000000 	.word	0x00000000
 8016f10:	08016cbf 	.word	0x08016cbf
 8016f14:	0801a823 	.word	0x0801a823

08016f18 <_printf_common>:
 8016f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f1c:	4616      	mov	r6, r2
 8016f1e:	4699      	mov	r9, r3
 8016f20:	688a      	ldr	r2, [r1, #8]
 8016f22:	690b      	ldr	r3, [r1, #16]
 8016f24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016f28:	4293      	cmp	r3, r2
 8016f2a:	bfb8      	it	lt
 8016f2c:	4613      	movlt	r3, r2
 8016f2e:	6033      	str	r3, [r6, #0]
 8016f30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016f34:	4607      	mov	r7, r0
 8016f36:	460c      	mov	r4, r1
 8016f38:	b10a      	cbz	r2, 8016f3e <_printf_common+0x26>
 8016f3a:	3301      	adds	r3, #1
 8016f3c:	6033      	str	r3, [r6, #0]
 8016f3e:	6823      	ldr	r3, [r4, #0]
 8016f40:	0699      	lsls	r1, r3, #26
 8016f42:	bf42      	ittt	mi
 8016f44:	6833      	ldrmi	r3, [r6, #0]
 8016f46:	3302      	addmi	r3, #2
 8016f48:	6033      	strmi	r3, [r6, #0]
 8016f4a:	6825      	ldr	r5, [r4, #0]
 8016f4c:	f015 0506 	ands.w	r5, r5, #6
 8016f50:	d106      	bne.n	8016f60 <_printf_common+0x48>
 8016f52:	f104 0a19 	add.w	sl, r4, #25
 8016f56:	68e3      	ldr	r3, [r4, #12]
 8016f58:	6832      	ldr	r2, [r6, #0]
 8016f5a:	1a9b      	subs	r3, r3, r2
 8016f5c:	42ab      	cmp	r3, r5
 8016f5e:	dc26      	bgt.n	8016fae <_printf_common+0x96>
 8016f60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016f64:	1e13      	subs	r3, r2, #0
 8016f66:	6822      	ldr	r2, [r4, #0]
 8016f68:	bf18      	it	ne
 8016f6a:	2301      	movne	r3, #1
 8016f6c:	0692      	lsls	r2, r2, #26
 8016f6e:	d42b      	bmi.n	8016fc8 <_printf_common+0xb0>
 8016f70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016f74:	4649      	mov	r1, r9
 8016f76:	4638      	mov	r0, r7
 8016f78:	47c0      	blx	r8
 8016f7a:	3001      	adds	r0, #1
 8016f7c:	d01e      	beq.n	8016fbc <_printf_common+0xa4>
 8016f7e:	6823      	ldr	r3, [r4, #0]
 8016f80:	6922      	ldr	r2, [r4, #16]
 8016f82:	f003 0306 	and.w	r3, r3, #6
 8016f86:	2b04      	cmp	r3, #4
 8016f88:	bf02      	ittt	eq
 8016f8a:	68e5      	ldreq	r5, [r4, #12]
 8016f8c:	6833      	ldreq	r3, [r6, #0]
 8016f8e:	1aed      	subeq	r5, r5, r3
 8016f90:	68a3      	ldr	r3, [r4, #8]
 8016f92:	bf0c      	ite	eq
 8016f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016f98:	2500      	movne	r5, #0
 8016f9a:	4293      	cmp	r3, r2
 8016f9c:	bfc4      	itt	gt
 8016f9e:	1a9b      	subgt	r3, r3, r2
 8016fa0:	18ed      	addgt	r5, r5, r3
 8016fa2:	2600      	movs	r6, #0
 8016fa4:	341a      	adds	r4, #26
 8016fa6:	42b5      	cmp	r5, r6
 8016fa8:	d11a      	bne.n	8016fe0 <_printf_common+0xc8>
 8016faa:	2000      	movs	r0, #0
 8016fac:	e008      	b.n	8016fc0 <_printf_common+0xa8>
 8016fae:	2301      	movs	r3, #1
 8016fb0:	4652      	mov	r2, sl
 8016fb2:	4649      	mov	r1, r9
 8016fb4:	4638      	mov	r0, r7
 8016fb6:	47c0      	blx	r8
 8016fb8:	3001      	adds	r0, #1
 8016fba:	d103      	bne.n	8016fc4 <_printf_common+0xac>
 8016fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8016fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fc4:	3501      	adds	r5, #1
 8016fc6:	e7c6      	b.n	8016f56 <_printf_common+0x3e>
 8016fc8:	18e1      	adds	r1, r4, r3
 8016fca:	1c5a      	adds	r2, r3, #1
 8016fcc:	2030      	movs	r0, #48	; 0x30
 8016fce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016fd2:	4422      	add	r2, r4
 8016fd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016fd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016fdc:	3302      	adds	r3, #2
 8016fde:	e7c7      	b.n	8016f70 <_printf_common+0x58>
 8016fe0:	2301      	movs	r3, #1
 8016fe2:	4622      	mov	r2, r4
 8016fe4:	4649      	mov	r1, r9
 8016fe6:	4638      	mov	r0, r7
 8016fe8:	47c0      	blx	r8
 8016fea:	3001      	adds	r0, #1
 8016fec:	d0e6      	beq.n	8016fbc <_printf_common+0xa4>
 8016fee:	3601      	adds	r6, #1
 8016ff0:	e7d9      	b.n	8016fa6 <_printf_common+0x8e>
	...

08016ff4 <_printf_i>:
 8016ff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016ff8:	7e0f      	ldrb	r7, [r1, #24]
 8016ffa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016ffc:	2f78      	cmp	r7, #120	; 0x78
 8016ffe:	4691      	mov	r9, r2
 8017000:	4680      	mov	r8, r0
 8017002:	460c      	mov	r4, r1
 8017004:	469a      	mov	sl, r3
 8017006:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801700a:	d807      	bhi.n	801701c <_printf_i+0x28>
 801700c:	2f62      	cmp	r7, #98	; 0x62
 801700e:	d80a      	bhi.n	8017026 <_printf_i+0x32>
 8017010:	2f00      	cmp	r7, #0
 8017012:	f000 80d4 	beq.w	80171be <_printf_i+0x1ca>
 8017016:	2f58      	cmp	r7, #88	; 0x58
 8017018:	f000 80c0 	beq.w	801719c <_printf_i+0x1a8>
 801701c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017020:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017024:	e03a      	b.n	801709c <_printf_i+0xa8>
 8017026:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801702a:	2b15      	cmp	r3, #21
 801702c:	d8f6      	bhi.n	801701c <_printf_i+0x28>
 801702e:	a101      	add	r1, pc, #4	; (adr r1, 8017034 <_printf_i+0x40>)
 8017030:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017034:	0801708d 	.word	0x0801708d
 8017038:	080170a1 	.word	0x080170a1
 801703c:	0801701d 	.word	0x0801701d
 8017040:	0801701d 	.word	0x0801701d
 8017044:	0801701d 	.word	0x0801701d
 8017048:	0801701d 	.word	0x0801701d
 801704c:	080170a1 	.word	0x080170a1
 8017050:	0801701d 	.word	0x0801701d
 8017054:	0801701d 	.word	0x0801701d
 8017058:	0801701d 	.word	0x0801701d
 801705c:	0801701d 	.word	0x0801701d
 8017060:	080171a5 	.word	0x080171a5
 8017064:	080170cd 	.word	0x080170cd
 8017068:	0801715f 	.word	0x0801715f
 801706c:	0801701d 	.word	0x0801701d
 8017070:	0801701d 	.word	0x0801701d
 8017074:	080171c7 	.word	0x080171c7
 8017078:	0801701d 	.word	0x0801701d
 801707c:	080170cd 	.word	0x080170cd
 8017080:	0801701d 	.word	0x0801701d
 8017084:	0801701d 	.word	0x0801701d
 8017088:	08017167 	.word	0x08017167
 801708c:	682b      	ldr	r3, [r5, #0]
 801708e:	1d1a      	adds	r2, r3, #4
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	602a      	str	r2, [r5, #0]
 8017094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017098:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801709c:	2301      	movs	r3, #1
 801709e:	e09f      	b.n	80171e0 <_printf_i+0x1ec>
 80170a0:	6820      	ldr	r0, [r4, #0]
 80170a2:	682b      	ldr	r3, [r5, #0]
 80170a4:	0607      	lsls	r7, r0, #24
 80170a6:	f103 0104 	add.w	r1, r3, #4
 80170aa:	6029      	str	r1, [r5, #0]
 80170ac:	d501      	bpl.n	80170b2 <_printf_i+0xbe>
 80170ae:	681e      	ldr	r6, [r3, #0]
 80170b0:	e003      	b.n	80170ba <_printf_i+0xc6>
 80170b2:	0646      	lsls	r6, r0, #25
 80170b4:	d5fb      	bpl.n	80170ae <_printf_i+0xba>
 80170b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80170ba:	2e00      	cmp	r6, #0
 80170bc:	da03      	bge.n	80170c6 <_printf_i+0xd2>
 80170be:	232d      	movs	r3, #45	; 0x2d
 80170c0:	4276      	negs	r6, r6
 80170c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80170c6:	485a      	ldr	r0, [pc, #360]	; (8017230 <_printf_i+0x23c>)
 80170c8:	230a      	movs	r3, #10
 80170ca:	e012      	b.n	80170f2 <_printf_i+0xfe>
 80170cc:	682b      	ldr	r3, [r5, #0]
 80170ce:	6820      	ldr	r0, [r4, #0]
 80170d0:	1d19      	adds	r1, r3, #4
 80170d2:	6029      	str	r1, [r5, #0]
 80170d4:	0605      	lsls	r5, r0, #24
 80170d6:	d501      	bpl.n	80170dc <_printf_i+0xe8>
 80170d8:	681e      	ldr	r6, [r3, #0]
 80170da:	e002      	b.n	80170e2 <_printf_i+0xee>
 80170dc:	0641      	lsls	r1, r0, #25
 80170de:	d5fb      	bpl.n	80170d8 <_printf_i+0xe4>
 80170e0:	881e      	ldrh	r6, [r3, #0]
 80170e2:	4853      	ldr	r0, [pc, #332]	; (8017230 <_printf_i+0x23c>)
 80170e4:	2f6f      	cmp	r7, #111	; 0x6f
 80170e6:	bf0c      	ite	eq
 80170e8:	2308      	moveq	r3, #8
 80170ea:	230a      	movne	r3, #10
 80170ec:	2100      	movs	r1, #0
 80170ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80170f2:	6865      	ldr	r5, [r4, #4]
 80170f4:	60a5      	str	r5, [r4, #8]
 80170f6:	2d00      	cmp	r5, #0
 80170f8:	bfa2      	ittt	ge
 80170fa:	6821      	ldrge	r1, [r4, #0]
 80170fc:	f021 0104 	bicge.w	r1, r1, #4
 8017100:	6021      	strge	r1, [r4, #0]
 8017102:	b90e      	cbnz	r6, 8017108 <_printf_i+0x114>
 8017104:	2d00      	cmp	r5, #0
 8017106:	d04b      	beq.n	80171a0 <_printf_i+0x1ac>
 8017108:	4615      	mov	r5, r2
 801710a:	fbb6 f1f3 	udiv	r1, r6, r3
 801710e:	fb03 6711 	mls	r7, r3, r1, r6
 8017112:	5dc7      	ldrb	r7, [r0, r7]
 8017114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017118:	4637      	mov	r7, r6
 801711a:	42bb      	cmp	r3, r7
 801711c:	460e      	mov	r6, r1
 801711e:	d9f4      	bls.n	801710a <_printf_i+0x116>
 8017120:	2b08      	cmp	r3, #8
 8017122:	d10b      	bne.n	801713c <_printf_i+0x148>
 8017124:	6823      	ldr	r3, [r4, #0]
 8017126:	07de      	lsls	r6, r3, #31
 8017128:	d508      	bpl.n	801713c <_printf_i+0x148>
 801712a:	6923      	ldr	r3, [r4, #16]
 801712c:	6861      	ldr	r1, [r4, #4]
 801712e:	4299      	cmp	r1, r3
 8017130:	bfde      	ittt	le
 8017132:	2330      	movle	r3, #48	; 0x30
 8017134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017138:	f105 35ff 	addle.w	r5, r5, #4294967295
 801713c:	1b52      	subs	r2, r2, r5
 801713e:	6122      	str	r2, [r4, #16]
 8017140:	f8cd a000 	str.w	sl, [sp]
 8017144:	464b      	mov	r3, r9
 8017146:	aa03      	add	r2, sp, #12
 8017148:	4621      	mov	r1, r4
 801714a:	4640      	mov	r0, r8
 801714c:	f7ff fee4 	bl	8016f18 <_printf_common>
 8017150:	3001      	adds	r0, #1
 8017152:	d14a      	bne.n	80171ea <_printf_i+0x1f6>
 8017154:	f04f 30ff 	mov.w	r0, #4294967295
 8017158:	b004      	add	sp, #16
 801715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801715e:	6823      	ldr	r3, [r4, #0]
 8017160:	f043 0320 	orr.w	r3, r3, #32
 8017164:	6023      	str	r3, [r4, #0]
 8017166:	4833      	ldr	r0, [pc, #204]	; (8017234 <_printf_i+0x240>)
 8017168:	2778      	movs	r7, #120	; 0x78
 801716a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801716e:	6823      	ldr	r3, [r4, #0]
 8017170:	6829      	ldr	r1, [r5, #0]
 8017172:	061f      	lsls	r7, r3, #24
 8017174:	f851 6b04 	ldr.w	r6, [r1], #4
 8017178:	d402      	bmi.n	8017180 <_printf_i+0x18c>
 801717a:	065f      	lsls	r7, r3, #25
 801717c:	bf48      	it	mi
 801717e:	b2b6      	uxthmi	r6, r6
 8017180:	07df      	lsls	r7, r3, #31
 8017182:	bf48      	it	mi
 8017184:	f043 0320 	orrmi.w	r3, r3, #32
 8017188:	6029      	str	r1, [r5, #0]
 801718a:	bf48      	it	mi
 801718c:	6023      	strmi	r3, [r4, #0]
 801718e:	b91e      	cbnz	r6, 8017198 <_printf_i+0x1a4>
 8017190:	6823      	ldr	r3, [r4, #0]
 8017192:	f023 0320 	bic.w	r3, r3, #32
 8017196:	6023      	str	r3, [r4, #0]
 8017198:	2310      	movs	r3, #16
 801719a:	e7a7      	b.n	80170ec <_printf_i+0xf8>
 801719c:	4824      	ldr	r0, [pc, #144]	; (8017230 <_printf_i+0x23c>)
 801719e:	e7e4      	b.n	801716a <_printf_i+0x176>
 80171a0:	4615      	mov	r5, r2
 80171a2:	e7bd      	b.n	8017120 <_printf_i+0x12c>
 80171a4:	682b      	ldr	r3, [r5, #0]
 80171a6:	6826      	ldr	r6, [r4, #0]
 80171a8:	6961      	ldr	r1, [r4, #20]
 80171aa:	1d18      	adds	r0, r3, #4
 80171ac:	6028      	str	r0, [r5, #0]
 80171ae:	0635      	lsls	r5, r6, #24
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	d501      	bpl.n	80171b8 <_printf_i+0x1c4>
 80171b4:	6019      	str	r1, [r3, #0]
 80171b6:	e002      	b.n	80171be <_printf_i+0x1ca>
 80171b8:	0670      	lsls	r0, r6, #25
 80171ba:	d5fb      	bpl.n	80171b4 <_printf_i+0x1c0>
 80171bc:	8019      	strh	r1, [r3, #0]
 80171be:	2300      	movs	r3, #0
 80171c0:	6123      	str	r3, [r4, #16]
 80171c2:	4615      	mov	r5, r2
 80171c4:	e7bc      	b.n	8017140 <_printf_i+0x14c>
 80171c6:	682b      	ldr	r3, [r5, #0]
 80171c8:	1d1a      	adds	r2, r3, #4
 80171ca:	602a      	str	r2, [r5, #0]
 80171cc:	681d      	ldr	r5, [r3, #0]
 80171ce:	6862      	ldr	r2, [r4, #4]
 80171d0:	2100      	movs	r1, #0
 80171d2:	4628      	mov	r0, r5
 80171d4:	f7e9 f884 	bl	80002e0 <memchr>
 80171d8:	b108      	cbz	r0, 80171de <_printf_i+0x1ea>
 80171da:	1b40      	subs	r0, r0, r5
 80171dc:	6060      	str	r0, [r4, #4]
 80171de:	6863      	ldr	r3, [r4, #4]
 80171e0:	6123      	str	r3, [r4, #16]
 80171e2:	2300      	movs	r3, #0
 80171e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171e8:	e7aa      	b.n	8017140 <_printf_i+0x14c>
 80171ea:	6923      	ldr	r3, [r4, #16]
 80171ec:	462a      	mov	r2, r5
 80171ee:	4649      	mov	r1, r9
 80171f0:	4640      	mov	r0, r8
 80171f2:	47d0      	blx	sl
 80171f4:	3001      	adds	r0, #1
 80171f6:	d0ad      	beq.n	8017154 <_printf_i+0x160>
 80171f8:	6823      	ldr	r3, [r4, #0]
 80171fa:	079b      	lsls	r3, r3, #30
 80171fc:	d413      	bmi.n	8017226 <_printf_i+0x232>
 80171fe:	68e0      	ldr	r0, [r4, #12]
 8017200:	9b03      	ldr	r3, [sp, #12]
 8017202:	4298      	cmp	r0, r3
 8017204:	bfb8      	it	lt
 8017206:	4618      	movlt	r0, r3
 8017208:	e7a6      	b.n	8017158 <_printf_i+0x164>
 801720a:	2301      	movs	r3, #1
 801720c:	4632      	mov	r2, r6
 801720e:	4649      	mov	r1, r9
 8017210:	4640      	mov	r0, r8
 8017212:	47d0      	blx	sl
 8017214:	3001      	adds	r0, #1
 8017216:	d09d      	beq.n	8017154 <_printf_i+0x160>
 8017218:	3501      	adds	r5, #1
 801721a:	68e3      	ldr	r3, [r4, #12]
 801721c:	9903      	ldr	r1, [sp, #12]
 801721e:	1a5b      	subs	r3, r3, r1
 8017220:	42ab      	cmp	r3, r5
 8017222:	dcf2      	bgt.n	801720a <_printf_i+0x216>
 8017224:	e7eb      	b.n	80171fe <_printf_i+0x20a>
 8017226:	2500      	movs	r5, #0
 8017228:	f104 0619 	add.w	r6, r4, #25
 801722c:	e7f5      	b.n	801721a <_printf_i+0x226>
 801722e:	bf00      	nop
 8017230:	0801a82e 	.word	0x0801a82e
 8017234:	0801a83f 	.word	0x0801a83f

08017238 <__sflush_r>:
 8017238:	898a      	ldrh	r2, [r1, #12]
 801723a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801723e:	4605      	mov	r5, r0
 8017240:	0710      	lsls	r0, r2, #28
 8017242:	460c      	mov	r4, r1
 8017244:	d458      	bmi.n	80172f8 <__sflush_r+0xc0>
 8017246:	684b      	ldr	r3, [r1, #4]
 8017248:	2b00      	cmp	r3, #0
 801724a:	dc05      	bgt.n	8017258 <__sflush_r+0x20>
 801724c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801724e:	2b00      	cmp	r3, #0
 8017250:	dc02      	bgt.n	8017258 <__sflush_r+0x20>
 8017252:	2000      	movs	r0, #0
 8017254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801725a:	2e00      	cmp	r6, #0
 801725c:	d0f9      	beq.n	8017252 <__sflush_r+0x1a>
 801725e:	2300      	movs	r3, #0
 8017260:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017264:	682f      	ldr	r7, [r5, #0]
 8017266:	6a21      	ldr	r1, [r4, #32]
 8017268:	602b      	str	r3, [r5, #0]
 801726a:	d032      	beq.n	80172d2 <__sflush_r+0x9a>
 801726c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801726e:	89a3      	ldrh	r3, [r4, #12]
 8017270:	075a      	lsls	r2, r3, #29
 8017272:	d505      	bpl.n	8017280 <__sflush_r+0x48>
 8017274:	6863      	ldr	r3, [r4, #4]
 8017276:	1ac0      	subs	r0, r0, r3
 8017278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801727a:	b10b      	cbz	r3, 8017280 <__sflush_r+0x48>
 801727c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801727e:	1ac0      	subs	r0, r0, r3
 8017280:	2300      	movs	r3, #0
 8017282:	4602      	mov	r2, r0
 8017284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017286:	6a21      	ldr	r1, [r4, #32]
 8017288:	4628      	mov	r0, r5
 801728a:	47b0      	blx	r6
 801728c:	1c43      	adds	r3, r0, #1
 801728e:	89a3      	ldrh	r3, [r4, #12]
 8017290:	d106      	bne.n	80172a0 <__sflush_r+0x68>
 8017292:	6829      	ldr	r1, [r5, #0]
 8017294:	291d      	cmp	r1, #29
 8017296:	d82b      	bhi.n	80172f0 <__sflush_r+0xb8>
 8017298:	4a29      	ldr	r2, [pc, #164]	; (8017340 <__sflush_r+0x108>)
 801729a:	410a      	asrs	r2, r1
 801729c:	07d6      	lsls	r6, r2, #31
 801729e:	d427      	bmi.n	80172f0 <__sflush_r+0xb8>
 80172a0:	2200      	movs	r2, #0
 80172a2:	6062      	str	r2, [r4, #4]
 80172a4:	04d9      	lsls	r1, r3, #19
 80172a6:	6922      	ldr	r2, [r4, #16]
 80172a8:	6022      	str	r2, [r4, #0]
 80172aa:	d504      	bpl.n	80172b6 <__sflush_r+0x7e>
 80172ac:	1c42      	adds	r2, r0, #1
 80172ae:	d101      	bne.n	80172b4 <__sflush_r+0x7c>
 80172b0:	682b      	ldr	r3, [r5, #0]
 80172b2:	b903      	cbnz	r3, 80172b6 <__sflush_r+0x7e>
 80172b4:	6560      	str	r0, [r4, #84]	; 0x54
 80172b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172b8:	602f      	str	r7, [r5, #0]
 80172ba:	2900      	cmp	r1, #0
 80172bc:	d0c9      	beq.n	8017252 <__sflush_r+0x1a>
 80172be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172c2:	4299      	cmp	r1, r3
 80172c4:	d002      	beq.n	80172cc <__sflush_r+0x94>
 80172c6:	4628      	mov	r0, r5
 80172c8:	f7ff fbe2 	bl	8016a90 <_free_r>
 80172cc:	2000      	movs	r0, #0
 80172ce:	6360      	str	r0, [r4, #52]	; 0x34
 80172d0:	e7c0      	b.n	8017254 <__sflush_r+0x1c>
 80172d2:	2301      	movs	r3, #1
 80172d4:	4628      	mov	r0, r5
 80172d6:	47b0      	blx	r6
 80172d8:	1c41      	adds	r1, r0, #1
 80172da:	d1c8      	bne.n	801726e <__sflush_r+0x36>
 80172dc:	682b      	ldr	r3, [r5, #0]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d0c5      	beq.n	801726e <__sflush_r+0x36>
 80172e2:	2b1d      	cmp	r3, #29
 80172e4:	d001      	beq.n	80172ea <__sflush_r+0xb2>
 80172e6:	2b16      	cmp	r3, #22
 80172e8:	d101      	bne.n	80172ee <__sflush_r+0xb6>
 80172ea:	602f      	str	r7, [r5, #0]
 80172ec:	e7b1      	b.n	8017252 <__sflush_r+0x1a>
 80172ee:	89a3      	ldrh	r3, [r4, #12]
 80172f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172f4:	81a3      	strh	r3, [r4, #12]
 80172f6:	e7ad      	b.n	8017254 <__sflush_r+0x1c>
 80172f8:	690f      	ldr	r7, [r1, #16]
 80172fa:	2f00      	cmp	r7, #0
 80172fc:	d0a9      	beq.n	8017252 <__sflush_r+0x1a>
 80172fe:	0793      	lsls	r3, r2, #30
 8017300:	680e      	ldr	r6, [r1, #0]
 8017302:	bf08      	it	eq
 8017304:	694b      	ldreq	r3, [r1, #20]
 8017306:	600f      	str	r7, [r1, #0]
 8017308:	bf18      	it	ne
 801730a:	2300      	movne	r3, #0
 801730c:	eba6 0807 	sub.w	r8, r6, r7
 8017310:	608b      	str	r3, [r1, #8]
 8017312:	f1b8 0f00 	cmp.w	r8, #0
 8017316:	dd9c      	ble.n	8017252 <__sflush_r+0x1a>
 8017318:	6a21      	ldr	r1, [r4, #32]
 801731a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801731c:	4643      	mov	r3, r8
 801731e:	463a      	mov	r2, r7
 8017320:	4628      	mov	r0, r5
 8017322:	47b0      	blx	r6
 8017324:	2800      	cmp	r0, #0
 8017326:	dc06      	bgt.n	8017336 <__sflush_r+0xfe>
 8017328:	89a3      	ldrh	r3, [r4, #12]
 801732a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801732e:	81a3      	strh	r3, [r4, #12]
 8017330:	f04f 30ff 	mov.w	r0, #4294967295
 8017334:	e78e      	b.n	8017254 <__sflush_r+0x1c>
 8017336:	4407      	add	r7, r0
 8017338:	eba8 0800 	sub.w	r8, r8, r0
 801733c:	e7e9      	b.n	8017312 <__sflush_r+0xda>
 801733e:	bf00      	nop
 8017340:	dfbffffe 	.word	0xdfbffffe

08017344 <_fflush_r>:
 8017344:	b538      	push	{r3, r4, r5, lr}
 8017346:	690b      	ldr	r3, [r1, #16]
 8017348:	4605      	mov	r5, r0
 801734a:	460c      	mov	r4, r1
 801734c:	b913      	cbnz	r3, 8017354 <_fflush_r+0x10>
 801734e:	2500      	movs	r5, #0
 8017350:	4628      	mov	r0, r5
 8017352:	bd38      	pop	{r3, r4, r5, pc}
 8017354:	b118      	cbz	r0, 801735e <_fflush_r+0x1a>
 8017356:	6a03      	ldr	r3, [r0, #32]
 8017358:	b90b      	cbnz	r3, 801735e <_fflush_r+0x1a>
 801735a:	f7ff fa17 	bl	801678c <__sinit>
 801735e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017362:	2b00      	cmp	r3, #0
 8017364:	d0f3      	beq.n	801734e <_fflush_r+0xa>
 8017366:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017368:	07d0      	lsls	r0, r2, #31
 801736a:	d404      	bmi.n	8017376 <_fflush_r+0x32>
 801736c:	0599      	lsls	r1, r3, #22
 801736e:	d402      	bmi.n	8017376 <_fflush_r+0x32>
 8017370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017372:	f7ff fb5e 	bl	8016a32 <__retarget_lock_acquire_recursive>
 8017376:	4628      	mov	r0, r5
 8017378:	4621      	mov	r1, r4
 801737a:	f7ff ff5d 	bl	8017238 <__sflush_r>
 801737e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017380:	07da      	lsls	r2, r3, #31
 8017382:	4605      	mov	r5, r0
 8017384:	d4e4      	bmi.n	8017350 <_fflush_r+0xc>
 8017386:	89a3      	ldrh	r3, [r4, #12]
 8017388:	059b      	lsls	r3, r3, #22
 801738a:	d4e1      	bmi.n	8017350 <_fflush_r+0xc>
 801738c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801738e:	f7ff fb51 	bl	8016a34 <__retarget_lock_release_recursive>
 8017392:	e7dd      	b.n	8017350 <_fflush_r+0xc>

08017394 <fiprintf>:
 8017394:	b40e      	push	{r1, r2, r3}
 8017396:	b503      	push	{r0, r1, lr}
 8017398:	4601      	mov	r1, r0
 801739a:	ab03      	add	r3, sp, #12
 801739c:	4805      	ldr	r0, [pc, #20]	; (80173b4 <fiprintf+0x20>)
 801739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80173a2:	6800      	ldr	r0, [r0, #0]
 80173a4:	9301      	str	r3, [sp, #4]
 80173a6:	f7ff fc9d 	bl	8016ce4 <_vfiprintf_r>
 80173aa:	b002      	add	sp, #8
 80173ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80173b0:	b003      	add	sp, #12
 80173b2:	4770      	bx	lr
 80173b4:	20000078 	.word	0x20000078

080173b8 <__swbuf_r>:
 80173b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ba:	460e      	mov	r6, r1
 80173bc:	4614      	mov	r4, r2
 80173be:	4605      	mov	r5, r0
 80173c0:	b118      	cbz	r0, 80173ca <__swbuf_r+0x12>
 80173c2:	6a03      	ldr	r3, [r0, #32]
 80173c4:	b90b      	cbnz	r3, 80173ca <__swbuf_r+0x12>
 80173c6:	f7ff f9e1 	bl	801678c <__sinit>
 80173ca:	69a3      	ldr	r3, [r4, #24]
 80173cc:	60a3      	str	r3, [r4, #8]
 80173ce:	89a3      	ldrh	r3, [r4, #12]
 80173d0:	071a      	lsls	r2, r3, #28
 80173d2:	d525      	bpl.n	8017420 <__swbuf_r+0x68>
 80173d4:	6923      	ldr	r3, [r4, #16]
 80173d6:	b31b      	cbz	r3, 8017420 <__swbuf_r+0x68>
 80173d8:	6823      	ldr	r3, [r4, #0]
 80173da:	6922      	ldr	r2, [r4, #16]
 80173dc:	1a98      	subs	r0, r3, r2
 80173de:	6963      	ldr	r3, [r4, #20]
 80173e0:	b2f6      	uxtb	r6, r6
 80173e2:	4283      	cmp	r3, r0
 80173e4:	4637      	mov	r7, r6
 80173e6:	dc04      	bgt.n	80173f2 <__swbuf_r+0x3a>
 80173e8:	4621      	mov	r1, r4
 80173ea:	4628      	mov	r0, r5
 80173ec:	f7ff ffaa 	bl	8017344 <_fflush_r>
 80173f0:	b9e0      	cbnz	r0, 801742c <__swbuf_r+0x74>
 80173f2:	68a3      	ldr	r3, [r4, #8]
 80173f4:	3b01      	subs	r3, #1
 80173f6:	60a3      	str	r3, [r4, #8]
 80173f8:	6823      	ldr	r3, [r4, #0]
 80173fa:	1c5a      	adds	r2, r3, #1
 80173fc:	6022      	str	r2, [r4, #0]
 80173fe:	701e      	strb	r6, [r3, #0]
 8017400:	6962      	ldr	r2, [r4, #20]
 8017402:	1c43      	adds	r3, r0, #1
 8017404:	429a      	cmp	r2, r3
 8017406:	d004      	beq.n	8017412 <__swbuf_r+0x5a>
 8017408:	89a3      	ldrh	r3, [r4, #12]
 801740a:	07db      	lsls	r3, r3, #31
 801740c:	d506      	bpl.n	801741c <__swbuf_r+0x64>
 801740e:	2e0a      	cmp	r6, #10
 8017410:	d104      	bne.n	801741c <__swbuf_r+0x64>
 8017412:	4621      	mov	r1, r4
 8017414:	4628      	mov	r0, r5
 8017416:	f7ff ff95 	bl	8017344 <_fflush_r>
 801741a:	b938      	cbnz	r0, 801742c <__swbuf_r+0x74>
 801741c:	4638      	mov	r0, r7
 801741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017420:	4621      	mov	r1, r4
 8017422:	4628      	mov	r0, r5
 8017424:	f000 f806 	bl	8017434 <__swsetup_r>
 8017428:	2800      	cmp	r0, #0
 801742a:	d0d5      	beq.n	80173d8 <__swbuf_r+0x20>
 801742c:	f04f 37ff 	mov.w	r7, #4294967295
 8017430:	e7f4      	b.n	801741c <__swbuf_r+0x64>
	...

08017434 <__swsetup_r>:
 8017434:	b538      	push	{r3, r4, r5, lr}
 8017436:	4b2a      	ldr	r3, [pc, #168]	; (80174e0 <__swsetup_r+0xac>)
 8017438:	4605      	mov	r5, r0
 801743a:	6818      	ldr	r0, [r3, #0]
 801743c:	460c      	mov	r4, r1
 801743e:	b118      	cbz	r0, 8017448 <__swsetup_r+0x14>
 8017440:	6a03      	ldr	r3, [r0, #32]
 8017442:	b90b      	cbnz	r3, 8017448 <__swsetup_r+0x14>
 8017444:	f7ff f9a2 	bl	801678c <__sinit>
 8017448:	89a3      	ldrh	r3, [r4, #12]
 801744a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801744e:	0718      	lsls	r0, r3, #28
 8017450:	d422      	bmi.n	8017498 <__swsetup_r+0x64>
 8017452:	06d9      	lsls	r1, r3, #27
 8017454:	d407      	bmi.n	8017466 <__swsetup_r+0x32>
 8017456:	2309      	movs	r3, #9
 8017458:	602b      	str	r3, [r5, #0]
 801745a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801745e:	81a3      	strh	r3, [r4, #12]
 8017460:	f04f 30ff 	mov.w	r0, #4294967295
 8017464:	e034      	b.n	80174d0 <__swsetup_r+0x9c>
 8017466:	0758      	lsls	r0, r3, #29
 8017468:	d512      	bpl.n	8017490 <__swsetup_r+0x5c>
 801746a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801746c:	b141      	cbz	r1, 8017480 <__swsetup_r+0x4c>
 801746e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017472:	4299      	cmp	r1, r3
 8017474:	d002      	beq.n	801747c <__swsetup_r+0x48>
 8017476:	4628      	mov	r0, r5
 8017478:	f7ff fb0a 	bl	8016a90 <_free_r>
 801747c:	2300      	movs	r3, #0
 801747e:	6363      	str	r3, [r4, #52]	; 0x34
 8017480:	89a3      	ldrh	r3, [r4, #12]
 8017482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017486:	81a3      	strh	r3, [r4, #12]
 8017488:	2300      	movs	r3, #0
 801748a:	6063      	str	r3, [r4, #4]
 801748c:	6923      	ldr	r3, [r4, #16]
 801748e:	6023      	str	r3, [r4, #0]
 8017490:	89a3      	ldrh	r3, [r4, #12]
 8017492:	f043 0308 	orr.w	r3, r3, #8
 8017496:	81a3      	strh	r3, [r4, #12]
 8017498:	6923      	ldr	r3, [r4, #16]
 801749a:	b94b      	cbnz	r3, 80174b0 <__swsetup_r+0x7c>
 801749c:	89a3      	ldrh	r3, [r4, #12]
 801749e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80174a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174a6:	d003      	beq.n	80174b0 <__swsetup_r+0x7c>
 80174a8:	4621      	mov	r1, r4
 80174aa:	4628      	mov	r0, r5
 80174ac:	f000 f857 	bl	801755e <__smakebuf_r>
 80174b0:	89a0      	ldrh	r0, [r4, #12]
 80174b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80174b6:	f010 0301 	ands.w	r3, r0, #1
 80174ba:	d00a      	beq.n	80174d2 <__swsetup_r+0x9e>
 80174bc:	2300      	movs	r3, #0
 80174be:	60a3      	str	r3, [r4, #8]
 80174c0:	6963      	ldr	r3, [r4, #20]
 80174c2:	425b      	negs	r3, r3
 80174c4:	61a3      	str	r3, [r4, #24]
 80174c6:	6923      	ldr	r3, [r4, #16]
 80174c8:	b943      	cbnz	r3, 80174dc <__swsetup_r+0xa8>
 80174ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80174ce:	d1c4      	bne.n	801745a <__swsetup_r+0x26>
 80174d0:	bd38      	pop	{r3, r4, r5, pc}
 80174d2:	0781      	lsls	r1, r0, #30
 80174d4:	bf58      	it	pl
 80174d6:	6963      	ldrpl	r3, [r4, #20]
 80174d8:	60a3      	str	r3, [r4, #8]
 80174da:	e7f4      	b.n	80174c6 <__swsetup_r+0x92>
 80174dc:	2000      	movs	r0, #0
 80174de:	e7f7      	b.n	80174d0 <__swsetup_r+0x9c>
 80174e0:	20000078 	.word	0x20000078

080174e4 <_sbrk_r>:
 80174e4:	b538      	push	{r3, r4, r5, lr}
 80174e6:	4d06      	ldr	r5, [pc, #24]	; (8017500 <_sbrk_r+0x1c>)
 80174e8:	2300      	movs	r3, #0
 80174ea:	4604      	mov	r4, r0
 80174ec:	4608      	mov	r0, r1
 80174ee:	602b      	str	r3, [r5, #0]
 80174f0:	f7ea ff34 	bl	800235c <_sbrk>
 80174f4:	1c43      	adds	r3, r0, #1
 80174f6:	d102      	bne.n	80174fe <_sbrk_r+0x1a>
 80174f8:	682b      	ldr	r3, [r5, #0]
 80174fa:	b103      	cbz	r3, 80174fe <_sbrk_r+0x1a>
 80174fc:	6023      	str	r3, [r4, #0]
 80174fe:	bd38      	pop	{r3, r4, r5, pc}
 8017500:	2000e104 	.word	0x2000e104

08017504 <abort>:
 8017504:	b508      	push	{r3, lr}
 8017506:	2006      	movs	r0, #6
 8017508:	f000 f88e 	bl	8017628 <raise>
 801750c:	2001      	movs	r0, #1
 801750e:	f7ea fec9 	bl	80022a4 <_exit>

08017512 <__swhatbuf_r>:
 8017512:	b570      	push	{r4, r5, r6, lr}
 8017514:	460c      	mov	r4, r1
 8017516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801751a:	2900      	cmp	r1, #0
 801751c:	b096      	sub	sp, #88	; 0x58
 801751e:	4615      	mov	r5, r2
 8017520:	461e      	mov	r6, r3
 8017522:	da0d      	bge.n	8017540 <__swhatbuf_r+0x2e>
 8017524:	89a3      	ldrh	r3, [r4, #12]
 8017526:	f013 0f80 	tst.w	r3, #128	; 0x80
 801752a:	f04f 0100 	mov.w	r1, #0
 801752e:	bf0c      	ite	eq
 8017530:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017534:	2340      	movne	r3, #64	; 0x40
 8017536:	2000      	movs	r0, #0
 8017538:	6031      	str	r1, [r6, #0]
 801753a:	602b      	str	r3, [r5, #0]
 801753c:	b016      	add	sp, #88	; 0x58
 801753e:	bd70      	pop	{r4, r5, r6, pc}
 8017540:	466a      	mov	r2, sp
 8017542:	f000 f879 	bl	8017638 <_fstat_r>
 8017546:	2800      	cmp	r0, #0
 8017548:	dbec      	blt.n	8017524 <__swhatbuf_r+0x12>
 801754a:	9901      	ldr	r1, [sp, #4]
 801754c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017550:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017554:	4259      	negs	r1, r3
 8017556:	4159      	adcs	r1, r3
 8017558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801755c:	e7eb      	b.n	8017536 <__swhatbuf_r+0x24>

0801755e <__smakebuf_r>:
 801755e:	898b      	ldrh	r3, [r1, #12]
 8017560:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017562:	079d      	lsls	r5, r3, #30
 8017564:	4606      	mov	r6, r0
 8017566:	460c      	mov	r4, r1
 8017568:	d507      	bpl.n	801757a <__smakebuf_r+0x1c>
 801756a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801756e:	6023      	str	r3, [r4, #0]
 8017570:	6123      	str	r3, [r4, #16]
 8017572:	2301      	movs	r3, #1
 8017574:	6163      	str	r3, [r4, #20]
 8017576:	b002      	add	sp, #8
 8017578:	bd70      	pop	{r4, r5, r6, pc}
 801757a:	ab01      	add	r3, sp, #4
 801757c:	466a      	mov	r2, sp
 801757e:	f7ff ffc8 	bl	8017512 <__swhatbuf_r>
 8017582:	9900      	ldr	r1, [sp, #0]
 8017584:	4605      	mov	r5, r0
 8017586:	4630      	mov	r0, r6
 8017588:	f7ff faf6 	bl	8016b78 <_malloc_r>
 801758c:	b948      	cbnz	r0, 80175a2 <__smakebuf_r+0x44>
 801758e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017592:	059a      	lsls	r2, r3, #22
 8017594:	d4ef      	bmi.n	8017576 <__smakebuf_r+0x18>
 8017596:	f023 0303 	bic.w	r3, r3, #3
 801759a:	f043 0302 	orr.w	r3, r3, #2
 801759e:	81a3      	strh	r3, [r4, #12]
 80175a0:	e7e3      	b.n	801756a <__smakebuf_r+0xc>
 80175a2:	89a3      	ldrh	r3, [r4, #12]
 80175a4:	6020      	str	r0, [r4, #0]
 80175a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80175aa:	81a3      	strh	r3, [r4, #12]
 80175ac:	9b00      	ldr	r3, [sp, #0]
 80175ae:	6163      	str	r3, [r4, #20]
 80175b0:	9b01      	ldr	r3, [sp, #4]
 80175b2:	6120      	str	r0, [r4, #16]
 80175b4:	b15b      	cbz	r3, 80175ce <__smakebuf_r+0x70>
 80175b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175ba:	4630      	mov	r0, r6
 80175bc:	f000 f84e 	bl	801765c <_isatty_r>
 80175c0:	b128      	cbz	r0, 80175ce <__smakebuf_r+0x70>
 80175c2:	89a3      	ldrh	r3, [r4, #12]
 80175c4:	f023 0303 	bic.w	r3, r3, #3
 80175c8:	f043 0301 	orr.w	r3, r3, #1
 80175cc:	81a3      	strh	r3, [r4, #12]
 80175ce:	89a3      	ldrh	r3, [r4, #12]
 80175d0:	431d      	orrs	r5, r3
 80175d2:	81a5      	strh	r5, [r4, #12]
 80175d4:	e7cf      	b.n	8017576 <__smakebuf_r+0x18>

080175d6 <_raise_r>:
 80175d6:	291f      	cmp	r1, #31
 80175d8:	b538      	push	{r3, r4, r5, lr}
 80175da:	4604      	mov	r4, r0
 80175dc:	460d      	mov	r5, r1
 80175de:	d904      	bls.n	80175ea <_raise_r+0x14>
 80175e0:	2316      	movs	r3, #22
 80175e2:	6003      	str	r3, [r0, #0]
 80175e4:	f04f 30ff 	mov.w	r0, #4294967295
 80175e8:	bd38      	pop	{r3, r4, r5, pc}
 80175ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80175ec:	b112      	cbz	r2, 80175f4 <_raise_r+0x1e>
 80175ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175f2:	b94b      	cbnz	r3, 8017608 <_raise_r+0x32>
 80175f4:	4620      	mov	r0, r4
 80175f6:	f000 f853 	bl	80176a0 <_getpid_r>
 80175fa:	462a      	mov	r2, r5
 80175fc:	4601      	mov	r1, r0
 80175fe:	4620      	mov	r0, r4
 8017600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017604:	f000 b83a 	b.w	801767c <_kill_r>
 8017608:	2b01      	cmp	r3, #1
 801760a:	d00a      	beq.n	8017622 <_raise_r+0x4c>
 801760c:	1c59      	adds	r1, r3, #1
 801760e:	d103      	bne.n	8017618 <_raise_r+0x42>
 8017610:	2316      	movs	r3, #22
 8017612:	6003      	str	r3, [r0, #0]
 8017614:	2001      	movs	r0, #1
 8017616:	e7e7      	b.n	80175e8 <_raise_r+0x12>
 8017618:	2400      	movs	r4, #0
 801761a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801761e:	4628      	mov	r0, r5
 8017620:	4798      	blx	r3
 8017622:	2000      	movs	r0, #0
 8017624:	e7e0      	b.n	80175e8 <_raise_r+0x12>
	...

08017628 <raise>:
 8017628:	4b02      	ldr	r3, [pc, #8]	; (8017634 <raise+0xc>)
 801762a:	4601      	mov	r1, r0
 801762c:	6818      	ldr	r0, [r3, #0]
 801762e:	f7ff bfd2 	b.w	80175d6 <_raise_r>
 8017632:	bf00      	nop
 8017634:	20000078 	.word	0x20000078

08017638 <_fstat_r>:
 8017638:	b538      	push	{r3, r4, r5, lr}
 801763a:	4d07      	ldr	r5, [pc, #28]	; (8017658 <_fstat_r+0x20>)
 801763c:	2300      	movs	r3, #0
 801763e:	4604      	mov	r4, r0
 8017640:	4608      	mov	r0, r1
 8017642:	4611      	mov	r1, r2
 8017644:	602b      	str	r3, [r5, #0]
 8017646:	f7ea fe60 	bl	800230a <_fstat>
 801764a:	1c43      	adds	r3, r0, #1
 801764c:	d102      	bne.n	8017654 <_fstat_r+0x1c>
 801764e:	682b      	ldr	r3, [r5, #0]
 8017650:	b103      	cbz	r3, 8017654 <_fstat_r+0x1c>
 8017652:	6023      	str	r3, [r4, #0]
 8017654:	bd38      	pop	{r3, r4, r5, pc}
 8017656:	bf00      	nop
 8017658:	2000e104 	.word	0x2000e104

0801765c <_isatty_r>:
 801765c:	b538      	push	{r3, r4, r5, lr}
 801765e:	4d06      	ldr	r5, [pc, #24]	; (8017678 <_isatty_r+0x1c>)
 8017660:	2300      	movs	r3, #0
 8017662:	4604      	mov	r4, r0
 8017664:	4608      	mov	r0, r1
 8017666:	602b      	str	r3, [r5, #0]
 8017668:	f7ea fe5f 	bl	800232a <_isatty>
 801766c:	1c43      	adds	r3, r0, #1
 801766e:	d102      	bne.n	8017676 <_isatty_r+0x1a>
 8017670:	682b      	ldr	r3, [r5, #0]
 8017672:	b103      	cbz	r3, 8017676 <_isatty_r+0x1a>
 8017674:	6023      	str	r3, [r4, #0]
 8017676:	bd38      	pop	{r3, r4, r5, pc}
 8017678:	2000e104 	.word	0x2000e104

0801767c <_kill_r>:
 801767c:	b538      	push	{r3, r4, r5, lr}
 801767e:	4d07      	ldr	r5, [pc, #28]	; (801769c <_kill_r+0x20>)
 8017680:	2300      	movs	r3, #0
 8017682:	4604      	mov	r4, r0
 8017684:	4608      	mov	r0, r1
 8017686:	4611      	mov	r1, r2
 8017688:	602b      	str	r3, [r5, #0]
 801768a:	f7ea fdf9 	bl	8002280 <_kill>
 801768e:	1c43      	adds	r3, r0, #1
 8017690:	d102      	bne.n	8017698 <_kill_r+0x1c>
 8017692:	682b      	ldr	r3, [r5, #0]
 8017694:	b103      	cbz	r3, 8017698 <_kill_r+0x1c>
 8017696:	6023      	str	r3, [r4, #0]
 8017698:	bd38      	pop	{r3, r4, r5, pc}
 801769a:	bf00      	nop
 801769c:	2000e104 	.word	0x2000e104

080176a0 <_getpid_r>:
 80176a0:	f7ea bde6 	b.w	8002270 <_getpid>

080176a4 <_init>:
 80176a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176a6:	bf00      	nop
 80176a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176aa:	bc08      	pop	{r3}
 80176ac:	469e      	mov	lr, r3
 80176ae:	4770      	bx	lr

080176b0 <_fini>:
 80176b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176b2:	bf00      	nop
 80176b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176b6:	bc08      	pop	{r3}
 80176b8:	469e      	mov	lr, r3
 80176ba:	4770      	bx	lr
