
web_server.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff1c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bc4  0801011c  0801011c  0002011c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ce0  08012ce0  000301c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012ce0  08012ce0  00022ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ce8  08012ce8  000301c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ce8  08012ce8  00022ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cec  08012cec  00022cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08012cf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08012d78  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08012e18  00030128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000088b0  200001c8  08012eb8  000301c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008a78  08012eb8  00038a78  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000301f6  2**0
                  CONTENTS, READONLY
 15 .debug_info   000214c0  00000000  00000000  00030239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000059c4  00000000  00000000  000516f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001870  00000000  00000000  000570c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000136a  00000000  00000000  00058930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00034bb1  00000000  00000000  00059c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0002a107  00000000  00000000  0008e84b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010d656  00000000  00000000  000b8952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00006c58  00000000  00000000  001c5fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000053  00000000  00000000  001ccc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08010104 	.word	0x08010104

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08010104 	.word	0x08010104

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e0:	f000 fd14 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e4:	f000 f80c 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e8:	f000 f8da 	bl	80007a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f87a 	bl	80006e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005f0:	f000 f8a8 	bl	8000744 <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005f4:	f004 fb2a 	bl	8004c4c <MX_LWIP_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_LWIP_Process();
 80005f8:	f004 fc74 	bl	8004ee4 <MX_LWIP_Process>
 80005fc:	e7fc      	b.n	80005f8 <main+0x1c>
	...

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 031c 	add.w	r3, r7, #28
 800060a:	2234      	movs	r2, #52	; 0x34
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f00e fecb 	bl	800f3aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000624:	f002 fa5a 	bl	8002adc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemClock_Config+0xdc>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a2b      	ldr	r2, [pc, #172]	; (80006dc <SystemClock_Config+0xdc>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemClock_Config+0xdc>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <SystemClock_Config+0xe0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <SystemClock_Config+0xe0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemClock_Config+0xe0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	603b      	str	r3, [r7, #0]
 800065a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000670:	2304      	movs	r3, #4
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000680:	2302      	movs	r3, #2
 8000682:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 031c 	add.w	r3, r7, #28
 8000688:	4618      	mov	r0, r3
 800068a:	f002 fa87 	bl	8002b9c <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000694:	f000 f926 	bl	80008e4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000698:	f002 fa30 	bl	8002afc <HAL_PWREx_EnableOverDrive>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006a2:	f000 f91f 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2302      	movs	r3, #2
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006bc:	f107 0308 	add.w	r3, r7, #8
 80006c0:	2103      	movs	r1, #3
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fd18 	bl	80030f8 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ce:	f000 f909 	bl	80008e4 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3750      	adds	r7, #80	; 0x50
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800
 80006e0:	40007000 	.word	0x40007000

080006e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	; (8000740 <MX_USART3_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_USART3_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART3_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART3_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x58>)
 8000728:	f003 fb34 	bl	8003d94 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f8d7 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	200001e4 	.word	0x200001e4
 8000740:	40004800 	.word	0x40004800

08000744 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800074e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000750:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000752:	2206      	movs	r2, #6
 8000754:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000758:	2202      	movs	r2, #2
 800075a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2201      	movs	r2, #1
 800076c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2201      	movs	r2, #1
 800077e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	f002 f85f 	bl	800284a <HAL_PCD_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000792:	f000 f8a7 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	2000026c 	.word	0x2000026c

080007a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08c      	sub	sp, #48	; 0x30
 80007a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a6:	f107 031c 	add.w	r3, r7, #28
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b6:	4b47      	ldr	r3, [pc, #284]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	4a46      	ldr	r2, [pc, #280]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6313      	str	r3, [r2, #48]	; 0x30
 80007c2:	4b44      	ldr	r3, [pc, #272]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b41      	ldr	r3, [pc, #260]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a40      	ldr	r2, [pc, #256]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b3e      	ldr	r3, [pc, #248]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b3b      	ldr	r3, [pc, #236]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a3a      	ldr	r2, [pc, #232]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b38      	ldr	r3, [pc, #224]	; (80008d4 <MX_GPIO_Init+0x134>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b35      	ldr	r3, [pc, #212]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b32      	ldr	r3, [pc, #200]	; (80008d4 <MX_GPIO_Init+0x134>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a2e      	ldr	r2, [pc, #184]	; (80008d4 <MX_GPIO_Init+0x134>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a28      	ldr	r2, [pc, #160]	; (80008d4 <MX_GPIO_Init+0x134>)
 8000834:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_GPIO_Init+0x134>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800084c:	4822      	ldr	r0, [pc, #136]	; (80008d8 <MX_GPIO_Init+0x138>)
 800084e:	f001 ffe3 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	2140      	movs	r1, #64	; 0x40
 8000856:	4821      	ldr	r0, [pc, #132]	; (80008dc <MX_GPIO_Init+0x13c>)
 8000858:	f001 ffde 	bl	8002818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800085c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000860:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000862:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	481b      	ldr	r0, [pc, #108]	; (80008e0 <MX_GPIO_Init+0x140>)
 8000874:	f001 fe24 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000878:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4811      	ldr	r0, [pc, #68]	; (80008d8 <MX_GPIO_Init+0x138>)
 8000892:	f001 fe15 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000896:	2340      	movs	r3, #64	; 0x40
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	480b      	ldr	r0, [pc, #44]	; (80008dc <MX_GPIO_Init+0x13c>)
 80008ae:	f001 fe07 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b6:	2300      	movs	r3, #0
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_GPIO_Init+0x13c>)
 80008c6:	f001 fdfb 	bl	80024c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40021800 	.word	0x40021800
 80008e0:	40020800 	.word	0x40020800

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <HAL_MspInit+0x44>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a0e      	ldr	r2, [pc, #56]	; (8000934 <HAL_MspInit+0x44>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <HAL_MspInit+0x44>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <HAL_MspInit+0x44>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a08      	ldr	r2, [pc, #32]	; (8000934 <HAL_MspInit+0x44>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <HAL_MspInit+0x44>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b0ae      	sub	sp, #184	; 0xb8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2290      	movs	r2, #144	; 0x90
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f00e fd26 	bl	800f3aa <memset>
  if(huart->Instance==USART3)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a22      	ldr	r2, [pc, #136]	; (80009ec <HAL_UART_MspInit+0xb4>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d13c      	bne.n	80009e2 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800096e:	2300      	movs	r3, #0
 8000970:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4618      	mov	r0, r3
 8000978:	f002 fde4 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000982:	f7ff ffaf 	bl	80008e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <HAL_UART_MspInit+0xb8>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098a:	4a19      	ldr	r2, [pc, #100]	; (80009f0 <HAL_UART_MspInit+0xb8>)
 800098c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000990:	6413      	str	r3, [r2, #64]	; 0x40
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <HAL_UART_MspInit+0xb8>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_UART_MspInit+0xb8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <HAL_UART_MspInit+0xb8>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <HAL_UART_MspInit+0xb8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009d0:	2307      	movs	r3, #7
 80009d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <HAL_UART_MspInit+0xbc>)
 80009de:	f001 fd6f 	bl	80024c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	37b8      	adds	r7, #184	; 0xb8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40004800 	.word	0x40004800
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020c00 	.word	0x40020c00

080009f8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b0ae      	sub	sp, #184	; 0xb8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	2290      	movs	r2, #144	; 0x90
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f00e fcc6 	bl	800f3aa <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a26:	d159      	bne.n	8000adc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000a28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000a2c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f002 fd83 	bl	8003544 <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000a44:	f7ff ff4e 	bl	80008e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	4a25      	ldr	r2, [pc, #148]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6313      	str	r3, [r2, #48]	; 0x30
 8000a54:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a60:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4818      	ldr	r0, [pc, #96]	; (8000ae8 <HAL_PCD_MspInit+0xf0>)
 8000a88:	f001 fd1a 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4810      	ldr	r0, [pc, #64]	; (8000ae8 <HAL_PCD_MspInit+0xf0>)
 8000aa8:	f001 fd0a 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab6:	6353      	str	r3, [r2, #52]	; 0x34
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac8:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000aca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ace:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <HAL_PCD_MspInit+0xec>)
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000adc:	bf00      	nop
 8000ade:	37b8      	adds	r7, #184	; 0xb8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020000 	.word	0x40020000

08000aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <NMI_Handler+0x4>

08000af2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af6:	e7fe      	b.n	8000af6 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	e7fe      	b.n	8000afc <MemManage_Handler+0x4>

08000afe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b38:	f000 faa6 	bl	8001088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return 1;
 8000b44:	2301      	movs	r3, #1
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <_kill>:

int _kill(int pid, int sig)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <_kill+0x20>)
 8000b5c:	2216      	movs	r2, #22
 8000b5e:	601a      	str	r2, [r3, #0]
  return -1;
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	20008a68 	.word	0x20008a68

08000b74 <_exit>:

void _exit (int status)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ffe5 	bl	8000b50 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b86:	e7fe      	b.n	8000b86 <_exit+0x12>

08000b88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	e00a      	b.n	8000bb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b9a:	f3af 8000 	nop.w
 8000b9e:	4601      	mov	r1, r0
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	b2ca      	uxtb	r2, r1
 8000ba8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf0      	blt.n	8000b9a <_read+0x12>
  }

  return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b086      	sub	sp, #24
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
 8000bd2:	e009      	b.n	8000be8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	60ba      	str	r2, [r7, #8]
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	3301      	adds	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	697a      	ldr	r2, [r7, #20]
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	dbf1      	blt.n	8000bd4 <_write+0x12>
  }
  return len;
 8000bf0:	687b      	ldr	r3, [r7, #4]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3718      	adds	r7, #24
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <_close>:

int _close(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c22:	605a      	str	r2, [r3, #4]
  return 0;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <_isatty>:

int _isatty(int file)
{
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c3a:	2301      	movs	r3, #1
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d205      	bcs.n	8000ca0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <_sbrk+0x6c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	371c      	adds	r7, #28
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	20080000 	.word	0x20080000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	20000774 	.word	0x20000774
 8000ccc:	20008a78 	.word	0x20008a78
 8000cd0:	20008a68 	.word	0x20008a68

08000cd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d14:	4c0b      	ldr	r4, [pc, #44]	; (8000d44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d22:	f7ff ffd7 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f00e fb8f 	bl	800f448 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2a:	f7ff fc57 	bl	80005dc <main>
  bx  lr    
 8000d2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000d3c:	08012cf0 	.word	0x08012cf0
  ldr r2, =_sbss
 8000d40:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000d44:	20008a78 	.word	0x20008a78

08000d48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC_IRQHandler>

08000d4a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d00b      	beq.n	8000d72 <LAN8742_RegisterBusIO+0x28>
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d007      	beq.n	8000d72 <LAN8742_RegisterBusIO+0x28>
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <LAN8742_RegisterBusIO+0x28>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d102      	bne.n	8000d78 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	e014      	b.n	8000da2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d17c      	bne.n	8000ec8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d002      	beq.n	8000ddc <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2220      	movs	r2, #32
 8000de0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	e01c      	b.n	8000e22 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	2112      	movs	r1, #18
 8000df2:	6978      	ldr	r0, [r7, #20]
 8000df4:	4798      	blx	r3
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	da03      	bge.n	8000e04 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000dfc:	f06f 0304 	mvn.w	r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000e02:	e00b      	b.n	8000e1c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	f003 031f 	and.w	r3, r3, #31
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d105      	bne.n	8000e1c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
         break;
 8000e1a:	e005      	b.n	8000e28 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2b1f      	cmp	r3, #31
 8000e26:	d9df      	bls.n	8000de8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b1f      	cmp	r3, #31
 8000e2e:	d902      	bls.n	8000e36 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e30:	f06f 0302 	mvn.w	r3, #2
 8000e34:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d145      	bne.n	8000ec8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	691b      	ldr	r3, [r3, #16]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4798      	blx	r3
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db37      	blt.n	8000ec2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	695b      	ldr	r3, [r3, #20]
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	6810      	ldr	r0, [r2, #0]
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4798      	blx	r3
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db28      	blt.n	8000eba <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	699b      	ldr	r3, [r3, #24]
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e72:	e01c      	b.n	8000eae <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	699b      	ldr	r3, [r3, #24]
 8000e78:	4798      	blx	r3
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	1ad3      	subs	r3, r2, r3
 8000e82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000e86:	d80e      	bhi.n	8000ea6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	695b      	ldr	r3, [r3, #20]
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6810      	ldr	r0, [r2, #0]
 8000e90:	f107 0208 	add.w	r2, r7, #8
 8000e94:	2100      	movs	r1, #0
 8000e96:	4798      	blx	r3
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	da07      	bge.n	8000eae <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e9e:	f06f 0304 	mvn.w	r3, #4
 8000ea2:	613b      	str	r3, [r7, #16]
                 break;
 8000ea4:	e010      	b.n	8000ec8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000ea6:	f06f 0301 	mvn.w	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
               break;
 8000eac:	e00c      	b.n	8000ec8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d1dd      	bne.n	8000e74 <LAN8742_Init+0xc6>
 8000eb8:	e006      	b.n	8000ec8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000eba:	f06f 0304 	mvn.w	r3, #4
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	e002      	b.n	8000ec8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000ec2:	f06f 0303 	mvn.w	r3, #3
 8000ec6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d112      	bne.n	8000ef4 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4798      	blx	r3
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000ed8:	bf00      	nop
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	4798      	blx	r3
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000eec:	d9f5      	bls.n	8000eda <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 }
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	695b      	ldr	r3, [r3, #20]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6810      	ldr	r0, [r2, #0]
 8000f12:	f107 020c 	add.w	r2, r7, #12
 8000f16:	2101      	movs	r1, #1
 8000f18:	4798      	blx	r3
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	da02      	bge.n	8000f26 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f20:	f06f 0304 	mvn.w	r3, #4
 8000f24:	e06e      	b.n	8001004 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	6810      	ldr	r0, [r2, #0]
 8000f2e:	f107 020c 	add.w	r2, r7, #12
 8000f32:	2101      	movs	r1, #1
 8000f34:	4798      	blx	r3
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	da02      	bge.n	8000f42 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f3c:	f06f 0304 	mvn.w	r3, #4
 8000f40:	e060      	b.n	8001004 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f003 0304 	and.w	r3, r3, #4
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d101      	bne.n	8000f50 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e059      	b.n	8001004 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	695b      	ldr	r3, [r3, #20]
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6810      	ldr	r0, [r2, #0]
 8000f58:	f107 020c 	add.w	r2, r7, #12
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4798      	blx	r3
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da02      	bge.n	8000f6c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f66:	f06f 0304 	mvn.w	r3, #4
 8000f6a:	e04b      	b.n	8001004 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d11b      	bne.n	8000fae <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <LAN8742_GetLinkState+0x90>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e03a      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e033      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e02c      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000faa:	2305      	movs	r3, #5
 8000fac:	e02a      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	6810      	ldr	r0, [r2, #0]
 8000fb6:	f107 020c 	add.w	r2, r7, #12
 8000fba:	211f      	movs	r1, #31
 8000fbc:	4798      	blx	r3
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	da02      	bge.n	8000fca <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000fc4:	f06f 0304 	mvn.w	r3, #4
 8000fc8:	e01c      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000fd4:	2306      	movs	r3, #6
 8000fd6:	e015      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f003 031c 	and.w	r3, r3, #28
 8000fde:	2b18      	cmp	r3, #24
 8000fe0:	d101      	bne.n	8000fe6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e00e      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f003 031c 	and.w	r3, r3, #28
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d101      	bne.n	8000ff4 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e007      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f003 031c 	and.w	r3, r3, #28
 8000ffa:	2b14      	cmp	r3, #20
 8000ffc:	d101      	bne.n	8001002 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ffe:	2304      	movs	r3, #4
 8001000:	e000      	b.n	8001004 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001002:	2305      	movs	r3, #5
    }				
  }
}
 8001004:	4618      	mov	r0, r3
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f92f 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f806 	bl	8001028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fc68 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <HAL_InitTick+0x54>)
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x58>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f93b 	bl	80012c2 <HAL_SYSTICK_Config>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e00e      	b.n	8001074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b0f      	cmp	r3, #15
 800105a:	d80a      	bhi.n	8001072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f000 f911 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001068:	4a06      	ldr	r2, [pc, #24]	; (8001084 <HAL_InitTick+0x5c>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	e000      	b.n	8001074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
}
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000000 	.word	0x20000000
 8001080:	20000008 	.word	0x20000008
 8001084:	20000004 	.word	0x20000004

08001088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <HAL_IncTick+0x20>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_IncTick+0x24>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4413      	add	r3, r2
 8001098:	4a04      	ldr	r2, [pc, #16]	; (80010ac <HAL_IncTick+0x24>)
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000778 	.word	0x20000778

080010b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return uwTick;
 80010b4:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <HAL_GetTick+0x14>)
 80010b6:	681b      	ldr	r3, [r3, #0]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000778 	.word	0x20000778

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff ffee 	bl	80010b0 <HAL_GetTick>
 80010d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ee:	bf00      	nop
 80010f0:	f7ff ffde 	bl	80010b0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	bf00      	nop
 8001102:	bf00      	nop
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000008 	.word	0x20000008

08001110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <__NVIC_SetPriorityGrouping+0x40>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800112c:	4013      	ands	r3, r2
 800112e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <__NVIC_SetPriorityGrouping+0x44>)
 800113a:	4313      	orrs	r3, r2
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x40>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	05fa0000 	.word	0x05fa0000

08001158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <__NVIC_GetPriorityGrouping+0x18>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	f003 0307 	and.w	r3, r3, #7
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff47 	bl	8001110 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff5c 	bl	8001158 <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ffb0 	bl	8001230 <SysTick_Config>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e06a      	b.n	80013c4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d106      	bne.n	8001306 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2223      	movs	r2, #35	; 0x23
 80012fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f003 ffd7 	bl	80052b4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_ETH_Init+0xf0>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	4a30      	ldr	r2, [pc, #192]	; (80013cc <HAL_ETH_Init+0xf0>)
 800130c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001310:	6453      	str	r3, [r2, #68]	; 0x44
 8001312:	4b2e      	ldr	r3, [pc, #184]	; (80013cc <HAL_ETH_Init+0xf0>)
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <HAL_ETH_Init+0xf4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	4a2b      	ldr	r2, [pc, #172]	; (80013d0 <HAL_ETH_Init+0xf4>)
 8001324:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001328:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <HAL_ETH_Init+0xf4>)
 800132c:	685a      	ldr	r2, [r3, #4]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	4927      	ldr	r1, [pc, #156]	; (80013d0 <HAL_ETH_Init+0xf4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <HAL_ETH_Init+0xf4>)
 800133a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6812      	ldr	r2, [r2, #0]
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001352:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001354:	f7ff feac 	bl	80010b0 <HAL_GetTick>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800135a:	e011      	b.n	8001380 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800135c:	f7ff fea8 	bl	80010b0 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800136a:	d909      	bls.n	8001380 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2204      	movs	r2, #4
 8001370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	22e0      	movs	r2, #224	; 0xe0
 8001378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e021      	b.n	80013c4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1e4      	bne.n	800135c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f000 fdf0 	bl	8001f78 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f000 fe97 	bl	80020cc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 feed 	bl	800217e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	461a      	mov	r2, r3
 80013aa:	2100      	movs	r1, #0
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fe55 	bl	800205c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2210      	movs	r2, #16
 80013be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40013800 	.word	0x40013800

080013d4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d150      	bne.n	8001488 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2223      	movs	r2, #35	; 0x23
 80013ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2204      	movs	r2, #4
 80013f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f9fd 	bl	80017f4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0208 	orr.w	r2, r2, #8
 8001408:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff fe58 	bl	80010c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f042 0204 	orr.w	r2, r2, #4
 800142e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001438:	2001      	movs	r0, #1
 800143a:	f7ff fe45 	bl	80010c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f000 fc36 	bl	8001cb8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800145e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001462:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	f043 0302 	orr.w	r3, r3, #2
 8001476:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800147a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2223      	movs	r2, #35	; 0x23
 8001480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e000      	b.n	800148a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
  }
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014a0:	2b23      	cmp	r3, #35	; 0x23
 80014a2:	d14a      	bne.n	800153a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2223      	movs	r2, #35	; 0x23
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c2:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	f023 0302 	bic.w	r3, r3, #2
 80014d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014da:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0204 	bic.w	r2, r2, #4
 80014ea:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80014f4:	2001      	movs	r0, #1
 80014f6:	f7ff fde7 	bl	80010c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fbd8 	bl	8001cb8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0208 	bic.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fdd1 	bl	80010c8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2210      	movs	r2, #16
 8001532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
  }
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d109      	bne.n	800156a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155c:	f043 0201 	orr.w	r2, r3, #1
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e07c      	b.n	8001664 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001570:	2b23      	cmp	r3, #35	; 0x23
 8001572:	d176      	bne.n	8001662 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001574:	2200      	movs	r2, #0
 8001576:	68b9      	ldr	r1, [r7, #8]
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f000 fe6d 	bl	8002258 <ETH_Prepare_Tx_Descriptors>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158a:	f043 0202 	orr.w	r2, r3, #2
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e065      	b.n	8001664 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001598:	f3bf 8f4f 	dsb	sy
}
 800159c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	3206      	adds	r2, #6
 80015a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015aa:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d904      	bls.n	80015c8 <HAL_ETH_Transmit+0x84>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	1f1a      	subs	r2, r3, #4
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3106      	adds	r1, #6
 80015d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015d8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015dc:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80015de:	f7ff fd67 	bl	80010b0 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80015e4:	e037      	b.n	8001656 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d011      	beq.n	800161c <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fe:	f043 0208 	orr.w	r2, r3, #8
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001610:	695a      	ldr	r2, [r3, #20]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e023      	b.n	8001664 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001622:	d018      	beq.n	8001656 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001624:	f7ff fd44 	bl	80010b0 <HAL_GetTick>
 8001628:	4602      	mov	r2, r0
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	d302      	bcc.n	800163a <HAL_ETH_Transmit+0xf6>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10d      	bne.n	8001656 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001640:	f043 0204 	orr.w	r2, r3, #4
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001650:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e006      	b.n	8001664 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	dbc3      	blt.n	80015e6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	e000      	b.n	8001664 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
  }
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d109      	bne.n	8001698 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e0a8      	b.n	80017ea <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800169e:	2b23      	cmp	r3, #35	; 0x23
 80016a0:	d001      	beq.n	80016a6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0a1      	b.n	80017ea <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016aa:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	69fa      	ldr	r2, [r7, #28]
 80016b0:	3212      	adds	r2, #18
 80016b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016bc:	f1c3 0304 	rsb	r3, r3, #4
 80016c0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016c2:	e06a      	b.n	800179a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	69da      	ldr	r2, [r3, #28]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d103      	bne.n	80016f4 <HAL_ETH_ReadData+0x88>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d040      	beq.n	8001776 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d005      	beq.n	800170c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	2b00      	cmp	r3, #0
 800171c:	d00c      	beq.n	8001738 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001728:	3b04      	subs	r3, #4
 800172a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001750:	461a      	mov	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	b29b      	uxth	r3, r3
 8001756:	f003 ff6f 	bl	8005638 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	441a      	add	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3301      	adds	r3, #1
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	2b03      	cmp	r3, #3
 8001780:	d902      	bls.n	8001788 <HAL_ETH_ReadData+0x11c>
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	3b04      	subs	r3, #4
 8001786:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	3212      	adds	r2, #18
 800178e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001792:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db06      	blt.n	80017b0 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d202      	bcs.n	80017b0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80017aa:	7bfb      	ldrb	r3, [r7, #15]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d089      	beq.n	80016c4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	441a      	add	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d002      	beq.n	80017ca <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f815 	bl	80017f4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d108      	bne.n	80017e8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	e000      	b.n	80017ea <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b088      	sub	sp, #32
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001800:	2301      	movs	r3, #1
 8001802:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001808:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	3212      	adds	r2, #18
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800181a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800181c:	e040      	b.n	80018a0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d112      	bne.n	800184c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4618      	mov	r0, r3
 800182c:	f003 fed4 	bl	80055d8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	74fb      	strb	r3, [r7, #19]
 800183a:	e007      	b.n	800184c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	461a      	mov	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	461a      	mov	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800184c:	7cfb      	ldrb	r3, [r7, #19]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d026      	beq.n	80018a0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <ETH_UpdateDescriptor+0xe4>)
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	e003      	b.n	800186a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001868:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800186a:	f3bf 8f5f 	dmb	sy
}
 800186e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	3301      	adds	r3, #1
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d902      	bls.n	800188e <ETH_UpdateDescriptor+0x9a>
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	3b04      	subs	r3, #4
 800188c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	3212      	adds	r2, #18
 8001894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001898:	617b      	str	r3, [r7, #20]
      desccount--;
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	3b01      	subs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d002      	beq.n	80018ac <ETH_UpdateDescriptor+0xb8>
 80018a6:	7cfb      	ldrb	r3, [r7, #19]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1b8      	bne.n	800181e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d00c      	beq.n	80018d0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018be:	461a      	mov	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69fa      	ldr	r2, [r7, #28]
 80018c8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80018d0:	bf00      	nop
 80018d2:	3720      	adds	r7, #32
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	80004600 	.word	0x80004600

080018dc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 031c 	and.w	r3, r3, #28
 80018f8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	02db      	lsls	r3, r3, #11
 80018fe:	b29b      	uxth	r3, r3
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	4313      	orrs	r3, r2
 8001912:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f023 0302 	bic.w	r3, r3, #2
 800191a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800192c:	f7ff fbc0 	bl	80010b0 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001932:	e00d      	b.n	8001950 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001934:	f7ff fbbc 	bl	80010b0 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001942:	d301      	bcc.n	8001948 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e010      	b.n	800196a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1ec      	bne.n	8001934 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	b29b      	uxth	r3, r3
 8001962:	461a      	mov	r2, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
 800197e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 031c 	and.w	r3, r3, #28
 800198e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	02db      	lsls	r3, r3, #11
 8001994:	b29b      	uxth	r3, r3
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4313      	orrs	r3, r2
 800199a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	019b      	lsls	r3, r3, #6
 80019a0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019a4:	697a      	ldr	r2, [r7, #20]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f043 0302 	orr.w	r3, r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019cc:	f7ff fb70 	bl	80010b0 <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019d2:	e00d      	b.n	80019f0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80019d4:	f7ff fb6c 	bl	80010b0 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e2:	d301      	bcc.n	80019e8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e009      	b.n	80019fc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1ec      	bne.n	80019d4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0d9      	b.n	8001bcc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	bf14      	ite	ne
 8001a26:	2301      	movne	r3, #1
 8001a28:	2300      	moveq	r3, #0
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	bf14      	ite	ne
 8001a6c:	2301      	movne	r3, #1
 8001a6e:	2300      	moveq	r3, #0
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	bf0c      	ite	eq
 8001a86:	2301      	moveq	r3, #1
 8001a88:	2300      	movne	r3, #0
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	bf0c      	ite	eq
 8001ad6:	2301      	moveq	r3, #1
 8001ad8:	2300      	movne	r3, #0
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	461a      	mov	r2, r3
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	bf0c      	ite	eq
 8001af0:	2301      	moveq	r3, #1
 8001af2:	2300      	movne	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	461a      	mov	r2, r3
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf14      	ite	ne
 8001b0a:	2301      	movne	r3, #1
 8001b0c:	2300      	moveq	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	bf14      	ite	ne
 8001b32:	2301      	movne	r3, #1
 8001b34:	2300      	moveq	r3, #0
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bf14      	ite	ne
 8001b4c:	2301      	movne	r3, #1
 8001b4e:	2300      	moveq	r3, #0
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	461a      	mov	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	bf14      	ite	ne
 8001ba0:	2301      	movne	r3, #1
 8001ba2:	2300      	moveq	r3, #0
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	bf14      	ite	ne
 8001bbc:	2301      	movne	r3, #1
 8001bbe:	2300      	moveq	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00b      	b.n	8001c04 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bf2:	2b10      	cmp	r3, #16
 8001bf4:	d105      	bne.n	8001c02 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 f883 	bl	8001d04 <ETH_SetMACConfig>

    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
  }
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f023 031c 	bic.w	r3, r3, #28
 8001c22:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001c24:	f001 fc5a 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8001c28:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d908      	bls.n	8001c44 <HAL_ETH_SetMDIOClockRange+0x38>
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4a1c      	ldr	r2, [pc, #112]	; (8001ca8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d804      	bhi.n	8001c44 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	e027      	b.n	8001c94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	4a18      	ldr	r2, [pc, #96]	; (8001ca8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d908      	bls.n	8001c5e <HAL_ETH_SetMDIOClockRange+0x52>
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	4a17      	ldr	r2, [pc, #92]	; (8001cac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d204      	bcs.n	8001c5e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f043 030c 	orr.w	r3, r3, #12
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e01a      	b.n	8001c94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	4a12      	ldr	r2, [pc, #72]	; (8001cac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d303      	bcc.n	8001c6e <HAL_ETH_SetMDIOClockRange+0x62>
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d911      	bls.n	8001c92 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d908      	bls.n	8001c88 <HAL_ETH_SetMDIOClockRange+0x7c>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4a0e      	ldr	r2, [pc, #56]	; (8001cb4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d804      	bhi.n	8001c88 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f043 0304 	orr.w	r3, r3, #4
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	e005      	b.n	8001c94 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	f043 0310 	orr.w	r3, r3, #16
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	e000      	b.n	8001c94 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001c92:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68fa      	ldr	r2, [r7, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
}
 8001c9c:	bf00      	nop
 8001c9e:	3710      	adds	r7, #16
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	01312cff 	.word	0x01312cff
 8001ca8:	02160ebf 	.word	0x02160ebf
 8001cac:	03938700 	.word	0x03938700
 8001cb0:	05f5e0ff 	.word	0x05f5e0ff
 8001cb4:	08f0d17f 	.word	0x08f0d17f

08001cb8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001cd6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cda:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ce8:	2001      	movs	r0, #1
 8001cea:	f7ff f9ed 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001cf8:	6193      	str	r3, [r2, #24]
}
 8001cfa:	bf00      	nop
 8001cfc:	3710      	adds	r7, #16
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4b51      	ldr	r3, [pc, #324]	; (8001e60 <ETH_SetMACConfig+0x15c>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	7c1b      	ldrb	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d102      	bne.n	8001d2c <ETH_SetMACConfig+0x28>
 8001d26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001d2a:	e000      	b.n	8001d2e <ETH_SetMACConfig+0x2a>
 8001d2c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7c5b      	ldrb	r3, [r3, #17]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <ETH_SetMACConfig+0x38>
 8001d36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d3a:	e000      	b.n	8001d3e <ETH_SetMACConfig+0x3a>
 8001d3c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d3e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001d44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	7fdb      	ldrb	r3, [r3, #31]
 8001d4a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001d4c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001d52:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	7f92      	ldrb	r2, [r2, #30]
 8001d58:	2a00      	cmp	r2, #0
 8001d5a:	d102      	bne.n	8001d62 <ETH_SetMACConfig+0x5e>
 8001d5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d60:	e000      	b.n	8001d64 <ETH_SetMACConfig+0x60>
 8001d62:	2200      	movs	r2, #0
                        macconf->Speed |
 8001d64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	7f1b      	ldrb	r3, [r3, #28]
 8001d6a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001d6c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001d72:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	791b      	ldrb	r3, [r3, #4]
 8001d78:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001d7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d102      	bne.n	8001d8c <ETH_SetMACConfig+0x88>
 8001d86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d8a:	e000      	b.n	8001d8e <ETH_SetMACConfig+0x8a>
 8001d8c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001d8e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	7bdb      	ldrb	r3, [r3, #15]
 8001d94:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d96:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d9c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001da4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001da6:	4313      	orrs	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f7ff f982 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001dea:	2a00      	cmp	r2, #0
 8001dec:	d101      	bne.n	8001df2 <ETH_SetMACConfig+0xee>
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	e000      	b.n	8001df4 <ETH_SetMACConfig+0xf0>
 8001df2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001df4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001dfa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001dfc:	683a      	ldr	r2, [r7, #0]
 8001dfe:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001e02:	2a01      	cmp	r2, #1
 8001e04:	d101      	bne.n	8001e0a <ETH_SetMACConfig+0x106>
 8001e06:	2208      	movs	r2, #8
 8001e08:	e000      	b.n	8001e0c <ETH_SetMACConfig+0x108>
 8001e0a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001e0c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001e14:	2a01      	cmp	r2, #1
 8001e16:	d101      	bne.n	8001e1c <ETH_SetMACConfig+0x118>
 8001e18:	2204      	movs	r2, #4
 8001e1a:	e000      	b.n	8001e1e <ETH_SetMACConfig+0x11a>
 8001e1c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001e1e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001e26:	2a01      	cmp	r2, #1
 8001e28:	d101      	bne.n	8001e2e <ETH_SetMACConfig+0x12a>
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	e000      	b.n	8001e30 <ETH_SetMACConfig+0x12c>
 8001e2e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001e30:	4313      	orrs	r3, r2
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e48:	2001      	movs	r0, #1
 8001e4a:	f7ff f93d 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	ff20810f 	.word	0xff20810f

08001e64 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <ETH_SetDMAConfig+0x110>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	7b1b      	ldrb	r3, [r3, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d102      	bne.n	8001e90 <ETH_SetDMAConfig+0x2c>
 8001e8a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e8e:	e000      	b.n	8001e92 <ETH_SetDMAConfig+0x2e>
 8001e90:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	7b5b      	ldrb	r3, [r3, #13]
 8001e96:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e98:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	7f52      	ldrb	r2, [r2, #29]
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d102      	bne.n	8001ea8 <ETH_SetDMAConfig+0x44>
 8001ea2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ea6:	e000      	b.n	8001eaa <ETH_SetDMAConfig+0x46>
 8001ea8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001eaa:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7b9b      	ldrb	r3, [r3, #14]
 8001eb0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001eb2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001eb8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	7f1b      	ldrb	r3, [r3, #28]
 8001ebe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001ec0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	7f9b      	ldrb	r3, [r3, #30]
 8001ec6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001ec8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001ece:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee8:	461a      	mov	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff f8e4 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f08:	461a      	mov	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	791b      	ldrb	r3, [r3, #4]
 8001f12:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f18:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001f1e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001f24:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f2c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001f2e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001f36:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001f3c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f4a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f58:	2001      	movs	r0, #1
 8001f5a:	f7ff f8b5 	bl	80010c8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f66:	461a      	mov	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6013      	str	r3, [r2, #0]
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	f8de3f23 	.word	0xf8de3f23

08001f78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b0a6      	sub	sp, #152	; 0x98
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fde:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001fe0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001fec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fe86 	bl	8001d04 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002000:	2301      	movs	r3, #1
 8002002:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002006:	2301      	movs	r3, #1
 8002008:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800201a:	2300      	movs	r3, #0
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800201e:	2301      	movs	r3, #1
 8002020:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002028:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800202e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002032:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002034:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002038:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002040:	2300      	movs	r3, #0
 8002042:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002048:	f107 0308 	add.w	r3, r7, #8
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff ff08 	bl	8001e64 <ETH_SetDMAConfig>
}
 8002054:	bf00      	nop
 8002056:	3798      	adds	r7, #152	; 0x98
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3305      	adds	r3, #5
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	3204      	adds	r2, #4
 8002074:	7812      	ldrb	r2, [r2, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <ETH_MACAddressConfig+0x68>)
 800207e:	4413      	add	r3, r2
 8002080:	461a      	mov	r2, r3
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3303      	adds	r3, #3
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	061a      	lsls	r2, r3, #24
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3302      	adds	r3, #2
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	041b      	lsls	r3, r3, #16
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3301      	adds	r3, #1
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	4313      	orrs	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <ETH_MACAddressConfig+0x6c>)
 80020ae:	4413      	add	r3, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	6013      	str	r3, [r2, #0]
}
 80020b6:	bf00      	nop
 80020b8:	371c      	adds	r7, #28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40028040 	.word	0x40028040
 80020c8:	40028044 	.word	0x40028044

080020cc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	e03e      	b.n	8002158 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	4613      	mov	r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	4413      	add	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2200      	movs	r2, #0
 80020f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2200      	movs	r2, #0
 80020fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2200      	movs	r2, #0
 8002102:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002104:	68b9      	ldr	r1, [r7, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68fa      	ldr	r2, [r7, #12]
 800210a:	3206      	adds	r2, #6
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d80c      	bhi.n	800213c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1c5a      	adds	r2, r3, #1
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	461a      	mov	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e004      	b.n	8002146 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3301      	adds	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d9bd      	bls.n	80020da <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002170:	611a      	str	r2, [r3, #16]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	e046      	b.n	800221a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6919      	ldr	r1, [r3, #16]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2200      	movs	r2, #0
 80021a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021c8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 80021d0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80021de:	68b9      	ldr	r1, [r7, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	3212      	adds	r2, #18
 80021e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d80c      	bhi.n	800220a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6919      	ldr	r1, [r3, #16]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1c5a      	adds	r2, r3, #1
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	440b      	add	r3, r1
 8002202:	461a      	mov	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	60da      	str	r2, [r3, #12]
 8002208:	e004      	b.n	8002214 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	461a      	mov	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	3301      	adds	r3, #1
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2b03      	cmp	r3, #3
 800221e:	d9b5      	bls.n	800218c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800224a:	60da      	str	r2, [r3, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002258:	b480      	push	{r7}
 800225a:	b08d      	sub	sp, #52	; 0x34
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3318      	adds	r3, #24
 8002268:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800227e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002282:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800228e:	6a3b      	ldr	r3, [r7, #32]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800229a:	d007      	beq.n	80022ac <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800229c:	697a      	ldr	r2, [r7, #20]
 800229e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a0:	3304      	adds	r3, #4
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0ff      	b.n	80024b0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	3301      	adds	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80022c0:	6a3b      	ldr	r3, [r7, #32]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	4b7d      	ldr	r3, [pc, #500]	; (80024bc <ETH_Prepare_Tx_Descriptors+0x264>)
 80022c6:	4013      	ands	r3, r2
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	6852      	ldr	r2, [r2, #4]
 80022cc:	431a      	orrs	r2, r3
 80022ce:	6a3b      	ldr	r3, [r7, #32]
 80022d0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d008      	beq.n	80022f0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	431a      	orrs	r2, r3
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	431a      	orrs	r2, r3
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d005      	beq.n	8002326 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002332:	f3bf 8f5f 	dmb	sy
}
 8002336:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002340:	6a3b      	ldr	r3, [r7, #32]
 8002342:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002344:	e082      	b.n	800244c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d006      	beq.n	8002366 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e005      	b.n	8002372 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002374:	3301      	adds	r3, #1
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800237a:	2b03      	cmp	r3, #3
 800237c:	d902      	bls.n	8002384 <ETH_Prepare_Tx_Descriptors+0x12c>
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	3b04      	subs	r3, #4
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800239a:	6a3b      	ldr	r3, [r7, #32]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023a6:	d007      	beq.n	80023b8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	3304      	adds	r3, #4
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d029      	beq.n	800240c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ca:	e019      	b.n	8002400 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80023cc:	f3bf 8f5f 	dmb	sy
}
 80023d0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	3301      	adds	r3, #1
 80023e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	d902      	bls.n	80023f0 <ETH_Prepare_Tx_Descriptors+0x198>
 80023ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ec:	3b04      	subs	r3, #4
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	3301      	adds	r3, #1
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002400:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	429a      	cmp	r2, r3
 8002406:	d3e1      	bcc.n	80023cc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002408:	2302      	movs	r3, #2
 800240a:	e051      	b.n	80024b0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	3301      	adds	r3, #1
 8002410:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	6a3b      	ldr	r3, [r7, #32]
 8002420:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002422:	6a3b      	ldr	r3, [r7, #32]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002428:	4013      	ands	r3, r2
 800242a:	69fa      	ldr	r2, [r7, #28]
 800242c:	6852      	ldr	r2, [r2, #4]
 800242e:	431a      	orrs	r2, r3
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	3301      	adds	r3, #1
 8002438:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800243a:	f3bf 8f5f 	dmb	sy
}
 800243e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	f47f af78 	bne.w	8002346 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e005      	b.n	8002476 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002486:	6979      	ldr	r1, [r7, #20]
 8002488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800248a:	3304      	adds	r3, #4
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	440b      	add	r3, r1
 8002490:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002496:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	4413      	add	r3, r2
 80024a4:	1c5a      	adds	r2, r3, #1
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80024aa:	b662      	cpsie	i
}
 80024ac:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3734      	adds	r7, #52	; 0x34
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	ffffe000 	.word	0xffffe000

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e175      	b.n	80027cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8164 	bne.w	80027c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x56>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80be 	beq.w	80027c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	4b66      	ldr	r3, [pc, #408]	; (80027e4 <HAL_GPIO_Init+0x324>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a65      	ldr	r2, [pc, #404]	; (80027e4 <HAL_GPIO_Init+0x324>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <HAL_GPIO_Init+0x324>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002662:	4a61      	ldr	r2, [pc, #388]	; (80027e8 <HAL_GPIO_Init+0x328>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a58      	ldr	r2, [pc, #352]	; (80027ec <HAL_GPIO_Init+0x32c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d037      	beq.n	80026fe <HAL_GPIO_Init+0x23e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a57      	ldr	r2, [pc, #348]	; (80027f0 <HAL_GPIO_Init+0x330>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d031      	beq.n	80026fa <HAL_GPIO_Init+0x23a>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a56      	ldr	r2, [pc, #344]	; (80027f4 <HAL_GPIO_Init+0x334>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d02b      	beq.n	80026f6 <HAL_GPIO_Init+0x236>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a55      	ldr	r2, [pc, #340]	; (80027f8 <HAL_GPIO_Init+0x338>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d025      	beq.n	80026f2 <HAL_GPIO_Init+0x232>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a54      	ldr	r2, [pc, #336]	; (80027fc <HAL_GPIO_Init+0x33c>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d01f      	beq.n	80026ee <HAL_GPIO_Init+0x22e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_GPIO_Init+0x340>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d019      	beq.n	80026ea <HAL_GPIO_Init+0x22a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x344>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d013      	beq.n	80026e6 <HAL_GPIO_Init+0x226>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a51      	ldr	r2, [pc, #324]	; (8002808 <HAL_GPIO_Init+0x348>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d00d      	beq.n	80026e2 <HAL_GPIO_Init+0x222>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a50      	ldr	r2, [pc, #320]	; (800280c <HAL_GPIO_Init+0x34c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d007      	beq.n	80026de <HAL_GPIO_Init+0x21e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a4f      	ldr	r2, [pc, #316]	; (8002810 <HAL_GPIO_Init+0x350>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_GPIO_Init+0x21a>
 80026d6:	2309      	movs	r3, #9
 80026d8:	e012      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026da:	230a      	movs	r3, #10
 80026dc:	e010      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026de:	2308      	movs	r3, #8
 80026e0:	e00e      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026e2:	2307      	movs	r3, #7
 80026e4:	e00c      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026e6:	2306      	movs	r3, #6
 80026e8:	e00a      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026ea:	2305      	movs	r3, #5
 80026ec:	e008      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026ee:	2304      	movs	r3, #4
 80026f0:	e006      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026f2:	2303      	movs	r3, #3
 80026f4:	e004      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e002      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026fa:	2301      	movs	r3, #1
 80026fc:	e000      	b.n	8002700 <HAL_GPIO_Init+0x240>
 80026fe:	2300      	movs	r3, #0
 8002700:	69fa      	ldr	r2, [r7, #28]
 8002702:	f002 0203 	and.w	r2, r2, #3
 8002706:	0092      	lsls	r2, r2, #2
 8002708:	4093      	lsls	r3, r2
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002710:	4935      	ldr	r1, [pc, #212]	; (80027e8 <HAL_GPIO_Init+0x328>)
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	3302      	adds	r3, #2
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800271e:	4b3d      	ldr	r3, [pc, #244]	; (8002814 <HAL_GPIO_Init+0x354>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002742:	4a34      	ldr	r2, [pc, #208]	; (8002814 <HAL_GPIO_Init+0x354>)
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_GPIO_Init+0x354>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800276c:	4a29      	ldr	r2, [pc, #164]	; (8002814 <HAL_GPIO_Init+0x354>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002772:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_GPIO_Init+0x354>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	43db      	mvns	r3, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4013      	ands	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002796:	4a1f      	ldr	r2, [pc, #124]	; (8002814 <HAL_GPIO_Init+0x354>)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279c:	4b1d      	ldr	r3, [pc, #116]	; (8002814 <HAL_GPIO_Init+0x354>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4013      	ands	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c0:	4a14      	ldr	r2, [pc, #80]	; (8002814 <HAL_GPIO_Init+0x354>)
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3301      	adds	r3, #1
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2b0f      	cmp	r3, #15
 80027d0:	f67f ae86 	bls.w	80024e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	3724      	adds	r7, #36	; 0x24
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40023800 	.word	0x40023800
 80027e8:	40013800 	.word	0x40013800
 80027ec:	40020000 	.word	0x40020000
 80027f0:	40020400 	.word	0x40020400
 80027f4:	40020800 	.word	0x40020800
 80027f8:	40020c00 	.word	0x40020c00
 80027fc:	40021000 	.word	0x40021000
 8002800:	40021400 	.word	0x40021400
 8002804:	40021800 	.word	0x40021800
 8002808:	40021c00 	.word	0x40021c00
 800280c:	40022000 	.word	0x40022000
 8002810:	40022400 	.word	0x40022400
 8002814:	40013c00 	.word	0x40013c00

08002818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	460b      	mov	r3, r1
 8002822:	807b      	strh	r3, [r7, #2]
 8002824:	4613      	mov	r3, r2
 8002826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002828:	787b      	ldrb	r3, [r7, #1]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002834:	e003      	b.n	800283e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002836:	887b      	ldrh	r3, [r7, #2]
 8002838:	041a      	lsls	r2, r3, #16
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	619a      	str	r2, [r3, #24]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800284a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800284c:	b08f      	sub	sp, #60	; 0x3c
 800284e:	af0a      	add	r7, sp, #40	; 0x28
 8002850:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e116      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7fe f8be 	bl	80009f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2203      	movs	r2, #3
 8002880:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d102      	bne.n	8002896 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f001 ff3a 	bl	8004714 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	687e      	ldr	r6, [r7, #4]
 80028a8:	466d      	mov	r5, sp
 80028aa:	f106 0410 	add.w	r4, r6, #16
 80028ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80028be:	1d33      	adds	r3, r6, #4
 80028c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c2:	6838      	ldr	r0, [r7, #0]
 80028c4:	f001 fece 	bl	8004664 <USB_CoreInit>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d005      	beq.n	80028da <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2202      	movs	r2, #2
 80028d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0d7      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f001 ff28 	bl	8004736 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	73fb      	strb	r3, [r7, #15]
 80028ea:	e04a      	b.n	8002982 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028ec:	7bfa      	ldrb	r2, [r7, #15]
 80028ee:	6879      	ldr	r1, [r7, #4]
 80028f0:	4613      	mov	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	4413      	add	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	333d      	adds	r3, #61	; 0x3d
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002900:	7bfa      	ldrb	r2, [r7, #15]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4413      	add	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	333c      	adds	r3, #60	; 0x3c
 8002910:	7bfa      	ldrb	r2, [r7, #15]
 8002912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002914:	7bfa      	ldrb	r2, [r7, #15]
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	b298      	uxth	r0, r3
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3344      	adds	r3, #68	; 0x44
 8002928:	4602      	mov	r2, r0
 800292a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800292c:	7bfa      	ldrb	r2, [r7, #15]
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	3340      	adds	r3, #64	; 0x40
 800293c:	2200      	movs	r2, #0
 800293e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002954:	7bfa      	ldrb	r2, [r7, #15]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	334c      	adds	r3, #76	; 0x4c
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	4413      	add	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3354      	adds	r3, #84	; 0x54
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	3301      	adds	r3, #1
 8002980:	73fb      	strb	r3, [r7, #15]
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3af      	bcc.n	80028ec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	2300      	movs	r3, #0
 800298e:	73fb      	strb	r3, [r7, #15]
 8002990:	e044      	b.n	8002a1c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002992:	7bfa      	ldrb	r2, [r7, #15]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029ba:	7bfa      	ldrb	r2, [r7, #15]
 80029bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029be:	7bfa      	ldrb	r2, [r7, #15]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4413      	add	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029d4:	7bfa      	ldrb	r2, [r7, #15]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4413      	add	r3, r2
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	440b      	add	r3, r1
 80029f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029fc:	2200      	movs	r2, #0
 80029fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4413      	add	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d3b5      	bcc.n	8002992 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	687e      	ldr	r6, [r7, #4]
 8002a2e:	466d      	mov	r5, sp
 8002a30:	f106 0410 	add.w	r4, r6, #16
 8002a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a44:	1d33      	adds	r3, r6, #4
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	6838      	ldr	r0, [r7, #0]
 8002a4a:	f001 fec1 	bl	80047d0 <USB_DevInit>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e014      	b.n	8002a8a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d102      	bne.n	8002a7e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f80b 	bl	8002a94 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f002 f87f 	bl	8004b86 <USB_DevDisconnect>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002a94 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	10000003 	.word	0x10000003

08002adc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40007000 	.word	0x40007000

08002afc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002b06:	4b23      	ldr	r3, [pc, #140]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a22      	ldr	r2, [pc, #136]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b20      	ldr	r3, [pc, #128]	; (8002b94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1d      	ldr	r2, [pc, #116]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2a:	f7fe fac1 	bl	80010b0 <HAL_GetTick>
 8002b2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b30:	e009      	b.n	8002b46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b32:	f7fe fabd 	bl	80010b0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b40:	d901      	bls.n	8002b46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e022      	b.n	8002b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b52:	d1ee      	bne.n	8002b32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002b54:	4b10      	ldr	r3, [pc, #64]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0f      	ldr	r2, [pc, #60]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b60:	f7fe faa6 	bl	80010b0 <HAL_GetTick>
 8002b64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b66:	e009      	b.n	8002b7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002b68:	f7fe faa2 	bl	80010b0 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b76:	d901      	bls.n	8002b7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e007      	b.n	8002b8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b88:	d1ee      	bne.n	8002b68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	40007000 	.word	0x40007000

08002b9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d101      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e29b      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 8087 	beq.w	8002cce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc0:	4b96      	ldr	r3, [pc, #600]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 030c 	and.w	r3, r3, #12
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d00c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bcc:	4b93      	ldr	r3, [pc, #588]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 030c 	and.w	r3, r3, #12
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d112      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
 8002bd8:	4b90      	ldr	r3, [pc, #576]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002be0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be4:	d10b      	bne.n	8002bfe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be6:	4b8d      	ldr	r3, [pc, #564]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d06c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x130>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d168      	bne.n	8002ccc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e275      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x7a>
 8002c08:	4b84      	ldr	r3, [pc, #528]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a83      	ldr	r2, [pc, #524]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]
 8002c14:	e02e      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x9c>
 8002c1e:	4b7f      	ldr	r3, [pc, #508]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a7e      	ldr	r2, [pc, #504]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c28:	6013      	str	r3, [r2, #0]
 8002c2a:	4b7c      	ldr	r3, [pc, #496]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a7b      	ldr	r2, [pc, #492]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0xc0>
 8002c42:	4b76      	ldr	r3, [pc, #472]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a75      	ldr	r2, [pc, #468]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b73      	ldr	r3, [pc, #460]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a72      	ldr	r2, [pc, #456]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xd8>
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a6e      	ldr	r2, [pc, #440]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b6c      	ldr	r3, [pc, #432]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a6b      	ldr	r2, [pc, #428]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa18 	bl	80010b0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fa14 	bl	80010b0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e229      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b61      	ldr	r3, [pc, #388]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xe8>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa04 	bl	80010b0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fa00 	bl	80010b0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e215      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x110>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d069      	beq.n	8002dae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002cda:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b4d      	ldr	r3, [pc, #308]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x190>
 8002cf2:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1e9      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	493d      	ldr	r1, [pc, #244]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e040      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d023      	beq.n	8002d7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d3a:	f043 0301 	orr.w	r3, r3, #1
 8002d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7fe f9b6 	bl	80010b0 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d48:	f7fe f9b2 	bl	80010b0 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e1c7      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5a:	4b30      	ldr	r3, [pc, #192]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4929      	ldr	r1, [pc, #164]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]
 8002d7a:	e018      	b.n	8002dae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002d82:	f023 0301 	bic.w	r3, r3, #1
 8002d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f992 	bl	80010b0 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7fe f98e 	bl	80010b0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e1a3      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1e      	ldr	r3, [pc, #120]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d038      	beq.n	8002e2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d019      	beq.n	8002df6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc6:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dc8:	f043 0301 	orr.w	r3, r3, #1
 8002dcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dce:	f7fe f96f 	bl	80010b0 <HAL_GetTick>
 8002dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd4:	e008      	b.n	8002de8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd6:	f7fe f96b 	bl	80010b0 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	d901      	bls.n	8002de8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e180      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0f0      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x23a>
 8002df4:	e01a      	b.n	8002e2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_RCC_OscConfig+0x280>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7fe f955 	bl	80010b0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e08:	e00a      	b.n	8002e20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7fe f951 	bl	80010b0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d903      	bls.n	8002e20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e166      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
 8002e1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ee      	bne.n	8002e0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 80a4 	beq.w	8002f82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4a88      	ldr	r2, [pc, #544]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6413      	str	r3, [r2, #64]	; 0x40
 8002e52:	4b86      	ldr	r3, [pc, #536]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e62:	4b83      	ldr	r3, [pc, #524]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d118      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002e6e:	4b80      	ldr	r3, [pc, #512]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a7f      	ldr	r2, [pc, #508]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7a:	f7fe f919 	bl	80010b0 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e80:	e008      	b.n	8002e94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e82:	f7fe f915 	bl	80010b0 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e12a      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e94:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x4d4>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d0f0      	beq.n	8002e82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x31a>
 8002ea8:	4b70      	ldr	r3, [pc, #448]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	4a6f      	ldr	r2, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002eae:	f043 0301 	orr.w	r3, r3, #1
 8002eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb4:	e02d      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x33c>
 8002ebe:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec2:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ec4:	f023 0301 	bic.w	r3, r3, #1
 8002ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8002eca:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ed0:	f023 0304 	bic.w	r3, r3, #4
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed6:	e01c      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d10c      	bne.n	8002efa <HAL_RCC_OscConfig+0x35e>
 8002ee0:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee4:	4a61      	ldr	r2, [pc, #388]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	; 0x70
 8002eec:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a5e      	ldr	r2, [pc, #376]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	e00b      	b.n	8002f12 <HAL_RCC_OscConfig+0x376>
 8002efa:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a5b      	ldr	r2, [pc, #364]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	f023 0301 	bic.w	r3, r3, #1
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
 8002f06:	4b59      	ldr	r3, [pc, #356]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a58      	ldr	r2, [pc, #352]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f0c:	f023 0304 	bic.w	r3, r3, #4
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d015      	beq.n	8002f46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1a:	f7fe f8c9 	bl	80010b0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f20:	e00a      	b.n	8002f38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f22:	f7fe f8c5 	bl	80010b0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0d8      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f38:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ee      	beq.n	8002f22 <HAL_RCC_OscConfig+0x386>
 8002f44:	e014      	b.n	8002f70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f46:	f7fe f8b3 	bl	80010b0 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4e:	f7fe f8af 	bl	80010b0 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e0c2      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1ee      	bne.n	8002f4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d105      	bne.n	8002f82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80ae 	beq.w	80030e8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 030c 	and.w	r3, r3, #12
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d06d      	beq.n	8003074 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d14b      	bne.n	8003038 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002fa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe f880 	bl	80010b0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fb4:	f7fe f87c 	bl	80010b0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e091      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc6:	4b29      	ldr	r3, [pc, #164]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	69da      	ldr	r2, [r3, #28]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	019b      	lsls	r3, r3, #6
 8002fe2:	431a      	orrs	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	3b01      	subs	r3, #1
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	071b      	lsls	r3, r3, #28
 8002ffe:	491b      	ldr	r1, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a18      	ldr	r2, [pc, #96]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800300a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800300e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003010:	f7fe f84e 	bl	80010b0 <HAL_GetTick>
 8003014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003016:	e008      	b.n	800302a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003018:	f7fe f84a 	bl	80010b0 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b02      	cmp	r3, #2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e05f      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800302a:	4b10      	ldr	r3, [pc, #64]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d0f0      	beq.n	8003018 <HAL_RCC_OscConfig+0x47c>
 8003036:	e057      	b.n	80030e8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003038:	4b0c      	ldr	r3, [pc, #48]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a0b      	ldr	r2, [pc, #44]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 800303e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe f834 	bl	80010b0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe f830 	bl	80010b0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e045      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_OscConfig+0x4d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x4b0>
 800306a:	e03d      	b.n	80030e8 <HAL_RCC_OscConfig+0x54c>
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <HAL_RCC_OscConfig+0x558>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d030      	beq.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d129      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309a:	429a      	cmp	r2, r3
 800309c:	d122      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030aa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d119      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	3b01      	subs	r3, #1
 80030be:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d10f      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80030e8:	2300      	movs	r3, #0
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800

080030f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0d0      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003110:	4b6a      	ldr	r3, [pc, #424]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d910      	bls.n	8003140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311e:	4b67      	ldr	r3, [pc, #412]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f023 020f 	bic.w	r2, r3, #15
 8003126:	4965      	ldr	r1, [pc, #404]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800312e:	4b63      	ldr	r3, [pc, #396]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	429a      	cmp	r2, r3
 800313a:	d001      	beq.n	8003140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0b8      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d020      	beq.n	800318e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003158:	4b59      	ldr	r3, [pc, #356]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	4a58      	ldr	r2, [pc, #352]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003162:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003170:	4b53      	ldr	r3, [pc, #332]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a52      	ldr	r2, [pc, #328]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800317a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	494d      	ldr	r1, [pc, #308]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d040      	beq.n	800321c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d107      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d115      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07f      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d109      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e073      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ca:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e06b      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031da:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f023 0203 	bic.w	r2, r3, #3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	4936      	ldr	r1, [pc, #216]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031ec:	f7fd ff60 	bl	80010b0 <HAL_GetTick>
 80031f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031f2:	e00a      	b.n	800320a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031f4:	f7fd ff5c 	bl	80010b0 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e053      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800320a:	4b2d      	ldr	r3, [pc, #180]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 020c 	and.w	r2, r3, #12
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	429a      	cmp	r2, r3
 800321a:	d1eb      	bne.n	80031f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d210      	bcs.n	800324c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b24      	ldr	r3, [pc, #144]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 020f 	bic.w	r2, r3, #15
 8003232:	4922      	ldr	r1, [pc, #136]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b20      	ldr	r3, [pc, #128]	; (80032bc <HAL_RCC_ClockConfig+0x1c4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 030f 	and.w	r3, r3, #15
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e032      	b.n	80032b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b00      	cmp	r3, #0
 8003256:	d008      	beq.n	800326a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003258:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003276:	4b12      	ldr	r3, [pc, #72]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	490e      	ldr	r1, [pc, #56]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003286:	4313      	orrs	r3, r2
 8003288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800328a:	f000 f821 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 800328e:	4602      	mov	r2, r0
 8003290:	4b0b      	ldr	r3, [pc, #44]	; (80032c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 030f 	and.w	r3, r3, #15
 800329a:	490a      	ldr	r1, [pc, #40]	; (80032c4 <HAL_RCC_ClockConfig+0x1cc>)
 800329c:	5ccb      	ldrb	r3, [r1, r3]
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	4a09      	ldr	r2, [pc, #36]	; (80032c8 <HAL_RCC_ClockConfig+0x1d0>)
 80032a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_RCC_ClockConfig+0x1d4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd febc 	bl	8001028 <HAL_InitTick>

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023c00 	.word	0x40023c00
 80032c0:	40023800 	.word	0x40023800
 80032c4:	08012afc 	.word	0x08012afc
 80032c8:	20000000 	.word	0x20000000
 80032cc:	20000004 	.word	0x20000004

080032d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032d4:	b094      	sub	sp, #80	; 0x50
 80032d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032d8:	2300      	movs	r3, #0
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	2300      	movs	r3, #0
 80032de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e0:	2300      	movs	r3, #0
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032e8:	4b79      	ldr	r3, [pc, #484]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d00d      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x40>
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	f200 80e1 	bhi.w	80034bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <HAL_RCC_GetSysClockFreq+0x34>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d003      	beq.n	800330a <HAL_RCC_GetSysClockFreq+0x3a>
 8003302:	e0db      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003304:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003306:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003308:	e0db      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800330a:	4b73      	ldr	r3, [pc, #460]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800330c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800330e:	e0d8      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003318:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800331a:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d063      	beq.n	80033ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003326:	4b6a      	ldr	r3, [pc, #424]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	099b      	lsrs	r3, r3, #6
 800332c:	2200      	movs	r2, #0
 800332e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003330:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
 800333a:	2300      	movs	r3, #0
 800333c:	637b      	str	r3, [r7, #52]	; 0x34
 800333e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003342:	4622      	mov	r2, r4
 8003344:	462b      	mov	r3, r5
 8003346:	f04f 0000 	mov.w	r0, #0
 800334a:	f04f 0100 	mov.w	r1, #0
 800334e:	0159      	lsls	r1, r3, #5
 8003350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003354:	0150      	lsls	r0, r2, #5
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4621      	mov	r1, r4
 800335c:	1a51      	subs	r1, r2, r1
 800335e:	6139      	str	r1, [r7, #16]
 8003360:	4629      	mov	r1, r5
 8003362:	eb63 0301 	sbc.w	r3, r3, r1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003374:	4659      	mov	r1, fp
 8003376:	018b      	lsls	r3, r1, #6
 8003378:	4651      	mov	r1, sl
 800337a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800337e:	4651      	mov	r1, sl
 8003380:	018a      	lsls	r2, r1, #6
 8003382:	4651      	mov	r1, sl
 8003384:	ebb2 0801 	subs.w	r8, r2, r1
 8003388:	4659      	mov	r1, fp
 800338a:	eb63 0901 	sbc.w	r9, r3, r1
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800339a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800339e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033a2:	4690      	mov	r8, r2
 80033a4:	4699      	mov	r9, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	eb18 0303 	adds.w	r3, r8, r3
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	462b      	mov	r3, r5
 80033b0:	eb49 0303 	adc.w	r3, r9, r3
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	f04f 0200 	mov.w	r2, #0
 80033ba:	f04f 0300 	mov.w	r3, #0
 80033be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80033c2:	4629      	mov	r1, r5
 80033c4:	024b      	lsls	r3, r1, #9
 80033c6:	4621      	mov	r1, r4
 80033c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033cc:	4621      	mov	r1, r4
 80033ce:	024a      	lsls	r2, r1, #9
 80033d0:	4610      	mov	r0, r2
 80033d2:	4619      	mov	r1, r3
 80033d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d6:	2200      	movs	r2, #0
 80033d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80033e0:	f7fc ff7e 	bl	80002e0 <__aeabi_uldivmod>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4613      	mov	r3, r2
 80033ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ec:	e058      	b.n	80034a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ee:	4b38      	ldr	r3, [pc, #224]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	099b      	lsrs	r3, r3, #6
 80033f4:	2200      	movs	r2, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	4611      	mov	r1, r2
 80033fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033fe:	623b      	str	r3, [r7, #32]
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
 8003404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	f04f 0000 	mov.w	r0, #0
 8003410:	f04f 0100 	mov.w	r1, #0
 8003414:	0159      	lsls	r1, r3, #5
 8003416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800341a:	0150      	lsls	r0, r2, #5
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4641      	mov	r1, r8
 8003422:	ebb2 0a01 	subs.w	sl, r2, r1
 8003426:	4649      	mov	r1, r9
 8003428:	eb63 0b01 	sbc.w	fp, r3, r1
 800342c:	f04f 0200 	mov.w	r2, #0
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800343c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003440:	ebb2 040a 	subs.w	r4, r2, sl
 8003444:	eb63 050b 	sbc.w	r5, r3, fp
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	f04f 0300 	mov.w	r3, #0
 8003450:	00eb      	lsls	r3, r5, #3
 8003452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	4614      	mov	r4, r2
 800345a:	461d      	mov	r5, r3
 800345c:	4643      	mov	r3, r8
 800345e:	18e3      	adds	r3, r4, r3
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	464b      	mov	r3, r9
 8003464:	eb45 0303 	adc.w	r3, r5, r3
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003476:	4629      	mov	r1, r5
 8003478:	028b      	lsls	r3, r1, #10
 800347a:	4621      	mov	r1, r4
 800347c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003480:	4621      	mov	r1, r4
 8003482:	028a      	lsls	r2, r1, #10
 8003484:	4610      	mov	r0, r2
 8003486:	4619      	mov	r1, r3
 8003488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	61bb      	str	r3, [r7, #24]
 800348e:	61fa      	str	r2, [r7, #28]
 8003490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003494:	f7fc ff24 	bl	80002e0 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0303 	and.w	r3, r3, #3
 80034aa:	3301      	adds	r3, #1
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80034b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034bc:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80034be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3750      	adds	r7, #80	; 0x50
 80034c8:	46bd      	mov	sp, r7
 80034ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034ce:	bf00      	nop
 80034d0:	40023800 	.word	0x40023800
 80034d4:	00f42400 	.word	0x00f42400
 80034d8:	007a1200 	.word	0x007a1200

080034dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80034e2:	681b      	ldr	r3, [r3, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	20000000 	.word	0x20000000

080034f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034f8:	f7ff fff0 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 80034fc:	4602      	mov	r2, r0
 80034fe:	4b05      	ldr	r3, [pc, #20]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	0a9b      	lsrs	r3, r3, #10
 8003504:	f003 0307 	and.w	r3, r3, #7
 8003508:	4903      	ldr	r1, [pc, #12]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350a:	5ccb      	ldrb	r3, [r1, r3]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	08012b0c 	.word	0x08012b0c

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003520:	f7ff ffdc 	bl	80034dc <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	0b5b      	lsrs	r3, r3, #13
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4903      	ldr	r1, [pc, #12]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003538:	4618      	mov	r0, r3
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	08012b0c 	.word	0x08012b0c

08003544 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d012      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800356c:	4b69      	ldr	r3, [pc, #420]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4a68      	ldr	r2, [pc, #416]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003572:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003576:	6093      	str	r3, [r2, #8]
 8003578:	4b66      	ldr	r3, [pc, #408]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003580:	4964      	ldr	r1, [pc, #400]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003582:	4313      	orrs	r3, r2
 8003584:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800358e:	2301      	movs	r3, #1
 8003590:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800359e:	4b5d      	ldr	r3, [pc, #372]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	4959      	ldr	r1, [pc, #356]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035bc:	d101      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80035be:	2301      	movs	r3, #1
 80035c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80035ca:	2301      	movs	r3, #1
 80035cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d017      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035da:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e8:	494a      	ldr	r1, [pc, #296]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ea:	4313      	orrs	r3, r2
 80035ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f8:	d101      	bne.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80035fa:	2301      	movs	r3, #1
 80035fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003606:	2301      	movs	r3, #1
 8003608:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003616:	2301      	movs	r3, #1
 8003618:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0320 	and.w	r3, r3, #32
 8003622:	2b00      	cmp	r3, #0
 8003624:	f000 808b 	beq.w	800373e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003628:	4b3a      	ldr	r3, [pc, #232]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	4a39      	ldr	r2, [pc, #228]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	6413      	str	r3, [r2, #64]	; 0x40
 8003634:	4b37      	ldr	r3, [pc, #220]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003640:	4b35      	ldr	r3, [pc, #212]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a34      	ldr	r2, [pc, #208]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800364a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364c:	f7fd fd30 	bl	80010b0 <HAL_GetTick>
 8003650:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003654:	f7fd fd2c 	bl	80010b0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b64      	cmp	r3, #100	; 0x64
 8003660:	d901      	bls.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e38f      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003666:	4b2c      	ldr	r3, [pc, #176]	; (8003718 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0f0      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003672:	4b28      	ldr	r3, [pc, #160]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800367a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d035      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	429a      	cmp	r2, r3
 800368e:	d02e      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800369a:	4b1e      	ldr	r3, [pc, #120]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a6:	4b1b      	ldr	r3, [pc, #108]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80036b2:	4a18      	ldr	r2, [pc, #96]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036b8:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d114      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c4:	f7fd fcf4 	bl	80010b0 <HAL_GetTick>
 80036c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ca:	e00a      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036cc:	f7fd fcf0 	bl	80010b0 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e351      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e2:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0ee      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036fa:	d111      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003708:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800370a:	400b      	ands	r3, r1
 800370c:	4901      	ldr	r1, [pc, #4]	; (8003714 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	4313      	orrs	r3, r2
 8003710:	608b      	str	r3, [r1, #8]
 8003712:	e00b      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003714:	40023800 	.word	0x40023800
 8003718:	40007000 	.word	0x40007000
 800371c:	0ffffcff 	.word	0x0ffffcff
 8003720:	4bac      	ldr	r3, [pc, #688]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	4aab      	ldr	r2, [pc, #684]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003726:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800372a:	6093      	str	r3, [r2, #8]
 800372c:	4ba9      	ldr	r3, [pc, #676]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	49a6      	ldr	r1, [pc, #664]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800374a:	4ba2      	ldr	r3, [pc, #648]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003750:	4aa0      	ldr	r2, [pc, #640]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003752:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003756:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800375a:	4b9e      	ldr	r3, [pc, #632]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	499b      	ldr	r1, [pc, #620]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003766:	4313      	orrs	r3, r2
 8003768:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00a      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003778:	4b96      	ldr	r3, [pc, #600]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003786:	4993      	ldr	r1, [pc, #588]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800379a:	4b8e      	ldr	r3, [pc, #568]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037a8:	498a      	ldr	r1, [pc, #552]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037bc:	4b85      	ldr	r3, [pc, #532]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ca:	4982      	ldr	r1, [pc, #520]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00a      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80037de:	4b7d      	ldr	r3, [pc, #500]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ec:	4979      	ldr	r1, [pc, #484]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00a      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003800:	4b74      	ldr	r3, [pc, #464]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f023 0203 	bic.w	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	4971      	ldr	r1, [pc, #452]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003810:	4313      	orrs	r3, r2
 8003812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003822:	4b6c      	ldr	r3, [pc, #432]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003828:	f023 020c 	bic.w	r2, r3, #12
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003830:	4968      	ldr	r1, [pc, #416]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003844:	4b63      	ldr	r3, [pc, #396]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003852:	4960      	ldr	r1, [pc, #384]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003854:	4313      	orrs	r3, r2
 8003856:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00a      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003866:	4b5b      	ldr	r3, [pc, #364]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003874:	4957      	ldr	r1, [pc, #348]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00a      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003888:	4b52      	ldr	r3, [pc, #328]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800388a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003896:	494f      	ldr	r1, [pc, #316]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003898:	4313      	orrs	r3, r2
 800389a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80038aa:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b8:	4946      	ldr	r1, [pc, #280]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ba:	4313      	orrs	r3, r2
 80038bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00a      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80038cc:	4b41      	ldr	r3, [pc, #260]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038da:	493e      	ldr	r1, [pc, #248]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038dc:	4313      	orrs	r3, r2
 80038de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80038ee:	4b39      	ldr	r3, [pc, #228]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fc:	4935      	ldr	r1, [pc, #212]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003910:	4b30      	ldr	r3, [pc, #192]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003916:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800391e:	492d      	ldr	r1, [pc, #180]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003920:	4313      	orrs	r3, r2
 8003922:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d011      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003932:	4b28      	ldr	r3, [pc, #160]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003940:	4924      	ldr	r1, [pc, #144]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003942:	4313      	orrs	r3, r2
 8003944:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800394c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003950:	d101      	bne.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003952:	2301      	movs	r3, #1
 8003954:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003972:	4b18      	ldr	r3, [pc, #96]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003980:	4914      	ldr	r1, [pc, #80]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00b      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039a4:	490b      	ldr	r1, [pc, #44]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00f      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80039b8:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039be:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	4902      	ldr	r1, [pc, #8]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039d0:	e002      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80039d2:	bf00      	nop
 80039d4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80039e4:	4b8a      	ldr	r3, [pc, #552]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f4:	4986      	ldr	r1, [pc, #536]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00b      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003a08:	4b81      	ldr	r3, [pc, #516]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a18:	497d      	ldr	r1, [pc, #500]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d006      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80d6 	beq.w	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a34:	4b76      	ldr	r3, [pc, #472]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a75      	ldr	r2, [pc, #468]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a40:	f7fd fb36 	bl	80010b0 <HAL_GetTick>
 8003a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a48:	f7fd fb32 	bl	80010b0 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e195      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a5a:	4b6d      	ldr	r3, [pc, #436]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d021      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d11d      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a8e:	0e1b      	lsrs	r3, r3, #24
 8003a90:	f003 030f 	and.w	r3, r3, #15
 8003a94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	019a      	lsls	r2, r3, #6
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	061b      	lsls	r3, r3, #24
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	071b      	lsls	r3, r3, #28
 8003aae:	4958      	ldr	r1, [pc, #352]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d004      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d00a      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d02e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae0:	d129      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ae2:	4b4b      	ldr	r3, [pc, #300]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003af0:	4b47      	ldr	r3, [pc, #284]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003af2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003af6:	0f1b      	lsrs	r3, r3, #28
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	019a      	lsls	r2, r3, #6
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	041b      	lsls	r3, r3, #16
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	071b      	lsls	r3, r3, #28
 8003b16:	493e      	ldr	r1, [pc, #248]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b1e:	4b3c      	ldr	r3, [pc, #240]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	f023 021f 	bic.w	r2, r3, #31
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	4938      	ldr	r1, [pc, #224]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d01d      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b42:	4b33      	ldr	r3, [pc, #204]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b48:	0e1b      	lsrs	r3, r3, #24
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b50:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b56:	0f1b      	lsrs	r3, r3, #28
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	019a      	lsls	r2, r3, #6
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	431a      	orrs	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	071b      	lsls	r3, r3, #28
 8003b76:	4926      	ldr	r1, [pc, #152]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d011      	beq.n	8003bae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	019a      	lsls	r2, r3, #6
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	071b      	lsls	r3, r3, #28
 8003ba6:	491a      	ldr	r1, [pc, #104]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bae:	4b18      	ldr	r3, [pc, #96]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bba:	f7fd fa79 	bl	80010b0 <HAL_GetTick>
 8003bbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bc2:	f7fd fa75 	bl	80010b0 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b64      	cmp	r3, #100	; 0x64
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e0d8      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	f040 80ce 	bne.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003be8:	4b09      	ldr	r3, [pc, #36]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bf4:	f7fd fa5c 	bl	80010b0 <HAL_GetTick>
 8003bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bfa:	e00b      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bfc:	f7fd fa58 	bl	80010b0 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d904      	bls.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0bb      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c14:	4b5e      	ldr	r3, [pc, #376]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c20:	d0ec      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d02e      	beq.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d12a      	bne.n	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c4a:	4b51      	ldr	r3, [pc, #324]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	0c1b      	lsrs	r3, r3, #16
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c58:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	0f1b      	lsrs	r3, r3, #28
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695b      	ldr	r3, [r3, #20]
 8003c6a:	019a      	lsls	r2, r3, #6
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	061b      	lsls	r3, r3, #24
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	071b      	lsls	r3, r3, #28
 8003c7e:	4944      	ldr	r1, [pc, #272]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c86:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	3b01      	subs	r3, #1
 8003c96:	021b      	lsls	r3, r3, #8
 8003c98:	493d      	ldr	r1, [pc, #244]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d022      	beq.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cb4:	d11d      	bne.n	8003cf2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cb6:	4b36      	ldr	r3, [pc, #216]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbc:	0e1b      	lsrs	r3, r3, #24
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cc4:	4b32      	ldr	r3, [pc, #200]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cca:	0f1b      	lsrs	r3, r3, #28
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	019a      	lsls	r2, r3, #6
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	061b      	lsls	r3, r3, #24
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	071b      	lsls	r3, r3, #28
 8003cea:	4929      	ldr	r1, [pc, #164]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d028      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cfe:	4b24      	ldr	r3, [pc, #144]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d04:	0e1b      	lsrs	r3, r3, #24
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d0c:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d12:	0c1b      	lsrs	r3, r3, #16
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	019a      	lsls	r2, r3, #6
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	041b      	lsls	r3, r3, #16
 8003d24:	431a      	orrs	r2, r3
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	061b      	lsls	r3, r3, #24
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	071b      	lsls	r3, r3, #28
 8003d32:	4917      	ldr	r1, [pc, #92]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4911      	ldr	r1, [pc, #68]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0e      	ldr	r2, [pc, #56]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5c:	f7fd f9a8 	bl	80010b0 <HAL_GetTick>
 8003d60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d64:	f7fd f9a4 	bl	80010b0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	; 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e007      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d76:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d82:	d1ef      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023800 	.word	0x40023800

08003d94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e040      	b.n	8003e28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fc fdbe 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2224      	movs	r2, #36	; 0x24
 8003dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f022 0201 	bic.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f82c 	bl	8003e30 <UART_SetConfig>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d101      	bne.n	8003de2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e022      	b.n	8003e28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 fa84 	bl	80042f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 fb0b 	bl	800443c <UART_CheckIdleState>
 8003e26:	4603      	mov	r3, r0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3708      	adds	r7, #8
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	4ba6      	ldr	r3, [pc, #664]	; (80040f4 <UART_SetConfig+0x2c4>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	6979      	ldr	r1, [r7, #20]
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a94      	ldr	r2, [pc, #592]	; (80040f8 <UART_SetConfig+0x2c8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d120      	bne.n	8003eee <UART_SetConfig+0xbe>
 8003eac:	4b93      	ldr	r3, [pc, #588]	; (80040fc <UART_SetConfig+0x2cc>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d816      	bhi.n	8003ee8 <UART_SetConfig+0xb8>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <UART_SetConfig+0x90>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003edd 	.word	0x08003edd
 8003ec8:	08003ed7 	.word	0x08003ed7
 8003ecc:	08003ee3 	.word	0x08003ee3
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	77fb      	strb	r3, [r7, #31]
 8003ed4:	e150      	b.n	8004178 <UART_SetConfig+0x348>
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	77fb      	strb	r3, [r7, #31]
 8003eda:	e14d      	b.n	8004178 <UART_SetConfig+0x348>
 8003edc:	2304      	movs	r3, #4
 8003ede:	77fb      	strb	r3, [r7, #31]
 8003ee0:	e14a      	b.n	8004178 <UART_SetConfig+0x348>
 8003ee2:	2308      	movs	r3, #8
 8003ee4:	77fb      	strb	r3, [r7, #31]
 8003ee6:	e147      	b.n	8004178 <UART_SetConfig+0x348>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	77fb      	strb	r3, [r7, #31]
 8003eec:	e144      	b.n	8004178 <UART_SetConfig+0x348>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a83      	ldr	r2, [pc, #524]	; (8004100 <UART_SetConfig+0x2d0>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d132      	bne.n	8003f5e <UART_SetConfig+0x12e>
 8003ef8:	4b80      	ldr	r3, [pc, #512]	; (80040fc <UART_SetConfig+0x2cc>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d828      	bhi.n	8003f58 <UART_SetConfig+0x128>
 8003f06:	a201      	add	r2, pc, #4	; (adr r2, 8003f0c <UART_SetConfig+0xdc>)
 8003f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f59 	.word	0x08003f59
 8003f14:	08003f59 	.word	0x08003f59
 8003f18:	08003f59 	.word	0x08003f59
 8003f1c:	08003f4d 	.word	0x08003f4d
 8003f20:	08003f59 	.word	0x08003f59
 8003f24:	08003f59 	.word	0x08003f59
 8003f28:	08003f59 	.word	0x08003f59
 8003f2c:	08003f47 	.word	0x08003f47
 8003f30:	08003f59 	.word	0x08003f59
 8003f34:	08003f59 	.word	0x08003f59
 8003f38:	08003f59 	.word	0x08003f59
 8003f3c:	08003f53 	.word	0x08003f53
 8003f40:	2300      	movs	r3, #0
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e118      	b.n	8004178 <UART_SetConfig+0x348>
 8003f46:	2302      	movs	r3, #2
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e115      	b.n	8004178 <UART_SetConfig+0x348>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e112      	b.n	8004178 <UART_SetConfig+0x348>
 8003f52:	2308      	movs	r3, #8
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e10f      	b.n	8004178 <UART_SetConfig+0x348>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e10c      	b.n	8004178 <UART_SetConfig+0x348>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a68      	ldr	r2, [pc, #416]	; (8004104 <UART_SetConfig+0x2d4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d120      	bne.n	8003faa <UART_SetConfig+0x17a>
 8003f68:	4b64      	ldr	r3, [pc, #400]	; (80040fc <UART_SetConfig+0x2cc>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f72:	2b30      	cmp	r3, #48	; 0x30
 8003f74:	d013      	beq.n	8003f9e <UART_SetConfig+0x16e>
 8003f76:	2b30      	cmp	r3, #48	; 0x30
 8003f78:	d814      	bhi.n	8003fa4 <UART_SetConfig+0x174>
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d009      	beq.n	8003f92 <UART_SetConfig+0x162>
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d810      	bhi.n	8003fa4 <UART_SetConfig+0x174>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <UART_SetConfig+0x15c>
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d006      	beq.n	8003f98 <UART_SetConfig+0x168>
 8003f8a:	e00b      	b.n	8003fa4 <UART_SetConfig+0x174>
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	77fb      	strb	r3, [r7, #31]
 8003f90:	e0f2      	b.n	8004178 <UART_SetConfig+0x348>
 8003f92:	2302      	movs	r3, #2
 8003f94:	77fb      	strb	r3, [r7, #31]
 8003f96:	e0ef      	b.n	8004178 <UART_SetConfig+0x348>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	77fb      	strb	r3, [r7, #31]
 8003f9c:	e0ec      	b.n	8004178 <UART_SetConfig+0x348>
 8003f9e:	2308      	movs	r3, #8
 8003fa0:	77fb      	strb	r3, [r7, #31]
 8003fa2:	e0e9      	b.n	8004178 <UART_SetConfig+0x348>
 8003fa4:	2310      	movs	r3, #16
 8003fa6:	77fb      	strb	r3, [r7, #31]
 8003fa8:	e0e6      	b.n	8004178 <UART_SetConfig+0x348>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a56      	ldr	r2, [pc, #344]	; (8004108 <UART_SetConfig+0x2d8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d120      	bne.n	8003ff6 <UART_SetConfig+0x1c6>
 8003fb4:	4b51      	ldr	r3, [pc, #324]	; (80040fc <UART_SetConfig+0x2cc>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc0:	d013      	beq.n	8003fea <UART_SetConfig+0x1ba>
 8003fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc4:	d814      	bhi.n	8003ff0 <UART_SetConfig+0x1c0>
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d009      	beq.n	8003fde <UART_SetConfig+0x1ae>
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d810      	bhi.n	8003ff0 <UART_SetConfig+0x1c0>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <UART_SetConfig+0x1a8>
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d006      	beq.n	8003fe4 <UART_SetConfig+0x1b4>
 8003fd6:	e00b      	b.n	8003ff0 <UART_SetConfig+0x1c0>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	77fb      	strb	r3, [r7, #31]
 8003fdc:	e0cc      	b.n	8004178 <UART_SetConfig+0x348>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e0c9      	b.n	8004178 <UART_SetConfig+0x348>
 8003fe4:	2304      	movs	r3, #4
 8003fe6:	77fb      	strb	r3, [r7, #31]
 8003fe8:	e0c6      	b.n	8004178 <UART_SetConfig+0x348>
 8003fea:	2308      	movs	r3, #8
 8003fec:	77fb      	strb	r3, [r7, #31]
 8003fee:	e0c3      	b.n	8004178 <UART_SetConfig+0x348>
 8003ff0:	2310      	movs	r3, #16
 8003ff2:	77fb      	strb	r3, [r7, #31]
 8003ff4:	e0c0      	b.n	8004178 <UART_SetConfig+0x348>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a44      	ldr	r2, [pc, #272]	; (800410c <UART_SetConfig+0x2dc>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d125      	bne.n	800404c <UART_SetConfig+0x21c>
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <UART_SetConfig+0x2cc>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800400e:	d017      	beq.n	8004040 <UART_SetConfig+0x210>
 8004010:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004014:	d817      	bhi.n	8004046 <UART_SetConfig+0x216>
 8004016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800401a:	d00b      	beq.n	8004034 <UART_SetConfig+0x204>
 800401c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004020:	d811      	bhi.n	8004046 <UART_SetConfig+0x216>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <UART_SetConfig+0x1fe>
 8004026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402a:	d006      	beq.n	800403a <UART_SetConfig+0x20a>
 800402c:	e00b      	b.n	8004046 <UART_SetConfig+0x216>
 800402e:	2300      	movs	r3, #0
 8004030:	77fb      	strb	r3, [r7, #31]
 8004032:	e0a1      	b.n	8004178 <UART_SetConfig+0x348>
 8004034:	2302      	movs	r3, #2
 8004036:	77fb      	strb	r3, [r7, #31]
 8004038:	e09e      	b.n	8004178 <UART_SetConfig+0x348>
 800403a:	2304      	movs	r3, #4
 800403c:	77fb      	strb	r3, [r7, #31]
 800403e:	e09b      	b.n	8004178 <UART_SetConfig+0x348>
 8004040:	2308      	movs	r3, #8
 8004042:	77fb      	strb	r3, [r7, #31]
 8004044:	e098      	b.n	8004178 <UART_SetConfig+0x348>
 8004046:	2310      	movs	r3, #16
 8004048:	77fb      	strb	r3, [r7, #31]
 800404a:	e095      	b.n	8004178 <UART_SetConfig+0x348>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a2f      	ldr	r2, [pc, #188]	; (8004110 <UART_SetConfig+0x2e0>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d125      	bne.n	80040a2 <UART_SetConfig+0x272>
 8004056:	4b29      	ldr	r3, [pc, #164]	; (80040fc <UART_SetConfig+0x2cc>)
 8004058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004060:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004064:	d017      	beq.n	8004096 <UART_SetConfig+0x266>
 8004066:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800406a:	d817      	bhi.n	800409c <UART_SetConfig+0x26c>
 800406c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004070:	d00b      	beq.n	800408a <UART_SetConfig+0x25a>
 8004072:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004076:	d811      	bhi.n	800409c <UART_SetConfig+0x26c>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <UART_SetConfig+0x254>
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d006      	beq.n	8004090 <UART_SetConfig+0x260>
 8004082:	e00b      	b.n	800409c <UART_SetConfig+0x26c>
 8004084:	2301      	movs	r3, #1
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e076      	b.n	8004178 <UART_SetConfig+0x348>
 800408a:	2302      	movs	r3, #2
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e073      	b.n	8004178 <UART_SetConfig+0x348>
 8004090:	2304      	movs	r3, #4
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e070      	b.n	8004178 <UART_SetConfig+0x348>
 8004096:	2308      	movs	r3, #8
 8004098:	77fb      	strb	r3, [r7, #31]
 800409a:	e06d      	b.n	8004178 <UART_SetConfig+0x348>
 800409c:	2310      	movs	r3, #16
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e06a      	b.n	8004178 <UART_SetConfig+0x348>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1b      	ldr	r2, [pc, #108]	; (8004114 <UART_SetConfig+0x2e4>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d138      	bne.n	800411e <UART_SetConfig+0x2ee>
 80040ac:	4b13      	ldr	r3, [pc, #76]	; (80040fc <UART_SetConfig+0x2cc>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80040b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ba:	d017      	beq.n	80040ec <UART_SetConfig+0x2bc>
 80040bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040c0:	d82a      	bhi.n	8004118 <UART_SetConfig+0x2e8>
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d00b      	beq.n	80040e0 <UART_SetConfig+0x2b0>
 80040c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040cc:	d824      	bhi.n	8004118 <UART_SetConfig+0x2e8>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <UART_SetConfig+0x2aa>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040d6:	d006      	beq.n	80040e6 <UART_SetConfig+0x2b6>
 80040d8:	e01e      	b.n	8004118 <UART_SetConfig+0x2e8>
 80040da:	2300      	movs	r3, #0
 80040dc:	77fb      	strb	r3, [r7, #31]
 80040de:	e04b      	b.n	8004178 <UART_SetConfig+0x348>
 80040e0:	2302      	movs	r3, #2
 80040e2:	77fb      	strb	r3, [r7, #31]
 80040e4:	e048      	b.n	8004178 <UART_SetConfig+0x348>
 80040e6:	2304      	movs	r3, #4
 80040e8:	77fb      	strb	r3, [r7, #31]
 80040ea:	e045      	b.n	8004178 <UART_SetConfig+0x348>
 80040ec:	2308      	movs	r3, #8
 80040ee:	77fb      	strb	r3, [r7, #31]
 80040f0:	e042      	b.n	8004178 <UART_SetConfig+0x348>
 80040f2:	bf00      	nop
 80040f4:	efff69f3 	.word	0xefff69f3
 80040f8:	40011000 	.word	0x40011000
 80040fc:	40023800 	.word	0x40023800
 8004100:	40004400 	.word	0x40004400
 8004104:	40004800 	.word	0x40004800
 8004108:	40004c00 	.word	0x40004c00
 800410c:	40005000 	.word	0x40005000
 8004110:	40011400 	.word	0x40011400
 8004114:	40007800 	.word	0x40007800
 8004118:	2310      	movs	r3, #16
 800411a:	77fb      	strb	r3, [r7, #31]
 800411c:	e02c      	b.n	8004178 <UART_SetConfig+0x348>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a72      	ldr	r2, [pc, #456]	; (80042ec <UART_SetConfig+0x4bc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d125      	bne.n	8004174 <UART_SetConfig+0x344>
 8004128:	4b71      	ldr	r3, [pc, #452]	; (80042f0 <UART_SetConfig+0x4c0>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004132:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004136:	d017      	beq.n	8004168 <UART_SetConfig+0x338>
 8004138:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800413c:	d817      	bhi.n	800416e <UART_SetConfig+0x33e>
 800413e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004142:	d00b      	beq.n	800415c <UART_SetConfig+0x32c>
 8004144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004148:	d811      	bhi.n	800416e <UART_SetConfig+0x33e>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d003      	beq.n	8004156 <UART_SetConfig+0x326>
 800414e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004152:	d006      	beq.n	8004162 <UART_SetConfig+0x332>
 8004154:	e00b      	b.n	800416e <UART_SetConfig+0x33e>
 8004156:	2300      	movs	r3, #0
 8004158:	77fb      	strb	r3, [r7, #31]
 800415a:	e00d      	b.n	8004178 <UART_SetConfig+0x348>
 800415c:	2302      	movs	r3, #2
 800415e:	77fb      	strb	r3, [r7, #31]
 8004160:	e00a      	b.n	8004178 <UART_SetConfig+0x348>
 8004162:	2304      	movs	r3, #4
 8004164:	77fb      	strb	r3, [r7, #31]
 8004166:	e007      	b.n	8004178 <UART_SetConfig+0x348>
 8004168:	2308      	movs	r3, #8
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e004      	b.n	8004178 <UART_SetConfig+0x348>
 800416e:	2310      	movs	r3, #16
 8004170:	77fb      	strb	r3, [r7, #31]
 8004172:	e001      	b.n	8004178 <UART_SetConfig+0x348>
 8004174:	2310      	movs	r3, #16
 8004176:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004180:	d15b      	bne.n	800423a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004182:	7ffb      	ldrb	r3, [r7, #31]
 8004184:	2b08      	cmp	r3, #8
 8004186:	d828      	bhi.n	80041da <UART_SetConfig+0x3aa>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0x360>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041b5 	.word	0x080041b5
 8004194:	080041bd 	.word	0x080041bd
 8004198:	080041c5 	.word	0x080041c5
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041cb 	.word	0x080041cb
 80041a4:	080041db 	.word	0x080041db
 80041a8:	080041db 	.word	0x080041db
 80041ac:	080041db 	.word	0x080041db
 80041b0:	080041d3 	.word	0x080041d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041b4:	f7ff f99e 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 80041b8:	61b8      	str	r0, [r7, #24]
        break;
 80041ba:	e013      	b.n	80041e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041bc:	f7ff f9ae 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 80041c0:	61b8      	str	r0, [r7, #24]
        break;
 80041c2:	e00f      	b.n	80041e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <UART_SetConfig+0x4c4>)
 80041c6:	61bb      	str	r3, [r7, #24]
        break;
 80041c8:	e00c      	b.n	80041e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ca:	f7ff f881 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 80041ce:	61b8      	str	r0, [r7, #24]
        break;
 80041d0:	e008      	b.n	80041e4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041d6:	61bb      	str	r3, [r7, #24]
        break;
 80041d8:	e004      	b.n	80041e4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	77bb      	strb	r3, [r7, #30]
        break;
 80041e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d074      	beq.n	80042d4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	005a      	lsls	r2, r3, #1
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	441a      	add	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b0f      	cmp	r3, #15
 8004204:	d916      	bls.n	8004234 <UART_SetConfig+0x404>
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800420c:	d212      	bcs.n	8004234 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	b29b      	uxth	r3, r3
 8004212:	f023 030f 	bic.w	r3, r3, #15
 8004216:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	085b      	lsrs	r3, r3, #1
 800421c:	b29b      	uxth	r3, r3
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	b29a      	uxth	r2, r3
 8004224:	89fb      	ldrh	r3, [r7, #14]
 8004226:	4313      	orrs	r3, r2
 8004228:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	89fa      	ldrh	r2, [r7, #14]
 8004230:	60da      	str	r2, [r3, #12]
 8004232:	e04f      	b.n	80042d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	77bb      	strb	r3, [r7, #30]
 8004238:	e04c      	b.n	80042d4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800423a:	7ffb      	ldrb	r3, [r7, #31]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d828      	bhi.n	8004292 <UART_SetConfig+0x462>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <UART_SetConfig+0x418>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	0800426d 	.word	0x0800426d
 800424c:	08004275 	.word	0x08004275
 8004250:	0800427d 	.word	0x0800427d
 8004254:	08004293 	.word	0x08004293
 8004258:	08004283 	.word	0x08004283
 800425c:	08004293 	.word	0x08004293
 8004260:	08004293 	.word	0x08004293
 8004264:	08004293 	.word	0x08004293
 8004268:	0800428b 	.word	0x0800428b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800426c:	f7ff f942 	bl	80034f4 <HAL_RCC_GetPCLK1Freq>
 8004270:	61b8      	str	r0, [r7, #24]
        break;
 8004272:	e013      	b.n	800429c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004274:	f7ff f952 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8004278:	61b8      	str	r0, [r7, #24]
        break;
 800427a:	e00f      	b.n	800429c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800427c:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <UART_SetConfig+0x4c4>)
 800427e:	61bb      	str	r3, [r7, #24]
        break;
 8004280:	e00c      	b.n	800429c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004282:	f7ff f825 	bl	80032d0 <HAL_RCC_GetSysClockFreq>
 8004286:	61b8      	str	r0, [r7, #24]
        break;
 8004288:	e008      	b.n	800429c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800428a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800428e:	61bb      	str	r3, [r7, #24]
        break;
 8004290:	e004      	b.n	800429c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004292:	2300      	movs	r3, #0
 8004294:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	77bb      	strb	r3, [r7, #30]
        break;
 800429a:	bf00      	nop
    }

    if (pclk != 0U)
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d018      	beq.n	80042d4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	085a      	lsrs	r2, r3, #1
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	441a      	add	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b0f      	cmp	r3, #15
 80042ba:	d909      	bls.n	80042d0 <UART_SetConfig+0x4a0>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c2:	d205      	bcs.n	80042d0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	60da      	str	r2, [r3, #12]
 80042ce:	e001      	b.n	80042d4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80042e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	40007c00 	.word	0x40007c00
 80042f0:	40023800 	.word	0x40023800
 80042f4:	00f42400 	.word	0x00f42400

080042f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00a      	beq.n	8004322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004326:	f003 0302 	and.w	r3, r3, #2
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00a      	beq.n	8004344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	430a      	orrs	r2, r1
 8004342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d00a      	beq.n	8004366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	f003 0308 	and.w	r3, r3, #8
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	430a      	orrs	r2, r1
 8004386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d01a      	beq.n	800440e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f6:	d10a      	bne.n	800440e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	605a      	str	r2, [r3, #4]
  }
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af02      	add	r7, sp, #8
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800444c:	f7fc fe30 	bl	80010b0 <HAL_GetTick>
 8004450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b08      	cmp	r3, #8
 800445e:	d10e      	bne.n	800447e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f831 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d001      	beq.n	800447e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e027      	b.n	80044ce <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b04      	cmp	r3, #4
 800448a:	d10e      	bne.n	80044aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800448c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f81b 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e011      	b.n	80044ce <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2220      	movs	r2, #32
 80044ae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b09c      	sub	sp, #112	; 0x70
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e6:	e0a7      	b.n	8004638 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	f000 80a3 	beq.w	8004638 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fc fddd 	bl	80010b0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <UART_WaitOnFlagUntilTimeout+0x32>
 8004502:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004504:	2b00      	cmp	r3, #0
 8004506:	d13f      	bne.n	8004588 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004510:	e853 3f00 	ldrex	r3, [r3]
 8004514:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004518:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800451c:	667b      	str	r3, [r7, #100]	; 0x64
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004526:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004528:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800452c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e6      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3308      	adds	r3, #8
 8004540:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454c:	f023 0301 	bic.w	r3, r3, #1
 8004550:	663b      	str	r3, [r7, #96]	; 0x60
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3308      	adds	r3, #8
 8004558:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800455a:	64ba      	str	r2, [r7, #72]	; 0x48
 800455c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e5      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2220      	movs	r2, #32
 8004578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e068      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0304 	and.w	r3, r3, #4
 8004592:	2b00      	cmp	r3, #0
 8004594:	d050      	beq.n	8004638 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045a4:	d148      	bne.n	8004638 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b8:	e853 3f00 	ldrex	r3, [r3]
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	637b      	str	r3, [r7, #52]	; 0x34
 80045d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045d6:	e841 2300 	strex	r3, r2, [r1]
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d1e6      	bne.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	3308      	adds	r3, #8
 80045e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	e853 3f00 	ldrex	r3, [r3]
 80045f0:	613b      	str	r3, [r7, #16]
   return(result);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f023 0301 	bic.w	r3, r3, #1
 80045f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	3308      	adds	r3, #8
 8004600:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004602:	623a      	str	r2, [r7, #32]
 8004604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004606:	69f9      	ldr	r1, [r7, #28]
 8004608:	6a3a      	ldr	r2, [r7, #32]
 800460a:	e841 2300 	strex	r3, r2, [r1]
 800460e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1e5      	bne.n	80045e2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e010      	b.n	800465a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4013      	ands	r3, r2
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	429a      	cmp	r2, r3
 8004654:	f43f af48 	beq.w	80044e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3770      	adds	r7, #112	; 0x70
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004664:	b084      	sub	sp, #16
 8004666:	b580      	push	{r7, lr}
 8004668:	b084      	sub	sp, #16
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	f107 001c 	add.w	r0, r7, #28
 8004672:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004678:	2b01      	cmp	r3, #1
 800467a:	d120      	bne.n	80046be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	4b20      	ldr	r3, [pc, #128]	; (8004710 <USB_CoreInit+0xac>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80046a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d105      	bne.n	80046b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fa96 	bl	8004be4 <USB_CoreReset>
 80046b8:	4603      	mov	r3, r0
 80046ba:	73fb      	strb	r3, [r7, #15]
 80046bc:	e010      	b.n	80046e0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa8a 	bl	8004be4 <USB_CoreReset>
 80046d0:	4603      	mov	r3, r0
 80046d2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80046e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d10b      	bne.n	80046fe <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f043 0206 	orr.w	r2, r3, #6
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f043 0220 	orr.w	r2, r3, #32
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800470a:	b004      	add	sp, #16
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	ffbdffbf 	.word	0xffbdffbf

08004714 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f023 0201 	bic.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b084      	sub	sp, #16
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d115      	bne.n	8004784 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004764:	2001      	movs	r0, #1
 8004766:	f7fc fcaf 	bl	80010c8 <HAL_Delay>
      ms++;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fa29 	bl	8004bc8 <USB_GetMode>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d01e      	beq.n	80047ba <USB_SetCurrentMode+0x84>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b31      	cmp	r3, #49	; 0x31
 8004780:	d9f0      	bls.n	8004764 <USB_SetCurrentMode+0x2e>
 8004782:	e01a      	b.n	80047ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004784:	78fb      	ldrb	r3, [r7, #3]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d115      	bne.n	80047b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004796:	2001      	movs	r0, #1
 8004798:	f7fc fc96 	bl	80010c8 <HAL_Delay>
      ms++;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	3301      	adds	r3, #1
 80047a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fa10 	bl	8004bc8 <USB_GetMode>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <USB_SetCurrentMode+0x84>
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b31      	cmp	r3, #49	; 0x31
 80047b2:	d9f0      	bls.n	8004796 <USB_SetCurrentMode+0x60>
 80047b4:	e001      	b.n	80047ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e005      	b.n	80047c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b32      	cmp	r3, #50	; 0x32
 80047be:	d101      	bne.n	80047c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e000      	b.n	80047c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
	...

080047d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047d0:	b084      	sub	sp, #16
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b086      	sub	sp, #24
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
 80047ee:	e009      	b.n	8004804 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3340      	adds	r3, #64	; 0x40
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	2200      	movs	r2, #0
 80047fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3301      	adds	r3, #1
 8004802:	613b      	str	r3, [r7, #16]
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b0e      	cmp	r3, #14
 8004808:	d9f2      	bls.n	80047f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800480a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11c      	bne.n	800484a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481e:	f043 0302 	orr.w	r3, r3, #2
 8004822:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	e005      	b.n	8004856 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800485c:	461a      	mov	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	4619      	mov	r1, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	461a      	mov	r2, r3
 8004872:	680b      	ldr	r3, [r1, #0]
 8004874:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10c      	bne.n	8004896 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004882:	2100      	movs	r1, #0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f965 	bl	8004b54 <USB_SetDevSpeed>
 800488a:	e008      	b.n	800489e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800488c:	2101      	movs	r1, #1
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f960 	bl	8004b54 <USB_SetDevSpeed>
 8004894:	e003      	b.n	800489e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004896:	2103      	movs	r1, #3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f95b 	bl	8004b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800489e:	2110      	movs	r1, #16
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8f3 	bl	8004a8c <USB_FlushTxFifo>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f91f 	bl	8004af4 <USB_FlushRxFifo>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	461a      	mov	r2, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	461a      	mov	r2, r3
 80048d4:	2300      	movs	r3, #0
 80048d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e043      	b.n	8004972 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004900:	d118      	bne.n	8004934 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e013      	b.n	8004946 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	461a      	mov	r2, r3
 800492c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e008      	b.n	8004946 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	461a      	mov	r2, r3
 8004966:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800496a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3301      	adds	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d3b7      	bcc.n	80048ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e043      	b.n	8004a08 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004996:	d118      	bne.n	80049ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e013      	b.n	80049dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e008      	b.n	80049dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	461a      	mov	r2, r3
 80049fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3301      	adds	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d3b7      	bcc.n	8004980 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f043 0210 	orr.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <USB_DevInit+0x2b4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f043 0208 	orr.w	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d105      	bne.n	8004a74 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699a      	ldr	r2, [r3, #24]
 8004a6c:	4b06      	ldr	r3, [pc, #24]	; (8004a88 <USB_DevInit+0x2b8>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a80:	b004      	add	sp, #16
 8004a82:	4770      	bx	lr
 8004a84:	803c3800 	.word	0x803c3800
 8004a88:	40000004 	.word	0x40000004

08004a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <USB_FlushTxFifo+0x64>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e01b      	b.n	8004ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	daf2      	bge.n	8004a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	019b      	lsls	r3, r3, #6
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <USB_FlushTxFifo+0x64>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e006      	b.n	8004ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d0f0      	beq.n	8004ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	00030d40 	.word	0x00030d40

08004af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <USB_FlushRxFifo+0x5c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e018      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	daf2      	bge.n	8004b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2210      	movs	r2, #16
 8004b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <USB_FlushRxFifo+0x5c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e006      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d0f0      	beq.n	8004b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	00030d40 	.word	0x00030d40

08004b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bb4:	f043 0302 	orr.w	r3, r3, #2
 8004bb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	695b      	ldr	r3, [r3, #20]
 8004bd4:	f003 0301 	and.w	r3, r3, #1
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a13      	ldr	r2, [pc, #76]	; (8004c48 <USB_CoreReset+0x64>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d901      	bls.n	8004c02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e01b      	b.n	8004c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	daf2      	bge.n	8004bf0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a09      	ldr	r2, [pc, #36]	; (8004c48 <USB_CoreReset+0x64>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d901      	bls.n	8004c2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e006      	b.n	8004c3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d0f0      	beq.n	8004c1a <USB_CoreReset+0x36>

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	00030d40 	.word	0x00030d40

08004c4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004c52:	4b8d      	ldr	r3, [pc, #564]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004c54:	22c0      	movs	r2, #192	; 0xc0
 8004c56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004c58:	4b8b      	ldr	r3, [pc, #556]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004c5a:	22a8      	movs	r2, #168	; 0xa8
 8004c5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004c5e:	4b8a      	ldr	r3, [pc, #552]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8004c64:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004c66:	226f      	movs	r2, #111	; 0x6f
 8004c68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c6a:	4b88      	ldr	r3, [pc, #544]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004c6c:	22ff      	movs	r2, #255	; 0xff
 8004c6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004c70:	4b86      	ldr	r3, [pc, #536]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004c72:	22ff      	movs	r2, #255	; 0xff
 8004c74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004c76:	4b85      	ldr	r3, [pc, #532]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004c78:	22ff      	movs	r2, #255	; 0xff
 8004c7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004c7c:	4b83      	ldr	r3, [pc, #524]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004c7e:	2200      	movs	r2, #0
 8004c80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004c82:	4b83      	ldr	r3, [pc, #524]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004c84:	22c0      	movs	r2, #192	; 0xc0
 8004c86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004c88:	4b81      	ldr	r3, [pc, #516]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004c8a:	22a8      	movs	r2, #168	; 0xa8
 8004c8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004c8e:	4b80      	ldr	r3, [pc, #512]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004c94:	4b7e      	ldr	r3, [pc, #504]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004c9a:	f000 fd3d 	bl	8005718 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004c9e:	4b7a      	ldr	r3, [pc, #488]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	061a      	lsls	r2, r3, #24
 8004ca4:	4b78      	ldr	r3, [pc, #480]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	431a      	orrs	r2, r3
 8004cac:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cae:	789b      	ldrb	r3, [r3, #2]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	4a74      	ldr	r2, [pc, #464]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cb6:	78d2      	ldrb	r2, [r2, #3]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	061a      	lsls	r2, r3, #24
 8004cbc:	4b72      	ldr	r3, [pc, #456]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	0619      	lsls	r1, r3, #24
 8004cc2:	4b71      	ldr	r3, [pc, #452]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	041b      	lsls	r3, r3, #16
 8004cc8:	4319      	orrs	r1, r3
 8004cca:	4b6f      	ldr	r3, [pc, #444]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004ccc:	789b      	ldrb	r3, [r3, #2]
 8004cce:	021b      	lsls	r3, r3, #8
 8004cd0:	430b      	orrs	r3, r1
 8004cd2:	496d      	ldr	r1, [pc, #436]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cd4:	78c9      	ldrb	r1, [r1, #3]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	4b69      	ldr	r3, [pc, #420]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	0619      	lsls	r1, r3, #24
 8004ce6:	4b68      	ldr	r3, [pc, #416]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004ce8:	785b      	ldrb	r3, [r3, #1]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	4319      	orrs	r1, r3
 8004cee:	4b66      	ldr	r3, [pc, #408]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cf0:	789b      	ldrb	r3, [r3, #2]
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	4964      	ldr	r1, [pc, #400]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004cf8:	78c9      	ldrb	r1, [r1, #3]
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	0a1b      	lsrs	r3, r3, #8
 8004cfe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d02:	431a      	orrs	r2, r3
 8004d04:	4b60      	ldr	r3, [pc, #384]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	0619      	lsls	r1, r3, #24
 8004d0a:	4b5f      	ldr	r3, [pc, #380]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004d0c:	785b      	ldrb	r3, [r3, #1]
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	4319      	orrs	r1, r3
 8004d12:	4b5d      	ldr	r3, [pc, #372]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004d14:	789b      	ldrb	r3, [r3, #2]
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	495b      	ldr	r1, [pc, #364]	; (8004e88 <MX_LWIP_Init+0x23c>)
 8004d1c:	78c9      	ldrb	r1, [r1, #3]
 8004d1e:	430b      	orrs	r3, r1
 8004d20:	0e1b      	lsrs	r3, r3, #24
 8004d22:	4313      	orrs	r3, r2
 8004d24:	4a5b      	ldr	r2, [pc, #364]	; (8004e94 <MX_LWIP_Init+0x248>)
 8004d26:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004d28:	4b58      	ldr	r3, [pc, #352]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	061a      	lsls	r2, r3, #24
 8004d2e:	4b57      	ldr	r3, [pc, #348]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d30:	785b      	ldrb	r3, [r3, #1]
 8004d32:	041b      	lsls	r3, r3, #16
 8004d34:	431a      	orrs	r2, r3
 8004d36:	4b55      	ldr	r3, [pc, #340]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d38:	789b      	ldrb	r3, [r3, #2]
 8004d3a:	021b      	lsls	r3, r3, #8
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	4a53      	ldr	r2, [pc, #332]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d40:	78d2      	ldrb	r2, [r2, #3]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	061a      	lsls	r2, r3, #24
 8004d46:	4b51      	ldr	r3, [pc, #324]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	0619      	lsls	r1, r3, #24
 8004d4c:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d4e:	785b      	ldrb	r3, [r3, #1]
 8004d50:	041b      	lsls	r3, r3, #16
 8004d52:	4319      	orrs	r1, r3
 8004d54:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d56:	789b      	ldrb	r3, [r3, #2]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	430b      	orrs	r3, r1
 8004d5c:	494b      	ldr	r1, [pc, #300]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d5e:	78c9      	ldrb	r1, [r1, #3]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	4b48      	ldr	r3, [pc, #288]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	0619      	lsls	r1, r3, #24
 8004d70:	4b46      	ldr	r3, [pc, #280]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d72:	785b      	ldrb	r3, [r3, #1]
 8004d74:	041b      	lsls	r3, r3, #16
 8004d76:	4319      	orrs	r1, r3
 8004d78:	4b44      	ldr	r3, [pc, #272]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4942      	ldr	r1, [pc, #264]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d82:	78c9      	ldrb	r1, [r1, #3]
 8004d84:	430b      	orrs	r3, r1
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	0619      	lsls	r1, r3, #24
 8004d94:	4b3d      	ldr	r3, [pc, #244]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d96:	785b      	ldrb	r3, [r3, #1]
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	4319      	orrs	r1, r3
 8004d9c:	4b3b      	ldr	r3, [pc, #236]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004d9e:	789b      	ldrb	r3, [r3, #2]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	430b      	orrs	r3, r1
 8004da4:	4939      	ldr	r1, [pc, #228]	; (8004e8c <MX_LWIP_Init+0x240>)
 8004da6:	78c9      	ldrb	r1, [r1, #3]
 8004da8:	430b      	orrs	r3, r1
 8004daa:	0e1b      	lsrs	r3, r3, #24
 8004dac:	4313      	orrs	r3, r2
 8004dae:	4a3a      	ldr	r2, [pc, #232]	; (8004e98 <MX_LWIP_Init+0x24c>)
 8004db0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	061a      	lsls	r2, r3, #24
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	041b      	lsls	r3, r3, #16
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	4b33      	ldr	r3, [pc, #204]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004dc2:	789b      	ldrb	r3, [r3, #2]
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	4a31      	ldr	r2, [pc, #196]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004dca:	78d2      	ldrb	r2, [r2, #3]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	061a      	lsls	r2, r3, #24
 8004dd0:	4b2f      	ldr	r3, [pc, #188]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	0619      	lsls	r1, r3, #24
 8004dd6:	4b2e      	ldr	r3, [pc, #184]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	4319      	orrs	r1, r3
 8004dde:	4b2c      	ldr	r3, [pc, #176]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004de0:	789b      	ldrb	r3, [r3, #2]
 8004de2:	021b      	lsls	r3, r3, #8
 8004de4:	430b      	orrs	r3, r1
 8004de6:	492a      	ldr	r1, [pc, #168]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004de8:	78c9      	ldrb	r1, [r1, #3]
 8004dea:	430b      	orrs	r3, r1
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004df2:	431a      	orrs	r2, r3
 8004df4:	4b26      	ldr	r3, [pc, #152]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	0619      	lsls	r1, r3, #24
 8004dfa:	4b25      	ldr	r3, [pc, #148]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004dfc:	785b      	ldrb	r3, [r3, #1]
 8004dfe:	041b      	lsls	r3, r3, #16
 8004e00:	4319      	orrs	r1, r3
 8004e02:	4b23      	ldr	r3, [pc, #140]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004e04:	789b      	ldrb	r3, [r3, #2]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	430b      	orrs	r3, r1
 8004e0a:	4921      	ldr	r1, [pc, #132]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004e0c:	78c9      	ldrb	r1, [r1, #3]
 8004e0e:	430b      	orrs	r3, r1
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004e16:	431a      	orrs	r2, r3
 8004e18:	4b1d      	ldr	r3, [pc, #116]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	0619      	lsls	r1, r3, #24
 8004e1e:	4b1c      	ldr	r3, [pc, #112]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004e20:	785b      	ldrb	r3, [r3, #1]
 8004e22:	041b      	lsls	r3, r3, #16
 8004e24:	4319      	orrs	r1, r3
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004e28:	789b      	ldrb	r3, [r3, #2]
 8004e2a:	021b      	lsls	r3, r3, #8
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	4918      	ldr	r1, [pc, #96]	; (8004e90 <MX_LWIP_Init+0x244>)
 8004e30:	78c9      	ldrb	r1, [r1, #3]
 8004e32:	430b      	orrs	r3, r1
 8004e34:	0e1b      	lsrs	r3, r3, #24
 8004e36:	4313      	orrs	r3, r2
 8004e38:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <MX_LWIP_Init+0x250>)
 8004e3a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8004e3c:	4b18      	ldr	r3, [pc, #96]	; (8004ea0 <MX_LWIP_Init+0x254>)
 8004e3e:	9302      	str	r3, [sp, #8]
 8004e40:	4b18      	ldr	r3, [pc, #96]	; (8004ea4 <MX_LWIP_Init+0x258>)
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4b14      	ldr	r3, [pc, #80]	; (8004e9c <MX_LWIP_Init+0x250>)
 8004e4a:	4a13      	ldr	r2, [pc, #76]	; (8004e98 <MX_LWIP_Init+0x24c>)
 8004e4c:	4911      	ldr	r1, [pc, #68]	; (8004e94 <MX_LWIP_Init+0x248>)
 8004e4e:	4816      	ldr	r0, [pc, #88]	; (8004ea8 <MX_LWIP_Init+0x25c>)
 8004e50:	f001 f94e 	bl	80060f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004e54:	4814      	ldr	r0, [pc, #80]	; (8004ea8 <MX_LWIP_Init+0x25c>)
 8004e56:	f001 fafd 	bl	8006454 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004e5a:	4b13      	ldr	r3, [pc, #76]	; (8004ea8 <MX_LWIP_Init+0x25c>)
 8004e5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e60:	089b      	lsrs	r3, r3, #2
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004e6c:	480e      	ldr	r0, [pc, #56]	; (8004ea8 <MX_LWIP_Init+0x25c>)
 8004e6e:	f001 fb01 	bl	8006474 <netif_set_up>
 8004e72:	e002      	b.n	8004e7a <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004e74:	480c      	ldr	r0, [pc, #48]	; (8004ea8 <MX_LWIP_Init+0x25c>)
 8004e76:	f001 fb69 	bl	800654c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004e7a:	490c      	ldr	r1, [pc, #48]	; (8004eac <MX_LWIP_Init+0x260>)
 8004e7c:	480a      	ldr	r0, [pc, #40]	; (8004ea8 <MX_LWIP_Init+0x25c>)
 8004e7e:	f001 fbfb 	bl	8006678 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200007c0 	.word	0x200007c0
 8004e8c:	200007c4 	.word	0x200007c4
 8004e90:	200007c8 	.word	0x200007c8
 8004e94:	200007b4 	.word	0x200007b4
 8004e98:	200007b8 	.word	0x200007b8
 8004e9c:	200007bc 	.word	0x200007bc
 8004ea0:	0800ef35 	.word	0x0800ef35
 8004ea4:	08005215 	.word	0x08005215
 8004ea8:	20000780 	.word	0x20000780
 8004eac:	08004f01 	.word	0x08004f01

08004eb0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 8004eb8:	f7fc f8fa 	bl	80010b0 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <Ethernet_Link_Periodic_Handle+0x30>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b63      	cmp	r3, #99	; 0x63
 8004ec6:	d907      	bls.n	8004ed8 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8004ec8:	f7fc f8f2 	bl	80010b0 <HAL_GetTick>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <Ethernet_Link_Periodic_Handle+0x30>)
 8004ed0:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 faf4 	bl	80054c0 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	2000077c 	.word	0x2000077c

08004ee4 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8004ee8:	4804      	ldr	r0, [pc, #16]	; (8004efc <MX_LWIP_Process+0x18>)
 8004eea:	f000 f973 	bl	80051d4 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8004eee:	f007 fc35 	bl	800c75c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8004ef2:	4802      	ldr	r0, [pc, #8]	; (8004efc <MX_LWIP_Process+0x18>)
 8004ef4:	f7ff ffdc 	bl	8004eb0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8004ef8:	bf00      	nop
 8004efa:	bd80      	pop	{r7, pc}
 8004efc:	20000780 	.word	0x20000780

08004f00 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <SCB_InvalidateDCache_by_Addr>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b087      	sub	sp, #28
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8004f26:	2320      	movs	r3, #32
 8004f28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f2a:	f3bf 8f4f 	dsb	sy
}
 8004f2e:	bf00      	nop
    while (op_size > 0) {
 8004f30:	e00b      	b.n	8004f4a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8004f32:	4a0d      	ldr	r2, [pc, #52]	; (8004f68 <SCB_InvalidateDCache_by_Addr+0x54>)
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	4413      	add	r3, r2
 8004f40:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	dcf0      	bgt.n	8004f32 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004f50:	f3bf 8f4f 	dsb	sy
}
 8004f54:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004f56:	f3bf 8f6f 	isb	sy
}
 8004f5a:	bf00      	nop
}
 8004f5c:	bf00      	nop
 8004f5e:	371c      	adds	r7, #28
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	e000ed00 	.word	0xe000ed00

08004f6c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004f78:	4b40      	ldr	r3, [pc, #256]	; (800507c <low_level_init+0x110>)
 8004f7a:	4a41      	ldr	r2, [pc, #260]	; (8005080 <low_level_init+0x114>)
 8004f7c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004f82:	2380      	movs	r3, #128	; 0x80
 8004f84:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004f86:	23e1      	movs	r3, #225	; 0xe1
 8004f88:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004f92:	2300      	movs	r3, #0
 8004f94:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004f96:	4a39      	ldr	r2, [pc, #228]	; (800507c <low_level_init+0x110>)
 8004f98:	f107 0308 	add.w	r3, r7, #8
 8004f9c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004f9e:	4b37      	ldr	r3, [pc, #220]	; (800507c <low_level_init+0x110>)
 8004fa0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004fa4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004fa6:	4b35      	ldr	r3, [pc, #212]	; (800507c <low_level_init+0x110>)
 8004fa8:	4a36      	ldr	r2, [pc, #216]	; (8005084 <low_level_init+0x118>)
 8004faa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004fac:	4b33      	ldr	r3, [pc, #204]	; (800507c <low_level_init+0x110>)
 8004fae:	4a36      	ldr	r2, [pc, #216]	; (8005088 <low_level_init+0x11c>)
 8004fb0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004fb2:	4b32      	ldr	r3, [pc, #200]	; (800507c <low_level_init+0x110>)
 8004fb4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004fb8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004fba:	4830      	ldr	r0, [pc, #192]	; (800507c <low_level_init+0x110>)
 8004fbc:	f7fc f98e 	bl	80012dc <HAL_ETH_Init>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004fc4:	2238      	movs	r2, #56	; 0x38
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	4830      	ldr	r0, [pc, #192]	; (800508c <low_level_init+0x120>)
 8004fca:	f00a f9ee 	bl	800f3aa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004fce:	4b2f      	ldr	r3, [pc, #188]	; (800508c <low_level_init+0x120>)
 8004fd0:	2221      	movs	r2, #33	; 0x21
 8004fd2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004fd4:	4b2d      	ldr	r3, [pc, #180]	; (800508c <low_level_init+0x120>)
 8004fd6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004fda:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004fdc:	4b2b      	ldr	r3, [pc, #172]	; (800508c <low_level_init+0x120>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004fe2:	482b      	ldr	r0, [pc, #172]	; (8005090 <low_level_init+0x124>)
 8004fe4:	f000 ff4c 	bl	8005e80 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2206      	movs	r2, #6
 8004fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004ff0:	4b22      	ldr	r3, [pc, #136]	; (800507c <low_level_init+0x110>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	781a      	ldrb	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004ffc:	4b1f      	ldr	r3, [pc, #124]	; (800507c <low_level_init+0x110>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	785a      	ldrb	r2, [r3, #1]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005008:	4b1c      	ldr	r3, [pc, #112]	; (800507c <low_level_init+0x110>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	789a      	ldrb	r2, [r3, #2]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005014:	4b19      	ldr	r3, [pc, #100]	; (800507c <low_level_init+0x110>)
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	78da      	ldrb	r2, [r3, #3]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005020:	4b16      	ldr	r3, [pc, #88]	; (800507c <low_level_init+0x110>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	791a      	ldrb	r2, [r3, #4]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <low_level_init+0x110>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	795a      	ldrb	r2, [r3, #5]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800503e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005046:	f043 030a 	orr.w	r3, r3, #10
 800504a:	b2da      	uxtb	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005052:	4910      	ldr	r1, [pc, #64]	; (8005094 <low_level_init+0x128>)
 8005054:	4810      	ldr	r0, [pc, #64]	; (8005098 <low_level_init+0x12c>)
 8005056:	f7fb fe78 	bl	8000d4a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800505a:	480f      	ldr	r0, [pc, #60]	; (8005098 <low_level_init+0x12c>)
 800505c:	f7fb fea7 	bl	8000dae <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fa2a 	bl	80054c0 <ethernet_link_check_state>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800506c:	e001      	b.n	8005072 <low_level_init+0x106>
    Error_Handler();
 800506e:	f7fb fc39 	bl	80008e4 <Error_Handler>
}
 8005072:	bf00      	nop
 8005074:	3710      	adds	r7, #16
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20005158 	.word	0x20005158
 8005080:	40028000 	.word	0x40028000
 8005084:	20000128 	.word	0x20000128
 8005088:	20000088 	.word	0x20000088
 800508c:	20005208 	.word	0x20005208
 8005090:	08012b14 	.word	0x08012b14
 8005094:	2000000c 	.word	0x2000000c
 8005098:	20005240 	.word	0x20005240

0800509c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b092      	sub	sp, #72	; 0x48
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80050a6:	2300      	movs	r3, #0
 80050a8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	2230      	movs	r2, #48	; 0x30
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f00a f974 	bl	800f3aa <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	2230      	movs	r2, #48	; 0x30
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f00a f96d 	bl	800f3aa <memset>

  for(q = p; q != NULL; q = q->next)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
 80050d4:	e045      	b.n	8005162 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80050d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d902      	bls.n	80050e2 <low_level_output+0x46>
      return ERR_IF;
 80050dc:	f06f 030b 	mvn.w	r3, #11
 80050e0:	e055      	b.n	800518e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80050e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e4:	6859      	ldr	r1, [r3, #4]
 80050e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	3348      	adds	r3, #72	; 0x48
 80050f2:	443b      	add	r3, r7
 80050f4:	3b3c      	subs	r3, #60	; 0x3c
 80050f6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80050f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050fa:	895b      	ldrh	r3, [r3, #10]
 80050fc:	4619      	mov	r1, r3
 80050fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005100:	4613      	mov	r3, r2
 8005102:	005b      	lsls	r3, r3, #1
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	3348      	adds	r3, #72	; 0x48
 800510a:	443b      	add	r3, r7
 800510c:	3b38      	subs	r3, #56	; 0x38
 800510e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005112:	2b00      	cmp	r3, #0
 8005114:	d011      	beq.n	800513a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005118:	1e5a      	subs	r2, r3, #1
 800511a:	f107 000c 	add.w	r0, r7, #12
 800511e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005120:	460b      	mov	r3, r1
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	440b      	add	r3, r1
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	18c1      	adds	r1, r0, r3
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	3348      	adds	r3, #72	; 0x48
 8005134:	443b      	add	r3, r7
 8005136:	3b34      	subs	r3, #52	; 0x34
 8005138:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800513a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005144:	4613      	mov	r3, r2
 8005146:	005b      	lsls	r3, r3, #1
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	3348      	adds	r3, #72	; 0x48
 800514e:	443b      	add	r3, r7
 8005150:	3b34      	subs	r3, #52	; 0x34
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005156:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005158:	3301      	adds	r3, #1
 800515a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	643b      	str	r3, [r7, #64]	; 0x40
 8005162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1b6      	bne.n	80050d6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	891b      	ldrh	r3, [r3, #8]
 800516c:	461a      	mov	r2, r3
 800516e:	4b0a      	ldr	r3, [pc, #40]	; (8005198 <low_level_output+0xfc>)
 8005170:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005172:	4a09      	ldr	r2, [pc, #36]	; (8005198 <low_level_output+0xfc>)
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800517a:	4a07      	ldr	r2, [pc, #28]	; (8005198 <low_level_output+0xfc>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8005180:	2214      	movs	r2, #20
 8005182:	4905      	ldr	r1, [pc, #20]	; (8005198 <low_level_output+0xfc>)
 8005184:	4805      	ldr	r0, [pc, #20]	; (800519c <low_level_output+0x100>)
 8005186:	f7fc f9dd 	bl	8001544 <HAL_ETH_Transmit>

  return errval;
 800518a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800518e:	4618      	mov	r0, r3
 8005190:	3748      	adds	r7, #72	; 0x48
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20005208 	.word	0x20005208
 800519c:	20005158 	.word	0x20005158

080051a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <low_level_input+0x2c>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80051b4:	f107 030c 	add.w	r3, r7, #12
 80051b8:	4619      	mov	r1, r3
 80051ba:	4805      	ldr	r0, [pc, #20]	; (80051d0 <low_level_input+0x30>)
 80051bc:	f7fc fa56 	bl	800166c <HAL_ETH_ReadData>
  }

  return p;
 80051c0:	68fb      	ldr	r3, [r7, #12]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20005154 	.word	0x20005154
 80051d0:	20005158 	.word	0x20005158

080051d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ffdd 	bl	80051a0 <low_level_input>
 80051e6:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	4798      	blx	r3
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	f001 fdba 	bl	8006d78 <pbuf_free>
      }
    }
  } while(p!=NULL);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1ea      	bne.n	80051e0 <ethernetif_input+0xc>
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <ethernetif_init+0x1c>
 8005222:	4b0e      	ldr	r3, [pc, #56]	; (800525c <ethernetif_init+0x48>)
 8005224:	f240 127b 	movw	r2, #379	; 0x17b
 8005228:	490d      	ldr	r1, [pc, #52]	; (8005260 <ethernetif_init+0x4c>)
 800522a:	480e      	ldr	r0, [pc, #56]	; (8005264 <ethernetif_init+0x50>)
 800522c:	f00a f858 	bl	800f2e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2273      	movs	r2, #115	; 0x73
 8005234:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2274      	movs	r2, #116	; 0x74
 800523c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a09      	ldr	r2, [pc, #36]	; (8005268 <ethernetif_init+0x54>)
 8005244:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a08      	ldr	r2, [pc, #32]	; (800526c <ethernetif_init+0x58>)
 800524a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fe8d 	bl	8004f6c <low_level_init>

  return ERR_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	0801011c 	.word	0x0801011c
 8005260:	08010138 	.word	0x08010138
 8005264:	08010148 	.word	0x08010148
 8005268:	0800d3ed 	.word	0x0800d3ed
 800526c:	0800509d 	.word	0x0800509d

08005270 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800527c:	68f9      	ldr	r1, [r7, #12]
 800527e:	4807      	ldr	r0, [pc, #28]	; (800529c <pbuf_free_custom+0x2c>)
 8005280:	f000 fee0 	bl	8006044 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <pbuf_free_custom+0x30>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d102      	bne.n	8005292 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800528c:	4b04      	ldr	r3, [pc, #16]	; (80052a0 <pbuf_free_custom+0x30>)
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
  }
}
 8005292:	bf00      	nop
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	08012b14 	.word	0x08012b14
 80052a0:	20005154 	.word	0x20005154

080052a4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80052a8:	f7fb ff02 	bl	80010b0 <HAL_GetTick>
 80052ac:	4603      	mov	r3, r0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b08e      	sub	sp, #56	; 0x38
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	60da      	str	r2, [r3, #12]
 80052ca:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a4e      	ldr	r2, [pc, #312]	; (800540c <HAL_ETH_MspInit+0x158>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f040 8096 	bne.w	8005404 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80052d8:	4b4d      	ldr	r3, [pc, #308]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 80052da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052dc:	4a4c      	ldr	r2, [pc, #304]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 80052de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052e2:	6313      	str	r3, [r2, #48]	; 0x30
 80052e4:	4b4a      	ldr	r3, [pc, #296]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	4b47      	ldr	r3, [pc, #284]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 80052f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f4:	4a46      	ldr	r2, [pc, #280]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 80052f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052fa:	6313      	str	r3, [r2, #48]	; 0x30
 80052fc:	4b44      	ldr	r3, [pc, #272]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 80052fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005304:	61fb      	str	r3, [r7, #28]
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	4b41      	ldr	r3, [pc, #260]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	4a40      	ldr	r2, [pc, #256]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800530e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005312:	6313      	str	r3, [r2, #48]	; 0x30
 8005314:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	4a3a      	ldr	r2, [pc, #232]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005326:	f043 0304 	orr.w	r3, r3, #4
 800532a:	6313      	str	r3, [r2, #48]	; 0x30
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005338:	4b35      	ldr	r3, [pc, #212]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	4a34      	ldr	r2, [pc, #208]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6313      	str	r3, [r2, #48]	; 0x30
 8005344:	4b32      	ldr	r3, [pc, #200]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	613b      	str	r3, [r7, #16]
 800534e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005350:	4b2f      	ldr	r3, [pc, #188]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005354:	4a2e      	ldr	r2, [pc, #184]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005356:	f043 0302 	orr.w	r3, r3, #2
 800535a:	6313      	str	r3, [r2, #48]	; 0x30
 800535c:	4b2c      	ldr	r3, [pc, #176]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800535e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005360:	f003 0302 	and.w	r3, r3, #2
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005368:	4b29      	ldr	r3, [pc, #164]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	4a28      	ldr	r2, [pc, #160]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 800536e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005372:	6313      	str	r3, [r2, #48]	; 0x30
 8005374:	4b26      	ldr	r3, [pc, #152]	; (8005410 <HAL_ETH_MspInit+0x15c>)
 8005376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537c:	60bb      	str	r3, [r7, #8]
 800537e:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> ETH_RXD2
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005380:	2332      	movs	r3, #50	; 0x32
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005384:	2302      	movs	r3, #2
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2300      	movs	r3, #0
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800538c:	2303      	movs	r3, #3
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005390:	230b      	movs	r3, #11
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005398:	4619      	mov	r1, r3
 800539a:	481e      	ldr	r0, [pc, #120]	; (8005414 <HAL_ETH_MspInit+0x160>)
 800539c:	f7fd f890 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80053a0:	2386      	movs	r3, #134	; 0x86
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a4:	2302      	movs	r3, #2
 80053a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a8:	2300      	movs	r3, #0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ac:	2303      	movs	r3, #3
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053b0:	230b      	movs	r3, #11
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053b8:	4619      	mov	r1, r3
 80053ba:	4817      	ldr	r0, [pc, #92]	; (8005418 <HAL_ETH_MspInit+0x164>)
 80053bc:	f7fd f880 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|RMII_TXD1_Pin;
 80053c0:	f242 0301 	movw	r3, #8193	; 0x2001
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c6:	2302      	movs	r3, #2
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053ce:	2303      	movs	r3, #3
 80053d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053d2:	230b      	movs	r3, #11
 80053d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053da:	4619      	mov	r1, r3
 80053dc:	480f      	ldr	r0, [pc, #60]	; (800541c <HAL_ETH_MspInit+0x168>)
 80053de:	f7fd f86f 	bl	80024c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80053e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80053e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053e8:	2302      	movs	r3, #2
 80053ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ec:	2300      	movs	r3, #0
 80053ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053f0:	2303      	movs	r3, #3
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80053f4:	230b      	movs	r3, #11
 80053f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053fc:	4619      	mov	r1, r3
 80053fe:	4808      	ldr	r0, [pc, #32]	; (8005420 <HAL_ETH_MspInit+0x16c>)
 8005400:	f7fd f85e 	bl	80024c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005404:	bf00      	nop
 8005406:	3738      	adds	r7, #56	; 0x38
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40028000 	.word	0x40028000
 8005410:	40023800 	.word	0x40023800
 8005414:	40020800 	.word	0x40020800
 8005418:	40020000 	.word	0x40020000
 800541c:	40020400 	.word	0x40020400
 8005420:	40021800 	.word	0x40021800

08005424 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005428:	4802      	ldr	r0, [pc, #8]	; (8005434 <ETH_PHY_IO_Init+0x10>)
 800542a:	f7fc fbef 	bl	8001c0c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20005158 	.word	0x20005158

08005438 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  return 0;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	4807      	ldr	r0, [pc, #28]	; (8005478 <ETH_PHY_IO_ReadReg+0x30>)
 800545c:	f7fc fa3e 	bl	80018dc <HAL_ETH_ReadPHYRegister>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	e000      	b.n	800546e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20005158 	.word	0x20005158

0800547c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	68f9      	ldr	r1, [r7, #12]
 800548e:	4807      	ldr	r0, [pc, #28]	; (80054ac <ETH_PHY_IO_WriteReg+0x30>)
 8005490:	f7fc fa6f 	bl	8001972 <HAL_ETH_WritePHYRegister>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d002      	beq.n	80054a0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	e000      	b.n	80054a2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20005158 	.word	0x20005158

080054b0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80054b4:	f7fb fdfc 	bl	80010b0 <HAL_GetTick>
 80054b8:	4603      	mov	r3, r0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b0a0      	sub	sp, #128	; 0x80
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80054c8:	f107 030c 	add.w	r3, r7, #12
 80054cc:	2264      	movs	r2, #100	; 0x64
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f009 ff6a 	bl	800f3aa <memset>
  int32_t PHYLinkState = 0;
 80054d6:	2300      	movs	r3, #0
 80054d8:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054de:	2300      	movs	r3, #0
 80054e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80054e2:	2300      	movs	r3, #0
 80054e4:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80054e6:	483a      	ldr	r0, [pc, #232]	; (80055d0 <ethernet_link_check_state+0x110>)
 80054e8:	f7fb fd09 	bl	8000efe <LAN8742_GetLinkState>
 80054ec:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80054f4:	089b      	lsrs	r3, r3, #2
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00c      	beq.n	800551a <ethernet_link_check_state+0x5a>
 8005500:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005502:	2b01      	cmp	r3, #1
 8005504:	dc09      	bgt.n	800551a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8005506:	4833      	ldr	r0, [pc, #204]	; (80055d4 <ethernet_link_check_state+0x114>)
 8005508:	f7fb ffc3 	bl	8001492 <HAL_ETH_Stop>
    netif_set_down(netif);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f001 f81d 	bl	800654c <netif_set_down>
    netif_set_link_down(netif);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f001 f880 	bl	8006618 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8005518:	e055      	b.n	80055c6 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d14e      	bne.n	80055c6 <ethernet_link_check_state+0x106>
 8005528:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800552a:	2b01      	cmp	r3, #1
 800552c:	dd4b      	ble.n	80055c6 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800552e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005530:	3b02      	subs	r3, #2
 8005532:	2b03      	cmp	r3, #3
 8005534:	d82a      	bhi.n	800558c <ethernet_link_check_state+0xcc>
 8005536:	a201      	add	r2, pc, #4	; (adr r2, 800553c <ethernet_link_check_state+0x7c>)
 8005538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553c:	0800554d 	.word	0x0800554d
 8005540:	0800555f 	.word	0x0800555f
 8005544:	0800556f 	.word	0x0800556f
 8005548:	0800557f 	.word	0x0800557f
      duplex = ETH_FULLDUPLEX_MODE;
 800554c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005550:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005552:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005556:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005558:	2301      	movs	r3, #1
 800555a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800555c:	e017      	b.n	800558e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800555e:	2300      	movs	r3, #0
 8005560:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005562:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005566:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005568:	2301      	movs	r3, #1
 800556a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800556c:	e00f      	b.n	800558e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800556e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005572:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005574:	2300      	movs	r3, #0
 8005576:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005578:	2301      	movs	r3, #1
 800557a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800557c:	e007      	b.n	800558e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800557e:	2300      	movs	r3, #0
 8005580:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005582:	2300      	movs	r3, #0
 8005584:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005586:	2301      	movs	r3, #1
 8005588:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800558a:	e000      	b.n	800558e <ethernet_link_check_state+0xce>
      break;
 800558c:	bf00      	nop
    if(linkchanged)
 800558e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005590:	2b00      	cmp	r3, #0
 8005592:	d018      	beq.n	80055c6 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005594:	f107 030c 	add.w	r3, r7, #12
 8005598:	4619      	mov	r1, r3
 800559a:	480e      	ldr	r0, [pc, #56]	; (80055d4 <ethernet_link_check_state+0x114>)
 800559c:	f7fc fa32 	bl	8001a04 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80055a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 80055a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055a6:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80055a8:	f107 030c 	add.w	r3, r7, #12
 80055ac:	4619      	mov	r1, r3
 80055ae:	4809      	ldr	r0, [pc, #36]	; (80055d4 <ethernet_link_check_state+0x114>)
 80055b0:	f7fc fb12 	bl	8001bd8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80055b4:	4807      	ldr	r0, [pc, #28]	; (80055d4 <ethernet_link_check_state+0x114>)
 80055b6:	f7fb ff0d 	bl	80013d4 <HAL_ETH_Start>
      netif_set_up(netif);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 ff5a 	bl	8006474 <netif_set_up>
      netif_set_link_up(netif);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fff5 	bl	80065b0 <netif_set_link_up>
}
 80055c6:	bf00      	nop
 80055c8:	3780      	adds	r7, #128	; 0x80
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20005240 	.word	0x20005240
 80055d4:	20005158 	.word	0x20005158

080055d8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b086      	sub	sp, #24
 80055dc:	af02      	add	r7, sp, #8
 80055de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80055e0:	4812      	ldr	r0, [pc, #72]	; (800562c <HAL_ETH_RxAllocateCallback+0x54>)
 80055e2:	f000 fcc1 	bl	8005f68 <memp_malloc_pool>
 80055e6:	60f8      	str	r0, [r7, #12]
  if (p)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d014      	beq.n	8005618 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f103 0220 	add.w	r2, r3, #32
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a0d      	ldr	r2, [pc, #52]	; (8005630 <HAL_ETH_RxAllocateCallback+0x58>)
 80055fc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005606:	9201      	str	r2, [sp, #4]
 8005608:	9300      	str	r3, [sp, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2241      	movs	r2, #65	; 0x41
 800560e:	2100      	movs	r1, #0
 8005610:	2000      	movs	r0, #0
 8005612:	f001 f9f7 	bl	8006a04 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005616:	e005      	b.n	8005624 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <HAL_ETH_RxAllocateCallback+0x5c>)
 800561a:	2201      	movs	r2, #1
 800561c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
}
 8005624:	bf00      	nop
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	08012b14 	.word	0x08012b14
 8005630:	08005271 	.word	0x08005271
 8005634:	20005154 	.word	0x20005154

08005638 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	3b20      	subs	r3, #32
 8005656:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2200      	movs	r2, #0
 8005662:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	887a      	ldrh	r2, [r7, #2]
 8005668:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e003      	b.n	8005682 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	69fa      	ldr	r2, [r7, #28]
 8005686:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	61fb      	str	r3, [r7, #28]
 800568e:	e009      	b.n	80056a4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	891a      	ldrh	r2, [r3, #8]
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	4413      	add	r3, r2
 8005698:	b29a      	uxth	r2, r3
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61fb      	str	r3, [r7, #28]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1f2      	bne.n	8005690 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80056aa:	887b      	ldrh	r3, [r7, #2]
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff fc30 	bl	8004f14 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80056b4:	bf00      	nop
 80056b6:	3720      	adds	r7, #32
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	b21a      	sxth	r2, r3
 80056cc:	88fb      	ldrh	r3, [r7, #6]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	4313      	orrs	r3, r2
 80056d6:	b21b      	sxth	r3, r3
 80056d8:	b29b      	uxth	r3, r3
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	061a      	lsls	r2, r3, #24
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	0a1b      	lsrs	r3, r3, #8
 8005700:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0e1b      	lsrs	r3, r3, #24
 800570a:	4313      	orrs	r3, r2
}
 800570c:	4618      	mov	r0, r3
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8005722:	f000 f8d5 	bl	80058d0 <mem_init>
  memp_init();
 8005726:	f000 fbdb 	bl	8005ee0 <memp_init>
  pbuf_init();
  netif_init();
 800572a:	f000 fcd9 	bl	80060e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800572e:	f007 f857 	bl	800c7e0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8005732:	f001 fdaf 	bl	8007294 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8005736:	f006 ffc9 	bl	800c6cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8005744:	b480      	push	{r7}
 8005746:	b083      	sub	sp, #12
 8005748:	af00      	add	r7, sp, #0
 800574a:	4603      	mov	r3, r0
 800574c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <ptr_to_mem+0x20>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	88fb      	ldrh	r3, [r7, #6]
 8005754:	4413      	add	r3, r2
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	200058cc 	.word	0x200058cc

08005768 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8005770:	4b05      	ldr	r3, [pc, #20]	; (8005788 <mem_to_ptr+0x20>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	b29b      	uxth	r3, r3
}
 800577a:	4618      	mov	r0, r3
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	200058cc 	.word	0x200058cc

0800578c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800578c:	b590      	push	{r4, r7, lr}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005794:	4b45      	ldr	r3, [pc, #276]	; (80058ac <plug_holes+0x120>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	429a      	cmp	r2, r3
 800579c:	d206      	bcs.n	80057ac <plug_holes+0x20>
 800579e:	4b44      	ldr	r3, [pc, #272]	; (80058b0 <plug_holes+0x124>)
 80057a0:	f240 12df 	movw	r2, #479	; 0x1df
 80057a4:	4943      	ldr	r1, [pc, #268]	; (80058b4 <plug_holes+0x128>)
 80057a6:	4844      	ldr	r0, [pc, #272]	; (80058b8 <plug_holes+0x12c>)
 80057a8:	f009 fd9a 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80057ac:	4b43      	ldr	r3, [pc, #268]	; (80058bc <plug_holes+0x130>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d306      	bcc.n	80057c4 <plug_holes+0x38>
 80057b6:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <plug_holes+0x124>)
 80057b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80057bc:	4940      	ldr	r1, [pc, #256]	; (80058c0 <plug_holes+0x134>)
 80057be:	483e      	ldr	r0, [pc, #248]	; (80058b8 <plug_holes+0x12c>)
 80057c0:	f009 fd8e 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	791b      	ldrb	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <plug_holes+0x4e>
 80057cc:	4b38      	ldr	r3, [pc, #224]	; (80058b0 <plug_holes+0x124>)
 80057ce:	f240 12e1 	movw	r2, #481	; 0x1e1
 80057d2:	493c      	ldr	r1, [pc, #240]	; (80058c4 <plug_holes+0x138>)
 80057d4:	4838      	ldr	r0, [pc, #224]	; (80058b8 <plug_holes+0x12c>)
 80057d6:	f009 fd83 	bl	800f2e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	881b      	ldrh	r3, [r3, #0]
 80057de:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057e2:	d906      	bls.n	80057f2 <plug_holes+0x66>
 80057e4:	4b32      	ldr	r3, [pc, #200]	; (80058b0 <plug_holes+0x124>)
 80057e6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80057ea:	4937      	ldr	r1, [pc, #220]	; (80058c8 <plug_holes+0x13c>)
 80057ec:	4832      	ldr	r0, [pc, #200]	; (80058b8 <plug_holes+0x12c>)
 80057ee:	f009 fd77 	bl	800f2e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	881b      	ldrh	r3, [r3, #0]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff ffa4 	bl	8005744 <ptr_to_mem>
 80057fc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	429a      	cmp	r2, r3
 8005804:	d024      	beq.n	8005850 <plug_holes+0xc4>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	791b      	ldrb	r3, [r3, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d120      	bne.n	8005850 <plug_holes+0xc4>
 800580e:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <plug_holes+0x130>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	429a      	cmp	r2, r3
 8005816:	d01b      	beq.n	8005850 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8005818:	4b2c      	ldr	r3, [pc, #176]	; (80058cc <plug_holes+0x140>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	429a      	cmp	r2, r3
 8005820:	d102      	bne.n	8005828 <plug_holes+0x9c>
      lfree = mem;
 8005822:	4a2a      	ldr	r2, [pc, #168]	; (80058cc <plug_holes+0x140>)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	881a      	ldrh	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005838:	d00a      	beq.n	8005850 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7ff ff80 	bl	8005744 <ptr_to_mem>
 8005844:	4604      	mov	r4, r0
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff ff8e 	bl	8005768 <mem_to_ptr>
 800584c:	4603      	mov	r3, r0
 800584e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	885b      	ldrh	r3, [r3, #2]
 8005854:	4618      	mov	r0, r3
 8005856:	f7ff ff75 	bl	8005744 <ptr_to_mem>
 800585a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800585c:	68ba      	ldr	r2, [r7, #8]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	429a      	cmp	r2, r3
 8005862:	d01f      	beq.n	80058a4 <plug_holes+0x118>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d11b      	bne.n	80058a4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800586c:	4b17      	ldr	r3, [pc, #92]	; (80058cc <plug_holes+0x140>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d102      	bne.n	800587c <plug_holes+0xf0>
      lfree = pmem;
 8005876:	4a15      	ldr	r2, [pc, #84]	; (80058cc <plug_holes+0x140>)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	881a      	ldrh	r2, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800588c:	d00a      	beq.n	80058a4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	4618      	mov	r0, r3
 8005894:	f7ff ff56 	bl	8005744 <ptr_to_mem>
 8005898:	4604      	mov	r4, r0
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f7ff ff64 	bl	8005768 <mem_to_ptr>
 80058a0:	4603      	mov	r3, r0
 80058a2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80058a4:	bf00      	nop
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd90      	pop	{r4, r7, pc}
 80058ac:	200058cc 	.word	0x200058cc
 80058b0:	08010170 	.word	0x08010170
 80058b4:	080101a0 	.word	0x080101a0
 80058b8:	080101b8 	.word	0x080101b8
 80058bc:	200058d0 	.word	0x200058d0
 80058c0:	080101e0 	.word	0x080101e0
 80058c4:	080101fc 	.word	0x080101fc
 80058c8:	08010218 	.word	0x08010218
 80058cc:	200058d4 	.word	0x200058d4

080058d0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80058d6:	4b18      	ldr	r3, [pc, #96]	; (8005938 <mem_init+0x68>)
 80058d8:	3303      	adds	r3, #3
 80058da:	f023 0303 	bic.w	r3, r3, #3
 80058de:	461a      	mov	r2, r3
 80058e0:	4b16      	ldr	r3, [pc, #88]	; (800593c <mem_init+0x6c>)
 80058e2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80058e4:	4b15      	ldr	r3, [pc, #84]	; (800593c <mem_init+0x6c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80058f0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80058fe:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005902:	f7ff ff1f 	bl	8005744 <ptr_to_mem>
 8005906:	4603      	mov	r3, r0
 8005908:	4a0d      	ldr	r2, [pc, #52]	; (8005940 <mem_init+0x70>)
 800590a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <mem_init+0x70>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8005914:	4b0a      	ldr	r3, [pc, #40]	; (8005940 <mem_init+0x70>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800591c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <mem_init+0x70>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005926:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8005928:	4b04      	ldr	r3, [pc, #16]	; (800593c <mem_init+0x6c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a05      	ldr	r2, [pc, #20]	; (8005944 <mem_init+0x74>)
 800592e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20005278 	.word	0x20005278
 800593c:	200058cc 	.word	0x200058cc
 8005940:	200058d0 	.word	0x200058d0
 8005944:	200058d4 	.word	0x200058d4

08005948 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff ff09 	bl	8005768 <mem_to_ptr>
 8005956:	4603      	mov	r3, r0
 8005958:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff fef0 	bl	8005744 <ptr_to_mem>
 8005964:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	885b      	ldrh	r3, [r3, #2]
 800596a:	4618      	mov	r0, r3
 800596c:	f7ff feea 	bl	8005744 <ptr_to_mem>
 8005970:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800597a:	d818      	bhi.n	80059ae <mem_link_valid+0x66>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	885b      	ldrh	r3, [r3, #2]
 8005980:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005984:	d813      	bhi.n	80059ae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800598a:	8afa      	ldrh	r2, [r7, #22]
 800598c:	429a      	cmp	r2, r3
 800598e:	d004      	beq.n	800599a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	881b      	ldrh	r3, [r3, #0]
 8005994:	8afa      	ldrh	r2, [r7, #22]
 8005996:	429a      	cmp	r2, r3
 8005998:	d109      	bne.n	80059ae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800599a:	4b08      	ldr	r3, [pc, #32]	; (80059bc <mem_link_valid+0x74>)
 800599c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d006      	beq.n	80059b2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	885b      	ldrh	r3, [r3, #2]
 80059a8:	8afa      	ldrh	r2, [r7, #22]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d001      	beq.n	80059b2 <mem_link_valid+0x6a>
    return 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e000      	b.n	80059b4 <mem_link_valid+0x6c>
  }
  return 1;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	200058d0 	.word	0x200058d0

080059c0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d04c      	beq.n	8005a68 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f003 0303 	and.w	r3, r3, #3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d007      	beq.n	80059e8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80059d8:	4b25      	ldr	r3, [pc, #148]	; (8005a70 <mem_free+0xb0>)
 80059da:	f240 2273 	movw	r2, #627	; 0x273
 80059de:	4925      	ldr	r1, [pc, #148]	; (8005a74 <mem_free+0xb4>)
 80059e0:	4825      	ldr	r0, [pc, #148]	; (8005a78 <mem_free+0xb8>)
 80059e2:	f009 fc7d 	bl	800f2e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80059e6:	e040      	b.n	8005a6a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3b08      	subs	r3, #8
 80059ec:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80059ee:	4b23      	ldr	r3, [pc, #140]	; (8005a7c <mem_free+0xbc>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d306      	bcc.n	8005a06 <mem_free+0x46>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f103 020c 	add.w	r2, r3, #12
 80059fe:	4b20      	ldr	r3, [pc, #128]	; (8005a80 <mem_free+0xc0>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d907      	bls.n	8005a16 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <mem_free+0xb0>)
 8005a08:	f240 227f 	movw	r2, #639	; 0x27f
 8005a0c:	491d      	ldr	r1, [pc, #116]	; (8005a84 <mem_free+0xc4>)
 8005a0e:	481a      	ldr	r0, [pc, #104]	; (8005a78 <mem_free+0xb8>)
 8005a10:	f009 fc66 	bl	800f2e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a14:	e029      	b.n	8005a6a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d107      	bne.n	8005a2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8005a1e:	4b14      	ldr	r3, [pc, #80]	; (8005a70 <mem_free+0xb0>)
 8005a20:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8005a24:	4918      	ldr	r1, [pc, #96]	; (8005a88 <mem_free+0xc8>)
 8005a26:	4814      	ldr	r0, [pc, #80]	; (8005a78 <mem_free+0xb8>)
 8005a28:	f009 fc5a 	bl	800f2e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a2c:	e01d      	b.n	8005a6a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff ff8a 	bl	8005948 <mem_link_valid>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d107      	bne.n	8005a4a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <mem_free+0xb0>)
 8005a3c:	f240 2295 	movw	r2, #661	; 0x295
 8005a40:	4912      	ldr	r1, [pc, #72]	; (8005a8c <mem_free+0xcc>)
 8005a42:	480d      	ldr	r0, [pc, #52]	; (8005a78 <mem_free+0xb8>)
 8005a44:	f009 fc4c 	bl	800f2e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8005a48:	e00f      	b.n	8005a6a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8005a50:	4b0f      	ldr	r3, [pc, #60]	; (8005a90 <mem_free+0xd0>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d202      	bcs.n	8005a60 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8005a5a:	4a0d      	ldr	r2, [pc, #52]	; (8005a90 <mem_free+0xd0>)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f7ff fe93 	bl	800578c <plug_holes>
 8005a66:	e000      	b.n	8005a6a <mem_free+0xaa>
    return;
 8005a68:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	08010170 	.word	0x08010170
 8005a74:	08010244 	.word	0x08010244
 8005a78:	080101b8 	.word	0x080101b8
 8005a7c:	200058cc 	.word	0x200058cc
 8005a80:	200058d0 	.word	0x200058d0
 8005a84:	08010268 	.word	0x08010268
 8005a88:	08010284 	.word	0x08010284
 8005a8c:	080102ac 	.word	0x080102ac
 8005a90:	200058d4 	.word	0x200058d4

08005a94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005aa0:	887b      	ldrh	r3, [r7, #2]
 8005aa2:	3303      	adds	r3, #3
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	f023 0303 	bic.w	r3, r3, #3
 8005aaa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	2b0b      	cmp	r3, #11
 8005ab0:	d801      	bhi.n	8005ab6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8005ab6:	8bfb      	ldrh	r3, [r7, #30]
 8005ab8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005abc:	d803      	bhi.n	8005ac6 <mem_trim+0x32>
 8005abe:	8bfa      	ldrh	r2, [r7, #30]
 8005ac0:	887b      	ldrh	r3, [r7, #2]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d201      	bcs.n	8005aca <mem_trim+0x36>
    return NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e0cc      	b.n	8005c64 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8005aca:	4b68      	ldr	r3, [pc, #416]	; (8005c6c <mem_trim+0x1d8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d304      	bcc.n	8005ade <mem_trim+0x4a>
 8005ad4:	4b66      	ldr	r3, [pc, #408]	; (8005c70 <mem_trim+0x1dc>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d306      	bcc.n	8005aec <mem_trim+0x58>
 8005ade:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <mem_trim+0x1e0>)
 8005ae0:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005ae4:	4964      	ldr	r1, [pc, #400]	; (8005c78 <mem_trim+0x1e4>)
 8005ae6:	4865      	ldr	r0, [pc, #404]	; (8005c7c <mem_trim+0x1e8>)
 8005ae8:	f009 fbfa 	bl	800f2e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005aec:	4b5f      	ldr	r3, [pc, #380]	; (8005c6c <mem_trim+0x1d8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d304      	bcc.n	8005b00 <mem_trim+0x6c>
 8005af6:	4b5e      	ldr	r3, [pc, #376]	; (8005c70 <mem_trim+0x1dc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d301      	bcc.n	8005b04 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	e0af      	b.n	8005c64 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	3b08      	subs	r3, #8
 8005b08:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8005b0a:	69b8      	ldr	r0, [r7, #24]
 8005b0c:	f7ff fe2c 	bl	8005768 <mem_to_ptr>
 8005b10:	4603      	mov	r3, r0
 8005b12:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	881a      	ldrh	r2, [r3, #0]
 8005b18:	8afb      	ldrh	r3, [r7, #22]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	3b08      	subs	r3, #8
 8005b20:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8005b22:	8bfa      	ldrh	r2, [r7, #30]
 8005b24:	8abb      	ldrh	r3, [r7, #20]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d906      	bls.n	8005b38 <mem_trim+0xa4>
 8005b2a:	4b52      	ldr	r3, [pc, #328]	; (8005c74 <mem_trim+0x1e0>)
 8005b2c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8005b30:	4953      	ldr	r1, [pc, #332]	; (8005c80 <mem_trim+0x1ec>)
 8005b32:	4852      	ldr	r0, [pc, #328]	; (8005c7c <mem_trim+0x1e8>)
 8005b34:	f009 fbd4 	bl	800f2e0 <iprintf>
  if (newsize > size) {
 8005b38:	8bfa      	ldrh	r2, [r7, #30]
 8005b3a:	8abb      	ldrh	r3, [r7, #20]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d901      	bls.n	8005b44 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8005b40:	2300      	movs	r3, #0
 8005b42:	e08f      	b.n	8005c64 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8005b44:	8bfa      	ldrh	r2, [r7, #30]
 8005b46:	8abb      	ldrh	r3, [r7, #20]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d101      	bne.n	8005b50 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	e089      	b.n	8005c64 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	881b      	ldrh	r3, [r3, #0]
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff fdf5 	bl	8005744 <ptr_to_mem>
 8005b5a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	791b      	ldrb	r3, [r3, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d13f      	bne.n	8005be4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	881b      	ldrh	r3, [r3, #0]
 8005b68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005b6c:	d106      	bne.n	8005b7c <mem_trim+0xe8>
 8005b6e:	4b41      	ldr	r3, [pc, #260]	; (8005c74 <mem_trim+0x1e0>)
 8005b70:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005b74:	4943      	ldr	r1, [pc, #268]	; (8005c84 <mem_trim+0x1f0>)
 8005b76:	4841      	ldr	r0, [pc, #260]	; (8005c7c <mem_trim+0x1e8>)
 8005b78:	f009 fbb2 	bl	800f2e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	881b      	ldrh	r3, [r3, #0]
 8005b80:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005b82:	8afa      	ldrh	r2, [r7, #22]
 8005b84:	8bfb      	ldrh	r3, [r7, #30]
 8005b86:	4413      	add	r3, r2
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005b8e:	4b3e      	ldr	r3, [pc, #248]	; (8005c88 <mem_trim+0x1f4>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d106      	bne.n	8005ba6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8005b98:	89fb      	ldrh	r3, [r7, #14]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fdd2 	bl	8005744 <ptr_to_mem>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	4a39      	ldr	r2, [pc, #228]	; (8005c88 <mem_trim+0x1f4>)
 8005ba4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8005ba6:	89fb      	ldrh	r3, [r7, #14]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fdcb 	bl	8005744 <ptr_to_mem>
 8005bae:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	89ba      	ldrh	r2, [r7, #12]
 8005bba:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	8afa      	ldrh	r2, [r7, #22]
 8005bc0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	89fa      	ldrh	r2, [r7, #14]
 8005bc6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005bd0:	d047      	beq.n	8005c62 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	881b      	ldrh	r3, [r3, #0]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff fdb4 	bl	8005744 <ptr_to_mem>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	89fb      	ldrh	r3, [r7, #14]
 8005be0:	8053      	strh	r3, [r2, #2]
 8005be2:	e03e      	b.n	8005c62 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005be4:	8bfb      	ldrh	r3, [r7, #30]
 8005be6:	f103 0214 	add.w	r2, r3, #20
 8005bea:	8abb      	ldrh	r3, [r7, #20]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d838      	bhi.n	8005c62 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005bf0:	8afa      	ldrh	r2, [r7, #22]
 8005bf2:	8bfb      	ldrh	r3, [r7, #30]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3308      	adds	r3, #8
 8005bfa:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c04:	d106      	bne.n	8005c14 <mem_trim+0x180>
 8005c06:	4b1b      	ldr	r3, [pc, #108]	; (8005c74 <mem_trim+0x1e0>)
 8005c08:	f240 3216 	movw	r2, #790	; 0x316
 8005c0c:	491d      	ldr	r1, [pc, #116]	; (8005c84 <mem_trim+0x1f0>)
 8005c0e:	481b      	ldr	r0, [pc, #108]	; (8005c7c <mem_trim+0x1e8>)
 8005c10:	f009 fb66 	bl	800f2e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8005c14:	89fb      	ldrh	r3, [r7, #14]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fd94 	bl	8005744 <ptr_to_mem>
 8005c1c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8005c1e:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <mem_trim+0x1f4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	693a      	ldr	r2, [r7, #16]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d202      	bcs.n	8005c2e <mem_trim+0x19a>
      lfree = mem2;
 8005c28:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <mem_trim+0x1f4>)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	2200      	movs	r2, #0
 8005c32:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	881a      	ldrh	r2, [r3, #0]
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	8afa      	ldrh	r2, [r7, #22]
 8005c40:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	89fa      	ldrh	r2, [r7, #14]
 8005c46:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005c50:	d007      	beq.n	8005c62 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff fd74 	bl	8005744 <ptr_to_mem>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	89fb      	ldrh	r3, [r7, #14]
 8005c60:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8005c62:	687b      	ldr	r3, [r7, #4]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3720      	adds	r7, #32
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	200058cc 	.word	0x200058cc
 8005c70:	200058d0 	.word	0x200058d0
 8005c74:	08010170 	.word	0x08010170
 8005c78:	080102e0 	.word	0x080102e0
 8005c7c:	080101b8 	.word	0x080101b8
 8005c80:	080102f8 	.word	0x080102f8
 8005c84:	08010318 	.word	0x08010318
 8005c88:	200058d4 	.word	0x200058d4

08005c8c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <mem_malloc+0x14>
    return NULL;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	e0d9      	b.n	8005e54 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005ca0:	88fb      	ldrh	r3, [r7, #6]
 8005ca2:	3303      	adds	r3, #3
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	f023 0303 	bic.w	r3, r3, #3
 8005caa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005cac:	8bbb      	ldrh	r3, [r7, #28]
 8005cae:	2b0b      	cmp	r3, #11
 8005cb0:	d801      	bhi.n	8005cb6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005cb2:	230c      	movs	r3, #12
 8005cb4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8005cb6:	8bbb      	ldrh	r3, [r7, #28]
 8005cb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005cbc:	d803      	bhi.n	8005cc6 <mem_malloc+0x3a>
 8005cbe:	8bba      	ldrh	r2, [r7, #28]
 8005cc0:	88fb      	ldrh	r3, [r7, #6]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d201      	bcs.n	8005cca <mem_malloc+0x3e>
    return NULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e0c4      	b.n	8005e54 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005cca:	4b64      	ldr	r3, [pc, #400]	; (8005e5c <mem_malloc+0x1d0>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff fd4a 	bl	8005768 <mem_to_ptr>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	83fb      	strh	r3, [r7, #30]
 8005cd8:	e0b4      	b.n	8005e44 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8005cda:	8bfb      	ldrh	r3, [r7, #30]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fd31 	bl	8005744 <ptr_to_mem>
 8005ce2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	791b      	ldrb	r3, [r3, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f040 80a4 	bne.w	8005e36 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	8bfb      	ldrh	r3, [r7, #30]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	f1a3 0208 	sub.w	r2, r3, #8
 8005cfc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	f0c0 8099 	bcc.w	8005e36 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	881b      	ldrh	r3, [r3, #0]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	8bfb      	ldrh	r3, [r7, #30]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	f1a3 0208 	sub.w	r2, r3, #8
 8005d12:	8bbb      	ldrh	r3, [r7, #28]
 8005d14:	3314      	adds	r3, #20
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d333      	bcc.n	8005d82 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8005d1a:	8bfa      	ldrh	r2, [r7, #30]
 8005d1c:	8bbb      	ldrh	r3, [r7, #28]
 8005d1e:	4413      	add	r3, r2
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	3308      	adds	r3, #8
 8005d24:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8005d26:	8a7b      	ldrh	r3, [r7, #18]
 8005d28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d2c:	d106      	bne.n	8005d3c <mem_malloc+0xb0>
 8005d2e:	4b4c      	ldr	r3, [pc, #304]	; (8005e60 <mem_malloc+0x1d4>)
 8005d30:	f240 3287 	movw	r2, #903	; 0x387
 8005d34:	494b      	ldr	r1, [pc, #300]	; (8005e64 <mem_malloc+0x1d8>)
 8005d36:	484c      	ldr	r0, [pc, #304]	; (8005e68 <mem_malloc+0x1dc>)
 8005d38:	f009 fad2 	bl	800f2e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8005d3c:	8a7b      	ldrh	r3, [r7, #18]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7ff fd00 	bl	8005744 <ptr_to_mem>
 8005d44:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	881a      	ldrh	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	8bfa      	ldrh	r2, [r7, #30]
 8005d58:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	8a7a      	ldrh	r2, [r7, #18]
 8005d5e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2201      	movs	r2, #1
 8005d64:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005d6e:	d00b      	beq.n	8005d88 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7ff fce5 	bl	8005744 <ptr_to_mem>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	8a7b      	ldrh	r3, [r7, #18]
 8005d7e:	8053      	strh	r3, [r2, #2]
 8005d80:	e002      	b.n	8005d88 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	2201      	movs	r2, #1
 8005d86:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8005d88:	4b34      	ldr	r3, [pc, #208]	; (8005e5c <mem_malloc+0x1d0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d127      	bne.n	8005de2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005d92:	4b32      	ldr	r3, [pc, #200]	; (8005e5c <mem_malloc+0x1d0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8005d98:	e005      	b.n	8005da6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fcd0 	bl	8005744 <ptr_to_mem>
 8005da4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	791b      	ldrb	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d004      	beq.n	8005db8 <mem_malloc+0x12c>
 8005dae:	4b2f      	ldr	r3, [pc, #188]	; (8005e6c <mem_malloc+0x1e0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d1f0      	bne.n	8005d9a <mem_malloc+0x10e>
          }
          lfree = cur;
 8005db8:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <mem_malloc+0x1d0>)
 8005dba:	69bb      	ldr	r3, [r7, #24]
 8005dbc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005dbe:	4b27      	ldr	r3, [pc, #156]	; (8005e5c <mem_malloc+0x1d0>)
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b2a      	ldr	r3, [pc, #168]	; (8005e6c <mem_malloc+0x1e0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d00b      	beq.n	8005de2 <mem_malloc+0x156>
 8005dca:	4b24      	ldr	r3, [pc, #144]	; (8005e5c <mem_malloc+0x1d0>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	791b      	ldrb	r3, [r3, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <mem_malloc+0x156>
 8005dd4:	4b22      	ldr	r3, [pc, #136]	; (8005e60 <mem_malloc+0x1d4>)
 8005dd6:	f240 32b5 	movw	r2, #949	; 0x3b5
 8005dda:	4925      	ldr	r1, [pc, #148]	; (8005e70 <mem_malloc+0x1e4>)
 8005ddc:	4822      	ldr	r0, [pc, #136]	; (8005e68 <mem_malloc+0x1dc>)
 8005dde:	f009 fa7f 	bl	800f2e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005de2:	8bba      	ldrh	r2, [r7, #28]
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	4413      	add	r3, r2
 8005de8:	3308      	adds	r3, #8
 8005dea:	4a20      	ldr	r2, [pc, #128]	; (8005e6c <mem_malloc+0x1e0>)
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d906      	bls.n	8005e00 <mem_malloc+0x174>
 8005df2:	4b1b      	ldr	r3, [pc, #108]	; (8005e60 <mem_malloc+0x1d4>)
 8005df4:	f240 32b9 	movw	r2, #953	; 0x3b9
 8005df8:	491e      	ldr	r1, [pc, #120]	; (8005e74 <mem_malloc+0x1e8>)
 8005dfa:	481b      	ldr	r0, [pc, #108]	; (8005e68 <mem_malloc+0x1dc>)
 8005dfc:	f009 fa70 	bl	800f2e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d006      	beq.n	8005e18 <mem_malloc+0x18c>
 8005e0a:	4b15      	ldr	r3, [pc, #84]	; (8005e60 <mem_malloc+0x1d4>)
 8005e0c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8005e10:	4919      	ldr	r1, [pc, #100]	; (8005e78 <mem_malloc+0x1ec>)
 8005e12:	4815      	ldr	r0, [pc, #84]	; (8005e68 <mem_malloc+0x1dc>)
 8005e14:	f009 fa64 	bl	800f2e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d006      	beq.n	8005e30 <mem_malloc+0x1a4>
 8005e22:	4b0f      	ldr	r3, [pc, #60]	; (8005e60 <mem_malloc+0x1d4>)
 8005e24:	f240 32bd 	movw	r2, #957	; 0x3bd
 8005e28:	4914      	ldr	r1, [pc, #80]	; (8005e7c <mem_malloc+0x1f0>)
 8005e2a:	480f      	ldr	r0, [pc, #60]	; (8005e68 <mem_malloc+0x1dc>)
 8005e2c:	f009 fa58 	bl	800f2e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3308      	adds	r3, #8
 8005e34:	e00e      	b.n	8005e54 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8005e36:	8bfb      	ldrh	r3, [r7, #30]
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff fc83 	bl	8005744 <ptr_to_mem>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8005e44:	8bfa      	ldrh	r2, [r7, #30]
 8005e46:	8bbb      	ldrh	r3, [r7, #28]
 8005e48:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	f4ff af44 	bcc.w	8005cda <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8005e52:	2300      	movs	r3, #0
}
 8005e54:	4618      	mov	r0, r3
 8005e56:	3720      	adds	r7, #32
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	200058d4 	.word	0x200058d4
 8005e60:	08010170 	.word	0x08010170
 8005e64:	08010318 	.word	0x08010318
 8005e68:	080101b8 	.word	0x080101b8
 8005e6c:	200058d0 	.word	0x200058d0
 8005e70:	0801032c 	.word	0x0801032c
 8005e74:	08010348 	.word	0x08010348
 8005e78:	08010378 	.word	0x08010378
 8005e7c:	080103a8 	.word	0x080103a8

08005e80 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	3303      	adds	r3, #3
 8005e96:	f023 0303 	bic.w	r3, r3, #3
 8005e9a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	e011      	b.n	8005ec6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	68ba      	ldr	r2, [r7, #8]
 8005eb2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	461a      	mov	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	885b      	ldrh	r3, [r3, #2]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	dbe7      	blt.n	8005ea2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	3714      	adds	r7, #20
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	80fb      	strh	r3, [r7, #6]
 8005eea:	e009      	b.n	8005f00 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	4a08      	ldr	r2, [pc, #32]	; (8005f10 <memp_init+0x30>)
 8005ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ffc3 	bl	8005e80 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8005efa:	88fb      	ldrh	r3, [r7, #6]
 8005efc:	3301      	adds	r3, #1
 8005efe:	80fb      	strh	r3, [r7, #6]
 8005f00:	88fb      	ldrh	r3, [r7, #6]
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d9f2      	bls.n	8005eec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	08012b8c 	.word	0x08012b8c

08005f14 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d012      	beq.n	8005f50 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	6812      	ldr	r2, [r2, #0]
 8005f32:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d006      	beq.n	8005f4c <do_memp_malloc_pool+0x38>
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <do_memp_malloc_pool+0x48>)
 8005f40:	f44f 728c 	mov.w	r2, #280	; 0x118
 8005f44:	4906      	ldr	r1, [pc, #24]	; (8005f60 <do_memp_malloc_pool+0x4c>)
 8005f46:	4807      	ldr	r0, [pc, #28]	; (8005f64 <do_memp_malloc_pool+0x50>)
 8005f48:	f009 f9ca 	bl	800f2e0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	e000      	b.n	8005f52 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	080103cc 	.word	0x080103cc
 8005f60:	080103fc 	.word	0x080103fc
 8005f64:	08010420 	.word	0x08010420

08005f68 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d106      	bne.n	8005f84 <memp_malloc_pool+0x1c>
 8005f76:	4b0a      	ldr	r3, [pc, #40]	; (8005fa0 <memp_malloc_pool+0x38>)
 8005f78:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005f7c:	4909      	ldr	r1, [pc, #36]	; (8005fa4 <memp_malloc_pool+0x3c>)
 8005f7e:	480a      	ldr	r0, [pc, #40]	; (8005fa8 <memp_malloc_pool+0x40>)
 8005f80:	f009 f9ae 	bl	800f2e0 <iprintf>
  if (desc == NULL) {
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d101      	bne.n	8005f8e <memp_malloc_pool+0x26>
    return NULL;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e003      	b.n	8005f96 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff ffc0 	bl	8005f14 <do_memp_malloc_pool>
 8005f94:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	080103cc 	.word	0x080103cc
 8005fa4:	08010448 	.word	0x08010448
 8005fa8:	08010420 	.word	0x08010420

08005fac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005fb6:	79fb      	ldrb	r3, [r7, #7]
 8005fb8:	2b08      	cmp	r3, #8
 8005fba:	d908      	bls.n	8005fce <memp_malloc+0x22>
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <memp_malloc+0x3c>)
 8005fbe:	f240 1257 	movw	r2, #343	; 0x157
 8005fc2:	490a      	ldr	r1, [pc, #40]	; (8005fec <memp_malloc+0x40>)
 8005fc4:	480a      	ldr	r0, [pc, #40]	; (8005ff0 <memp_malloc+0x44>)
 8005fc6:	f009 f98b 	bl	800f2e0 <iprintf>
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e008      	b.n	8005fe0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005fce:	79fb      	ldrb	r3, [r7, #7]
 8005fd0:	4a08      	ldr	r2, [pc, #32]	; (8005ff4 <memp_malloc+0x48>)
 8005fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f7ff ff9c 	bl	8005f14 <do_memp_malloc_pool>
 8005fdc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005fde:	68fb      	ldr	r3, [r7, #12]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3710      	adds	r7, #16
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	080103cc 	.word	0x080103cc
 8005fec:	0801045c 	.word	0x0801045c
 8005ff0:	08010420 	.word	0x08010420
 8005ff4:	08012b8c 	.word	0x08012b8c

08005ff8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <do_memp_free_pool+0x22>
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <do_memp_free_pool+0x40>)
 800600e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8006012:	490a      	ldr	r1, [pc, #40]	; (800603c <do_memp_free_pool+0x44>)
 8006014:	480a      	ldr	r0, [pc, #40]	; (8006040 <do_memp_free_pool+0x48>)
 8006016:	f009 f963 	bl	800f2e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	080103cc 	.word	0x080103cc
 800603c:	0801047c 	.word	0x0801047c
 8006040:	08010420 	.word	0x08010420

08006044 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d106      	bne.n	8006062 <memp_free_pool+0x1e>
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <memp_free_pool+0x3c>)
 8006056:	f240 1295 	movw	r2, #405	; 0x195
 800605a:	490a      	ldr	r1, [pc, #40]	; (8006084 <memp_free_pool+0x40>)
 800605c:	480a      	ldr	r0, [pc, #40]	; (8006088 <memp_free_pool+0x44>)
 800605e:	f009 f93f 	bl	800f2e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d007      	beq.n	8006078 <memp_free_pool+0x34>
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800606e:	6839      	ldr	r1, [r7, #0]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ffc1 	bl	8005ff8 <do_memp_free_pool>
 8006076:	e000      	b.n	800607a <memp_free_pool+0x36>
    return;
 8006078:	bf00      	nop
}
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	080103cc 	.word	0x080103cc
 8006084:	08010448 	.word	0x08010448
 8006088:	08010420 	.word	0x08010420

0800608c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	4603      	mov	r3, r0
 8006094:	6039      	str	r1, [r7, #0]
 8006096:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	2b08      	cmp	r3, #8
 800609c:	d907      	bls.n	80060ae <memp_free+0x22>
 800609e:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <memp_free+0x44>)
 80060a0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80060a4:	490b      	ldr	r1, [pc, #44]	; (80060d4 <memp_free+0x48>)
 80060a6:	480c      	ldr	r0, [pc, #48]	; (80060d8 <memp_free+0x4c>)
 80060a8:	f009 f91a 	bl	800f2e0 <iprintf>
 80060ac:	e00c      	b.n	80060c8 <memp_free+0x3c>

  if (mem == NULL) {
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d008      	beq.n	80060c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80060b4:	79fb      	ldrb	r3, [r7, #7]
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <memp_free+0x50>)
 80060b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060bc:	6839      	ldr	r1, [r7, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff ff9a 	bl	8005ff8 <do_memp_free_pool>
 80060c4:	e000      	b.n	80060c8 <memp_free+0x3c>
    return;
 80060c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	080103cc 	.word	0x080103cc
 80060d4:	0801049c 	.word	0x0801049c
 80060d8:	08010420 	.word	0x08010420
 80060dc:	08012b8c 	.word	0x08012b8c

080060e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80060e4:	bf00      	nop
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr
	...

080060f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d108      	bne.n	8006116 <netif_add+0x26>
 8006104:	4b57      	ldr	r3, [pc, #348]	; (8006264 <netif_add+0x174>)
 8006106:	f240 1227 	movw	r2, #295	; 0x127
 800610a:	4957      	ldr	r1, [pc, #348]	; (8006268 <netif_add+0x178>)
 800610c:	4857      	ldr	r0, [pc, #348]	; (800626c <netif_add+0x17c>)
 800610e:	f009 f8e7 	bl	800f2e0 <iprintf>
 8006112:	2300      	movs	r3, #0
 8006114:	e0a2      	b.n	800625c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	2b00      	cmp	r3, #0
 800611a:	d108      	bne.n	800612e <netif_add+0x3e>
 800611c:	4b51      	ldr	r3, [pc, #324]	; (8006264 <netif_add+0x174>)
 800611e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8006122:	4953      	ldr	r1, [pc, #332]	; (8006270 <netif_add+0x180>)
 8006124:	4851      	ldr	r0, [pc, #324]	; (800626c <netif_add+0x17c>)
 8006126:	f009 f8db 	bl	800f2e0 <iprintf>
 800612a:	2300      	movs	r3, #0
 800612c:	e096      	b.n	800625c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8006134:	4b4f      	ldr	r3, [pc, #316]	; (8006274 <netif_add+0x184>)
 8006136:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d101      	bne.n	8006142 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800613e:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <netif_add+0x184>)
 8006140:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8006148:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <netif_add+0x184>)
 800614a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a45      	ldr	r2, [pc, #276]	; (8006278 <netif_add+0x188>)
 8006162:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6a3a      	ldr	r2, [r7, #32]
 800617c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800617e:	4b3f      	ldr	r3, [pc, #252]	; (800627c <netif_add+0x18c>)
 8006180:	781a      	ldrb	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800618c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	68b9      	ldr	r1, [r7, #8]
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 f913 	bl	80063c0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <netif_add+0xba>
    return NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	e058      	b.n	800625c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061b0:	2bff      	cmp	r3, #255	; 0xff
 80061b2:	d103      	bne.n	80061bc <netif_add+0xcc>
        netif->num = 0;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80061c0:	4b2f      	ldr	r3, [pc, #188]	; (8006280 <netif_add+0x190>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	617b      	str	r3, [r7, #20]
 80061c6:	e02b      	b.n	8006220 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d106      	bne.n	80061de <netif_add+0xee>
 80061d0:	4b24      	ldr	r3, [pc, #144]	; (8006264 <netif_add+0x174>)
 80061d2:	f240 128b 	movw	r2, #395	; 0x18b
 80061d6:	492b      	ldr	r1, [pc, #172]	; (8006284 <netif_add+0x194>)
 80061d8:	4824      	ldr	r0, [pc, #144]	; (800626c <netif_add+0x17c>)
 80061da:	f009 f881 	bl	800f2e0 <iprintf>
        num_netifs++;
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3301      	adds	r3, #1
 80061e2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2bff      	cmp	r3, #255	; 0xff
 80061e8:	dd06      	ble.n	80061f8 <netif_add+0x108>
 80061ea:	4b1e      	ldr	r3, [pc, #120]	; (8006264 <netif_add+0x174>)
 80061ec:	f240 128d 	movw	r2, #397	; 0x18d
 80061f0:	4925      	ldr	r1, [pc, #148]	; (8006288 <netif_add+0x198>)
 80061f2:	481e      	ldr	r0, [pc, #120]	; (800626c <netif_add+0x17c>)
 80061f4:	f009 f874 	bl	800f2e0 <iprintf>
        if (netif2->num == netif->num) {
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006204:	429a      	cmp	r2, r3
 8006206:	d108      	bne.n	800621a <netif_add+0x12a>
          netif->num++;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800620e:	3301      	adds	r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8006218:	e005      	b.n	8006226 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1d0      	bne.n	80061c8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1be      	bne.n	80061aa <netif_add+0xba>
  }
  if (netif->num == 254) {
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006232:	2bfe      	cmp	r3, #254	; 0xfe
 8006234:	d103      	bne.n	800623e <netif_add+0x14e>
    netif_num = 0;
 8006236:	4b11      	ldr	r3, [pc, #68]	; (800627c <netif_add+0x18c>)
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
 800623c:	e006      	b.n	800624c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006244:	3301      	adds	r3, #1
 8006246:	b2da      	uxtb	r2, r3
 8006248:	4b0c      	ldr	r3, [pc, #48]	; (800627c <netif_add+0x18c>)
 800624a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800624c:	4b0c      	ldr	r3, [pc, #48]	; (8006280 <netif_add+0x190>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8006254:	4a0a      	ldr	r2, [pc, #40]	; (8006280 <netif_add+0x190>)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	080104b8 	.word	0x080104b8
 8006268:	0801054c 	.word	0x0801054c
 800626c:	08010508 	.word	0x08010508
 8006270:	08010568 	.word	0x08010568
 8006274:	08012bf0 	.word	0x08012bf0
 8006278:	0800669b 	.word	0x0800669b
 800627c:	200087cc 	.word	0x200087cc
 8006280:	200087c4 	.word	0x200087c4
 8006284:	0801058c 	.word	0x0801058c
 8006288:	080105a0 	.word	0x080105a0

0800628c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8006296:	6839      	ldr	r1, [r7, #0]
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 fb43 	bl	8008924 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f006 fc27 	bl	800caf4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80062a6:	bf00      	nop
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d106      	bne.n	80062d0 <netif_do_set_ipaddr+0x20>
 80062c2:	4b1d      	ldr	r3, [pc, #116]	; (8006338 <netif_do_set_ipaddr+0x88>)
 80062c4:	f240 12cb 	movw	r2, #459	; 0x1cb
 80062c8:	491c      	ldr	r1, [pc, #112]	; (800633c <netif_do_set_ipaddr+0x8c>)
 80062ca:	481d      	ldr	r0, [pc, #116]	; (8006340 <netif_do_set_ipaddr+0x90>)
 80062cc:	f009 f808 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <netif_do_set_ipaddr+0x34>
 80062d6:	4b18      	ldr	r3, [pc, #96]	; (8006338 <netif_do_set_ipaddr+0x88>)
 80062d8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80062dc:	4917      	ldr	r1, [pc, #92]	; (800633c <netif_do_set_ipaddr+0x8c>)
 80062de:	4818      	ldr	r0, [pc, #96]	; (8006340 <netif_do_set_ipaddr+0x90>)
 80062e0:	f008 fffe 	bl	800f2e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3304      	adds	r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d01c      	beq.n	800632c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3304      	adds	r3, #4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8006302:	f107 0314 	add.w	r3, r7, #20
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ffbf 	bl	800628c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <netif_do_set_ipaddr+0x6a>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	e000      	b.n	800631c <netif_do_set_ipaddr+0x6c>
 800631a:	2300      	movs	r3, #0
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8006320:	2101      	movs	r1, #1
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f000 f8d2 	bl	80064cc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3718      	adds	r7, #24
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	080104b8 	.word	0x080104b8
 800633c:	080105d0 	.word	0x080105d0
 8006340:	08010508 	.word	0x08010508

08006344 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	60f8      	str	r0, [r7, #12]
 800634c:	60b9      	str	r1, [r7, #8]
 800634e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3308      	adds	r3, #8
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	429a      	cmp	r2, r3
 800635c:	d00a      	beq.n	8006374 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <netif_do_set_netmask+0x26>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	e000      	b.n	800636c <netif_do_set_netmask+0x28>
 800636a:	2300      	movs	r3, #0
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	60f8      	str	r0, [r7, #12]
 800638a:	60b9      	str	r1, [r7, #8]
 800638c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	330c      	adds	r3, #12
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	429a      	cmp	r2, r3
 800639a:	d00a      	beq.n	80063b2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <netif_do_set_gw+0x26>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	e000      	b.n	80063aa <netif_do_set_gw+0x28>
 80063a8:	2300      	movs	r3, #0
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b088      	sub	sp, #32
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	60f8      	str	r0, [r7, #12]
 80063c8:	60b9      	str	r1, [r7, #8]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d101      	bne.n	80063e0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80063dc:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <netif_set_addr+0x90>)
 80063de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80063e6:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <netif_set_addr+0x90>)
 80063e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d101      	bne.n	80063f4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <netif_set_addr+0x90>)
 80063f2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <netif_set_addr+0x42>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d101      	bne.n	8006406 <netif_set_addr+0x46>
 8006402:	2301      	movs	r3, #1
 8006404:	e000      	b.n	8006408 <netif_set_addr+0x48>
 8006406:	2300      	movs	r3, #0
 8006408:	617b      	str	r3, [r7, #20]
  if (remove) {
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d006      	beq.n	800641e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	461a      	mov	r2, r3
 8006416:	68b9      	ldr	r1, [r7, #8]
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f7ff ff49 	bl	80062b0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	6879      	ldr	r1, [r7, #4]
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f7ff ff8e 	bl	8006344 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff ffa8 	bl	8006382 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d106      	bne.n	8006446 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8006438:	f107 0310 	add.w	r3, r7, #16
 800643c:	461a      	mov	r2, r3
 800643e:	68b9      	ldr	r1, [r7, #8]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff ff35 	bl	80062b0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8006446:	bf00      	nop
 8006448:	3720      	adds	r7, #32
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	08012bf0 	.word	0x08012bf0

08006454 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800645c:	4a04      	ldr	r2, [pc, #16]	; (8006470 <netif_set_default+0x1c>)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8006462:	bf00      	nop
 8006464:	370c      	adds	r7, #12
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	200087c8 	.word	0x200087c8

08006474 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d107      	bne.n	8006492 <netif_set_up+0x1e>
 8006482:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <netif_set_up+0x4c>)
 8006484:	f44f 7254 	mov.w	r2, #848	; 0x350
 8006488:	490e      	ldr	r1, [pc, #56]	; (80064c4 <netif_set_up+0x50>)
 800648a:	480f      	ldr	r0, [pc, #60]	; (80064c8 <netif_set_up+0x54>)
 800648c:	f008 ff28 	bl	800f2e0 <iprintf>
 8006490:	e013      	b.n	80064ba <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10c      	bne.n	80064ba <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064a6:	f043 0301 	orr.w	r3, r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80064b2:	2103      	movs	r1, #3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f809 	bl	80064cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	080104b8 	.word	0x080104b8
 80064c4:	08010640 	.word	0x08010640
 80064c8:	08010508 	.word	0x08010508

080064cc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d106      	bne.n	80064ec <netif_issue_reports+0x20>
 80064de:	4b18      	ldr	r3, [pc, #96]	; (8006540 <netif_issue_reports+0x74>)
 80064e0:	f240 326d 	movw	r2, #877	; 0x36d
 80064e4:	4917      	ldr	r1, [pc, #92]	; (8006544 <netif_issue_reports+0x78>)
 80064e6:	4818      	ldr	r0, [pc, #96]	; (8006548 <netif_issue_reports+0x7c>)
 80064e8:	f008 fefa 	bl	800f2e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80064f2:	f003 0304 	and.w	r3, r3, #4
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01e      	beq.n	8006538 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006500:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8006504:	2b00      	cmp	r3, #0
 8006506:	d017      	beq.n	8006538 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006508:	78fb      	ldrb	r3, [r7, #3]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d013      	beq.n	800653a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	3304      	adds	r3, #4
 8006516:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00e      	beq.n	800653a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006522:	f003 0308 	and.w	r3, r3, #8
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f007 fa49 	bl	800d9c8 <etharp_request>
 8006536:	e000      	b.n	800653a <netif_issue_reports+0x6e>
    return;
 8006538:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	080104b8 	.word	0x080104b8
 8006544:	0801065c 	.word	0x0801065c
 8006548:	08010508 	.word	0x08010508

0800654c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d107      	bne.n	800656a <netif_set_down+0x1e>
 800655a:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <netif_set_down+0x58>)
 800655c:	f240 329b 	movw	r2, #923	; 0x39b
 8006560:	4911      	ldr	r1, [pc, #68]	; (80065a8 <netif_set_down+0x5c>)
 8006562:	4812      	ldr	r0, [pc, #72]	; (80065ac <netif_set_down+0x60>)
 8006564:	f008 febc 	bl	800f2e0 <iprintf>
 8006568:	e019      	b.n	800659e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b00      	cmp	r3, #0
 8006576:	d012      	beq.n	800659e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006590:	f003 0308 	and.w	r3, r3, #8
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f006 fdd3 	bl	800d144 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	080104b8 	.word	0x080104b8
 80065a8:	08010680 	.word	0x08010680
 80065ac:	08010508 	.word	0x08010508

080065b0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d107      	bne.n	80065ce <netif_set_link_up+0x1e>
 80065be:	4b13      	ldr	r3, [pc, #76]	; (800660c <netif_set_link_up+0x5c>)
 80065c0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80065c4:	4912      	ldr	r1, [pc, #72]	; (8006610 <netif_set_link_up+0x60>)
 80065c6:	4813      	ldr	r0, [pc, #76]	; (8006614 <netif_set_link_up+0x64>)
 80065c8:	f008 fe8a 	bl	800f2e0 <iprintf>
 80065cc:	e01b      	b.n	8006606 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065d4:	f003 0304 	and.w	r3, r3, #4
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d114      	bne.n	8006606 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80065ee:	2103      	movs	r1, #3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ff6b 	bl	80064cc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <netif_set_link_up+0x56>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	080104b8 	.word	0x080104b8
 8006610:	080106a0 	.word	0x080106a0
 8006614:	08010508 	.word	0x08010508

08006618 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d107      	bne.n	8006636 <netif_set_link_down+0x1e>
 8006626:	4b11      	ldr	r3, [pc, #68]	; (800666c <netif_set_link_down+0x54>)
 8006628:	f240 4206 	movw	r2, #1030	; 0x406
 800662c:	4910      	ldr	r1, [pc, #64]	; (8006670 <netif_set_link_down+0x58>)
 800662e:	4811      	ldr	r0, [pc, #68]	; (8006674 <netif_set_link_down+0x5c>)
 8006630:	f008 fe56 	bl	800f2e0 <iprintf>
 8006634:	e017      	b.n	8006666 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800664a:	f023 0304 	bic.w	r3, r3, #4
 800664e:	b2da      	uxtb	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <netif_set_link_down+0x4e>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8006666:	3708      	adds	r7, #8
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	080104b8 	.word	0x080104b8
 8006670:	080106c4 	.word	0x080106c4
 8006674:	08010508 	.word	0x08010508

08006678 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d002      	beq.n	800668e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	61da      	str	r2, [r3, #28]
  }
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800669a:	b480      	push	{r7}
 800669c:	b085      	sub	sp, #20
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
 80066a2:	60b9      	str	r1, [r7, #8]
 80066a4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80066a6:	f06f 030b 	mvn.w	r3, #11
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
	...

080066b8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	4603      	mov	r3, r0
 80066c0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80066c2:	79fb      	ldrb	r3, [r7, #7]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d013      	beq.n	80066f0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80066c8:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <netif_get_by_index+0x48>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
 80066ce:	e00c      	b.n	80066ea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80066d6:	3301      	adds	r3, #1
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	79fa      	ldrb	r2, [r7, #7]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d101      	bne.n	80066e4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	e006      	b.n	80066f2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60fb      	str	r3, [r7, #12]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1ef      	bne.n	80066d0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	200087c4 	.word	0x200087c4

08006704 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800670a:	4b0c      	ldr	r3, [pc, #48]	; (800673c <pbuf_free_ooseq+0x38>)
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <pbuf_free_ooseq+0x3c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	e00a      	b.n	800672e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f002 f93d 	bl	80089a0 <tcp_free_ooseq>
      return;
 8006726:	e005      	b.n	8006734 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1f1      	bne.n	8006718 <pbuf_free_ooseq+0x14>
    }
  }
}
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	200087cd 	.word	0x200087cd
 8006740:	200087dc 	.word	0x200087dc

08006744 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8006748:	4b03      	ldr	r3, [pc, #12]	; (8006758 <pbuf_pool_is_empty+0x14>)
 800674a:	2201      	movs	r2, #1
 800674c:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800674e:	bf00      	nop
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	200087cd 	.word	0x200087cd

0800675c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4611      	mov	r1, r2
 8006768:	461a      	mov	r2, r3
 800676a:	460b      	mov	r3, r1
 800676c:	80fb      	strh	r3, [r7, #6]
 800676e:	4613      	mov	r3, r2
 8006770:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	88fa      	ldrh	r2, [r7, #6]
 8006782:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	88ba      	ldrh	r2, [r7, #4]
 8006788:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800678a:	8b3b      	ldrh	r3, [r7, #24]
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	7f3a      	ldrb	r2, [r7, #28]
 8006796:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2201      	movs	r2, #1
 800679c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	73da      	strb	r2, [r3, #15]
}
 80067a4:	bf00      	nop
 80067a6:	3714      	adds	r7, #20
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b08c      	sub	sp, #48	; 0x30
 80067b4:	af02      	add	r7, sp, #8
 80067b6:	4603      	mov	r3, r0
 80067b8:	71fb      	strb	r3, [r7, #7]
 80067ba:	460b      	mov	r3, r1
 80067bc:	80bb      	strh	r3, [r7, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80067c2:	79fb      	ldrb	r3, [r7, #7]
 80067c4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80067c6:	887b      	ldrh	r3, [r7, #2]
 80067c8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80067cc:	d07f      	beq.n	80068ce <pbuf_alloc+0x11e>
 80067ce:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80067d2:	f300 80c8 	bgt.w	8006966 <pbuf_alloc+0x1b6>
 80067d6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80067da:	d010      	beq.n	80067fe <pbuf_alloc+0x4e>
 80067dc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80067e0:	f300 80c1 	bgt.w	8006966 <pbuf_alloc+0x1b6>
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d002      	beq.n	80067ee <pbuf_alloc+0x3e>
 80067e8:	2b41      	cmp	r3, #65	; 0x41
 80067ea:	f040 80bc 	bne.w	8006966 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80067ee:	887a      	ldrh	r2, [r7, #2]
 80067f0:	88bb      	ldrh	r3, [r7, #4]
 80067f2:	4619      	mov	r1, r3
 80067f4:	2000      	movs	r0, #0
 80067f6:	f000 f8d1 	bl	800699c <pbuf_alloc_reference>
 80067fa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80067fc:	e0bd      	b.n	800697a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8006806:	88bb      	ldrh	r3, [r7, #4]
 8006808:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800680a:	2008      	movs	r0, #8
 800680c:	f7ff fbce 	bl	8005fac <memp_malloc>
 8006810:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d109      	bne.n	800682c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8006818:	f7ff ff94 	bl	8006744 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <pbuf_alloc+0x78>
            pbuf_free(p);
 8006822:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006824:	f000 faa8 	bl	8006d78 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8006828:	2300      	movs	r3, #0
 800682a:	e0a7      	b.n	800697c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800682c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800682e:	3303      	adds	r3, #3
 8006830:	b29b      	uxth	r3, r3
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	b29b      	uxth	r3, r3
 8006838:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800683c:	b29b      	uxth	r3, r3
 800683e:	8b7a      	ldrh	r2, [r7, #26]
 8006840:	4293      	cmp	r3, r2
 8006842:	bf28      	it	cs
 8006844:	4613      	movcs	r3, r2
 8006846:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8006848:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800684a:	3310      	adds	r3, #16
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	3303      	adds	r3, #3
 8006852:	f023 0303 	bic.w	r3, r3, #3
 8006856:	4618      	mov	r0, r3
 8006858:	89f9      	ldrh	r1, [r7, #14]
 800685a:	8b7a      	ldrh	r2, [r7, #26]
 800685c:	2300      	movs	r3, #0
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	887b      	ldrh	r3, [r7, #2]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	460b      	mov	r3, r1
 8006866:	4601      	mov	r1, r0
 8006868:	6938      	ldr	r0, [r7, #16]
 800686a:	f7ff ff77 	bl	800675c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f003 0303 	and.w	r3, r3, #3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <pbuf_alloc+0xd8>
 800687a:	4b42      	ldr	r3, [pc, #264]	; (8006984 <pbuf_alloc+0x1d4>)
 800687c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006880:	4941      	ldr	r1, [pc, #260]	; (8006988 <pbuf_alloc+0x1d8>)
 8006882:	4842      	ldr	r0, [pc, #264]	; (800698c <pbuf_alloc+0x1dc>)
 8006884:	f008 fd2c 	bl	800f2e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8006888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800688a:	3303      	adds	r3, #3
 800688c:	f023 0303 	bic.w	r3, r3, #3
 8006890:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006894:	d106      	bne.n	80068a4 <pbuf_alloc+0xf4>
 8006896:	4b3b      	ldr	r3, [pc, #236]	; (8006984 <pbuf_alloc+0x1d4>)
 8006898:	f44f 7281 	mov.w	r2, #258	; 0x102
 800689c:	493c      	ldr	r1, [pc, #240]	; (8006990 <pbuf_alloc+0x1e0>)
 800689e:	483b      	ldr	r0, [pc, #236]	; (800698c <pbuf_alloc+0x1dc>)
 80068a0:	f008 fd1e 	bl	800f2e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
 80068ae:	e002      	b.n	80068b6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	693a      	ldr	r2, [r7, #16]
 80068b4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80068ba:	8b7a      	ldrh	r2, [r7, #26]
 80068bc:	89fb      	ldrh	r3, [r7, #14]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80068c6:	8b7b      	ldrh	r3, [r7, #26]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d19e      	bne.n	800680a <pbuf_alloc+0x5a>
      break;
 80068cc:	e055      	b.n	800697a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80068ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068d0:	3303      	adds	r3, #3
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	f023 0303 	bic.w	r3, r3, #3
 80068d8:	b29a      	uxth	r2, r3
 80068da:	88bb      	ldrh	r3, [r7, #4]
 80068dc:	3303      	adds	r3, #3
 80068de:	b29b      	uxth	r3, r3
 80068e0:	f023 0303 	bic.w	r3, r3, #3
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80068ea:	8b3b      	ldrh	r3, [r7, #24]
 80068ec:	3310      	adds	r3, #16
 80068ee:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80068f0:	8b3a      	ldrh	r2, [r7, #24]
 80068f2:	88bb      	ldrh	r3, [r7, #4]
 80068f4:	3303      	adds	r3, #3
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d306      	bcc.n	800690c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80068fe:	8afa      	ldrh	r2, [r7, #22]
 8006900:	88bb      	ldrh	r3, [r7, #4]
 8006902:	3303      	adds	r3, #3
 8006904:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006908:	429a      	cmp	r2, r3
 800690a:	d201      	bcs.n	8006910 <pbuf_alloc+0x160>
        return NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	e035      	b.n	800697c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8006910:	8afb      	ldrh	r3, [r7, #22]
 8006912:	4618      	mov	r0, r3
 8006914:	f7ff f9ba 	bl	8005c8c <mem_malloc>
 8006918:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <pbuf_alloc+0x174>
        return NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	e02b      	b.n	800697c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8006924:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006926:	3310      	adds	r3, #16
 8006928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800692a:	4413      	add	r3, r2
 800692c:	3303      	adds	r3, #3
 800692e:	f023 0303 	bic.w	r3, r3, #3
 8006932:	4618      	mov	r0, r3
 8006934:	88b9      	ldrh	r1, [r7, #4]
 8006936:	88ba      	ldrh	r2, [r7, #4]
 8006938:	2300      	movs	r3, #0
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	887b      	ldrh	r3, [r7, #2]
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	460b      	mov	r3, r1
 8006942:	4601      	mov	r1, r0
 8006944:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006946:	f7ff ff09 	bl	800675c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f003 0303 	and.w	r3, r3, #3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d010      	beq.n	8006978 <pbuf_alloc+0x1c8>
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <pbuf_alloc+0x1d4>)
 8006958:	f44f 7291 	mov.w	r2, #290	; 0x122
 800695c:	490d      	ldr	r1, [pc, #52]	; (8006994 <pbuf_alloc+0x1e4>)
 800695e:	480b      	ldr	r0, [pc, #44]	; (800698c <pbuf_alloc+0x1dc>)
 8006960:	f008 fcbe 	bl	800f2e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8006964:	e008      	b.n	8006978 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <pbuf_alloc+0x1d4>)
 8006968:	f240 1227 	movw	r2, #295	; 0x127
 800696c:	490a      	ldr	r1, [pc, #40]	; (8006998 <pbuf_alloc+0x1e8>)
 800696e:	4807      	ldr	r0, [pc, #28]	; (800698c <pbuf_alloc+0x1dc>)
 8006970:	f008 fcb6 	bl	800f2e0 <iprintf>
      return NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	e001      	b.n	800697c <pbuf_alloc+0x1cc>
      break;
 8006978:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800697c:	4618      	mov	r0, r3
 800697e:	3728      	adds	r7, #40	; 0x28
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	080106e8 	.word	0x080106e8
 8006988:	08010718 	.word	0x08010718
 800698c:	08010748 	.word	0x08010748
 8006990:	08010770 	.word	0x08010770
 8006994:	080107a4 	.word	0x080107a4
 8006998:	080107d0 	.word	0x080107d0

0800699c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	807b      	strh	r3, [r7, #2]
 80069a8:	4613      	mov	r3, r2
 80069aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80069ac:	883b      	ldrh	r3, [r7, #0]
 80069ae:	2b41      	cmp	r3, #65	; 0x41
 80069b0:	d009      	beq.n	80069c6 <pbuf_alloc_reference+0x2a>
 80069b2:	883b      	ldrh	r3, [r7, #0]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d006      	beq.n	80069c6 <pbuf_alloc_reference+0x2a>
 80069b8:	4b0f      	ldr	r3, [pc, #60]	; (80069f8 <pbuf_alloc_reference+0x5c>)
 80069ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80069be:	490f      	ldr	r1, [pc, #60]	; (80069fc <pbuf_alloc_reference+0x60>)
 80069c0:	480f      	ldr	r0, [pc, #60]	; (8006a00 <pbuf_alloc_reference+0x64>)
 80069c2:	f008 fc8d 	bl	800f2e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80069c6:	2007      	movs	r0, #7
 80069c8:	f7ff faf0 	bl	8005fac <memp_malloc>
 80069cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80069d4:	2300      	movs	r3, #0
 80069d6:	e00b      	b.n	80069f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80069d8:	8879      	ldrh	r1, [r7, #2]
 80069da:	887a      	ldrh	r2, [r7, #2]
 80069dc:	2300      	movs	r3, #0
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	883b      	ldrh	r3, [r7, #0]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	460b      	mov	r3, r1
 80069e6:	6879      	ldr	r1, [r7, #4]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f7ff feb7 	bl	800675c <pbuf_init_alloced_pbuf>
  return p;
 80069ee:	68fb      	ldr	r3, [r7, #12]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	080106e8 	.word	0x080106e8
 80069fc:	080107ec 	.word	0x080107ec
 8006a00:	08010748 	.word	0x08010748

08006a04 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b088      	sub	sp, #32
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	607b      	str	r3, [r7, #4]
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
 8006a10:	460b      	mov	r3, r1
 8006a12:	81bb      	strh	r3, [r7, #12]
 8006a14:	4613      	mov	r3, r2
 8006a16:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006a1c:	8a7b      	ldrh	r3, [r7, #18]
 8006a1e:	3303      	adds	r3, #3
 8006a20:	f023 0203 	bic.w	r2, r3, #3
 8006a24:	89bb      	ldrh	r3, [r7, #12]
 8006a26:	441a      	add	r2, r3
 8006a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d901      	bls.n	8006a32 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	e018      	b.n	8006a64 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006a38:	8a7b      	ldrh	r3, [r7, #18]
 8006a3a:	3303      	adds	r3, #3
 8006a3c:	f023 0303 	bic.w	r3, r3, #3
 8006a40:	6a3a      	ldr	r2, [r7, #32]
 8006a42:	4413      	add	r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e001      	b.n	8006a4c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	89b9      	ldrh	r1, [r7, #12]
 8006a50:	89ba      	ldrh	r2, [r7, #12]
 8006a52:	2302      	movs	r3, #2
 8006a54:	9301      	str	r3, [sp, #4]
 8006a56:	897b      	ldrh	r3, [r7, #10]
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	6979      	ldr	r1, [r7, #20]
 8006a5e:	f7ff fe7d 	bl	800675c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8006a62:	687b      	ldr	r3, [r7, #4]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3718      	adds	r7, #24
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <pbuf_realloc+0x20>
 8006a7e:	4b3a      	ldr	r3, [pc, #232]	; (8006b68 <pbuf_realloc+0xfc>)
 8006a80:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006a84:	4939      	ldr	r1, [pc, #228]	; (8006b6c <pbuf_realloc+0x100>)
 8006a86:	483a      	ldr	r0, [pc, #232]	; (8006b70 <pbuf_realloc+0x104>)
 8006a88:	f008 fc2a 	bl	800f2e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	891b      	ldrh	r3, [r3, #8]
 8006a90:	887a      	ldrh	r2, [r7, #2]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d263      	bcs.n	8006b5e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	891a      	ldrh	r2, [r3, #8]
 8006a9a:	887b      	ldrh	r3, [r7, #2]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006aa0:	887b      	ldrh	r3, [r7, #2]
 8006aa2:	817b      	strh	r3, [r7, #10]
  q = p;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8006aa8:	e018      	b.n	8006adc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	895b      	ldrh	r3, [r3, #10]
 8006aae:	897a      	ldrh	r2, [r7, #10]
 8006ab0:	1ad3      	subs	r3, r2, r3
 8006ab2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	891a      	ldrh	r2, [r3, #8]
 8006ab8:	893b      	ldrh	r3, [r7, #8]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <pbuf_realloc+0x70>
 8006ace:	4b26      	ldr	r3, [pc, #152]	; (8006b68 <pbuf_realloc+0xfc>)
 8006ad0:	f240 12af 	movw	r2, #431	; 0x1af
 8006ad4:	4927      	ldr	r1, [pc, #156]	; (8006b74 <pbuf_realloc+0x108>)
 8006ad6:	4826      	ldr	r0, [pc, #152]	; (8006b70 <pbuf_realloc+0x104>)
 8006ad8:	f008 fc02 	bl	800f2e0 <iprintf>
  while (rem_len > q->len) {
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	895b      	ldrh	r3, [r3, #10]
 8006ae0:	897a      	ldrh	r2, [r7, #10]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d8e1      	bhi.n	8006aaa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	7b1b      	ldrb	r3, [r3, #12]
 8006aea:	f003 030f 	and.w	r3, r3, #15
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d121      	bne.n	8006b36 <pbuf_realloc+0xca>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	895b      	ldrh	r3, [r3, #10]
 8006af6:	897a      	ldrh	r2, [r7, #10]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	d01c      	beq.n	8006b36 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	7b5b      	ldrb	r3, [r3, #13]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d116      	bne.n	8006b36 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	897b      	ldrh	r3, [r7, #10]
 8006b14:	4413      	add	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	4619      	mov	r1, r3
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7fe ffba 	bl	8005a94 <mem_trim>
 8006b20:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d106      	bne.n	8006b36 <pbuf_realloc+0xca>
 8006b28:	4b0f      	ldr	r3, [pc, #60]	; (8006b68 <pbuf_realloc+0xfc>)
 8006b2a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8006b2e:	4912      	ldr	r1, [pc, #72]	; (8006b78 <pbuf_realloc+0x10c>)
 8006b30:	480f      	ldr	r0, [pc, #60]	; (8006b70 <pbuf_realloc+0x104>)
 8006b32:	f008 fbd5 	bl	800f2e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	897a      	ldrh	r2, [r7, #10]
 8006b3a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	895a      	ldrh	r2, [r3, #10]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d004      	beq.n	8006b56 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 f911 	bl	8006d78 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	e000      	b.n	8006b60 <pbuf_realloc+0xf4>
    return;
 8006b5e:	bf00      	nop

}
 8006b60:	3710      	adds	r7, #16
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	080106e8 	.word	0x080106e8
 8006b6c:	08010800 	.word	0x08010800
 8006b70:	08010748 	.word	0x08010748
 8006b74:	08010818 	.word	0x08010818
 8006b78:	08010830 	.word	0x08010830

08006b7c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	4613      	mov	r3, r2
 8006b88:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d106      	bne.n	8006b9e <pbuf_add_header_impl+0x22>
 8006b90:	4b2b      	ldr	r3, [pc, #172]	; (8006c40 <pbuf_add_header_impl+0xc4>)
 8006b92:	f240 12df 	movw	r2, #479	; 0x1df
 8006b96:	492b      	ldr	r1, [pc, #172]	; (8006c44 <pbuf_add_header_impl+0xc8>)
 8006b98:	482b      	ldr	r0, [pc, #172]	; (8006c48 <pbuf_add_header_impl+0xcc>)
 8006b9a:	f008 fba1 	bl	800f2e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <pbuf_add_header_impl+0x30>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006baa:	d301      	bcc.n	8006bb0 <pbuf_add_header_impl+0x34>
    return 1;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e043      	b.n	8006c38 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <pbuf_add_header_impl+0x3e>
    return 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	e03e      	b.n	8006c38 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	891a      	ldrh	r2, [r3, #8]
 8006bc2:	8a7b      	ldrh	r3, [r7, #18]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	8a7a      	ldrh	r2, [r7, #18]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d901      	bls.n	8006bd2 <pbuf_add_header_impl+0x56>
    return 1;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e032      	b.n	8006c38 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	7b1b      	ldrb	r3, [r3, #12]
 8006bd6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8006bd8:	8a3b      	ldrh	r3, [r7, #16]
 8006bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d00c      	beq.n	8006bfc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	425b      	negs	r3, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3310      	adds	r3, #16
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d20d      	bcs.n	8006c14 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e01d      	b.n	8006c38 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d006      	beq.n	8006c10 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	685a      	ldr	r2, [r3, #4]
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	425b      	negs	r3, r3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	e001      	b.n	8006c14 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e011      	b.n	8006c38 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	697a      	ldr	r2, [r7, #20]
 8006c18:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	895a      	ldrh	r2, [r3, #10]
 8006c1e:	8a7b      	ldrh	r3, [r7, #18]
 8006c20:	4413      	add	r3, r2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	891a      	ldrh	r2, [r3, #8]
 8006c2c:	8a7b      	ldrh	r3, [r7, #18]
 8006c2e:	4413      	add	r3, r2
 8006c30:	b29a      	uxth	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	811a      	strh	r2, [r3, #8]


  return 0;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	080106e8 	.word	0x080106e8
 8006c44:	0801084c 	.word	0x0801084c
 8006c48:	08010748 	.word	0x08010748

08006c4c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8006c56:	2200      	movs	r2, #0
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff ff8e 	bl	8006b7c <pbuf_add_header_impl>
 8006c60:	4603      	mov	r3, r0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <pbuf_remove_header+0x1e>
 8006c7c:	4b20      	ldr	r3, [pc, #128]	; (8006d00 <pbuf_remove_header+0x94>)
 8006c7e:	f240 224b 	movw	r2, #587	; 0x24b
 8006c82:	4920      	ldr	r1, [pc, #128]	; (8006d04 <pbuf_remove_header+0x98>)
 8006c84:	4820      	ldr	r0, [pc, #128]	; (8006d08 <pbuf_remove_header+0x9c>)
 8006c86:	f008 fb2b 	bl	800f2e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d003      	beq.n	8006c98 <pbuf_remove_header+0x2c>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c96:	d301      	bcc.n	8006c9c <pbuf_remove_header+0x30>
    return 1;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e02c      	b.n	8006cf6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <pbuf_remove_header+0x3a>
    return 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e027      	b.n	8006cf6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	895b      	ldrh	r3, [r3, #10]
 8006cae:	89fa      	ldrh	r2, [r7, #14]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d908      	bls.n	8006cc6 <pbuf_remove_header+0x5a>
 8006cb4:	4b12      	ldr	r3, [pc, #72]	; (8006d00 <pbuf_remove_header+0x94>)
 8006cb6:	f240 2255 	movw	r2, #597	; 0x255
 8006cba:	4914      	ldr	r1, [pc, #80]	; (8006d0c <pbuf_remove_header+0xa0>)
 8006cbc:	4812      	ldr	r0, [pc, #72]	; (8006d08 <pbuf_remove_header+0x9c>)
 8006cbe:	f008 fb0f 	bl	800f2e0 <iprintf>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e017      	b.n	8006cf6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	441a      	add	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	895a      	ldrh	r2, [r3, #10]
 8006cdc:	89fb      	ldrh	r3, [r7, #14]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	891a      	ldrh	r2, [r3, #8]
 8006cea:	89fb      	ldrh	r3, [r7, #14]
 8006cec:	1ad3      	subs	r3, r2, r3
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	080106e8 	.word	0x080106e8
 8006d04:	0801084c 	.word	0x0801084c
 8006d08:	08010748 	.word	0x08010748
 8006d0c:	08010858 	.word	0x08010858

08006d10 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	807b      	strh	r3, [r7, #2]
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8006d20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	da08      	bge.n	8006d3a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8006d28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d2c:	425b      	negs	r3, r3
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff9b 	bl	8006c6c <pbuf_remove_header>
 8006d36:	4603      	mov	r3, r0
 8006d38:	e007      	b.n	8006d4a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8006d3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d3e:	787a      	ldrb	r2, [r7, #1]
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff ff1a 	bl	8006b7c <pbuf_add_header_impl>
 8006d48:	4603      	mov	r3, r0
  }
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8006d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d62:	2201      	movs	r2, #1
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff ffd2 	bl	8006d10 <pbuf_header_impl>
 8006d6c:	4603      	mov	r3, r0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10b      	bne.n	8006d9e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d106      	bne.n	8006d9a <pbuf_free+0x22>
 8006d8c:	4b38      	ldr	r3, [pc, #224]	; (8006e70 <pbuf_free+0xf8>)
 8006d8e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006d92:	4938      	ldr	r1, [pc, #224]	; (8006e74 <pbuf_free+0xfc>)
 8006d94:	4838      	ldr	r0, [pc, #224]	; (8006e78 <pbuf_free+0x100>)
 8006d96:	f008 faa3 	bl	800f2e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e063      	b.n	8006e66 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006da2:	e05c      	b.n	8006e5e <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	7b9b      	ldrb	r3, [r3, #14]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <pbuf_free+0x42>
 8006dac:	4b30      	ldr	r3, [pc, #192]	; (8006e70 <pbuf_free+0xf8>)
 8006dae:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006db2:	4932      	ldr	r1, [pc, #200]	; (8006e7c <pbuf_free+0x104>)
 8006db4:	4830      	ldr	r0, [pc, #192]	; (8006e78 <pbuf_free+0x100>)
 8006db6:	f008 fa93 	bl	800f2e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	7b9b      	ldrb	r3, [r3, #14]
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	739a      	strb	r2, [r3, #14]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	7b9b      	ldrb	r3, [r3, #14]
 8006dca:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006dcc:	7dbb      	ldrb	r3, [r7, #22]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d143      	bne.n	8006e5a <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7b1b      	ldrb	r3, [r3, #12]
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	7b5b      	ldrb	r3, [r3, #13]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d011      	beq.n	8006e12 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d106      	bne.n	8006e08 <pbuf_free+0x90>
 8006dfa:	4b1d      	ldr	r3, [pc, #116]	; (8006e70 <pbuf_free+0xf8>)
 8006dfc:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006e00:	491f      	ldr	r1, [pc, #124]	; (8006e80 <pbuf_free+0x108>)
 8006e02:	481d      	ldr	r0, [pc, #116]	; (8006e78 <pbuf_free+0x100>)
 8006e04:	f008 fa6c 	bl	800f2e0 <iprintf>
        pc->custom_free_function(p);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	691b      	ldr	r3, [r3, #16]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	4798      	blx	r3
 8006e10:	e01d      	b.n	8006e4e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8006e12:	7bfb      	ldrb	r3, [r7, #15]
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d104      	bne.n	8006e22 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	2008      	movs	r0, #8
 8006e1c:	f7ff f936 	bl	800608c <memp_free>
 8006e20:	e015      	b.n	8006e4e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d104      	bne.n	8006e32 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8006e28:	6879      	ldr	r1, [r7, #4]
 8006e2a:	2007      	movs	r0, #7
 8006e2c:	f7ff f92e 	bl	800608c <memp_free>
 8006e30:	e00d      	b.n	8006e4e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d103      	bne.n	8006e40 <pbuf_free+0xc8>
          mem_free(p);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fe fdc1 	bl	80059c0 <mem_free>
 8006e3e:	e006      	b.n	8006e4e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8006e40:	4b0b      	ldr	r3, [pc, #44]	; (8006e70 <pbuf_free+0xf8>)
 8006e42:	f240 320f 	movw	r2, #783	; 0x30f
 8006e46:	490f      	ldr	r1, [pc, #60]	; (8006e84 <pbuf_free+0x10c>)
 8006e48:	480b      	ldr	r0, [pc, #44]	; (8006e78 <pbuf_free+0x100>)
 8006e4a:	f008 fa49 	bl	800f2e0 <iprintf>
        }
      }
      count++;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
 8006e50:	3301      	adds	r3, #1
 8006e52:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	607b      	str	r3, [r7, #4]
 8006e58:	e001      	b.n	8006e5e <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d19f      	bne.n	8006da4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	080106e8 	.word	0x080106e8
 8006e74:	0801084c 	.word	0x0801084c
 8006e78:	08010748 	.word	0x08010748
 8006e7c:	08010878 	.word	0x08010878
 8006e80:	08010890 	.word	0x08010890
 8006e84:	080108b4 	.word	0x080108b4

08006e88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006e90:	2300      	movs	r3, #0
 8006e92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006e94:	e005      	b.n	8006ea2 <pbuf_clen+0x1a>
    ++len;
 8006e96:	89fb      	ldrh	r3, [r7, #14]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1f6      	bne.n	8006e96 <pbuf_clen+0xe>
  }
  return len;
 8006ea8:	89fb      	ldrh	r3, [r7, #14]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3714      	adds	r7, #20
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
	...

08006eb8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d010      	beq.n	8006ee8 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	7b9b      	ldrb	r3, [r3, #14]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7b9b      	ldrb	r3, [r3, #14]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <pbuf_ref+0x30>
 8006eda:	4b05      	ldr	r3, [pc, #20]	; (8006ef0 <pbuf_ref+0x38>)
 8006edc:	f240 3242 	movw	r2, #834	; 0x342
 8006ee0:	4904      	ldr	r1, [pc, #16]	; (8006ef4 <pbuf_ref+0x3c>)
 8006ee2:	4805      	ldr	r0, [pc, #20]	; (8006ef8 <pbuf_ref+0x40>)
 8006ee4:	f008 f9fc 	bl	800f2e0 <iprintf>
  }
}
 8006ee8:	bf00      	nop
 8006eea:	3708      	adds	r7, #8
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	080106e8 	.word	0x080106e8
 8006ef4:	080108c8 	.word	0x080108c8
 8006ef8:	08010748 	.word	0x08010748

08006efc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <pbuf_cat+0x16>
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d107      	bne.n	8006f22 <pbuf_cat+0x26>
 8006f12:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <pbuf_cat+0x98>)
 8006f14:	f240 3259 	movw	r2, #857	; 0x359
 8006f18:	491f      	ldr	r1, [pc, #124]	; (8006f98 <pbuf_cat+0x9c>)
 8006f1a:	4820      	ldr	r0, [pc, #128]	; (8006f9c <pbuf_cat+0xa0>)
 8006f1c:	f008 f9e0 	bl	800f2e0 <iprintf>
 8006f20:	e034      	b.n	8006f8c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	e00a      	b.n	8006f3e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	891a      	ldrh	r2, [r3, #8]
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	891b      	ldrh	r3, [r3, #8]
 8006f30:	4413      	add	r3, r2
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1f0      	bne.n	8006f28 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	891a      	ldrh	r2, [r3, #8]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	895b      	ldrh	r3, [r3, #10]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d006      	beq.n	8006f60 <pbuf_cat+0x64>
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <pbuf_cat+0x98>)
 8006f54:	f240 3262 	movw	r2, #866	; 0x362
 8006f58:	4911      	ldr	r1, [pc, #68]	; (8006fa0 <pbuf_cat+0xa4>)
 8006f5a:	4810      	ldr	r0, [pc, #64]	; (8006f9c <pbuf_cat+0xa0>)
 8006f5c:	f008 f9c0 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d006      	beq.n	8006f76 <pbuf_cat+0x7a>
 8006f68:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <pbuf_cat+0x98>)
 8006f6a:	f240 3263 	movw	r2, #867	; 0x363
 8006f6e:	490d      	ldr	r1, [pc, #52]	; (8006fa4 <pbuf_cat+0xa8>)
 8006f70:	480a      	ldr	r0, [pc, #40]	; (8006f9c <pbuf_cat+0xa0>)
 8006f72:	f008 f9b5 	bl	800f2e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	891a      	ldrh	r2, [r3, #8]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	891b      	ldrh	r3, [r3, #8]
 8006f7e:	4413      	add	r3, r2
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	080106e8 	.word	0x080106e8
 8006f98:	080108dc 	.word	0x080108dc
 8006f9c:	08010748 	.word	0x08010748
 8006fa0:	08010914 	.word	0x08010914
 8006fa4:	08010944 	.word	0x08010944

08006fa8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b086      	sub	sp, #24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	617b      	str	r3, [r7, #20]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d008      	beq.n	8006fd2 <pbuf_copy+0x2a>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d005      	beq.n	8006fd2 <pbuf_copy+0x2a>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	891a      	ldrh	r2, [r3, #8]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	891b      	ldrh	r3, [r3, #8]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d209      	bcs.n	8006fe6 <pbuf_copy+0x3e>
 8006fd2:	4b57      	ldr	r3, [pc, #348]	; (8007130 <pbuf_copy+0x188>)
 8006fd4:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006fd8:	4956      	ldr	r1, [pc, #344]	; (8007134 <pbuf_copy+0x18c>)
 8006fda:	4857      	ldr	r0, [pc, #348]	; (8007138 <pbuf_copy+0x190>)
 8006fdc:	f008 f980 	bl	800f2e0 <iprintf>
 8006fe0:	f06f 030f 	mvn.w	r3, #15
 8006fe4:	e09f      	b.n	8007126 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	895b      	ldrh	r3, [r3, #10]
 8006fea:	461a      	mov	r2, r3
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	1ad2      	subs	r2, r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	895b      	ldrh	r3, [r3, #10]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	1acb      	subs	r3, r1, r3
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d306      	bcc.n	800700c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	461a      	mov	r2, r3
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	e005      	b.n	8007018 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	895b      	ldrh	r3, [r3, #10]
 8007010:	461a      	mov	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	18d0      	adds	r0, r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	685a      	ldr	r2, [r3, #4]
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4619      	mov	r1, r3
 800702c:	f008 fa33 	bl	800f496 <memcpy>
    offset_to += len;
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	4413      	add	r3, r2
 8007036:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	4413      	add	r3, r2
 800703e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	895b      	ldrh	r3, [r3, #10]
 8007044:	461a      	mov	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4293      	cmp	r3, r2
 800704a:	d906      	bls.n	800705a <pbuf_copy+0xb2>
 800704c:	4b38      	ldr	r3, [pc, #224]	; (8007130 <pbuf_copy+0x188>)
 800704e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8007052:	493a      	ldr	r1, [pc, #232]	; (800713c <pbuf_copy+0x194>)
 8007054:	4838      	ldr	r0, [pc, #224]	; (8007138 <pbuf_copy+0x190>)
 8007056:	f008 f943 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	895b      	ldrh	r3, [r3, #10]
 800705e:	461a      	mov	r2, r3
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	4293      	cmp	r3, r2
 8007064:	d906      	bls.n	8007074 <pbuf_copy+0xcc>
 8007066:	4b32      	ldr	r3, [pc, #200]	; (8007130 <pbuf_copy+0x188>)
 8007068:	f240 32da 	movw	r2, #986	; 0x3da
 800706c:	4934      	ldr	r1, [pc, #208]	; (8007140 <pbuf_copy+0x198>)
 800706e:	4832      	ldr	r0, [pc, #200]	; (8007138 <pbuf_copy+0x190>)
 8007070:	f008 f936 	bl	800f2e0 <iprintf>
    if (offset_from >= p_from->len) {
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	895b      	ldrh	r3, [r3, #10]
 8007078:	461a      	mov	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	4293      	cmp	r3, r2
 800707e:	d304      	bcc.n	800708a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8007080:	2300      	movs	r3, #0
 8007082:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	895b      	ldrh	r3, [r3, #10]
 800708e:	461a      	mov	r2, r3
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	4293      	cmp	r3, r2
 8007094:	d114      	bne.n	80070c0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10c      	bne.n	80070c0 <pbuf_copy+0x118>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d009      	beq.n	80070c0 <pbuf_copy+0x118>
 80070ac:	4b20      	ldr	r3, [pc, #128]	; (8007130 <pbuf_copy+0x188>)
 80070ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80070b2:	4924      	ldr	r1, [pc, #144]	; (8007144 <pbuf_copy+0x19c>)
 80070b4:	4820      	ldr	r0, [pc, #128]	; (8007138 <pbuf_copy+0x190>)
 80070b6:	f008 f913 	bl	800f2e0 <iprintf>
 80070ba:	f06f 030f 	mvn.w	r3, #15
 80070be:	e032      	b.n	8007126 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d013      	beq.n	80070ee <pbuf_copy+0x146>
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	895a      	ldrh	r2, [r3, #10]
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	891b      	ldrh	r3, [r3, #8]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d10d      	bne.n	80070ee <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d009      	beq.n	80070ee <pbuf_copy+0x146>
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <pbuf_copy+0x188>)
 80070dc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80070e0:	4919      	ldr	r1, [pc, #100]	; (8007148 <pbuf_copy+0x1a0>)
 80070e2:	4815      	ldr	r0, [pc, #84]	; (8007138 <pbuf_copy+0x190>)
 80070e4:	f008 f8fc 	bl	800f2e0 <iprintf>
 80070e8:	f06f 0305 	mvn.w	r3, #5
 80070ec:	e01b      	b.n	8007126 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d013      	beq.n	800711c <pbuf_copy+0x174>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	895a      	ldrh	r2, [r3, #10]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	891b      	ldrh	r3, [r3, #8]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d10d      	bne.n	800711c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d009      	beq.n	800711c <pbuf_copy+0x174>
 8007108:	4b09      	ldr	r3, [pc, #36]	; (8007130 <pbuf_copy+0x188>)
 800710a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800710e:	490e      	ldr	r1, [pc, #56]	; (8007148 <pbuf_copy+0x1a0>)
 8007110:	4809      	ldr	r0, [pc, #36]	; (8007138 <pbuf_copy+0x190>)
 8007112:	f008 f8e5 	bl	800f2e0 <iprintf>
 8007116:	f06f 0305 	mvn.w	r3, #5
 800711a:	e004      	b.n	8007126 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	f47f af61 	bne.w	8006fe6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	080106e8 	.word	0x080106e8
 8007134:	08010990 	.word	0x08010990
 8007138:	08010748 	.word	0x08010748
 800713c:	080109c0 	.word	0x080109c0
 8007140:	080109d8 	.word	0x080109d8
 8007144:	080109f4 	.word	0x080109f4
 8007148:	08010a04 	.word	0x08010a04

0800714c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b088      	sub	sp, #32
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4611      	mov	r1, r2
 8007158:	461a      	mov	r2, r3
 800715a:	460b      	mov	r3, r1
 800715c:	80fb      	strh	r3, [r7, #6]
 800715e:	4613      	mov	r3, r2
 8007160:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8007166:	2300      	movs	r3, #0
 8007168:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d108      	bne.n	8007182 <pbuf_copy_partial+0x36>
 8007170:	4b2b      	ldr	r3, [pc, #172]	; (8007220 <pbuf_copy_partial+0xd4>)
 8007172:	f240 420a 	movw	r2, #1034	; 0x40a
 8007176:	492b      	ldr	r1, [pc, #172]	; (8007224 <pbuf_copy_partial+0xd8>)
 8007178:	482b      	ldr	r0, [pc, #172]	; (8007228 <pbuf_copy_partial+0xdc>)
 800717a:	f008 f8b1 	bl	800f2e0 <iprintf>
 800717e:	2300      	movs	r3, #0
 8007180:	e04a      	b.n	8007218 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d108      	bne.n	800719a <pbuf_copy_partial+0x4e>
 8007188:	4b25      	ldr	r3, [pc, #148]	; (8007220 <pbuf_copy_partial+0xd4>)
 800718a:	f240 420b 	movw	r2, #1035	; 0x40b
 800718e:	4927      	ldr	r1, [pc, #156]	; (800722c <pbuf_copy_partial+0xe0>)
 8007190:	4825      	ldr	r0, [pc, #148]	; (8007228 <pbuf_copy_partial+0xdc>)
 8007192:	f008 f8a5 	bl	800f2e0 <iprintf>
 8007196:	2300      	movs	r3, #0
 8007198:	e03e      	b.n	8007218 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	61fb      	str	r3, [r7, #28]
 800719e:	e034      	b.n	800720a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80071a0:	88bb      	ldrh	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00a      	beq.n	80071bc <pbuf_copy_partial+0x70>
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	895b      	ldrh	r3, [r3, #10]
 80071aa:	88ba      	ldrh	r2, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d305      	bcc.n	80071bc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	895b      	ldrh	r3, [r3, #10]
 80071b4:	88ba      	ldrh	r2, [r7, #4]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	80bb      	strh	r3, [r7, #4]
 80071ba:	e023      	b.n	8007204 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	895a      	ldrh	r2, [r3, #10]
 80071c0:	88bb      	ldrh	r3, [r7, #4]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80071c6:	8b3a      	ldrh	r2, [r7, #24]
 80071c8:	88fb      	ldrh	r3, [r7, #6]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d901      	bls.n	80071d2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80071d2:	8b7b      	ldrh	r3, [r7, #26]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	18d0      	adds	r0, r2, r3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	685a      	ldr	r2, [r3, #4]
 80071dc:	88bb      	ldrh	r3, [r7, #4]
 80071de:	4413      	add	r3, r2
 80071e0:	8b3a      	ldrh	r2, [r7, #24]
 80071e2:	4619      	mov	r1, r3
 80071e4:	f008 f957 	bl	800f496 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80071e8:	8afa      	ldrh	r2, [r7, #22]
 80071ea:	8b3b      	ldrh	r3, [r7, #24]
 80071ec:	4413      	add	r3, r2
 80071ee:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80071f0:	8b7a      	ldrh	r2, [r7, #26]
 80071f2:	8b3b      	ldrh	r3, [r7, #24]
 80071f4:	4413      	add	r3, r2
 80071f6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80071f8:	88fa      	ldrh	r2, [r7, #6]
 80071fa:	8b3b      	ldrh	r3, [r7, #24]
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8007200:	2300      	movs	r3, #0
 8007202:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	61fb      	str	r3, [r7, #28]
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d002      	beq.n	8007216 <pbuf_copy_partial+0xca>
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1c4      	bne.n	80071a0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8007216:	8afb      	ldrh	r3, [r7, #22]
}
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	080106e8 	.word	0x080106e8
 8007224:	08010a30 	.word	0x08010a30
 8007228:	08010748 	.word	0x08010748
 800722c:	08010a50 	.word	0x08010a50

08007230 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	4603      	mov	r3, r0
 8007238:	603a      	str	r2, [r7, #0]
 800723a:	71fb      	strb	r3, [r7, #7]
 800723c:	460b      	mov	r3, r1
 800723e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	8919      	ldrh	r1, [r3, #8]
 8007244:	88ba      	ldrh	r2, [r7, #4]
 8007246:	79fb      	ldrb	r3, [r7, #7]
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fab1 	bl	80067b0 <pbuf_alloc>
 800724e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <pbuf_clone+0x2a>
    return NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	e011      	b.n	800727e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	68f8      	ldr	r0, [r7, #12]
 800725e:	f7ff fea3 	bl	8006fa8 <pbuf_copy>
 8007262:	4603      	mov	r3, r0
 8007264:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8007266:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d006      	beq.n	800727c <pbuf_clone+0x4c>
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <pbuf_clone+0x58>)
 8007270:	f240 5224 	movw	r2, #1316	; 0x524
 8007274:	4905      	ldr	r1, [pc, #20]	; (800728c <pbuf_clone+0x5c>)
 8007276:	4806      	ldr	r0, [pc, #24]	; (8007290 <pbuf_clone+0x60>)
 8007278:	f008 f832 	bl	800f2e0 <iprintf>
  return q;
 800727c:	68fb      	ldr	r3, [r7, #12]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	080106e8 	.word	0x080106e8
 800728c:	08010b5c 	.word	0x08010b5c
 8007290:	08010748 	.word	0x08010748

08007294 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8007298:	f007 ff22 	bl	800f0e0 <rand>
 800729c:	4603      	mov	r3, r0
 800729e:	b29b      	uxth	r3, r3
 80072a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	4b01      	ldr	r3, [pc, #4]	; (80072b4 <tcp_init+0x20>)
 80072ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80072b0:	bf00      	nop
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20000020 	.word	0x20000020

080072b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d105      	bne.n	80072d4 <tcp_free+0x1c>
 80072c8:	4b06      	ldr	r3, [pc, #24]	; (80072e4 <tcp_free+0x2c>)
 80072ca:	22d4      	movs	r2, #212	; 0xd4
 80072cc:	4906      	ldr	r1, [pc, #24]	; (80072e8 <tcp_free+0x30>)
 80072ce:	4807      	ldr	r0, [pc, #28]	; (80072ec <tcp_free+0x34>)
 80072d0:	f008 f806 	bl	800f2e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	2001      	movs	r0, #1
 80072d8:	f7fe fed8 	bl	800608c <memp_free>
}
 80072dc:	bf00      	nop
 80072de:	3708      	adds	r7, #8
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	08010be8 	.word	0x08010be8
 80072e8:	08010c18 	.word	0x08010c18
 80072ec:	08010c2c 	.word	0x08010c2c

080072f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b082      	sub	sp, #8
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7d1b      	ldrb	r3, [r3, #20]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d105      	bne.n	800730c <tcp_free_listen+0x1c>
 8007300:	4b06      	ldr	r3, [pc, #24]	; (800731c <tcp_free_listen+0x2c>)
 8007302:	22df      	movs	r2, #223	; 0xdf
 8007304:	4906      	ldr	r1, [pc, #24]	; (8007320 <tcp_free_listen+0x30>)
 8007306:	4807      	ldr	r0, [pc, #28]	; (8007324 <tcp_free_listen+0x34>)
 8007308:	f007 ffea 	bl	800f2e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800730c:	6879      	ldr	r1, [r7, #4]
 800730e:	2002      	movs	r0, #2
 8007310:	f7fe febc 	bl	800608c <memp_free>
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	08010be8 	.word	0x08010be8
 8007320:	08010c54 	.word	0x08010c54
 8007324:	08010c2c 	.word	0x08010c2c

08007328 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800732c:	f000 fea2 	bl	8008074 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8007330:	4b07      	ldr	r3, [pc, #28]	; (8007350 <tcp_tmr+0x28>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	b2da      	uxtb	r2, r3
 8007338:	4b05      	ldr	r3, [pc, #20]	; (8007350 <tcp_tmr+0x28>)
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <tcp_tmr+0x28>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8007348:	f000 fb54 	bl	80079f4 <tcp_slowtmr>
  }
}
 800734c:	bf00      	nop
 800734e:	bd80      	pop	{r7, pc}
 8007350:	200087e5 	.word	0x200087e5

08007354 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <tcp_remove_listener+0x1c>
 8007364:	4b0d      	ldr	r3, [pc, #52]	; (800739c <tcp_remove_listener+0x48>)
 8007366:	22ff      	movs	r2, #255	; 0xff
 8007368:	490d      	ldr	r1, [pc, #52]	; (80073a0 <tcp_remove_listener+0x4c>)
 800736a:	480e      	ldr	r0, [pc, #56]	; (80073a4 <tcp_remove_listener+0x50>)
 800736c:	f007 ffb8 	bl	800f2e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	60fb      	str	r3, [r7, #12]
 8007374:	e00a      	b.n	800738c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	429a      	cmp	r2, r3
 800737e:	d102      	bne.n	8007386 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2200      	movs	r2, #0
 8007384:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d1f1      	bne.n	8007376 <tcp_remove_listener+0x22>
    }
  }
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	08010be8 	.word	0x08010be8
 80073a0:	08010c70 	.word	0x08010c70
 80073a4:	08010c2c 	.word	0x08010c2c

080073a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d106      	bne.n	80073c4 <tcp_listen_closed+0x1c>
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <tcp_listen_closed+0x60>)
 80073b8:	f240 1211 	movw	r2, #273	; 0x111
 80073bc:	4913      	ldr	r1, [pc, #76]	; (800740c <tcp_listen_closed+0x64>)
 80073be:	4814      	ldr	r0, [pc, #80]	; (8007410 <tcp_listen_closed+0x68>)
 80073c0:	f007 ff8e 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	7d1b      	ldrb	r3, [r3, #20]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d006      	beq.n	80073da <tcp_listen_closed+0x32>
 80073cc:	4b0e      	ldr	r3, [pc, #56]	; (8007408 <tcp_listen_closed+0x60>)
 80073ce:	f44f 7289 	mov.w	r2, #274	; 0x112
 80073d2:	4910      	ldr	r1, [pc, #64]	; (8007414 <tcp_listen_closed+0x6c>)
 80073d4:	480e      	ldr	r0, [pc, #56]	; (8007410 <tcp_listen_closed+0x68>)
 80073d6:	f007 ff83 	bl	800f2e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80073da:	2301      	movs	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
 80073de:	e00b      	b.n	80073f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80073e0:	4a0d      	ldr	r2, [pc, #52]	; (8007418 <tcp_listen_closed+0x70>)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff ffb1 	bl	8007354 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2b03      	cmp	r3, #3
 80073fc:	d9f0      	bls.n	80073e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	08010be8 	.word	0x08010be8
 800740c:	08010c98 	.word	0x08010c98
 8007410:	08010c2c 	.word	0x08010c2c
 8007414:	08010ca4 	.word	0x08010ca4
 8007418:	08012bc8 	.word	0x08012bc8

0800741c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800741c:	b5b0      	push	{r4, r5, r7, lr}
 800741e:	b088      	sub	sp, #32
 8007420:	af04      	add	r7, sp, #16
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <tcp_close_shutdown+0x20>
 800742e:	4b63      	ldr	r3, [pc, #396]	; (80075bc <tcp_close_shutdown+0x1a0>)
 8007430:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8007434:	4962      	ldr	r1, [pc, #392]	; (80075c0 <tcp_close_shutdown+0x1a4>)
 8007436:	4863      	ldr	r0, [pc, #396]	; (80075c4 <tcp_close_shutdown+0x1a8>)
 8007438:	f007 ff52 	bl	800f2e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800743c:	78fb      	ldrb	r3, [r7, #3]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d066      	beq.n	8007510 <tcp_close_shutdown+0xf4>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	7d1b      	ldrb	r3, [r3, #20]
 8007446:	2b04      	cmp	r3, #4
 8007448:	d003      	beq.n	8007452 <tcp_close_shutdown+0x36>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7d1b      	ldrb	r3, [r3, #20]
 800744e:	2b07      	cmp	r3, #7
 8007450:	d15e      	bne.n	8007510 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007456:	2b00      	cmp	r3, #0
 8007458:	d104      	bne.n	8007464 <tcp_close_shutdown+0x48>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800745e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007462:	d055      	beq.n	8007510 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8b5b      	ldrh	r3, [r3, #26]
 8007468:	f003 0310 	and.w	r3, r3, #16
 800746c:	2b00      	cmp	r3, #0
 800746e:	d106      	bne.n	800747e <tcp_close_shutdown+0x62>
 8007470:	4b52      	ldr	r3, [pc, #328]	; (80075bc <tcp_close_shutdown+0x1a0>)
 8007472:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8007476:	4954      	ldr	r1, [pc, #336]	; (80075c8 <tcp_close_shutdown+0x1ac>)
 8007478:	4852      	ldr	r0, [pc, #328]	; (80075c4 <tcp_close_shutdown+0x1a8>)
 800747a:	f007 ff31 	bl	800f2e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007486:	687d      	ldr	r5, [r7, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	3304      	adds	r3, #4
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	8ad2      	ldrh	r2, [r2, #22]
 8007490:	6879      	ldr	r1, [r7, #4]
 8007492:	8b09      	ldrh	r1, [r1, #24]
 8007494:	9102      	str	r1, [sp, #8]
 8007496:	9201      	str	r2, [sp, #4]
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	462b      	mov	r3, r5
 800749c:	4622      	mov	r2, r4
 800749e:	4601      	mov	r1, r0
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f004 fe91 	bl	800c1c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 f8c6 	bl	8008638 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80074ac:	4b47      	ldr	r3, [pc, #284]	; (80075cc <tcp_close_shutdown+0x1b0>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d105      	bne.n	80074c2 <tcp_close_shutdown+0xa6>
 80074b6:	4b45      	ldr	r3, [pc, #276]	; (80075cc <tcp_close_shutdown+0x1b0>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4a43      	ldr	r2, [pc, #268]	; (80075cc <tcp_close_shutdown+0x1b0>)
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	e013      	b.n	80074ea <tcp_close_shutdown+0xce>
 80074c2:	4b42      	ldr	r3, [pc, #264]	; (80075cc <tcp_close_shutdown+0x1b0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e00c      	b.n	80074e4 <tcp_close_shutdown+0xc8>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	429a      	cmp	r2, r3
 80074d2:	d104      	bne.n	80074de <tcp_close_shutdown+0xc2>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	68da      	ldr	r2, [r3, #12]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	60da      	str	r2, [r3, #12]
 80074dc:	e005      	b.n	80074ea <tcp_close_shutdown+0xce>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1ef      	bne.n	80074ca <tcp_close_shutdown+0xae>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	4b37      	ldr	r3, [pc, #220]	; (80075d0 <tcp_close_shutdown+0x1b4>)
 80074f2:	2201      	movs	r2, #1
 80074f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80074f6:	4b37      	ldr	r3, [pc, #220]	; (80075d4 <tcp_close_shutdown+0x1b8>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d102      	bne.n	8007506 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8007500:	f003 fd5e 	bl	800afc0 <tcp_trigger_input_pcb_close>
 8007504:	e002      	b.n	800750c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fed6 	bl	80072b8 <tcp_free>
      }
      return ERR_OK;
 800750c:	2300      	movs	r3, #0
 800750e:	e050      	b.n	80075b2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7d1b      	ldrb	r3, [r3, #20]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d03b      	beq.n	8007590 <tcp_close_shutdown+0x174>
 8007518:	2b02      	cmp	r3, #2
 800751a:	dc44      	bgt.n	80075a6 <tcp_close_shutdown+0x18a>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <tcp_close_shutdown+0x10a>
 8007520:	2b01      	cmp	r3, #1
 8007522:	d02a      	beq.n	800757a <tcp_close_shutdown+0x15e>
 8007524:	e03f      	b.n	80075a6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	8adb      	ldrh	r3, [r3, #22]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d021      	beq.n	8007572 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800752e:	4b2a      	ldr	r3, [pc, #168]	; (80075d8 <tcp_close_shutdown+0x1bc>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	429a      	cmp	r2, r3
 8007536:	d105      	bne.n	8007544 <tcp_close_shutdown+0x128>
 8007538:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <tcp_close_shutdown+0x1bc>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	4a26      	ldr	r2, [pc, #152]	; (80075d8 <tcp_close_shutdown+0x1bc>)
 8007540:	6013      	str	r3, [r2, #0]
 8007542:	e013      	b.n	800756c <tcp_close_shutdown+0x150>
 8007544:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <tcp_close_shutdown+0x1bc>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	60bb      	str	r3, [r7, #8]
 800754a:	e00c      	b.n	8007566 <tcp_close_shutdown+0x14a>
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	429a      	cmp	r2, r3
 8007554:	d104      	bne.n	8007560 <tcp_close_shutdown+0x144>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	60da      	str	r2, [r3, #12]
 800755e:	e005      	b.n	800756c <tcp_close_shutdown+0x150>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	60bb      	str	r3, [r7, #8]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1ef      	bne.n	800754c <tcp_close_shutdown+0x130>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fea0 	bl	80072b8 <tcp_free>
      break;
 8007578:	e01a      	b.n	80075b0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff ff14 	bl	80073a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007580:	6879      	ldr	r1, [r7, #4]
 8007582:	4816      	ldr	r0, [pc, #88]	; (80075dc <tcp_close_shutdown+0x1c0>)
 8007584:	f001 f8a8 	bl	80086d8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f7ff feb1 	bl	80072f0 <tcp_free_listen>
      break;
 800758e:	e00f      	b.n	80075b0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007590:	6879      	ldr	r1, [r7, #4]
 8007592:	480e      	ldr	r0, [pc, #56]	; (80075cc <tcp_close_shutdown+0x1b0>)
 8007594:	f001 f8a0 	bl	80086d8 <tcp_pcb_remove>
 8007598:	4b0d      	ldr	r3, [pc, #52]	; (80075d0 <tcp_close_shutdown+0x1b4>)
 800759a:	2201      	movs	r2, #1
 800759c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7ff fe8a 	bl	80072b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80075a4:	e004      	b.n	80075b0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f81a 	bl	80075e0 <tcp_close_shutdown_fin>
 80075ac:	4603      	mov	r3, r0
 80075ae:	e000      	b.n	80075b2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bdb0      	pop	{r4, r5, r7, pc}
 80075ba:	bf00      	nop
 80075bc:	08010be8 	.word	0x08010be8
 80075c0:	08010cbc 	.word	0x08010cbc
 80075c4:	08010c2c 	.word	0x08010c2c
 80075c8:	08010cdc 	.word	0x08010cdc
 80075cc:	200087dc 	.word	0x200087dc
 80075d0:	200087e4 	.word	0x200087e4
 80075d4:	2000881c 	.word	0x2000881c
 80075d8:	200087d4 	.word	0x200087d4
 80075dc:	200087d8 	.word	0x200087d8

080075e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d106      	bne.n	80075fc <tcp_close_shutdown_fin+0x1c>
 80075ee:	4b2e      	ldr	r3, [pc, #184]	; (80076a8 <tcp_close_shutdown_fin+0xc8>)
 80075f0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80075f4:	492d      	ldr	r1, [pc, #180]	; (80076ac <tcp_close_shutdown_fin+0xcc>)
 80075f6:	482e      	ldr	r0, [pc, #184]	; (80076b0 <tcp_close_shutdown_fin+0xd0>)
 80075f8:	f007 fe72 	bl	800f2e0 <iprintf>

  switch (pcb->state) {
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	7d1b      	ldrb	r3, [r3, #20]
 8007600:	2b07      	cmp	r3, #7
 8007602:	d020      	beq.n	8007646 <tcp_close_shutdown_fin+0x66>
 8007604:	2b07      	cmp	r3, #7
 8007606:	dc2b      	bgt.n	8007660 <tcp_close_shutdown_fin+0x80>
 8007608:	2b03      	cmp	r3, #3
 800760a:	d002      	beq.n	8007612 <tcp_close_shutdown_fin+0x32>
 800760c:	2b04      	cmp	r3, #4
 800760e:	d00d      	beq.n	800762c <tcp_close_shutdown_fin+0x4c>
 8007610:	e026      	b.n	8007660 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f003 fee6 	bl	800b3e4 <tcp_send_fin>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800761c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d11f      	bne.n	8007664 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2205      	movs	r2, #5
 8007628:	751a      	strb	r2, [r3, #20]
      }
      break;
 800762a:	e01b      	b.n	8007664 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f003 fed9 	bl	800b3e4 <tcp_send_fin>
 8007632:	4603      	mov	r3, r0
 8007634:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d114      	bne.n	8007668 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2205      	movs	r2, #5
 8007642:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007644:	e010      	b.n	8007668 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8007646:	6878      	ldr	r0, [r7, #4]
 8007648:	f003 fecc 	bl	800b3e4 <tcp_send_fin>
 800764c:	4603      	mov	r3, r0
 800764e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007650:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d109      	bne.n	800766c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2209      	movs	r2, #9
 800765c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800765e:	e005      	b.n	800766c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	e01c      	b.n	800769e <tcp_close_shutdown_fin+0xbe>
      break;
 8007664:	bf00      	nop
 8007666:	e002      	b.n	800766e <tcp_close_shutdown_fin+0x8e>
      break;
 8007668:	bf00      	nop
 800766a:	e000      	b.n	800766e <tcp_close_shutdown_fin+0x8e>
      break;
 800766c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800766e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d103      	bne.n	800767e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f003 fff2 	bl	800b660 <tcp_output>
 800767c:	e00d      	b.n	800769a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800767e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007686:	d108      	bne.n	800769a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	8b5b      	ldrh	r3, [r3, #26]
 800768c:	f043 0308 	orr.w	r3, r3, #8
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8007696:	2300      	movs	r3, #0
 8007698:	e001      	b.n	800769e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800769a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	08010be8 	.word	0x08010be8
 80076ac:	08010c98 	.word	0x08010c98
 80076b0:	08010c2c 	.word	0x08010c2c

080076b4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <tcp_close+0x22>
 80076c2:	4b0f      	ldr	r3, [pc, #60]	; (8007700 <tcp_close+0x4c>)
 80076c4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80076c8:	490e      	ldr	r1, [pc, #56]	; (8007704 <tcp_close+0x50>)
 80076ca:	480f      	ldr	r0, [pc, #60]	; (8007708 <tcp_close+0x54>)
 80076cc:	f007 fe08 	bl	800f2e0 <iprintf>
 80076d0:	f06f 030f 	mvn.w	r3, #15
 80076d4:	e00f      	b.n	80076f6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	7d1b      	ldrb	r3, [r3, #20]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d006      	beq.n	80076ec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	8b5b      	ldrh	r3, [r3, #26]
 80076e2:	f043 0310 	orr.w	r3, r3, #16
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80076ec:	2101      	movs	r1, #1
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fe94 	bl	800741c <tcp_close_shutdown>
 80076f4:	4603      	mov	r3, r0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	08010be8 	.word	0x08010be8
 8007704:	08010cf8 	.word	0x08010cf8
 8007708:	08010c2c 	.word	0x08010c2c

0800770c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b08e      	sub	sp, #56	; 0x38
 8007710:	af04      	add	r7, sp, #16
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d107      	bne.n	800772c <tcp_abandon+0x20>
 800771c:	4b52      	ldr	r3, [pc, #328]	; (8007868 <tcp_abandon+0x15c>)
 800771e:	f240 223d 	movw	r2, #573	; 0x23d
 8007722:	4952      	ldr	r1, [pc, #328]	; (800786c <tcp_abandon+0x160>)
 8007724:	4852      	ldr	r0, [pc, #328]	; (8007870 <tcp_abandon+0x164>)
 8007726:	f007 fddb 	bl	800f2e0 <iprintf>
 800772a:	e099      	b.n	8007860 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7d1b      	ldrb	r3, [r3, #20]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d106      	bne.n	8007742 <tcp_abandon+0x36>
 8007734:	4b4c      	ldr	r3, [pc, #304]	; (8007868 <tcp_abandon+0x15c>)
 8007736:	f44f 7210 	mov.w	r2, #576	; 0x240
 800773a:	494e      	ldr	r1, [pc, #312]	; (8007874 <tcp_abandon+0x168>)
 800773c:	484c      	ldr	r0, [pc, #304]	; (8007870 <tcp_abandon+0x164>)
 800773e:	f007 fdcf 	bl	800f2e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7d1b      	ldrb	r3, [r3, #20]
 8007746:	2b0a      	cmp	r3, #10
 8007748:	d107      	bne.n	800775a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800774a:	6879      	ldr	r1, [r7, #4]
 800774c:	484a      	ldr	r0, [pc, #296]	; (8007878 <tcp_abandon+0x16c>)
 800774e:	f000 ffc3 	bl	80086d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f7ff fdb0 	bl	80072b8 <tcp_free>
 8007758:	e082      	b.n	8007860 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800775e:	2300      	movs	r3, #0
 8007760:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007766:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007774:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7d1b      	ldrb	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d126      	bne.n	80077d2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	8adb      	ldrh	r3, [r3, #22]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d02e      	beq.n	80077ea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800778c:	4b3b      	ldr	r3, [pc, #236]	; (800787c <tcp_abandon+0x170>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	429a      	cmp	r2, r3
 8007794:	d105      	bne.n	80077a2 <tcp_abandon+0x96>
 8007796:	4b39      	ldr	r3, [pc, #228]	; (800787c <tcp_abandon+0x170>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68db      	ldr	r3, [r3, #12]
 800779c:	4a37      	ldr	r2, [pc, #220]	; (800787c <tcp_abandon+0x170>)
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	e013      	b.n	80077ca <tcp_abandon+0xbe>
 80077a2:	4b36      	ldr	r3, [pc, #216]	; (800787c <tcp_abandon+0x170>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	61fb      	str	r3, [r7, #28]
 80077a8:	e00c      	b.n	80077c4 <tcp_abandon+0xb8>
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d104      	bne.n	80077be <tcp_abandon+0xb2>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68da      	ldr	r2, [r3, #12]
 80077b8:	69fb      	ldr	r3, [r7, #28]
 80077ba:	60da      	str	r2, [r3, #12]
 80077bc:	e005      	b.n	80077ca <tcp_abandon+0xbe>
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	61fb      	str	r3, [r7, #28]
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1ef      	bne.n	80077aa <tcp_abandon+0x9e>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	60da      	str	r2, [r3, #12]
 80077d0:	e00b      	b.n	80077ea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	8adb      	ldrh	r3, [r3, #22]
 80077da:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4828      	ldr	r0, [pc, #160]	; (8007880 <tcp_abandon+0x174>)
 80077e0:	f000 ff7a 	bl	80086d8 <tcp_pcb_remove>
 80077e4:	4b27      	ldr	r3, [pc, #156]	; (8007884 <tcp_abandon+0x178>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d004      	beq.n	80077fc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f6:	4618      	mov	r0, r3
 80077f8:	f000 fd1c 	bl	8008234 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fd13 	bl	8008234 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007812:	2b00      	cmp	r3, #0
 8007814:	d004      	beq.n	8007820 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fd0a 	bl	8008234 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8007820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007822:	2b00      	cmp	r3, #0
 8007824:	d00e      	beq.n	8007844 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007826:	6879      	ldr	r1, [r7, #4]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	8b12      	ldrh	r2, [r2, #24]
 8007830:	9202      	str	r2, [sp, #8]
 8007832:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007834:	9201      	str	r2, [sp, #4]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	460b      	mov	r3, r1
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	69b9      	ldr	r1, [r7, #24]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f004 fcc2 	bl	800c1c8 <tcp_rst>
    }
    last_state = pcb->state;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	7d1b      	ldrb	r3, [r3, #20]
 8007848:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff fd34 	bl	80072b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d004      	beq.n	8007860 <tcp_abandon+0x154>
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f06f 010c 	mvn.w	r1, #12
 800785c:	68f8      	ldr	r0, [r7, #12]
 800785e:	4798      	blx	r3
  }
}
 8007860:	3728      	adds	r7, #40	; 0x28
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	08010be8 	.word	0x08010be8
 800786c:	08010d2c 	.word	0x08010d2c
 8007870:	08010c2c 	.word	0x08010c2c
 8007874:	08010d48 	.word	0x08010d48
 8007878:	200087e0 	.word	0x200087e0
 800787c:	200087d4 	.word	0x200087d4
 8007880:	200087dc 	.word	0x200087dc
 8007884:	200087e4 	.word	0x200087e4

08007888 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007890:	2101      	movs	r1, #1
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7ff ff3a 	bl	800770c <tcp_abandon>
}
 8007898:	bf00      	nop
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d106      	bne.n	80078bc <tcp_update_rcv_ann_wnd+0x1c>
 80078ae:	4b25      	ldr	r3, [pc, #148]	; (8007944 <tcp_update_rcv_ann_wnd+0xa4>)
 80078b0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80078b4:	4924      	ldr	r1, [pc, #144]	; (8007948 <tcp_update_rcv_ann_wnd+0xa8>)
 80078b6:	4825      	ldr	r0, [pc, #148]	; (800794c <tcp_update_rcv_ann_wnd+0xac>)
 80078b8:	f007 fd12 	bl	800f2e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80078c4:	4413      	add	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80078d0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80078d4:	bf28      	it	cs
 80078d6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80078da:	b292      	uxth	r2, r2
 80078dc:	4413      	add	r3, r2
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	db08      	blt.n	80078f8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	e020      	b.n	800793a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	dd03      	ble.n	800790e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800790c:	e014      	b.n	8007938 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007920:	d306      	bcc.n	8007930 <tcp_update_rcv_ann_wnd+0x90>
 8007922:	4b08      	ldr	r3, [pc, #32]	; (8007944 <tcp_update_rcv_ann_wnd+0xa4>)
 8007924:	f240 32b6 	movw	r2, #950	; 0x3b6
 8007928:	4909      	ldr	r1, [pc, #36]	; (8007950 <tcp_update_rcv_ann_wnd+0xb0>)
 800792a:	4808      	ldr	r0, [pc, #32]	; (800794c <tcp_update_rcv_ann_wnd+0xac>)
 800792c:	f007 fcd8 	bl	800f2e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	b29a      	uxth	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8007938:	2300      	movs	r3, #0
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	08010be8 	.word	0x08010be8
 8007948:	08010e44 	.word	0x08010e44
 800794c:	08010c2c 	.word	0x08010c2c
 8007950:	08010e68 	.word	0x08010e68

08007954 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d107      	bne.n	8007976 <tcp_recved+0x22>
 8007966:	4b1f      	ldr	r3, [pc, #124]	; (80079e4 <tcp_recved+0x90>)
 8007968:	f240 32cf 	movw	r2, #975	; 0x3cf
 800796c:	491e      	ldr	r1, [pc, #120]	; (80079e8 <tcp_recved+0x94>)
 800796e:	481f      	ldr	r0, [pc, #124]	; (80079ec <tcp_recved+0x98>)
 8007970:	f007 fcb6 	bl	800f2e0 <iprintf>
 8007974:	e032      	b.n	80079dc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	7d1b      	ldrb	r3, [r3, #20]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d106      	bne.n	800798c <tcp_recved+0x38>
 800797e:	4b19      	ldr	r3, [pc, #100]	; (80079e4 <tcp_recved+0x90>)
 8007980:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007984:	491a      	ldr	r1, [pc, #104]	; (80079f0 <tcp_recved+0x9c>)
 8007986:	4819      	ldr	r0, [pc, #100]	; (80079ec <tcp_recved+0x98>)
 8007988:	f007 fcaa 	bl	800f2e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007990:	887b      	ldrh	r3, [r7, #2]
 8007992:	4413      	add	r3, r2
 8007994:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007996:	89fb      	ldrh	r3, [r7, #14]
 8007998:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800799c:	d804      	bhi.n	80079a8 <tcp_recved+0x54>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a2:	89fa      	ldrh	r2, [r7, #14]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d204      	bcs.n	80079b2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80079ae:	851a      	strh	r2, [r3, #40]	; 0x28
 80079b0:	e002      	b.n	80079b8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	89fa      	ldrh	r2, [r7, #14]
 80079b6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff71 	bl	80078a0 <tcp_update_rcv_ann_wnd>
 80079be:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80079c6:	d309      	bcc.n	80079dc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	8b5b      	ldrh	r3, [r3, #26]
 80079cc:	f043 0302 	orr.w	r3, r3, #2
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f003 fe42 	bl	800b660 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	08010be8 	.word	0x08010be8
 80079e8:	08010e84 	.word	0x08010e84
 80079ec:	08010c2c 	.word	0x08010c2c
 80079f0:	08010e9c 	.word	0x08010e9c

080079f4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80079f4:	b5b0      	push	{r4, r5, r7, lr}
 80079f6:	b090      	sub	sp, #64	; 0x40
 80079f8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80079fa:	2300      	movs	r3, #0
 80079fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007a00:	4b94      	ldr	r3, [pc, #592]	; (8007c54 <tcp_slowtmr+0x260>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3301      	adds	r3, #1
 8007a06:	4a93      	ldr	r2, [pc, #588]	; (8007c54 <tcp_slowtmr+0x260>)
 8007a08:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007a0a:	4b93      	ldr	r3, [pc, #588]	; (8007c58 <tcp_slowtmr+0x264>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	4b91      	ldr	r3, [pc, #580]	; (8007c58 <tcp_slowtmr+0x264>)
 8007a14:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8007a16:	2300      	movs	r3, #0
 8007a18:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007a1a:	4b90      	ldr	r3, [pc, #576]	; (8007c5c <tcp_slowtmr+0x268>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007a20:	e29d      	b.n	8007f5e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	7d1b      	ldrb	r3, [r3, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d106      	bne.n	8007a38 <tcp_slowtmr+0x44>
 8007a2a:	4b8d      	ldr	r3, [pc, #564]	; (8007c60 <tcp_slowtmr+0x26c>)
 8007a2c:	f240 42be 	movw	r2, #1214	; 0x4be
 8007a30:	498c      	ldr	r1, [pc, #560]	; (8007c64 <tcp_slowtmr+0x270>)
 8007a32:	488d      	ldr	r0, [pc, #564]	; (8007c68 <tcp_slowtmr+0x274>)
 8007a34:	f007 fc54 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	7d1b      	ldrb	r3, [r3, #20]
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d106      	bne.n	8007a4e <tcp_slowtmr+0x5a>
 8007a40:	4b87      	ldr	r3, [pc, #540]	; (8007c60 <tcp_slowtmr+0x26c>)
 8007a42:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8007a46:	4989      	ldr	r1, [pc, #548]	; (8007c6c <tcp_slowtmr+0x278>)
 8007a48:	4887      	ldr	r0, [pc, #540]	; (8007c68 <tcp_slowtmr+0x274>)
 8007a4a:	f007 fc49 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	7d1b      	ldrb	r3, [r3, #20]
 8007a52:	2b0a      	cmp	r3, #10
 8007a54:	d106      	bne.n	8007a64 <tcp_slowtmr+0x70>
 8007a56:	4b82      	ldr	r3, [pc, #520]	; (8007c60 <tcp_slowtmr+0x26c>)
 8007a58:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007a5c:	4984      	ldr	r1, [pc, #528]	; (8007c70 <tcp_slowtmr+0x27c>)
 8007a5e:	4882      	ldr	r0, [pc, #520]	; (8007c68 <tcp_slowtmr+0x274>)
 8007a60:	f007 fc3e 	bl	800f2e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a66:	7f9a      	ldrb	r2, [r3, #30]
 8007a68:	4b7b      	ldr	r3, [pc, #492]	; (8007c58 <tcp_slowtmr+0x264>)
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d105      	bne.n	8007a7c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8007a7a:	e270      	b.n	8007f5e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8007a7c:	4b76      	ldr	r3, [pc, #472]	; (8007c58 <tcp_slowtmr+0x264>)
 8007a7e:	781a      	ldrb	r2, [r3, #0]
 8007a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a82:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	7d1b      	ldrb	r3, [r3, #20]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d10a      	bne.n	8007aae <tcp_slowtmr+0xba>
 8007a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	d905      	bls.n	8007aae <tcp_slowtmr+0xba>
      ++pcb_remove;
 8007aa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007aac:	e11e      	b.n	8007cec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ab4:	2b0b      	cmp	r3, #11
 8007ab6:	d905      	bls.n	8007ac4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8007ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007abc:	3301      	adds	r3, #1
 8007abe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ac2:	e113      	b.n	8007cec <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8007ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d075      	beq.n	8007bba <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d006      	beq.n	8007ae4 <tcp_slowtmr+0xf0>
 8007ad6:	4b62      	ldr	r3, [pc, #392]	; (8007c60 <tcp_slowtmr+0x26c>)
 8007ad8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007adc:	4965      	ldr	r1, [pc, #404]	; (8007c74 <tcp_slowtmr+0x280>)
 8007ade:	4862      	ldr	r0, [pc, #392]	; (8007c68 <tcp_slowtmr+0x274>)
 8007ae0:	f007 fbfe 	bl	800f2e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8007ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <tcp_slowtmr+0x106>
 8007aec:	4b5c      	ldr	r3, [pc, #368]	; (8007c60 <tcp_slowtmr+0x26c>)
 8007aee:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007af2:	4961      	ldr	r1, [pc, #388]	; (8007c78 <tcp_slowtmr+0x284>)
 8007af4:	485c      	ldr	r0, [pc, #368]	; (8007c68 <tcp_slowtmr+0x274>)
 8007af6:	f007 fbf3 	bl	800f2e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007b00:	2b0b      	cmp	r3, #11
 8007b02:	d905      	bls.n	8007b10 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8007b04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b08:	3301      	adds	r3, #1
 8007b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b0e:	e0ed      	b.n	8007cec <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007b16:	3b01      	subs	r3, #1
 8007b18:	4a58      	ldr	r2, [pc, #352]	; (8007c7c <tcp_slowtmr+0x288>)
 8007b1a:	5cd3      	ldrb	r3, [r2, r3]
 8007b1c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b24:	7c7a      	ldrb	r2, [r7, #17]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d907      	bls.n	8007b3a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b30:	3301      	adds	r3, #1
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b36:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b3c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007b40:	7c7a      	ldrb	r2, [r7, #17]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	f200 80d2 	bhi.w	8007cec <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007b48:	2301      	movs	r3, #1
 8007b4a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d108      	bne.n	8007b68 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8007b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b58:	f004 fc2a 	bl	800c3b0 <tcp_zero_window_probe>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d014      	beq.n	8007b8c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8007b62:	2300      	movs	r3, #0
 8007b64:	623b      	str	r3, [r7, #32]
 8007b66:	e011      	b.n	8007b8c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b72:	f003 faef 	bl	800b154 <tcp_split_unsent_seg>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d107      	bne.n	8007b8c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8007b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b7e:	f003 fd6f 	bl	800b660 <tcp_output>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 80ac 	beq.w	8007cec <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8007b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	f200 80a2 	bhi.w	8007cec <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8007ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007baa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8007bae:	3301      	adds	r3, #1
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bb4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8007bb8:	e098      	b.n	8007cec <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8007bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	db0f      	blt.n	8007be4 <tcp_slowtmr+0x1f0>
 8007bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007bca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d008      	beq.n	8007be4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8007bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	3301      	adds	r3, #1
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	b21a      	sxth	r2, r3
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bec:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	db7b      	blt.n	8007cec <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007bf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bf6:	f004 f827 	bl	800bc48 <tcp_rexmit_rto_prepare>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d007      	beq.n	8007c10 <tcp_slowtmr+0x21c>
 8007c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d171      	bne.n	8007cec <tcp_slowtmr+0x2f8>
 8007c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d06d      	beq.n	8007cec <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c12:	7d1b      	ldrb	r3, [r3, #20]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d03a      	beq.n	8007c8e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c1e:	2b0c      	cmp	r3, #12
 8007c20:	bf28      	it	cs
 8007c22:	230c      	movcs	r3, #12
 8007c24:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c28:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007c2c:	10db      	asrs	r3, r3, #3
 8007c2e:	b21b      	sxth	r3, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007c38:	4413      	add	r3, r2
 8007c3a:	7efa      	ldrb	r2, [r7, #27]
 8007c3c:	4910      	ldr	r1, [pc, #64]	; (8007c80 <tcp_slowtmr+0x28c>)
 8007c3e:	5c8a      	ldrb	r2, [r1, r2]
 8007c40:	4093      	lsls	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	dc1a      	bgt.n	8007c84 <tcp_slowtmr+0x290>
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	b21a      	sxth	r2, r3
 8007c52:	e019      	b.n	8007c88 <tcp_slowtmr+0x294>
 8007c54:	200087d0 	.word	0x200087d0
 8007c58:	200087e6 	.word	0x200087e6
 8007c5c:	200087dc 	.word	0x200087dc
 8007c60:	08010be8 	.word	0x08010be8
 8007c64:	08010f2c 	.word	0x08010f2c
 8007c68:	08010c2c 	.word	0x08010c2c
 8007c6c:	08010f58 	.word	0x08010f58
 8007c70:	08010f84 	.word	0x08010f84
 8007c74:	08010fb4 	.word	0x08010fb4
 8007c78:	08010fe8 	.word	0x08010fe8
 8007c7c:	08012bc0 	.word	0x08012bc0
 8007c80:	08012bb0 	.word	0x08012bb0
 8007c84:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c90:	2200      	movs	r2, #0
 8007c92:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	bf28      	it	cs
 8007ca4:	4613      	movcs	r3, r2
 8007ca6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007ca8:	8a7b      	ldrh	r3, [r7, #18]
 8007caa:	085b      	lsrs	r3, r3, #1
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d206      	bcs.n	8007cd4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cca:	005b      	lsls	r3, r3, #1
 8007ccc:	b29a      	uxth	r2, r3
 8007cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ce8:	f004 f81e 	bl	800bd28 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	7d1b      	ldrb	r3, [r3, #20]
 8007cf0:	2b06      	cmp	r3, #6
 8007cf2:	d111      	bne.n	8007d18 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	8b5b      	ldrh	r3, [r3, #26]
 8007cf8:	f003 0310 	and.w	r3, r3, #16
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d00b      	beq.n	8007d18 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d00:	4b9c      	ldr	r3, [pc, #624]	; (8007f74 <tcp_slowtmr+0x580>)
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	2b28      	cmp	r3, #40	; 0x28
 8007d0c:	d904      	bls.n	8007d18 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d12:	3301      	adds	r3, #1
 8007d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	7a5b      	ldrb	r3, [r3, #9]
 8007d1c:	f003 0308 	and.w	r3, r3, #8
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d04a      	beq.n	8007dba <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d003      	beq.n	8007d34 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007d30:	2b07      	cmp	r3, #7
 8007d32:	d142      	bne.n	8007dba <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d34:	4b8f      	ldr	r3, [pc, #572]	; (8007f74 <tcp_slowtmr+0x580>)
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d40:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007d44:	4b8c      	ldr	r3, [pc, #560]	; (8007f78 <tcp_slowtmr+0x584>)
 8007d46:	440b      	add	r3, r1
 8007d48:	498c      	ldr	r1, [pc, #560]	; (8007f7c <tcp_slowtmr+0x588>)
 8007d4a:	fba1 1303 	umull	r1, r3, r1, r3
 8007d4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d50:	429a      	cmp	r2, r3
 8007d52:	d90a      	bls.n	8007d6a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d58:	3301      	adds	r3, #1
 8007d5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007d62:	3301      	adds	r3, #1
 8007d64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007d68:	e027      	b.n	8007dba <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d6a:	4b82      	ldr	r3, [pc, #520]	; (8007f74 <tcp_slowtmr+0x580>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	6a1b      	ldr	r3, [r3, #32]
 8007d72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007d80:	4618      	mov	r0, r3
 8007d82:	4b7f      	ldr	r3, [pc, #508]	; (8007f80 <tcp_slowtmr+0x58c>)
 8007d84:	fb00 f303 	mul.w	r3, r0, r3
 8007d88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007d8a:	497c      	ldr	r1, [pc, #496]	; (8007f7c <tcp_slowtmr+0x588>)
 8007d8c:	fba1 1303 	umull	r1, r3, r1, r3
 8007d90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d911      	bls.n	8007dba <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8007d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d98:	f004 faca 	bl	800c330 <tcp_keepalive>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007da2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d107      	bne.n	8007dba <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8007daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007db0:	3301      	adds	r3, #1
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d011      	beq.n	8007de6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007dc2:	4b6c      	ldr	r3, [pc, #432]	; (8007f74 <tcp_slowtmr+0x580>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	1ad2      	subs	r2, r2, r3
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	440b      	add	r3, r1
 8007dda:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d302      	bcc.n	8007de6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007de0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007de2:	f000 fddd 	bl	80089a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de8:	7d1b      	ldrb	r3, [r3, #20]
 8007dea:	2b03      	cmp	r3, #3
 8007dec:	d10b      	bne.n	8007e06 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007dee:	4b61      	ldr	r3, [pc, #388]	; (8007f74 <tcp_slowtmr+0x580>)
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df4:	6a1b      	ldr	r3, [r3, #32]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	2b28      	cmp	r3, #40	; 0x28
 8007dfa:	d904      	bls.n	8007e06 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e00:	3301      	adds	r3, #1
 8007e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	7d1b      	ldrb	r3, [r3, #20]
 8007e0a:	2b09      	cmp	r3, #9
 8007e0c:	d10b      	bne.n	8007e26 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007e0e:	4b59      	ldr	r3, [pc, #356]	; (8007f74 <tcp_slowtmr+0x580>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	6a1b      	ldr	r3, [r3, #32]
 8007e16:	1ad3      	subs	r3, r2, r3
 8007e18:	2bf0      	cmp	r3, #240	; 0xf0
 8007e1a:	d904      	bls.n	8007e26 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8007e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e20:	3301      	adds	r3, #1
 8007e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007e26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d060      	beq.n	8007ef0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e34:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e38:	f000 fbfe 	bl	8008638 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d010      	beq.n	8007e64 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007e42:	4b50      	ldr	r3, [pc, #320]	; (8007f84 <tcp_slowtmr+0x590>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d106      	bne.n	8007e5a <tcp_slowtmr+0x466>
 8007e4c:	4b4e      	ldr	r3, [pc, #312]	; (8007f88 <tcp_slowtmr+0x594>)
 8007e4e:	f240 526d 	movw	r2, #1389	; 0x56d
 8007e52:	494e      	ldr	r1, [pc, #312]	; (8007f8c <tcp_slowtmr+0x598>)
 8007e54:	484e      	ldr	r0, [pc, #312]	; (8007f90 <tcp_slowtmr+0x59c>)
 8007e56:	f007 fa43 	bl	800f2e0 <iprintf>
        prev->next = pcb->next;
 8007e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e60:	60da      	str	r2, [r3, #12]
 8007e62:	e00f      	b.n	8007e84 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007e64:	4b47      	ldr	r3, [pc, #284]	; (8007f84 <tcp_slowtmr+0x590>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d006      	beq.n	8007e7c <tcp_slowtmr+0x488>
 8007e6e:	4b46      	ldr	r3, [pc, #280]	; (8007f88 <tcp_slowtmr+0x594>)
 8007e70:	f240 5271 	movw	r2, #1393	; 0x571
 8007e74:	4947      	ldr	r1, [pc, #284]	; (8007f94 <tcp_slowtmr+0x5a0>)
 8007e76:	4846      	ldr	r0, [pc, #280]	; (8007f90 <tcp_slowtmr+0x59c>)
 8007e78:	f007 fa32 	bl	800f2e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	4a40      	ldr	r2, [pc, #256]	; (8007f84 <tcp_slowtmr+0x590>)
 8007e82:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007e84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d013      	beq.n	8007eb4 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007e94:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e98:	3304      	adds	r3, #4
 8007e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e9c:	8ad2      	ldrh	r2, [r2, #22]
 8007e9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ea0:	8b09      	ldrh	r1, [r1, #24]
 8007ea2:	9102      	str	r1, [sp, #8]
 8007ea4:	9201      	str	r2, [sp, #4]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4601      	mov	r1, r0
 8007eae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eb0:	f004 f98a 	bl	800c1c8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	7d1b      	ldrb	r3, [r3, #20]
 8007ebe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007eca:	6838      	ldr	r0, [r7, #0]
 8007ecc:	f7ff f9f4 	bl	80072b8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007ed0:	4b31      	ldr	r3, [pc, #196]	; (8007f98 <tcp_slowtmr+0x5a4>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d004      	beq.n	8007ee6 <tcp_slowtmr+0x4f2>
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f06f 010c 	mvn.w	r1, #12
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007ee6:	4b2c      	ldr	r3, [pc, #176]	; (8007f98 <tcp_slowtmr+0x5a4>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d037      	beq.n	8007f5e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8007eee:	e592      	b.n	8007a16 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	7f1b      	ldrb	r3, [r3, #28]
 8007efe:	3301      	adds	r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f08:	7f1a      	ldrb	r2, [r3, #28]
 8007f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f0c:	7f5b      	ldrb	r3, [r3, #29]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d325      	bcc.n	8007f5e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	2200      	movs	r2, #0
 8007f16:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007f18:	4b1f      	ldr	r3, [pc, #124]	; (8007f98 <tcp_slowtmr+0x5a4>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <tcp_slowtmr+0x54c>
 8007f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f30:	6912      	ldr	r2, [r2, #16]
 8007f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007f3e:	e002      	b.n	8007f46 <tcp_slowtmr+0x552>
 8007f40:	2300      	movs	r3, #0
 8007f42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007f46:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <tcp_slowtmr+0x5a4>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d000      	beq.n	8007f50 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8007f4e:	e562      	b.n	8007a16 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007f50:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8007f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5a:	f003 fb81 	bl	800b660 <tcp_output>
  while (pcb != NULL) {
 8007f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f ad5e 	bne.w	8007a22 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007f66:	2300      	movs	r3, #0
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <tcp_slowtmr+0x5a8>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007f70:	e069      	b.n	8008046 <tcp_slowtmr+0x652>
 8007f72:	bf00      	nop
 8007f74:	200087d0 	.word	0x200087d0
 8007f78:	000a4cb8 	.word	0x000a4cb8
 8007f7c:	10624dd3 	.word	0x10624dd3
 8007f80:	000124f8 	.word	0x000124f8
 8007f84:	200087dc 	.word	0x200087dc
 8007f88:	08010be8 	.word	0x08010be8
 8007f8c:	08011020 	.word	0x08011020
 8007f90:	08010c2c 	.word	0x08010c2c
 8007f94:	0801104c 	.word	0x0801104c
 8007f98:	200087e4 	.word	0x200087e4
 8007f9c:	200087e0 	.word	0x200087e0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	7d1b      	ldrb	r3, [r3, #20]
 8007fa4:	2b0a      	cmp	r3, #10
 8007fa6:	d006      	beq.n	8007fb6 <tcp_slowtmr+0x5c2>
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <tcp_slowtmr+0x664>)
 8007faa:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007fae:	492b      	ldr	r1, [pc, #172]	; (800805c <tcp_slowtmr+0x668>)
 8007fb0:	482b      	ldr	r0, [pc, #172]	; (8008060 <tcp_slowtmr+0x66c>)
 8007fb2:	f007 f995 	bl	800f2e0 <iprintf>
    pcb_remove = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007fbc:	4b29      	ldr	r3, [pc, #164]	; (8008064 <tcp_slowtmr+0x670>)
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2bf0      	cmp	r3, #240	; 0xf0
 8007fc8:	d904      	bls.n	8007fd4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007fca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fce:	3301      	adds	r3, #1
 8007fd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d02f      	beq.n	800803c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fde:	f000 fb2b 	bl	8008638 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d010      	beq.n	800800a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007fe8:	4b1f      	ldr	r3, [pc, #124]	; (8008068 <tcp_slowtmr+0x674>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fee:	429a      	cmp	r2, r3
 8007ff0:	d106      	bne.n	8008000 <tcp_slowtmr+0x60c>
 8007ff2:	4b19      	ldr	r3, [pc, #100]	; (8008058 <tcp_slowtmr+0x664>)
 8007ff4:	f240 52af 	movw	r2, #1455	; 0x5af
 8007ff8:	491c      	ldr	r1, [pc, #112]	; (800806c <tcp_slowtmr+0x678>)
 8007ffa:	4819      	ldr	r0, [pc, #100]	; (8008060 <tcp_slowtmr+0x66c>)
 8007ffc:	f007 f970 	bl	800f2e0 <iprintf>
        prev->next = pcb->next;
 8008000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008006:	60da      	str	r2, [r3, #12]
 8008008:	e00f      	b.n	800802a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800800a:	4b17      	ldr	r3, [pc, #92]	; (8008068 <tcp_slowtmr+0x674>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008010:	429a      	cmp	r2, r3
 8008012:	d006      	beq.n	8008022 <tcp_slowtmr+0x62e>
 8008014:	4b10      	ldr	r3, [pc, #64]	; (8008058 <tcp_slowtmr+0x664>)
 8008016:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800801a:	4915      	ldr	r1, [pc, #84]	; (8008070 <tcp_slowtmr+0x67c>)
 800801c:	4810      	ldr	r0, [pc, #64]	; (8008060 <tcp_slowtmr+0x66c>)
 800801e:	f007 f95f 	bl	800f2e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8008022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	4a10      	ldr	r2, [pc, #64]	; (8008068 <tcp_slowtmr+0x674>)
 8008028:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800802c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800802e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8008034:	69f8      	ldr	r0, [r7, #28]
 8008036:	f7ff f93f 	bl	80072b8 <tcp_free>
 800803a:	e004      	b.n	8008046 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800803c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800803e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8008040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008042:	68db      	ldr	r3, [r3, #12]
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8008046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1a9      	bne.n	8007fa0 <tcp_slowtmr+0x5ac>
    }
  }
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	3730      	adds	r7, #48	; 0x30
 8008052:	46bd      	mov	sp, r7
 8008054:	bdb0      	pop	{r4, r5, r7, pc}
 8008056:	bf00      	nop
 8008058:	08010be8 	.word	0x08010be8
 800805c:	08011078 	.word	0x08011078
 8008060:	08010c2c 	.word	0x08010c2c
 8008064:	200087d0 	.word	0x200087d0
 8008068:	200087e0 	.word	0x200087e0
 800806c:	080110a8 	.word	0x080110a8
 8008070:	080110d0 	.word	0x080110d0

08008074 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800807a:	4b2d      	ldr	r3, [pc, #180]	; (8008130 <tcp_fasttmr+0xbc>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	3301      	adds	r3, #1
 8008080:	b2da      	uxtb	r2, r3
 8008082:	4b2b      	ldr	r3, [pc, #172]	; (8008130 <tcp_fasttmr+0xbc>)
 8008084:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8008086:	4b2b      	ldr	r3, [pc, #172]	; (8008134 <tcp_fasttmr+0xc0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800808c:	e048      	b.n	8008120 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	7f9a      	ldrb	r2, [r3, #30]
 8008092:	4b27      	ldr	r3, [pc, #156]	; (8008130 <tcp_fasttmr+0xbc>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d03f      	beq.n	800811a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800809a:	4b25      	ldr	r3, [pc, #148]	; (8008130 <tcp_fasttmr+0xbc>)
 800809c:	781a      	ldrb	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8b5b      	ldrh	r3, [r3, #26]
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d010      	beq.n	80080d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	8b5b      	ldrh	r3, [r3, #26]
 80080b2:	f043 0302 	orr.w	r3, r3, #2
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f003 facf 	bl	800b660 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	8b5b      	ldrh	r3, [r3, #26]
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	8b5b      	ldrh	r3, [r3, #26]
 80080d4:	f003 0308 	and.w	r3, r3, #8
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d009      	beq.n	80080f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	8b5b      	ldrh	r3, [r3, #26]
 80080e0:	f023 0308 	bic.w	r3, r3, #8
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fa78 	bl	80075e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80080fe:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <tcp_fasttmr+0xc4>)
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f819 	bl	800813c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800810a:	4b0b      	ldr	r3, [pc, #44]	; (8008138 <tcp_fasttmr+0xc4>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d000      	beq.n	8008114 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8008112:	e7b8      	b.n	8008086 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	607b      	str	r3, [r7, #4]
 8008118:	e002      	b.n	8008120 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1b3      	bne.n	800808e <tcp_fasttmr+0x1a>
    }
  }
}
 8008126:	bf00      	nop
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	200087e6 	.word	0x200087e6
 8008134:	200087dc 	.word	0x200087dc
 8008138:	200087e4 	.word	0x200087e4

0800813c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d109      	bne.n	800815e <tcp_process_refused_data+0x22>
 800814a:	4b37      	ldr	r3, [pc, #220]	; (8008228 <tcp_process_refused_data+0xec>)
 800814c:	f240 6209 	movw	r2, #1545	; 0x609
 8008150:	4936      	ldr	r1, [pc, #216]	; (800822c <tcp_process_refused_data+0xf0>)
 8008152:	4837      	ldr	r0, [pc, #220]	; (8008230 <tcp_process_refused_data+0xf4>)
 8008154:	f007 f8c4 	bl	800f2e0 <iprintf>
 8008158:	f06f 030f 	mvn.w	r3, #15
 800815c:	e060      	b.n	8008220 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008162:	7b5b      	ldrb	r3, [r3, #13]
 8008164:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800816a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00b      	beq.n	8008194 <tcp_process_refused_data+0x58>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6918      	ldr	r0, [r3, #16]
 8008186:	2300      	movs	r3, #0
 8008188:	68ba      	ldr	r2, [r7, #8]
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	47a0      	blx	r4
 800818e:	4603      	mov	r3, r0
 8008190:	73fb      	strb	r3, [r7, #15]
 8008192:	e007      	b.n	80081a4 <tcp_process_refused_data+0x68>
 8008194:	2300      	movs	r3, #0
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	6879      	ldr	r1, [r7, #4]
 800819a:	2000      	movs	r0, #0
 800819c:	f000 f8a4 	bl	80082e8 <tcp_recv_null>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80081a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d12a      	bne.n	8008202 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d033      	beq.n	800821e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80081be:	d005      	beq.n	80081cc <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c4:	3301      	adds	r3, #1
 80081c6:	b29a      	uxth	r2, r3
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <tcp_process_refused_data+0xb2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6918      	ldr	r0, [r3, #16]
 80081e0:	2300      	movs	r3, #0
 80081e2:	2200      	movs	r2, #0
 80081e4:	6879      	ldr	r1, [r7, #4]
 80081e6:	47a0      	blx	r4
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	e001      	b.n	80081f2 <tcp_process_refused_data+0xb6>
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80081f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081f6:	f113 0f0d 	cmn.w	r3, #13
 80081fa:	d110      	bne.n	800821e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80081fc:	f06f 030c 	mvn.w	r3, #12
 8008200:	e00e      	b.n	8008220 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8008202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008206:	f113 0f0d 	cmn.w	r3, #13
 800820a:	d102      	bne.n	8008212 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800820c:	f06f 030c 	mvn.w	r3, #12
 8008210:	e006      	b.n	8008220 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008218:	f06f 0304 	mvn.w	r3, #4
 800821c:	e000      	b.n	8008220 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800821e:	2300      	movs	r3, #0
}
 8008220:	4618      	mov	r0, r3
 8008222:	3714      	adds	r7, #20
 8008224:	46bd      	mov	sp, r7
 8008226:	bd90      	pop	{r4, r7, pc}
 8008228:	08010be8 	.word	0x08010be8
 800822c:	080110f8 	.word	0x080110f8
 8008230:	08010c2c 	.word	0x08010c2c

08008234 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800823c:	e007      	b.n	800824e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f80a 	bl	800825e <tcp_seg_free>
    seg = next;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1f4      	bne.n	800823e <tcp_segs_free+0xa>
  }
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00c      	beq.n	8008286 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d004      	beq.n	800827e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4618      	mov	r0, r3
 800827a:	f7fe fd7d 	bl	8006d78 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800827e:	6879      	ldr	r1, [r7, #4]
 8008280:	2003      	movs	r0, #3
 8008282:	f7fd ff03 	bl	800608c <memp_free>
  }
}
 8008286:	bf00      	nop
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
	...

08008290 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d106      	bne.n	80082ac <tcp_seg_copy+0x1c>
 800829e:	4b0f      	ldr	r3, [pc, #60]	; (80082dc <tcp_seg_copy+0x4c>)
 80082a0:	f240 6282 	movw	r2, #1666	; 0x682
 80082a4:	490e      	ldr	r1, [pc, #56]	; (80082e0 <tcp_seg_copy+0x50>)
 80082a6:	480f      	ldr	r0, [pc, #60]	; (80082e4 <tcp_seg_copy+0x54>)
 80082a8:	f007 f81a 	bl	800f2e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80082ac:	2003      	movs	r0, #3
 80082ae:	f7fd fe7d 	bl	8005fac <memp_malloc>
 80082b2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d101      	bne.n	80082be <tcp_seg_copy+0x2e>
    return NULL;
 80082ba:	2300      	movs	r3, #0
 80082bc:	e00a      	b.n	80082d4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80082be:	2210      	movs	r2, #16
 80082c0:	6879      	ldr	r1, [r7, #4]
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f007 f8e7 	bl	800f496 <memcpy>
  pbuf_ref(cseg->p);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe fdf3 	bl	8006eb8 <pbuf_ref>
  return cseg;
 80082d2:	68fb      	ldr	r3, [r7, #12]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	08010be8 	.word	0x08010be8
 80082e0:	0801113c 	.word	0x0801113c
 80082e4:	08010c2c 	.word	0x08010c2c

080082e8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d109      	bne.n	8008310 <tcp_recv_null+0x28>
 80082fc:	4b12      	ldr	r3, [pc, #72]	; (8008348 <tcp_recv_null+0x60>)
 80082fe:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008302:	4912      	ldr	r1, [pc, #72]	; (800834c <tcp_recv_null+0x64>)
 8008304:	4812      	ldr	r0, [pc, #72]	; (8008350 <tcp_recv_null+0x68>)
 8008306:	f006 ffeb 	bl	800f2e0 <iprintf>
 800830a:	f06f 030f 	mvn.w	r3, #15
 800830e:	e016      	b.n	800833e <tcp_recv_null+0x56>

  if (p != NULL) {
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d009      	beq.n	800832a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	891b      	ldrh	r3, [r3, #8]
 800831a:	4619      	mov	r1, r3
 800831c:	68b8      	ldr	r0, [r7, #8]
 800831e:	f7ff fb19 	bl	8007954 <tcp_recved>
    pbuf_free(p);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7fe fd28 	bl	8006d78 <pbuf_free>
 8008328:	e008      	b.n	800833c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800832a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d104      	bne.n	800833c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008332:	68b8      	ldr	r0, [r7, #8]
 8008334:	f7ff f9be 	bl	80076b4 <tcp_close>
 8008338:	4603      	mov	r3, r0
 800833a:	e000      	b.n	800833e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	08010be8 	.word	0x08010be8
 800834c:	08011158 	.word	0x08011158
 8008350:	08010c2c 	.word	0x08010c2c

08008354 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	4603      	mov	r3, r0
 800835c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800835e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008362:	2b00      	cmp	r3, #0
 8008364:	db01      	blt.n	800836a <tcp_kill_prio+0x16>
 8008366:	79fb      	ldrb	r3, [r7, #7]
 8008368:	e000      	b.n	800836c <tcp_kill_prio+0x18>
 800836a:	237f      	movs	r3, #127	; 0x7f
 800836c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800836e:	7afb      	ldrb	r3, [r7, #11]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d034      	beq.n	80083de <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8008374:	7afb      	ldrb	r3, [r7, #11]
 8008376:	3b01      	subs	r3, #1
 8008378:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008382:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <tcp_kill_prio+0x94>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e01f      	b.n	80083ca <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	7d5b      	ldrb	r3, [r3, #21]
 800838e:	7afa      	ldrb	r2, [r7, #11]
 8008390:	429a      	cmp	r2, r3
 8008392:	d80c      	bhi.n	80083ae <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8008398:	7afa      	ldrb	r2, [r7, #11]
 800839a:	429a      	cmp	r2, r3
 800839c:	d112      	bne.n	80083c4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <tcp_kill_prio+0x98>)
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d80a      	bhi.n	80083c4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80083ae:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <tcp_kill_prio+0x98>)
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	7d5b      	ldrb	r3, [r3, #21]
 80083c2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d1dc      	bne.n	800838a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d004      	beq.n	80083e0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80083d6:	6938      	ldr	r0, [r7, #16]
 80083d8:	f7ff fa56 	bl	8007888 <tcp_abort>
 80083dc:	e000      	b.n	80083e0 <tcp_kill_prio+0x8c>
    return;
 80083de:	bf00      	nop
  }
}
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	200087dc 	.word	0x200087dc
 80083ec:	200087d0 	.word	0x200087d0

080083f0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	4603      	mov	r3, r0
 80083f8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80083fa:	79fb      	ldrb	r3, [r7, #7]
 80083fc:	2b08      	cmp	r3, #8
 80083fe:	d009      	beq.n	8008414 <tcp_kill_state+0x24>
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	2b09      	cmp	r3, #9
 8008404:	d006      	beq.n	8008414 <tcp_kill_state+0x24>
 8008406:	4b1a      	ldr	r3, [pc, #104]	; (8008470 <tcp_kill_state+0x80>)
 8008408:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800840c:	4919      	ldr	r1, [pc, #100]	; (8008474 <tcp_kill_state+0x84>)
 800840e:	481a      	ldr	r0, [pc, #104]	; (8008478 <tcp_kill_state+0x88>)
 8008410:	f006 ff66 	bl	800f2e0 <iprintf>

  inactivity = 0;
 8008414:	2300      	movs	r3, #0
 8008416:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800841c:	4b17      	ldr	r3, [pc, #92]	; (800847c <tcp_kill_state+0x8c>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e017      	b.n	8008454 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	7d1b      	ldrb	r3, [r3, #20]
 8008428:	79fa      	ldrb	r2, [r7, #7]
 800842a:	429a      	cmp	r2, r3
 800842c:	d10f      	bne.n	800844e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800842e:	4b14      	ldr	r3, [pc, #80]	; (8008480 <tcp_kill_state+0x90>)
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	429a      	cmp	r2, r3
 800843c:	d807      	bhi.n	800844e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <tcp_kill_state+0x90>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	6a1b      	ldr	r3, [r3, #32]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	617b      	str	r3, [r7, #20]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e4      	bne.n	8008424 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d003      	beq.n	8008468 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8008460:	2100      	movs	r1, #0
 8008462:	6938      	ldr	r0, [r7, #16]
 8008464:	f7ff f952 	bl	800770c <tcp_abandon>
  }
}
 8008468:	bf00      	nop
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	08010be8 	.word	0x08010be8
 8008474:	08011174 	.word	0x08011174
 8008478:	08010c2c 	.word	0x08010c2c
 800847c:	200087dc 	.word	0x200087dc
 8008480:	200087d0 	.word	0x200087d0

08008484 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800848a:	2300      	movs	r3, #0
 800848c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800848e:	2300      	movs	r3, #0
 8008490:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008492:	4b12      	ldr	r3, [pc, #72]	; (80084dc <tcp_kill_timewait+0x58>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	e012      	b.n	80084c0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800849a:	4b11      	ldr	r3, [pc, #68]	; (80084e0 <tcp_kill_timewait+0x5c>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d807      	bhi.n	80084ba <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80084aa:	4b0d      	ldr	r3, [pc, #52]	; (80084e0 <tcp_kill_timewait+0x5c>)
 80084ac:	681a      	ldr	r2, [r3, #0]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1e9      	bne.n	800849a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d002      	beq.n	80084d2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80084cc:	68b8      	ldr	r0, [r7, #8]
 80084ce:	f7ff f9db 	bl	8007888 <tcp_abort>
  }
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	200087e0 	.word	0x200087e0
 80084e0:	200087d0 	.word	0x200087d0

080084e4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <tcp_handle_closepend+0x48>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80084f0:	e014      	b.n	800851c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	8b5b      	ldrh	r3, [r3, #26]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	8b5b      	ldrh	r3, [r3, #26]
 8008508:	f023 0308 	bic.w	r3, r3, #8
 800850c:	b29a      	uxth	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff f864 	bl	80075e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1e7      	bne.n	80084f2 <tcp_handle_closepend+0xe>
  }
}
 8008522:	bf00      	nop
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	200087dc 	.word	0x200087dc

08008530 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800853a:	2001      	movs	r0, #1
 800853c:	f7fd fd36 	bl	8005fac <memp_malloc>
 8008540:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d126      	bne.n	8008596 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8008548:	f7ff ffcc 	bl	80084e4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800854c:	f7ff ff9a 	bl	8008484 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008550:	2001      	movs	r0, #1
 8008552:	f7fd fd2b 	bl	8005fac <memp_malloc>
 8008556:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d11b      	bne.n	8008596 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800855e:	2009      	movs	r0, #9
 8008560:	f7ff ff46 	bl	80083f0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008564:	2001      	movs	r0, #1
 8008566:	f7fd fd21 	bl	8005fac <memp_malloc>
 800856a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d111      	bne.n	8008596 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8008572:	2008      	movs	r0, #8
 8008574:	f7ff ff3c 	bl	80083f0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008578:	2001      	movs	r0, #1
 800857a:	f7fd fd17 	bl	8005fac <memp_malloc>
 800857e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d107      	bne.n	8008596 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	4618      	mov	r0, r3
 800858a:	f7ff fee3 	bl	8008354 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800858e:	2001      	movs	r0, #1
 8008590:	f7fd fd0c 	bl	8005fac <memp_malloc>
 8008594:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d03f      	beq.n	800861c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800859c:	229c      	movs	r2, #156	; 0x9c
 800859e:	2100      	movs	r1, #0
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f006 ff02 	bl	800f3aa <memset>
    pcb->prio = prio;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	79fa      	ldrb	r2, [r7, #7]
 80085aa:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80085b2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80085bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	22ff      	movs	r2, #255	; 0xff
 80085ca:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f44f 7206 	mov.w	r2, #536	; 0x218
 80085d2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2206      	movs	r2, #6
 80085d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2206      	movs	r2, #6
 80085e0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085e8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80085f2:	4b0d      	ldr	r3, [pc, #52]	; (8008628 <tcp_alloc+0xf8>)
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80085fa:	4b0c      	ldr	r3, [pc, #48]	; (800862c <tcp_alloc+0xfc>)
 80085fc:	781a      	ldrb	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008608:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	4a08      	ldr	r2, [pc, #32]	; (8008630 <tcp_alloc+0x100>)
 8008610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	4a07      	ldr	r2, [pc, #28]	; (8008634 <tcp_alloc+0x104>)
 8008618:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800861c:	68fb      	ldr	r3, [r7, #12]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	200087d0 	.word	0x200087d0
 800862c:	200087e6 	.word	0x200087e6
 8008630:	080082e9 	.word	0x080082e9
 8008634:	006ddd00 	.word	0x006ddd00

08008638 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d107      	bne.n	8008656 <tcp_pcb_purge+0x1e>
 8008646:	4b21      	ldr	r3, [pc, #132]	; (80086cc <tcp_pcb_purge+0x94>)
 8008648:	f640 0251 	movw	r2, #2129	; 0x851
 800864c:	4920      	ldr	r1, [pc, #128]	; (80086d0 <tcp_pcb_purge+0x98>)
 800864e:	4821      	ldr	r0, [pc, #132]	; (80086d4 <tcp_pcb_purge+0x9c>)
 8008650:	f006 fe46 	bl	800f2e0 <iprintf>
 8008654:	e037      	b.n	80086c6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	7d1b      	ldrb	r3, [r3, #20]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d033      	beq.n	80086c6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008662:	2b0a      	cmp	r3, #10
 8008664:	d02f      	beq.n	80086c6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800866a:	2b01      	cmp	r3, #1
 800866c:	d02b      	beq.n	80086c6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800867a:	4618      	mov	r0, r3
 800867c:	f7fe fb7c 	bl	8006d78 <pbuf_free>
      pcb->refused_data = NULL;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 f986 	bl	80089a0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800869a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff fdc7 	bl	8008234 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7ff fdc2 	bl	8008234 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	66da      	str	r2, [r3, #108]	; 0x6c
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80086c6:	3708      	adds	r7, #8
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	08010be8 	.word	0x08010be8
 80086d0:	08011234 	.word	0x08011234
 80086d4:	08010c2c 	.word	0x08010c2c

080086d8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d106      	bne.n	80086f6 <tcp_pcb_remove+0x1e>
 80086e8:	4b3e      	ldr	r3, [pc, #248]	; (80087e4 <tcp_pcb_remove+0x10c>)
 80086ea:	f640 0283 	movw	r2, #2179	; 0x883
 80086ee:	493e      	ldr	r1, [pc, #248]	; (80087e8 <tcp_pcb_remove+0x110>)
 80086f0:	483e      	ldr	r0, [pc, #248]	; (80087ec <tcp_pcb_remove+0x114>)
 80086f2:	f006 fdf5 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d106      	bne.n	800870a <tcp_pcb_remove+0x32>
 80086fc:	4b39      	ldr	r3, [pc, #228]	; (80087e4 <tcp_pcb_remove+0x10c>)
 80086fe:	f640 0284 	movw	r2, #2180	; 0x884
 8008702:	493b      	ldr	r1, [pc, #236]	; (80087f0 <tcp_pcb_remove+0x118>)
 8008704:	4839      	ldr	r0, [pc, #228]	; (80087ec <tcp_pcb_remove+0x114>)
 8008706:	f006 fdeb 	bl	800f2e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	429a      	cmp	r2, r3
 8008712:	d105      	bne.n	8008720 <tcp_pcb_remove+0x48>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68da      	ldr	r2, [r3, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	e013      	b.n	8008748 <tcp_pcb_remove+0x70>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	60fb      	str	r3, [r7, #12]
 8008726:	e00c      	b.n	8008742 <tcp_pcb_remove+0x6a>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	429a      	cmp	r2, r3
 8008730:	d104      	bne.n	800873c <tcp_pcb_remove+0x64>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e005      	b.n	8008748 <tcp_pcb_remove+0x70>
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	60fb      	str	r3, [r7, #12]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1ef      	bne.n	8008728 <tcp_pcb_remove+0x50>
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800874e:	6838      	ldr	r0, [r7, #0]
 8008750:	f7ff ff72 	bl	8008638 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	7d1b      	ldrb	r3, [r3, #20]
 8008758:	2b0a      	cmp	r3, #10
 800875a:	d013      	beq.n	8008784 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008760:	2b01      	cmp	r3, #1
 8008762:	d00f      	beq.n	8008784 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	8b5b      	ldrh	r3, [r3, #26]
 8008768:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800876c:	2b00      	cmp	r3, #0
 800876e:	d009      	beq.n	8008784 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	8b5b      	ldrh	r3, [r3, #26]
 8008774:	f043 0302 	orr.w	r3, r3, #2
 8008778:	b29a      	uxth	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800877e:	6838      	ldr	r0, [r7, #0]
 8008780:	f002 ff6e 	bl	800b660 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	7d1b      	ldrb	r3, [r3, #20]
 8008788:	2b01      	cmp	r3, #1
 800878a:	d020      	beq.n	80087ce <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008790:	2b00      	cmp	r3, #0
 8008792:	d006      	beq.n	80087a2 <tcp_pcb_remove+0xca>
 8008794:	4b13      	ldr	r3, [pc, #76]	; (80087e4 <tcp_pcb_remove+0x10c>)
 8008796:	f640 0293 	movw	r2, #2195	; 0x893
 800879a:	4916      	ldr	r1, [pc, #88]	; (80087f4 <tcp_pcb_remove+0x11c>)
 800879c:	4813      	ldr	r0, [pc, #76]	; (80087ec <tcp_pcb_remove+0x114>)
 800879e:	f006 fd9f 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d006      	beq.n	80087b8 <tcp_pcb_remove+0xe0>
 80087aa:	4b0e      	ldr	r3, [pc, #56]	; (80087e4 <tcp_pcb_remove+0x10c>)
 80087ac:	f640 0294 	movw	r2, #2196	; 0x894
 80087b0:	4911      	ldr	r1, [pc, #68]	; (80087f8 <tcp_pcb_remove+0x120>)
 80087b2:	480e      	ldr	r0, [pc, #56]	; (80087ec <tcp_pcb_remove+0x114>)
 80087b4:	f006 fd94 	bl	800f2e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <tcp_pcb_remove+0xf6>
 80087c0:	4b08      	ldr	r3, [pc, #32]	; (80087e4 <tcp_pcb_remove+0x10c>)
 80087c2:	f640 0296 	movw	r2, #2198	; 0x896
 80087c6:	490d      	ldr	r1, [pc, #52]	; (80087fc <tcp_pcb_remove+0x124>)
 80087c8:	4808      	ldr	r0, [pc, #32]	; (80087ec <tcp_pcb_remove+0x114>)
 80087ca:	f006 fd89 	bl	800f2e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2200      	movs	r2, #0
 80087d2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2200      	movs	r2, #0
 80087d8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80087da:	bf00      	nop
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	08010be8 	.word	0x08010be8
 80087e8:	08011250 	.word	0x08011250
 80087ec:	08010c2c 	.word	0x08010c2c
 80087f0:	0801126c 	.word	0x0801126c
 80087f4:	0801128c 	.word	0x0801128c
 80087f8:	080112a4 	.word	0x080112a4
 80087fc:	080112c0 	.word	0x080112c0

08008800 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d106      	bne.n	800881c <tcp_next_iss+0x1c>
 800880e:	4b0a      	ldr	r3, [pc, #40]	; (8008838 <tcp_next_iss+0x38>)
 8008810:	f640 02af 	movw	r2, #2223	; 0x8af
 8008814:	4909      	ldr	r1, [pc, #36]	; (800883c <tcp_next_iss+0x3c>)
 8008816:	480a      	ldr	r0, [pc, #40]	; (8008840 <tcp_next_iss+0x40>)
 8008818:	f006 fd62 	bl	800f2e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800881c:	4b09      	ldr	r3, [pc, #36]	; (8008844 <tcp_next_iss+0x44>)
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	4b09      	ldr	r3, [pc, #36]	; (8008848 <tcp_next_iss+0x48>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4413      	add	r3, r2
 8008826:	4a07      	ldr	r2, [pc, #28]	; (8008844 <tcp_next_iss+0x44>)
 8008828:	6013      	str	r3, [r2, #0]
  return iss;
 800882a:	4b06      	ldr	r3, [pc, #24]	; (8008844 <tcp_next_iss+0x44>)
 800882c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800882e:	4618      	mov	r0, r3
 8008830:	3708      	adds	r7, #8
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	08010be8 	.word	0x08010be8
 800883c:	080112d8 	.word	0x080112d8
 8008840:	08010c2c 	.word	0x08010c2c
 8008844:	20000024 	.word	0x20000024
 8008848:	200087d0 	.word	0x200087d0

0800884c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	607a      	str	r2, [r7, #4]
 8008858:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d106      	bne.n	800886e <tcp_eff_send_mss_netif+0x22>
 8008860:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <tcp_eff_send_mss_netif+0x68>)
 8008862:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8008866:	4914      	ldr	r1, [pc, #80]	; (80088b8 <tcp_eff_send_mss_netif+0x6c>)
 8008868:	4814      	ldr	r0, [pc, #80]	; (80088bc <tcp_eff_send_mss_netif+0x70>)
 800886a:	f006 fd39 	bl	800f2e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d101      	bne.n	8008878 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008874:	89fb      	ldrh	r3, [r7, #14]
 8008876:	e019      	b.n	80088ac <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800887c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800887e:	8afb      	ldrh	r3, [r7, #22]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d012      	beq.n	80088aa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008884:	2328      	movs	r3, #40	; 0x28
 8008886:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8008888:	8afa      	ldrh	r2, [r7, #22]
 800888a:	8abb      	ldrh	r3, [r7, #20]
 800888c:	429a      	cmp	r2, r3
 800888e:	d904      	bls.n	800889a <tcp_eff_send_mss_netif+0x4e>
 8008890:	8afa      	ldrh	r2, [r7, #22]
 8008892:	8abb      	ldrh	r3, [r7, #20]
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	b29b      	uxth	r3, r3
 8008898:	e000      	b.n	800889c <tcp_eff_send_mss_netif+0x50>
 800889a:	2300      	movs	r3, #0
 800889c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800889e:	8a7a      	ldrh	r2, [r7, #18]
 80088a0:	89fb      	ldrh	r3, [r7, #14]
 80088a2:	4293      	cmp	r3, r2
 80088a4:	bf28      	it	cs
 80088a6:	4613      	movcs	r3, r2
 80088a8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80088aa:	89fb      	ldrh	r3, [r7, #14]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	08010be8 	.word	0x08010be8
 80088b8:	080112f4 	.word	0x080112f4
 80088bc:	08010c2c 	.word	0x08010c2c

080088c0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b084      	sub	sp, #16
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d119      	bne.n	8008908 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80088d4:	4b10      	ldr	r3, [pc, #64]	; (8008918 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80088d6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80088da:	4910      	ldr	r1, [pc, #64]	; (800891c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80088dc:	4810      	ldr	r0, [pc, #64]	; (8008920 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80088de:	f006 fcff 	bl	800f2e0 <iprintf>

  while (pcb != NULL) {
 80088e2:	e011      	b.n	8008908 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d108      	bne.n	8008902 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7fe ffc6 	bl	8007888 <tcp_abort>
      pcb = next;
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e002      	b.n	8008908 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1ea      	bne.n	80088e4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800890e:	bf00      	nop
 8008910:	bf00      	nop
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	08010be8 	.word	0x08010be8
 800891c:	0801131c 	.word	0x0801131c
 8008920:	08010c2c 	.word	0x08010c2c

08008924 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d02a      	beq.n	800898a <tcp_netif_ip_addr_changed+0x66>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d026      	beq.n	800898a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800893c:	4b15      	ldr	r3, [pc, #84]	; (8008994 <tcp_netif_ip_addr_changed+0x70>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff ffbc 	bl	80088c0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008948:	4b13      	ldr	r3, [pc, #76]	; (8008998 <tcp_netif_ip_addr_changed+0x74>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff ffb6 	bl	80088c0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d017      	beq.n	800898a <tcp_netif_ip_addr_changed+0x66>
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d013      	beq.n	800898a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008962:	4b0e      	ldr	r3, [pc, #56]	; (800899c <tcp_netif_ip_addr_changed+0x78>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	60fb      	str	r3, [r7, #12]
 8008968:	e00c      	b.n	8008984 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d103      	bne.n	800897e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	60fb      	str	r3, [r7, #12]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1ef      	bne.n	800896a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800898a:	bf00      	nop
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200087dc 	.word	0x200087dc
 8008998:	200087d4 	.word	0x200087d4
 800899c:	200087d8 	.word	0x200087d8

080089a0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d007      	beq.n	80089c0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff fc3d 	bl	8008234 <tcp_segs_free>
    pcb->ooseq = NULL;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2200      	movs	r2, #0
 80089be:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80089c0:	bf00      	nop
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b08d      	sub	sp, #52	; 0x34
 80089cc:	af04      	add	r7, sp, #16
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d105      	bne.n	80089e4 <tcp_input+0x1c>
 80089d8:	4b9b      	ldr	r3, [pc, #620]	; (8008c48 <tcp_input+0x280>)
 80089da:	2283      	movs	r2, #131	; 0x83
 80089dc:	499b      	ldr	r1, [pc, #620]	; (8008c4c <tcp_input+0x284>)
 80089de:	489c      	ldr	r0, [pc, #624]	; (8008c50 <tcp_input+0x288>)
 80089e0:	f006 fc7e 	bl	800f2e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	4a9a      	ldr	r2, [pc, #616]	; (8008c54 <tcp_input+0x28c>)
 80089ea:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	895b      	ldrh	r3, [r3, #10]
 80089f0:	2b13      	cmp	r3, #19
 80089f2:	f240 83d1 	bls.w	8009198 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80089f6:	4b98      	ldr	r3, [pc, #608]	; (8008c58 <tcp_input+0x290>)
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4a97      	ldr	r2, [pc, #604]	; (8008c58 <tcp_input+0x290>)
 80089fc:	6812      	ldr	r2, [r2, #0]
 80089fe:	4611      	mov	r1, r2
 8008a00:	4618      	mov	r0, r3
 8008a02:	f005 fc17 	bl	800e234 <ip4_addr_isbroadcast_u32>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f040 83c7 	bne.w	800919c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a0e:	4b92      	ldr	r3, [pc, #584]	; (8008c58 <tcp_input+0x290>)
 8008a10:	695b      	ldr	r3, [r3, #20]
 8008a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a16:	2be0      	cmp	r3, #224	; 0xe0
 8008a18:	f000 83c0 	beq.w	800919c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008a1c:	4b8d      	ldr	r3, [pc, #564]	; (8008c54 <tcp_input+0x28c>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	899b      	ldrh	r3, [r3, #12]
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	4618      	mov	r0, r3
 8008a26:	f7fc fe49 	bl	80056bc <lwip_htons>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	0b1b      	lsrs	r3, r3, #12
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	b2db      	uxtb	r3, r3
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a36:	7cbb      	ldrb	r3, [r7, #18]
 8008a38:	2b13      	cmp	r3, #19
 8008a3a:	f240 83b1 	bls.w	80091a0 <tcp_input+0x7d8>
 8008a3e:	7cbb      	ldrb	r3, [r7, #18]
 8008a40:	b29a      	uxth	r2, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	891b      	ldrh	r3, [r3, #8]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	f200 83aa 	bhi.w	80091a0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008a4c:	7cbb      	ldrb	r3, [r7, #18]
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	3b14      	subs	r3, #20
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	4b81      	ldr	r3, [pc, #516]	; (8008c5c <tcp_input+0x294>)
 8008a56:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008a58:	4b81      	ldr	r3, [pc, #516]	; (8008c60 <tcp_input+0x298>)
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	895a      	ldrh	r2, [r3, #10]
 8008a62:	7cbb      	ldrb	r3, [r7, #18]
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d309      	bcc.n	8008a7e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008a6a:	4b7c      	ldr	r3, [pc, #496]	; (8008c5c <tcp_input+0x294>)
 8008a6c:	881a      	ldrh	r2, [r3, #0]
 8008a6e:	4b7d      	ldr	r3, [pc, #500]	; (8008c64 <tcp_input+0x29c>)
 8008a70:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008a72:	7cbb      	ldrb	r3, [r7, #18]
 8008a74:	4619      	mov	r1, r3
 8008a76:	6878      	ldr	r0, [r7, #4]
 8008a78:	f7fe f8f8 	bl	8006c6c <pbuf_remove_header>
 8008a7c:	e04e      	b.n	8008b1c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d105      	bne.n	8008a92 <tcp_input+0xca>
 8008a86:	4b70      	ldr	r3, [pc, #448]	; (8008c48 <tcp_input+0x280>)
 8008a88:	22c2      	movs	r2, #194	; 0xc2
 8008a8a:	4977      	ldr	r1, [pc, #476]	; (8008c68 <tcp_input+0x2a0>)
 8008a8c:	4870      	ldr	r0, [pc, #448]	; (8008c50 <tcp_input+0x288>)
 8008a8e:	f006 fc27 	bl	800f2e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008a92:	2114      	movs	r1, #20
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7fe f8e9 	bl	8006c6c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	895a      	ldrh	r2, [r3, #10]
 8008a9e:	4b71      	ldr	r3, [pc, #452]	; (8008c64 <tcp_input+0x29c>)
 8008aa0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008aa2:	4b6e      	ldr	r3, [pc, #440]	; (8008c5c <tcp_input+0x294>)
 8008aa4:	881a      	ldrh	r2, [r3, #0]
 8008aa6:	4b6f      	ldr	r3, [pc, #444]	; (8008c64 <tcp_input+0x29c>)
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008aae:	4b6d      	ldr	r3, [pc, #436]	; (8008c64 <tcp_input+0x29c>)
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7fe f8d9 	bl	8006c6c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	895b      	ldrh	r3, [r3, #10]
 8008ac0:	8a3a      	ldrh	r2, [r7, #16]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f200 836e 	bhi.w	80091a4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	4a64      	ldr	r2, [pc, #400]	; (8008c60 <tcp_input+0x298>)
 8008ad0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	8a3a      	ldrh	r2, [r7, #16]
 8008ad8:	4611      	mov	r1, r2
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe f8c6 	bl	8006c6c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	891a      	ldrh	r2, [r3, #8]
 8008ae4:	8a3b      	ldrh	r3, [r7, #16]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	895b      	ldrh	r3, [r3, #10]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <tcp_input+0x13a>
 8008af6:	4b54      	ldr	r3, [pc, #336]	; (8008c48 <tcp_input+0x280>)
 8008af8:	22df      	movs	r2, #223	; 0xdf
 8008afa:	495c      	ldr	r1, [pc, #368]	; (8008c6c <tcp_input+0x2a4>)
 8008afc:	4854      	ldr	r0, [pc, #336]	; (8008c50 <tcp_input+0x288>)
 8008afe:	f006 fbef 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	891a      	ldrh	r2, [r3, #8]
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	891b      	ldrh	r3, [r3, #8]
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	d005      	beq.n	8008b1c <tcp_input+0x154>
 8008b10:	4b4d      	ldr	r3, [pc, #308]	; (8008c48 <tcp_input+0x280>)
 8008b12:	22e0      	movs	r2, #224	; 0xe0
 8008b14:	4956      	ldr	r1, [pc, #344]	; (8008c70 <tcp_input+0x2a8>)
 8008b16:	484e      	ldr	r0, [pc, #312]	; (8008c50 <tcp_input+0x288>)
 8008b18:	f006 fbe2 	bl	800f2e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b1c:	4b4d      	ldr	r3, [pc, #308]	; (8008c54 <tcp_input+0x28c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	4a4b      	ldr	r2, [pc, #300]	; (8008c54 <tcp_input+0x28c>)
 8008b26:	6814      	ldr	r4, [r2, #0]
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fc fdc7 	bl	80056bc <lwip_htons>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b32:	4b48      	ldr	r3, [pc, #288]	; (8008c54 <tcp_input+0x28c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	885b      	ldrh	r3, [r3, #2]
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	4a46      	ldr	r2, [pc, #280]	; (8008c54 <tcp_input+0x28c>)
 8008b3c:	6814      	ldr	r4, [r2, #0]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fc fdbc 	bl	80056bc <lwip_htons>
 8008b44:	4603      	mov	r3, r0
 8008b46:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b48:	4b42      	ldr	r3, [pc, #264]	; (8008c54 <tcp_input+0x28c>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	4a41      	ldr	r2, [pc, #260]	; (8008c54 <tcp_input+0x28c>)
 8008b50:	6814      	ldr	r4, [r2, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fc fdc7 	bl	80056e6 <lwip_htonl>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	6863      	ldr	r3, [r4, #4]
 8008b5e:	4a45      	ldr	r2, [pc, #276]	; (8008c74 <tcp_input+0x2ac>)
 8008b60:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b62:	4b3c      	ldr	r3, [pc, #240]	; (8008c54 <tcp_input+0x28c>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	4a3a      	ldr	r2, [pc, #232]	; (8008c54 <tcp_input+0x28c>)
 8008b6a:	6814      	ldr	r4, [r2, #0]
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fc fdba 	bl	80056e6 <lwip_htonl>
 8008b72:	4603      	mov	r3, r0
 8008b74:	60a3      	str	r3, [r4, #8]
 8008b76:	68a3      	ldr	r3, [r4, #8]
 8008b78:	4a3f      	ldr	r2, [pc, #252]	; (8008c78 <tcp_input+0x2b0>)
 8008b7a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008b7c:	4b35      	ldr	r3, [pc, #212]	; (8008c54 <tcp_input+0x28c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	89db      	ldrh	r3, [r3, #14]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	4a33      	ldr	r2, [pc, #204]	; (8008c54 <tcp_input+0x28c>)
 8008b86:	6814      	ldr	r4, [r2, #0]
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fc fd97 	bl	80056bc <lwip_htons>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008b92:	4b30      	ldr	r3, [pc, #192]	; (8008c54 <tcp_input+0x28c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	899b      	ldrh	r3, [r3, #12]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fc fd8e 	bl	80056bc <lwip_htons>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ba8:	b2da      	uxtb	r2, r3
 8008baa:	4b34      	ldr	r3, [pc, #208]	; (8008c7c <tcp_input+0x2b4>)
 8008bac:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	891a      	ldrh	r2, [r3, #8]
 8008bb2:	4b33      	ldr	r3, [pc, #204]	; (8008c80 <tcp_input+0x2b8>)
 8008bb4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008bb6:	4b31      	ldr	r3, [pc, #196]	; (8008c7c <tcp_input+0x2b4>)
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0303 	and.w	r3, r3, #3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00c      	beq.n	8008bdc <tcp_input+0x214>
    tcplen++;
 8008bc2:	4b2f      	ldr	r3, [pc, #188]	; (8008c80 <tcp_input+0x2b8>)
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	b29a      	uxth	r2, r3
 8008bca:	4b2d      	ldr	r3, [pc, #180]	; (8008c80 <tcp_input+0x2b8>)
 8008bcc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	891a      	ldrh	r2, [r3, #8]
 8008bd2:	4b2b      	ldr	r3, [pc, #172]	; (8008c80 <tcp_input+0x2b8>)
 8008bd4:	881b      	ldrh	r3, [r3, #0]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	f200 82e6 	bhi.w	80091a8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008be0:	4b28      	ldr	r3, [pc, #160]	; (8008c84 <tcp_input+0x2bc>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	61fb      	str	r3, [r7, #28]
 8008be6:	e09d      	b.n	8008d24 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	7d1b      	ldrb	r3, [r3, #20]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d105      	bne.n	8008bfc <tcp_input+0x234>
 8008bf0:	4b15      	ldr	r3, [pc, #84]	; (8008c48 <tcp_input+0x280>)
 8008bf2:	22fb      	movs	r2, #251	; 0xfb
 8008bf4:	4924      	ldr	r1, [pc, #144]	; (8008c88 <tcp_input+0x2c0>)
 8008bf6:	4816      	ldr	r0, [pc, #88]	; (8008c50 <tcp_input+0x288>)
 8008bf8:	f006 fb72 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	7d1b      	ldrb	r3, [r3, #20]
 8008c00:	2b0a      	cmp	r3, #10
 8008c02:	d105      	bne.n	8008c10 <tcp_input+0x248>
 8008c04:	4b10      	ldr	r3, [pc, #64]	; (8008c48 <tcp_input+0x280>)
 8008c06:	22fc      	movs	r2, #252	; 0xfc
 8008c08:	4920      	ldr	r1, [pc, #128]	; (8008c8c <tcp_input+0x2c4>)
 8008c0a:	4811      	ldr	r0, [pc, #68]	; (8008c50 <tcp_input+0x288>)
 8008c0c:	f006 fb68 	bl	800f2e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	7d1b      	ldrb	r3, [r3, #20]
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d105      	bne.n	8008c24 <tcp_input+0x25c>
 8008c18:	4b0b      	ldr	r3, [pc, #44]	; (8008c48 <tcp_input+0x280>)
 8008c1a:	22fd      	movs	r2, #253	; 0xfd
 8008c1c:	491c      	ldr	r1, [pc, #112]	; (8008c90 <tcp_input+0x2c8>)
 8008c1e:	480c      	ldr	r0, [pc, #48]	; (8008c50 <tcp_input+0x288>)
 8008c20:	f006 fb5e 	bl	800f2e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	7a1b      	ldrb	r3, [r3, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d033      	beq.n	8008c94 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	7a1a      	ldrb	r2, [r3, #8]
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <tcp_input+0x290>)
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c38:	3301      	adds	r3, #1
 8008c3a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d029      	beq.n	8008c94 <tcp_input+0x2cc>
      prev = pcb;
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	61bb      	str	r3, [r7, #24]
      continue;
 8008c44:	e06b      	b.n	8008d1e <tcp_input+0x356>
 8008c46:	bf00      	nop
 8008c48:	08011350 	.word	0x08011350
 8008c4c:	08011384 	.word	0x08011384
 8008c50:	0801139c 	.word	0x0801139c
 8008c54:	200087f8 	.word	0x200087f8
 8008c58:	20005260 	.word	0x20005260
 8008c5c:	200087fc 	.word	0x200087fc
 8008c60:	20008800 	.word	0x20008800
 8008c64:	200087fe 	.word	0x200087fe
 8008c68:	080113c4 	.word	0x080113c4
 8008c6c:	080113d4 	.word	0x080113d4
 8008c70:	080113e0 	.word	0x080113e0
 8008c74:	20008808 	.word	0x20008808
 8008c78:	2000880c 	.word	0x2000880c
 8008c7c:	20008814 	.word	0x20008814
 8008c80:	20008812 	.word	0x20008812
 8008c84:	200087dc 	.word	0x200087dc
 8008c88:	08011400 	.word	0x08011400
 8008c8c:	08011428 	.word	0x08011428
 8008c90:	08011454 	.word	0x08011454
    }

    if (pcb->remote_port == tcphdr->src &&
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	8b1a      	ldrh	r2, [r3, #24]
 8008c98:	4b72      	ldr	r3, [pc, #456]	; (8008e64 <tcp_input+0x49c>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	881b      	ldrh	r3, [r3, #0]
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d13a      	bne.n	8008d1a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	8ada      	ldrh	r2, [r3, #22]
 8008ca8:	4b6e      	ldr	r3, [pc, #440]	; (8008e64 <tcp_input+0x49c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	885b      	ldrh	r3, [r3, #2]
 8008cae:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d132      	bne.n	8008d1a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	4b6b      	ldr	r3, [pc, #428]	; (8008e68 <tcp_input+0x4a0>)
 8008cba:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d12c      	bne.n	8008d1a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	681a      	ldr	r2, [r3, #0]
 8008cc4:	4b68      	ldr	r3, [pc, #416]	; (8008e68 <tcp_input+0x4a0>)
 8008cc6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d126      	bne.n	8008d1a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d106      	bne.n	8008ce4 <tcp_input+0x31c>
 8008cd6:	4b65      	ldr	r3, [pc, #404]	; (8008e6c <tcp_input+0x4a4>)
 8008cd8:	f240 120d 	movw	r2, #269	; 0x10d
 8008cdc:	4964      	ldr	r1, [pc, #400]	; (8008e70 <tcp_input+0x4a8>)
 8008cde:	4865      	ldr	r0, [pc, #404]	; (8008e74 <tcp_input+0x4ac>)
 8008ce0:	f006 fafe 	bl	800f2e0 <iprintf>
      if (prev != NULL) {
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <tcp_input+0x338>
        prev->next = pcb->next;
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008cf2:	4b61      	ldr	r3, [pc, #388]	; (8008e78 <tcp_input+0x4b0>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008cfa:	4a5f      	ldr	r2, [pc, #380]	; (8008e78 <tcp_input+0x4b0>)
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	69fa      	ldr	r2, [r7, #28]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d111      	bne.n	8008d2e <tcp_input+0x366>
 8008d0a:	4b58      	ldr	r3, [pc, #352]	; (8008e6c <tcp_input+0x4a4>)
 8008d0c:	f240 1215 	movw	r2, #277	; 0x115
 8008d10:	495a      	ldr	r1, [pc, #360]	; (8008e7c <tcp_input+0x4b4>)
 8008d12:	4858      	ldr	r0, [pc, #352]	; (8008e74 <tcp_input+0x4ac>)
 8008d14:	f006 fae4 	bl	800f2e0 <iprintf>
      break;
 8008d18:	e009      	b.n	8008d2e <tcp_input+0x366>
    }
    prev = pcb;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	61fb      	str	r3, [r7, #28]
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f47f af5e 	bne.w	8008be8 <tcp_input+0x220>
 8008d2c:	e000      	b.n	8008d30 <tcp_input+0x368>
      break;
 8008d2e:	bf00      	nop
  }

  if (pcb == NULL) {
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f040 80aa 	bne.w	8008e8c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d38:	4b51      	ldr	r3, [pc, #324]	; (8008e80 <tcp_input+0x4b8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	61fb      	str	r3, [r7, #28]
 8008d3e:	e03f      	b.n	8008dc0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	7d1b      	ldrb	r3, [r3, #20]
 8008d44:	2b0a      	cmp	r3, #10
 8008d46:	d006      	beq.n	8008d56 <tcp_input+0x38e>
 8008d48:	4b48      	ldr	r3, [pc, #288]	; (8008e6c <tcp_input+0x4a4>)
 8008d4a:	f240 121f 	movw	r2, #287	; 0x11f
 8008d4e:	494d      	ldr	r1, [pc, #308]	; (8008e84 <tcp_input+0x4bc>)
 8008d50:	4848      	ldr	r0, [pc, #288]	; (8008e74 <tcp_input+0x4ac>)
 8008d52:	f006 fac5 	bl	800f2e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	7a1b      	ldrb	r3, [r3, #8]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d009      	beq.n	8008d72 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	7a1a      	ldrb	r2, [r3, #8]
 8008d62:	4b41      	ldr	r3, [pc, #260]	; (8008e68 <tcp_input+0x4a0>)
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d122      	bne.n	8008db8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	8b1a      	ldrh	r2, [r3, #24]
 8008d76:	4b3b      	ldr	r3, [pc, #236]	; (8008e64 <tcp_input+0x49c>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	881b      	ldrh	r3, [r3, #0]
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d11b      	bne.n	8008dba <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	8ada      	ldrh	r2, [r3, #22]
 8008d86:	4b37      	ldr	r3, [pc, #220]	; (8008e64 <tcp_input+0x49c>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	885b      	ldrh	r3, [r3, #2]
 8008d8c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d113      	bne.n	8008dba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	685a      	ldr	r2, [r3, #4]
 8008d96:	4b34      	ldr	r3, [pc, #208]	; (8008e68 <tcp_input+0x4a0>)
 8008d98:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d10d      	bne.n	8008dba <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b31      	ldr	r3, [pc, #196]	; (8008e68 <tcp_input+0x4a0>)
 8008da4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d107      	bne.n	8008dba <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008daa:	69f8      	ldr	r0, [r7, #28]
 8008dac:	f000 fb56 	bl	800945c <tcp_timewait_input>
        }
        pbuf_free(p);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f7fd ffe1 	bl	8006d78 <pbuf_free>
        return;
 8008db6:	e1fd      	b.n	80091b4 <tcp_input+0x7ec>
        continue;
 8008db8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	61fb      	str	r3, [r7, #28]
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1bc      	bne.n	8008d40 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dca:	4b2f      	ldr	r3, [pc, #188]	; (8008e88 <tcp_input+0x4c0>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	617b      	str	r3, [r7, #20]
 8008dd0:	e02a      	b.n	8008e28 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	7a1b      	ldrb	r3, [r3, #8]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	7a1a      	ldrb	r2, [r3, #8]
 8008dde:	4b22      	ldr	r3, [pc, #136]	; (8008e68 <tcp_input+0x4a0>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008de6:	3301      	adds	r3, #1
 8008de8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d002      	beq.n	8008df4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	61bb      	str	r3, [r7, #24]
        continue;
 8008df2:	e016      	b.n	8008e22 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	8ada      	ldrh	r2, [r3, #22]
 8008df8:	4b1a      	ldr	r3, [pc, #104]	; (8008e64 <tcp_input+0x49c>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	885b      	ldrh	r3, [r3, #2]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d10c      	bne.n	8008e1e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <tcp_input+0x4a0>)
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d00f      	beq.n	8008e30 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d00d      	beq.n	8008e32 <tcp_input+0x46a>
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d009      	beq.n	8008e32 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1d1      	bne.n	8008dd2 <tcp_input+0x40a>
 8008e2e:	e000      	b.n	8008e32 <tcp_input+0x46a>
            break;
 8008e30:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d029      	beq.n	8008e8c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008e38:	69bb      	ldr	r3, [r7, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00a      	beq.n	8008e54 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	69bb      	ldr	r3, [r7, #24]
 8008e44:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008e46:	4b10      	ldr	r3, [pc, #64]	; (8008e88 <tcp_input+0x4c0>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008e4e:	4a0e      	ldr	r2, [pc, #56]	; (8008e88 <tcp_input+0x4c0>)
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008e54:	6978      	ldr	r0, [r7, #20]
 8008e56:	f000 fa03 	bl	8009260 <tcp_listen_input>
      }
      pbuf_free(p);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f7fd ff8c 	bl	8006d78 <pbuf_free>
      return;
 8008e60:	e1a8      	b.n	80091b4 <tcp_input+0x7ec>
 8008e62:	bf00      	nop
 8008e64:	200087f8 	.word	0x200087f8
 8008e68:	20005260 	.word	0x20005260
 8008e6c:	08011350 	.word	0x08011350
 8008e70:	0801147c 	.word	0x0801147c
 8008e74:	0801139c 	.word	0x0801139c
 8008e78:	200087dc 	.word	0x200087dc
 8008e7c:	080114a8 	.word	0x080114a8
 8008e80:	200087e0 	.word	0x200087e0
 8008e84:	080114d4 	.word	0x080114d4
 8008e88:	200087d8 	.word	0x200087d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008e8c:	69fb      	ldr	r3, [r7, #28]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8158 	beq.w	8009144 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008e94:	4b95      	ldr	r3, [pc, #596]	; (80090ec <tcp_input+0x724>)
 8008e96:	2200      	movs	r2, #0
 8008e98:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	891a      	ldrh	r2, [r3, #8]
 8008e9e:	4b93      	ldr	r3, [pc, #588]	; (80090ec <tcp_input+0x724>)
 8008ea0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008ea2:	4a92      	ldr	r2, [pc, #584]	; (80090ec <tcp_input+0x724>)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008ea8:	4b91      	ldr	r3, [pc, #580]	; (80090f0 <tcp_input+0x728>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a8f      	ldr	r2, [pc, #572]	; (80090ec <tcp_input+0x724>)
 8008eae:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008eb0:	4b90      	ldr	r3, [pc, #576]	; (80090f4 <tcp_input+0x72c>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008eb6:	4b90      	ldr	r3, [pc, #576]	; (80090f8 <tcp_input+0x730>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008ebc:	4b8f      	ldr	r3, [pc, #572]	; (80090fc <tcp_input+0x734>)
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008ec2:	4b8f      	ldr	r3, [pc, #572]	; (8009100 <tcp_input+0x738>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	f003 0308 	and.w	r3, r3, #8
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d006      	beq.n	8008edc <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	7b5b      	ldrb	r3, [r3, #13]
 8008ed2:	f043 0301 	orr.w	r3, r3, #1
 8008ed6:	b2da      	uxtb	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d017      	beq.n	8008f14 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ee4:	69f8      	ldr	r0, [r7, #28]
 8008ee6:	f7ff f929 	bl	800813c <tcp_process_refused_data>
 8008eea:	4603      	mov	r3, r0
 8008eec:	f113 0f0d 	cmn.w	r3, #13
 8008ef0:	d007      	beq.n	8008f02 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00c      	beq.n	8008f14 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008efa:	4b82      	ldr	r3, [pc, #520]	; (8009104 <tcp_input+0x73c>)
 8008efc:	881b      	ldrh	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d008      	beq.n	8008f14 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f040 80e3 	bne.w	80090d2 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008f0c:	69f8      	ldr	r0, [r7, #28]
 8008f0e:	f003 f9ad 	bl	800c26c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008f12:	e0de      	b.n	80090d2 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008f14:	4a7c      	ldr	r2, [pc, #496]	; (8009108 <tcp_input+0x740>)
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008f1a:	69f8      	ldr	r0, [r7, #28]
 8008f1c:	f000 fb18 	bl	8009550 <tcp_process>
 8008f20:	4603      	mov	r3, r0
 8008f22:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008f24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f28:	f113 0f0d 	cmn.w	r3, #13
 8008f2c:	f000 80d3 	beq.w	80090d6 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008f30:	4b71      	ldr	r3, [pc, #452]	; (80090f8 <tcp_input+0x730>)
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	f003 0308 	and.w	r3, r3, #8
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d015      	beq.n	8008f68 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f3c:	69fb      	ldr	r3, [r7, #28]
 8008f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d008      	beq.n	8008f58 <tcp_input+0x590>
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f4c:	69fa      	ldr	r2, [r7, #28]
 8008f4e:	6912      	ldr	r2, [r2, #16]
 8008f50:	f06f 010d 	mvn.w	r1, #13
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f58:	69f9      	ldr	r1, [r7, #28]
 8008f5a:	486c      	ldr	r0, [pc, #432]	; (800910c <tcp_input+0x744>)
 8008f5c:	f7ff fbbc 	bl	80086d8 <tcp_pcb_remove>
        tcp_free(pcb);
 8008f60:	69f8      	ldr	r0, [r7, #28]
 8008f62:	f7fe f9a9 	bl	80072b8 <tcp_free>
 8008f66:	e0da      	b.n	800911e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008f6c:	4b63      	ldr	r3, [pc, #396]	; (80090fc <tcp_input+0x734>)
 8008f6e:	881b      	ldrh	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d01d      	beq.n	8008fb0 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008f74:	4b61      	ldr	r3, [pc, #388]	; (80090fc <tcp_input+0x734>)
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008f7a:	69fb      	ldr	r3, [r7, #28]
 8008f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d00a      	beq.n	8008f9a <tcp_input+0x5d2>
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f8a:	69fa      	ldr	r2, [r7, #28]
 8008f8c:	6910      	ldr	r0, [r2, #16]
 8008f8e:	89fa      	ldrh	r2, [r7, #14]
 8008f90:	69f9      	ldr	r1, [r7, #28]
 8008f92:	4798      	blx	r3
 8008f94:	4603      	mov	r3, r0
 8008f96:	74fb      	strb	r3, [r7, #19]
 8008f98:	e001      	b.n	8008f9e <tcp_input+0x5d6>
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008fa2:	f113 0f0d 	cmn.w	r3, #13
 8008fa6:	f000 8098 	beq.w	80090da <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008faa:	4b54      	ldr	r3, [pc, #336]	; (80090fc <tcp_input+0x734>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008fb0:	69f8      	ldr	r0, [r7, #28]
 8008fb2:	f000 f915 	bl	80091e0 <tcp_input_delayed_close>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f040 8090 	bne.w	80090de <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008fbe:	4b4d      	ldr	r3, [pc, #308]	; (80090f4 <tcp_input+0x72c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d041      	beq.n	800904a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d006      	beq.n	8008fdc <tcp_input+0x614>
 8008fce:	4b50      	ldr	r3, [pc, #320]	; (8009110 <tcp_input+0x748>)
 8008fd0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008fd4:	494f      	ldr	r1, [pc, #316]	; (8009114 <tcp_input+0x74c>)
 8008fd6:	4850      	ldr	r0, [pc, #320]	; (8009118 <tcp_input+0x750>)
 8008fd8:	f006 f982 	bl	800f2e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	8b5b      	ldrh	r3, [r3, #26]
 8008fe0:	f003 0310 	and.w	r3, r3, #16
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d008      	beq.n	8008ffa <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008fe8:	4b42      	ldr	r3, [pc, #264]	; (80090f4 <tcp_input+0x72c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fd fec3 	bl	8006d78 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008ff2:	69f8      	ldr	r0, [r7, #28]
 8008ff4:	f7fe fc48 	bl	8007888 <tcp_abort>
            goto aborted;
 8008ff8:	e091      	b.n	800911e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008ffa:	69fb      	ldr	r3, [r7, #28]
 8008ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00c      	beq.n	800901e <tcp_input+0x656>
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	6918      	ldr	r0, [r3, #16]
 800900e:	4b39      	ldr	r3, [pc, #228]	; (80090f4 <tcp_input+0x72c>)
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	2300      	movs	r3, #0
 8009014:	69f9      	ldr	r1, [r7, #28]
 8009016:	47a0      	blx	r4
 8009018:	4603      	mov	r3, r0
 800901a:	74fb      	strb	r3, [r7, #19]
 800901c:	e008      	b.n	8009030 <tcp_input+0x668>
 800901e:	4b35      	ldr	r3, [pc, #212]	; (80090f4 <tcp_input+0x72c>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	2300      	movs	r3, #0
 8009024:	69f9      	ldr	r1, [r7, #28]
 8009026:	2000      	movs	r0, #0
 8009028:	f7ff f95e 	bl	80082e8 <tcp_recv_null>
 800902c:	4603      	mov	r3, r0
 800902e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009030:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009034:	f113 0f0d 	cmn.w	r3, #13
 8009038:	d053      	beq.n	80090e2 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800903a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009042:	4b2c      	ldr	r3, [pc, #176]	; (80090f4 <tcp_input+0x72c>)
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800904a:	4b2b      	ldr	r3, [pc, #172]	; (80090f8 <tcp_input+0x730>)
 800904c:	781b      	ldrb	r3, [r3, #0]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d030      	beq.n	80090b8 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800905a:	2b00      	cmp	r3, #0
 800905c:	d009      	beq.n	8009072 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800905e:	69fb      	ldr	r3, [r7, #28]
 8009060:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009062:	7b5a      	ldrb	r2, [r3, #13]
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009068:	f042 0220 	orr.w	r2, r2, #32
 800906c:	b2d2      	uxtb	r2, r2
 800906e:	735a      	strb	r2, [r3, #13]
 8009070:	e022      	b.n	80090b8 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009076:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800907a:	d005      	beq.n	8009088 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009080:	3301      	adds	r3, #1
 8009082:	b29a      	uxth	r2, r3
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800908e:	2b00      	cmp	r3, #0
 8009090:	d00b      	beq.n	80090aa <tcp_input+0x6e2>
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	6918      	ldr	r0, [r3, #16]
 800909c:	2300      	movs	r3, #0
 800909e:	2200      	movs	r2, #0
 80090a0:	69f9      	ldr	r1, [r7, #28]
 80090a2:	47a0      	blx	r4
 80090a4:	4603      	mov	r3, r0
 80090a6:	74fb      	strb	r3, [r7, #19]
 80090a8:	e001      	b.n	80090ae <tcp_input+0x6e6>
 80090aa:	2300      	movs	r3, #0
 80090ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80090ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090b2:	f113 0f0d 	cmn.w	r3, #13
 80090b6:	d016      	beq.n	80090e6 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80090b8:	4b13      	ldr	r3, [pc, #76]	; (8009108 <tcp_input+0x740>)
 80090ba:	2200      	movs	r2, #0
 80090bc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80090be:	69f8      	ldr	r0, [r7, #28]
 80090c0:	f000 f88e 	bl	80091e0 <tcp_input_delayed_close>
 80090c4:	4603      	mov	r3, r0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d128      	bne.n	800911c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80090ca:	69f8      	ldr	r0, [r7, #28]
 80090cc:	f002 fac8 	bl	800b660 <tcp_output>
 80090d0:	e025      	b.n	800911e <tcp_input+0x756>
        goto aborted;
 80090d2:	bf00      	nop
 80090d4:	e023      	b.n	800911e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80090d6:	bf00      	nop
 80090d8:	e021      	b.n	800911e <tcp_input+0x756>
              goto aborted;
 80090da:	bf00      	nop
 80090dc:	e01f      	b.n	800911e <tcp_input+0x756>
          goto aborted;
 80090de:	bf00      	nop
 80090e0:	e01d      	b.n	800911e <tcp_input+0x756>
            goto aborted;
 80090e2:	bf00      	nop
 80090e4:	e01b      	b.n	800911e <tcp_input+0x756>
              goto aborted;
 80090e6:	bf00      	nop
 80090e8:	e019      	b.n	800911e <tcp_input+0x756>
 80090ea:	bf00      	nop
 80090ec:	200087e8 	.word	0x200087e8
 80090f0:	200087f8 	.word	0x200087f8
 80090f4:	20008818 	.word	0x20008818
 80090f8:	20008815 	.word	0x20008815
 80090fc:	20008810 	.word	0x20008810
 8009100:	20008814 	.word	0x20008814
 8009104:	20008812 	.word	0x20008812
 8009108:	2000881c 	.word	0x2000881c
 800910c:	200087dc 	.word	0x200087dc
 8009110:	08011350 	.word	0x08011350
 8009114:	08011504 	.word	0x08011504
 8009118:	0801139c 	.word	0x0801139c
          goto aborted;
 800911c:	bf00      	nop
    tcp_input_pcb = NULL;
 800911e:	4b27      	ldr	r3, [pc, #156]	; (80091bc <tcp_input+0x7f4>)
 8009120:	2200      	movs	r2, #0
 8009122:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009124:	4b26      	ldr	r3, [pc, #152]	; (80091c0 <tcp_input+0x7f8>)
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800912a:	4b26      	ldr	r3, [pc, #152]	; (80091c4 <tcp_input+0x7fc>)
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d03f      	beq.n	80091b2 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009132:	4b24      	ldr	r3, [pc, #144]	; (80091c4 <tcp_input+0x7fc>)
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	4618      	mov	r0, r3
 8009138:	f7fd fe1e 	bl	8006d78 <pbuf_free>
      inseg.p = NULL;
 800913c:	4b21      	ldr	r3, [pc, #132]	; (80091c4 <tcp_input+0x7fc>)
 800913e:	2200      	movs	r2, #0
 8009140:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009142:	e036      	b.n	80091b2 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009144:	4b20      	ldr	r3, [pc, #128]	; (80091c8 <tcp_input+0x800>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	899b      	ldrh	r3, [r3, #12]
 800914a:	b29b      	uxth	r3, r3
 800914c:	4618      	mov	r0, r3
 800914e:	f7fc fab5 	bl	80056bc <lwip_htons>
 8009152:	4603      	mov	r3, r0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	f003 0304 	and.w	r3, r3, #4
 800915a:	2b00      	cmp	r3, #0
 800915c:	d118      	bne.n	8009190 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800915e:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <tcp_input+0x804>)
 8009160:	6819      	ldr	r1, [r3, #0]
 8009162:	4b1b      	ldr	r3, [pc, #108]	; (80091d0 <tcp_input+0x808>)
 8009164:	881b      	ldrh	r3, [r3, #0]
 8009166:	461a      	mov	r2, r3
 8009168:	4b1a      	ldr	r3, [pc, #104]	; (80091d4 <tcp_input+0x80c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800916e:	4b16      	ldr	r3, [pc, #88]	; (80091c8 <tcp_input+0x800>)
 8009170:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009172:	885b      	ldrh	r3, [r3, #2]
 8009174:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009176:	4a14      	ldr	r2, [pc, #80]	; (80091c8 <tcp_input+0x800>)
 8009178:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	b292      	uxth	r2, r2
 800917e:	9202      	str	r2, [sp, #8]
 8009180:	9301      	str	r3, [sp, #4]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <tcp_input+0x810>)
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	4b15      	ldr	r3, [pc, #84]	; (80091dc <tcp_input+0x814>)
 8009188:	4602      	mov	r2, r0
 800918a:	2000      	movs	r0, #0
 800918c:	f003 f81c 	bl	800c1c8 <tcp_rst>
    pbuf_free(p);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7fd fdf1 	bl	8006d78 <pbuf_free>
  return;
 8009196:	e00c      	b.n	80091b2 <tcp_input+0x7ea>
    goto dropped;
 8009198:	bf00      	nop
 800919a:	e006      	b.n	80091aa <tcp_input+0x7e2>
    goto dropped;
 800919c:	bf00      	nop
 800919e:	e004      	b.n	80091aa <tcp_input+0x7e2>
    goto dropped;
 80091a0:	bf00      	nop
 80091a2:	e002      	b.n	80091aa <tcp_input+0x7e2>
      goto dropped;
 80091a4:	bf00      	nop
 80091a6:	e000      	b.n	80091aa <tcp_input+0x7e2>
      goto dropped;
 80091a8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fd fde4 	bl	8006d78 <pbuf_free>
 80091b0:	e000      	b.n	80091b4 <tcp_input+0x7ec>
  return;
 80091b2:	bf00      	nop
}
 80091b4:	3724      	adds	r7, #36	; 0x24
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd90      	pop	{r4, r7, pc}
 80091ba:	bf00      	nop
 80091bc:	2000881c 	.word	0x2000881c
 80091c0:	20008818 	.word	0x20008818
 80091c4:	200087e8 	.word	0x200087e8
 80091c8:	200087f8 	.word	0x200087f8
 80091cc:	2000880c 	.word	0x2000880c
 80091d0:	20008812 	.word	0x20008812
 80091d4:	20008808 	.word	0x20008808
 80091d8:	20005270 	.word	0x20005270
 80091dc:	20005274 	.word	0x20005274

080091e0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <tcp_input_delayed_close+0x1c>
 80091ee:	4b17      	ldr	r3, [pc, #92]	; (800924c <tcp_input_delayed_close+0x6c>)
 80091f0:	f240 225a 	movw	r2, #602	; 0x25a
 80091f4:	4916      	ldr	r1, [pc, #88]	; (8009250 <tcp_input_delayed_close+0x70>)
 80091f6:	4817      	ldr	r0, [pc, #92]	; (8009254 <tcp_input_delayed_close+0x74>)
 80091f8:	f006 f872 	bl	800f2e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80091fc:	4b16      	ldr	r3, [pc, #88]	; (8009258 <tcp_input_delayed_close+0x78>)
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d01c      	beq.n	8009242 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	8b5b      	ldrh	r3, [r3, #26]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10d      	bne.n	8009230 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800921a:	2b00      	cmp	r3, #0
 800921c:	d008      	beq.n	8009230 <tcp_input_delayed_close+0x50>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	6912      	ldr	r2, [r2, #16]
 8009228:	f06f 010e 	mvn.w	r1, #14
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	480a      	ldr	r0, [pc, #40]	; (800925c <tcp_input_delayed_close+0x7c>)
 8009234:	f7ff fa50 	bl	80086d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f7fe f83d 	bl	80072b8 <tcp_free>
    return 1;
 800923e:	2301      	movs	r3, #1
 8009240:	e000      	b.n	8009244 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	08011350 	.word	0x08011350
 8009250:	08011520 	.word	0x08011520
 8009254:	0801139c 	.word	0x0801139c
 8009258:	20008815 	.word	0x20008815
 800925c:	200087dc 	.word	0x200087dc

08009260 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009260:	b590      	push	{r4, r7, lr}
 8009262:	b08b      	sub	sp, #44	; 0x2c
 8009264:	af04      	add	r7, sp, #16
 8009266:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8009268:	4b6f      	ldr	r3, [pc, #444]	; (8009428 <tcp_listen_input+0x1c8>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 0304 	and.w	r3, r3, #4
 8009270:	2b00      	cmp	r3, #0
 8009272:	f040 80d2 	bne.w	800941a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <tcp_listen_input+0x2a>
 800927c:	4b6b      	ldr	r3, [pc, #428]	; (800942c <tcp_listen_input+0x1cc>)
 800927e:	f240 2281 	movw	r2, #641	; 0x281
 8009282:	496b      	ldr	r1, [pc, #428]	; (8009430 <tcp_listen_input+0x1d0>)
 8009284:	486b      	ldr	r0, [pc, #428]	; (8009434 <tcp_listen_input+0x1d4>)
 8009286:	f006 f82b 	bl	800f2e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800928a:	4b67      	ldr	r3, [pc, #412]	; (8009428 <tcp_listen_input+0x1c8>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	f003 0310 	and.w	r3, r3, #16
 8009292:	2b00      	cmp	r3, #0
 8009294:	d019      	beq.n	80092ca <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009296:	4b68      	ldr	r3, [pc, #416]	; (8009438 <tcp_listen_input+0x1d8>)
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	4b68      	ldr	r3, [pc, #416]	; (800943c <tcp_listen_input+0x1dc>)
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	4b67      	ldr	r3, [pc, #412]	; (8009440 <tcp_listen_input+0x1e0>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092a6:	4b67      	ldr	r3, [pc, #412]	; (8009444 <tcp_listen_input+0x1e4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092aa:	885b      	ldrh	r3, [r3, #2]
 80092ac:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092ae:	4a65      	ldr	r2, [pc, #404]	; (8009444 <tcp_listen_input+0x1e4>)
 80092b0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092b2:	8812      	ldrh	r2, [r2, #0]
 80092b4:	b292      	uxth	r2, r2
 80092b6:	9202      	str	r2, [sp, #8]
 80092b8:	9301      	str	r3, [sp, #4]
 80092ba:	4b63      	ldr	r3, [pc, #396]	; (8009448 <tcp_listen_input+0x1e8>)
 80092bc:	9300      	str	r3, [sp, #0]
 80092be:	4b63      	ldr	r3, [pc, #396]	; (800944c <tcp_listen_input+0x1ec>)
 80092c0:	4602      	mov	r2, r0
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f002 ff80 	bl	800c1c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80092c8:	e0a9      	b.n	800941e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80092ca:	4b57      	ldr	r3, [pc, #348]	; (8009428 <tcp_listen_input+0x1c8>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	f003 0302 	and.w	r3, r3, #2
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80a3 	beq.w	800941e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7d5b      	ldrb	r3, [r3, #21]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7ff f927 	bl	8008530 <tcp_alloc>
 80092e2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d111      	bne.n	800930e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <tcp_listen_input+0xa8>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	6910      	ldr	r0, [r2, #16]
 80092fa:	f04f 32ff 	mov.w	r2, #4294967295
 80092fe:	2100      	movs	r1, #0
 8009300:	4798      	blx	r3
 8009302:	4603      	mov	r3, r0
 8009304:	73bb      	strb	r3, [r7, #14]
      return;
 8009306:	e08b      	b.n	8009420 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8009308:	23f0      	movs	r3, #240	; 0xf0
 800930a:	73bb      	strb	r3, [r7, #14]
      return;
 800930c:	e088      	b.n	8009420 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800930e:	4b50      	ldr	r3, [pc, #320]	; (8009450 <tcp_listen_input+0x1f0>)
 8009310:	695a      	ldr	r2, [r3, #20]
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8009316:	4b4e      	ldr	r3, [pc, #312]	; (8009450 <tcp_listen_input+0x1f0>)
 8009318:	691a      	ldr	r2, [r3, #16]
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	8ada      	ldrh	r2, [r3, #22]
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8009326:	4b47      	ldr	r3, [pc, #284]	; (8009444 <tcp_listen_input+0x1e4>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b29a      	uxth	r2, r3
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	2203      	movs	r2, #3
 8009336:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8009338:	4b41      	ldr	r3, [pc, #260]	; (8009440 <tcp_listen_input+0x1e0>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	1c5a      	adds	r2, r3, #1
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800934a:	6978      	ldr	r0, [r7, #20]
 800934c:	f7ff fa58 	bl	8008800 <tcp_next_iss>
 8009350:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	693a      	ldr	r2, [r7, #16]
 8009362:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	693a      	ldr	r2, [r7, #16]
 8009368:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800936a:	4b35      	ldr	r3, [pc, #212]	; (8009440 <tcp_listen_input+0x1e0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	1e5a      	subs	r2, r3, #1
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	691a      	ldr	r2, [r3, #16]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	7a5b      	ldrb	r3, [r3, #9]
 8009386:	f003 030c 	and.w	r3, r3, #12
 800938a:	b2da      	uxtb	r2, r3
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7a1a      	ldrb	r2, [r3, #8]
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8009398:	4b2e      	ldr	r3, [pc, #184]	; (8009454 <tcp_listen_input+0x1f4>)
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	60da      	str	r2, [r3, #12]
 80093a0:	4a2c      	ldr	r2, [pc, #176]	; (8009454 <tcp_listen_input+0x1f4>)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	6013      	str	r3, [r2, #0]
 80093a6:	f003 f8d1 	bl	800c54c <tcp_timer_needed>
 80093aa:	4b2b      	ldr	r3, [pc, #172]	; (8009458 <tcp_listen_input+0x1f8>)
 80093ac:	2201      	movs	r2, #1
 80093ae:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80093b0:	6978      	ldr	r0, [r7, #20]
 80093b2:	f001 fd8f 	bl	800aed4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80093b6:	4b23      	ldr	r3, [pc, #140]	; (8009444 <tcp_listen_input+0x1e4>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	89db      	ldrh	r3, [r3, #14]
 80093bc:	b29a      	uxth	r2, r3
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	3304      	adds	r3, #4
 80093d8:	4618      	mov	r0, r3
 80093da:	f004 fc95 	bl	800dd08 <ip4_route>
 80093de:	4601      	mov	r1, r0
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	3304      	adds	r3, #4
 80093e4:	461a      	mov	r2, r3
 80093e6:	4620      	mov	r0, r4
 80093e8:	f7ff fa30 	bl	800884c <tcp_eff_send_mss_netif>
 80093ec:	4603      	mov	r3, r0
 80093ee:	461a      	mov	r2, r3
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80093f4:	2112      	movs	r1, #18
 80093f6:	6978      	ldr	r0, [r7, #20]
 80093f8:	f002 f844 	bl	800b484 <tcp_enqueue_flags>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8009400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d004      	beq.n	8009412 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8009408:	2100      	movs	r1, #0
 800940a:	6978      	ldr	r0, [r7, #20]
 800940c:	f7fe f97e 	bl	800770c <tcp_abandon>
      return;
 8009410:	e006      	b.n	8009420 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009412:	6978      	ldr	r0, [r7, #20]
 8009414:	f002 f924 	bl	800b660 <tcp_output>
  return;
 8009418:	e001      	b.n	800941e <tcp_listen_input+0x1be>
    return;
 800941a:	bf00      	nop
 800941c:	e000      	b.n	8009420 <tcp_listen_input+0x1c0>
  return;
 800941e:	bf00      	nop
}
 8009420:	371c      	adds	r7, #28
 8009422:	46bd      	mov	sp, r7
 8009424:	bd90      	pop	{r4, r7, pc}
 8009426:	bf00      	nop
 8009428:	20008814 	.word	0x20008814
 800942c:	08011350 	.word	0x08011350
 8009430:	08011548 	.word	0x08011548
 8009434:	0801139c 	.word	0x0801139c
 8009438:	2000880c 	.word	0x2000880c
 800943c:	20008812 	.word	0x20008812
 8009440:	20008808 	.word	0x20008808
 8009444:	200087f8 	.word	0x200087f8
 8009448:	20005270 	.word	0x20005270
 800944c:	20005274 	.word	0x20005274
 8009450:	20005260 	.word	0x20005260
 8009454:	200087dc 	.word	0x200087dc
 8009458:	200087e4 	.word	0x200087e4

0800945c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b086      	sub	sp, #24
 8009460:	af04      	add	r7, sp, #16
 8009462:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009464:	4b2f      	ldr	r3, [pc, #188]	; (8009524 <tcp_timewait_input+0xc8>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	f003 0304 	and.w	r3, r3, #4
 800946c:	2b00      	cmp	r3, #0
 800946e:	d153      	bne.n	8009518 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d106      	bne.n	8009484 <tcp_timewait_input+0x28>
 8009476:	4b2c      	ldr	r3, [pc, #176]	; (8009528 <tcp_timewait_input+0xcc>)
 8009478:	f240 22ee 	movw	r2, #750	; 0x2ee
 800947c:	492b      	ldr	r1, [pc, #172]	; (800952c <tcp_timewait_input+0xd0>)
 800947e:	482c      	ldr	r0, [pc, #176]	; (8009530 <tcp_timewait_input+0xd4>)
 8009480:	f005 ff2e 	bl	800f2e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009484:	4b27      	ldr	r3, [pc, #156]	; (8009524 <tcp_timewait_input+0xc8>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d02a      	beq.n	80094e6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009490:	4b28      	ldr	r3, [pc, #160]	; (8009534 <tcp_timewait_input+0xd8>)
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	db2d      	blt.n	80094fa <tcp_timewait_input+0x9e>
 800949e:	4b25      	ldr	r3, [pc, #148]	; (8009534 <tcp_timewait_input+0xd8>)
 80094a0:	681a      	ldr	r2, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80094aa:	440b      	add	r3, r1
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dc23      	bgt.n	80094fa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094b2:	4b21      	ldr	r3, [pc, #132]	; (8009538 <tcp_timewait_input+0xdc>)
 80094b4:	6819      	ldr	r1, [r3, #0]
 80094b6:	4b21      	ldr	r3, [pc, #132]	; (800953c <tcp_timewait_input+0xe0>)
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <tcp_timewait_input+0xd8>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094c2:	4b1f      	ldr	r3, [pc, #124]	; (8009540 <tcp_timewait_input+0xe4>)
 80094c4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094c6:	885b      	ldrh	r3, [r3, #2]
 80094c8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094ca:	4a1d      	ldr	r2, [pc, #116]	; (8009540 <tcp_timewait_input+0xe4>)
 80094cc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ce:	8812      	ldrh	r2, [r2, #0]
 80094d0:	b292      	uxth	r2, r2
 80094d2:	9202      	str	r2, [sp, #8]
 80094d4:	9301      	str	r3, [sp, #4]
 80094d6:	4b1b      	ldr	r3, [pc, #108]	; (8009544 <tcp_timewait_input+0xe8>)
 80094d8:	9300      	str	r3, [sp, #0]
 80094da:	4b1b      	ldr	r3, [pc, #108]	; (8009548 <tcp_timewait_input+0xec>)
 80094dc:	4602      	mov	r2, r0
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f002 fe72 	bl	800c1c8 <tcp_rst>
      return;
 80094e4:	e01b      	b.n	800951e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80094e6:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <tcp_timewait_input+0xc8>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80094f2:	4b16      	ldr	r3, [pc, #88]	; (800954c <tcp_timewait_input+0xf0>)
 80094f4:	681a      	ldr	r2, [r3, #0]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80094fa:	4b10      	ldr	r3, [pc, #64]	; (800953c <tcp_timewait_input+0xe0>)
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00c      	beq.n	800951c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8b5b      	ldrh	r3, [r3, #26]
 8009506:	f043 0302 	orr.w	r3, r3, #2
 800950a:	b29a      	uxth	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f002 f8a5 	bl	800b660 <tcp_output>
  }
  return;
 8009516:	e001      	b.n	800951c <tcp_timewait_input+0xc0>
    return;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <tcp_timewait_input+0xc2>
  return;
 800951c:	bf00      	nop
}
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}
 8009524:	20008814 	.word	0x20008814
 8009528:	08011350 	.word	0x08011350
 800952c:	08011568 	.word	0x08011568
 8009530:	0801139c 	.word	0x0801139c
 8009534:	20008808 	.word	0x20008808
 8009538:	2000880c 	.word	0x2000880c
 800953c:	20008812 	.word	0x20008812
 8009540:	200087f8 	.word	0x200087f8
 8009544:	20005270 	.word	0x20005270
 8009548:	20005274 	.word	0x20005274
 800954c:	200087d0 	.word	0x200087d0

08009550 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009550:	b590      	push	{r4, r7, lr}
 8009552:	b08d      	sub	sp, #52	; 0x34
 8009554:	af04      	add	r7, sp, #16
 8009556:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d106      	bne.n	8009574 <tcp_process+0x24>
 8009566:	4b9d      	ldr	r3, [pc, #628]	; (80097dc <tcp_process+0x28c>)
 8009568:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800956c:	499c      	ldr	r1, [pc, #624]	; (80097e0 <tcp_process+0x290>)
 800956e:	489d      	ldr	r0, [pc, #628]	; (80097e4 <tcp_process+0x294>)
 8009570:	f005 feb6 	bl	800f2e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009574:	4b9c      	ldr	r3, [pc, #624]	; (80097e8 <tcp_process+0x298>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	f003 0304 	and.w	r3, r3, #4
 800957c:	2b00      	cmp	r3, #0
 800957e:	d04e      	beq.n	800961e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	7d1b      	ldrb	r3, [r3, #20]
 8009584:	2b02      	cmp	r3, #2
 8009586:	d108      	bne.n	800959a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800958c:	4b97      	ldr	r3, [pc, #604]	; (80097ec <tcp_process+0x29c>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d123      	bne.n	80095dc <tcp_process+0x8c>
        acceptable = 1;
 8009594:	2301      	movs	r3, #1
 8009596:	76fb      	strb	r3, [r7, #27]
 8009598:	e020      	b.n	80095dc <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800959e:	4b94      	ldr	r3, [pc, #592]	; (80097f0 <tcp_process+0x2a0>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d102      	bne.n	80095ac <tcp_process+0x5c>
        acceptable = 1;
 80095a6:	2301      	movs	r3, #1
 80095a8:	76fb      	strb	r3, [r7, #27]
 80095aa:	e017      	b.n	80095dc <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095ac:	4b90      	ldr	r3, [pc, #576]	; (80097f0 <tcp_process+0x2a0>)
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	db10      	blt.n	80095dc <tcp_process+0x8c>
 80095ba:	4b8d      	ldr	r3, [pc, #564]	; (80097f0 <tcp_process+0x2a0>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c2:	6879      	ldr	r1, [r7, #4]
 80095c4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095c6:	440b      	add	r3, r1
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dc06      	bgt.n	80095dc <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	8b5b      	ldrh	r3, [r3, #26]
 80095d2:	f043 0302 	orr.w	r3, r3, #2
 80095d6:	b29a      	uxth	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80095dc:	7efb      	ldrb	r3, [r7, #27]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d01b      	beq.n	800961a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	7d1b      	ldrb	r3, [r3, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d106      	bne.n	80095f8 <tcp_process+0xa8>
 80095ea:	4b7c      	ldr	r3, [pc, #496]	; (80097dc <tcp_process+0x28c>)
 80095ec:	f44f 724e 	mov.w	r2, #824	; 0x338
 80095f0:	4980      	ldr	r1, [pc, #512]	; (80097f4 <tcp_process+0x2a4>)
 80095f2:	487c      	ldr	r0, [pc, #496]	; (80097e4 <tcp_process+0x294>)
 80095f4:	f005 fe74 	bl	800f2e0 <iprintf>
      recv_flags |= TF_RESET;
 80095f8:	4b7f      	ldr	r3, [pc, #508]	; (80097f8 <tcp_process+0x2a8>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	f043 0308 	orr.w	r3, r3, #8
 8009600:	b2da      	uxtb	r2, r3
 8009602:	4b7d      	ldr	r3, [pc, #500]	; (80097f8 <tcp_process+0x2a8>)
 8009604:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	8b5b      	ldrh	r3, [r3, #26]
 800960a:	f023 0301 	bic.w	r3, r3, #1
 800960e:	b29a      	uxth	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009614:	f06f 030d 	mvn.w	r3, #13
 8009618:	e37a      	b.n	8009d10 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	e378      	b.n	8009d10 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800961e:	4b72      	ldr	r3, [pc, #456]	; (80097e8 <tcp_process+0x298>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	2b00      	cmp	r3, #0
 8009628:	d010      	beq.n	800964c <tcp_process+0xfc>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	7d1b      	ldrb	r3, [r3, #20]
 800962e:	2b02      	cmp	r3, #2
 8009630:	d00c      	beq.n	800964c <tcp_process+0xfc>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	7d1b      	ldrb	r3, [r3, #20]
 8009636:	2b03      	cmp	r3, #3
 8009638:	d008      	beq.n	800964c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	8b5b      	ldrh	r3, [r3, #26]
 800963e:	f043 0302 	orr.w	r3, r3, #2
 8009642:	b29a      	uxth	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8009648:	2300      	movs	r3, #0
 800964a:	e361      	b.n	8009d10 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	8b5b      	ldrh	r3, [r3, #26]
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	2b00      	cmp	r3, #0
 8009656:	d103      	bne.n	8009660 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8009658:	4b68      	ldr	r3, [pc, #416]	; (80097fc <tcp_process+0x2ac>)
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f001 fc2f 	bl	800aed4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	7d1b      	ldrb	r3, [r3, #20]
 800967a:	3b02      	subs	r3, #2
 800967c:	2b07      	cmp	r3, #7
 800967e:	f200 8337 	bhi.w	8009cf0 <tcp_process+0x7a0>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <tcp_process+0x138>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	080096a9 	.word	0x080096a9
 800968c:	080098d9 	.word	0x080098d9
 8009690:	08009a51 	.word	0x08009a51
 8009694:	08009a7b 	.word	0x08009a7b
 8009698:	08009b9f 	.word	0x08009b9f
 800969c:	08009a51 	.word	0x08009a51
 80096a0:	08009c2b 	.word	0x08009c2b
 80096a4:	08009cbb 	.word	0x08009cbb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80096a8:	4b4f      	ldr	r3, [pc, #316]	; (80097e8 <tcp_process+0x298>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	f003 0310 	and.w	r3, r3, #16
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	f000 80e4 	beq.w	800987e <tcp_process+0x32e>
 80096b6:	4b4c      	ldr	r3, [pc, #304]	; (80097e8 <tcp_process+0x298>)
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 80dd 	beq.w	800987e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	4b48      	ldr	r3, [pc, #288]	; (80097ec <tcp_process+0x29c>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	f040 80d5 	bne.w	800987e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80096d4:	4b46      	ldr	r3, [pc, #280]	; (80097f0 <tcp_process+0x2a0>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80096e6:	4b41      	ldr	r3, [pc, #260]	; (80097ec <tcp_process+0x29c>)
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80096ee:	4b44      	ldr	r3, [pc, #272]	; (8009800 <tcp_process+0x2b0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	89db      	ldrh	r3, [r3, #14]
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009708:	4b39      	ldr	r3, [pc, #228]	; (80097f0 <tcp_process+0x2a0>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2204      	movs	r2, #4
 8009716:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f004 faf1 	bl	800dd08 <ip4_route>
 8009726:	4601      	mov	r1, r0
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3304      	adds	r3, #4
 800972c:	461a      	mov	r2, r3
 800972e:	4620      	mov	r0, r4
 8009730:	f7ff f88c 	bl	800884c <tcp_eff_send_mss_netif>
 8009734:	4603      	mov	r3, r0
 8009736:	461a      	mov	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009740:	009a      	lsls	r2, r3, #2
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	f241 111c 	movw	r1, #4380	; 0x111c
 800974c:	428b      	cmp	r3, r1
 800974e:	bf38      	it	cc
 8009750:	460b      	movcc	r3, r1
 8009752:	429a      	cmp	r2, r3
 8009754:	d204      	bcs.n	8009760 <tcp_process+0x210>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	b29b      	uxth	r3, r3
 800975e:	e00d      	b.n	800977c <tcp_process+0x22c>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009764:	005b      	lsls	r3, r3, #1
 8009766:	f241 121c 	movw	r2, #4380	; 0x111c
 800976a:	4293      	cmp	r3, r2
 800976c:	d904      	bls.n	8009778 <tcp_process+0x228>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009772:	005b      	lsls	r3, r3, #1
 8009774:	b29b      	uxth	r3, r3
 8009776:	e001      	b.n	800977c <tcp_process+0x22c>
 8009778:	f241 131c 	movw	r3, #4380	; 0x111c
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009788:	2b00      	cmp	r3, #0
 800978a:	d106      	bne.n	800979a <tcp_process+0x24a>
 800978c:	4b13      	ldr	r3, [pc, #76]	; (80097dc <tcp_process+0x28c>)
 800978e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009792:	491c      	ldr	r1, [pc, #112]	; (8009804 <tcp_process+0x2b4>)
 8009794:	4813      	ldr	r0, [pc, #76]	; (80097e4 <tcp_process+0x294>)
 8009796:	f005 fda3 	bl	800f2e0 <iprintf>
        --pcb->snd_queuelen;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80097a0:	3b01      	subs	r3, #1
 80097a2:	b29a      	uxth	r2, r3
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097ae:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d12a      	bne.n	800980c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ba:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80097bc:	69fb      	ldr	r3, [r7, #28]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <tcp_process+0x280>
 80097c2:	4b06      	ldr	r3, [pc, #24]	; (80097dc <tcp_process+0x28c>)
 80097c4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80097c8:	490f      	ldr	r1, [pc, #60]	; (8009808 <tcp_process+0x2b8>)
 80097ca:	4806      	ldr	r0, [pc, #24]	; (80097e4 <tcp_process+0x294>)
 80097cc:	f005 fd88 	bl	800f2e0 <iprintf>
          pcb->unsent = rseg->next;
 80097d0:	69fb      	ldr	r3, [r7, #28]
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	66da      	str	r2, [r3, #108]	; 0x6c
 80097d8:	e01c      	b.n	8009814 <tcp_process+0x2c4>
 80097da:	bf00      	nop
 80097dc:	08011350 	.word	0x08011350
 80097e0:	08011588 	.word	0x08011588
 80097e4:	0801139c 	.word	0x0801139c
 80097e8:	20008814 	.word	0x20008814
 80097ec:	2000880c 	.word	0x2000880c
 80097f0:	20008808 	.word	0x20008808
 80097f4:	080115a4 	.word	0x080115a4
 80097f8:	20008815 	.word	0x20008815
 80097fc:	200087d0 	.word	0x200087d0
 8009800:	200087f8 	.word	0x200087f8
 8009804:	080115c4 	.word	0x080115c4
 8009808:	080115dc 	.word	0x080115dc
        } else {
          pcb->unacked = rseg->next;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009814:	69f8      	ldr	r0, [r7, #28]
 8009816:	f7fe fd22 	bl	800825e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009828:	861a      	strh	r2, [r3, #48]	; 0x30
 800982a:	e006      	b.n	800983a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00a      	beq.n	800985a <tcp_process+0x30a>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	6910      	ldr	r0, [r2, #16]
 800984e:	2200      	movs	r2, #0
 8009850:	6879      	ldr	r1, [r7, #4]
 8009852:	4798      	blx	r3
 8009854:	4603      	mov	r3, r0
 8009856:	76bb      	strb	r3, [r7, #26]
 8009858:	e001      	b.n	800985e <tcp_process+0x30e>
 800985a:	2300      	movs	r3, #0
 800985c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800985e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009862:	f113 0f0d 	cmn.w	r3, #13
 8009866:	d102      	bne.n	800986e <tcp_process+0x31e>
          return ERR_ABRT;
 8009868:	f06f 030c 	mvn.w	r3, #12
 800986c:	e250      	b.n	8009d10 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	8b5b      	ldrh	r3, [r3, #26]
 8009872:	f043 0302 	orr.w	r3, r3, #2
 8009876:	b29a      	uxth	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800987c:	e23a      	b.n	8009cf4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800987e:	4b98      	ldr	r3, [pc, #608]	; (8009ae0 <tcp_process+0x590>)
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	2b00      	cmp	r3, #0
 8009888:	f000 8234 	beq.w	8009cf4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800988c:	4b95      	ldr	r3, [pc, #596]	; (8009ae4 <tcp_process+0x594>)
 800988e:	6819      	ldr	r1, [r3, #0]
 8009890:	4b95      	ldr	r3, [pc, #596]	; (8009ae8 <tcp_process+0x598>)
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	461a      	mov	r2, r3
 8009896:	4b95      	ldr	r3, [pc, #596]	; (8009aec <tcp_process+0x59c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800989c:	4b94      	ldr	r3, [pc, #592]	; (8009af0 <tcp_process+0x5a0>)
 800989e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80098a4:	4a92      	ldr	r2, [pc, #584]	; (8009af0 <tcp_process+0x5a0>)
 80098a6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80098a8:	8812      	ldrh	r2, [r2, #0]
 80098aa:	b292      	uxth	r2, r2
 80098ac:	9202      	str	r2, [sp, #8]
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	4b90      	ldr	r3, [pc, #576]	; (8009af4 <tcp_process+0x5a4>)
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4b90      	ldr	r3, [pc, #576]	; (8009af8 <tcp_process+0x5a8>)
 80098b6:	4602      	mov	r2, r0
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f002 fc85 	bl	800c1c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098c4:	2b05      	cmp	r3, #5
 80098c6:	f200 8215 	bhi.w	8009cf4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f002 fa51 	bl	800bd78 <tcp_rexmit_rto>
      break;
 80098d6:	e20d      	b.n	8009cf4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80098d8:	4b81      	ldr	r3, [pc, #516]	; (8009ae0 <tcp_process+0x590>)
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	f003 0310 	and.w	r3, r3, #16
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80a1 	beq.w	8009a28 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098e6:	4b7f      	ldr	r3, [pc, #508]	; (8009ae4 <tcp_process+0x594>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	3b01      	subs	r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	db7e      	blt.n	80099f4 <tcp_process+0x4a4>
 80098f6:	4b7b      	ldr	r3, [pc, #492]	; (8009ae4 <tcp_process+0x594>)
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fe:	1ad3      	subs	r3, r2, r3
 8009900:	2b00      	cmp	r3, #0
 8009902:	dc77      	bgt.n	80099f4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2204      	movs	r2, #4
 8009908:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990e:	2b00      	cmp	r3, #0
 8009910:	d102      	bne.n	8009918 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009912:	23fa      	movs	r3, #250	; 0xfa
 8009914:	76bb      	strb	r3, [r7, #26]
 8009916:	e01d      	b.n	8009954 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d106      	bne.n	8009930 <tcp_process+0x3e0>
 8009922:	4b76      	ldr	r3, [pc, #472]	; (8009afc <tcp_process+0x5ac>)
 8009924:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009928:	4975      	ldr	r1, [pc, #468]	; (8009b00 <tcp_process+0x5b0>)
 800992a:	4876      	ldr	r0, [pc, #472]	; (8009b04 <tcp_process+0x5b4>)
 800992c:	f005 fcd8 	bl	800f2e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009934:	699b      	ldr	r3, [r3, #24]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <tcp_process+0x400>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	6910      	ldr	r0, [r2, #16]
 8009944:	2200      	movs	r2, #0
 8009946:	6879      	ldr	r1, [r7, #4]
 8009948:	4798      	blx	r3
 800994a:	4603      	mov	r3, r0
 800994c:	76bb      	strb	r3, [r7, #26]
 800994e:	e001      	b.n	8009954 <tcp_process+0x404>
 8009950:	23f0      	movs	r3, #240	; 0xf0
 8009952:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009954:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00a      	beq.n	8009972 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800995c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009960:	f113 0f0d 	cmn.w	r3, #13
 8009964:	d002      	beq.n	800996c <tcp_process+0x41c>
              tcp_abort(pcb);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f7fd ff8e 	bl	8007888 <tcp_abort>
            }
            return ERR_ABRT;
 800996c:	f06f 030c 	mvn.w	r3, #12
 8009970:	e1ce      	b.n	8009d10 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fae0 	bl	8009f38 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8009978:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <tcp_process+0x5b8>)
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d005      	beq.n	800998c <tcp_process+0x43c>
            recv_acked--;
 8009980:	4b61      	ldr	r3, [pc, #388]	; (8009b08 <tcp_process+0x5b8>)
 8009982:	881b      	ldrh	r3, [r3, #0]
 8009984:	3b01      	subs	r3, #1
 8009986:	b29a      	uxth	r2, r3
 8009988:	4b5f      	ldr	r3, [pc, #380]	; (8009b08 <tcp_process+0x5b8>)
 800998a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009990:	009a      	lsls	r2, r3, #2
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009996:	005b      	lsls	r3, r3, #1
 8009998:	f241 111c 	movw	r1, #4380	; 0x111c
 800999c:	428b      	cmp	r3, r1
 800999e:	bf38      	it	cc
 80099a0:	460b      	movcc	r3, r1
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d204      	bcs.n	80099b0 <tcp_process+0x460>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099aa:	009b      	lsls	r3, r3, #2
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	e00d      	b.n	80099cc <tcp_process+0x47c>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b4:	005b      	lsls	r3, r3, #1
 80099b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d904      	bls.n	80099c8 <tcp_process+0x478>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	e001      	b.n	80099cc <tcp_process+0x47c>
 80099c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80099d2:	4b4e      	ldr	r3, [pc, #312]	; (8009b0c <tcp_process+0x5bc>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d037      	beq.n	8009a4e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	8b5b      	ldrh	r3, [r3, #26]
 80099e2:	f043 0302 	orr.w	r3, r3, #2
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2207      	movs	r2, #7
 80099f0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80099f2:	e02c      	b.n	8009a4e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099f4:	4b3b      	ldr	r3, [pc, #236]	; (8009ae4 <tcp_process+0x594>)
 80099f6:	6819      	ldr	r1, [r3, #0]
 80099f8:	4b3b      	ldr	r3, [pc, #236]	; (8009ae8 <tcp_process+0x598>)
 80099fa:	881b      	ldrh	r3, [r3, #0]
 80099fc:	461a      	mov	r2, r3
 80099fe:	4b3b      	ldr	r3, [pc, #236]	; (8009aec <tcp_process+0x59c>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a04:	4b3a      	ldr	r3, [pc, #232]	; (8009af0 <tcp_process+0x5a0>)
 8009a06:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a0c:	4a38      	ldr	r2, [pc, #224]	; (8009af0 <tcp_process+0x5a0>)
 8009a0e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a10:	8812      	ldrh	r2, [r2, #0]
 8009a12:	b292      	uxth	r2, r2
 8009a14:	9202      	str	r2, [sp, #8]
 8009a16:	9301      	str	r3, [sp, #4]
 8009a18:	4b36      	ldr	r3, [pc, #216]	; (8009af4 <tcp_process+0x5a4>)
 8009a1a:	9300      	str	r3, [sp, #0]
 8009a1c:	4b36      	ldr	r3, [pc, #216]	; (8009af8 <tcp_process+0x5a8>)
 8009a1e:	4602      	mov	r2, r0
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f002 fbd1 	bl	800c1c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009a26:	e167      	b.n	8009cf8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a28:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <tcp_process+0x590>)
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	f003 0302 	and.w	r3, r3, #2
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	f000 8161 	beq.w	8009cf8 <tcp_process+0x7a8>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a3a:	1e5a      	subs	r2, r3, #1
 8009a3c:	4b2b      	ldr	r3, [pc, #172]	; (8009aec <tcp_process+0x59c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	f040 8159 	bne.w	8009cf8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f002 f9b8 	bl	800bdbc <tcp_rexmit>
      break;
 8009a4c:	e154      	b.n	8009cf8 <tcp_process+0x7a8>
 8009a4e:	e153      	b.n	8009cf8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 fa71 	bl	8009f38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009a56:	4b2d      	ldr	r3, [pc, #180]	; (8009b0c <tcp_process+0x5bc>)
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	f003 0320 	and.w	r3, r3, #32
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f000 814c 	beq.w	8009cfc <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	8b5b      	ldrh	r3, [r3, #26]
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2207      	movs	r2, #7
 8009a76:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a78:	e140      	b.n	8009cfc <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 fa5c 	bl	8009f38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a80:	4b22      	ldr	r3, [pc, #136]	; (8009b0c <tcp_process+0x5bc>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	f003 0320 	and.w	r3, r3, #32
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d071      	beq.n	8009b70 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a8c:	4b14      	ldr	r3, [pc, #80]	; (8009ae0 <tcp_process+0x590>)
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 0310 	and.w	r3, r3, #16
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d060      	beq.n	8009b5a <tcp_process+0x60a>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a9c:	4b11      	ldr	r3, [pc, #68]	; (8009ae4 <tcp_process+0x594>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d15a      	bne.n	8009b5a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d156      	bne.n	8009b5a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	8b5b      	ldrh	r3, [r3, #26]
 8009ab0:	f043 0302 	orr.w	r3, r3, #2
 8009ab4:	b29a      	uxth	r2, r3
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7fe fdbc 	bl	8008638 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009ac0:	4b13      	ldr	r3, [pc, #76]	; (8009b10 <tcp_process+0x5c0>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d105      	bne.n	8009ad6 <tcp_process+0x586>
 8009aca:	4b11      	ldr	r3, [pc, #68]	; (8009b10 <tcp_process+0x5c0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	68db      	ldr	r3, [r3, #12]
 8009ad0:	4a0f      	ldr	r2, [pc, #60]	; (8009b10 <tcp_process+0x5c0>)
 8009ad2:	6013      	str	r3, [r2, #0]
 8009ad4:	e02e      	b.n	8009b34 <tcp_process+0x5e4>
 8009ad6:	4b0e      	ldr	r3, [pc, #56]	; (8009b10 <tcp_process+0x5c0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	617b      	str	r3, [r7, #20]
 8009adc:	e027      	b.n	8009b2e <tcp_process+0x5de>
 8009ade:	bf00      	nop
 8009ae0:	20008814 	.word	0x20008814
 8009ae4:	2000880c 	.word	0x2000880c
 8009ae8:	20008812 	.word	0x20008812
 8009aec:	20008808 	.word	0x20008808
 8009af0:	200087f8 	.word	0x200087f8
 8009af4:	20005270 	.word	0x20005270
 8009af8:	20005274 	.word	0x20005274
 8009afc:	08011350 	.word	0x08011350
 8009b00:	080115f0 	.word	0x080115f0
 8009b04:	0801139c 	.word	0x0801139c
 8009b08:	20008810 	.word	0x20008810
 8009b0c:	20008815 	.word	0x20008815
 8009b10:	200087dc 	.word	0x200087dc
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	68db      	ldr	r3, [r3, #12]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d104      	bne.n	8009b28 <tcp_process+0x5d8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	68da      	ldr	r2, [r3, #12]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	60da      	str	r2, [r3, #12]
 8009b26:	e005      	b.n	8009b34 <tcp_process+0x5e4>
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	617b      	str	r3, [r7, #20]
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1ef      	bne.n	8009b14 <tcp_process+0x5c4>
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	60da      	str	r2, [r3, #12]
 8009b3a:	4b77      	ldr	r3, [pc, #476]	; (8009d18 <tcp_process+0x7c8>)
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	220a      	movs	r2, #10
 8009b44:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009b46:	4b75      	ldr	r3, [pc, #468]	; (8009d1c <tcp_process+0x7cc>)
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	60da      	str	r2, [r3, #12]
 8009b4e:	4a73      	ldr	r2, [pc, #460]	; (8009d1c <tcp_process+0x7cc>)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	f002 fcfa 	bl	800c54c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b58:	e0d2      	b.n	8009d00 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	8b5b      	ldrh	r3, [r3, #26]
 8009b5e:	f043 0302 	orr.w	r3, r3, #2
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2208      	movs	r2, #8
 8009b6c:	751a      	strb	r2, [r3, #20]
      break;
 8009b6e:	e0c7      	b.n	8009d00 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b70:	4b6b      	ldr	r3, [pc, #428]	; (8009d20 <tcp_process+0x7d0>)
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	f003 0310 	and.w	r3, r3, #16
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f000 80c1 	beq.w	8009d00 <tcp_process+0x7b0>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b82:	4b68      	ldr	r3, [pc, #416]	; (8009d24 <tcp_process+0x7d4>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	f040 80ba 	bne.w	8009d00 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f040 80b5 	bne.w	8009d00 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2206      	movs	r2, #6
 8009b9a:	751a      	strb	r2, [r3, #20]
      break;
 8009b9c:	e0b0      	b.n	8009d00 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f000 f9ca 	bl	8009f38 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009ba4:	4b60      	ldr	r3, [pc, #384]	; (8009d28 <tcp_process+0x7d8>)
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80a9 	beq.w	8009d04 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	8b5b      	ldrh	r3, [r3, #26]
 8009bb6:	f043 0302 	orr.w	r3, r3, #2
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7fe fd39 	bl	8008638 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009bc6:	4b59      	ldr	r3, [pc, #356]	; (8009d2c <tcp_process+0x7dc>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d105      	bne.n	8009bdc <tcp_process+0x68c>
 8009bd0:	4b56      	ldr	r3, [pc, #344]	; (8009d2c <tcp_process+0x7dc>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	68db      	ldr	r3, [r3, #12]
 8009bd6:	4a55      	ldr	r2, [pc, #340]	; (8009d2c <tcp_process+0x7dc>)
 8009bd8:	6013      	str	r3, [r2, #0]
 8009bda:	e013      	b.n	8009c04 <tcp_process+0x6b4>
 8009bdc:	4b53      	ldr	r3, [pc, #332]	; (8009d2c <tcp_process+0x7dc>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	613b      	str	r3, [r7, #16]
 8009be2:	e00c      	b.n	8009bfe <tcp_process+0x6ae>
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	68db      	ldr	r3, [r3, #12]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d104      	bne.n	8009bf8 <tcp_process+0x6a8>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	60da      	str	r2, [r3, #12]
 8009bf6:	e005      	b.n	8009c04 <tcp_process+0x6b4>
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	613b      	str	r3, [r7, #16]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1ef      	bne.n	8009be4 <tcp_process+0x694>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	60da      	str	r2, [r3, #12]
 8009c0a:	4b43      	ldr	r3, [pc, #268]	; (8009d18 <tcp_process+0x7c8>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	220a      	movs	r2, #10
 8009c14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c16:	4b41      	ldr	r3, [pc, #260]	; (8009d1c <tcp_process+0x7cc>)
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	60da      	str	r2, [r3, #12]
 8009c1e:	4a3f      	ldr	r2, [pc, #252]	; (8009d1c <tcp_process+0x7cc>)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6013      	str	r3, [r2, #0]
 8009c24:	f002 fc92 	bl	800c54c <tcp_timer_needed>
      }
      break;
 8009c28:	e06c      	b.n	8009d04 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f984 	bl	8009f38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c30:	4b3b      	ldr	r3, [pc, #236]	; (8009d20 <tcp_process+0x7d0>)
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 0310 	and.w	r3, r3, #16
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d065      	beq.n	8009d08 <tcp_process+0x7b8>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c40:	4b38      	ldr	r3, [pc, #224]	; (8009d24 <tcp_process+0x7d4>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d15f      	bne.n	8009d08 <tcp_process+0x7b8>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d15b      	bne.n	8009d08 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f7fe fcf1 	bl	8008638 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c56:	4b35      	ldr	r3, [pc, #212]	; (8009d2c <tcp_process+0x7dc>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d105      	bne.n	8009c6c <tcp_process+0x71c>
 8009c60:	4b32      	ldr	r3, [pc, #200]	; (8009d2c <tcp_process+0x7dc>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	68db      	ldr	r3, [r3, #12]
 8009c66:	4a31      	ldr	r2, [pc, #196]	; (8009d2c <tcp_process+0x7dc>)
 8009c68:	6013      	str	r3, [r2, #0]
 8009c6a:	e013      	b.n	8009c94 <tcp_process+0x744>
 8009c6c:	4b2f      	ldr	r3, [pc, #188]	; (8009d2c <tcp_process+0x7dc>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e00c      	b.n	8009c8e <tcp_process+0x73e>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	d104      	bne.n	8009c88 <tcp_process+0x738>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	60da      	str	r2, [r3, #12]
 8009c86:	e005      	b.n	8009c94 <tcp_process+0x744>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d1ef      	bne.n	8009c74 <tcp_process+0x724>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	60da      	str	r2, [r3, #12]
 8009c9a:	4b1f      	ldr	r3, [pc, #124]	; (8009d18 <tcp_process+0x7c8>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	220a      	movs	r2, #10
 8009ca4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009ca6:	4b1d      	ldr	r3, [pc, #116]	; (8009d1c <tcp_process+0x7cc>)
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	60da      	str	r2, [r3, #12]
 8009cae:	4a1b      	ldr	r2, [pc, #108]	; (8009d1c <tcp_process+0x7cc>)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6013      	str	r3, [r2, #0]
 8009cb4:	f002 fc4a 	bl	800c54c <tcp_timer_needed>
      }
      break;
 8009cb8:	e026      	b.n	8009d08 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f93c 	bl	8009f38 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009cc0:	4b17      	ldr	r3, [pc, #92]	; (8009d20 <tcp_process+0x7d0>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d01f      	beq.n	8009d0c <tcp_process+0x7bc>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cd0:	4b14      	ldr	r3, [pc, #80]	; (8009d24 <tcp_process+0x7d4>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	d119      	bne.n	8009d0c <tcp_process+0x7bc>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d115      	bne.n	8009d0c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009ce0:	4b11      	ldr	r3, [pc, #68]	; (8009d28 <tcp_process+0x7d8>)
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	f043 0310 	orr.w	r3, r3, #16
 8009ce8:	b2da      	uxtb	r2, r3
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <tcp_process+0x7d8>)
 8009cec:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009cee:	e00d      	b.n	8009d0c <tcp_process+0x7bc>
    default:
      break;
 8009cf0:	bf00      	nop
 8009cf2:	e00c      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009cf4:	bf00      	nop
 8009cf6:	e00a      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009cf8:	bf00      	nop
 8009cfa:	e008      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009cfc:	bf00      	nop
 8009cfe:	e006      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009d00:	bf00      	nop
 8009d02:	e004      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009d04:	bf00      	nop
 8009d06:	e002      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009d08:	bf00      	nop
 8009d0a:	e000      	b.n	8009d0e <tcp_process+0x7be>
      break;
 8009d0c:	bf00      	nop
  }
  return ERR_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3724      	adds	r7, #36	; 0x24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd90      	pop	{r4, r7, pc}
 8009d18:	200087e4 	.word	0x200087e4
 8009d1c:	200087e0 	.word	0x200087e0
 8009d20:	20008814 	.word	0x20008814
 8009d24:	2000880c 	.word	0x2000880c
 8009d28:	20008815 	.word	0x20008815
 8009d2c:	200087dc 	.word	0x200087dc

08009d30 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d30:	b590      	push	{r4, r7, lr}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d106      	bne.n	8009d4e <tcp_oos_insert_segment+0x1e>
 8009d40:	4b3b      	ldr	r3, [pc, #236]	; (8009e30 <tcp_oos_insert_segment+0x100>)
 8009d42:	f240 421f 	movw	r2, #1055	; 0x41f
 8009d46:	493b      	ldr	r1, [pc, #236]	; (8009e34 <tcp_oos_insert_segment+0x104>)
 8009d48:	483b      	ldr	r0, [pc, #236]	; (8009e38 <tcp_oos_insert_segment+0x108>)
 8009d4a:	f005 fac9 	bl	800f2e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	899b      	ldrh	r3, [r3, #12]
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fb fcb0 	bl	80056bc <lwip_htons>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	b2db      	uxtb	r3, r3
 8009d60:	f003 0301 	and.w	r3, r3, #1
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d028      	beq.n	8009dba <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009d68:	6838      	ldr	r0, [r7, #0]
 8009d6a:	f7fe fa63 	bl	8008234 <tcp_segs_free>
    next = NULL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	603b      	str	r3, [r7, #0]
 8009d72:	e056      	b.n	8009e22 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	899b      	ldrh	r3, [r3, #12]
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fb fc9d 	bl	80056bc <lwip_htons>
 8009d82:	4603      	mov	r3, r0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	f003 0301 	and.w	r3, r3, #1
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00d      	beq.n	8009daa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	899b      	ldrh	r3, [r3, #12]
 8009d94:	b29c      	uxth	r4, r3
 8009d96:	2001      	movs	r0, #1
 8009d98:	f7fb fc90 	bl	80056bc <lwip_htons>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	461a      	mov	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	4322      	orrs	r2, r4
 8009da6:	b292      	uxth	r2, r2
 8009da8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f7fe fa52 	bl	800825e <tcp_seg_free>
    while (next &&
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00e      	beq.n	8009dde <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	891b      	ldrh	r3, [r3, #8]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	4b1d      	ldr	r3, [pc, #116]	; (8009e3c <tcp_oos_insert_segment+0x10c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	441a      	add	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	8909      	ldrh	r1, [r1, #8]
 8009dd6:	440b      	add	r3, r1
 8009dd8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	daca      	bge.n	8009d74 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01e      	beq.n	8009e22 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	891b      	ldrh	r3, [r3, #8]
 8009de8:	461a      	mov	r2, r3
 8009dea:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <tcp_oos_insert_segment+0x10c>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	441a      	add	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	dd12      	ble.n	8009e22 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	685b      	ldr	r3, [r3, #4]
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <tcp_oos_insert_segment+0x10c>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	b29a      	uxth	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	685a      	ldr	r2, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	891b      	ldrh	r3, [r3, #8]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7fc fe25 	bl	8006a6c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	601a      	str	r2, [r3, #0]
}
 8009e28:	bf00      	nop
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd90      	pop	{r4, r7, pc}
 8009e30:	08011350 	.word	0x08011350
 8009e34:	08011610 	.word	0x08011610
 8009e38:	0801139c 	.word	0x0801139c
 8009e3c:	20008808 	.word	0x20008808

08009e40 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009e40:	b5b0      	push	{r4, r5, r7, lr}
 8009e42:	b086      	sub	sp, #24
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009e4e:	e03e      	b.n	8009ece <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7fd f812 	bl	8006e88 <pbuf_clen>
 8009e64:	4603      	mov	r3, r0
 8009e66:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e6e:	8a7a      	ldrh	r2, [r7, #18]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d906      	bls.n	8009e82 <tcp_free_acked_segments+0x42>
 8009e74:	4b2a      	ldr	r3, [pc, #168]	; (8009f20 <tcp_free_acked_segments+0xe0>)
 8009e76:	f240 4257 	movw	r2, #1111	; 0x457
 8009e7a:	492a      	ldr	r1, [pc, #168]	; (8009f24 <tcp_free_acked_segments+0xe4>)
 8009e7c:	482a      	ldr	r0, [pc, #168]	; (8009f28 <tcp_free_acked_segments+0xe8>)
 8009e7e:	f005 fa2f 	bl	800f2e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009e88:	8a7b      	ldrh	r3, [r7, #18]
 8009e8a:	1ad3      	subs	r3, r2, r3
 8009e8c:	b29a      	uxth	r2, r3
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	891a      	ldrh	r2, [r3, #8]
 8009e98:	4b24      	ldr	r3, [pc, #144]	; (8009f2c <tcp_free_acked_segments+0xec>)
 8009e9a:	881b      	ldrh	r3, [r3, #0]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	4b22      	ldr	r3, [pc, #136]	; (8009f2c <tcp_free_acked_segments+0xec>)
 8009ea2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009ea4:	6978      	ldr	r0, [r7, #20]
 8009ea6:	f7fe f9da 	bl	800825e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00c      	beq.n	8009ece <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d109      	bne.n	8009ece <tcp_free_acked_segments+0x8e>
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <tcp_free_acked_segments+0x8e>
 8009ec0:	4b17      	ldr	r3, [pc, #92]	; (8009f20 <tcp_free_acked_segments+0xe0>)
 8009ec2:	f240 4261 	movw	r2, #1121	; 0x461
 8009ec6:	491a      	ldr	r1, [pc, #104]	; (8009f30 <tcp_free_acked_segments+0xf0>)
 8009ec8:	4817      	ldr	r0, [pc, #92]	; (8009f28 <tcp_free_acked_segments+0xe8>)
 8009eca:	f005 fa09 	bl	800f2e0 <iprintf>
  while (seg_list != NULL &&
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d020      	beq.n	8009f16 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7fb fc03 	bl	80056e6 <lwip_htonl>
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	891b      	ldrh	r3, [r3, #8]
 8009ee6:	461d      	mov	r5, r3
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	899b      	ldrh	r3, [r3, #12]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fb fbe3 	bl	80056bc <lwip_htons>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0303 	and.w	r3, r3, #3
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <tcp_free_acked_segments+0xc6>
 8009f02:	2301      	movs	r3, #1
 8009f04:	e000      	b.n	8009f08 <tcp_free_acked_segments+0xc8>
 8009f06:	2300      	movs	r3, #0
 8009f08:	442b      	add	r3, r5
 8009f0a:	18e2      	adds	r2, r4, r3
 8009f0c:	4b09      	ldr	r3, [pc, #36]	; (8009f34 <tcp_free_acked_segments+0xf4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	dd9c      	ble.n	8009e50 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f16:	68bb      	ldr	r3, [r7, #8]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3718      	adds	r7, #24
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009f20:	08011350 	.word	0x08011350
 8009f24:	08011638 	.word	0x08011638
 8009f28:	0801139c 	.word	0x0801139c
 8009f2c:	20008810 	.word	0x20008810
 8009f30:	08011660 	.word	0x08011660
 8009f34:	2000880c 	.word	0x2000880c

08009f38 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f38:	b5b0      	push	{r4, r5, r7, lr}
 8009f3a:	b094      	sub	sp, #80	; 0x50
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d106      	bne.n	8009f58 <tcp_receive+0x20>
 8009f4a:	4b91      	ldr	r3, [pc, #580]	; (800a190 <tcp_receive+0x258>)
 8009f4c:	f240 427b 	movw	r2, #1147	; 0x47b
 8009f50:	4990      	ldr	r1, [pc, #576]	; (800a194 <tcp_receive+0x25c>)
 8009f52:	4891      	ldr	r0, [pc, #580]	; (800a198 <tcp_receive+0x260>)
 8009f54:	f005 f9c4 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	7d1b      	ldrb	r3, [r3, #20]
 8009f5c:	2b03      	cmp	r3, #3
 8009f5e:	d806      	bhi.n	8009f6e <tcp_receive+0x36>
 8009f60:	4b8b      	ldr	r3, [pc, #556]	; (800a190 <tcp_receive+0x258>)
 8009f62:	f240 427c 	movw	r2, #1148	; 0x47c
 8009f66:	498d      	ldr	r1, [pc, #564]	; (800a19c <tcp_receive+0x264>)
 8009f68:	488b      	ldr	r0, [pc, #556]	; (800a198 <tcp_receive+0x260>)
 8009f6a:	f005 f9b9 	bl	800f2e0 <iprintf>

  if (flags & TCP_ACK) {
 8009f6e:	4b8c      	ldr	r3, [pc, #560]	; (800a1a0 <tcp_receive+0x268>)
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	f003 0310 	and.w	r3, r3, #16
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 8264 	beq.w	800a444 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f82:	461a      	mov	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f88:	4413      	add	r3, r2
 8009f8a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f90:	4b84      	ldr	r3, [pc, #528]	; (800a1a4 <tcp_receive+0x26c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	db1b      	blt.n	8009fd2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f9e:	4b81      	ldr	r3, [pc, #516]	; (800a1a4 <tcp_receive+0x26c>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d106      	bne.n	8009fb4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009faa:	4b7f      	ldr	r3, [pc, #508]	; (800a1a8 <tcp_receive+0x270>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	1ad3      	subs	r3, r2, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	db0e      	blt.n	8009fd2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fb8:	4b7b      	ldr	r3, [pc, #492]	; (800a1a8 <tcp_receive+0x270>)
 8009fba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d125      	bne.n	800a00c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fc0:	4b7a      	ldr	r3, [pc, #488]	; (800a1ac <tcp_receive+0x274>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	89db      	ldrh	r3, [r3, #14]
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d91c      	bls.n	800a00c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009fd2:	4b76      	ldr	r3, [pc, #472]	; (800a1ac <tcp_receive+0x274>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	89db      	ldrh	r3, [r3, #14]
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d205      	bcs.n	8009ffc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ffc:	4b69      	ldr	r3, [pc, #420]	; (800a1a4 <tcp_receive+0x26c>)
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a004:	4b68      	ldr	r3, [pc, #416]	; (800a1a8 <tcp_receive+0x270>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a00c:	4b66      	ldr	r3, [pc, #408]	; (800a1a8 <tcp_receive+0x270>)
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a014:	1ad3      	subs	r3, r2, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	dc58      	bgt.n	800a0cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a01a:	4b65      	ldr	r3, [pc, #404]	; (800a1b0 <tcp_receive+0x278>)
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d14b      	bne.n	800a0ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a02c:	4413      	add	r3, r2
 800a02e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a030:	429a      	cmp	r2, r3
 800a032:	d142      	bne.n	800a0ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	db3d      	blt.n	800a0ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a042:	4b59      	ldr	r3, [pc, #356]	; (800a1a8 <tcp_receive+0x270>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	429a      	cmp	r2, r3
 800a048:	d137      	bne.n	800a0ba <tcp_receive+0x182>
              found_dupack = 1;
 800a04a:	2301      	movs	r3, #1
 800a04c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a054:	2bff      	cmp	r3, #255	; 0xff
 800a056:	d007      	beq.n	800a068 <tcp_receive+0x130>
                ++pcb->dupacks;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a05e:	3301      	adds	r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d91b      	bls.n	800a0aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a07c:	4413      	add	r3, r2
 800a07e:	b29a      	uxth	r2, r3
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a086:	429a      	cmp	r2, r3
 800a088:	d30a      	bcc.n	800a0a0 <tcp_receive+0x168>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a094:	4413      	add	r3, r2
 800a096:	b29a      	uxth	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a09e:	e004      	b.n	800a0aa <tcp_receive+0x172>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a0a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0b0:	2b02      	cmp	r3, #2
 800a0b2:	d902      	bls.n	800a0ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f001 feed 	bl	800be94 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a0ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 8161 	bne.w	800a384 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0ca:	e15b      	b.n	800a384 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <tcp_receive+0x270>)
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	f2c0 814e 	blt.w	800a37a <tcp_receive+0x442>
 800a0de:	4b32      	ldr	r3, [pc, #200]	; (800a1a8 <tcp_receive+0x270>)
 800a0e0:	681a      	ldr	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	f300 8146 	bgt.w	800a37a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8b5b      	ldrh	r3, [r3, #26]
 800a0f2:	f003 0304 	and.w	r3, r3, #4
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d010      	beq.n	800a11c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	8b5b      	ldrh	r3, [r3, #26]
 800a0fe:	f023 0304 	bic.w	r3, r3, #4
 800a102:	b29a      	uxth	r2, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a12a:	10db      	asrs	r3, r3, #3
 800a12c:	b21b      	sxth	r3, r3
 800a12e:	b29a      	uxth	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a136:	b29b      	uxth	r3, r3
 800a138:	4413      	add	r3, r2
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	b21a      	sxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a144:	4b18      	ldr	r3, [pc, #96]	; (800a1a8 <tcp_receive+0x270>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	b29a      	uxth	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a14e:	b29b      	uxth	r3, r3
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a15c:	4b12      	ldr	r3, [pc, #72]	; (800a1a8 <tcp_receive+0x270>)
 800a15e:	681a      	ldr	r2, [r3, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	7d1b      	ldrb	r3, [r3, #20]
 800a168:	2b03      	cmp	r3, #3
 800a16a:	f240 8097 	bls.w	800a29c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d245      	bcs.n	800a20a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	8b5b      	ldrh	r3, [r3, #26]
 800a182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a186:	2b00      	cmp	r3, #0
 800a188:	d014      	beq.n	800a1b4 <tcp_receive+0x27c>
 800a18a:	2301      	movs	r3, #1
 800a18c:	e013      	b.n	800a1b6 <tcp_receive+0x27e>
 800a18e:	bf00      	nop
 800a190:	08011350 	.word	0x08011350
 800a194:	08011680 	.word	0x08011680
 800a198:	0801139c 	.word	0x0801139c
 800a19c:	0801169c 	.word	0x0801169c
 800a1a0:	20008814 	.word	0x20008814
 800a1a4:	20008808 	.word	0x20008808
 800a1a8:	2000880c 	.word	0x2000880c
 800a1ac:	200087f8 	.word	0x200087f8
 800a1b0:	20008812 	.word	0x20008812
 800a1b4:	2302      	movs	r3, #2
 800a1b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a1ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1c4:	fb12 f303 	smulbb	r3, r2, r3
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	bf28      	it	cs
 800a1d0:	4613      	movcs	r3, r2
 800a1d2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1dc:	4413      	add	r3, r2
 800a1de:	b29a      	uxth	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d309      	bcc.n	800a1fe <tcp_receive+0x2c6>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1f0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1f2:	4413      	add	r3, r2
 800a1f4:	b29a      	uxth	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a1fc:	e04e      	b.n	800a29c <tcp_receive+0x364>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a204:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a208:	e048      	b.n	800a29c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a210:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a212:	4413      	add	r3, r2
 800a214:	b29a      	uxth	r2, r3
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d309      	bcc.n	800a234 <tcp_receive+0x2fc>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a226:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a228:	4413      	add	r3, r2
 800a22a:	b29a      	uxth	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a232:	e004      	b.n	800a23e <tcp_receive+0x306>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a23a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a24a:	429a      	cmp	r2, r3
 800a24c:	d326      	bcc.n	800a29c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a26e:	4413      	add	r3, r2
 800a270:	b29a      	uxth	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a278:	429a      	cmp	r2, r3
 800a27a:	d30a      	bcc.n	800a292 <tcp_receive+0x35a>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a286:	4413      	add	r3, r2
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a290:	e004      	b.n	800a29c <tcp_receive+0x364>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a298:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2a4:	4a98      	ldr	r2, [pc, #608]	; (800a508 <tcp_receive+0x5d0>)
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fdca 	bl	8009e40 <tcp_free_acked_segments>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ba:	4a94      	ldr	r2, [pc, #592]	; (800a50c <tcp_receive+0x5d4>)
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff fdbf 	bl	8009e40 <tcp_free_acked_segments>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d104      	bne.n	800a2da <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2d6:	861a      	strh	r2, [r3, #48]	; 0x30
 800a2d8:	e002      	b.n	800a2e0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d103      	bne.n	800a2f6 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a2fc:	4b84      	ldr	r3, [pc, #528]	; (800a510 <tcp_receive+0x5d8>)
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	4413      	add	r3, r2
 800a302:	b29a      	uxth	r2, r3
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	8b5b      	ldrh	r3, [r3, #26]
 800a30e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a312:	2b00      	cmp	r3, #0
 800a314:	d035      	beq.n	800a382 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d118      	bne.n	800a350 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00c      	beq.n	800a340 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a32e:	68db      	ldr	r3, [r3, #12]
 800a330:	685b      	ldr	r3, [r3, #4]
 800a332:	4618      	mov	r0, r3
 800a334:	f7fb f9d7 	bl	80056e6 <lwip_htonl>
 800a338:	4603      	mov	r3, r0
 800a33a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dc20      	bgt.n	800a382 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	8b5b      	ldrh	r3, [r3, #26]
 800a344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a348:	b29a      	uxth	r2, r3
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a34e:	e018      	b.n	800a382 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a358:	68db      	ldr	r3, [r3, #12]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f7fb f9c2 	bl	80056e6 <lwip_htonl>
 800a362:	4603      	mov	r3, r0
 800a364:	1ae3      	subs	r3, r4, r3
 800a366:	2b00      	cmp	r3, #0
 800a368:	dc0b      	bgt.n	800a382 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	8b5b      	ldrh	r3, [r3, #26]
 800a36e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a372:	b29a      	uxth	r2, r3
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a378:	e003      	b.n	800a382 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f001 ff76 	bl	800c26c <tcp_send_empty_ack>
 800a380:	e000      	b.n	800a384 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a382:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d05b      	beq.n	800a444 <tcp_receive+0x50c>
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a390:	4b60      	ldr	r3, [pc, #384]	; (800a514 <tcp_receive+0x5dc>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	1ad3      	subs	r3, r2, r3
 800a396:	2b00      	cmp	r3, #0
 800a398:	da54      	bge.n	800a444 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a39a:	4b5f      	ldr	r3, [pc, #380]	; (800a518 <tcp_receive+0x5e0>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a3ae:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3b8:	10db      	asrs	r3, r3, #3
 800a3ba:	b21b      	sxth	r3, r3
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	1ad3      	subs	r3, r2, r3
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3d2:	4413      	add	r3, r2
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	b21a      	sxth	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a3dc:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	da05      	bge.n	800a3f0 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a3e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3e8:	425b      	negs	r3, r3
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a3f0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3fa:	109b      	asrs	r3, r3, #2
 800a3fc:	b21b      	sxth	r3, r3
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	b29b      	uxth	r3, r3
 800a404:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a40e:	b29a      	uxth	r2, r3
 800a410:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a414:	4413      	add	r3, r2
 800a416:	b29b      	uxth	r3, r3
 800a418:	b21a      	sxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a424:	10db      	asrs	r3, r3, #3
 800a426:	b21b      	sxth	r3, r3
 800a428:	b29a      	uxth	r2, r3
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a430:	b29b      	uxth	r3, r3
 800a432:	4413      	add	r3, r2
 800a434:	b29b      	uxth	r3, r3
 800a436:	b21a      	sxth	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a444:	4b35      	ldr	r3, [pc, #212]	; (800a51c <tcp_receive+0x5e4>)
 800a446:	881b      	ldrh	r3, [r3, #0]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	f000 84e2 	beq.w	800ae12 <tcp_receive+0xeda>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	7d1b      	ldrb	r3, [r3, #20]
 800a452:	2b06      	cmp	r3, #6
 800a454:	f200 84dd 	bhi.w	800ae12 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a45c:	4b30      	ldr	r3, [pc, #192]	; (800a520 <tcp_receive+0x5e8>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	1ad3      	subs	r3, r2, r3
 800a462:	3b01      	subs	r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	f2c0 808f 	blt.w	800a588 <tcp_receive+0x650>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a46e:	4b2b      	ldr	r3, [pc, #172]	; (800a51c <tcp_receive+0x5e4>)
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	4619      	mov	r1, r3
 800a474:	4b2a      	ldr	r3, [pc, #168]	; (800a520 <tcp_receive+0x5e8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	440b      	add	r3, r1
 800a47a:	1ad3      	subs	r3, r2, r3
 800a47c:	3301      	adds	r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f300 8082 	bgt.w	800a588 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a484:	4b27      	ldr	r3, [pc, #156]	; (800a524 <tcp_receive+0x5ec>)
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a48e:	4b24      	ldr	r3, [pc, #144]	; (800a520 <tcp_receive+0x5e8>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1ad3      	subs	r3, r2, r3
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a496:	4b23      	ldr	r3, [pc, #140]	; (800a524 <tcp_receive+0x5ec>)
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d106      	bne.n	800a4ac <tcp_receive+0x574>
 800a49e:	4b22      	ldr	r3, [pc, #136]	; (800a528 <tcp_receive+0x5f0>)
 800a4a0:	f240 5294 	movw	r2, #1428	; 0x594
 800a4a4:	4921      	ldr	r1, [pc, #132]	; (800a52c <tcp_receive+0x5f4>)
 800a4a6:	4822      	ldr	r0, [pc, #136]	; (800a530 <tcp_receive+0x5f8>)
 800a4a8:	f004 ff1a 	bl	800f2e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d906      	bls.n	800a4c4 <tcp_receive+0x58c>
 800a4b6:	4b1c      	ldr	r3, [pc, #112]	; (800a528 <tcp_receive+0x5f0>)
 800a4b8:	f240 5295 	movw	r2, #1429	; 0x595
 800a4bc:	491d      	ldr	r1, [pc, #116]	; (800a534 <tcp_receive+0x5fc>)
 800a4be:	481c      	ldr	r0, [pc, #112]	; (800a530 <tcp_receive+0x5f8>)
 800a4c0:	f004 ff0e 	bl	800f2e0 <iprintf>
      off = (u16_t)off32;
 800a4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a4ca:	4b16      	ldr	r3, [pc, #88]	; (800a524 <tcp_receive+0x5ec>)
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	891b      	ldrh	r3, [r3, #8]
 800a4d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d906      	bls.n	800a4e6 <tcp_receive+0x5ae>
 800a4d8:	4b13      	ldr	r3, [pc, #76]	; (800a528 <tcp_receive+0x5f0>)
 800a4da:	f240 5297 	movw	r2, #1431	; 0x597
 800a4de:	4916      	ldr	r1, [pc, #88]	; (800a538 <tcp_receive+0x600>)
 800a4e0:	4813      	ldr	r0, [pc, #76]	; (800a530 <tcp_receive+0x5f8>)
 800a4e2:	f004 fefd 	bl	800f2e0 <iprintf>
      inseg.len -= off;
 800a4e6:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <tcp_receive+0x5ec>)
 800a4e8:	891a      	ldrh	r2, [r3, #8]
 800a4ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	b29a      	uxth	r2, r3
 800a4f2:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <tcp_receive+0x5ec>)
 800a4f4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a4f6:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <tcp_receive+0x5ec>)
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	891a      	ldrh	r2, [r3, #8]
 800a4fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a500:	1ad3      	subs	r3, r2, r3
 800a502:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a504:	e02a      	b.n	800a55c <tcp_receive+0x624>
 800a506:	bf00      	nop
 800a508:	080116b8 	.word	0x080116b8
 800a50c:	080116c0 	.word	0x080116c0
 800a510:	20008810 	.word	0x20008810
 800a514:	2000880c 	.word	0x2000880c
 800a518:	200087d0 	.word	0x200087d0
 800a51c:	20008812 	.word	0x20008812
 800a520:	20008808 	.word	0x20008808
 800a524:	200087e8 	.word	0x200087e8
 800a528:	08011350 	.word	0x08011350
 800a52c:	080116c8 	.word	0x080116c8
 800a530:	0801139c 	.word	0x0801139c
 800a534:	080116d8 	.word	0x080116d8
 800a538:	080116e8 	.word	0x080116e8
        off -= p->len;
 800a53c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a53e:	895b      	ldrh	r3, [r3, #10]
 800a540:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a54c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a54e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a552:	2200      	movs	r2, #0
 800a554:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a55c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a55e:	895b      	ldrh	r3, [r3, #10]
 800a560:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a564:	429a      	cmp	r2, r3
 800a566:	d8e9      	bhi.n	800a53c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a568:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a56c:	4619      	mov	r1, r3
 800a56e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a570:	f7fc fb7c 	bl	8006c6c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a578:	4a91      	ldr	r2, [pc, #580]	; (800a7c0 <tcp_receive+0x888>)
 800a57a:	6013      	str	r3, [r2, #0]
 800a57c:	4b91      	ldr	r3, [pc, #580]	; (800a7c4 <tcp_receive+0x88c>)
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	4a8f      	ldr	r2, [pc, #572]	; (800a7c0 <tcp_receive+0x888>)
 800a582:	6812      	ldr	r2, [r2, #0]
 800a584:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a586:	e00d      	b.n	800a5a4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a588:	4b8d      	ldr	r3, [pc, #564]	; (800a7c0 <tcp_receive+0x888>)
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	1ad3      	subs	r3, r2, r3
 800a592:	2b00      	cmp	r3, #0
 800a594:	da06      	bge.n	800a5a4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	8b5b      	ldrh	r3, [r3, #26]
 800a59a:	f043 0302 	orr.w	r3, r3, #2
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a5a4:	4b86      	ldr	r3, [pc, #536]	; (800a7c0 <tcp_receive+0x888>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	1ad3      	subs	r3, r2, r3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	f2c0 842a 	blt.w	800ae08 <tcp_receive+0xed0>
 800a5b4:	4b82      	ldr	r3, [pc, #520]	; (800a7c0 <tcp_receive+0x888>)
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5bc:	6879      	ldr	r1, [r7, #4]
 800a5be:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5c0:	440b      	add	r3, r1
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f300 841e 	bgt.w	800ae08 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5d0:	4b7b      	ldr	r3, [pc, #492]	; (800a7c0 <tcp_receive+0x888>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	f040 829a 	bne.w	800ab0e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a5da:	4b7a      	ldr	r3, [pc, #488]	; (800a7c4 <tcp_receive+0x88c>)
 800a5dc:	891c      	ldrh	r4, [r3, #8]
 800a5de:	4b79      	ldr	r3, [pc, #484]	; (800a7c4 <tcp_receive+0x88c>)
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	899b      	ldrh	r3, [r3, #12]
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f7fb f868 	bl	80056bc <lwip_htons>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f003 0303 	and.w	r3, r3, #3
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d001      	beq.n	800a5fc <tcp_receive+0x6c4>
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	e000      	b.n	800a5fe <tcp_receive+0x6c6>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4423      	add	r3, r4
 800a600:	b29a      	uxth	r2, r3
 800a602:	4b71      	ldr	r3, [pc, #452]	; (800a7c8 <tcp_receive+0x890>)
 800a604:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a60a:	4b6f      	ldr	r3, [pc, #444]	; (800a7c8 <tcp_receive+0x890>)
 800a60c:	881b      	ldrh	r3, [r3, #0]
 800a60e:	429a      	cmp	r2, r3
 800a610:	d275      	bcs.n	800a6fe <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a612:	4b6c      	ldr	r3, [pc, #432]	; (800a7c4 <tcp_receive+0x88c>)
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	899b      	ldrh	r3, [r3, #12]
 800a618:	b29b      	uxth	r3, r3
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fb f84e 	bl	80056bc <lwip_htons>
 800a620:	4603      	mov	r3, r0
 800a622:	b2db      	uxtb	r3, r3
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d01f      	beq.n	800a66c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a62c:	4b65      	ldr	r3, [pc, #404]	; (800a7c4 <tcp_receive+0x88c>)
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	899b      	ldrh	r3, [r3, #12]
 800a632:	b29b      	uxth	r3, r3
 800a634:	b21b      	sxth	r3, r3
 800a636:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a63a:	b21c      	sxth	r4, r3
 800a63c:	4b61      	ldr	r3, [pc, #388]	; (800a7c4 <tcp_receive+0x88c>)
 800a63e:	68db      	ldr	r3, [r3, #12]
 800a640:	899b      	ldrh	r3, [r3, #12]
 800a642:	b29b      	uxth	r3, r3
 800a644:	4618      	mov	r0, r3
 800a646:	f7fb f839 	bl	80056bc <lwip_htons>
 800a64a:	4603      	mov	r3, r0
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a654:	b29b      	uxth	r3, r3
 800a656:	4618      	mov	r0, r3
 800a658:	f7fb f830 	bl	80056bc <lwip_htons>
 800a65c:	4603      	mov	r3, r0
 800a65e:	b21b      	sxth	r3, r3
 800a660:	4323      	orrs	r3, r4
 800a662:	b21a      	sxth	r2, r3
 800a664:	4b57      	ldr	r3, [pc, #348]	; (800a7c4 <tcp_receive+0x88c>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	b292      	uxth	r2, r2
 800a66a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a670:	4b54      	ldr	r3, [pc, #336]	; (800a7c4 <tcp_receive+0x88c>)
 800a672:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a674:	4b53      	ldr	r3, [pc, #332]	; (800a7c4 <tcp_receive+0x88c>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	899b      	ldrh	r3, [r3, #12]
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fb f81d 	bl	80056bc <lwip_htons>
 800a682:	4603      	mov	r3, r0
 800a684:	b2db      	uxtb	r3, r3
 800a686:	f003 0302 	and.w	r3, r3, #2
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <tcp_receive+0x762>
            inseg.len -= 1;
 800a68e:	4b4d      	ldr	r3, [pc, #308]	; (800a7c4 <tcp_receive+0x88c>)
 800a690:	891b      	ldrh	r3, [r3, #8]
 800a692:	3b01      	subs	r3, #1
 800a694:	b29a      	uxth	r2, r3
 800a696:	4b4b      	ldr	r3, [pc, #300]	; (800a7c4 <tcp_receive+0x88c>)
 800a698:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a69a:	4b4a      	ldr	r3, [pc, #296]	; (800a7c4 <tcp_receive+0x88c>)
 800a69c:	685b      	ldr	r3, [r3, #4]
 800a69e:	4a49      	ldr	r2, [pc, #292]	; (800a7c4 <tcp_receive+0x88c>)
 800a6a0:	8912      	ldrh	r2, [r2, #8]
 800a6a2:	4611      	mov	r1, r2
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	f7fc f9e1 	bl	8006a6c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a6aa:	4b46      	ldr	r3, [pc, #280]	; (800a7c4 <tcp_receive+0x88c>)
 800a6ac:	891c      	ldrh	r4, [r3, #8]
 800a6ae:	4b45      	ldr	r3, [pc, #276]	; (800a7c4 <tcp_receive+0x88c>)
 800a6b0:	68db      	ldr	r3, [r3, #12]
 800a6b2:	899b      	ldrh	r3, [r3, #12]
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fb f800 	bl	80056bc <lwip_htons>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	f003 0303 	and.w	r3, r3, #3
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <tcp_receive+0x794>
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e000      	b.n	800a6ce <tcp_receive+0x796>
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4423      	add	r3, r4
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	4b3d      	ldr	r3, [pc, #244]	; (800a7c8 <tcp_receive+0x890>)
 800a6d4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6d6:	4b3c      	ldr	r3, [pc, #240]	; (800a7c8 <tcp_receive+0x890>)
 800a6d8:	881b      	ldrh	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	4b38      	ldr	r3, [pc, #224]	; (800a7c0 <tcp_receive+0x888>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	441a      	add	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6ea:	440b      	add	r3, r1
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d006      	beq.n	800a6fe <tcp_receive+0x7c6>
 800a6f0:	4b36      	ldr	r3, [pc, #216]	; (800a7cc <tcp_receive+0x894>)
 800a6f2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a6f6:	4936      	ldr	r1, [pc, #216]	; (800a7d0 <tcp_receive+0x898>)
 800a6f8:	4836      	ldr	r0, [pc, #216]	; (800a7d4 <tcp_receive+0x89c>)
 800a6fa:	f004 fdf1 	bl	800f2e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 80e7 	beq.w	800a8d6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a708:	4b2e      	ldr	r3, [pc, #184]	; (800a7c4 <tcp_receive+0x88c>)
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	899b      	ldrh	r3, [r3, #12]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	4618      	mov	r0, r3
 800a712:	f7fa ffd3 	bl	80056bc <lwip_htons>
 800a716:	4603      	mov	r3, r0
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d010      	beq.n	800a744 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a722:	e00a      	b.n	800a73a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a728:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a734:	68f8      	ldr	r0, [r7, #12]
 800a736:	f7fd fd92 	bl	800825e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f0      	bne.n	800a724 <tcp_receive+0x7ec>
 800a742:	e0c8      	b.n	800a8d6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a748:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a74a:	e052      	b.n	800a7f2 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	899b      	ldrh	r3, [r3, #12]
 800a752:	b29b      	uxth	r3, r3
 800a754:	4618      	mov	r0, r3
 800a756:	f7fa ffb1 	bl	80056bc <lwip_htons>
 800a75a:	4603      	mov	r3, r0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	d03d      	beq.n	800a7e2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a766:	4b17      	ldr	r3, [pc, #92]	; (800a7c4 <tcp_receive+0x88c>)
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	899b      	ldrh	r3, [r3, #12]
 800a76c:	b29b      	uxth	r3, r3
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fa ffa4 	bl	80056bc <lwip_htons>
 800a774:	4603      	mov	r3, r0
 800a776:	b2db      	uxtb	r3, r3
 800a778:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d130      	bne.n	800a7e2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a780:	4b10      	ldr	r3, [pc, #64]	; (800a7c4 <tcp_receive+0x88c>)
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	899b      	ldrh	r3, [r3, #12]
 800a786:	b29c      	uxth	r4, r3
 800a788:	2001      	movs	r0, #1
 800a78a:	f7fa ff97 	bl	80056bc <lwip_htons>
 800a78e:	4603      	mov	r3, r0
 800a790:	461a      	mov	r2, r3
 800a792:	4b0c      	ldr	r3, [pc, #48]	; (800a7c4 <tcp_receive+0x88c>)
 800a794:	68db      	ldr	r3, [r3, #12]
 800a796:	4322      	orrs	r2, r4
 800a798:	b292      	uxth	r2, r2
 800a79a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a79c:	4b09      	ldr	r3, [pc, #36]	; (800a7c4 <tcp_receive+0x88c>)
 800a79e:	891c      	ldrh	r4, [r3, #8]
 800a7a0:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <tcp_receive+0x88c>)
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	899b      	ldrh	r3, [r3, #12]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fa ff87 	bl	80056bc <lwip_htons>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	f003 0303 	and.w	r3, r3, #3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00e      	beq.n	800a7d8 <tcp_receive+0x8a0>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e00d      	b.n	800a7da <tcp_receive+0x8a2>
 800a7be:	bf00      	nop
 800a7c0:	20008808 	.word	0x20008808
 800a7c4:	200087e8 	.word	0x200087e8
 800a7c8:	20008812 	.word	0x20008812
 800a7cc:	08011350 	.word	0x08011350
 800a7d0:	080116f8 	.word	0x080116f8
 800a7d4:	0801139c 	.word	0x0801139c
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4423      	add	r3, r4
 800a7dc:	b29a      	uxth	r2, r3
 800a7de:	4b98      	ldr	r3, [pc, #608]	; (800aa40 <tcp_receive+0xb08>)
 800a7e0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a7ec:	6938      	ldr	r0, [r7, #16]
 800a7ee:	f7fd fd36 	bl	800825e <tcp_seg_free>
            while (next &&
 800a7f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d00e      	beq.n	800a816 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a7f8:	4b91      	ldr	r3, [pc, #580]	; (800aa40 <tcp_receive+0xb08>)
 800a7fa:	881b      	ldrh	r3, [r3, #0]
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	4b91      	ldr	r3, [pc, #580]	; (800aa44 <tcp_receive+0xb0c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	441a      	add	r2, r3
 800a804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a80c:	8909      	ldrh	r1, [r1, #8]
 800a80e:	440b      	add	r3, r1
 800a810:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a812:	2b00      	cmp	r3, #0
 800a814:	da9a      	bge.n	800a74c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d059      	beq.n	800a8d0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a81c:	4b88      	ldr	r3, [pc, #544]	; (800aa40 <tcp_receive+0xb08>)
 800a81e:	881b      	ldrh	r3, [r3, #0]
 800a820:	461a      	mov	r2, r3
 800a822:	4b88      	ldr	r3, [pc, #544]	; (800aa44 <tcp_receive+0xb0c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	441a      	add	r2, r3
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a830:	2b00      	cmp	r3, #0
 800a832:	dd4d      	ble.n	800a8d0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	4b81      	ldr	r3, [pc, #516]	; (800aa44 <tcp_receive+0xb0c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	b29b      	uxth	r3, r3
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	b29a      	uxth	r2, r3
 800a846:	4b80      	ldr	r3, [pc, #512]	; (800aa48 <tcp_receive+0xb10>)
 800a848:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a84a:	4b7f      	ldr	r3, [pc, #508]	; (800aa48 <tcp_receive+0xb10>)
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	899b      	ldrh	r3, [r3, #12]
 800a850:	b29b      	uxth	r3, r3
 800a852:	4618      	mov	r0, r3
 800a854:	f7fa ff32 	bl	80056bc <lwip_htons>
 800a858:	4603      	mov	r3, r0
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	f003 0302 	and.w	r3, r3, #2
 800a860:	2b00      	cmp	r3, #0
 800a862:	d005      	beq.n	800a870 <tcp_receive+0x938>
                inseg.len -= 1;
 800a864:	4b78      	ldr	r3, [pc, #480]	; (800aa48 <tcp_receive+0xb10>)
 800a866:	891b      	ldrh	r3, [r3, #8]
 800a868:	3b01      	subs	r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	4b76      	ldr	r3, [pc, #472]	; (800aa48 <tcp_receive+0xb10>)
 800a86e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a870:	4b75      	ldr	r3, [pc, #468]	; (800aa48 <tcp_receive+0xb10>)
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	4a74      	ldr	r2, [pc, #464]	; (800aa48 <tcp_receive+0xb10>)
 800a876:	8912      	ldrh	r2, [r2, #8]
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fc f8f6 	bl	8006a6c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a880:	4b71      	ldr	r3, [pc, #452]	; (800aa48 <tcp_receive+0xb10>)
 800a882:	891c      	ldrh	r4, [r3, #8]
 800a884:	4b70      	ldr	r3, [pc, #448]	; (800aa48 <tcp_receive+0xb10>)
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	899b      	ldrh	r3, [r3, #12]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fa ff15 	bl	80056bc <lwip_htons>
 800a892:	4603      	mov	r3, r0
 800a894:	b2db      	uxtb	r3, r3
 800a896:	f003 0303 	and.w	r3, r3, #3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d001      	beq.n	800a8a2 <tcp_receive+0x96a>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <tcp_receive+0x96c>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	4423      	add	r3, r4
 800a8a6:	b29a      	uxth	r2, r3
 800a8a8:	4b65      	ldr	r3, [pc, #404]	; (800aa40 <tcp_receive+0xb08>)
 800a8aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a8ac:	4b64      	ldr	r3, [pc, #400]	; (800aa40 <tcp_receive+0xb08>)
 800a8ae:	881b      	ldrh	r3, [r3, #0]
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4b64      	ldr	r3, [pc, #400]	; (800aa44 <tcp_receive+0xb0c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	441a      	add	r2, r3
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ba:	68db      	ldr	r3, [r3, #12]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d006      	beq.n	800a8d0 <tcp_receive+0x998>
 800a8c2:	4b62      	ldr	r3, [pc, #392]	; (800aa4c <tcp_receive+0xb14>)
 800a8c4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a8c8:	4961      	ldr	r1, [pc, #388]	; (800aa50 <tcp_receive+0xb18>)
 800a8ca:	4862      	ldr	r0, [pc, #392]	; (800aa54 <tcp_receive+0xb1c>)
 800a8cc:	f004 fd08 	bl	800f2e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8d4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a8d6:	4b5a      	ldr	r3, [pc, #360]	; (800aa40 <tcp_receive+0xb08>)
 800a8d8:	881b      	ldrh	r3, [r3, #0]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	4b59      	ldr	r3, [pc, #356]	; (800aa44 <tcp_receive+0xb0c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	441a      	add	r2, r3
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8ea:	4b55      	ldr	r3, [pc, #340]	; (800aa40 <tcp_receive+0xb08>)
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d206      	bcs.n	800a900 <tcp_receive+0x9c8>
 800a8f2:	4b56      	ldr	r3, [pc, #344]	; (800aa4c <tcp_receive+0xb14>)
 800a8f4:	f240 6207 	movw	r2, #1543	; 0x607
 800a8f8:	4957      	ldr	r1, [pc, #348]	; (800aa58 <tcp_receive+0xb20>)
 800a8fa:	4856      	ldr	r0, [pc, #344]	; (800aa54 <tcp_receive+0xb1c>)
 800a8fc:	f004 fcf0 	bl	800f2e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a904:	4b4e      	ldr	r3, [pc, #312]	; (800aa40 <tcp_receive+0xb08>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	b29a      	uxth	r2, r3
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7fc ffc5 	bl	80078a0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a916:	4b4c      	ldr	r3, [pc, #304]	; (800aa48 <tcp_receive+0xb10>)
 800a918:	685b      	ldr	r3, [r3, #4]
 800a91a:	891b      	ldrh	r3, [r3, #8]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a920:	4b49      	ldr	r3, [pc, #292]	; (800aa48 <tcp_receive+0xb10>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	4a4d      	ldr	r2, [pc, #308]	; (800aa5c <tcp_receive+0xb24>)
 800a926:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a928:	4b47      	ldr	r3, [pc, #284]	; (800aa48 <tcp_receive+0xb10>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a92e:	4b46      	ldr	r3, [pc, #280]	; (800aa48 <tcp_receive+0xb10>)
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	899b      	ldrh	r3, [r3, #12]
 800a934:	b29b      	uxth	r3, r3
 800a936:	4618      	mov	r0, r3
 800a938:	f7fa fec0 	bl	80056bc <lwip_htons>
 800a93c:	4603      	mov	r3, r0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	2b00      	cmp	r3, #0
 800a946:	f000 80b8 	beq.w	800aaba <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a94a:	4b45      	ldr	r3, [pc, #276]	; (800aa60 <tcp_receive+0xb28>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f043 0320 	orr.w	r3, r3, #32
 800a952:	b2da      	uxtb	r2, r3
 800a954:	4b42      	ldr	r3, [pc, #264]	; (800aa60 <tcp_receive+0xb28>)
 800a956:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a958:	e0af      	b.n	800aaba <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a95e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	4a36      	ldr	r2, [pc, #216]	; (800aa44 <tcp_receive+0xb0c>)
 800a96a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	891b      	ldrh	r3, [r3, #8]
 800a970:	461c      	mov	r4, r3
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	899b      	ldrh	r3, [r3, #12]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fa fe9e 	bl	80056bc <lwip_htons>
 800a980:	4603      	mov	r3, r0
 800a982:	b2db      	uxtb	r3, r3
 800a984:	f003 0303 	and.w	r3, r3, #3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d001      	beq.n	800a990 <tcp_receive+0xa58>
 800a98c:	2301      	movs	r3, #1
 800a98e:	e000      	b.n	800a992 <tcp_receive+0xa5a>
 800a990:	2300      	movs	r3, #0
 800a992:	191a      	adds	r2, r3, r4
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a998:	441a      	add	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9a2:	461c      	mov	r4, r3
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	891b      	ldrh	r3, [r3, #8]
 800a9a8:	461d      	mov	r5, r3
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	899b      	ldrh	r3, [r3, #12]
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fa fe82 	bl	80056bc <lwip_htons>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <tcp_receive+0xa90>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e000      	b.n	800a9ca <tcp_receive+0xa92>
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	442b      	add	r3, r5
 800a9cc:	429c      	cmp	r4, r3
 800a9ce:	d206      	bcs.n	800a9de <tcp_receive+0xaa6>
 800a9d0:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <tcp_receive+0xb14>)
 800a9d2:	f240 622b 	movw	r2, #1579	; 0x62b
 800a9d6:	4923      	ldr	r1, [pc, #140]	; (800aa64 <tcp_receive+0xb2c>)
 800a9d8:	481e      	ldr	r0, [pc, #120]	; (800aa54 <tcp_receive+0xb1c>)
 800a9da:	f004 fc81 	bl	800f2e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	891b      	ldrh	r3, [r3, #8]
 800a9e2:	461c      	mov	r4, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	899b      	ldrh	r3, [r3, #12]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7fa fe65 	bl	80056bc <lwip_htons>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f003 0303 	and.w	r3, r3, #3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <tcp_receive+0xaca>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <tcp_receive+0xacc>
 800aa02:	2300      	movs	r3, #0
 800aa04:	1919      	adds	r1, r3, r4
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800aa0a:	b28b      	uxth	r3, r1
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	b29a      	uxth	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fc ff43 	bl	80078a0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	891b      	ldrh	r3, [r3, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d028      	beq.n	800aa76 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aa24:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <tcp_receive+0xb24>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d01d      	beq.n	800aa68 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <tcp_receive+0xb24>)
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7fc fa60 	bl	8006efc <pbuf_cat>
 800aa3c:	e018      	b.n	800aa70 <tcp_receive+0xb38>
 800aa3e:	bf00      	nop
 800aa40:	20008812 	.word	0x20008812
 800aa44:	20008808 	.word	0x20008808
 800aa48:	200087e8 	.word	0x200087e8
 800aa4c:	08011350 	.word	0x08011350
 800aa50:	08011730 	.word	0x08011730
 800aa54:	0801139c 	.word	0x0801139c
 800aa58:	0801176c 	.word	0x0801176c
 800aa5c:	20008818 	.word	0x20008818
 800aa60:	20008815 	.word	0x20008815
 800aa64:	0801178c 	.word	0x0801178c
            } else {
              recv_data = cseg->p;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	4a70      	ldr	r2, [pc, #448]	; (800ac30 <tcp_receive+0xcf8>)
 800aa6e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	2200      	movs	r2, #0
 800aa74:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	68db      	ldr	r3, [r3, #12]
 800aa7a:	899b      	ldrh	r3, [r3, #12]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fa fe1c 	bl	80056bc <lwip_htons>
 800aa84:	4603      	mov	r3, r0
 800aa86:	b2db      	uxtb	r3, r3
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00d      	beq.n	800aaac <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aa90:	4b68      	ldr	r3, [pc, #416]	; (800ac34 <tcp_receive+0xcfc>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	f043 0320 	orr.w	r3, r3, #32
 800aa98:	b2da      	uxtb	r2, r3
 800aa9a:	4b66      	ldr	r3, [pc, #408]	; (800ac34 <tcp_receive+0xcfc>)
 800aa9c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	7d1b      	ldrb	r3, [r3, #20]
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d102      	bne.n	800aaac <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2207      	movs	r2, #7
 800aaaa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	681a      	ldr	r2, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aab4:	68b8      	ldr	r0, [r7, #8]
 800aab6:	f7fd fbd2 	bl	800825e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d008      	beq.n	800aad4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	685a      	ldr	r2, [r3, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aace:	429a      	cmp	r2, r3
 800aad0:	f43f af43 	beq.w	800a95a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8b5b      	ldrh	r3, [r3, #26]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00e      	beq.n	800aafe <tcp_receive+0xbc6>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	8b5b      	ldrh	r3, [r3, #26]
 800aae4:	f023 0301 	bic.w	r3, r3, #1
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	835a      	strh	r2, [r3, #26]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	8b5b      	ldrh	r3, [r3, #26]
 800aaf2:	f043 0302 	orr.w	r3, r3, #2
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aafc:	e188      	b.n	800ae10 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	8b5b      	ldrh	r3, [r3, #26]
 800ab02:	f043 0301 	orr.w	r3, r3, #1
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab0c:	e180      	b.n	800ae10 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d106      	bne.n	800ab24 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab16:	4848      	ldr	r0, [pc, #288]	; (800ac38 <tcp_receive+0xd00>)
 800ab18:	f7fd fbba 	bl	8008290 <tcp_seg_copy>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	675a      	str	r2, [r3, #116]	; 0x74
 800ab22:	e16d      	b.n	800ae00 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ab24:	2300      	movs	r3, #0
 800ab26:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab2e:	e157      	b.n	800ade0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	685a      	ldr	r2, [r3, #4]
 800ab36:	4b41      	ldr	r3, [pc, #260]	; (800ac3c <tcp_receive+0xd04>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d11d      	bne.n	800ab7a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ab3e:	4b3e      	ldr	r3, [pc, #248]	; (800ac38 <tcp_receive+0xd00>)
 800ab40:	891a      	ldrh	r2, [r3, #8]
 800ab42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab44:	891b      	ldrh	r3, [r3, #8]
 800ab46:	429a      	cmp	r2, r3
 800ab48:	f240 814f 	bls.w	800adea <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab4c:	483a      	ldr	r0, [pc, #232]	; (800ac38 <tcp_receive+0xd00>)
 800ab4e:	f7fd fb9f 	bl	8008290 <tcp_seg_copy>
 800ab52:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	f000 8149 	beq.w	800adee <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d003      	beq.n	800ab6a <tcp_receive+0xc32>
                    prev->next = cseg;
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	697a      	ldr	r2, [r7, #20]
 800ab66:	601a      	str	r2, [r3, #0]
 800ab68:	e002      	b.n	800ab70 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ab70:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab72:	6978      	ldr	r0, [r7, #20]
 800ab74:	f7ff f8dc 	bl	8009d30 <tcp_oos_insert_segment>
                }
                break;
 800ab78:	e139      	b.n	800adee <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ab7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d117      	bne.n	800abb0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ab80:	4b2e      	ldr	r3, [pc, #184]	; (800ac3c <tcp_receive+0xd04>)
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	685b      	ldr	r3, [r3, #4]
 800ab8a:	1ad3      	subs	r3, r2, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	da57      	bge.n	800ac40 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab90:	4829      	ldr	r0, [pc, #164]	; (800ac38 <tcp_receive+0xd00>)
 800ab92:	f7fd fb7d 	bl	8008290 <tcp_seg_copy>
 800ab96:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f000 8129 	beq.w	800adf2 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	69ba      	ldr	r2, [r7, #24]
 800aba4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800aba6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800aba8:	69b8      	ldr	r0, [r7, #24]
 800abaa:	f7ff f8c1 	bl	8009d30 <tcp_oos_insert_segment>
                  }
                  break;
 800abae:	e120      	b.n	800adf2 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800abb0:	4b22      	ldr	r3, [pc, #136]	; (800ac3c <tcp_receive+0xd04>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abb6:	68db      	ldr	r3, [r3, #12]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	1ad3      	subs	r3, r2, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	db3e      	blt.n	800ac40 <tcp_receive+0xd08>
 800abc2:	4b1e      	ldr	r3, [pc, #120]	; (800ac3c <tcp_receive+0xd04>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc8:	68db      	ldr	r3, [r3, #12]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	3301      	adds	r3, #1
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	dc35      	bgt.n	800ac40 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abd4:	4818      	ldr	r0, [pc, #96]	; (800ac38 <tcp_receive+0xd00>)
 800abd6:	f7fd fb5b 	bl	8008290 <tcp_seg_copy>
 800abda:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800abdc:	69fb      	ldr	r3, [r7, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f000 8109 	beq.w	800adf6 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800abe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abec:	8912      	ldrh	r2, [r2, #8]
 800abee:	441a      	add	r2, r3
 800abf0:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <tcp_receive+0xd04>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dd12      	ble.n	800ac20 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800abfa:	4b10      	ldr	r3, [pc, #64]	; (800ac3c <tcp_receive+0xd04>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	1ad3      	subs	r3, r2, r3
 800ac0a:	b29a      	uxth	r2, r3
 800ac0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ac10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac12:	685a      	ldr	r2, [r3, #4]
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	891b      	ldrh	r3, [r3, #8]
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4610      	mov	r0, r2
 800ac1c:	f7fb ff26 	bl	8006a6c <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ac20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac22:	69fa      	ldr	r2, [r7, #28]
 800ac24:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ac26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac28:	69f8      	ldr	r0, [r7, #28]
 800ac2a:	f7ff f881 	bl	8009d30 <tcp_oos_insert_segment>
                  }
                  break;
 800ac2e:	e0e2      	b.n	800adf6 <tcp_receive+0xebe>
 800ac30:	20008818 	.word	0x20008818
 800ac34:	20008815 	.word	0x20008815
 800ac38:	200087e8 	.word	0x200087e8
 800ac3c:	20008808 	.word	0x20008808
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ac40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac42:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ac44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f040 80c6 	bne.w	800adda <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ac4e:	4b80      	ldr	r3, [pc, #512]	; (800ae50 <tcp_receive+0xf18>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	68db      	ldr	r3, [r3, #12]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	f340 80bd 	ble.w	800adda <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac62:	68db      	ldr	r3, [r3, #12]
 800ac64:	899b      	ldrh	r3, [r3, #12]
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fa fd27 	bl	80056bc <lwip_htons>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	f003 0301 	and.w	r3, r3, #1
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	f040 80bf 	bne.w	800adfa <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ac7c:	4875      	ldr	r0, [pc, #468]	; (800ae54 <tcp_receive+0xf1c>)
 800ac7e:	f7fd fb07 	bl	8008290 <tcp_seg_copy>
 800ac82:	4602      	mov	r2, r0
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ac88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f000 80b6 	beq.w	800adfe <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ac92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac9a:	8912      	ldrh	r2, [r2, #8]
 800ac9c:	441a      	add	r2, r3
 800ac9e:	4b6c      	ldr	r3, [pc, #432]	; (800ae50 <tcp_receive+0xf18>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	1ad3      	subs	r3, r2, r3
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	dd12      	ble.n	800acce <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800aca8:	4b69      	ldr	r3, [pc, #420]	; (800ae50 <tcp_receive+0xf18>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	b29a      	uxth	r2, r3
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	68db      	ldr	r3, [r3, #12]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	1ad3      	subs	r3, r2, r3
 800acb8:	b29a      	uxth	r2, r3
 800acba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acbc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800acbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acc4:	891b      	ldrh	r3, [r3, #8]
 800acc6:	4619      	mov	r1, r3
 800acc8:	4610      	mov	r0, r2
 800acca:	f7fb fecf 	bl	8006a6c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800acce:	4b62      	ldr	r3, [pc, #392]	; (800ae58 <tcp_receive+0xf20>)
 800acd0:	881b      	ldrh	r3, [r3, #0]
 800acd2:	461a      	mov	r2, r3
 800acd4:	4b5e      	ldr	r3, [pc, #376]	; (800ae50 <tcp_receive+0xf18>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	441a      	add	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ace2:	440b      	add	r3, r1
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	f340 8089 	ble.w	800adfe <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800acec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	899b      	ldrh	r3, [r3, #12]
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fa fce0 	bl	80056bc <lwip_htons>
 800acfc:	4603      	mov	r3, r0
 800acfe:	b2db      	uxtb	r3, r3
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d022      	beq.n	800ad4e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	899b      	ldrh	r3, [r3, #12]
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	b21b      	sxth	r3, r3
 800ad14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad18:	b21c      	sxth	r4, r3
 800ad1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	899b      	ldrh	r3, [r3, #12]
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	4618      	mov	r0, r3
 800ad26:	f7fa fcc9 	bl	80056bc <lwip_htons>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	b29b      	uxth	r3, r3
 800ad30:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7fa fcc0 	bl	80056bc <lwip_htons>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	b21b      	sxth	r3, r3
 800ad40:	4323      	orrs	r3, r4
 800ad42:	b21a      	sxth	r2, r3
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	b292      	uxth	r2, r2
 800ad4c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad58:	4413      	add	r3, r2
 800ad5a:	b299      	uxth	r1, r3
 800ad5c:	4b3c      	ldr	r3, [pc, #240]	; (800ae50 <tcp_receive+0xf18>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	1a8a      	subs	r2, r1, r2
 800ad68:	b292      	uxth	r2, r2
 800ad6a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ad6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	891b      	ldrh	r3, [r3, #8]
 800ad78:	4619      	mov	r1, r3
 800ad7a:	4610      	mov	r0, r2
 800ad7c:	f7fb fe76 	bl	8006a6c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	891c      	ldrh	r4, [r3, #8]
 800ad86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	899b      	ldrh	r3, [r3, #12]
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	4618      	mov	r0, r3
 800ad92:	f7fa fc93 	bl	80056bc <lwip_htons>
 800ad96:	4603      	mov	r3, r0
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <tcp_receive+0xe6e>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e000      	b.n	800ada8 <tcp_receive+0xe70>
 800ada6:	2300      	movs	r3, #0
 800ada8:	4423      	add	r3, r4
 800adaa:	b29a      	uxth	r2, r3
 800adac:	4b2a      	ldr	r3, [pc, #168]	; (800ae58 <tcp_receive+0xf20>)
 800adae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800adb0:	4b29      	ldr	r3, [pc, #164]	; (800ae58 <tcp_receive+0xf20>)
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	4b26      	ldr	r3, [pc, #152]	; (800ae50 <tcp_receive+0xf18>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	441a      	add	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adc4:	440b      	add	r3, r1
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d019      	beq.n	800adfe <tcp_receive+0xec6>
 800adca:	4b24      	ldr	r3, [pc, #144]	; (800ae5c <tcp_receive+0xf24>)
 800adcc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800add0:	4923      	ldr	r1, [pc, #140]	; (800ae60 <tcp_receive+0xf28>)
 800add2:	4824      	ldr	r0, [pc, #144]	; (800ae64 <tcp_receive+0xf2c>)
 800add4:	f004 fa84 	bl	800f2e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800add8:	e011      	b.n	800adfe <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	63bb      	str	r3, [r7, #56]	; 0x38
 800ade0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f47f aea4 	bne.w	800ab30 <tcp_receive+0xbf8>
 800ade8:	e00a      	b.n	800ae00 <tcp_receive+0xec8>
                break;
 800adea:	bf00      	nop
 800adec:	e008      	b.n	800ae00 <tcp_receive+0xec8>
                break;
 800adee:	bf00      	nop
 800adf0:	e006      	b.n	800ae00 <tcp_receive+0xec8>
                  break;
 800adf2:	bf00      	nop
 800adf4:	e004      	b.n	800ae00 <tcp_receive+0xec8>
                  break;
 800adf6:	bf00      	nop
 800adf8:	e002      	b.n	800ae00 <tcp_receive+0xec8>
                  break;
 800adfa:	bf00      	nop
 800adfc:	e000      	b.n	800ae00 <tcp_receive+0xec8>
                break;
 800adfe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f001 fa33 	bl	800c26c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ae06:	e003      	b.n	800ae10 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f001 fa2f 	bl	800c26c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae0e:	e01a      	b.n	800ae46 <tcp_receive+0xf0e>
 800ae10:	e019      	b.n	800ae46 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ae12:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <tcp_receive+0xf18>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	1ad3      	subs	r3, r2, r3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	db0a      	blt.n	800ae36 <tcp_receive+0xefe>
 800ae20:	4b0b      	ldr	r3, [pc, #44]	; (800ae50 <tcp_receive+0xf18>)
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae2c:	440b      	add	r3, r1
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	3301      	adds	r3, #1
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	dd07      	ble.n	800ae46 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	8b5b      	ldrh	r3, [r3, #26]
 800ae3a:	f043 0302 	orr.w	r3, r3, #2
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ae44:	e7ff      	b.n	800ae46 <tcp_receive+0xf0e>
 800ae46:	bf00      	nop
 800ae48:	3750      	adds	r7, #80	; 0x50
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bdb0      	pop	{r4, r5, r7, pc}
 800ae4e:	bf00      	nop
 800ae50:	20008808 	.word	0x20008808
 800ae54:	200087e8 	.word	0x200087e8
 800ae58:	20008812 	.word	0x20008812
 800ae5c:	08011350 	.word	0x08011350
 800ae60:	080116f8 	.word	0x080116f8
 800ae64:	0801139c 	.word	0x0801139c

0800ae68 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ae6e:	4b15      	ldr	r3, [pc, #84]	; (800aec4 <tcp_get_next_optbyte+0x5c>)
 800ae70:	881b      	ldrh	r3, [r3, #0]
 800ae72:	1c5a      	adds	r2, r3, #1
 800ae74:	b291      	uxth	r1, r2
 800ae76:	4a13      	ldr	r2, [pc, #76]	; (800aec4 <tcp_get_next_optbyte+0x5c>)
 800ae78:	8011      	strh	r1, [r2, #0]
 800ae7a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ae7c:	4b12      	ldr	r3, [pc, #72]	; (800aec8 <tcp_get_next_optbyte+0x60>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d004      	beq.n	800ae8e <tcp_get_next_optbyte+0x26>
 800ae84:	4b11      	ldr	r3, [pc, #68]	; (800aecc <tcp_get_next_optbyte+0x64>)
 800ae86:	881b      	ldrh	r3, [r3, #0]
 800ae88:	88fa      	ldrh	r2, [r7, #6]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d208      	bcs.n	800aea0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ae8e:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <tcp_get_next_optbyte+0x68>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	3314      	adds	r3, #20
 800ae94:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ae96:	88fb      	ldrh	r3, [r7, #6]
 800ae98:	683a      	ldr	r2, [r7, #0]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	e00b      	b.n	800aeb8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800aea0:	88fb      	ldrh	r3, [r7, #6]
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	4b09      	ldr	r3, [pc, #36]	; (800aecc <tcp_get_next_optbyte+0x64>)
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aeae:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <tcp_get_next_optbyte+0x60>)
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	797b      	ldrb	r3, [r7, #5]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	20008804 	.word	0x20008804
 800aec8:	20008800 	.word	0x20008800
 800aecc:	200087fe 	.word	0x200087fe
 800aed0:	200087f8 	.word	0x200087f8

0800aed4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d106      	bne.n	800aef0 <tcp_parseopt+0x1c>
 800aee2:	4b32      	ldr	r3, [pc, #200]	; (800afac <tcp_parseopt+0xd8>)
 800aee4:	f240 727d 	movw	r2, #1917	; 0x77d
 800aee8:	4931      	ldr	r1, [pc, #196]	; (800afb0 <tcp_parseopt+0xdc>)
 800aeea:	4832      	ldr	r0, [pc, #200]	; (800afb4 <tcp_parseopt+0xe0>)
 800aeec:	f004 f9f8 	bl	800f2e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aef0:	4b31      	ldr	r3, [pc, #196]	; (800afb8 <tcp_parseopt+0xe4>)
 800aef2:	881b      	ldrh	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d055      	beq.n	800afa4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aef8:	4b30      	ldr	r3, [pc, #192]	; (800afbc <tcp_parseopt+0xe8>)
 800aefa:	2200      	movs	r2, #0
 800aefc:	801a      	strh	r2, [r3, #0]
 800aefe:	e045      	b.n	800af8c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800af00:	f7ff ffb2 	bl	800ae68 <tcp_get_next_optbyte>
 800af04:	4603      	mov	r3, r0
 800af06:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800af08:	7bfb      	ldrb	r3, [r7, #15]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d006      	beq.n	800af1c <tcp_parseopt+0x48>
 800af0e:	2b02      	cmp	r3, #2
 800af10:	dc2b      	bgt.n	800af6a <tcp_parseopt+0x96>
 800af12:	2b00      	cmp	r3, #0
 800af14:	d041      	beq.n	800af9a <tcp_parseopt+0xc6>
 800af16:	2b01      	cmp	r3, #1
 800af18:	d127      	bne.n	800af6a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800af1a:	e037      	b.n	800af8c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800af1c:	f7ff ffa4 	bl	800ae68 <tcp_get_next_optbyte>
 800af20:	4603      	mov	r3, r0
 800af22:	2b04      	cmp	r3, #4
 800af24:	d13b      	bne.n	800af9e <tcp_parseopt+0xca>
 800af26:	4b25      	ldr	r3, [pc, #148]	; (800afbc <tcp_parseopt+0xe8>)
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	3301      	adds	r3, #1
 800af2c:	4a22      	ldr	r2, [pc, #136]	; (800afb8 <tcp_parseopt+0xe4>)
 800af2e:	8812      	ldrh	r2, [r2, #0]
 800af30:	4293      	cmp	r3, r2
 800af32:	da34      	bge.n	800af9e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af34:	f7ff ff98 	bl	800ae68 <tcp_get_next_optbyte>
 800af38:	4603      	mov	r3, r0
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	021b      	lsls	r3, r3, #8
 800af3e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800af40:	f7ff ff92 	bl	800ae68 <tcp_get_next_optbyte>
 800af44:	4603      	mov	r3, r0
 800af46:	b29a      	uxth	r2, r3
 800af48:	89bb      	ldrh	r3, [r7, #12]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800af4e:	89bb      	ldrh	r3, [r7, #12]
 800af50:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800af54:	d804      	bhi.n	800af60 <tcp_parseopt+0x8c>
 800af56:	89bb      	ldrh	r3, [r7, #12]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d001      	beq.n	800af60 <tcp_parseopt+0x8c>
 800af5c:	89ba      	ldrh	r2, [r7, #12]
 800af5e:	e001      	b.n	800af64 <tcp_parseopt+0x90>
 800af60:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800af68:	e010      	b.n	800af8c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800af6a:	f7ff ff7d 	bl	800ae68 <tcp_get_next_optbyte>
 800af6e:	4603      	mov	r3, r0
 800af70:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800af72:	7afb      	ldrb	r3, [r7, #11]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d914      	bls.n	800afa2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800af78:	7afb      	ldrb	r3, [r7, #11]
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <tcp_parseopt+0xe8>)
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	4413      	add	r3, r2
 800af82:	b29b      	uxth	r3, r3
 800af84:	3b02      	subs	r3, #2
 800af86:	b29a      	uxth	r2, r3
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <tcp_parseopt+0xe8>)
 800af8a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af8c:	4b0b      	ldr	r3, [pc, #44]	; (800afbc <tcp_parseopt+0xe8>)
 800af8e:	881a      	ldrh	r2, [r3, #0]
 800af90:	4b09      	ldr	r3, [pc, #36]	; (800afb8 <tcp_parseopt+0xe4>)
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	429a      	cmp	r2, r3
 800af96:	d3b3      	bcc.n	800af00 <tcp_parseopt+0x2c>
 800af98:	e004      	b.n	800afa4 <tcp_parseopt+0xd0>
          return;
 800af9a:	bf00      	nop
 800af9c:	e002      	b.n	800afa4 <tcp_parseopt+0xd0>
            return;
 800af9e:	bf00      	nop
 800afa0:	e000      	b.n	800afa4 <tcp_parseopt+0xd0>
            return;
 800afa2:	bf00      	nop
      }
    }
  }
}
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	08011350 	.word	0x08011350
 800afb0:	080117b4 	.word	0x080117b4
 800afb4:	0801139c 	.word	0x0801139c
 800afb8:	200087fc 	.word	0x200087fc
 800afbc:	20008804 	.word	0x20008804

0800afc0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800afc4:	4b05      	ldr	r3, [pc, #20]	; (800afdc <tcp_trigger_input_pcb_close+0x1c>)
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	f043 0310 	orr.w	r3, r3, #16
 800afcc:	b2da      	uxtb	r2, r3
 800afce:	4b03      	ldr	r3, [pc, #12]	; (800afdc <tcp_trigger_input_pcb_close+0x1c>)
 800afd0:	701a      	strb	r2, [r3, #0]
}
 800afd2:	bf00      	nop
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr
 800afdc:	20008815 	.word	0x20008815

0800afe0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	60f8      	str	r0, [r7, #12]
 800afe8:	60b9      	str	r1, [r7, #8]
 800afea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <tcp_route+0x28>
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	7a1b      	ldrb	r3, [r3, #8]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d006      	beq.n	800b008 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	7a1b      	ldrb	r3, [r3, #8]
 800affe:	4618      	mov	r0, r3
 800b000:	f7fb fb5a 	bl	80066b8 <netif_get_by_index>
 800b004:	4603      	mov	r3, r0
 800b006:	e003      	b.n	800b010 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f002 fe7d 	bl	800dd08 <ip4_route>
 800b00e:	4603      	mov	r3, r0
  }
}
 800b010:	4618      	mov	r0, r3
 800b012:	3710      	adds	r7, #16
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b018:	b590      	push	{r4, r7, lr}
 800b01a:	b087      	sub	sp, #28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	4613      	mov	r3, r2
 800b026:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d105      	bne.n	800b03a <tcp_create_segment+0x22>
 800b02e:	4b44      	ldr	r3, [pc, #272]	; (800b140 <tcp_create_segment+0x128>)
 800b030:	22a3      	movs	r2, #163	; 0xa3
 800b032:	4944      	ldr	r1, [pc, #272]	; (800b144 <tcp_create_segment+0x12c>)
 800b034:	4844      	ldr	r0, [pc, #272]	; (800b148 <tcp_create_segment+0x130>)
 800b036:	f004 f953 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d105      	bne.n	800b04c <tcp_create_segment+0x34>
 800b040:	4b3f      	ldr	r3, [pc, #252]	; (800b140 <tcp_create_segment+0x128>)
 800b042:	22a4      	movs	r2, #164	; 0xa4
 800b044:	4941      	ldr	r1, [pc, #260]	; (800b14c <tcp_create_segment+0x134>)
 800b046:	4840      	ldr	r0, [pc, #256]	; (800b148 <tcp_create_segment+0x130>)
 800b048:	f004 f94a 	bl	800f2e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b04c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0304 	and.w	r3, r3, #4
 800b058:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b05a:	2003      	movs	r0, #3
 800b05c:	f7fa ffa6 	bl	8005fac <memp_malloc>
 800b060:	6138      	str	r0, [r7, #16]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d104      	bne.n	800b072 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b068:	68b8      	ldr	r0, [r7, #8]
 800b06a:	f7fb fe85 	bl	8006d78 <pbuf_free>
    return NULL;
 800b06e:	2300      	movs	r3, #0
 800b070:	e061      	b.n	800b136 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b078:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	2200      	movs	r2, #0
 800b07e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b080:	693b      	ldr	r3, [r7, #16]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	891a      	ldrh	r2, [r3, #8]
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	429a      	cmp	r2, r3
 800b090:	d205      	bcs.n	800b09e <tcp_create_segment+0x86>
 800b092:	4b2b      	ldr	r3, [pc, #172]	; (800b140 <tcp_create_segment+0x128>)
 800b094:	22b0      	movs	r2, #176	; 0xb0
 800b096:	492e      	ldr	r1, [pc, #184]	; (800b150 <tcp_create_segment+0x138>)
 800b098:	482b      	ldr	r0, [pc, #172]	; (800b148 <tcp_create_segment+0x130>)
 800b09a:	f004 f921 	bl	800f2e0 <iprintf>
  seg->len = p->tot_len - optlen;
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	891a      	ldrh	r2, [r3, #8]
 800b0a2:	7dfb      	ldrb	r3, [r7, #23]
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b0ae:	2114      	movs	r1, #20
 800b0b0:	68b8      	ldr	r0, [r7, #8]
 800b0b2:	f7fb fdcb 	bl	8006c4c <pbuf_add_header>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d004      	beq.n	800b0c6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b0bc:	6938      	ldr	r0, [r7, #16]
 800b0be:	f7fd f8ce 	bl	800825e <tcp_seg_free>
    return NULL;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	e037      	b.n	800b136 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	8ada      	ldrh	r2, [r3, #22]
 800b0d4:	693b      	ldr	r3, [r7, #16]
 800b0d6:	68dc      	ldr	r4, [r3, #12]
 800b0d8:	4610      	mov	r0, r2
 800b0da:	f7fa faef 	bl	80056bc <lwip_htons>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8b1a      	ldrh	r2, [r3, #24]
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	68dc      	ldr	r4, [r3, #12]
 800b0ea:	4610      	mov	r0, r2
 800b0ec:	f7fa fae6 	bl	80056bc <lwip_htons>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	68dc      	ldr	r4, [r3, #12]
 800b0f8:	6838      	ldr	r0, [r7, #0]
 800b0fa:	f7fa faf4 	bl	80056e6 <lwip_htonl>
 800b0fe:	4603      	mov	r3, r0
 800b100:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b102:	7dfb      	ldrb	r3, [r7, #23]
 800b104:	089b      	lsrs	r3, r3, #2
 800b106:	b2db      	uxtb	r3, r3
 800b108:	b29b      	uxth	r3, r3
 800b10a:	3305      	adds	r3, #5
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	031b      	lsls	r3, r3, #12
 800b110:	b29a      	uxth	r2, r3
 800b112:	79fb      	ldrb	r3, [r7, #7]
 800b114:	b29b      	uxth	r3, r3
 800b116:	4313      	orrs	r3, r2
 800b118:	b29a      	uxth	r2, r3
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	68dc      	ldr	r4, [r3, #12]
 800b11e:	4610      	mov	r0, r2
 800b120:	f7fa facc 	bl	80056bc <lwip_htons>
 800b124:	4603      	mov	r3, r0
 800b126:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	2200      	movs	r2, #0
 800b12e:	749a      	strb	r2, [r3, #18]
 800b130:	2200      	movs	r2, #0
 800b132:	74da      	strb	r2, [r3, #19]
  return seg;
 800b134:	693b      	ldr	r3, [r7, #16]
}
 800b136:	4618      	mov	r0, r3
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd90      	pop	{r4, r7, pc}
 800b13e:	bf00      	nop
 800b140:	080117d0 	.word	0x080117d0
 800b144:	08011804 	.word	0x08011804
 800b148:	08011824 	.word	0x08011824
 800b14c:	0801184c 	.word	0x0801184c
 800b150:	08011870 	.word	0x08011870

0800b154 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b154:	b590      	push	{r4, r7, lr}
 800b156:	b08b      	sub	sp, #44	; 0x2c
 800b158:	af02      	add	r7, sp, #8
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	460b      	mov	r3, r1
 800b15e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800b160:	2300      	movs	r3, #0
 800b162:	61fb      	str	r3, [r7, #28]
 800b164:	2300      	movs	r3, #0
 800b166:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800b168:	2300      	movs	r3, #0
 800b16a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <tcp_split_unsent_seg+0x2c>
 800b172:	4b95      	ldr	r3, [pc, #596]	; (800b3c8 <tcp_split_unsent_seg+0x274>)
 800b174:	f240 324b 	movw	r2, #843	; 0x34b
 800b178:	4994      	ldr	r1, [pc, #592]	; (800b3cc <tcp_split_unsent_seg+0x278>)
 800b17a:	4895      	ldr	r0, [pc, #596]	; (800b3d0 <tcp_split_unsent_seg+0x27c>)
 800b17c:	f004 f8b0 	bl	800f2e0 <iprintf>

  useg = pcb->unsent;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b184:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d102      	bne.n	800b192 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800b18c:	f04f 33ff 	mov.w	r3, #4294967295
 800b190:	e116      	b.n	800b3c0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800b192:	887b      	ldrh	r3, [r7, #2]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d109      	bne.n	800b1ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b198:	4b8b      	ldr	r3, [pc, #556]	; (800b3c8 <tcp_split_unsent_seg+0x274>)
 800b19a:	f240 3253 	movw	r2, #851	; 0x353
 800b19e:	498d      	ldr	r1, [pc, #564]	; (800b3d4 <tcp_split_unsent_seg+0x280>)
 800b1a0:	488b      	ldr	r0, [pc, #556]	; (800b3d0 <tcp_split_unsent_seg+0x27c>)
 800b1a2:	f004 f89d 	bl	800f2e0 <iprintf>
    return ERR_VAL;
 800b1a6:	f06f 0305 	mvn.w	r3, #5
 800b1aa:	e109      	b.n	800b3c0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	891b      	ldrh	r3, [r3, #8]
 800b1b0:	887a      	ldrh	r2, [r7, #2]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d301      	bcc.n	800b1ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e102      	b.n	800b3c0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b1be:	887a      	ldrh	r2, [r7, #2]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d906      	bls.n	800b1d2 <tcp_split_unsent_seg+0x7e>
 800b1c4:	4b80      	ldr	r3, [pc, #512]	; (800b3c8 <tcp_split_unsent_seg+0x274>)
 800b1c6:	f240 325b 	movw	r2, #859	; 0x35b
 800b1ca:	4983      	ldr	r1, [pc, #524]	; (800b3d8 <tcp_split_unsent_seg+0x284>)
 800b1cc:	4880      	ldr	r0, [pc, #512]	; (800b3d0 <tcp_split_unsent_seg+0x27c>)
 800b1ce:	f004 f887 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	891b      	ldrh	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d106      	bne.n	800b1e8 <tcp_split_unsent_seg+0x94>
 800b1da:	4b7b      	ldr	r3, [pc, #492]	; (800b3c8 <tcp_split_unsent_seg+0x274>)
 800b1dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b1e0:	497e      	ldr	r1, [pc, #504]	; (800b3dc <tcp_split_unsent_seg+0x288>)
 800b1e2:	487b      	ldr	r0, [pc, #492]	; (800b3d0 <tcp_split_unsent_seg+0x27c>)
 800b1e4:	f004 f87c 	bl	800f2e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	7a9b      	ldrb	r3, [r3, #10]
 800b1ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b1ee:	7bfb      	ldrb	r3, [r7, #15]
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	f003 0304 	and.w	r3, r3, #4
 800b1f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800b1fa:	697b      	ldr	r3, [r7, #20]
 800b1fc:	891a      	ldrh	r2, [r3, #8]
 800b1fe:	887b      	ldrh	r3, [r7, #2]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b204:	7bbb      	ldrb	r3, [r7, #14]
 800b206:	b29a      	uxth	r2, r3
 800b208:	89bb      	ldrh	r3, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b212:	4619      	mov	r1, r3
 800b214:	2036      	movs	r0, #54	; 0x36
 800b216:	f7fb facb 	bl	80067b0 <pbuf_alloc>
 800b21a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	f000 80b7 	beq.w	800b392 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	891a      	ldrh	r2, [r3, #8]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	891b      	ldrh	r3, [r3, #8]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	b29a      	uxth	r2, r3
 800b232:	887b      	ldrh	r3, [r7, #2]
 800b234:	4413      	add	r3, r2
 800b236:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	6858      	ldr	r0, [r3, #4]
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	7bbb      	ldrb	r3, [r7, #14]
 800b242:	18d1      	adds	r1, r2, r3
 800b244:	897b      	ldrh	r3, [r7, #10]
 800b246:	89ba      	ldrh	r2, [r7, #12]
 800b248:	f7fb ff80 	bl	800714c <pbuf_copy_partial>
 800b24c:	4603      	mov	r3, r0
 800b24e:	461a      	mov	r2, r3
 800b250:	89bb      	ldrh	r3, [r7, #12]
 800b252:	4293      	cmp	r3, r2
 800b254:	f040 809f 	bne.w	800b396 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	899b      	ldrh	r3, [r3, #12]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	4618      	mov	r0, r3
 800b262:	f7fa fa2b 	bl	80056bc <lwip_htons>
 800b266:	4603      	mov	r3, r0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b26e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800b270:	2300      	movs	r3, #0
 800b272:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800b274:	7efb      	ldrb	r3, [r7, #27]
 800b276:	f003 0308 	and.w	r3, r3, #8
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d007      	beq.n	800b28e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800b27e:	7efb      	ldrb	r3, [r7, #27]
 800b280:	f023 0308 	bic.w	r3, r3, #8
 800b284:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800b286:	7ebb      	ldrb	r3, [r7, #26]
 800b288:	f043 0308 	orr.w	r3, r3, #8
 800b28c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800b28e:	7efb      	ldrb	r3, [r7, #27]
 800b290:	f003 0301 	and.w	r3, r3, #1
 800b294:	2b00      	cmp	r3, #0
 800b296:	d007      	beq.n	800b2a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800b298:	7efb      	ldrb	r3, [r7, #27]
 800b29a:	f023 0301 	bic.w	r3, r3, #1
 800b29e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800b2a0:	7ebb      	ldrb	r3, [r7, #26]
 800b2a2:	f043 0301 	orr.w	r3, r3, #1
 800b2a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fa fa19 	bl	80056e6 <lwip_htonl>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	887b      	ldrh	r3, [r7, #2]
 800b2b8:	18d1      	adds	r1, r2, r3
 800b2ba:	7eba      	ldrb	r2, [r7, #26]
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	6939      	ldr	r1, [r7, #16]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f7ff fea7 	bl	800b018 <tcp_create_segment>
 800b2ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d063      	beq.n	800b39a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fb fdd6 	bl	8006e88 <pbuf_clen>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	461a      	mov	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2e6:	1a9b      	subs	r3, r3, r2
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	6858      	ldr	r0, [r3, #4]
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	891a      	ldrh	r2, [r3, #8]
 800b2fa:	89bb      	ldrh	r3, [r7, #12]
 800b2fc:	1ad3      	subs	r3, r2, r3
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	4619      	mov	r1, r3
 800b302:	f7fb fbb3 	bl	8006a6c <pbuf_realloc>
  useg->len -= remainder;
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	891a      	ldrh	r2, [r3, #8]
 800b30a:	89bb      	ldrh	r3, [r7, #12]
 800b30c:	1ad3      	subs	r3, r2, r3
 800b30e:	b29a      	uxth	r2, r3
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	899b      	ldrh	r3, [r3, #12]
 800b31a:	b29c      	uxth	r4, r3
 800b31c:	7efb      	ldrb	r3, [r7, #27]
 800b31e:	b29b      	uxth	r3, r3
 800b320:	4618      	mov	r0, r3
 800b322:	f7fa f9cb 	bl	80056bc <lwip_htons>
 800b326:	4603      	mov	r3, r0
 800b328:	461a      	mov	r2, r3
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	68db      	ldr	r3, [r3, #12]
 800b32e:	4322      	orrs	r2, r4
 800b330:	b292      	uxth	r2, r2
 800b332:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fb fda5 	bl	8006e88 <pbuf_clen>
 800b33e:	4603      	mov	r3, r0
 800b340:	461a      	mov	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b348:	4413      	add	r3, r2
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b352:	69fb      	ldr	r3, [r7, #28]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	4618      	mov	r0, r3
 800b358:	f7fb fd96 	bl	8006e88 <pbuf_clen>
 800b35c:	4603      	mov	r3, r0
 800b35e:	461a      	mov	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b366:	4413      	add	r3, r2
 800b368:	b29a      	uxth	r2, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	681a      	ldr	r2, [r3, #0]
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	69fa      	ldr	r2, [r7, #28]
 800b37c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d103      	bne.n	800b38e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800b38e:	2300      	movs	r3, #0
 800b390:	e016      	b.n	800b3c0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800b392:	bf00      	nop
 800b394:	e002      	b.n	800b39c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b396:	bf00      	nop
 800b398:	e000      	b.n	800b39c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800b39a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d006      	beq.n	800b3b0 <tcp_split_unsent_seg+0x25c>
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <tcp_split_unsent_seg+0x274>)
 800b3a4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800b3a8:	490d      	ldr	r1, [pc, #52]	; (800b3e0 <tcp_split_unsent_seg+0x28c>)
 800b3aa:	4809      	ldr	r0, [pc, #36]	; (800b3d0 <tcp_split_unsent_seg+0x27c>)
 800b3ac:	f003 ff98 	bl	800f2e0 <iprintf>
  if (p != NULL) {
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800b3b6:	6938      	ldr	r0, [r7, #16]
 800b3b8:	f7fb fcde 	bl	8006d78 <pbuf_free>
  }

  return ERR_MEM;
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3724      	adds	r7, #36	; 0x24
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd90      	pop	{r4, r7, pc}
 800b3c8:	080117d0 	.word	0x080117d0
 800b3cc:	08011b64 	.word	0x08011b64
 800b3d0:	08011824 	.word	0x08011824
 800b3d4:	08011b88 	.word	0x08011b88
 800b3d8:	08011bac 	.word	0x08011bac
 800b3dc:	08011bbc 	.word	0x08011bbc
 800b3e0:	08011bcc 	.word	0x08011bcc

0800b3e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800b3e4:	b590      	push	{r4, r7, lr}
 800b3e6:	b085      	sub	sp, #20
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <tcp_send_fin+0x1c>
 800b3f2:	4b21      	ldr	r3, [pc, #132]	; (800b478 <tcp_send_fin+0x94>)
 800b3f4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b3f8:	4920      	ldr	r1, [pc, #128]	; (800b47c <tcp_send_fin+0x98>)
 800b3fa:	4821      	ldr	r0, [pc, #132]	; (800b480 <tcp_send_fin+0x9c>)
 800b3fc:	f003 ff70 	bl	800f2e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b404:	2b00      	cmp	r3, #0
 800b406:	d02e      	beq.n	800b466 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	e002      	b.n	800b416 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d1f8      	bne.n	800b410 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	899b      	ldrh	r3, [r3, #12]
 800b424:	b29b      	uxth	r3, r3
 800b426:	4618      	mov	r0, r3
 800b428:	f7fa f948 	bl	80056bc <lwip_htons>
 800b42c:	4603      	mov	r3, r0
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	f003 0307 	and.w	r3, r3, #7
 800b434:	2b00      	cmp	r3, #0
 800b436:	d116      	bne.n	800b466 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	899b      	ldrh	r3, [r3, #12]
 800b43e:	b29c      	uxth	r4, r3
 800b440:	2001      	movs	r0, #1
 800b442:	f7fa f93b 	bl	80056bc <lwip_htons>
 800b446:	4603      	mov	r3, r0
 800b448:	461a      	mov	r2, r3
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	4322      	orrs	r2, r4
 800b450:	b292      	uxth	r2, r2
 800b452:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	8b5b      	ldrh	r3, [r3, #26]
 800b458:	f043 0320 	orr.w	r3, r3, #32
 800b45c:	b29a      	uxth	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	e004      	b.n	800b470 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b466:	2101      	movs	r1, #1
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f000 f80b 	bl	800b484 <tcp_enqueue_flags>
 800b46e:	4603      	mov	r3, r0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3714      	adds	r7, #20
 800b474:	46bd      	mov	sp, r7
 800b476:	bd90      	pop	{r4, r7, pc}
 800b478:	080117d0 	.word	0x080117d0
 800b47c:	08011bd8 	.word	0x08011bd8
 800b480:	08011824 	.word	0x08011824

0800b484 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b08a      	sub	sp, #40	; 0x28
 800b488:	af02      	add	r7, sp, #8
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	460b      	mov	r3, r1
 800b48e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800b490:	2300      	movs	r3, #0
 800b492:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800b494:	2300      	movs	r3, #0
 800b496:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b498:	78fb      	ldrb	r3, [r7, #3]
 800b49a:	f003 0303 	and.w	r3, r3, #3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d106      	bne.n	800b4b0 <tcp_enqueue_flags+0x2c>
 800b4a2:	4b67      	ldr	r3, [pc, #412]	; (800b640 <tcp_enqueue_flags+0x1bc>)
 800b4a4:	f240 4211 	movw	r2, #1041	; 0x411
 800b4a8:	4966      	ldr	r1, [pc, #408]	; (800b644 <tcp_enqueue_flags+0x1c0>)
 800b4aa:	4867      	ldr	r0, [pc, #412]	; (800b648 <tcp_enqueue_flags+0x1c4>)
 800b4ac:	f003 ff18 	bl	800f2e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <tcp_enqueue_flags+0x40>
 800b4b6:	4b62      	ldr	r3, [pc, #392]	; (800b640 <tcp_enqueue_flags+0x1bc>)
 800b4b8:	f240 4213 	movw	r2, #1043	; 0x413
 800b4bc:	4963      	ldr	r1, [pc, #396]	; (800b64c <tcp_enqueue_flags+0x1c8>)
 800b4be:	4862      	ldr	r0, [pc, #392]	; (800b648 <tcp_enqueue_flags+0x1c4>)
 800b4c0:	f003 ff0e 	bl	800f2e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800b4c4:	78fb      	ldrb	r3, [r7, #3]
 800b4c6:	f003 0302 	and.w	r3, r3, #2
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b4d2:	7ffb      	ldrb	r3, [r7, #31]
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	b2db      	uxtb	r3, r3
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b4de:	7dfb      	ldrb	r3, [r7, #23]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	2036      	movs	r0, #54	; 0x36
 800b4ea:	f7fb f961 	bl	80067b0 <pbuf_alloc>
 800b4ee:	6138      	str	r0, [r7, #16]
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d109      	bne.n	800b50a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	8b5b      	ldrh	r3, [r3, #26]
 800b4fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b504:	f04f 33ff 	mov.w	r3, #4294967295
 800b508:	e095      	b.n	800b636 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	895a      	ldrh	r2, [r3, #10]
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
 800b510:	b29b      	uxth	r3, r3
 800b512:	429a      	cmp	r2, r3
 800b514:	d206      	bcs.n	800b524 <tcp_enqueue_flags+0xa0>
 800b516:	4b4a      	ldr	r3, [pc, #296]	; (800b640 <tcp_enqueue_flags+0x1bc>)
 800b518:	f240 4239 	movw	r2, #1081	; 0x439
 800b51c:	494c      	ldr	r1, [pc, #304]	; (800b650 <tcp_enqueue_flags+0x1cc>)
 800b51e:	484a      	ldr	r0, [pc, #296]	; (800b648 <tcp_enqueue_flags+0x1c4>)
 800b520:	f003 fede 	bl	800f2e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800b528:	78fa      	ldrb	r2, [r7, #3]
 800b52a:	7ffb      	ldrb	r3, [r7, #31]
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	460b      	mov	r3, r1
 800b530:	6939      	ldr	r1, [r7, #16]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f7ff fd70 	bl	800b018 <tcp_create_segment>
 800b538:	60f8      	str	r0, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d109      	bne.n	800b554 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	8b5b      	ldrh	r3, [r3, #26]
 800b544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b548:	b29a      	uxth	r2, r3
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800b54e:	f04f 33ff 	mov.w	r3, #4294967295
 800b552:	e070      	b.n	800b636 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f003 0303 	and.w	r3, r3, #3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d006      	beq.n	800b56e <tcp_enqueue_flags+0xea>
 800b560:	4b37      	ldr	r3, [pc, #220]	; (800b640 <tcp_enqueue_flags+0x1bc>)
 800b562:	f240 4242 	movw	r2, #1090	; 0x442
 800b566:	493b      	ldr	r1, [pc, #236]	; (800b654 <tcp_enqueue_flags+0x1d0>)
 800b568:	4837      	ldr	r0, [pc, #220]	; (800b648 <tcp_enqueue_flags+0x1c4>)
 800b56a:	f003 feb9 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	891b      	ldrh	r3, [r3, #8]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d006      	beq.n	800b584 <tcp_enqueue_flags+0x100>
 800b576:	4b32      	ldr	r3, [pc, #200]	; (800b640 <tcp_enqueue_flags+0x1bc>)
 800b578:	f240 4243 	movw	r2, #1091	; 0x443
 800b57c:	4936      	ldr	r1, [pc, #216]	; (800b658 <tcp_enqueue_flags+0x1d4>)
 800b57e:	4832      	ldr	r0, [pc, #200]	; (800b648 <tcp_enqueue_flags+0x1c4>)
 800b580:	f003 feae 	bl	800f2e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d103      	bne.n	800b594 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	66da      	str	r2, [r3, #108]	; 0x6c
 800b592:	e00d      	b.n	800b5b0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b598:	61bb      	str	r3, [r7, #24]
 800b59a:	e002      	b.n	800b5a2 <tcp_enqueue_flags+0x11e>
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	61bb      	str	r3, [r7, #24]
 800b5a2:	69bb      	ldr	r3, [r7, #24]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d1f8      	bne.n	800b59c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	68fa      	ldr	r2, [r7, #12]
 800b5ae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b5b8:	78fb      	ldrb	r3, [r7, #3]
 800b5ba:	f003 0302 	and.w	r3, r3, #2
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d104      	bne.n	800b5cc <tcp_enqueue_flags+0x148>
 800b5c2:	78fb      	ldrb	r3, [r7, #3]
 800b5c4:	f003 0301 	and.w	r3, r3, #1
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d0:	1c5a      	adds	r2, r3, #1
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800b5d6:	78fb      	ldrb	r3, [r7, #3]
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d006      	beq.n	800b5ee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	8b5b      	ldrh	r3, [r3, #26]
 800b5e4:	f043 0320 	orr.w	r3, r3, #32
 800b5e8:	b29a      	uxth	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	f7fb fc48 	bl	8006e88 <pbuf_clen>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b602:	4413      	add	r3, r2
 800b604:	b29a      	uxth	r2, r3
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b612:	2b00      	cmp	r3, #0
 800b614:	d00e      	beq.n	800b634 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10a      	bne.n	800b634 <tcp_enqueue_flags+0x1b0>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b622:	2b00      	cmp	r3, #0
 800b624:	d106      	bne.n	800b634 <tcp_enqueue_flags+0x1b0>
 800b626:	4b06      	ldr	r3, [pc, #24]	; (800b640 <tcp_enqueue_flags+0x1bc>)
 800b628:	f240 4265 	movw	r2, #1125	; 0x465
 800b62c:	490b      	ldr	r1, [pc, #44]	; (800b65c <tcp_enqueue_flags+0x1d8>)
 800b62e:	4806      	ldr	r0, [pc, #24]	; (800b648 <tcp_enqueue_flags+0x1c4>)
 800b630:	f003 fe56 	bl	800f2e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3720      	adds	r7, #32
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	080117d0 	.word	0x080117d0
 800b644:	08011bf4 	.word	0x08011bf4
 800b648:	08011824 	.word	0x08011824
 800b64c:	08011c4c 	.word	0x08011c4c
 800b650:	08011c6c 	.word	0x08011c6c
 800b654:	08011ca8 	.word	0x08011ca8
 800b658:	08011cc0 	.word	0x08011cc0
 800b65c:	08011cec 	.word	0x08011cec

0800b660 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800b660:	b5b0      	push	{r4, r5, r7, lr}
 800b662:	b08a      	sub	sp, #40	; 0x28
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d106      	bne.n	800b67c <tcp_output+0x1c>
 800b66e:	4b8a      	ldr	r3, [pc, #552]	; (800b898 <tcp_output+0x238>)
 800b670:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b674:	4989      	ldr	r1, [pc, #548]	; (800b89c <tcp_output+0x23c>)
 800b676:	488a      	ldr	r0, [pc, #552]	; (800b8a0 <tcp_output+0x240>)
 800b678:	f003 fe32 	bl	800f2e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	7d1b      	ldrb	r3, [r3, #20]
 800b680:	2b01      	cmp	r3, #1
 800b682:	d106      	bne.n	800b692 <tcp_output+0x32>
 800b684:	4b84      	ldr	r3, [pc, #528]	; (800b898 <tcp_output+0x238>)
 800b686:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b68a:	4986      	ldr	r1, [pc, #536]	; (800b8a4 <tcp_output+0x244>)
 800b68c:	4884      	ldr	r0, [pc, #528]	; (800b8a0 <tcp_output+0x240>)
 800b68e:	f003 fe27 	bl	800f2e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800b692:	4b85      	ldr	r3, [pc, #532]	; (800b8a8 <tcp_output+0x248>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d101      	bne.n	800b6a0 <tcp_output+0x40>
    return ERR_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	e1ce      	b.n	800ba3e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	bf28      	it	cs
 800b6b0:	4613      	movcs	r3, r2
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800b6bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d10b      	bne.n	800b6da <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	8b5b      	ldrh	r3, [r3, #26]
 800b6c6:	f003 0302 	and.w	r3, r3, #2
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 81aa 	beq.w	800ba24 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 fdcb 	bl	800c26c <tcp_send_empty_ack>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	e1b1      	b.n	800ba3e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b6da:	6879      	ldr	r1, [r7, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	461a      	mov	r2, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff fc7c 	bl	800afe0 <tcp_route>
 800b6e8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d102      	bne.n	800b6f6 <tcp_output+0x96>
    return ERR_RTE;
 800b6f0:	f06f 0303 	mvn.w	r3, #3
 800b6f4:	e1a3      	b.n	800ba3e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <tcp_output+0xa4>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d111      	bne.n	800b728 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <tcp_output+0xb0>
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	3304      	adds	r3, #4
 800b70e:	e000      	b.n	800b712 <tcp_output+0xb2>
 800b710:	2300      	movs	r3, #0
 800b712:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d102      	bne.n	800b720 <tcp_output+0xc0>
      return ERR_RTE;
 800b71a:	f06f 0303 	mvn.w	r3, #3
 800b71e:	e18e      	b.n	800ba3e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b720:	693b      	ldr	r3, [r7, #16]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	4618      	mov	r0, r3
 800b730:	f7f9 ffd9 	bl	80056e6 <lwip_htonl>
 800b734:	4602      	mov	r2, r0
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b73a:	1ad3      	subs	r3, r2, r3
 800b73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b73e:	8912      	ldrh	r2, [r2, #8]
 800b740:	4413      	add	r3, r2
 800b742:	69ba      	ldr	r2, [r7, #24]
 800b744:	429a      	cmp	r2, r3
 800b746:	d227      	bcs.n	800b798 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b74e:	461a      	mov	r2, r3
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	4293      	cmp	r3, r2
 800b754:	d114      	bne.n	800b780 <tcp_output+0x120>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d110      	bne.n	800b780 <tcp_output+0x120>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800b764:	2b00      	cmp	r3, #0
 800b766:	d10b      	bne.n	800b780 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2201      	movs	r2, #1
 800b774:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	8b5b      	ldrh	r3, [r3, #26]
 800b784:	f003 0302 	and.w	r3, r3, #2
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 814d 	beq.w	800ba28 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fd6c 	bl	800c26c <tcp_send_empty_ack>
 800b794:	4603      	mov	r3, r0
 800b796:	e152      	b.n	800ba3e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7a4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800b7a6:	6a3b      	ldr	r3, [r7, #32]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	f000 811c 	beq.w	800b9e6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800b7ae:	e002      	b.n	800b7b6 <tcp_output+0x156>
 800b7b0:	6a3b      	ldr	r3, [r7, #32]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	623b      	str	r3, [r7, #32]
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d1f8      	bne.n	800b7b0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800b7be:	e112      	b.n	800b9e6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	899b      	ldrh	r3, [r3, #12]
 800b7c6:	b29b      	uxth	r3, r3
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	f7f9 ff77 	bl	80056bc <lwip_htons>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 0304 	and.w	r3, r3, #4
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d006      	beq.n	800b7e8 <tcp_output+0x188>
 800b7da:	4b2f      	ldr	r3, [pc, #188]	; (800b898 <tcp_output+0x238>)
 800b7dc:	f240 5236 	movw	r2, #1334	; 0x536
 800b7e0:	4932      	ldr	r1, [pc, #200]	; (800b8ac <tcp_output+0x24c>)
 800b7e2:	482f      	ldr	r0, [pc, #188]	; (800b8a0 <tcp_output+0x240>)
 800b7e4:	f003 fd7c 	bl	800f2e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01f      	beq.n	800b830 <tcp_output+0x1d0>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	8b5b      	ldrh	r3, [r3, #26]
 800b7f4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d119      	bne.n	800b830 <tcp_output+0x1d0>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00b      	beq.n	800b81c <tcp_output+0x1bc>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d110      	bne.n	800b830 <tcp_output+0x1d0>
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b812:	891a      	ldrh	r2, [r3, #8]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b818:	429a      	cmp	r2, r3
 800b81a:	d209      	bcs.n	800b830 <tcp_output+0x1d0>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b822:	2b00      	cmp	r3, #0
 800b824:	d004      	beq.n	800b830 <tcp_output+0x1d0>
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b82c:	2b08      	cmp	r3, #8
 800b82e:	d901      	bls.n	800b834 <tcp_output+0x1d4>
 800b830:	2301      	movs	r3, #1
 800b832:	e000      	b.n	800b836 <tcp_output+0x1d6>
 800b834:	2300      	movs	r3, #0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d106      	bne.n	800b848 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	8b5b      	ldrh	r3, [r3, #26]
 800b83e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800b842:	2b00      	cmp	r3, #0
 800b844:	f000 80e4 	beq.w	800ba10 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	7d1b      	ldrb	r3, [r3, #20]
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d00d      	beq.n	800b86c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b852:	68db      	ldr	r3, [r3, #12]
 800b854:	899b      	ldrh	r3, [r3, #12]
 800b856:	b29c      	uxth	r4, r3
 800b858:	2010      	movs	r0, #16
 800b85a:	f7f9 ff2f 	bl	80056bc <lwip_htons>
 800b85e:	4603      	mov	r3, r0
 800b860:	461a      	mov	r2, r3
 800b862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	4322      	orrs	r2, r4
 800b868:	b292      	uxth	r2, r2
 800b86a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b872:	f000 f909 	bl	800ba88 <tcp_output_segment>
 800b876:	4603      	mov	r3, r0
 800b878:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b87a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d016      	beq.n	800b8b0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	8b5b      	ldrh	r3, [r3, #26]
 800b886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b88a:	b29a      	uxth	r2, r3
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	835a      	strh	r2, [r3, #26]
      return err;
 800b890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b894:	e0d3      	b.n	800ba3e <tcp_output+0x3de>
 800b896:	bf00      	nop
 800b898:	080117d0 	.word	0x080117d0
 800b89c:	08011d14 	.word	0x08011d14
 800b8a0:	08011824 	.word	0x08011824
 800b8a4:	08011d2c 	.word	0x08011d2c
 800b8a8:	2000881c 	.word	0x2000881c
 800b8ac:	08011d54 	.word	0x08011d54
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	681a      	ldr	r2, [r3, #0]
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	7d1b      	ldrb	r3, [r3, #20]
 800b8bc:	2b02      	cmp	r3, #2
 800b8be:	d006      	beq.n	800b8ce <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8b5b      	ldrh	r3, [r3, #26]
 800b8c4:	f023 0303 	bic.w	r3, r3, #3
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d0:	68db      	ldr	r3, [r3, #12]
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f7f9 ff06 	bl	80056e6 <lwip_htonl>
 800b8da:	4604      	mov	r4, r0
 800b8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8de:	891b      	ldrh	r3, [r3, #8]
 800b8e0:	461d      	mov	r5, r3
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	899b      	ldrh	r3, [r3, #12]
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f7f9 fee6 	bl	80056bc <lwip_htons>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	f003 0303 	and.w	r3, r3, #3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <tcp_output+0x2a0>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e000      	b.n	800b902 <tcp_output+0x2a2>
 800b900:	2300      	movs	r3, #0
 800b902:	442b      	add	r3, r5
 800b904:	4423      	add	r3, r4
 800b906:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	2b00      	cmp	r3, #0
 800b912:	da02      	bge.n	800b91a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800b91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91c:	891b      	ldrh	r3, [r3, #8]
 800b91e:	461c      	mov	r4, r3
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	68db      	ldr	r3, [r3, #12]
 800b924:	899b      	ldrh	r3, [r3, #12]
 800b926:	b29b      	uxth	r3, r3
 800b928:	4618      	mov	r0, r3
 800b92a:	f7f9 fec7 	bl	80056bc <lwip_htons>
 800b92e:	4603      	mov	r3, r0
 800b930:	b2db      	uxtb	r3, r3
 800b932:	f003 0303 	and.w	r3, r3, #3
 800b936:	2b00      	cmp	r3, #0
 800b938:	d001      	beq.n	800b93e <tcp_output+0x2de>
 800b93a:	2301      	movs	r3, #1
 800b93c:	e000      	b.n	800b940 <tcp_output+0x2e0>
 800b93e:	2300      	movs	r3, #0
 800b940:	4423      	add	r3, r4
 800b942:	2b00      	cmp	r3, #0
 800b944:	d049      	beq.n	800b9da <tcp_output+0x37a>
      seg->next = NULL;
 800b946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b950:	2b00      	cmp	r3, #0
 800b952:	d105      	bne.n	800b960 <tcp_output+0x300>
        pcb->unacked = seg;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b958:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b95c:	623b      	str	r3, [r7, #32]
 800b95e:	e03f      	b.n	800b9e0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	4618      	mov	r0, r3
 800b968:	f7f9 febd 	bl	80056e6 <lwip_htonl>
 800b96c:	4604      	mov	r4, r0
 800b96e:	6a3b      	ldr	r3, [r7, #32]
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	4618      	mov	r0, r3
 800b976:	f7f9 feb6 	bl	80056e6 <lwip_htonl>
 800b97a:	4603      	mov	r3, r0
 800b97c:	1ae3      	subs	r3, r4, r3
 800b97e:	2b00      	cmp	r3, #0
 800b980:	da24      	bge.n	800b9cc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	3370      	adds	r3, #112	; 0x70
 800b986:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b988:	e002      	b.n	800b990 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800b98a:	69fb      	ldr	r3, [r7, #28]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d011      	beq.n	800b9bc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f7f9 fea0 	bl	80056e6 <lwip_htonl>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7f9 fe99 	bl	80056e6 <lwip_htonl>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	dbe6      	blt.n	800b98a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800b9c4:	69fb      	ldr	r3, [r7, #28]
 800b9c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	e009      	b.n	800b9e0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800b9d2:	6a3b      	ldr	r3, [r7, #32]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	623b      	str	r3, [r7, #32]
 800b9d8:	e002      	b.n	800b9e0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800b9da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9dc:	f7fc fc3f 	bl	800825e <tcp_seg_free>
    }
    seg = pcb->unsent;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d012      	beq.n	800ba12 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ee:	68db      	ldr	r3, [r3, #12]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7f9 fe77 	bl	80056e6 <lwip_htonl>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba02:	8912      	ldrh	r2, [r2, #8]
 800ba04:	4413      	add	r3, r2
  while (seg != NULL &&
 800ba06:	69ba      	ldr	r2, [r7, #24]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	f4bf aed9 	bcs.w	800b7c0 <tcp_output+0x160>
 800ba0e:	e000      	b.n	800ba12 <tcp_output+0x3b2>
      break;
 800ba10:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d108      	bne.n	800ba2c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ba22:	e004      	b.n	800ba2e <tcp_output+0x3ce>
    goto output_done;
 800ba24:	bf00      	nop
 800ba26:	e002      	b.n	800ba2e <tcp_output+0x3ce>
    goto output_done;
 800ba28:	bf00      	nop
 800ba2a:	e000      	b.n	800ba2e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ba2c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	8b5b      	ldrh	r3, [r3, #26]
 800ba32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3728      	adds	r7, #40	; 0x28
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bdb0      	pop	{r4, r5, r7, pc}
 800ba46:	bf00      	nop

0800ba48 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d106      	bne.n	800ba64 <tcp_output_segment_busy+0x1c>
 800ba56:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <tcp_output_segment_busy+0x34>)
 800ba58:	f240 529a 	movw	r2, #1434	; 0x59a
 800ba5c:	4908      	ldr	r1, [pc, #32]	; (800ba80 <tcp_output_segment_busy+0x38>)
 800ba5e:	4809      	ldr	r0, [pc, #36]	; (800ba84 <tcp_output_segment_busy+0x3c>)
 800ba60:	f003 fc3e 	bl	800f2e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	7b9b      	ldrb	r3, [r3, #14]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d001      	beq.n	800ba72 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e000      	b.n	800ba74 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	080117d0 	.word	0x080117d0
 800ba80:	08011d6c 	.word	0x08011d6c
 800ba84:	08011824 	.word	0x08011824

0800ba88 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ba88:	b5b0      	push	{r4, r5, r7, lr}
 800ba8a:	b08c      	sub	sp, #48	; 0x30
 800ba8c:	af04      	add	r7, sp, #16
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <tcp_output_segment+0x20>
 800ba9a:	4b64      	ldr	r3, [pc, #400]	; (800bc2c <tcp_output_segment+0x1a4>)
 800ba9c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800baa0:	4963      	ldr	r1, [pc, #396]	; (800bc30 <tcp_output_segment+0x1a8>)
 800baa2:	4864      	ldr	r0, [pc, #400]	; (800bc34 <tcp_output_segment+0x1ac>)
 800baa4:	f003 fc1c 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d106      	bne.n	800babc <tcp_output_segment+0x34>
 800baae:	4b5f      	ldr	r3, [pc, #380]	; (800bc2c <tcp_output_segment+0x1a4>)
 800bab0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800bab4:	4960      	ldr	r1, [pc, #384]	; (800bc38 <tcp_output_segment+0x1b0>)
 800bab6:	485f      	ldr	r0, [pc, #380]	; (800bc34 <tcp_output_segment+0x1ac>)
 800bab8:	f003 fc12 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d106      	bne.n	800bad0 <tcp_output_segment+0x48>
 800bac2:	4b5a      	ldr	r3, [pc, #360]	; (800bc2c <tcp_output_segment+0x1a4>)
 800bac4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800bac8:	495c      	ldr	r1, [pc, #368]	; (800bc3c <tcp_output_segment+0x1b4>)
 800baca:	485a      	ldr	r0, [pc, #360]	; (800bc34 <tcp_output_segment+0x1ac>)
 800bacc:	f003 fc08 	bl	800f2e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff ffb9 	bl	800ba48 <tcp_output_segment_busy>
 800bad6:	4603      	mov	r3, r0
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d001      	beq.n	800bae0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800badc:	2300      	movs	r3, #0
 800bade:	e0a1      	b.n	800bc24 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	68dc      	ldr	r4, [r3, #12]
 800bae8:	4610      	mov	r0, r2
 800baea:	f7f9 fdfc 	bl	80056e6 <lwip_htonl>
 800baee:	4603      	mov	r3, r0
 800baf0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	68dc      	ldr	r4, [r3, #12]
 800bafa:	4610      	mov	r0, r2
 800bafc:	f7f9 fdde 	bl	80056bc <lwip_htons>
 800bb00:	4603      	mov	r3, r0
 800bb02:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800bb0c:	441a      	add	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	3314      	adds	r3, #20
 800bb18:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	7a9b      	ldrb	r3, [r3, #10]
 800bb1e:	f003 0301 	and.w	r3, r3, #1
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d015      	beq.n	800bb52 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	3304      	adds	r3, #4
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bb32:	f7fc fe8b 	bl	800884c <tcp_eff_send_mss_netif>
 800bb36:	4603      	mov	r3, r0
 800bb38:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bb3a:	8b7b      	ldrh	r3, [r7, #26]
 800bb3c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7f9 fdd0 	bl	80056e6 <lwip_htonl>
 800bb46:	4602      	mov	r2, r0
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	da02      	bge.n	800bb62 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10c      	bne.n	800bb84 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800bb6a:	4b35      	ldr	r3, [pc, #212]	; (800bc40 <tcp_output_segment+0x1b8>)
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	68db      	ldr	r3, [r3, #12]
 800bb76:	685b      	ldr	r3, [r3, #4]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7f9 fdb4 	bl	80056e6 <lwip_htonl>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	68da      	ldr	r2, [r3, #12]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	685b      	ldr	r3, [r3, #4]
 800bb8c:	685b      	ldr	r3, [r3, #4]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	8959      	ldrh	r1, [r3, #10]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	8b3a      	ldrh	r2, [r7, #24]
 800bb9e:	1a8a      	subs	r2, r1, r2
 800bba0:	b292      	uxth	r2, r2
 800bba2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	685b      	ldr	r3, [r3, #4]
 800bba8:	8919      	ldrh	r1, [r3, #8]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	8b3a      	ldrh	r2, [r7, #24]
 800bbb0:	1a8a      	subs	r2, r1, r2
 800bbb2:	b292      	uxth	r2, r2
 800bbb4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	68fa      	ldr	r2, [r7, #12]
 800bbbc:	68d2      	ldr	r2, [r2, #12]
 800bbbe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	68db      	ldr	r3, [r3, #12]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	741a      	strb	r2, [r3, #16]
 800bbc8:	2200      	movs	r2, #0
 800bbca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	68da      	ldr	r2, [r3, #12]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	7a9b      	ldrb	r3, [r3, #10]
 800bbd4:	f003 0301 	and.w	r3, r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d001      	beq.n	800bbe0 <tcp_output_segment+0x158>
 800bbdc:	2318      	movs	r3, #24
 800bbde:	e000      	b.n	800bbe2 <tcp_output_segment+0x15a>
 800bbe0:	2314      	movs	r3, #20
 800bbe2:	4413      	add	r3, r2
 800bbe4:	69fa      	ldr	r2, [r7, #28]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d006      	beq.n	800bbf8 <tcp_output_segment+0x170>
 800bbea:	4b10      	ldr	r3, [pc, #64]	; (800bc2c <tcp_output_segment+0x1a4>)
 800bbec:	f240 621c 	movw	r2, #1564	; 0x61c
 800bbf0:	4914      	ldr	r1, [pc, #80]	; (800bc44 <tcp_output_segment+0x1bc>)
 800bbf2:	4810      	ldr	r0, [pc, #64]	; (800bc34 <tcp_output_segment+0x1ac>)
 800bbf4:	f003 fb74 	bl	800f2e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6858      	ldr	r0, [r3, #4]
 800bbfc:	68b9      	ldr	r1, [r7, #8]
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	1d1c      	adds	r4, r3, #4
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	7add      	ldrb	r5, [r3, #11]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	7a9b      	ldrb	r3, [r3, #10]
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	9202      	str	r2, [sp, #8]
 800bc0e:	2206      	movs	r2, #6
 800bc10:	9201      	str	r2, [sp, #4]
 800bc12:	9300      	str	r3, [sp, #0]
 800bc14:	462b      	mov	r3, r5
 800bc16:	4622      	mov	r2, r4
 800bc18:	f002 fa34 	bl	800e084 <ip4_output_if>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800bc20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3720      	adds	r7, #32
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bdb0      	pop	{r4, r5, r7, pc}
 800bc2c:	080117d0 	.word	0x080117d0
 800bc30:	08011d94 	.word	0x08011d94
 800bc34:	08011824 	.word	0x08011824
 800bc38:	08011db4 	.word	0x08011db4
 800bc3c:	08011dd4 	.word	0x08011dd4
 800bc40:	200087d0 	.word	0x200087d0
 800bc44:	08011df8 	.word	0x08011df8

0800bc48 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800bc48:	b5b0      	push	{r4, r5, r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <tcp_rexmit_rto_prepare+0x1c>
 800bc56:	4b31      	ldr	r3, [pc, #196]	; (800bd1c <tcp_rexmit_rto_prepare+0xd4>)
 800bc58:	f240 6263 	movw	r2, #1635	; 0x663
 800bc5c:	4930      	ldr	r1, [pc, #192]	; (800bd20 <tcp_rexmit_rto_prepare+0xd8>)
 800bc5e:	4831      	ldr	r0, [pc, #196]	; (800bd24 <tcp_rexmit_rto_prepare+0xdc>)
 800bc60:	f003 fb3e 	bl	800f2e0 <iprintf>

  if (pcb->unacked == NULL) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d102      	bne.n	800bc72 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800bc6c:	f06f 0305 	mvn.w	r3, #5
 800bc70:	e050      	b.n	800bd14 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc76:	60fb      	str	r3, [r7, #12]
 800bc78:	e00b      	b.n	800bc92 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f7ff fee4 	bl	800ba48 <tcp_output_segment_busy>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d002      	beq.n	800bc8c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800bc86:	f06f 0305 	mvn.w	r3, #5
 800bc8a:	e043      	b.n	800bd14 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1ef      	bne.n	800bc7a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff fed4 	bl	800ba48 <tcp_output_segment_busy>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800bca6:	f06f 0305 	mvn.w	r3, #5
 800bcaa:	e033      	b.n	800bd14 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	8b5b      	ldrh	r3, [r3, #26]
 800bcc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	68db      	ldr	r3, [r3, #12]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7f9 fd05 	bl	80056e6 <lwip_htonl>
 800bcdc:	4604      	mov	r4, r0
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	891b      	ldrh	r3, [r3, #8]
 800bce2:	461d      	mov	r5, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	899b      	ldrh	r3, [r3, #12]
 800bcea:	b29b      	uxth	r3, r3
 800bcec:	4618      	mov	r0, r3
 800bcee:	f7f9 fce5 	bl	80056bc <lwip_htons>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	f003 0303 	and.w	r3, r3, #3
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <tcp_rexmit_rto_prepare+0xba>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e000      	b.n	800bd04 <tcp_rexmit_rto_prepare+0xbc>
 800bd02:	2300      	movs	r3, #0
 800bd04:	442b      	add	r3, r5
 800bd06:	18e2      	adds	r2, r4, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800bd12:	2300      	movs	r3, #0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3710      	adds	r7, #16
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bdb0      	pop	{r4, r5, r7, pc}
 800bd1c:	080117d0 	.word	0x080117d0
 800bd20:	08011e0c 	.word	0x08011e0c
 800bd24:	08011824 	.word	0x08011824

0800bd28 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d106      	bne.n	800bd44 <tcp_rexmit_rto_commit+0x1c>
 800bd36:	4b0d      	ldr	r3, [pc, #52]	; (800bd6c <tcp_rexmit_rto_commit+0x44>)
 800bd38:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bd3c:	490c      	ldr	r1, [pc, #48]	; (800bd70 <tcp_rexmit_rto_commit+0x48>)
 800bd3e:	480d      	ldr	r0, [pc, #52]	; (800bd74 <tcp_rexmit_rto_commit+0x4c>)
 800bd40:	f003 face 	bl	800f2e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd4a:	2bff      	cmp	r3, #255	; 0xff
 800bd4c:	d007      	beq.n	800bd5e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd54:	3301      	adds	r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7ff fc7e 	bl	800b660 <tcp_output>
}
 800bd64:	bf00      	nop
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	080117d0 	.word	0x080117d0
 800bd70:	08011e30 	.word	0x08011e30
 800bd74:	08011824 	.word	0x08011824

0800bd78 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d106      	bne.n	800bd94 <tcp_rexmit_rto+0x1c>
 800bd86:	4b0a      	ldr	r3, [pc, #40]	; (800bdb0 <tcp_rexmit_rto+0x38>)
 800bd88:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bd8c:	4909      	ldr	r1, [pc, #36]	; (800bdb4 <tcp_rexmit_rto+0x3c>)
 800bd8e:	480a      	ldr	r0, [pc, #40]	; (800bdb8 <tcp_rexmit_rto+0x40>)
 800bd90:	f003 faa6 	bl	800f2e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff ff57 	bl	800bc48 <tcp_rexmit_rto_prepare>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d102      	bne.n	800bda6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f7ff ffc1 	bl	800bd28 <tcp_rexmit_rto_commit>
  }
}
 800bda6:	bf00      	nop
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
 800bdae:	bf00      	nop
 800bdb0:	080117d0 	.word	0x080117d0
 800bdb4:	08011e54 	.word	0x08011e54
 800bdb8:	08011824 	.word	0x08011824

0800bdbc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800bdbc:	b590      	push	{r4, r7, lr}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d106      	bne.n	800bdd8 <tcp_rexmit+0x1c>
 800bdca:	4b2f      	ldr	r3, [pc, #188]	; (800be88 <tcp_rexmit+0xcc>)
 800bdcc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bdd0:	492e      	ldr	r1, [pc, #184]	; (800be8c <tcp_rexmit+0xd0>)
 800bdd2:	482f      	ldr	r0, [pc, #188]	; (800be90 <tcp_rexmit+0xd4>)
 800bdd4:	f003 fa84 	bl	800f2e0 <iprintf>

  if (pcb->unacked == NULL) {
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d102      	bne.n	800bde6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800bde0:	f06f 0305 	mvn.w	r3, #5
 800bde4:	e04c      	b.n	800be80 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800bdec:	68b8      	ldr	r0, [r7, #8]
 800bdee:	f7ff fe2b 	bl	800ba48 <tcp_output_segment_busy>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800bdf8:	f06f 0305 	mvn.w	r3, #5
 800bdfc:	e040      	b.n	800be80 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	336c      	adds	r3, #108	; 0x6c
 800be0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be0c:	e002      	b.n	800be14 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d011      	beq.n	800be40 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	4618      	mov	r0, r3
 800be26:	f7f9 fc5e 	bl	80056e6 <lwip_htonl>
 800be2a:	4604      	mov	r4, r0
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	68db      	ldr	r3, [r3, #12]
 800be30:	685b      	ldr	r3, [r3, #4]
 800be32:	4618      	mov	r0, r3
 800be34:	f7f9 fc57 	bl	80056e6 <lwip_htonl>
 800be38:	4603      	mov	r3, r0
 800be3a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	dbe6      	blt.n	800be0e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d103      	bne.n	800be5e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be64:	2bff      	cmp	r3, #255	; 0xff
 800be66:	d007      	beq.n	800be78 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800be6e:	3301      	adds	r3, #1
 800be70:	b2da      	uxtb	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2200      	movs	r2, #0
 800be7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	bd90      	pop	{r4, r7, pc}
 800be88:	080117d0 	.word	0x080117d0
 800be8c:	08011e70 	.word	0x08011e70
 800be90:	08011824 	.word	0x08011824

0800be94 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d106      	bne.n	800beb0 <tcp_rexmit_fast+0x1c>
 800bea2:	4b2a      	ldr	r3, [pc, #168]	; (800bf4c <tcp_rexmit_fast+0xb8>)
 800bea4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bea8:	4929      	ldr	r1, [pc, #164]	; (800bf50 <tcp_rexmit_fast+0xbc>)
 800beaa:	482a      	ldr	r0, [pc, #168]	; (800bf54 <tcp_rexmit_fast+0xc0>)
 800beac:	f003 fa18 	bl	800f2e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d045      	beq.n	800bf44 <tcp_rexmit_fast+0xb0>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	8b5b      	ldrh	r3, [r3, #26]
 800bebc:	f003 0304 	and.w	r3, r3, #4
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d13f      	bne.n	800bf44 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f7ff ff79 	bl	800bdbc <tcp_rexmit>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d139      	bne.n	800bf44 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800bedc:	4293      	cmp	r3, r2
 800bede:	bf28      	it	cs
 800bee0:	4613      	movcs	r3, r2
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	da00      	bge.n	800beea <tcp_rexmit_fast+0x56>
 800bee8:	3301      	adds	r3, #1
 800beea:	105b      	asrs	r3, r3, #1
 800beec:	b29a      	uxth	r2, r3
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800befa:	461a      	mov	r2, r3
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf00:	005b      	lsls	r3, r3, #1
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d206      	bcs.n	800bf14 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf0a:	005b      	lsls	r3, r3, #1
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800bf1e:	4619      	mov	r1, r3
 800bf20:	0049      	lsls	r1, r1, #1
 800bf22:	440b      	add	r3, r1
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	4413      	add	r3, r2
 800bf28:	b29a      	uxth	r2, r3
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	8b5b      	ldrh	r3, [r3, #26]
 800bf34:	f043 0304 	orr.w	r3, r3, #4
 800bf38:	b29a      	uxth	r2, r3
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2200      	movs	r2, #0
 800bf42:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800bf44:	bf00      	nop
 800bf46:	3708      	adds	r7, #8
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	080117d0 	.word	0x080117d0
 800bf50:	08011e88 	.word	0x08011e88
 800bf54:	08011824 	.word	0x08011824

0800bf58 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b086      	sub	sp, #24
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	607b      	str	r3, [r7, #4]
 800bf62:	460b      	mov	r3, r1
 800bf64:	817b      	strh	r3, [r7, #10]
 800bf66:	4613      	mov	r3, r2
 800bf68:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800bf6a:	897a      	ldrh	r2, [r7, #10]
 800bf6c:	893b      	ldrh	r3, [r7, #8]
 800bf6e:	4413      	add	r3, r2
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	3314      	adds	r3, #20
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	2022      	movs	r0, #34	; 0x22
 800bf7e:	f7fa fc17 	bl	80067b0 <pbuf_alloc>
 800bf82:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d04d      	beq.n	800c026 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800bf8a:	897b      	ldrh	r3, [r7, #10]
 800bf8c:	3313      	adds	r3, #19
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	8952      	ldrh	r2, [r2, #10]
 800bf92:	4293      	cmp	r3, r2
 800bf94:	db06      	blt.n	800bfa4 <tcp_output_alloc_header_common+0x4c>
 800bf96:	4b26      	ldr	r3, [pc, #152]	; (800c030 <tcp_output_alloc_header_common+0xd8>)
 800bf98:	f240 7223 	movw	r2, #1827	; 0x723
 800bf9c:	4925      	ldr	r1, [pc, #148]	; (800c034 <tcp_output_alloc_header_common+0xdc>)
 800bf9e:	4826      	ldr	r0, [pc, #152]	; (800c038 <tcp_output_alloc_header_common+0xe0>)
 800bfa0:	f003 f99e 	bl	800f2e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800bfaa:	8c3b      	ldrh	r3, [r7, #32]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7f9 fb85 	bl	80056bc <lwip_htons>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800bfba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7f9 fb7d 	bl	80056bc <lwip_htons>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800bfd0:	68f8      	ldr	r0, [r7, #12]
 800bfd2:	f7f9 fb88 	bl	80056e6 <lwip_htonl>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800bfdc:	897b      	ldrh	r3, [r7, #10]
 800bfde:	089b      	lsrs	r3, r3, #2
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	3305      	adds	r3, #5
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	031b      	lsls	r3, r3, #12
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	4313      	orrs	r3, r2
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7f9 fb61 	bl	80056bc <lwip_htons>
 800bffa:	4603      	mov	r3, r0
 800bffc:	461a      	mov	r2, r3
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c002:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c004:	4618      	mov	r0, r3
 800c006:	f7f9 fb59 	bl	80056bc <lwip_htons>
 800c00a:	4603      	mov	r3, r0
 800c00c:	461a      	mov	r2, r3
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	2200      	movs	r2, #0
 800c016:	741a      	strb	r2, [r3, #16]
 800c018:	2200      	movs	r2, #0
 800c01a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2200      	movs	r2, #0
 800c020:	749a      	strb	r2, [r3, #18]
 800c022:	2200      	movs	r2, #0
 800c024:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c026:	697b      	ldr	r3, [r7, #20]
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3718      	adds	r7, #24
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	080117d0 	.word	0x080117d0
 800c034:	08011ea8 	.word	0x08011ea8
 800c038:	08011824 	.word	0x08011824

0800c03c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c03c:	b5b0      	push	{r4, r5, r7, lr}
 800c03e:	b08a      	sub	sp, #40	; 0x28
 800c040:	af04      	add	r7, sp, #16
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	607b      	str	r3, [r7, #4]
 800c046:	460b      	mov	r3, r1
 800c048:	817b      	strh	r3, [r7, #10]
 800c04a:	4613      	mov	r3, r2
 800c04c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d106      	bne.n	800c062 <tcp_output_alloc_header+0x26>
 800c054:	4b15      	ldr	r3, [pc, #84]	; (800c0ac <tcp_output_alloc_header+0x70>)
 800c056:	f240 7242 	movw	r2, #1858	; 0x742
 800c05a:	4915      	ldr	r1, [pc, #84]	; (800c0b0 <tcp_output_alloc_header+0x74>)
 800c05c:	4815      	ldr	r0, [pc, #84]	; (800c0b4 <tcp_output_alloc_header+0x78>)
 800c05e:	f003 f93f 	bl	800f2e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	8adb      	ldrh	r3, [r3, #22]
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	8b12      	ldrh	r2, [r2, #24]
 800c06e:	68f9      	ldr	r1, [r7, #12]
 800c070:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c072:	893d      	ldrh	r5, [r7, #8]
 800c074:	897c      	ldrh	r4, [r7, #10]
 800c076:	9103      	str	r1, [sp, #12]
 800c078:	2110      	movs	r1, #16
 800c07a:	9102      	str	r1, [sp, #8]
 800c07c:	9201      	str	r2, [sp, #4]
 800c07e:	9300      	str	r3, [sp, #0]
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	462a      	mov	r2, r5
 800c084:	4621      	mov	r1, r4
 800c086:	f7ff ff67 	bl	800bf58 <tcp_output_alloc_header_common>
 800c08a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d006      	beq.n	800c0a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c09a:	441a      	add	r2, r3
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c0a0:	697b      	ldr	r3, [r7, #20]
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bdb0      	pop	{r4, r5, r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	080117d0 	.word	0x080117d0
 800c0b0:	08011ed8 	.word	0x08011ed8
 800c0b4:	08011824 	.word	0x08011824

0800c0b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b088      	sub	sp, #32
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	60f8      	str	r0, [r7, #12]
 800c0c0:	60b9      	str	r1, [r7, #8]
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	461a      	mov	r2, r3
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	71fb      	strb	r3, [r7, #7]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d106      	bne.n	800c0e6 <tcp_output_fill_options+0x2e>
 800c0d8:	4b12      	ldr	r3, [pc, #72]	; (800c124 <tcp_output_fill_options+0x6c>)
 800c0da:	f240 7256 	movw	r2, #1878	; 0x756
 800c0de:	4912      	ldr	r1, [pc, #72]	; (800c128 <tcp_output_fill_options+0x70>)
 800c0e0:	4812      	ldr	r0, [pc, #72]	; (800c12c <tcp_output_fill_options+0x74>)
 800c0e2:	f003 f8fd 	bl	800f2e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c0ec:	69bb      	ldr	r3, [r7, #24]
 800c0ee:	3314      	adds	r3, #20
 800c0f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c0f2:	8bfb      	ldrh	r3, [r7, #30]
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	461a      	mov	r2, r3
 800c0f8:	79fb      	ldrb	r3, [r7, #7]
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	f003 0304 	and.w	r3, r3, #4
 800c100:	4413      	add	r3, r2
 800c102:	3314      	adds	r3, #20
 800c104:	69ba      	ldr	r2, [r7, #24]
 800c106:	4413      	add	r3, r2
 800c108:	697a      	ldr	r2, [r7, #20]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d006      	beq.n	800c11c <tcp_output_fill_options+0x64>
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <tcp_output_fill_options+0x6c>)
 800c110:	f240 7275 	movw	r2, #1909	; 0x775
 800c114:	4906      	ldr	r1, [pc, #24]	; (800c130 <tcp_output_fill_options+0x78>)
 800c116:	4805      	ldr	r0, [pc, #20]	; (800c12c <tcp_output_fill_options+0x74>)
 800c118:	f003 f8e2 	bl	800f2e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c11c:	bf00      	nop
 800c11e:	3720      	adds	r7, #32
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	080117d0 	.word	0x080117d0
 800c128:	08011f00 	.word	0x08011f00
 800c12c:	08011824 	.word	0x08011824
 800c130:	08011df8 	.word	0x08011df8

0800c134 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08a      	sub	sp, #40	; 0x28
 800c138:	af04      	add	r7, sp, #16
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d106      	bne.n	800c156 <tcp_output_control_segment+0x22>
 800c148:	4b1c      	ldr	r3, [pc, #112]	; (800c1bc <tcp_output_control_segment+0x88>)
 800c14a:	f240 7287 	movw	r2, #1927	; 0x787
 800c14e:	491c      	ldr	r1, [pc, #112]	; (800c1c0 <tcp_output_control_segment+0x8c>)
 800c150:	481c      	ldr	r0, [pc, #112]	; (800c1c4 <tcp_output_control_segment+0x90>)
 800c152:	f003 f8c5 	bl	800f2e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c156:	683a      	ldr	r2, [r7, #0]
 800c158:	6879      	ldr	r1, [r7, #4]
 800c15a:	68f8      	ldr	r0, [r7, #12]
 800c15c:	f7fe ff40 	bl	800afe0 <tcp_route>
 800c160:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d102      	bne.n	800c16e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800c168:	23fc      	movs	r3, #252	; 0xfc
 800c16a:	75fb      	strb	r3, [r7, #23]
 800c16c:	e01c      	b.n	800c1a8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d006      	beq.n	800c182 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	7adb      	ldrb	r3, [r3, #11]
 800c178:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	7a9b      	ldrb	r3, [r3, #10]
 800c17e:	757b      	strb	r3, [r7, #21]
 800c180:	e003      	b.n	800c18a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800c182:	23ff      	movs	r3, #255	; 0xff
 800c184:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800c186:	2300      	movs	r3, #0
 800c188:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800c18a:	7dba      	ldrb	r2, [r7, #22]
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	9302      	str	r3, [sp, #8]
 800c190:	2306      	movs	r3, #6
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	7d7b      	ldrb	r3, [r7, #21]
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	4613      	mov	r3, r2
 800c19a:	683a      	ldr	r2, [r7, #0]
 800c19c:	6879      	ldr	r1, [r7, #4]
 800c19e:	68b8      	ldr	r0, [r7, #8]
 800c1a0:	f001 ff70 	bl	800e084 <ip4_output_if>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800c1a8:	68b8      	ldr	r0, [r7, #8]
 800c1aa:	f7fa fde5 	bl	8006d78 <pbuf_free>
  return err;
 800c1ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	3718      	adds	r7, #24
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	080117d0 	.word	0x080117d0
 800c1c0:	08011f28 	.word	0x08011f28
 800c1c4:	08011824 	.word	0x08011824

0800c1c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c1c8:	b590      	push	{r4, r7, lr}
 800c1ca:	b08b      	sub	sp, #44	; 0x2c
 800c1cc:	af04      	add	r7, sp, #16
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
 800c1d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d106      	bne.n	800c1ea <tcp_rst+0x22>
 800c1dc:	4b1f      	ldr	r3, [pc, #124]	; (800c25c <tcp_rst+0x94>)
 800c1de:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c1e2:	491f      	ldr	r1, [pc, #124]	; (800c260 <tcp_rst+0x98>)
 800c1e4:	481f      	ldr	r0, [pc, #124]	; (800c264 <tcp_rst+0x9c>)
 800c1e6:	f003 f87b 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d106      	bne.n	800c1fe <tcp_rst+0x36>
 800c1f0:	4b1a      	ldr	r3, [pc, #104]	; (800c25c <tcp_rst+0x94>)
 800c1f2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c1f6:	491c      	ldr	r1, [pc, #112]	; (800c268 <tcp_rst+0xa0>)
 800c1f8:	481a      	ldr	r0, [pc, #104]	; (800c264 <tcp_rst+0x9c>)
 800c1fa:	f003 f871 	bl	800f2e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c1fe:	2300      	movs	r3, #0
 800c200:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800c202:	f246 0308 	movw	r3, #24584	; 0x6008
 800c206:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c208:	7dfb      	ldrb	r3, [r7, #23]
 800c20a:	b29c      	uxth	r4, r3
 800c20c:	68b8      	ldr	r0, [r7, #8]
 800c20e:	f7f9 fa6a 	bl	80056e6 <lwip_htonl>
 800c212:	4602      	mov	r2, r0
 800c214:	8abb      	ldrh	r3, [r7, #20]
 800c216:	9303      	str	r3, [sp, #12]
 800c218:	2314      	movs	r3, #20
 800c21a:	9302      	str	r3, [sp, #8]
 800c21c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c21e:	9301      	str	r3, [sp, #4]
 800c220:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	4613      	mov	r3, r2
 800c226:	2200      	movs	r2, #0
 800c228:	4621      	mov	r1, r4
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f7ff fe94 	bl	800bf58 <tcp_output_alloc_header_common>
 800c230:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d00c      	beq.n	800c252 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c238:	7dfb      	ldrb	r3, [r7, #23]
 800c23a:	2200      	movs	r2, #0
 800c23c:	6939      	ldr	r1, [r7, #16]
 800c23e:	68f8      	ldr	r0, [r7, #12]
 800c240:	f7ff ff3a 	bl	800c0b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	6939      	ldr	r1, [r7, #16]
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f7ff ff72 	bl	800c134 <tcp_output_control_segment>
 800c250:	e000      	b.n	800c254 <tcp_rst+0x8c>
    return;
 800c252:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c254:	371c      	adds	r7, #28
 800c256:	46bd      	mov	sp, r7
 800c258:	bd90      	pop	{r4, r7, pc}
 800c25a:	bf00      	nop
 800c25c:	080117d0 	.word	0x080117d0
 800c260:	08011f54 	.word	0x08011f54
 800c264:	08011824 	.word	0x08011824
 800c268:	08011f70 	.word	0x08011f70

0800c26c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c26c:	b590      	push	{r4, r7, lr}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800c274:	2300      	movs	r3, #0
 800c276:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800c278:	2300      	movs	r3, #0
 800c27a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d106      	bne.n	800c290 <tcp_send_empty_ack+0x24>
 800c282:	4b28      	ldr	r3, [pc, #160]	; (800c324 <tcp_send_empty_ack+0xb8>)
 800c284:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c288:	4927      	ldr	r1, [pc, #156]	; (800c328 <tcp_send_empty_ack+0xbc>)
 800c28a:	4828      	ldr	r0, [pc, #160]	; (800c32c <tcp_send_empty_ack+0xc0>)
 800c28c:	f003 f828 	bl	800f2e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800c290:	7dfb      	ldrb	r3, [r7, #23]
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	b2db      	uxtb	r3, r3
 800c296:	f003 0304 	and.w	r3, r3, #4
 800c29a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c29c:	7d7b      	ldrb	r3, [r7, #21]
 800c29e:	b29c      	uxth	r4, r3
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7f9 fa1e 	bl	80056e6 <lwip_htonl>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f7ff fec3 	bl	800c03c <tcp_output_alloc_header>
 800c2b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d109      	bne.n	800c2d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	8b5b      	ldrh	r3, [r3, #26]
 800c2c2:	f043 0303 	orr.w	r3, r3, #3
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800c2cc:	f06f 0301 	mvn.w	r3, #1
 800c2d0:	e023      	b.n	800c31a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c2d2:	7dbb      	ldrb	r3, [r7, #22]
 800c2d4:	7dfa      	ldrb	r2, [r7, #23]
 800c2d6:	6939      	ldr	r1, [r7, #16]
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff feed 	bl	800c0b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	6939      	ldr	r1, [r7, #16]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7ff ff24 	bl	800c134 <tcp_output_control_segment>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800c2f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d007      	beq.n	800c308 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	8b5b      	ldrh	r3, [r3, #26]
 800c2fc:	f043 0303 	orr.w	r3, r3, #3
 800c300:	b29a      	uxth	r2, r3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	835a      	strh	r2, [r3, #26]
 800c306:	e006      	b.n	800c316 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	8b5b      	ldrh	r3, [r3, #26]
 800c30c:	f023 0303 	bic.w	r3, r3, #3
 800c310:	b29a      	uxth	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800c316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd90      	pop	{r4, r7, pc}
 800c322:	bf00      	nop
 800c324:	080117d0 	.word	0x080117d0
 800c328:	08011f8c 	.word	0x08011f8c
 800c32c:	08011824 	.word	0x08011824

0800c330 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b087      	sub	sp, #28
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c338:	2300      	movs	r3, #0
 800c33a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d106      	bne.n	800c350 <tcp_keepalive+0x20>
 800c342:	4b18      	ldr	r3, [pc, #96]	; (800c3a4 <tcp_keepalive+0x74>)
 800c344:	f640 0224 	movw	r2, #2084	; 0x824
 800c348:	4917      	ldr	r1, [pc, #92]	; (800c3a8 <tcp_keepalive+0x78>)
 800c34a:	4818      	ldr	r0, [pc, #96]	; (800c3ac <tcp_keepalive+0x7c>)
 800c34c:	f002 ffc8 	bl	800f2e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c350:	7dfb      	ldrb	r3, [r7, #23]
 800c352:	b29c      	uxth	r4, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c358:	3b01      	subs	r3, #1
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7f9 f9c3 	bl	80056e6 <lwip_htonl>
 800c360:	4603      	mov	r3, r0
 800c362:	2200      	movs	r2, #0
 800c364:	4621      	mov	r1, r4
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff fe68 	bl	800c03c <tcp_output_alloc_header>
 800c36c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d102      	bne.n	800c37a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800c374:	f04f 33ff 	mov.w	r3, #4294967295
 800c378:	e010      	b.n	800c39c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c37a:	7dfb      	ldrb	r3, [r7, #23]
 800c37c:	2200      	movs	r2, #0
 800c37e:	6939      	ldr	r1, [r7, #16]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff fe99 	bl	800c0b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c386:	687a      	ldr	r2, [r7, #4]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	3304      	adds	r3, #4
 800c38c:	6939      	ldr	r1, [r7, #16]
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	f7ff fed0 	bl	800c134 <tcp_output_control_segment>
 800c394:	4603      	mov	r3, r0
 800c396:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c398:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd90      	pop	{r4, r7, pc}
 800c3a4:	080117d0 	.word	0x080117d0
 800c3a8:	08011fac 	.word	0x08011fac
 800c3ac:	08011824 	.word	0x08011824

0800c3b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c3b0:	b590      	push	{r4, r7, lr}
 800c3b2:	b08b      	sub	sp, #44	; 0x2c
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d106      	bne.n	800c3d2 <tcp_zero_window_probe+0x22>
 800c3c4:	4b4c      	ldr	r3, [pc, #304]	; (800c4f8 <tcp_zero_window_probe+0x148>)
 800c3c6:	f640 024f 	movw	r2, #2127	; 0x84f
 800c3ca:	494c      	ldr	r1, [pc, #304]	; (800c4fc <tcp_zero_window_probe+0x14c>)
 800c3cc:	484c      	ldr	r0, [pc, #304]	; (800c500 <tcp_zero_window_probe+0x150>)
 800c3ce:	f002 ff87 	bl	800f2e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3d6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e086      	b.n	800c4f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c3e8:	2bff      	cmp	r3, #255	; 0xff
 800c3ea:	d007      	beq.n	800c3fc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c3fc:	6a3b      	ldr	r3, [r7, #32]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	899b      	ldrh	r3, [r3, #12]
 800c402:	b29b      	uxth	r3, r3
 800c404:	4618      	mov	r0, r3
 800c406:	f7f9 f959 	bl	80056bc <lwip_htons>
 800c40a:	4603      	mov	r3, r0
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	f003 0301 	and.w	r3, r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	d005      	beq.n	800c422 <tcp_zero_window_probe+0x72>
 800c416:	6a3b      	ldr	r3, [r7, #32]
 800c418:	891b      	ldrh	r3, [r3, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <tcp_zero_window_probe+0x72>
 800c41e:	2301      	movs	r3, #1
 800c420:	e000      	b.n	800c424 <tcp_zero_window_probe+0x74>
 800c422:	2300      	movs	r3, #0
 800c424:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800c426:	7ffb      	ldrb	r3, [r7, #31]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	bf0c      	ite	eq
 800c42c:	2301      	moveq	r3, #1
 800c42e:	2300      	movne	r3, #0
 800c430:	b2db      	uxtb	r3, r3
 800c432:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c438:	b299      	uxth	r1, r3
 800c43a:	6a3b      	ldr	r3, [r7, #32]
 800c43c:	68db      	ldr	r3, [r3, #12]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	8bba      	ldrh	r2, [r7, #28]
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f7ff fdfa 	bl	800c03c <tcp_output_alloc_header>
 800c448:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d102      	bne.n	800c456 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800c450:	f04f 33ff 	mov.w	r3, #4294967295
 800c454:	e04c      	b.n	800c4f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800c45c:	7ffb      	ldrb	r3, [r7, #31]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d011      	beq.n	800c486 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	899b      	ldrh	r3, [r3, #12]
 800c466:	b29b      	uxth	r3, r3
 800c468:	b21b      	sxth	r3, r3
 800c46a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c46e:	b21c      	sxth	r4, r3
 800c470:	2011      	movs	r0, #17
 800c472:	f7f9 f923 	bl	80056bc <lwip_htons>
 800c476:	4603      	mov	r3, r0
 800c478:	b21b      	sxth	r3, r3
 800c47a:	4323      	orrs	r3, r4
 800c47c:	b21b      	sxth	r3, r3
 800c47e:	b29a      	uxth	r2, r3
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	819a      	strh	r2, [r3, #12]
 800c484:	e010      	b.n	800c4a8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800c486:	69bb      	ldr	r3, [r7, #24]
 800c488:	685b      	ldr	r3, [r3, #4]
 800c48a:	3314      	adds	r3, #20
 800c48c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c48e:	6a3b      	ldr	r3, [r7, #32]
 800c490:	6858      	ldr	r0, [r3, #4]
 800c492:	6a3b      	ldr	r3, [r7, #32]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	891a      	ldrh	r2, [r3, #8]
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	891b      	ldrh	r3, [r3, #8]
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	b29b      	uxth	r3, r3
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	6939      	ldr	r1, [r7, #16]
 800c4a4:	f7fa fe52 	bl	800714c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7f9 f919 	bl	80056e6 <lwip_htonl>
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	3301      	adds	r3, #1
 800c4b8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	da02      	bge.n	800c4cc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c4cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	69b9      	ldr	r1, [r7, #24]
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7ff fdef 	bl	800c0b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	3304      	adds	r3, #4
 800c4e0:	69b9      	ldr	r1, [r7, #24]
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f7ff fe26 	bl	800c134 <tcp_output_control_segment>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800c4ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c4f0:	4618      	mov	r0, r3
 800c4f2:	372c      	adds	r7, #44	; 0x2c
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	bd90      	pop	{r4, r7, pc}
 800c4f8:	080117d0 	.word	0x080117d0
 800c4fc:	08011fc8 	.word	0x08011fc8
 800c500:	08011824 	.word	0x08011824

0800c504 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b082      	sub	sp, #8
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800c50c:	f7fa ff0c 	bl	8007328 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c510:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <tcpip_tcp_timer+0x38>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d103      	bne.n	800c520 <tcpip_tcp_timer+0x1c>
 800c518:	4b09      	ldr	r3, [pc, #36]	; (800c540 <tcpip_tcp_timer+0x3c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d005      	beq.n	800c52c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c520:	2200      	movs	r2, #0
 800c522:	4908      	ldr	r1, [pc, #32]	; (800c544 <tcpip_tcp_timer+0x40>)
 800c524:	20fa      	movs	r0, #250	; 0xfa
 800c526:	f000 f8f3 	bl	800c710 <sys_timeout>
 800c52a:	e003      	b.n	800c534 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800c52c:	4b06      	ldr	r3, [pc, #24]	; (800c548 <tcpip_tcp_timer+0x44>)
 800c52e:	2200      	movs	r2, #0
 800c530:	601a      	str	r2, [r3, #0]
  }
}
 800c532:	bf00      	nop
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	200087dc 	.word	0x200087dc
 800c540:	200087e0 	.word	0x200087e0
 800c544:	0800c505 	.word	0x0800c505
 800c548:	20008828 	.word	0x20008828

0800c54c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c550:	4b0a      	ldr	r3, [pc, #40]	; (800c57c <tcp_timer_needed+0x30>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d10f      	bne.n	800c578 <tcp_timer_needed+0x2c>
 800c558:	4b09      	ldr	r3, [pc, #36]	; (800c580 <tcp_timer_needed+0x34>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d103      	bne.n	800c568 <tcp_timer_needed+0x1c>
 800c560:	4b08      	ldr	r3, [pc, #32]	; (800c584 <tcp_timer_needed+0x38>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800c568:	4b04      	ldr	r3, [pc, #16]	; (800c57c <tcp_timer_needed+0x30>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c56e:	2200      	movs	r2, #0
 800c570:	4905      	ldr	r1, [pc, #20]	; (800c588 <tcp_timer_needed+0x3c>)
 800c572:	20fa      	movs	r0, #250	; 0xfa
 800c574:	f000 f8cc 	bl	800c710 <sys_timeout>
  }
}
 800c578:	bf00      	nop
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	20008828 	.word	0x20008828
 800c580:	200087dc 	.word	0x200087dc
 800c584:	200087e0 	.word	0x200087e0
 800c588:	0800c505 	.word	0x0800c505

0800c58c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c598:	2006      	movs	r0, #6
 800c59a:	f7f9 fd07 	bl	8005fac <memp_malloc>
 800c59e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d109      	bne.n	800c5ba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d151      	bne.n	800c650 <sys_timeout_abs+0xc4>
 800c5ac:	4b2a      	ldr	r3, [pc, #168]	; (800c658 <sys_timeout_abs+0xcc>)
 800c5ae:	22be      	movs	r2, #190	; 0xbe
 800c5b0:	492a      	ldr	r1, [pc, #168]	; (800c65c <sys_timeout_abs+0xd0>)
 800c5b2:	482b      	ldr	r0, [pc, #172]	; (800c660 <sys_timeout_abs+0xd4>)
 800c5b4:	f002 fe94 	bl	800f2e0 <iprintf>
    return;
 800c5b8:	e04a      	b.n	800c650 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800c5cc:	693b      	ldr	r3, [r7, #16]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c5d2:	4b24      	ldr	r3, [pc, #144]	; (800c664 <sys_timeout_abs+0xd8>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800c5da:	4a22      	ldr	r2, [pc, #136]	; (800c664 <sys_timeout_abs+0xd8>)
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	6013      	str	r3, [r2, #0]
    return;
 800c5e0:	e037      	b.n	800c652 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	685a      	ldr	r2, [r3, #4]
 800c5e6:	4b1f      	ldr	r3, [pc, #124]	; (800c664 <sys_timeout_abs+0xd8>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	0fdb      	lsrs	r3, r3, #31
 800c5f0:	f003 0301 	and.w	r3, r3, #1
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d007      	beq.n	800c60a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800c5fa:	4b1a      	ldr	r3, [pc, #104]	; (800c664 <sys_timeout_abs+0xd8>)
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800c602:	4a18      	ldr	r2, [pc, #96]	; (800c664 <sys_timeout_abs+0xd8>)
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	6013      	str	r3, [r2, #0]
 800c608:	e023      	b.n	800c652 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800c60a:	4b16      	ldr	r3, [pc, #88]	; (800c664 <sys_timeout_abs+0xd8>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	617b      	str	r3, [r7, #20]
 800c610:	e01a      	b.n	800c648 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00b      	beq.n	800c632 <sys_timeout_abs+0xa6>
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	0fdb      	lsrs	r3, r3, #31
 800c628:	f003 0301 	and.w	r3, r3, #1
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d007      	beq.n	800c642 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	681a      	ldr	r2, [r3, #0]
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	693a      	ldr	r2, [r7, #16]
 800c63e:	601a      	str	r2, [r3, #0]
        break;
 800c640:	e007      	b.n	800c652 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	617b      	str	r3, [r7, #20]
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1e1      	bne.n	800c612 <sys_timeout_abs+0x86>
 800c64e:	e000      	b.n	800c652 <sys_timeout_abs+0xc6>
    return;
 800c650:	bf00      	nop
      }
    }
  }
}
 800c652:	3718      	adds	r7, #24
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	08011fec 	.word	0x08011fec
 800c65c:	08012020 	.word	0x08012020
 800c660:	08012060 	.word	0x08012060
 800c664:	20008820 	.word	0x20008820

0800c668 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	4798      	blx	r3

  now = sys_now();
 800c67a:	f7f8 fe13 	bl	80052a4 <sys_now>
 800c67e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	681a      	ldr	r2, [r3, #0]
 800c684:	4b0f      	ldr	r3, [pc, #60]	; (800c6c4 <lwip_cyclic_timer+0x5c>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4413      	add	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	1ad3      	subs	r3, r2, r3
 800c692:	0fdb      	lsrs	r3, r3, #31
 800c694:	f003 0301 	and.w	r3, r3, #1
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d009      	beq.n	800c6b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	4907      	ldr	r1, [pc, #28]	; (800c6c8 <lwip_cyclic_timer+0x60>)
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff ff6e 	bl	800c58c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800c6b0:	e004      	b.n	800c6bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c6b2:	687a      	ldr	r2, [r7, #4]
 800c6b4:	4904      	ldr	r1, [pc, #16]	; (800c6c8 <lwip_cyclic_timer+0x60>)
 800c6b6:	68f8      	ldr	r0, [r7, #12]
 800c6b8:	f7ff ff68 	bl	800c58c <sys_timeout_abs>
}
 800c6bc:	bf00      	nop
 800c6be:	3718      	adds	r7, #24
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	20008824 	.word	0x20008824
 800c6c8:	0800c669 	.word	0x0800c669

0800c6cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	607b      	str	r3, [r7, #4]
 800c6d6:	e00e      	b.n	800c6f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c6d8:	4a0b      	ldr	r2, [pc, #44]	; (800c708 <sys_timeouts_init+0x3c>)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	00db      	lsls	r3, r3, #3
 800c6e4:	4a08      	ldr	r2, [pc, #32]	; (800c708 <sys_timeouts_init+0x3c>)
 800c6e6:	4413      	add	r3, r2
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	4908      	ldr	r1, [pc, #32]	; (800c70c <sys_timeouts_init+0x40>)
 800c6ec:	f000 f810 	bl	800c710 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	607b      	str	r3, [r7, #4]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d9ed      	bls.n	800c6d8 <sys_timeouts_init+0xc>
  }
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	08012bd8 	.word	0x08012bd8
 800c70c:	0800c669 	.word	0x0800c669

0800c710 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c722:	d306      	bcc.n	800c732 <sys_timeout+0x22>
 800c724:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <sys_timeout+0x40>)
 800c726:	f240 1229 	movw	r2, #297	; 0x129
 800c72a:	490a      	ldr	r1, [pc, #40]	; (800c754 <sys_timeout+0x44>)
 800c72c:	480a      	ldr	r0, [pc, #40]	; (800c758 <sys_timeout+0x48>)
 800c72e:	f002 fdd7 	bl	800f2e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c732:	f7f8 fdb7 	bl	80052a4 <sys_now>
 800c736:	4602      	mov	r2, r0
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	4413      	add	r3, r2
 800c73c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	68b9      	ldr	r1, [r7, #8]
 800c742:	6978      	ldr	r0, [r7, #20]
 800c744:	f7ff ff22 	bl	800c58c <sys_timeout_abs>
#endif
}
 800c748:	bf00      	nop
 800c74a:	3718      	adds	r7, #24
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}
 800c750:	08011fec 	.word	0x08011fec
 800c754:	08012088 	.word	0x08012088
 800c758:	08012060 	.word	0x08012060

0800c75c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c762:	f7f8 fd9f 	bl	80052a4 <sys_now>
 800c766:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800c768:	4b1a      	ldr	r3, [pc, #104]	; (800c7d4 <sys_check_timeouts+0x78>)
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d001      	beq.n	800c776 <sys_check_timeouts+0x1a>
 800c772:	f7f9 ffc7 	bl	8006704 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800c776:	4b18      	ldr	r3, [pc, #96]	; (800c7d8 <sys_check_timeouts+0x7c>)
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d022      	beq.n	800c7c8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	0fdb      	lsrs	r3, r3, #31
 800c78c:	f003 0301 	and.w	r3, r3, #1
 800c790:	b2db      	uxtb	r3, r3
 800c792:	2b00      	cmp	r3, #0
 800c794:	d11a      	bne.n	800c7cc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800c796:	68bb      	ldr	r3, [r7, #8]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	4a0f      	ldr	r2, [pc, #60]	; (800c7d8 <sys_check_timeouts+0x7c>)
 800c79c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	4a0b      	ldr	r2, [pc, #44]	; (800c7dc <sys_check_timeouts+0x80>)
 800c7b0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c7b2:	68b9      	ldr	r1, [r7, #8]
 800c7b4:	2006      	movs	r0, #6
 800c7b6:	f7f9 fc69 	bl	800608c <memp_free>
    if (handler != NULL) {
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d0d3      	beq.n	800c768 <sys_check_timeouts+0xc>
      handler(arg);
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6838      	ldr	r0, [r7, #0]
 800c7c4:	4798      	blx	r3
  do {
 800c7c6:	e7cf      	b.n	800c768 <sys_check_timeouts+0xc>
      return;
 800c7c8:	bf00      	nop
 800c7ca:	e000      	b.n	800c7ce <sys_check_timeouts+0x72>
      return;
 800c7cc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c7ce:	3710      	adds	r7, #16
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}
 800c7d4:	200087cd 	.word	0x200087cd
 800c7d8:	20008820 	.word	0x20008820
 800c7dc:	20008824 	.word	0x20008824

0800c7e0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c7e4:	f002 fc7c 	bl	800f0e0 <rand>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	4b01      	ldr	r3, [pc, #4]	; (800c800 <udp_init+0x20>)
 800c7fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c7fc:	bf00      	nop
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20000028 	.word	0x20000028

0800c804 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b084      	sub	sp, #16
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4613      	mov	r3, r2
 800c810:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d105      	bne.n	800c824 <udp_input_local_match+0x20>
 800c818:	4b27      	ldr	r3, [pc, #156]	; (800c8b8 <udp_input_local_match+0xb4>)
 800c81a:	2287      	movs	r2, #135	; 0x87
 800c81c:	4927      	ldr	r1, [pc, #156]	; (800c8bc <udp_input_local_match+0xb8>)
 800c81e:	4828      	ldr	r0, [pc, #160]	; (800c8c0 <udp_input_local_match+0xbc>)
 800c820:	f002 fd5e 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <udp_input_local_match+0x32>
 800c82a:	4b23      	ldr	r3, [pc, #140]	; (800c8b8 <udp_input_local_match+0xb4>)
 800c82c:	2288      	movs	r2, #136	; 0x88
 800c82e:	4925      	ldr	r1, [pc, #148]	; (800c8c4 <udp_input_local_match+0xc0>)
 800c830:	4823      	ldr	r0, [pc, #140]	; (800c8c0 <udp_input_local_match+0xbc>)
 800c832:	f002 fd55 	bl	800f2e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	7a1b      	ldrb	r3, [r3, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d00b      	beq.n	800c856 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	7a1a      	ldrb	r2, [r3, #8]
 800c842:	4b21      	ldr	r3, [pc, #132]	; (800c8c8 <udp_input_local_match+0xc4>)
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c84a:	3301      	adds	r3, #1
 800c84c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c84e:	429a      	cmp	r2, r3
 800c850:	d001      	beq.n	800c856 <udp_input_local_match+0x52>
    return 0;
 800c852:	2300      	movs	r3, #0
 800c854:	e02b      	b.n	800c8ae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d018      	beq.n	800c88e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d013      	beq.n	800c88a <udp_input_local_match+0x86>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d00f      	beq.n	800c88a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c86a:	4b17      	ldr	r3, [pc, #92]	; (800c8c8 <udp_input_local_match+0xc4>)
 800c86c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c872:	d00a      	beq.n	800c88a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	4b13      	ldr	r3, [pc, #76]	; (800c8c8 <udp_input_local_match+0xc4>)
 800c87a:	695b      	ldr	r3, [r3, #20]
 800c87c:	405a      	eors	r2, r3
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	3308      	adds	r3, #8
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c886:	2b00      	cmp	r3, #0
 800c888:	d110      	bne.n	800c8ac <udp_input_local_match+0xa8>
          return 1;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e00f      	b.n	800c8ae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d009      	beq.n	800c8a8 <udp_input_local_match+0xa4>
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d005      	beq.n	800c8a8 <udp_input_local_match+0xa4>
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681a      	ldr	r2, [r3, #0]
 800c8a0:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <udp_input_local_match+0xc4>)
 800c8a2:	695b      	ldr	r3, [r3, #20]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d101      	bne.n	800c8ac <udp_input_local_match+0xa8>
        return 1;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	e000      	b.n	800c8ae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800c8ac:	2300      	movs	r3, #0
}
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	3710      	adds	r7, #16
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	080120d4 	.word	0x080120d4
 800c8bc:	08012104 	.word	0x08012104
 800c8c0:	08012128 	.word	0x08012128
 800c8c4:	08012150 	.word	0x08012150
 800c8c8:	20005260 	.word	0x20005260

0800c8cc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c8cc:	b590      	push	{r4, r7, lr}
 800c8ce:	b08d      	sub	sp, #52	; 0x34
 800c8d0:	af02      	add	r7, sp, #8
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d105      	bne.n	800c8ec <udp_input+0x20>
 800c8e0:	4b7c      	ldr	r3, [pc, #496]	; (800cad4 <udp_input+0x208>)
 800c8e2:	22cf      	movs	r2, #207	; 0xcf
 800c8e4:	497c      	ldr	r1, [pc, #496]	; (800cad8 <udp_input+0x20c>)
 800c8e6:	487d      	ldr	r0, [pc, #500]	; (800cadc <udp_input+0x210>)
 800c8e8:	f002 fcfa 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d105      	bne.n	800c8fe <udp_input+0x32>
 800c8f2:	4b78      	ldr	r3, [pc, #480]	; (800cad4 <udp_input+0x208>)
 800c8f4:	22d0      	movs	r2, #208	; 0xd0
 800c8f6:	497a      	ldr	r1, [pc, #488]	; (800cae0 <udp_input+0x214>)
 800c8f8:	4878      	ldr	r0, [pc, #480]	; (800cadc <udp_input+0x210>)
 800c8fa:	f002 fcf1 	bl	800f2e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	895b      	ldrh	r3, [r3, #10]
 800c902:	2b07      	cmp	r3, #7
 800c904:	d803      	bhi.n	800c90e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f7fa fa36 	bl	8006d78 <pbuf_free>
    goto end;
 800c90c:	e0de      	b.n	800cacc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c914:	4b73      	ldr	r3, [pc, #460]	; (800cae4 <udp_input+0x218>)
 800c916:	695b      	ldr	r3, [r3, #20]
 800c918:	4a72      	ldr	r2, [pc, #456]	; (800cae4 <udp_input+0x218>)
 800c91a:	6812      	ldr	r2, [r2, #0]
 800c91c:	4611      	mov	r1, r2
 800c91e:	4618      	mov	r0, r3
 800c920:	f001 fc88 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800c924:	4603      	mov	r3, r0
 800c926:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	4618      	mov	r0, r3
 800c930:	f7f8 fec4 	bl	80056bc <lwip_htons>
 800c934:	4603      	mov	r3, r0
 800c936:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	885b      	ldrh	r3, [r3, #2]
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f8 febc 	bl	80056bc <lwip_htons>
 800c944:	4603      	mov	r3, r0
 800c946:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800c948:	2300      	movs	r3, #0
 800c94a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800c94c:	2300      	movs	r3, #0
 800c94e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800c950:	2300      	movs	r3, #0
 800c952:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c954:	4b64      	ldr	r3, [pc, #400]	; (800cae8 <udp_input+0x21c>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	627b      	str	r3, [r7, #36]	; 0x24
 800c95a:	e054      	b.n	800ca06 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	8a5b      	ldrh	r3, [r3, #18]
 800c960:	89fa      	ldrh	r2, [r7, #14]
 800c962:	429a      	cmp	r2, r3
 800c964:	d14a      	bne.n	800c9fc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c966:	7cfb      	ldrb	r3, [r7, #19]
 800c968:	461a      	mov	r2, r3
 800c96a:	6839      	ldr	r1, [r7, #0]
 800c96c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c96e:	f7ff ff49 	bl	800c804 <udp_input_local_match>
 800c972:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c974:	2b00      	cmp	r3, #0
 800c976:	d041      	beq.n	800c9fc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97a:	7c1b      	ldrb	r3, [r3, #16]
 800c97c:	f003 0304 	and.w	r3, r3, #4
 800c980:	2b00      	cmp	r3, #0
 800c982:	d11d      	bne.n	800c9c0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d102      	bne.n	800c990 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98c:	61fb      	str	r3, [r7, #28]
 800c98e:	e017      	b.n	800c9c0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c990:	7cfb      	ldrb	r3, [r7, #19]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d014      	beq.n	800c9c0 <udp_input+0xf4>
 800c996:	4b53      	ldr	r3, [pc, #332]	; (800cae4 <udp_input+0x218>)
 800c998:	695b      	ldr	r3, [r3, #20]
 800c99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c99e:	d10f      	bne.n	800c9c0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c9a0:	69fb      	ldr	r3, [r7, #28]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	683b      	ldr	r3, [r7, #0]
 800c9a6:	3304      	adds	r3, #4
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d008      	beq.n	800c9c0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	3304      	adds	r3, #4
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d101      	bne.n	800c9c0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9be:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c2:	8a9b      	ldrh	r3, [r3, #20]
 800c9c4:	8a3a      	ldrh	r2, [r7, #16]
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d118      	bne.n	800c9fc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9cc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d005      	beq.n	800c9de <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	4b43      	ldr	r3, [pc, #268]	; (800cae4 <udp_input+0x218>)
 800c9d8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d10e      	bne.n	800c9fc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d014      	beq.n	800ca0e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e6:	68da      	ldr	r2, [r3, #12]
 800c9e8:	6a3b      	ldr	r3, [r7, #32]
 800c9ea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c9ec:	4b3e      	ldr	r3, [pc, #248]	; (800cae8 <udp_input+0x21c>)
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c9f4:	4a3c      	ldr	r2, [pc, #240]	; (800cae8 <udp_input+0x21c>)
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9f8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c9fa:	e008      	b.n	800ca0e <udp_input+0x142>
      }
    }

    prev = pcb;
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9fe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca02:	68db      	ldr	r3, [r3, #12]
 800ca04:	627b      	str	r3, [r7, #36]	; 0x24
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d1a7      	bne.n	800c95c <udp_input+0x90>
 800ca0c:	e000      	b.n	800ca10 <udp_input+0x144>
        break;
 800ca0e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ca10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d101      	bne.n	800ca1a <udp_input+0x14e>
    pcb = uncon_pcb;
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <udp_input+0x15a>
    for_us = 1;
 800ca20:	2301      	movs	r3, #1
 800ca22:	76fb      	strb	r3, [r7, #27]
 800ca24:	e00a      	b.n	800ca3c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	4b2d      	ldr	r3, [pc, #180]	; (800cae4 <udp_input+0x218>)
 800ca2e:	695b      	ldr	r3, [r3, #20]
 800ca30:	429a      	cmp	r2, r3
 800ca32:	bf0c      	ite	eq
 800ca34:	2301      	moveq	r3, #1
 800ca36:	2300      	movne	r3, #0
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ca3c:	7efb      	ldrb	r3, [r7, #27]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d041      	beq.n	800cac6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800ca42:	2108      	movs	r1, #8
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f7fa f911 	bl	8006c6c <pbuf_remove_header>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00a      	beq.n	800ca66 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800ca50:	4b20      	ldr	r3, [pc, #128]	; (800cad4 <udp_input+0x208>)
 800ca52:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800ca56:	4925      	ldr	r1, [pc, #148]	; (800caec <udp_input+0x220>)
 800ca58:	4820      	ldr	r0, [pc, #128]	; (800cadc <udp_input+0x210>)
 800ca5a:	f002 fc41 	bl	800f2e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f7fa f98a 	bl	8006d78 <pbuf_free>
      goto end;
 800ca64:	e032      	b.n	800cacc <udp_input+0x200>
    }

    if (pcb != NULL) {
 800ca66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d012      	beq.n	800ca92 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800ca6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d00a      	beq.n	800ca8a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ca74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca76:	699c      	ldr	r4, [r3, #24]
 800ca78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7a:	69d8      	ldr	r0, [r3, #28]
 800ca7c:	8a3b      	ldrh	r3, [r7, #16]
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	4b1b      	ldr	r3, [pc, #108]	; (800caf0 <udp_input+0x224>)
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca86:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800ca88:	e021      	b.n	800cace <udp_input+0x202>
        pbuf_free(p);
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f7fa f974 	bl	8006d78 <pbuf_free>
        goto end;
 800ca90:	e01c      	b.n	800cacc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800ca92:	7cfb      	ldrb	r3, [r7, #19]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d112      	bne.n	800cabe <udp_input+0x1f2>
 800ca98:	4b12      	ldr	r3, [pc, #72]	; (800cae4 <udp_input+0x218>)
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caa0:	2be0      	cmp	r3, #224	; 0xe0
 800caa2:	d00c      	beq.n	800cabe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800caa4:	4b0f      	ldr	r3, [pc, #60]	; (800cae4 <udp_input+0x218>)
 800caa6:	899b      	ldrh	r3, [r3, #12]
 800caa8:	3308      	adds	r3, #8
 800caaa:	b29b      	uxth	r3, r3
 800caac:	b21b      	sxth	r3, r3
 800caae:	4619      	mov	r1, r3
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7fa f94e 	bl	8006d52 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cab6:	2103      	movs	r1, #3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 f89b 	bl	800dbf4 <icmp_dest_unreach>
      pbuf_free(p);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f7fa f95a 	bl	8006d78 <pbuf_free>
  return;
 800cac4:	e003      	b.n	800cace <udp_input+0x202>
    pbuf_free(p);
 800cac6:	6878      	ldr	r0, [r7, #4]
 800cac8:	f7fa f956 	bl	8006d78 <pbuf_free>
  return;
 800cacc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800cace:	372c      	adds	r7, #44	; 0x2c
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd90      	pop	{r4, r7, pc}
 800cad4:	080120d4 	.word	0x080120d4
 800cad8:	08012178 	.word	0x08012178
 800cadc:	08012128 	.word	0x08012128
 800cae0:	08012190 	.word	0x08012190
 800cae4:	20005260 	.word	0x20005260
 800cae8:	2000882c 	.word	0x2000882c
 800caec:	080121ac 	.word	0x080121ac
 800caf0:	20005270 	.word	0x20005270

0800caf4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d01e      	beq.n	800cb42 <udp_netif_ip_addr_changed+0x4e>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d01a      	beq.n	800cb42 <udp_netif_ip_addr_changed+0x4e>
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d017      	beq.n	800cb42 <udp_netif_ip_addr_changed+0x4e>
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d013      	beq.n	800cb42 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb1a:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <udp_netif_ip_addr_changed+0x5c>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	60fb      	str	r3, [r7, #12]
 800cb20:	e00c      	b.n	800cb3c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681a      	ldr	r2, [r3, #0]
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d103      	bne.n	800cb36 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	60fb      	str	r3, [r7, #12]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1ef      	bne.n	800cb22 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800cb42:	bf00      	nop
 800cb44:	3714      	adds	r7, #20
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	2000882c 	.word	0x2000882c

0800cb54 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800cb5c:	4915      	ldr	r1, [pc, #84]	; (800cbb4 <etharp_free_entry+0x60>)
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	4613      	mov	r3, r2
 800cb62:	005b      	lsls	r3, r3, #1
 800cb64:	4413      	add	r3, r2
 800cb66:	00db      	lsls	r3, r3, #3
 800cb68:	440b      	add	r3, r1
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d013      	beq.n	800cb98 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800cb70:	4910      	ldr	r1, [pc, #64]	; (800cbb4 <etharp_free_entry+0x60>)
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	4613      	mov	r3, r2
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	440b      	add	r3, r1
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7fa f8f9 	bl	8006d78 <pbuf_free>
    arp_table[i].q = NULL;
 800cb86:	490b      	ldr	r1, [pc, #44]	; (800cbb4 <etharp_free_entry+0x60>)
 800cb88:	687a      	ldr	r2, [r7, #4]
 800cb8a:	4613      	mov	r3, r2
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	4413      	add	r3, r2
 800cb90:	00db      	lsls	r3, r3, #3
 800cb92:	440b      	add	r3, r1
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800cb98:	4906      	ldr	r1, [pc, #24]	; (800cbb4 <etharp_free_entry+0x60>)
 800cb9a:	687a      	ldr	r2, [r7, #4]
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	4413      	add	r3, r2
 800cba2:	00db      	lsls	r3, r3, #3
 800cba4:	440b      	add	r3, r1
 800cba6:	3314      	adds	r3, #20
 800cba8:	2200      	movs	r2, #0
 800cbaa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800cbac:	bf00      	nop
 800cbae:	3708      	adds	r7, #8
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}
 800cbb4:	20008830 	.word	0x20008830

0800cbb8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b082      	sub	sp, #8
 800cbbc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	607b      	str	r3, [r7, #4]
 800cbc2:	e096      	b.n	800ccf2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800cbc4:	494f      	ldr	r1, [pc, #316]	; (800cd04 <etharp_tmr+0x14c>)
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	005b      	lsls	r3, r3, #1
 800cbcc:	4413      	add	r3, r2
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	440b      	add	r3, r1
 800cbd2:	3314      	adds	r3, #20
 800cbd4:	781b      	ldrb	r3, [r3, #0]
 800cbd6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800cbd8:	78fb      	ldrb	r3, [r7, #3]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	f000 8086 	beq.w	800ccec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800cbe0:	4948      	ldr	r1, [pc, #288]	; (800cd04 <etharp_tmr+0x14c>)
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	00db      	lsls	r3, r3, #3
 800cbec:	440b      	add	r3, r1
 800cbee:	3312      	adds	r3, #18
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	b298      	uxth	r0, r3
 800cbf6:	4943      	ldr	r1, [pc, #268]	; (800cd04 <etharp_tmr+0x14c>)
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	4613      	mov	r3, r2
 800cbfc:	005b      	lsls	r3, r3, #1
 800cbfe:	4413      	add	r3, r2
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	440b      	add	r3, r1
 800cc04:	3312      	adds	r3, #18
 800cc06:	4602      	mov	r2, r0
 800cc08:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc0a:	493e      	ldr	r1, [pc, #248]	; (800cd04 <etharp_tmr+0x14c>)
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	005b      	lsls	r3, r3, #1
 800cc12:	4413      	add	r3, r2
 800cc14:	00db      	lsls	r3, r3, #3
 800cc16:	440b      	add	r3, r1
 800cc18:	3312      	adds	r3, #18
 800cc1a:	881b      	ldrh	r3, [r3, #0]
 800cc1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cc20:	d215      	bcs.n	800cc4e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc22:	4938      	ldr	r1, [pc, #224]	; (800cd04 <etharp_tmr+0x14c>)
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4613      	mov	r3, r2
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	4413      	add	r3, r2
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	440b      	add	r3, r1
 800cc30:	3314      	adds	r3, #20
 800cc32:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d10e      	bne.n	800cc56 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800cc38:	4932      	ldr	r1, [pc, #200]	; (800cd04 <etharp_tmr+0x14c>)
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	4613      	mov	r3, r2
 800cc3e:	005b      	lsls	r3, r3, #1
 800cc40:	4413      	add	r3, r2
 800cc42:	00db      	lsls	r3, r3, #3
 800cc44:	440b      	add	r3, r1
 800cc46:	3312      	adds	r3, #18
 800cc48:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800cc4a:	2b04      	cmp	r3, #4
 800cc4c:	d903      	bls.n	800cc56 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff ff80 	bl	800cb54 <etharp_free_entry>
 800cc54:	e04a      	b.n	800ccec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cc56:	492b      	ldr	r1, [pc, #172]	; (800cd04 <etharp_tmr+0x14c>)
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	005b      	lsls	r3, r3, #1
 800cc5e:	4413      	add	r3, r2
 800cc60:	00db      	lsls	r3, r3, #3
 800cc62:	440b      	add	r3, r1
 800cc64:	3314      	adds	r3, #20
 800cc66:	781b      	ldrb	r3, [r3, #0]
 800cc68:	2b03      	cmp	r3, #3
 800cc6a:	d10a      	bne.n	800cc82 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cc6c:	4925      	ldr	r1, [pc, #148]	; (800cd04 <etharp_tmr+0x14c>)
 800cc6e:	687a      	ldr	r2, [r7, #4]
 800cc70:	4613      	mov	r3, r2
 800cc72:	005b      	lsls	r3, r3, #1
 800cc74:	4413      	add	r3, r2
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	440b      	add	r3, r1
 800cc7a:	3314      	adds	r3, #20
 800cc7c:	2204      	movs	r2, #4
 800cc7e:	701a      	strb	r2, [r3, #0]
 800cc80:	e034      	b.n	800ccec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cc82:	4920      	ldr	r1, [pc, #128]	; (800cd04 <etharp_tmr+0x14c>)
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	4613      	mov	r3, r2
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	4413      	add	r3, r2
 800cc8c:	00db      	lsls	r3, r3, #3
 800cc8e:	440b      	add	r3, r1
 800cc90:	3314      	adds	r3, #20
 800cc92:	781b      	ldrb	r3, [r3, #0]
 800cc94:	2b04      	cmp	r3, #4
 800cc96:	d10a      	bne.n	800ccae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cc98:	491a      	ldr	r1, [pc, #104]	; (800cd04 <etharp_tmr+0x14c>)
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	4613      	mov	r3, r2
 800cc9e:	005b      	lsls	r3, r3, #1
 800cca0:	4413      	add	r3, r2
 800cca2:	00db      	lsls	r3, r3, #3
 800cca4:	440b      	add	r3, r1
 800cca6:	3314      	adds	r3, #20
 800cca8:	2202      	movs	r2, #2
 800ccaa:	701a      	strb	r2, [r3, #0]
 800ccac:	e01e      	b.n	800ccec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ccae:	4915      	ldr	r1, [pc, #84]	; (800cd04 <etharp_tmr+0x14c>)
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	440b      	add	r3, r1
 800ccbc:	3314      	adds	r3, #20
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	2b01      	cmp	r3, #1
 800ccc2:	d113      	bne.n	800ccec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800ccc4:	490f      	ldr	r1, [pc, #60]	; (800cd04 <etharp_tmr+0x14c>)
 800ccc6:	687a      	ldr	r2, [r7, #4]
 800ccc8:	4613      	mov	r3, r2
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	4413      	add	r3, r2
 800ccce:	00db      	lsls	r3, r3, #3
 800ccd0:	440b      	add	r3, r1
 800ccd2:	3308      	adds	r3, #8
 800ccd4:	6818      	ldr	r0, [r3, #0]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	4613      	mov	r3, r2
 800ccda:	005b      	lsls	r3, r3, #1
 800ccdc:	4413      	add	r3, r2
 800ccde:	00db      	lsls	r3, r3, #3
 800cce0:	4a08      	ldr	r2, [pc, #32]	; (800cd04 <etharp_tmr+0x14c>)
 800cce2:	4413      	add	r3, r2
 800cce4:	3304      	adds	r3, #4
 800cce6:	4619      	mov	r1, r3
 800cce8:	f000 fe6e 	bl	800d9c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3301      	adds	r3, #1
 800ccf0:	607b      	str	r3, [r7, #4]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b09      	cmp	r3, #9
 800ccf6:	f77f af65 	ble.w	800cbc4 <etharp_tmr+0xc>
      }
    }
  }
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	20008830 	.word	0x20008830

0800cd08 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b08a      	sub	sp, #40	; 0x28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	60f8      	str	r0, [r7, #12]
 800cd10:	460b      	mov	r3, r1
 800cd12:	607a      	str	r2, [r7, #4]
 800cd14:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cd16:	230a      	movs	r3, #10
 800cd18:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cd1a:	230a      	movs	r3, #10
 800cd1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cd1e:	230a      	movs	r3, #10
 800cd20:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cd26:	230a      	movs	r3, #10
 800cd28:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	83bb      	strh	r3, [r7, #28]
 800cd2e:	2300      	movs	r3, #0
 800cd30:	837b      	strh	r3, [r7, #26]
 800cd32:	2300      	movs	r3, #0
 800cd34:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cd36:	2300      	movs	r3, #0
 800cd38:	843b      	strh	r3, [r7, #32]
 800cd3a:	e0ae      	b.n	800ce9a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cd3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd40:	49a6      	ldr	r1, [pc, #664]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cd42:	4613      	mov	r3, r2
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	4413      	add	r3, r2
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	440b      	add	r3, r1
 800cd4c:	3314      	adds	r3, #20
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cd52:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd56:	2b0a      	cmp	r3, #10
 800cd58:	d105      	bne.n	800cd66 <etharp_find_entry+0x5e>
 800cd5a:	7dfb      	ldrb	r3, [r7, #23]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d102      	bne.n	800cd66 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cd60:	8c3b      	ldrh	r3, [r7, #32]
 800cd62:	847b      	strh	r3, [r7, #34]	; 0x22
 800cd64:	e095      	b.n	800ce92 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cd66:	7dfb      	ldrb	r3, [r7, #23]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f000 8092 	beq.w	800ce92 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cd6e:	7dfb      	ldrb	r3, [r7, #23]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d009      	beq.n	800cd88 <etharp_find_entry+0x80>
 800cd74:	7dfb      	ldrb	r3, [r7, #23]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d806      	bhi.n	800cd88 <etharp_find_entry+0x80>
 800cd7a:	4b99      	ldr	r3, [pc, #612]	; (800cfe0 <etharp_find_entry+0x2d8>)
 800cd7c:	f240 1223 	movw	r2, #291	; 0x123
 800cd80:	4998      	ldr	r1, [pc, #608]	; (800cfe4 <etharp_find_entry+0x2dc>)
 800cd82:	4899      	ldr	r0, [pc, #612]	; (800cfe8 <etharp_find_entry+0x2e0>)
 800cd84:	f002 faac 	bl	800f2e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d020      	beq.n	800cdd0 <etharp_find_entry+0xc8>
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6819      	ldr	r1, [r3, #0]
 800cd92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd96:	4891      	ldr	r0, [pc, #580]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cd98:	4613      	mov	r3, r2
 800cd9a:	005b      	lsls	r3, r3, #1
 800cd9c:	4413      	add	r3, r2
 800cd9e:	00db      	lsls	r3, r3, #3
 800cda0:	4403      	add	r3, r0
 800cda2:	3304      	adds	r3, #4
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4299      	cmp	r1, r3
 800cda8:	d112      	bne.n	800cdd0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00c      	beq.n	800cdca <etharp_find_entry+0xc2>
 800cdb0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdb4:	4989      	ldr	r1, [pc, #548]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	005b      	lsls	r3, r3, #1
 800cdba:	4413      	add	r3, r2
 800cdbc:	00db      	lsls	r3, r3, #3
 800cdbe:	440b      	add	r3, r1
 800cdc0:	3308      	adds	r3, #8
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d102      	bne.n	800cdd0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cdca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cdce:	e100      	b.n	800cfd2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cdd0:	7dfb      	ldrb	r3, [r7, #23]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d140      	bne.n	800ce58 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cdd6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdda:	4980      	ldr	r1, [pc, #512]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cddc:	4613      	mov	r3, r2
 800cdde:	005b      	lsls	r3, r3, #1
 800cde0:	4413      	add	r3, r2
 800cde2:	00db      	lsls	r3, r3, #3
 800cde4:	440b      	add	r3, r1
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d01a      	beq.n	800ce22 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cdec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cdf0:	497a      	ldr	r1, [pc, #488]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cdf2:	4613      	mov	r3, r2
 800cdf4:	005b      	lsls	r3, r3, #1
 800cdf6:	4413      	add	r3, r2
 800cdf8:	00db      	lsls	r3, r3, #3
 800cdfa:	440b      	add	r3, r1
 800cdfc:	3312      	adds	r3, #18
 800cdfe:	881b      	ldrh	r3, [r3, #0]
 800ce00:	8bba      	ldrh	r2, [r7, #28]
 800ce02:	429a      	cmp	r2, r3
 800ce04:	d845      	bhi.n	800ce92 <etharp_find_entry+0x18a>
            old_queue = i;
 800ce06:	8c3b      	ldrh	r3, [r7, #32]
 800ce08:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800ce0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce0e:	4973      	ldr	r1, [pc, #460]	; (800cfdc <etharp_find_entry+0x2d4>)
 800ce10:	4613      	mov	r3, r2
 800ce12:	005b      	lsls	r3, r3, #1
 800ce14:	4413      	add	r3, r2
 800ce16:	00db      	lsls	r3, r3, #3
 800ce18:	440b      	add	r3, r1
 800ce1a:	3312      	adds	r3, #18
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	83bb      	strh	r3, [r7, #28]
 800ce20:	e037      	b.n	800ce92 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800ce22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce26:	496d      	ldr	r1, [pc, #436]	; (800cfdc <etharp_find_entry+0x2d4>)
 800ce28:	4613      	mov	r3, r2
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	4413      	add	r3, r2
 800ce2e:	00db      	lsls	r3, r3, #3
 800ce30:	440b      	add	r3, r1
 800ce32:	3312      	adds	r3, #18
 800ce34:	881b      	ldrh	r3, [r3, #0]
 800ce36:	8b7a      	ldrh	r2, [r7, #26]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d82a      	bhi.n	800ce92 <etharp_find_entry+0x18a>
            old_pending = i;
 800ce3c:	8c3b      	ldrh	r3, [r7, #32]
 800ce3e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800ce40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce44:	4965      	ldr	r1, [pc, #404]	; (800cfdc <etharp_find_entry+0x2d4>)
 800ce46:	4613      	mov	r3, r2
 800ce48:	005b      	lsls	r3, r3, #1
 800ce4a:	4413      	add	r3, r2
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	440b      	add	r3, r1
 800ce50:	3312      	adds	r3, #18
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	837b      	strh	r3, [r7, #26]
 800ce56:	e01c      	b.n	800ce92 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800ce58:	7dfb      	ldrb	r3, [r7, #23]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d919      	bls.n	800ce92 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800ce5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce62:	495e      	ldr	r1, [pc, #376]	; (800cfdc <etharp_find_entry+0x2d4>)
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	00db      	lsls	r3, r3, #3
 800ce6c:	440b      	add	r3, r1
 800ce6e:	3312      	adds	r3, #18
 800ce70:	881b      	ldrh	r3, [r3, #0]
 800ce72:	8b3a      	ldrh	r2, [r7, #24]
 800ce74:	429a      	cmp	r2, r3
 800ce76:	d80c      	bhi.n	800ce92 <etharp_find_entry+0x18a>
            old_stable = i;
 800ce78:	8c3b      	ldrh	r3, [r7, #32]
 800ce7a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800ce7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ce80:	4956      	ldr	r1, [pc, #344]	; (800cfdc <etharp_find_entry+0x2d4>)
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	440b      	add	r3, r1
 800ce8c:	3312      	adds	r3, #18
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ce92:	8c3b      	ldrh	r3, [r7, #32]
 800ce94:	3301      	adds	r3, #1
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	843b      	strh	r3, [r7, #32]
 800ce9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ce9e:	2b09      	cmp	r3, #9
 800cea0:	f77f af4c 	ble.w	800cd3c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cea4:	7afb      	ldrb	r3, [r7, #11]
 800cea6:	f003 0302 	and.w	r3, r3, #2
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d108      	bne.n	800cec0 <etharp_find_entry+0x1b8>
 800ceae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ceb2:	2b0a      	cmp	r3, #10
 800ceb4:	d107      	bne.n	800cec6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800ceb6:	7afb      	ldrb	r3, [r7, #11]
 800ceb8:	f003 0301 	and.w	r3, r3, #1
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d102      	bne.n	800cec6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cec0:	f04f 33ff 	mov.w	r3, #4294967295
 800cec4:	e085      	b.n	800cfd2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800cec6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ceca:	2b09      	cmp	r3, #9
 800cecc:	dc02      	bgt.n	800ced4 <etharp_find_entry+0x1cc>
    i = empty;
 800cece:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ced0:	843b      	strh	r3, [r7, #32]
 800ced2:	e039      	b.n	800cf48 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ced4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ced8:	2b09      	cmp	r3, #9
 800ceda:	dc14      	bgt.n	800cf06 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800cedc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cede:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800cee0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cee4:	493d      	ldr	r1, [pc, #244]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	00db      	lsls	r3, r3, #3
 800ceee:	440b      	add	r3, r1
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d018      	beq.n	800cf28 <etharp_find_entry+0x220>
 800cef6:	4b3a      	ldr	r3, [pc, #232]	; (800cfe0 <etharp_find_entry+0x2d8>)
 800cef8:	f240 126d 	movw	r2, #365	; 0x16d
 800cefc:	493b      	ldr	r1, [pc, #236]	; (800cfec <etharp_find_entry+0x2e4>)
 800cefe:	483a      	ldr	r0, [pc, #232]	; (800cfe8 <etharp_find_entry+0x2e0>)
 800cf00:	f002 f9ee 	bl	800f2e0 <iprintf>
 800cf04:	e010      	b.n	800cf28 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800cf06:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf0a:	2b09      	cmp	r3, #9
 800cf0c:	dc02      	bgt.n	800cf14 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800cf0e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800cf10:	843b      	strh	r3, [r7, #32]
 800cf12:	e009      	b.n	800cf28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800cf14:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800cf18:	2b09      	cmp	r3, #9
 800cf1a:	dc02      	bgt.n	800cf22 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cf1c:	8bfb      	ldrh	r3, [r7, #30]
 800cf1e:	843b      	strh	r3, [r7, #32]
 800cf20:	e002      	b.n	800cf28 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cf22:	f04f 33ff 	mov.w	r3, #4294967295
 800cf26:	e054      	b.n	800cfd2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf2c:	2b09      	cmp	r3, #9
 800cf2e:	dd06      	ble.n	800cf3e <etharp_find_entry+0x236>
 800cf30:	4b2b      	ldr	r3, [pc, #172]	; (800cfe0 <etharp_find_entry+0x2d8>)
 800cf32:	f240 127f 	movw	r2, #383	; 0x17f
 800cf36:	492e      	ldr	r1, [pc, #184]	; (800cff0 <etharp_find_entry+0x2e8>)
 800cf38:	482b      	ldr	r0, [pc, #172]	; (800cfe8 <etharp_find_entry+0x2e0>)
 800cf3a:	f002 f9d1 	bl	800f2e0 <iprintf>
    etharp_free_entry(i);
 800cf3e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf42:	4618      	mov	r0, r3
 800cf44:	f7ff fe06 	bl	800cb54 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cf48:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cf4c:	2b09      	cmp	r3, #9
 800cf4e:	dd06      	ble.n	800cf5e <etharp_find_entry+0x256>
 800cf50:	4b23      	ldr	r3, [pc, #140]	; (800cfe0 <etharp_find_entry+0x2d8>)
 800cf52:	f240 1283 	movw	r2, #387	; 0x183
 800cf56:	4926      	ldr	r1, [pc, #152]	; (800cff0 <etharp_find_entry+0x2e8>)
 800cf58:	4823      	ldr	r0, [pc, #140]	; (800cfe8 <etharp_find_entry+0x2e0>)
 800cf5a:	f002 f9c1 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cf5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf62:	491e      	ldr	r1, [pc, #120]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cf64:	4613      	mov	r3, r2
 800cf66:	005b      	lsls	r3, r3, #1
 800cf68:	4413      	add	r3, r2
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	440b      	add	r3, r1
 800cf6e:	3314      	adds	r3, #20
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d006      	beq.n	800cf84 <etharp_find_entry+0x27c>
 800cf76:	4b1a      	ldr	r3, [pc, #104]	; (800cfe0 <etharp_find_entry+0x2d8>)
 800cf78:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cf7c:	491d      	ldr	r1, [pc, #116]	; (800cff4 <etharp_find_entry+0x2ec>)
 800cf7e:	481a      	ldr	r0, [pc, #104]	; (800cfe8 <etharp_find_entry+0x2e0>)
 800cf80:	f002 f9ae 	bl	800f2e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00b      	beq.n	800cfa2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cf8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	4812      	ldr	r0, [pc, #72]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cf94:	4613      	mov	r3, r2
 800cf96:	005b      	lsls	r3, r3, #1
 800cf98:	4413      	add	r3, r2
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	4403      	add	r3, r0
 800cf9e:	3304      	adds	r3, #4
 800cfa0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cfa2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfa6:	490d      	ldr	r1, [pc, #52]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cfa8:	4613      	mov	r3, r2
 800cfaa:	005b      	lsls	r3, r3, #1
 800cfac:	4413      	add	r3, r2
 800cfae:	00db      	lsls	r3, r3, #3
 800cfb0:	440b      	add	r3, r1
 800cfb2:	3312      	adds	r3, #18
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cfb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cfbc:	4907      	ldr	r1, [pc, #28]	; (800cfdc <etharp_find_entry+0x2d4>)
 800cfbe:	4613      	mov	r3, r2
 800cfc0:	005b      	lsls	r3, r3, #1
 800cfc2:	4413      	add	r3, r2
 800cfc4:	00db      	lsls	r3, r3, #3
 800cfc6:	440b      	add	r3, r1
 800cfc8:	3308      	adds	r3, #8
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cfce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3728      	adds	r7, #40	; 0x28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20008830 	.word	0x20008830
 800cfe0:	08012438 	.word	0x08012438
 800cfe4:	08012470 	.word	0x08012470
 800cfe8:	080124b0 	.word	0x080124b0
 800cfec:	080124d8 	.word	0x080124d8
 800cff0:	080124f0 	.word	0x080124f0
 800cff4:	08012504 	.word	0x08012504

0800cff8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b088      	sub	sp, #32
 800cffc:	af02      	add	r7, sp, #8
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	60b9      	str	r1, [r7, #8]
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d00c:	2b06      	cmp	r3, #6
 800d00e:	d006      	beq.n	800d01e <etharp_update_arp_entry+0x26>
 800d010:	4b48      	ldr	r3, [pc, #288]	; (800d134 <etharp_update_arp_entry+0x13c>)
 800d012:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d016:	4948      	ldr	r1, [pc, #288]	; (800d138 <etharp_update_arp_entry+0x140>)
 800d018:	4848      	ldr	r0, [pc, #288]	; (800d13c <etharp_update_arp_entry+0x144>)
 800d01a:	f002 f961 	bl	800f2e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d012      	beq.n	800d04a <etharp_update_arp_entry+0x52>
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d00e      	beq.n	800d04a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	68f9      	ldr	r1, [r7, #12]
 800d032:	4618      	mov	r0, r3
 800d034:	f001 f8fe 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800d038:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d105      	bne.n	800d04a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d046:	2be0      	cmp	r3, #224	; 0xe0
 800d048:	d102      	bne.n	800d050 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d04a:	f06f 030f 	mvn.w	r3, #15
 800d04e:	e06c      	b.n	800d12a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	68fa      	ldr	r2, [r7, #12]
 800d054:	4619      	mov	r1, r3
 800d056:	68b8      	ldr	r0, [r7, #8]
 800d058:	f7ff fe56 	bl	800cd08 <etharp_find_entry>
 800d05c:	4603      	mov	r3, r0
 800d05e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d060:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d064:	2b00      	cmp	r3, #0
 800d066:	da02      	bge.n	800d06e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d068:	8afb      	ldrh	r3, [r7, #22]
 800d06a:	b25b      	sxtb	r3, r3
 800d06c:	e05d      	b.n	800d12a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d06e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d072:	4933      	ldr	r1, [pc, #204]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d074:	4613      	mov	r3, r2
 800d076:	005b      	lsls	r3, r3, #1
 800d078:	4413      	add	r3, r2
 800d07a:	00db      	lsls	r3, r3, #3
 800d07c:	440b      	add	r3, r1
 800d07e:	3314      	adds	r3, #20
 800d080:	2202      	movs	r2, #2
 800d082:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d084:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d088:	492d      	ldr	r1, [pc, #180]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d08a:	4613      	mov	r3, r2
 800d08c:	005b      	lsls	r3, r3, #1
 800d08e:	4413      	add	r3, r2
 800d090:	00db      	lsls	r3, r3, #3
 800d092:	440b      	add	r3, r1
 800d094:	3308      	adds	r3, #8
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d09a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	005b      	lsls	r3, r3, #1
 800d0a2:	4413      	add	r3, r2
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	3308      	adds	r3, #8
 800d0a8:	4a25      	ldr	r2, [pc, #148]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d0aa:	4413      	add	r3, r2
 800d0ac:	3304      	adds	r3, #4
 800d0ae:	2206      	movs	r2, #6
 800d0b0:	6879      	ldr	r1, [r7, #4]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f002 f9ef 	bl	800f496 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d0b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0bc:	4920      	ldr	r1, [pc, #128]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d0be:	4613      	mov	r3, r2
 800d0c0:	005b      	lsls	r3, r3, #1
 800d0c2:	4413      	add	r3, r2
 800d0c4:	00db      	lsls	r3, r3, #3
 800d0c6:	440b      	add	r3, r1
 800d0c8:	3312      	adds	r3, #18
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d0ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0d2:	491b      	ldr	r1, [pc, #108]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	005b      	lsls	r3, r3, #1
 800d0d8:	4413      	add	r3, r2
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	440b      	add	r3, r1
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d021      	beq.n	800d128 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d0e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0e8:	4915      	ldr	r1, [pc, #84]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d0ea:	4613      	mov	r3, r2
 800d0ec:	005b      	lsls	r3, r3, #1
 800d0ee:	4413      	add	r3, r2
 800d0f0:	00db      	lsls	r3, r3, #3
 800d0f2:	440b      	add	r3, r1
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d0f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d0fc:	4910      	ldr	r1, [pc, #64]	; (800d140 <etharp_update_arp_entry+0x148>)
 800d0fe:	4613      	mov	r3, r2
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	4413      	add	r3, r2
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	440b      	add	r3, r1
 800d108:	2200      	movs	r2, #0
 800d10a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d112:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6939      	ldr	r1, [r7, #16]
 800d11c:	68f8      	ldr	r0, [r7, #12]
 800d11e:	f001 ff97 	bl	800f050 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d122:	6938      	ldr	r0, [r7, #16]
 800d124:	f7f9 fe28 	bl	8006d78 <pbuf_free>
  }
  return ERR_OK;
 800d128:	2300      	movs	r3, #0
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3718      	adds	r7, #24
 800d12e:	46bd      	mov	sp, r7
 800d130:	bd80      	pop	{r7, pc}
 800d132:	bf00      	nop
 800d134:	08012438 	.word	0x08012438
 800d138:	08012530 	.word	0x08012530
 800d13c:	080124b0 	.word	0x080124b0
 800d140:	20008830 	.word	0x20008830

0800d144 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b084      	sub	sp, #16
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d14c:	2300      	movs	r3, #0
 800d14e:	60fb      	str	r3, [r7, #12]
 800d150:	e01e      	b.n	800d190 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d152:	4913      	ldr	r1, [pc, #76]	; (800d1a0 <etharp_cleanup_netif+0x5c>)
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	4613      	mov	r3, r2
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	4413      	add	r3, r2
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	440b      	add	r3, r1
 800d160:	3314      	adds	r3, #20
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d166:	7afb      	ldrb	r3, [r7, #11]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00e      	beq.n	800d18a <etharp_cleanup_netif+0x46>
 800d16c:	490c      	ldr	r1, [pc, #48]	; (800d1a0 <etharp_cleanup_netif+0x5c>)
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	4613      	mov	r3, r2
 800d172:	005b      	lsls	r3, r3, #1
 800d174:	4413      	add	r3, r2
 800d176:	00db      	lsls	r3, r3, #3
 800d178:	440b      	add	r3, r1
 800d17a:	3308      	adds	r3, #8
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	429a      	cmp	r2, r3
 800d182:	d102      	bne.n	800d18a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800d184:	68f8      	ldr	r0, [r7, #12]
 800d186:	f7ff fce5 	bl	800cb54 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	3301      	adds	r3, #1
 800d18e:	60fb      	str	r3, [r7, #12]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2b09      	cmp	r3, #9
 800d194:	dddd      	ble.n	800d152 <etharp_cleanup_netif+0xe>
    }
  }
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20008830 	.word	0x20008830

0800d1a4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800d1a4:	b5b0      	push	{r4, r5, r7, lr}
 800d1a6:	b08a      	sub	sp, #40	; 0x28
 800d1a8:	af04      	add	r7, sp, #16
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d107      	bne.n	800d1c4 <etharp_input+0x20>
 800d1b4:	4b3d      	ldr	r3, [pc, #244]	; (800d2ac <etharp_input+0x108>)
 800d1b6:	f240 228a 	movw	r2, #650	; 0x28a
 800d1ba:	493d      	ldr	r1, [pc, #244]	; (800d2b0 <etharp_input+0x10c>)
 800d1bc:	483d      	ldr	r0, [pc, #244]	; (800d2b4 <etharp_input+0x110>)
 800d1be:	f002 f88f 	bl	800f2e0 <iprintf>
 800d1c2:	e06f      	b.n	800d2a4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685b      	ldr	r3, [r3, #4]
 800d1c8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1ca:	693b      	ldr	r3, [r7, #16]
 800d1cc:	881b      	ldrh	r3, [r3, #0]
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1d4:	d10c      	bne.n	800d1f0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d1da:	2b06      	cmp	r3, #6
 800d1dc:	d108      	bne.n	800d1f0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d1e2:	2b04      	cmp	r3, #4
 800d1e4:	d104      	bne.n	800d1f0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	885b      	ldrh	r3, [r3, #2]
 800d1ea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d1ec:	2b08      	cmp	r3, #8
 800d1ee:	d003      	beq.n	800d1f8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7f9 fdc1 	bl	8006d78 <pbuf_free>
    return;
 800d1f6:	e055      	b.n	800d2a4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	330e      	adds	r3, #14
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	3318      	adds	r3, #24
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	3304      	adds	r3, #4
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d102      	bne.n	800d218 <etharp_input+0x74>
    for_us = 0;
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]
 800d216:	e009      	b.n	800d22c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	3304      	adds	r3, #4
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	429a      	cmp	r2, r3
 800d222:	bf0c      	ite	eq
 800d224:	2301      	moveq	r3, #1
 800d226:	2300      	movne	r3, #0
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	f103 0208 	add.w	r2, r3, #8
 800d232:	7dfb      	ldrb	r3, [r7, #23]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <etharp_input+0x98>
 800d238:	2301      	movs	r3, #1
 800d23a:	e000      	b.n	800d23e <etharp_input+0x9a>
 800d23c:	2302      	movs	r3, #2
 800d23e:	f107 010c 	add.w	r1, r7, #12
 800d242:	6838      	ldr	r0, [r7, #0]
 800d244:	f7ff fed8 	bl	800cff8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	88db      	ldrh	r3, [r3, #6]
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d252:	d003      	beq.n	800d25c <etharp_input+0xb8>
 800d254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d258:	d01e      	beq.n	800d298 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d25a:	e020      	b.n	800d29e <etharp_input+0xfa>
      if (for_us) {
 800d25c:	7dfb      	ldrb	r3, [r7, #23]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d01c      	beq.n	800d29c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d27c:	2102      	movs	r1, #2
 800d27e:	9103      	str	r1, [sp, #12]
 800d280:	f107 010c 	add.w	r1, r7, #12
 800d284:	9102      	str	r1, [sp, #8]
 800d286:	9201      	str	r2, [sp, #4]
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	462b      	mov	r3, r5
 800d28c:	4622      	mov	r2, r4
 800d28e:	4601      	mov	r1, r0
 800d290:	6838      	ldr	r0, [r7, #0]
 800d292:	f000 faeb 	bl	800d86c <etharp_raw>
      break;
 800d296:	e001      	b.n	800d29c <etharp_input+0xf8>
      break;
 800d298:	bf00      	nop
 800d29a:	e000      	b.n	800d29e <etharp_input+0xfa>
      break;
 800d29c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7f9 fd6a 	bl	8006d78 <pbuf_free>
}
 800d2a4:	3718      	adds	r7, #24
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	08012438 	.word	0x08012438
 800d2b0:	08012588 	.word	0x08012588
 800d2b4:	080124b0 	.word	0x080124b0

0800d2b8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af02      	add	r7, sp, #8
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d2c6:	79fa      	ldrb	r2, [r7, #7]
 800d2c8:	4944      	ldr	r1, [pc, #272]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	4413      	add	r3, r2
 800d2d0:	00db      	lsls	r3, r3, #3
 800d2d2:	440b      	add	r3, r1
 800d2d4:	3314      	adds	r3, #20
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	2b01      	cmp	r3, #1
 800d2da:	d806      	bhi.n	800d2ea <etharp_output_to_arp_index+0x32>
 800d2dc:	4b40      	ldr	r3, [pc, #256]	; (800d3e0 <etharp_output_to_arp_index+0x128>)
 800d2de:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d2e2:	4940      	ldr	r1, [pc, #256]	; (800d3e4 <etharp_output_to_arp_index+0x12c>)
 800d2e4:	4840      	ldr	r0, [pc, #256]	; (800d3e8 <etharp_output_to_arp_index+0x130>)
 800d2e6:	f001 fffb 	bl	800f2e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d2ea:	79fa      	ldrb	r2, [r7, #7]
 800d2ec:	493b      	ldr	r1, [pc, #236]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	005b      	lsls	r3, r3, #1
 800d2f2:	4413      	add	r3, r2
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	440b      	add	r3, r1
 800d2f8:	3314      	adds	r3, #20
 800d2fa:	781b      	ldrb	r3, [r3, #0]
 800d2fc:	2b02      	cmp	r3, #2
 800d2fe:	d153      	bne.n	800d3a8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d300:	79fa      	ldrb	r2, [r7, #7]
 800d302:	4936      	ldr	r1, [pc, #216]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d304:	4613      	mov	r3, r2
 800d306:	005b      	lsls	r3, r3, #1
 800d308:	4413      	add	r3, r2
 800d30a:	00db      	lsls	r3, r3, #3
 800d30c:	440b      	add	r3, r1
 800d30e:	3312      	adds	r3, #18
 800d310:	881b      	ldrh	r3, [r3, #0]
 800d312:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d316:	d919      	bls.n	800d34c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d318:	79fa      	ldrb	r2, [r7, #7]
 800d31a:	4613      	mov	r3, r2
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4413      	add	r3, r2
 800d320:	00db      	lsls	r3, r3, #3
 800d322:	4a2e      	ldr	r2, [pc, #184]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d324:	4413      	add	r3, r2
 800d326:	3304      	adds	r3, #4
 800d328:	4619      	mov	r1, r3
 800d32a:	68f8      	ldr	r0, [r7, #12]
 800d32c:	f000 fb4c 	bl	800d9c8 <etharp_request>
 800d330:	4603      	mov	r3, r0
 800d332:	2b00      	cmp	r3, #0
 800d334:	d138      	bne.n	800d3a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d336:	79fa      	ldrb	r2, [r7, #7]
 800d338:	4928      	ldr	r1, [pc, #160]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d33a:	4613      	mov	r3, r2
 800d33c:	005b      	lsls	r3, r3, #1
 800d33e:	4413      	add	r3, r2
 800d340:	00db      	lsls	r3, r3, #3
 800d342:	440b      	add	r3, r1
 800d344:	3314      	adds	r3, #20
 800d346:	2203      	movs	r2, #3
 800d348:	701a      	strb	r2, [r3, #0]
 800d34a:	e02d      	b.n	800d3a8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d34c:	79fa      	ldrb	r2, [r7, #7]
 800d34e:	4923      	ldr	r1, [pc, #140]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d350:	4613      	mov	r3, r2
 800d352:	005b      	lsls	r3, r3, #1
 800d354:	4413      	add	r3, r2
 800d356:	00db      	lsls	r3, r3, #3
 800d358:	440b      	add	r3, r1
 800d35a:	3312      	adds	r3, #18
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d362:	d321      	bcc.n	800d3a8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d364:	79fa      	ldrb	r2, [r7, #7]
 800d366:	4613      	mov	r3, r2
 800d368:	005b      	lsls	r3, r3, #1
 800d36a:	4413      	add	r3, r2
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	4a1b      	ldr	r2, [pc, #108]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d370:	4413      	add	r3, r2
 800d372:	1d19      	adds	r1, r3, #4
 800d374:	79fa      	ldrb	r2, [r7, #7]
 800d376:	4613      	mov	r3, r2
 800d378:	005b      	lsls	r3, r3, #1
 800d37a:	4413      	add	r3, r2
 800d37c:	00db      	lsls	r3, r3, #3
 800d37e:	3308      	adds	r3, #8
 800d380:	4a16      	ldr	r2, [pc, #88]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d382:	4413      	add	r3, r2
 800d384:	3304      	adds	r3, #4
 800d386:	461a      	mov	r2, r3
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f000 fafb 	bl	800d984 <etharp_request_dst>
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d109      	bne.n	800d3a8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d394:	79fa      	ldrb	r2, [r7, #7]
 800d396:	4911      	ldr	r1, [pc, #68]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d398:	4613      	mov	r3, r2
 800d39a:	005b      	lsls	r3, r3, #1
 800d39c:	4413      	add	r3, r2
 800d39e:	00db      	lsls	r3, r3, #3
 800d3a0:	440b      	add	r3, r1
 800d3a2:	3314      	adds	r3, #20
 800d3a4:	2203      	movs	r2, #3
 800d3a6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d3ae:	79fa      	ldrb	r2, [r7, #7]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	005b      	lsls	r3, r3, #1
 800d3b4:	4413      	add	r3, r2
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	3308      	adds	r3, #8
 800d3ba:	4a08      	ldr	r2, [pc, #32]	; (800d3dc <etharp_output_to_arp_index+0x124>)
 800d3bc:	4413      	add	r3, r2
 800d3be:	3304      	adds	r3, #4
 800d3c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3c4:	9200      	str	r2, [sp, #0]
 800d3c6:	460a      	mov	r2, r1
 800d3c8:	68b9      	ldr	r1, [r7, #8]
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f001 fe40 	bl	800f050 <ethernet_output>
 800d3d0:	4603      	mov	r3, r0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3710      	adds	r7, #16
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20008830 	.word	0x20008830
 800d3e0:	08012438 	.word	0x08012438
 800d3e4:	080125a8 	.word	0x080125a8
 800d3e8:	080124b0 	.word	0x080124b0

0800d3ec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b08a      	sub	sp, #40	; 0x28
 800d3f0:	af02      	add	r7, sp, #8
 800d3f2:	60f8      	str	r0, [r7, #12]
 800d3f4:	60b9      	str	r1, [r7, #8]
 800d3f6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d106      	bne.n	800d410 <etharp_output+0x24>
 800d402:	4b73      	ldr	r3, [pc, #460]	; (800d5d0 <etharp_output+0x1e4>)
 800d404:	f240 321e 	movw	r2, #798	; 0x31e
 800d408:	4972      	ldr	r1, [pc, #456]	; (800d5d4 <etharp_output+0x1e8>)
 800d40a:	4873      	ldr	r0, [pc, #460]	; (800d5d8 <etharp_output+0x1ec>)
 800d40c:	f001 ff68 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d106      	bne.n	800d424 <etharp_output+0x38>
 800d416:	4b6e      	ldr	r3, [pc, #440]	; (800d5d0 <etharp_output+0x1e4>)
 800d418:	f240 321f 	movw	r2, #799	; 0x31f
 800d41c:	496f      	ldr	r1, [pc, #444]	; (800d5dc <etharp_output+0x1f0>)
 800d41e:	486e      	ldr	r0, [pc, #440]	; (800d5d8 <etharp_output+0x1ec>)
 800d420:	f001 ff5e 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d106      	bne.n	800d438 <etharp_output+0x4c>
 800d42a:	4b69      	ldr	r3, [pc, #420]	; (800d5d0 <etharp_output+0x1e4>)
 800d42c:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d430:	496b      	ldr	r1, [pc, #428]	; (800d5e0 <etharp_output+0x1f4>)
 800d432:	4869      	ldr	r0, [pc, #420]	; (800d5d8 <etharp_output+0x1ec>)
 800d434:	f001 ff54 	bl	800f2e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	68f9      	ldr	r1, [r7, #12]
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 fef8 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800d444:	4603      	mov	r3, r0
 800d446:	2b00      	cmp	r3, #0
 800d448:	d002      	beq.n	800d450 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d44a:	4b66      	ldr	r3, [pc, #408]	; (800d5e4 <etharp_output+0x1f8>)
 800d44c:	61fb      	str	r3, [r7, #28]
 800d44e:	e0af      	b.n	800d5b0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d458:	2be0      	cmp	r3, #224	; 0xe0
 800d45a:	d118      	bne.n	800d48e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d45c:	2301      	movs	r3, #1
 800d45e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d460:	2300      	movs	r3, #0
 800d462:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d464:	235e      	movs	r3, #94	; 0x5e
 800d466:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	3301      	adds	r3, #1
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d472:	b2db      	uxtb	r3, r3
 800d474:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	3302      	adds	r3, #2
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	3303      	adds	r3, #3
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d486:	f107 0310 	add.w	r3, r7, #16
 800d48a:	61fb      	str	r3, [r7, #28]
 800d48c:	e090      	b.n	800d5b0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	3304      	adds	r3, #4
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	405a      	eors	r2, r3
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	3308      	adds	r3, #8
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4013      	ands	r3, r2
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d012      	beq.n	800d4cc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d4ac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d00b      	beq.n	800d4cc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	330c      	adds	r3, #12
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d003      	beq.n	800d4c6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	330c      	adds	r3, #12
 800d4c2:	61bb      	str	r3, [r7, #24]
 800d4c4:	e002      	b.n	800d4cc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d4c6:	f06f 0303 	mvn.w	r3, #3
 800d4ca:	e07d      	b.n	800d5c8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d4cc:	4b46      	ldr	r3, [pc, #280]	; (800d5e8 <etharp_output+0x1fc>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4a46      	ldr	r2, [pc, #280]	; (800d5ec <etharp_output+0x200>)
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	005b      	lsls	r3, r3, #1
 800d4d8:	440b      	add	r3, r1
 800d4da:	00db      	lsls	r3, r3, #3
 800d4dc:	4413      	add	r3, r2
 800d4de:	3314      	adds	r3, #20
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d925      	bls.n	800d532 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d4e6:	4b40      	ldr	r3, [pc, #256]	; (800d5e8 <etharp_output+0x1fc>)
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	4619      	mov	r1, r3
 800d4ec:	4a3f      	ldr	r2, [pc, #252]	; (800d5ec <etharp_output+0x200>)
 800d4ee:	460b      	mov	r3, r1
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	440b      	add	r3, r1
 800d4f4:	00db      	lsls	r3, r3, #3
 800d4f6:	4413      	add	r3, r2
 800d4f8:	3308      	adds	r3, #8
 800d4fa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d4fc:	68fa      	ldr	r2, [r7, #12]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d117      	bne.n	800d532 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	681a      	ldr	r2, [r3, #0]
 800d506:	4b38      	ldr	r3, [pc, #224]	; (800d5e8 <etharp_output+0x1fc>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	4618      	mov	r0, r3
 800d50c:	4937      	ldr	r1, [pc, #220]	; (800d5ec <etharp_output+0x200>)
 800d50e:	4603      	mov	r3, r0
 800d510:	005b      	lsls	r3, r3, #1
 800d512:	4403      	add	r3, r0
 800d514:	00db      	lsls	r3, r3, #3
 800d516:	440b      	add	r3, r1
 800d518:	3304      	adds	r3, #4
 800d51a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d108      	bne.n	800d532 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d520:	4b31      	ldr	r3, [pc, #196]	; (800d5e8 <etharp_output+0x1fc>)
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	461a      	mov	r2, r3
 800d526:	68b9      	ldr	r1, [r7, #8]
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff fec5 	bl	800d2b8 <etharp_output_to_arp_index>
 800d52e:	4603      	mov	r3, r0
 800d530:	e04a      	b.n	800d5c8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d532:	2300      	movs	r3, #0
 800d534:	75fb      	strb	r3, [r7, #23]
 800d536:	e031      	b.n	800d59c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d538:	7dfa      	ldrb	r2, [r7, #23]
 800d53a:	492c      	ldr	r1, [pc, #176]	; (800d5ec <etharp_output+0x200>)
 800d53c:	4613      	mov	r3, r2
 800d53e:	005b      	lsls	r3, r3, #1
 800d540:	4413      	add	r3, r2
 800d542:	00db      	lsls	r3, r3, #3
 800d544:	440b      	add	r3, r1
 800d546:	3314      	adds	r3, #20
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d923      	bls.n	800d596 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d54e:	7dfa      	ldrb	r2, [r7, #23]
 800d550:	4926      	ldr	r1, [pc, #152]	; (800d5ec <etharp_output+0x200>)
 800d552:	4613      	mov	r3, r2
 800d554:	005b      	lsls	r3, r3, #1
 800d556:	4413      	add	r3, r2
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	440b      	add	r3, r1
 800d55c:	3308      	adds	r3, #8
 800d55e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d560:	68fa      	ldr	r2, [r7, #12]
 800d562:	429a      	cmp	r2, r3
 800d564:	d117      	bne.n	800d596 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d566:	69bb      	ldr	r3, [r7, #24]
 800d568:	6819      	ldr	r1, [r3, #0]
 800d56a:	7dfa      	ldrb	r2, [r7, #23]
 800d56c:	481f      	ldr	r0, [pc, #124]	; (800d5ec <etharp_output+0x200>)
 800d56e:	4613      	mov	r3, r2
 800d570:	005b      	lsls	r3, r3, #1
 800d572:	4413      	add	r3, r2
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	4403      	add	r3, r0
 800d578:	3304      	adds	r3, #4
 800d57a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d57c:	4299      	cmp	r1, r3
 800d57e:	d10a      	bne.n	800d596 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d580:	4a19      	ldr	r2, [pc, #100]	; (800d5e8 <etharp_output+0x1fc>)
 800d582:	7dfb      	ldrb	r3, [r7, #23]
 800d584:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	461a      	mov	r2, r3
 800d58a:	68b9      	ldr	r1, [r7, #8]
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f7ff fe93 	bl	800d2b8 <etharp_output_to_arp_index>
 800d592:	4603      	mov	r3, r0
 800d594:	e018      	b.n	800d5c8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d596:	7dfb      	ldrb	r3, [r7, #23]
 800d598:	3301      	adds	r3, #1
 800d59a:	75fb      	strb	r3, [r7, #23]
 800d59c:	7dfb      	ldrb	r3, [r7, #23]
 800d59e:	2b09      	cmp	r3, #9
 800d5a0:	d9ca      	bls.n	800d538 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d5a2:	68ba      	ldr	r2, [r7, #8]
 800d5a4:	69b9      	ldr	r1, [r7, #24]
 800d5a6:	68f8      	ldr	r0, [r7, #12]
 800d5a8:	f000 f822 	bl	800d5f0 <etharp_query>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	e00b      	b.n	800d5c8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d5b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	69fb      	ldr	r3, [r7, #28]
 800d5be:	68b9      	ldr	r1, [r7, #8]
 800d5c0:	68f8      	ldr	r0, [r7, #12]
 800d5c2:	f001 fd45 	bl	800f050 <ethernet_output>
 800d5c6:	4603      	mov	r3, r0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3720      	adds	r7, #32
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}
 800d5d0:	08012438 	.word	0x08012438
 800d5d4:	08012588 	.word	0x08012588
 800d5d8:	080124b0 	.word	0x080124b0
 800d5dc:	080125d8 	.word	0x080125d8
 800d5e0:	08012578 	.word	0x08012578
 800d5e4:	08012bf4 	.word	0x08012bf4
 800d5e8:	20008920 	.word	0x20008920
 800d5ec:	20008830 	.word	0x20008830

0800d5f0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b08c      	sub	sp, #48	; 0x30
 800d5f4:	af02      	add	r7, sp, #8
 800d5f6:	60f8      	str	r0, [r7, #12]
 800d5f8:	60b9      	str	r1, [r7, #8]
 800d5fa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3326      	adds	r3, #38	; 0x26
 800d600:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d602:	23ff      	movs	r3, #255	; 0xff
 800d604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d608:	2300      	movs	r3, #0
 800d60a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	68f9      	ldr	r1, [r7, #12]
 800d612:	4618      	mov	r0, r3
 800d614:	f000 fe0e 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800d618:	4603      	mov	r3, r0
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d10c      	bne.n	800d638 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d626:	2be0      	cmp	r3, #224	; 0xe0
 800d628:	d006      	beq.n	800d638 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d003      	beq.n	800d638 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d102      	bne.n	800d63e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d638:	f06f 030f 	mvn.w	r3, #15
 800d63c:	e101      	b.n	800d842 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d63e:	68fa      	ldr	r2, [r7, #12]
 800d640:	2101      	movs	r1, #1
 800d642:	68b8      	ldr	r0, [r7, #8]
 800d644:	f7ff fb60 	bl	800cd08 <etharp_find_entry>
 800d648:	4603      	mov	r3, r0
 800d64a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d64c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d650:	2b00      	cmp	r3, #0
 800d652:	da02      	bge.n	800d65a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d654:	8a7b      	ldrh	r3, [r7, #18]
 800d656:	b25b      	sxtb	r3, r3
 800d658:	e0f3      	b.n	800d842 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d65a:	8a7b      	ldrh	r3, [r7, #18]
 800d65c:	2b7e      	cmp	r3, #126	; 0x7e
 800d65e:	d906      	bls.n	800d66e <etharp_query+0x7e>
 800d660:	4b7a      	ldr	r3, [pc, #488]	; (800d84c <etharp_query+0x25c>)
 800d662:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d666:	497a      	ldr	r1, [pc, #488]	; (800d850 <etharp_query+0x260>)
 800d668:	487a      	ldr	r0, [pc, #488]	; (800d854 <etharp_query+0x264>)
 800d66a:	f001 fe39 	bl	800f2e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d66e:	8a7b      	ldrh	r3, [r7, #18]
 800d670:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d672:	7c7a      	ldrb	r2, [r7, #17]
 800d674:	4978      	ldr	r1, [pc, #480]	; (800d858 <etharp_query+0x268>)
 800d676:	4613      	mov	r3, r2
 800d678:	005b      	lsls	r3, r3, #1
 800d67a:	4413      	add	r3, r2
 800d67c:	00db      	lsls	r3, r3, #3
 800d67e:	440b      	add	r3, r1
 800d680:	3314      	adds	r3, #20
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d115      	bne.n	800d6b4 <etharp_query+0xc4>
    is_new_entry = 1;
 800d688:	2301      	movs	r3, #1
 800d68a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d68c:	7c7a      	ldrb	r2, [r7, #17]
 800d68e:	4972      	ldr	r1, [pc, #456]	; (800d858 <etharp_query+0x268>)
 800d690:	4613      	mov	r3, r2
 800d692:	005b      	lsls	r3, r3, #1
 800d694:	4413      	add	r3, r2
 800d696:	00db      	lsls	r3, r3, #3
 800d698:	440b      	add	r3, r1
 800d69a:	3314      	adds	r3, #20
 800d69c:	2201      	movs	r2, #1
 800d69e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d6a0:	7c7a      	ldrb	r2, [r7, #17]
 800d6a2:	496d      	ldr	r1, [pc, #436]	; (800d858 <etharp_query+0x268>)
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	005b      	lsls	r3, r3, #1
 800d6a8:	4413      	add	r3, r2
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	440b      	add	r3, r1
 800d6ae:	3308      	adds	r3, #8
 800d6b0:	68fa      	ldr	r2, [r7, #12]
 800d6b2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d6b4:	7c7a      	ldrb	r2, [r7, #17]
 800d6b6:	4968      	ldr	r1, [pc, #416]	; (800d858 <etharp_query+0x268>)
 800d6b8:	4613      	mov	r3, r2
 800d6ba:	005b      	lsls	r3, r3, #1
 800d6bc:	4413      	add	r3, r2
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	440b      	add	r3, r1
 800d6c2:	3314      	adds	r3, #20
 800d6c4:	781b      	ldrb	r3, [r3, #0]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d011      	beq.n	800d6ee <etharp_query+0xfe>
 800d6ca:	7c7a      	ldrb	r2, [r7, #17]
 800d6cc:	4962      	ldr	r1, [pc, #392]	; (800d858 <etharp_query+0x268>)
 800d6ce:	4613      	mov	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4413      	add	r3, r2
 800d6d4:	00db      	lsls	r3, r3, #3
 800d6d6:	440b      	add	r3, r1
 800d6d8:	3314      	adds	r3, #20
 800d6da:	781b      	ldrb	r3, [r3, #0]
 800d6dc:	2b01      	cmp	r3, #1
 800d6de:	d806      	bhi.n	800d6ee <etharp_query+0xfe>
 800d6e0:	4b5a      	ldr	r3, [pc, #360]	; (800d84c <etharp_query+0x25c>)
 800d6e2:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d6e6:	495d      	ldr	r1, [pc, #372]	; (800d85c <etharp_query+0x26c>)
 800d6e8:	485a      	ldr	r0, [pc, #360]	; (800d854 <etharp_query+0x264>)
 800d6ea:	f001 fdf9 	bl	800f2e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d6ee:	6a3b      	ldr	r3, [r7, #32]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d102      	bne.n	800d6fa <etharp_query+0x10a>
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d10c      	bne.n	800d714 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d6fa:	68b9      	ldr	r1, [r7, #8]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f000 f963 	bl	800d9c8 <etharp_request>
 800d702:	4603      	mov	r3, r0
 800d704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d102      	bne.n	800d714 <etharp_query+0x124>
      return result;
 800d70e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d712:	e096      	b.n	800d842 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d106      	bne.n	800d728 <etharp_query+0x138>
 800d71a:	4b4c      	ldr	r3, [pc, #304]	; (800d84c <etharp_query+0x25c>)
 800d71c:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d720:	494f      	ldr	r1, [pc, #316]	; (800d860 <etharp_query+0x270>)
 800d722:	484c      	ldr	r0, [pc, #304]	; (800d854 <etharp_query+0x264>)
 800d724:	f001 fddc 	bl	800f2e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d728:	7c7a      	ldrb	r2, [r7, #17]
 800d72a:	494b      	ldr	r1, [pc, #300]	; (800d858 <etharp_query+0x268>)
 800d72c:	4613      	mov	r3, r2
 800d72e:	005b      	lsls	r3, r3, #1
 800d730:	4413      	add	r3, r2
 800d732:	00db      	lsls	r3, r3, #3
 800d734:	440b      	add	r3, r1
 800d736:	3314      	adds	r3, #20
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d917      	bls.n	800d76e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d73e:	4a49      	ldr	r2, [pc, #292]	; (800d864 <etharp_query+0x274>)
 800d740:	7c7b      	ldrb	r3, [r7, #17]
 800d742:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d744:	7c7a      	ldrb	r2, [r7, #17]
 800d746:	4613      	mov	r3, r2
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	4413      	add	r3, r2
 800d74c:	00db      	lsls	r3, r3, #3
 800d74e:	3308      	adds	r3, #8
 800d750:	4a41      	ldr	r2, [pc, #260]	; (800d858 <etharp_query+0x268>)
 800d752:	4413      	add	r3, r2
 800d754:	3304      	adds	r3, #4
 800d756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d75a:	9200      	str	r2, [sp, #0]
 800d75c:	697a      	ldr	r2, [r7, #20]
 800d75e:	6879      	ldr	r1, [r7, #4]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f001 fc75 	bl	800f050 <ethernet_output>
 800d766:	4603      	mov	r3, r0
 800d768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d76c:	e067      	b.n	800d83e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d76e:	7c7a      	ldrb	r2, [r7, #17]
 800d770:	4939      	ldr	r1, [pc, #228]	; (800d858 <etharp_query+0x268>)
 800d772:	4613      	mov	r3, r2
 800d774:	005b      	lsls	r3, r3, #1
 800d776:	4413      	add	r3, r2
 800d778:	00db      	lsls	r3, r3, #3
 800d77a:	440b      	add	r3, r1
 800d77c:	3314      	adds	r3, #20
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b01      	cmp	r3, #1
 800d782:	d15c      	bne.n	800d83e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d78c:	e01c      	b.n	800d7c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	895a      	ldrh	r2, [r3, #10]
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	891b      	ldrh	r3, [r3, #8]
 800d796:	429a      	cmp	r2, r3
 800d798:	d10a      	bne.n	800d7b0 <etharp_query+0x1c0>
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d006      	beq.n	800d7b0 <etharp_query+0x1c0>
 800d7a2:	4b2a      	ldr	r3, [pc, #168]	; (800d84c <etharp_query+0x25c>)
 800d7a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d7a8:	492f      	ldr	r1, [pc, #188]	; (800d868 <etharp_query+0x278>)
 800d7aa:	482a      	ldr	r0, [pc, #168]	; (800d854 <etharp_query+0x264>)
 800d7ac:	f001 fd98 	bl	800f2e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d7b0:	69fb      	ldr	r3, [r7, #28]
 800d7b2:	7b1b      	ldrb	r3, [r3, #12]
 800d7b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <etharp_query+0x1d2>
        copy_needed = 1;
 800d7bc:	2301      	movs	r3, #1
 800d7be:	61bb      	str	r3, [r7, #24]
        break;
 800d7c0:	e005      	b.n	800d7ce <etharp_query+0x1de>
      }
      p = p->next;
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d7c8:	69fb      	ldr	r3, [r7, #28]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d1df      	bne.n	800d78e <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d7ce:	69bb      	ldr	r3, [r7, #24]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d007      	beq.n	800d7e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d7d4:	687a      	ldr	r2, [r7, #4]
 800d7d6:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d7da:	200e      	movs	r0, #14
 800d7dc:	f7f9 fd28 	bl	8007230 <pbuf_clone>
 800d7e0:	61f8      	str	r0, [r7, #28]
 800d7e2:	e004      	b.n	800d7ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d7e8:	69f8      	ldr	r0, [r7, #28]
 800d7ea:	f7f9 fb65 	bl	8006eb8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d021      	beq.n	800d838 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d7f4:	7c7a      	ldrb	r2, [r7, #17]
 800d7f6:	4918      	ldr	r1, [pc, #96]	; (800d858 <etharp_query+0x268>)
 800d7f8:	4613      	mov	r3, r2
 800d7fa:	005b      	lsls	r3, r3, #1
 800d7fc:	4413      	add	r3, r2
 800d7fe:	00db      	lsls	r3, r3, #3
 800d800:	440b      	add	r3, r1
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d00a      	beq.n	800d81e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d808:	7c7a      	ldrb	r2, [r7, #17]
 800d80a:	4913      	ldr	r1, [pc, #76]	; (800d858 <etharp_query+0x268>)
 800d80c:	4613      	mov	r3, r2
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	4413      	add	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	440b      	add	r3, r1
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	4618      	mov	r0, r3
 800d81a:	f7f9 faad 	bl	8006d78 <pbuf_free>
      }
      arp_table[i].q = p;
 800d81e:	7c7a      	ldrb	r2, [r7, #17]
 800d820:	490d      	ldr	r1, [pc, #52]	; (800d858 <etharp_query+0x268>)
 800d822:	4613      	mov	r3, r2
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4413      	add	r3, r2
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	440b      	add	r3, r1
 800d82c:	69fa      	ldr	r2, [r7, #28]
 800d82e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d830:	2300      	movs	r3, #0
 800d832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d836:	e002      	b.n	800d83e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d838:	23ff      	movs	r3, #255	; 0xff
 800d83a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d83e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d842:	4618      	mov	r0, r3
 800d844:	3728      	adds	r7, #40	; 0x28
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
 800d84a:	bf00      	nop
 800d84c:	08012438 	.word	0x08012438
 800d850:	080125e4 	.word	0x080125e4
 800d854:	080124b0 	.word	0x080124b0
 800d858:	20008830 	.word	0x20008830
 800d85c:	080125f4 	.word	0x080125f4
 800d860:	080125d8 	.word	0x080125d8
 800d864:	20008920 	.word	0x20008920
 800d868:	0801261c 	.word	0x0801261c

0800d86c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08a      	sub	sp, #40	; 0x28
 800d870:	af02      	add	r7, sp, #8
 800d872:	60f8      	str	r0, [r7, #12]
 800d874:	60b9      	str	r1, [r7, #8]
 800d876:	607a      	str	r2, [r7, #4]
 800d878:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d87a:	2300      	movs	r3, #0
 800d87c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d106      	bne.n	800d892 <etharp_raw+0x26>
 800d884:	4b3a      	ldr	r3, [pc, #232]	; (800d970 <etharp_raw+0x104>)
 800d886:	f240 4257 	movw	r2, #1111	; 0x457
 800d88a:	493a      	ldr	r1, [pc, #232]	; (800d974 <etharp_raw+0x108>)
 800d88c:	483a      	ldr	r0, [pc, #232]	; (800d978 <etharp_raw+0x10c>)
 800d88e:	f001 fd27 	bl	800f2e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d892:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d896:	211c      	movs	r1, #28
 800d898:	200e      	movs	r0, #14
 800d89a:	f7f8 ff89 	bl	80067b0 <pbuf_alloc>
 800d89e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d8a0:	69bb      	ldr	r3, [r7, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d102      	bne.n	800d8ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8aa:	e05d      	b.n	800d968 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	895b      	ldrh	r3, [r3, #10]
 800d8b0:	2b1b      	cmp	r3, #27
 800d8b2:	d806      	bhi.n	800d8c2 <etharp_raw+0x56>
 800d8b4:	4b2e      	ldr	r3, [pc, #184]	; (800d970 <etharp_raw+0x104>)
 800d8b6:	f240 4262 	movw	r2, #1122	; 0x462
 800d8ba:	4930      	ldr	r1, [pc, #192]	; (800d97c <etharp_raw+0x110>)
 800d8bc:	482e      	ldr	r0, [pc, #184]	; (800d978 <etharp_raw+0x10c>)
 800d8be:	f001 fd0f 	bl	800f2e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d8c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7f7 fef6 	bl	80056bc <lwip_htons>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	461a      	mov	r2, r3
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8de:	2b06      	cmp	r3, #6
 800d8e0:	d006      	beq.n	800d8f0 <etharp_raw+0x84>
 800d8e2:	4b23      	ldr	r3, [pc, #140]	; (800d970 <etharp_raw+0x104>)
 800d8e4:	f240 4269 	movw	r2, #1129	; 0x469
 800d8e8:	4925      	ldr	r1, [pc, #148]	; (800d980 <etharp_raw+0x114>)
 800d8ea:	4823      	ldr	r0, [pc, #140]	; (800d978 <etharp_raw+0x10c>)
 800d8ec:	f001 fcf8 	bl	800f2e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	3308      	adds	r3, #8
 800d8f4:	2206      	movs	r2, #6
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f001 fdcc 	bl	800f496 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	3312      	adds	r3, #18
 800d902:	2206      	movs	r2, #6
 800d904:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d906:	4618      	mov	r0, r3
 800d908:	f001 fdc5 	bl	800f496 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	330e      	adds	r3, #14
 800d910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d912:	6812      	ldr	r2, [r2, #0]
 800d914:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	3318      	adds	r3, #24
 800d91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d91c:	6812      	ldr	r2, [r2, #0]
 800d91e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	2200      	movs	r2, #0
 800d924:	701a      	strb	r2, [r3, #0]
 800d926:	2200      	movs	r2, #0
 800d928:	f042 0201 	orr.w	r2, r2, #1
 800d92c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	2200      	movs	r2, #0
 800d932:	f042 0208 	orr.w	r2, r2, #8
 800d936:	709a      	strb	r2, [r3, #2]
 800d938:	2200      	movs	r2, #0
 800d93a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	2206      	movs	r2, #6
 800d940:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d942:	697b      	ldr	r3, [r7, #20]
 800d944:	2204      	movs	r2, #4
 800d946:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d948:	f640 0306 	movw	r3, #2054	; 0x806
 800d94c:	9300      	str	r3, [sp, #0]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	69b9      	ldr	r1, [r7, #24]
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f001 fb7b 	bl	800f050 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d95a:	69b8      	ldr	r0, [r7, #24]
 800d95c:	f7f9 fa0c 	bl	8006d78 <pbuf_free>
  p = NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d964:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d968:	4618      	mov	r0, r3
 800d96a:	3720      	adds	r7, #32
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	08012438 	.word	0x08012438
 800d974:	08012588 	.word	0x08012588
 800d978:	080124b0 	.word	0x080124b0
 800d97c:	08012638 	.word	0x08012638
 800d980:	0801266c 	.word	0x0801266c

0800d984 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af04      	add	r7, sp, #16
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	9203      	str	r2, [sp, #12]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	9202      	str	r2, [sp, #8]
 800d9a8:	4a06      	ldr	r2, [pc, #24]	; (800d9c4 <etharp_request_dst+0x40>)
 800d9aa:	9201      	str	r2, [sp, #4]
 800d9ac:	9300      	str	r3, [sp, #0]
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	68f8      	ldr	r0, [r7, #12]
 800d9b4:	f7ff ff5a 	bl	800d86c <etharp_raw>
 800d9b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	08012bfc 	.word	0x08012bfc

0800d9c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d9d2:	4a05      	ldr	r2, [pc, #20]	; (800d9e8 <etharp_request+0x20>)
 800d9d4:	6839      	ldr	r1, [r7, #0]
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f7ff ffd4 	bl	800d984 <etharp_request_dst>
 800d9dc:	4603      	mov	r3, r0
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3708      	adds	r7, #8
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	08012bf4 	.word	0x08012bf4

0800d9ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b08e      	sub	sp, #56	; 0x38
 800d9f0:	af04      	add	r7, sp, #16
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d9f6:	4b79      	ldr	r3, [pc, #484]	; (800dbdc <icmp_input+0x1f0>)
 800d9f8:	689b      	ldr	r3, [r3, #8]
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	f003 030f 	and.w	r3, r3, #15
 800da04:	b2db      	uxtb	r3, r3
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800da0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da0e:	2b13      	cmp	r3, #19
 800da10:	f240 80cd 	bls.w	800dbae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	2b03      	cmp	r3, #3
 800da1a:	f240 80ca 	bls.w	800dbb2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	685b      	ldr	r3, [r3, #4]
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800da28:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f000 80b7 	beq.w	800dba0 <icmp_input+0x1b4>
 800da32:	2b08      	cmp	r3, #8
 800da34:	f040 80b7 	bne.w	800dba6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800da38:	4b69      	ldr	r3, [pc, #420]	; (800dbe0 <icmp_input+0x1f4>)
 800da3a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da3c:	4b67      	ldr	r3, [pc, #412]	; (800dbdc <icmp_input+0x1f0>)
 800da3e:	695b      	ldr	r3, [r3, #20]
 800da40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da44:	2be0      	cmp	r3, #224	; 0xe0
 800da46:	f000 80bb 	beq.w	800dbc0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da4a:	4b64      	ldr	r3, [pc, #400]	; (800dbdc <icmp_input+0x1f0>)
 800da4c:	695b      	ldr	r3, [r3, #20]
 800da4e:	4a63      	ldr	r2, [pc, #396]	; (800dbdc <icmp_input+0x1f0>)
 800da50:	6812      	ldr	r2, [r2, #0]
 800da52:	4611      	mov	r1, r2
 800da54:	4618      	mov	r0, r3
 800da56:	f000 fbed 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f040 80b1 	bne.w	800dbc4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	891b      	ldrh	r3, [r3, #8]
 800da66:	2b07      	cmp	r3, #7
 800da68:	f240 80a5 	bls.w	800dbb6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800da6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da6e:	330e      	adds	r3, #14
 800da70:	4619      	mov	r1, r3
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7f9 f8ea 	bl	8006c4c <pbuf_add_header>
 800da78:	4603      	mov	r3, r0
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d04b      	beq.n	800db16 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	891a      	ldrh	r2, [r3, #8]
 800da82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800da84:	4413      	add	r3, r2
 800da86:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	891b      	ldrh	r3, [r3, #8]
 800da8c:	8b7a      	ldrh	r2, [r7, #26]
 800da8e:	429a      	cmp	r2, r3
 800da90:	f0c0 809a 	bcc.w	800dbc8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800da94:	8b7b      	ldrh	r3, [r7, #26]
 800da96:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da9a:	4619      	mov	r1, r3
 800da9c:	200e      	movs	r0, #14
 800da9e:	f7f8 fe87 	bl	80067b0 <pbuf_alloc>
 800daa2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	f000 8090 	beq.w	800dbcc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800daac:	697b      	ldr	r3, [r7, #20]
 800daae:	895b      	ldrh	r3, [r3, #10]
 800dab0:	461a      	mov	r2, r3
 800dab2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dab4:	3308      	adds	r3, #8
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d203      	bcs.n	800dac2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800daba:	6978      	ldr	r0, [r7, #20]
 800dabc:	f7f9 f95c 	bl	8006d78 <pbuf_free>
          goto icmperr;
 800dac0:	e085      	b.n	800dbce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800dac8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800daca:	4618      	mov	r0, r3
 800dacc:	f001 fce3 	bl	800f496 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800dad0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dad2:	4619      	mov	r1, r3
 800dad4:	6978      	ldr	r0, [r7, #20]
 800dad6:	f7f9 f8c9 	bl	8006c6c <pbuf_remove_header>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d009      	beq.n	800daf4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800dae0:	4b40      	ldr	r3, [pc, #256]	; (800dbe4 <icmp_input+0x1f8>)
 800dae2:	22b6      	movs	r2, #182	; 0xb6
 800dae4:	4940      	ldr	r1, [pc, #256]	; (800dbe8 <icmp_input+0x1fc>)
 800dae6:	4841      	ldr	r0, [pc, #260]	; (800dbec <icmp_input+0x200>)
 800dae8:	f001 fbfa 	bl	800f2e0 <iprintf>
          pbuf_free(r);
 800daec:	6978      	ldr	r0, [r7, #20]
 800daee:	f7f9 f943 	bl	8006d78 <pbuf_free>
          goto icmperr;
 800daf2:	e06c      	b.n	800dbce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	6978      	ldr	r0, [r7, #20]
 800daf8:	f7f9 fa56 	bl	8006fa8 <pbuf_copy>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d003      	beq.n	800db0a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800db02:	6978      	ldr	r0, [r7, #20]
 800db04:	f7f9 f938 	bl	8006d78 <pbuf_free>
          goto icmperr;
 800db08:	e061      	b.n	800dbce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f7f9 f934 	bl	8006d78 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	607b      	str	r3, [r7, #4]
 800db14:	e00f      	b.n	800db36 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db18:	330e      	adds	r3, #14
 800db1a:	4619      	mov	r1, r3
 800db1c:	6878      	ldr	r0, [r7, #4]
 800db1e:	f7f9 f8a5 	bl	8006c6c <pbuf_remove_header>
 800db22:	4603      	mov	r3, r0
 800db24:	2b00      	cmp	r3, #0
 800db26:	d006      	beq.n	800db36 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db28:	4b2e      	ldr	r3, [pc, #184]	; (800dbe4 <icmp_input+0x1f8>)
 800db2a:	22c7      	movs	r2, #199	; 0xc7
 800db2c:	4930      	ldr	r1, [pc, #192]	; (800dbf0 <icmp_input+0x204>)
 800db2e:	482f      	ldr	r0, [pc, #188]	; (800dbec <icmp_input+0x200>)
 800db30:	f001 fbd6 	bl	800f2e0 <iprintf>
          goto icmperr;
 800db34:	e04b      	b.n	800dbce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800db3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800db3e:	4619      	mov	r1, r3
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7f9 f883 	bl	8006c4c <pbuf_add_header>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d12b      	bne.n	800dba4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db5a:	4b20      	ldr	r3, [pc, #128]	; (800dbdc <icmp_input+0x1f0>)
 800db5c:	691a      	ldr	r2, [r3, #16]
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	2200      	movs	r2, #0
 800db66:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2200      	movs	r2, #0
 800db6c:	709a      	strb	r2, [r3, #2]
 800db6e:	2200      	movs	r2, #0
 800db70:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	22ff      	movs	r2, #255	; 0xff
 800db76:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	2200      	movs	r2, #0
 800db7c:	729a      	strb	r2, [r3, #10]
 800db7e:	2200      	movs	r2, #0
 800db80:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	9302      	str	r3, [sp, #8]
 800db86:	2301      	movs	r3, #1
 800db88:	9301      	str	r3, [sp, #4]
 800db8a:	2300      	movs	r3, #0
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	23ff      	movs	r3, #255	; 0xff
 800db90:	2200      	movs	r2, #0
 800db92:	69f9      	ldr	r1, [r7, #28]
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fa75 	bl	800e084 <ip4_output_if>
 800db9a:	4603      	mov	r3, r0
 800db9c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800db9e:	e001      	b.n	800dba4 <icmp_input+0x1b8>
      break;
 800dba0:	bf00      	nop
 800dba2:	e000      	b.n	800dba6 <icmp_input+0x1ba>
      break;
 800dba4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f7f9 f8e6 	bl	8006d78 <pbuf_free>
  return;
 800dbac:	e013      	b.n	800dbd6 <icmp_input+0x1ea>
    goto lenerr;
 800dbae:	bf00      	nop
 800dbb0:	e002      	b.n	800dbb8 <icmp_input+0x1cc>
    goto lenerr;
 800dbb2:	bf00      	nop
 800dbb4:	e000      	b.n	800dbb8 <icmp_input+0x1cc>
        goto lenerr;
 800dbb6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f7f9 f8dd 	bl	8006d78 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbbe:	e00a      	b.n	800dbd6 <icmp_input+0x1ea>
        goto icmperr;
 800dbc0:	bf00      	nop
 800dbc2:	e004      	b.n	800dbce <icmp_input+0x1e2>
        goto icmperr;
 800dbc4:	bf00      	nop
 800dbc6:	e002      	b.n	800dbce <icmp_input+0x1e2>
          goto icmperr;
 800dbc8:	bf00      	nop
 800dbca:	e000      	b.n	800dbce <icmp_input+0x1e2>
          goto icmperr;
 800dbcc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7f9 f8d2 	bl	8006d78 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800dbd4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800dbd6:	3728      	adds	r7, #40	; 0x28
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	20005260 	.word	0x20005260
 800dbe0:	20005274 	.word	0x20005274
 800dbe4:	080126b0 	.word	0x080126b0
 800dbe8:	080126e8 	.word	0x080126e8
 800dbec:	08012720 	.word	0x08012720
 800dbf0:	08012748 	.word	0x08012748

0800dbf4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800dc00:	78fb      	ldrb	r3, [r7, #3]
 800dc02:	461a      	mov	r2, r3
 800dc04:	2103      	movs	r1, #3
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 f814 	bl	800dc34 <icmp_send_response>
}
 800dc0c:	bf00      	nop
 800dc0e:	3708      	adds	r7, #8
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
 800dc1c:	460b      	mov	r3, r1
 800dc1e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800dc20:	78fb      	ldrb	r3, [r7, #3]
 800dc22:	461a      	mov	r2, r3
 800dc24:	210b      	movs	r1, #11
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f804 	bl	800dc34 <icmp_send_response>
}
 800dc2c:	bf00      	nop
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b08c      	sub	sp, #48	; 0x30
 800dc38:	af04      	add	r7, sp, #16
 800dc3a:	6078      	str	r0, [r7, #4]
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	70fb      	strb	r3, [r7, #3]
 800dc40:	4613      	mov	r3, r2
 800dc42:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800dc44:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dc48:	2124      	movs	r1, #36	; 0x24
 800dc4a:	2022      	movs	r0, #34	; 0x22
 800dc4c:	f7f8 fdb0 	bl	80067b0 <pbuf_alloc>
 800dc50:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d04c      	beq.n	800dcf2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	895b      	ldrh	r3, [r3, #10]
 800dc5c:	2b23      	cmp	r3, #35	; 0x23
 800dc5e:	d806      	bhi.n	800dc6e <icmp_send_response+0x3a>
 800dc60:	4b26      	ldr	r3, [pc, #152]	; (800dcfc <icmp_send_response+0xc8>)
 800dc62:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800dc66:	4926      	ldr	r1, [pc, #152]	; (800dd00 <icmp_send_response+0xcc>)
 800dc68:	4826      	ldr	r0, [pc, #152]	; (800dd04 <icmp_send_response+0xd0>)
 800dc6a:	f001 fb39 	bl	800f2e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	685b      	ldr	r3, [r3, #4]
 800dc72:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	685b      	ldr	r3, [r3, #4]
 800dc78:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	78fa      	ldrb	r2, [r7, #3]
 800dc7e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	78ba      	ldrb	r2, [r7, #2]
 800dc84:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	711a      	strb	r2, [r3, #4]
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	2200      	movs	r2, #0
 800dc94:	719a      	strb	r2, [r3, #6]
 800dc96:	2200      	movs	r2, #0
 800dc98:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	f103 0008 	add.w	r0, r3, #8
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	221c      	movs	r2, #28
 800dca8:	4619      	mov	r1, r3
 800dcaa:	f001 fbf4 	bl	800f496 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	68db      	ldr	r3, [r3, #12]
 800dcb2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dcb4:	f107 030c 	add.w	r3, r7, #12
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f000 f825 	bl	800dd08 <ip4_route>
 800dcbe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d011      	beq.n	800dcea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	709a      	strb	r2, [r3, #2]
 800dccc:	2200      	movs	r2, #0
 800dcce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800dcd0:	f107 020c 	add.w	r2, r7, #12
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	9302      	str	r3, [sp, #8]
 800dcd8:	2301      	movs	r3, #1
 800dcda:	9301      	str	r3, [sp, #4]
 800dcdc:	2300      	movs	r3, #0
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	23ff      	movs	r3, #255	; 0xff
 800dce2:	2100      	movs	r1, #0
 800dce4:	69f8      	ldr	r0, [r7, #28]
 800dce6:	f000 f9cd 	bl	800e084 <ip4_output_if>
  }
  pbuf_free(q);
 800dcea:	69f8      	ldr	r0, [r7, #28]
 800dcec:	f7f9 f844 	bl	8006d78 <pbuf_free>
 800dcf0:	e000      	b.n	800dcf4 <icmp_send_response+0xc0>
    return;
 800dcf2:	bf00      	nop
}
 800dcf4:	3720      	adds	r7, #32
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	bd80      	pop	{r7, pc}
 800dcfa:	bf00      	nop
 800dcfc:	080126b0 	.word	0x080126b0
 800dd00:	0801277c 	.word	0x0801277c
 800dd04:	08012720 	.word	0x08012720

0800dd08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800dd10:	4b33      	ldr	r3, [pc, #204]	; (800dde0 <ip4_route+0xd8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	e036      	b.n	800dd86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd1e:	f003 0301 	and.w	r3, r3, #1
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d02b      	beq.n	800dd80 <ip4_route+0x78>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd2e:	089b      	lsrs	r3, r3, #2
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d022      	beq.n	800dd80 <ip4_route+0x78>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d01d      	beq.n	800dd80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681a      	ldr	r2, [r3, #0]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	3304      	adds	r3, #4
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	405a      	eors	r2, r3
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	3308      	adds	r3, #8
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4013      	ands	r3, r2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d101      	bne.n	800dd60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	e038      	b.n	800ddd2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd66:	f003 0302 	and.w	r3, r3, #2
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d108      	bne.n	800dd80 <ip4_route+0x78>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	330c      	adds	r3, #12
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d101      	bne.n	800dd80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	e028      	b.n	800ddd2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	60fb      	str	r3, [r7, #12]
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d1c5      	bne.n	800dd18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dd8c:	4b15      	ldr	r3, [pc, #84]	; (800dde4 <ip4_route+0xdc>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d01a      	beq.n	800ddca <ip4_route+0xc2>
 800dd94:	4b13      	ldr	r3, [pc, #76]	; (800dde4 <ip4_route+0xdc>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd9c:	f003 0301 	and.w	r3, r3, #1
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d012      	beq.n	800ddca <ip4_route+0xc2>
 800dda4:	4b0f      	ldr	r3, [pc, #60]	; (800dde4 <ip4_route+0xdc>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddac:	f003 0304 	and.w	r3, r3, #4
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d00a      	beq.n	800ddca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <ip4_route+0xdc>)
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	3304      	adds	r3, #4
 800ddba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d004      	beq.n	800ddca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc8:	d101      	bne.n	800ddce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	e001      	b.n	800ddd2 <ip4_route+0xca>
  }

  return netif_default;
 800ddce:	4b05      	ldr	r3, [pc, #20]	; (800dde4 <ip4_route+0xdc>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3714      	adds	r7, #20
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	200087c4 	.word	0x200087c4
 800dde4:	200087c8 	.word	0x200087c8

0800dde8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddf6:	f003 0301 	and.w	r3, r3, #1
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d016      	beq.n	800de2e <ip4_input_accept+0x46>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	3304      	adds	r3, #4
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d011      	beq.n	800de2e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de0a:	4b0b      	ldr	r3, [pc, #44]	; (800de38 <ip4_input_accept+0x50>)
 800de0c:	695a      	ldr	r2, [r3, #20]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	3304      	adds	r3, #4
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	429a      	cmp	r2, r3
 800de16:	d008      	beq.n	800de2a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800de18:	4b07      	ldr	r3, [pc, #28]	; (800de38 <ip4_input_accept+0x50>)
 800de1a:	695b      	ldr	r3, [r3, #20]
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 fa08 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800de24:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e000      	b.n	800de30 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800de2e:	2300      	movs	r3, #0
}
 800de30:	4618      	mov	r0, r3
 800de32:	3708      	adds	r7, #8
 800de34:	46bd      	mov	sp, r7
 800de36:	bd80      	pop	{r7, pc}
 800de38:	20005260 	.word	0x20005260

0800de3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b086      	sub	sp, #24
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	091b      	lsrs	r3, r3, #4
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b04      	cmp	r3, #4
 800de56:	d004      	beq.n	800de62 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f7f8 ff8d 	bl	8006d78 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800de5e:	2300      	movs	r3, #0
 800de60:	e107      	b.n	800e072 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	f003 030f 	and.w	r3, r3, #15
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	885b      	ldrh	r3, [r3, #2]
 800de76:	b29b      	uxth	r3, r3
 800de78:	4618      	mov	r0, r3
 800de7a:	f7f7 fc1f 	bl	80056bc <lwip_htons>
 800de7e:	4603      	mov	r3, r0
 800de80:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	891b      	ldrh	r3, [r3, #8]
 800de86:	89ba      	ldrh	r2, [r7, #12]
 800de88:	429a      	cmp	r2, r3
 800de8a:	d204      	bcs.n	800de96 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800de8c:	89bb      	ldrh	r3, [r7, #12]
 800de8e:	4619      	mov	r1, r3
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f7f8 fdeb 	bl	8006a6c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	895b      	ldrh	r3, [r3, #10]
 800de9a:	89fa      	ldrh	r2, [r7, #14]
 800de9c:	429a      	cmp	r2, r3
 800de9e:	d807      	bhi.n	800deb0 <ip4_input+0x74>
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	891b      	ldrh	r3, [r3, #8]
 800dea4:	89ba      	ldrh	r2, [r7, #12]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d802      	bhi.n	800deb0 <ip4_input+0x74>
 800deaa:	89fb      	ldrh	r3, [r7, #14]
 800deac:	2b13      	cmp	r3, #19
 800deae:	d804      	bhi.n	800deba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800deb0:	6878      	ldr	r0, [r7, #4]
 800deb2:	f7f8 ff61 	bl	8006d78 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e0db      	b.n	800e072 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	4a6f      	ldr	r2, [pc, #444]	; (800e07c <ip4_input+0x240>)
 800dec0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	68db      	ldr	r3, [r3, #12]
 800dec6:	4a6d      	ldr	r2, [pc, #436]	; (800e07c <ip4_input+0x240>)
 800dec8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800deca:	4b6c      	ldr	r3, [pc, #432]	; (800e07c <ip4_input+0x240>)
 800decc:	695b      	ldr	r3, [r3, #20]
 800dece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ded2:	2be0      	cmp	r3, #224	; 0xe0
 800ded4:	d112      	bne.n	800defc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dedc:	f003 0301 	and.w	r3, r3, #1
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d007      	beq.n	800def6 <ip4_input+0xba>
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	3304      	adds	r3, #4
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d002      	beq.n	800def6 <ip4_input+0xba>
      netif = inp;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	613b      	str	r3, [r7, #16]
 800def4:	e02a      	b.n	800df4c <ip4_input+0x110>
    } else {
      netif = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	613b      	str	r3, [r7, #16]
 800defa:	e027      	b.n	800df4c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800defc:	6838      	ldr	r0, [r7, #0]
 800defe:	f7ff ff73 	bl	800dde8 <ip4_input_accept>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d002      	beq.n	800df0e <ip4_input+0xd2>
      netif = inp;
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	613b      	str	r3, [r7, #16]
 800df0c:	e01e      	b.n	800df4c <ip4_input+0x110>
    } else {
      netif = NULL;
 800df0e:	2300      	movs	r3, #0
 800df10:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800df12:	4b5a      	ldr	r3, [pc, #360]	; (800e07c <ip4_input+0x240>)
 800df14:	695b      	ldr	r3, [r3, #20]
 800df16:	b2db      	uxtb	r3, r3
 800df18:	2b7f      	cmp	r3, #127	; 0x7f
 800df1a:	d017      	beq.n	800df4c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800df1c:	4b58      	ldr	r3, [pc, #352]	; (800e080 <ip4_input+0x244>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	613b      	str	r3, [r7, #16]
 800df22:	e00e      	b.n	800df42 <ip4_input+0x106>
          if (netif == inp) {
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d006      	beq.n	800df3a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800df2c:	6938      	ldr	r0, [r7, #16]
 800df2e:	f7ff ff5b 	bl	800dde8 <ip4_input_accept>
 800df32:	4603      	mov	r3, r0
 800df34:	2b00      	cmp	r3, #0
 800df36:	d108      	bne.n	800df4a <ip4_input+0x10e>
 800df38:	e000      	b.n	800df3c <ip4_input+0x100>
            continue;
 800df3a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	613b      	str	r3, [r7, #16]
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d1ed      	bne.n	800df24 <ip4_input+0xe8>
 800df48:	e000      	b.n	800df4c <ip4_input+0x110>
            break;
 800df4a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df4c:	4b4b      	ldr	r3, [pc, #300]	; (800e07c <ip4_input+0x240>)
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	6839      	ldr	r1, [r7, #0]
 800df52:	4618      	mov	r0, r3
 800df54:	f000 f96e 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d105      	bne.n	800df6a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800df5e:	4b47      	ldr	r3, [pc, #284]	; (800e07c <ip4_input+0x240>)
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800df66:	2be0      	cmp	r3, #224	; 0xe0
 800df68:	d104      	bne.n	800df74 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f7f8 ff04 	bl	8006d78 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800df70:	2300      	movs	r3, #0
 800df72:	e07e      	b.n	800e072 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d104      	bne.n	800df84 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7f8 fefc 	bl	8006d78 <pbuf_free>
    return ERR_OK;
 800df80:	2300      	movs	r3, #0
 800df82:	e076      	b.n	800e072 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	88db      	ldrh	r3, [r3, #6]
 800df88:	b29b      	uxth	r3, r3
 800df8a:	461a      	mov	r2, r3
 800df8c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800df90:	4013      	ands	r3, r2
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00b      	beq.n	800dfae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fc92 	bl	800e8c0 <ip4_reass>
 800df9c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d101      	bne.n	800dfa8 <ip4_input+0x16c>
      return ERR_OK;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	e064      	b.n	800e072 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800dfae:	4a33      	ldr	r2, [pc, #204]	; (800e07c <ip4_input+0x240>)
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800dfb4:	4a31      	ldr	r2, [pc, #196]	; (800e07c <ip4_input+0x240>)
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dfba:	4a30      	ldr	r2, [pc, #192]	; (800e07c <ip4_input+0x240>)
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	f003 030f 	and.w	r3, r3, #15
 800dfc8:	b2db      	uxtb	r3, r3
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	b2db      	uxtb	r3, r3
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	4b2a      	ldr	r3, [pc, #168]	; (800e07c <ip4_input+0x240>)
 800dfd2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dfd4:	89fb      	ldrh	r3, [r7, #14]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7f8 fe47 	bl	8006c6c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	7a5b      	ldrb	r3, [r3, #9]
 800dfe2:	2b11      	cmp	r3, #17
 800dfe4:	d006      	beq.n	800dff4 <ip4_input+0x1b8>
 800dfe6:	2b11      	cmp	r3, #17
 800dfe8:	dc13      	bgt.n	800e012 <ip4_input+0x1d6>
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d00c      	beq.n	800e008 <ip4_input+0x1cc>
 800dfee:	2b06      	cmp	r3, #6
 800dff0:	d005      	beq.n	800dffe <ip4_input+0x1c2>
 800dff2:	e00e      	b.n	800e012 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800dff4:	6839      	ldr	r1, [r7, #0]
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7fe fc68 	bl	800c8cc <udp_input>
        break;
 800dffc:	e026      	b.n	800e04c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800dffe:	6839      	ldr	r1, [r7, #0]
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f7fa fce1 	bl	80089c8 <tcp_input>
        break;
 800e006:	e021      	b.n	800e04c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e008:	6839      	ldr	r1, [r7, #0]
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f7ff fcee 	bl	800d9ec <icmp_input>
        break;
 800e010:	e01c      	b.n	800e04c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e012:	4b1a      	ldr	r3, [pc, #104]	; (800e07c <ip4_input+0x240>)
 800e014:	695b      	ldr	r3, [r3, #20]
 800e016:	6939      	ldr	r1, [r7, #16]
 800e018:	4618      	mov	r0, r3
 800e01a:	f000 f90b 	bl	800e234 <ip4_addr_isbroadcast_u32>
 800e01e:	4603      	mov	r3, r0
 800e020:	2b00      	cmp	r3, #0
 800e022:	d10f      	bne.n	800e044 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e024:	4b15      	ldr	r3, [pc, #84]	; (800e07c <ip4_input+0x240>)
 800e026:	695b      	ldr	r3, [r3, #20]
 800e028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e02c:	2be0      	cmp	r3, #224	; 0xe0
 800e02e:	d009      	beq.n	800e044 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e030:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e034:	4619      	mov	r1, r3
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f7f8 fe8b 	bl	8006d52 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e03c:	2102      	movs	r1, #2
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff fdd8 	bl	800dbf4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7f8 fe97 	bl	8006d78 <pbuf_free>
        break;
 800e04a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e04c:	4b0b      	ldr	r3, [pc, #44]	; (800e07c <ip4_input+0x240>)
 800e04e:	2200      	movs	r2, #0
 800e050:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e052:	4b0a      	ldr	r3, [pc, #40]	; (800e07c <ip4_input+0x240>)
 800e054:	2200      	movs	r2, #0
 800e056:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e058:	4b08      	ldr	r3, [pc, #32]	; (800e07c <ip4_input+0x240>)
 800e05a:	2200      	movs	r2, #0
 800e05c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e05e:	4b07      	ldr	r3, [pc, #28]	; (800e07c <ip4_input+0x240>)
 800e060:	2200      	movs	r2, #0
 800e062:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e064:	4b05      	ldr	r3, [pc, #20]	; (800e07c <ip4_input+0x240>)
 800e066:	2200      	movs	r2, #0
 800e068:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e06a:	4b04      	ldr	r3, [pc, #16]	; (800e07c <ip4_input+0x240>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3718      	adds	r7, #24
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	20005260 	.word	0x20005260
 800e080:	200087c4 	.word	0x200087c4

0800e084 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b08a      	sub	sp, #40	; 0x28
 800e088:	af04      	add	r7, sp, #16
 800e08a:	60f8      	str	r0, [r7, #12]
 800e08c:	60b9      	str	r1, [r7, #8]
 800e08e:	607a      	str	r2, [r7, #4]
 800e090:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d009      	beq.n	800e0b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e09c:	68bb      	ldr	r3, [r7, #8]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d003      	beq.n	800e0aa <ip4_output_if+0x26>
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d102      	bne.n	800e0b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e0aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ac:	3304      	adds	r3, #4
 800e0ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e0b0:	78fa      	ldrb	r2, [r7, #3]
 800e0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b4:	9302      	str	r3, [sp, #8]
 800e0b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e0ba:	9301      	str	r3, [sp, #4]
 800e0bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	6979      	ldr	r1, [r7, #20]
 800e0c8:	68f8      	ldr	r0, [r7, #12]
 800e0ca:	f000 f805 	bl	800e0d8 <ip4_output_if_src>
 800e0ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3718      	adds	r7, #24
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}

0800e0d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b088      	sub	sp, #32
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
 800e0e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	7b9b      	ldrb	r3, [r3, #14]
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d006      	beq.n	800e0fc <ip4_output_if_src+0x24>
 800e0ee:	4b4b      	ldr	r3, [pc, #300]	; (800e21c <ip4_output_if_src+0x144>)
 800e0f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e0f4:	494a      	ldr	r1, [pc, #296]	; (800e220 <ip4_output_if_src+0x148>)
 800e0f6:	484b      	ldr	r0, [pc, #300]	; (800e224 <ip4_output_if_src+0x14c>)
 800e0f8:	f001 f8f2 	bl	800f2e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d060      	beq.n	800e1c4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e102:	2314      	movs	r3, #20
 800e104:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e106:	2114      	movs	r1, #20
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	f7f8 fd9f 	bl	8006c4c <pbuf_add_header>
 800e10e:	4603      	mov	r3, r0
 800e110:	2b00      	cmp	r3, #0
 800e112:	d002      	beq.n	800e11a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e114:	f06f 0301 	mvn.w	r3, #1
 800e118:	e07c      	b.n	800e214 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	895b      	ldrh	r3, [r3, #10]
 800e124:	2b13      	cmp	r3, #19
 800e126:	d806      	bhi.n	800e136 <ip4_output_if_src+0x5e>
 800e128:	4b3c      	ldr	r3, [pc, #240]	; (800e21c <ip4_output_if_src+0x144>)
 800e12a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800e12e:	493e      	ldr	r1, [pc, #248]	; (800e228 <ip4_output_if_src+0x150>)
 800e130:	483c      	ldr	r0, [pc, #240]	; (800e224 <ip4_output_if_src+0x14c>)
 800e132:	f001 f8d5 	bl	800f2e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	78fa      	ldrb	r2, [r7, #3]
 800e13a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e142:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681a      	ldr	r2, [r3, #0]
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800e14c:	8b7b      	ldrh	r3, [r7, #26]
 800e14e:	089b      	lsrs	r3, r3, #2
 800e150:	b29b      	uxth	r3, r3
 800e152:	b2db      	uxtb	r3, r3
 800e154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e158:	b2da      	uxtb	r2, r3
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800e15e:	69fb      	ldr	r3, [r7, #28]
 800e160:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e164:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	891b      	ldrh	r3, [r3, #8]
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7f7 faa6 	bl	80056bc <lwip_htons>
 800e170:	4603      	mov	r3, r0
 800e172:	461a      	mov	r2, r3
 800e174:	69fb      	ldr	r3, [r7, #28]
 800e176:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	2200      	movs	r2, #0
 800e17c:	719a      	strb	r2, [r3, #6]
 800e17e:	2200      	movs	r2, #0
 800e180:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800e182:	4b2a      	ldr	r3, [pc, #168]	; (800e22c <ip4_output_if_src+0x154>)
 800e184:	881b      	ldrh	r3, [r3, #0]
 800e186:	4618      	mov	r0, r3
 800e188:	f7f7 fa98 	bl	80056bc <lwip_htons>
 800e18c:	4603      	mov	r3, r0
 800e18e:	461a      	mov	r2, r3
 800e190:	69fb      	ldr	r3, [r7, #28]
 800e192:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800e194:	4b25      	ldr	r3, [pc, #148]	; (800e22c <ip4_output_if_src+0x154>)
 800e196:	881b      	ldrh	r3, [r3, #0]
 800e198:	3301      	adds	r3, #1
 800e19a:	b29a      	uxth	r2, r3
 800e19c:	4b23      	ldr	r3, [pc, #140]	; (800e22c <ip4_output_if_src+0x154>)
 800e19e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d104      	bne.n	800e1b0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800e1a6:	4b22      	ldr	r3, [pc, #136]	; (800e230 <ip4_output_if_src+0x158>)
 800e1a8:	681a      	ldr	r2, [r3, #0]
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	60da      	str	r2, [r3, #12]
 800e1ae:	e003      	b.n	800e1b8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	681a      	ldr	r2, [r3, #0]
 800e1b4:	69fb      	ldr	r3, [r7, #28]
 800e1b6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800e1b8:	69fb      	ldr	r3, [r7, #28]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	729a      	strb	r2, [r3, #10]
 800e1be:	2200      	movs	r2, #0
 800e1c0:	72da      	strb	r2, [r3, #11]
 800e1c2:	e00f      	b.n	800e1e4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	895b      	ldrh	r3, [r3, #10]
 800e1c8:	2b13      	cmp	r3, #19
 800e1ca:	d802      	bhi.n	800e1d2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800e1cc:	f06f 0301 	mvn.w	r3, #1
 800e1d0:	e020      	b.n	800e214 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	691b      	ldr	r3, [r3, #16]
 800e1dc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800e1de:	f107 0314 	add.w	r3, r7, #20
 800e1e2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00c      	beq.n	800e206 <ip4_output_if_src+0x12e>
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	891a      	ldrh	r2, [r3, #8]
 800e1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d906      	bls.n	800e206 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f000 fd53 	bl	800eca8 <ip4_frag>
 800e202:	4603      	mov	r3, r0
 800e204:	e006      	b.n	800e214 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	68f9      	ldr	r1, [r7, #12]
 800e20e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e210:	4798      	blx	r3
 800e212:	4603      	mov	r3, r0
}
 800e214:	4618      	mov	r0, r3
 800e216:	3720      	adds	r7, #32
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}
 800e21c:	080127a8 	.word	0x080127a8
 800e220:	080127dc 	.word	0x080127dc
 800e224:	080127e8 	.word	0x080127e8
 800e228:	08012810 	.word	0x08012810
 800e22c:	20008922 	.word	0x20008922
 800e230:	08012bf0 	.word	0x08012bf0

0800e234 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e248:	d002      	beq.n	800e250 <ip4_addr_isbroadcast_u32+0x1c>
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d101      	bne.n	800e254 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e250:	2301      	movs	r3, #1
 800e252:	e02a      	b.n	800e2aa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e25a:	f003 0302 	and.w	r3, r3, #2
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d101      	bne.n	800e266 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e262:	2300      	movs	r3, #0
 800e264:	e021      	b.n	800e2aa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	3304      	adds	r3, #4
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d101      	bne.n	800e276 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e272:	2300      	movs	r3, #0
 800e274:	e019      	b.n	800e2aa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	3304      	adds	r3, #4
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	405a      	eors	r2, r3
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	3308      	adds	r3, #8
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	4013      	ands	r3, r2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10d      	bne.n	800e2a8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	3308      	adds	r3, #8
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	43da      	mvns	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	3308      	adds	r3, #8
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d101      	bne.n	800e2a8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	e000      	b.n	800e2aa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e2a8:	2300      	movs	r3, #0
  }
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3714      	adds	r7, #20
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr
	...

0800e2b8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e2c2:	4b12      	ldr	r3, [pc, #72]	; (800e30c <ip_reass_tmr+0x54>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e2c8:	e018      	b.n	800e2fc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	7fdb      	ldrb	r3, [r3, #31]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d00b      	beq.n	800e2ea <ip_reass_tmr+0x32>
      r->timer--;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	7fdb      	ldrb	r3, [r3, #31]
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	e008      	b.n	800e2fc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e2f4:	68b9      	ldr	r1, [r7, #8]
 800e2f6:	6878      	ldr	r0, [r7, #4]
 800e2f8:	f000 f80a 	bl	800e310 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e3      	bne.n	800e2ca <ip_reass_tmr+0x12>
    }
  }
}
 800e302:	bf00      	nop
 800e304:	bf00      	nop
 800e306:	3710      	adds	r7, #16
 800e308:	46bd      	mov	sp, r7
 800e30a:	bd80      	pop	{r7, pc}
 800e30c:	20008924 	.word	0x20008924

0800e310 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b088      	sub	sp, #32
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e31e:	683a      	ldr	r2, [r7, #0]
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	429a      	cmp	r2, r3
 800e324:	d105      	bne.n	800e332 <ip_reass_free_complete_datagram+0x22>
 800e326:	4b45      	ldr	r3, [pc, #276]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e328:	22ab      	movs	r2, #171	; 0xab
 800e32a:	4945      	ldr	r1, [pc, #276]	; (800e440 <ip_reass_free_complete_datagram+0x130>)
 800e32c:	4845      	ldr	r0, [pc, #276]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e32e:	f000 ffd7 	bl	800f2e0 <iprintf>
  if (prev != NULL) {
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d00a      	beq.n	800e34e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d005      	beq.n	800e34e <ip_reass_free_complete_datagram+0x3e>
 800e342:	4b3e      	ldr	r3, [pc, #248]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e344:	22ad      	movs	r2, #173	; 0xad
 800e346:	4940      	ldr	r1, [pc, #256]	; (800e448 <ip_reass_free_complete_datagram+0x138>)
 800e348:	483e      	ldr	r0, [pc, #248]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e34a:	f000 ffc9 	bl	800f2e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	685b      	ldr	r3, [r3, #4]
 800e352:	685b      	ldr	r3, [r3, #4]
 800e354:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	889b      	ldrh	r3, [r3, #4]
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d12a      	bne.n	800e3b6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	685b      	ldr	r3, [r3, #4]
 800e364:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	6858      	ldr	r0, [r3, #4]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3308      	adds	r3, #8
 800e376:	2214      	movs	r2, #20
 800e378:	4619      	mov	r1, r3
 800e37a:	f001 f88c 	bl	800f496 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e37e:	2101      	movs	r1, #1
 800e380:	69b8      	ldr	r0, [r7, #24]
 800e382:	f7ff fc47 	bl	800dc14 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e386:	69b8      	ldr	r0, [r7, #24]
 800e388:	f7f8 fd7e 	bl	8006e88 <pbuf_clen>
 800e38c:	4603      	mov	r3, r0
 800e38e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e390:	8bfa      	ldrh	r2, [r7, #30]
 800e392:	8a7b      	ldrh	r3, [r7, #18]
 800e394:	4413      	add	r3, r2
 800e396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e39a:	db05      	blt.n	800e3a8 <ip_reass_free_complete_datagram+0x98>
 800e39c:	4b27      	ldr	r3, [pc, #156]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e39e:	22bc      	movs	r2, #188	; 0xbc
 800e3a0:	492a      	ldr	r1, [pc, #168]	; (800e44c <ip_reass_free_complete_datagram+0x13c>)
 800e3a2:	4828      	ldr	r0, [pc, #160]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e3a4:	f000 ff9c 	bl	800f2e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3a8:	8bfa      	ldrh	r2, [r7, #30]
 800e3aa:	8a7b      	ldrh	r3, [r7, #18]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e3b0:	69b8      	ldr	r0, [r7, #24]
 800e3b2:	f7f8 fce1 	bl	8006d78 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e3bc:	e01f      	b.n	800e3fe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e3be:	69bb      	ldr	r3, [r7, #24]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e3c4:	69bb      	ldr	r3, [r7, #24]
 800e3c6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7f8 fd5a 	bl	8006e88 <pbuf_clen>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e3d8:	8bfa      	ldrh	r2, [r7, #30]
 800e3da:	8a7b      	ldrh	r3, [r7, #18]
 800e3dc:	4413      	add	r3, r2
 800e3de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3e2:	db05      	blt.n	800e3f0 <ip_reass_free_complete_datagram+0xe0>
 800e3e4:	4b15      	ldr	r3, [pc, #84]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e3e6:	22cc      	movs	r2, #204	; 0xcc
 800e3e8:	4918      	ldr	r1, [pc, #96]	; (800e44c <ip_reass_free_complete_datagram+0x13c>)
 800e3ea:	4816      	ldr	r0, [pc, #88]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e3ec:	f000 ff78 	bl	800f2e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e3f0:	8bfa      	ldrh	r2, [r7, #30]
 800e3f2:	8a7b      	ldrh	r3, [r7, #18]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f7f8 fcbd 	bl	8006d78 <pbuf_free>
  while (p != NULL) {
 800e3fe:	69bb      	ldr	r3, [r7, #24]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d1dc      	bne.n	800e3be <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e404:	6839      	ldr	r1, [r7, #0]
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f8c2 	bl	800e590 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e40c:	4b10      	ldr	r3, [pc, #64]	; (800e450 <ip_reass_free_complete_datagram+0x140>)
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	8bfa      	ldrh	r2, [r7, #30]
 800e412:	429a      	cmp	r2, r3
 800e414:	d905      	bls.n	800e422 <ip_reass_free_complete_datagram+0x112>
 800e416:	4b09      	ldr	r3, [pc, #36]	; (800e43c <ip_reass_free_complete_datagram+0x12c>)
 800e418:	22d2      	movs	r2, #210	; 0xd2
 800e41a:	490e      	ldr	r1, [pc, #56]	; (800e454 <ip_reass_free_complete_datagram+0x144>)
 800e41c:	4809      	ldr	r0, [pc, #36]	; (800e444 <ip_reass_free_complete_datagram+0x134>)
 800e41e:	f000 ff5f 	bl	800f2e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e422:	4b0b      	ldr	r3, [pc, #44]	; (800e450 <ip_reass_free_complete_datagram+0x140>)
 800e424:	881a      	ldrh	r2, [r3, #0]
 800e426:	8bfb      	ldrh	r3, [r7, #30]
 800e428:	1ad3      	subs	r3, r2, r3
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	4b08      	ldr	r3, [pc, #32]	; (800e450 <ip_reass_free_complete_datagram+0x140>)
 800e42e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e430:	8bfb      	ldrh	r3, [r7, #30]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3720      	adds	r7, #32
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	08012840 	.word	0x08012840
 800e440:	0801287c 	.word	0x0801287c
 800e444:	08012888 	.word	0x08012888
 800e448:	080128b0 	.word	0x080128b0
 800e44c:	080128c4 	.word	0x080128c4
 800e450:	20008928 	.word	0x20008928
 800e454:	080128e4 	.word	0x080128e4

0800e458 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b08a      	sub	sp, #40	; 0x28
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e466:	2300      	movs	r3, #0
 800e468:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e46a:	2300      	movs	r3, #0
 800e46c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e46e:	2300      	movs	r3, #0
 800e470:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e472:	2300      	movs	r3, #0
 800e474:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e476:	4b28      	ldr	r3, [pc, #160]	; (800e518 <ip_reass_remove_oldest_datagram+0xc0>)
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e47c:	e030      	b.n	800e4e0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e480:	695a      	ldr	r2, [r3, #20]
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	68db      	ldr	r3, [r3, #12]
 800e486:	429a      	cmp	r2, r3
 800e488:	d10c      	bne.n	800e4a4 <ip_reass_remove_oldest_datagram+0x4c>
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	699a      	ldr	r2, [r3, #24]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	691b      	ldr	r3, [r3, #16]
 800e492:	429a      	cmp	r2, r3
 800e494:	d106      	bne.n	800e4a4 <ip_reass_remove_oldest_datagram+0x4c>
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	899a      	ldrh	r2, [r3, #12]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	889b      	ldrh	r3, [r3, #4]
 800e49e:	b29b      	uxth	r3, r3
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d014      	beq.n	800e4ce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e4a4:	693b      	ldr	r3, [r7, #16]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d104      	bne.n	800e4ba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	61bb      	str	r3, [r7, #24]
 800e4b8:	e009      	b.n	800e4ce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4bc:	7fda      	ldrb	r2, [r3, #31]
 800e4be:	6a3b      	ldr	r3, [r7, #32]
 800e4c0:	7fdb      	ldrb	r3, [r3, #31]
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d803      	bhi.n	800e4ce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d001      	beq.n	800e4da <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d1cb      	bne.n	800e47e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e4e6:	6a3b      	ldr	r3, [r7, #32]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d008      	beq.n	800e4fe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e4ec:	69b9      	ldr	r1, [r7, #24]
 800e4ee:	6a38      	ldr	r0, [r7, #32]
 800e4f0:	f7ff ff0e 	bl	800e310 <ip_reass_free_complete_datagram>
 800e4f4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e4f6:	697a      	ldr	r2, [r7, #20]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	4413      	add	r3, r2
 800e4fc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	429a      	cmp	r2, r3
 800e504:	da02      	bge.n	800e50c <ip_reass_remove_oldest_datagram+0xb4>
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	dcac      	bgt.n	800e466 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e50c:	697b      	ldr	r3, [r7, #20]
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3728      	adds	r7, #40	; 0x28
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}
 800e516:	bf00      	nop
 800e518:	20008924 	.word	0x20008924

0800e51c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e526:	2004      	movs	r0, #4
 800e528:	f7f7 fd40 	bl	8005fac <memp_malloc>
 800e52c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d110      	bne.n	800e556 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e534:	6839      	ldr	r1, [r7, #0]
 800e536:	6878      	ldr	r0, [r7, #4]
 800e538:	f7ff ff8e 	bl	800e458 <ip_reass_remove_oldest_datagram>
 800e53c:	4602      	mov	r2, r0
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	4293      	cmp	r3, r2
 800e542:	dc03      	bgt.n	800e54c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e544:	2004      	movs	r0, #4
 800e546:	f7f7 fd31 	bl	8005fac <memp_malloc>
 800e54a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e552:	2300      	movs	r3, #0
 800e554:	e016      	b.n	800e584 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e556:	2220      	movs	r2, #32
 800e558:	2100      	movs	r1, #0
 800e55a:	68f8      	ldr	r0, [r7, #12]
 800e55c:	f000 ff25 	bl	800f3aa <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	220f      	movs	r2, #15
 800e564:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e566:	4b09      	ldr	r3, [pc, #36]	; (800e58c <ip_reass_enqueue_new_datagram+0x70>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e56e:	4a07      	ldr	r2, [pc, #28]	; (800e58c <ip_reass_enqueue_new_datagram+0x70>)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	3308      	adds	r3, #8
 800e578:	2214      	movs	r2, #20
 800e57a:	6879      	ldr	r1, [r7, #4]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 ff8a 	bl	800f496 <memcpy>
  return ipr;
 800e582:	68fb      	ldr	r3, [r7, #12]
}
 800e584:	4618      	mov	r0, r3
 800e586:	3710      	adds	r7, #16
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20008924 	.word	0x20008924

0800e590 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e59a:	4b10      	ldr	r3, [pc, #64]	; (800e5dc <ip_reass_dequeue_datagram+0x4c>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d104      	bne.n	800e5ae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a0c      	ldr	r2, [pc, #48]	; (800e5dc <ip_reass_dequeue_datagram+0x4c>)
 800e5aa:	6013      	str	r3, [r2, #0]
 800e5ac:	e00d      	b.n	800e5ca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d106      	bne.n	800e5c2 <ip_reass_dequeue_datagram+0x32>
 800e5b4:	4b0a      	ldr	r3, [pc, #40]	; (800e5e0 <ip_reass_dequeue_datagram+0x50>)
 800e5b6:	f240 1245 	movw	r2, #325	; 0x145
 800e5ba:	490a      	ldr	r1, [pc, #40]	; (800e5e4 <ip_reass_dequeue_datagram+0x54>)
 800e5bc:	480a      	ldr	r0, [pc, #40]	; (800e5e8 <ip_reass_dequeue_datagram+0x58>)
 800e5be:	f000 fe8f 	bl	800f2e0 <iprintf>
    prev->next = ipr->next;
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	2004      	movs	r0, #4
 800e5ce:	f7f7 fd5d 	bl	800608c <memp_free>
}
 800e5d2:	bf00      	nop
 800e5d4:	3708      	adds	r7, #8
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bd80      	pop	{r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	20008924 	.word	0x20008924
 800e5e0:	08012840 	.word	0x08012840
 800e5e4:	08012908 	.word	0x08012908
 800e5e8:	08012888 	.word	0x08012888

0800e5ec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b08c      	sub	sp, #48	; 0x30
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	60f8      	str	r0, [r7, #12]
 800e5f4:	60b9      	str	r1, [r7, #8]
 800e5f6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e600:	68bb      	ldr	r3, [r7, #8]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	885b      	ldrh	r3, [r3, #2]
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7f7 f855 	bl	80056bc <lwip_htons>
 800e612:	4603      	mov	r3, r0
 800e614:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e616:	69fb      	ldr	r3, [r7, #28]
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	f003 030f 	and.w	r3, r3, #15
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e624:	7e7b      	ldrb	r3, [r7, #25]
 800e626:	b29b      	uxth	r3, r3
 800e628:	8b7a      	ldrh	r2, [r7, #26]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d202      	bcs.n	800e634 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e62e:	f04f 33ff 	mov.w	r3, #4294967295
 800e632:	e135      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e634:	7e7b      	ldrb	r3, [r7, #25]
 800e636:	b29b      	uxth	r3, r3
 800e638:	8b7a      	ldrh	r2, [r7, #26]
 800e63a:	1ad3      	subs	r3, r2, r3
 800e63c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e63e:	69fb      	ldr	r3, [r7, #28]
 800e640:	88db      	ldrh	r3, [r3, #6]
 800e642:	b29b      	uxth	r3, r3
 800e644:	4618      	mov	r0, r3
 800e646:	f7f7 f839 	bl	80056bc <lwip_htons>
 800e64a:	4603      	mov	r3, r0
 800e64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e650:	b29b      	uxth	r3, r3
 800e652:	00db      	lsls	r3, r3, #3
 800e654:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e65c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e65e:	2200      	movs	r2, #0
 800e660:	701a      	strb	r2, [r3, #0]
 800e662:	2200      	movs	r2, #0
 800e664:	705a      	strb	r2, [r3, #1]
 800e666:	2200      	movs	r2, #0
 800e668:	709a      	strb	r2, [r3, #2]
 800e66a:	2200      	movs	r2, #0
 800e66c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	8afa      	ldrh	r2, [r7, #22]
 800e672:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e674:	8afa      	ldrh	r2, [r7, #22]
 800e676:	8b7b      	ldrh	r3, [r7, #26]
 800e678:	4413      	add	r3, r2
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e682:	88db      	ldrh	r3, [r3, #6]
 800e684:	b29b      	uxth	r3, r3
 800e686:	8afa      	ldrh	r2, [r7, #22]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d902      	bls.n	800e692 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e68c:	f04f 33ff 	mov.w	r3, #4294967295
 800e690:	e106      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	627b      	str	r3, [r7, #36]	; 0x24
 800e698:	e068      	b.n	800e76c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	889b      	ldrh	r3, [r3, #4]
 800e6a4:	b29a      	uxth	r2, r3
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	889b      	ldrh	r3, [r3, #4]
 800e6aa:	b29b      	uxth	r3, r3
 800e6ac:	429a      	cmp	r2, r3
 800e6ae:	d235      	bcs.n	800e71c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d020      	beq.n	800e6fe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	889b      	ldrh	r3, [r3, #4]
 800e6c0:	b29a      	uxth	r2, r3
 800e6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6c4:	88db      	ldrh	r3, [r3, #6]
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d307      	bcc.n	800e6dc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	88db      	ldrh	r3, [r3, #6]
 800e6d0:	b29a      	uxth	r2, r3
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	889b      	ldrh	r3, [r3, #4]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	429a      	cmp	r2, r3
 800e6da:	d902      	bls.n	800e6e2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e6e0:	e0de      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6e4:	68ba      	ldr	r2, [r7, #8]
 800e6e6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ea:	88db      	ldrh	r3, [r3, #6]
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f0:	889b      	ldrh	r3, [r3, #4]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d03d      	beq.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e6fc:	e03a      	b.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e700:	88db      	ldrh	r3, [r3, #6]
 800e702:	b29a      	uxth	r2, r3
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	889b      	ldrh	r3, [r3, #4]
 800e708:	b29b      	uxth	r3, r3
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d902      	bls.n	800e714 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e70e:	f04f 33ff 	mov.w	r3, #4294967295
 800e712:	e0c5      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	605a      	str	r2, [r3, #4]
      break;
 800e71a:	e02b      	b.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71e:	889b      	ldrh	r3, [r3, #4]
 800e720:	b29a      	uxth	r2, r3
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	889b      	ldrh	r3, [r3, #4]
 800e726:	b29b      	uxth	r3, r3
 800e728:	429a      	cmp	r2, r3
 800e72a:	d102      	bne.n	800e732 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e72c:	f04f 33ff 	mov.w	r3, #4294967295
 800e730:	e0b6      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	889b      	ldrh	r3, [r3, #4]
 800e736:	b29a      	uxth	r2, r3
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	88db      	ldrh	r3, [r3, #6]
 800e73c:	b29b      	uxth	r3, r3
 800e73e:	429a      	cmp	r2, r3
 800e740:	d202      	bcs.n	800e748 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e742:	f04f 33ff 	mov.w	r3, #4294967295
 800e746:	e0ab      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d009      	beq.n	800e762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	88db      	ldrh	r3, [r3, #6]
 800e752:	b29a      	uxth	r2, r3
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	889b      	ldrh	r3, [r3, #4]
 800e758:	b29b      	uxth	r3, r3
 800e75a:	429a      	cmp	r2, r3
 800e75c:	d001      	beq.n	800e762 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e75e:	2300      	movs	r3, #0
 800e760:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d193      	bne.n	800e69a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e772:	e000      	b.n	800e776 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e774:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d12d      	bne.n	800e7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d01c      	beq.n	800e7bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e784:	88db      	ldrh	r3, [r3, #6]
 800e786:	b29a      	uxth	r2, r3
 800e788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78a:	889b      	ldrh	r3, [r3, #4]
 800e78c:	b29b      	uxth	r3, r3
 800e78e:	429a      	cmp	r2, r3
 800e790:	d906      	bls.n	800e7a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e792:	4b45      	ldr	r3, [pc, #276]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e794:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e798:	4944      	ldr	r1, [pc, #272]	; (800e8ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e79a:	4845      	ldr	r0, [pc, #276]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e79c:	f000 fda0 	bl	800f2e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a2:	68ba      	ldr	r2, [r7, #8]
 800e7a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a8:	88db      	ldrh	r3, [r3, #6]
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ae:	889b      	ldrh	r3, [r3, #4]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d010      	beq.n	800e7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	623b      	str	r3, [r7, #32]
 800e7ba:	e00d      	b.n	800e7d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	685b      	ldr	r3, [r3, #4]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d006      	beq.n	800e7d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e7c4:	4b38      	ldr	r3, [pc, #224]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e7c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e7ca:	493a      	ldr	r1, [pc, #232]	; (800e8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e7cc:	4838      	ldr	r0, [pc, #224]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e7ce:	f000 fd87 	bl	800f2e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	68ba      	ldr	r2, [r7, #8]
 800e7d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d105      	bne.n	800e7ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	7f9b      	ldrb	r3, [r3, #30]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d059      	beq.n	800e89e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d04f      	beq.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d006      	beq.n	800e806 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	685b      	ldr	r3, [r3, #4]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	889b      	ldrh	r3, [r3, #4]
 800e800:	b29b      	uxth	r3, r3
 800e802:	2b00      	cmp	r3, #0
 800e804:	d002      	beq.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	623b      	str	r3, [r7, #32]
 800e80a:	e041      	b.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e816:	e012      	b.n	800e83e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	88db      	ldrh	r3, [r3, #6]
 800e822:	b29a      	uxth	r2, r3
 800e824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e826:	889b      	ldrh	r3, [r3, #4]
 800e828:	b29b      	uxth	r3, r3
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d002      	beq.n	800e834 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	623b      	str	r3, [r7, #32]
            break;
 800e832:	e007      	b.n	800e844 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e840:	2b00      	cmp	r3, #0
 800e842:	d1e9      	bne.n	800e818 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e844:	6a3b      	ldr	r3, [r7, #32]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d022      	beq.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e852:	4b15      	ldr	r3, [pc, #84]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e854:	f240 12df 	movw	r2, #479	; 0x1df
 800e858:	4917      	ldr	r1, [pc, #92]	; (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e85a:	4815      	ldr	r0, [pc, #84]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e85c:	f000 fd40 	bl	800f2e0 <iprintf>
          LWIP_ASSERT("sanity check",
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	685b      	ldr	r3, [r3, #4]
 800e864:	685b      	ldr	r3, [r3, #4]
 800e866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e868:	429a      	cmp	r2, r3
 800e86a:	d106      	bne.n	800e87a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e86c:	4b0e      	ldr	r3, [pc, #56]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e86e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e872:	4911      	ldr	r1, [pc, #68]	; (800e8b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e874:	480e      	ldr	r0, [pc, #56]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e876:	f000 fd33 	bl	800f2e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d006      	beq.n	800e890 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e882:	4b09      	ldr	r3, [pc, #36]	; (800e8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e884:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e888:	490c      	ldr	r1, [pc, #48]	; (800e8bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e88a:	4809      	ldr	r0, [pc, #36]	; (800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e88c:	f000 fd28 	bl	800f2e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	2b00      	cmp	r3, #0
 800e894:	bf14      	ite	ne
 800e896:	2301      	movne	r3, #1
 800e898:	2300      	moveq	r3, #0
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	e000      	b.n	800e8a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3730      	adds	r7, #48	; 0x30
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	08012840 	.word	0x08012840
 800e8ac:	08012924 	.word	0x08012924
 800e8b0:	08012888 	.word	0x08012888
 800e8b4:	08012944 	.word	0x08012944
 800e8b8:	0801297c 	.word	0x0801297c
 800e8bc:	0801298c 	.word	0x0801298c

0800e8c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b08e      	sub	sp, #56	; 0x38
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	f003 030f 	and.w	r3, r3, #15
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	b2db      	uxtb	r3, r3
 800e8dc:	2b14      	cmp	r3, #20
 800e8de:	f040 8171 	bne.w	800ebc4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	88db      	ldrh	r3, [r3, #6]
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7f6 fee7 	bl	80056bc <lwip_htons>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	00db      	lsls	r3, r3, #3
 800e8f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	885b      	ldrh	r3, [r3, #2]
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	4618      	mov	r0, r3
 800e902:	f7f6 fedb 	bl	80056bc <lwip_htons>
 800e906:	4603      	mov	r3, r0
 800e908:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	f003 030f 	and.w	r3, r3, #15
 800e912:	b2db      	uxtb	r3, r3
 800e914:	009b      	lsls	r3, r3, #2
 800e916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e91a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e91e:	b29b      	uxth	r3, r3
 800e920:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e922:	429a      	cmp	r2, r3
 800e924:	f0c0 8150 	bcc.w	800ebc8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e92c:	b29b      	uxth	r3, r3
 800e92e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f8 faa7 	bl	8006e88 <pbuf_clen>
 800e93a:	4603      	mov	r3, r0
 800e93c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e93e:	4b8c      	ldr	r3, [pc, #560]	; (800eb70 <ip4_reass+0x2b0>)
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	8c3b      	ldrh	r3, [r7, #32]
 800e946:	4413      	add	r3, r2
 800e948:	2b0a      	cmp	r3, #10
 800e94a:	dd10      	ble.n	800e96e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e94c:	8c3b      	ldrh	r3, [r7, #32]
 800e94e:	4619      	mov	r1, r3
 800e950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e952:	f7ff fd81 	bl	800e458 <ip_reass_remove_oldest_datagram>
 800e956:	4603      	mov	r3, r0
 800e958:	2b00      	cmp	r3, #0
 800e95a:	f000 8137 	beq.w	800ebcc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e95e:	4b84      	ldr	r3, [pc, #528]	; (800eb70 <ip4_reass+0x2b0>)
 800e960:	881b      	ldrh	r3, [r3, #0]
 800e962:	461a      	mov	r2, r3
 800e964:	8c3b      	ldrh	r3, [r7, #32]
 800e966:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e968:	2b0a      	cmp	r3, #10
 800e96a:	f300 812f 	bgt.w	800ebcc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e96e:	4b81      	ldr	r3, [pc, #516]	; (800eb74 <ip4_reass+0x2b4>)
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	633b      	str	r3, [r7, #48]	; 0x30
 800e974:	e015      	b.n	800e9a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	695a      	ldr	r2, [r3, #20]
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	68db      	ldr	r3, [r3, #12]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d10c      	bne.n	800e99c <ip4_reass+0xdc>
 800e982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e984:	699a      	ldr	r2, [r3, #24]
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	691b      	ldr	r3, [r3, #16]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d106      	bne.n	800e99c <ip4_reass+0xdc>
 800e98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e990:	899a      	ldrh	r2, [r3, #12]
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	889b      	ldrh	r3, [r3, #4]
 800e996:	b29b      	uxth	r3, r3
 800e998:	429a      	cmp	r2, r3
 800e99a:	d006      	beq.n	800e9aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	633b      	str	r3, [r7, #48]	; 0x30
 800e9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d1e6      	bne.n	800e976 <ip4_reass+0xb6>
 800e9a8:	e000      	b.n	800e9ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800e9aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800e9ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d109      	bne.n	800e9c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800e9b2:	8c3b      	ldrh	r3, [r7, #32]
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9b8:	f7ff fdb0 	bl	800e51c <ip_reass_enqueue_new_datagram>
 800e9bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800e9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d11c      	bne.n	800e9fe <ip4_reass+0x13e>
      goto nullreturn;
 800e9c4:	e105      	b.n	800ebd2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c8:	88db      	ldrh	r3, [r3, #6]
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	f7f6 fe75 	bl	80056bc <lwip_htons>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d110      	bne.n	800e9fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9de:	89db      	ldrh	r3, [r3, #14]
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f7f6 fe6b 	bl	80056bc <lwip_htons>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d006      	beq.n	800e9fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	3308      	adds	r3, #8
 800e9f4:	2214      	movs	r2, #20
 800e9f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f000 fd4c 	bl	800f496 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea00:	88db      	ldrh	r3, [r3, #6]
 800ea02:	b29b      	uxth	r3, r3
 800ea04:	f003 0320 	and.w	r3, r3, #32
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	bf0c      	ite	eq
 800ea0c:	2301      	moveq	r3, #1
 800ea0e:	2300      	movne	r3, #0
 800ea10:	b2db      	uxtb	r3, r3
 800ea12:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ea14:	69fb      	ldr	r3, [r7, #28]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00e      	beq.n	800ea38 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea1a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea1e:	4413      	add	r3, r2
 800ea20:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ea22:	8b7a      	ldrh	r2, [r7, #26]
 800ea24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea26:	429a      	cmp	r2, r3
 800ea28:	f0c0 80a0 	bcc.w	800eb6c <ip4_reass+0x2ac>
 800ea2c:	8b7b      	ldrh	r3, [r7, #26]
 800ea2e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ea32:	4293      	cmp	r3, r2
 800ea34:	f200 809a 	bhi.w	800eb6c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ea38:	69fa      	ldr	r2, [r7, #28]
 800ea3a:	6879      	ldr	r1, [r7, #4]
 800ea3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ea3e:	f7ff fdd5 	bl	800e5ec <ip_reass_chain_frag_into_datagram_and_validate>
 800ea42:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea4a:	f000 809b 	beq.w	800eb84 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800ea4e:	4b48      	ldr	r3, [pc, #288]	; (800eb70 <ip4_reass+0x2b0>)
 800ea50:	881a      	ldrh	r2, [r3, #0]
 800ea52:	8c3b      	ldrh	r3, [r7, #32]
 800ea54:	4413      	add	r3, r2
 800ea56:	b29a      	uxth	r2, r3
 800ea58:	4b45      	ldr	r3, [pc, #276]	; (800eb70 <ip4_reass+0x2b0>)
 800ea5a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800ea5c:	69fb      	ldr	r3, [r7, #28]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800ea62:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea66:	4413      	add	r3, r2
 800ea68:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800ea6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea6c:	8a7a      	ldrh	r2, [r7, #18]
 800ea6e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800ea70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea72:	7f9b      	ldrb	r3, [r3, #30]
 800ea74:	f043 0301 	orr.w	r3, r3, #1
 800ea78:	b2da      	uxtb	r2, r3
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d171      	bne.n	800eb68 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800ea84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea86:	8b9b      	ldrh	r3, [r3, #28]
 800ea88:	3314      	adds	r3, #20
 800ea8a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800ea8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8e:	685b      	ldr	r3, [r3, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800ea96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800ea9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaa0:	3308      	adds	r3, #8
 800eaa2:	2214      	movs	r2, #20
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eaa8:	f000 fcf5 	bl	800f496 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eaac:	8a3b      	ldrh	r3, [r7, #16]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7f6 fe04 	bl	80056bc <lwip_htons>
 800eab4:	4603      	mov	r3, r0
 800eab6:	461a      	mov	r2, r3
 800eab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eabe:	2200      	movs	r2, #0
 800eac0:	719a      	strb	r2, [r3, #6]
 800eac2:	2200      	movs	r2, #0
 800eac4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac8:	2200      	movs	r2, #0
 800eaca:	729a      	strb	r2, [r3, #10]
 800eacc:	2200      	movs	r2, #0
 800eace:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800ead0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800ead6:	e00d      	b.n	800eaf4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800ead8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eade:	2114      	movs	r1, #20
 800eae0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eae2:	f7f8 f8c3 	bl	8006c6c <pbuf_remove_header>
      pbuf_cat(p, r);
 800eae6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eae8:	6878      	ldr	r0, [r7, #4]
 800eaea:	f7f8 fa07 	bl	8006efc <pbuf_cat>
      r = iprh->next_pbuf;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d1ee      	bne.n	800ead8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eafa:	4b1e      	ldr	r3, [pc, #120]	; (800eb74 <ip4_reass+0x2b4>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d102      	bne.n	800eb0a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb04:	2300      	movs	r3, #0
 800eb06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb08:	e010      	b.n	800eb2c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb0a:	4b1a      	ldr	r3, [pc, #104]	; (800eb74 <ip4_reass+0x2b4>)
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb10:	e007      	b.n	800eb22 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800eb12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d006      	beq.n	800eb2a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1f4      	bne.n	800eb12 <ip4_reass+0x252>
 800eb28:	e000      	b.n	800eb2c <ip4_reass+0x26c>
          break;
 800eb2a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800eb2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eb2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb30:	f7ff fd2e 	bl	800e590 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7f8 f9a7 	bl	8006e88 <pbuf_clen>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800eb3e:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <ip4_reass+0x2b0>)
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	8c3a      	ldrh	r2, [r7, #32]
 800eb44:	429a      	cmp	r2, r3
 800eb46:	d906      	bls.n	800eb56 <ip4_reass+0x296>
 800eb48:	4b0b      	ldr	r3, [pc, #44]	; (800eb78 <ip4_reass+0x2b8>)
 800eb4a:	f240 229b 	movw	r2, #667	; 0x29b
 800eb4e:	490b      	ldr	r1, [pc, #44]	; (800eb7c <ip4_reass+0x2bc>)
 800eb50:	480b      	ldr	r0, [pc, #44]	; (800eb80 <ip4_reass+0x2c0>)
 800eb52:	f000 fbc5 	bl	800f2e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800eb56:	4b06      	ldr	r3, [pc, #24]	; (800eb70 <ip4_reass+0x2b0>)
 800eb58:	881a      	ldrh	r2, [r3, #0]
 800eb5a:	8c3b      	ldrh	r3, [r7, #32]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	4b03      	ldr	r3, [pc, #12]	; (800eb70 <ip4_reass+0x2b0>)
 800eb62:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	e038      	b.n	800ebda <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	e036      	b.n	800ebda <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800eb6c:	bf00      	nop
 800eb6e:	e00a      	b.n	800eb86 <ip4_reass+0x2c6>
 800eb70:	20008928 	.word	0x20008928
 800eb74:	20008924 	.word	0x20008924
 800eb78:	08012840 	.word	0x08012840
 800eb7c:	080129b0 	.word	0x080129b0
 800eb80:	08012888 	.word	0x08012888
    goto nullreturn_ipr;
 800eb84:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d106      	bne.n	800eb9a <ip4_reass+0x2da>
 800eb8c:	4b15      	ldr	r3, [pc, #84]	; (800ebe4 <ip4_reass+0x324>)
 800eb8e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800eb92:	4915      	ldr	r1, [pc, #84]	; (800ebe8 <ip4_reass+0x328>)
 800eb94:	4815      	ldr	r0, [pc, #84]	; (800ebec <ip4_reass+0x32c>)
 800eb96:	f000 fba3 	bl	800f2e0 <iprintf>
  if (ipr->p == NULL) {
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	685b      	ldr	r3, [r3, #4]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d116      	bne.n	800ebd0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800eba2:	4b13      	ldr	r3, [pc, #76]	; (800ebf0 <ip4_reass+0x330>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d006      	beq.n	800ebba <ip4_reass+0x2fa>
 800ebac:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <ip4_reass+0x324>)
 800ebae:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ebb2:	4910      	ldr	r1, [pc, #64]	; (800ebf4 <ip4_reass+0x334>)
 800ebb4:	480d      	ldr	r0, [pc, #52]	; (800ebec <ip4_reass+0x32c>)
 800ebb6:	f000 fb93 	bl	800f2e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ebba:	2100      	movs	r1, #0
 800ebbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebbe:	f7ff fce7 	bl	800e590 <ip_reass_dequeue_datagram>
 800ebc2:	e006      	b.n	800ebd2 <ip4_reass+0x312>
    goto nullreturn;
 800ebc4:	bf00      	nop
 800ebc6:	e004      	b.n	800ebd2 <ip4_reass+0x312>
    goto nullreturn;
 800ebc8:	bf00      	nop
 800ebca:	e002      	b.n	800ebd2 <ip4_reass+0x312>
      goto nullreturn;
 800ebcc:	bf00      	nop
 800ebce:	e000      	b.n	800ebd2 <ip4_reass+0x312>
  }

nullreturn:
 800ebd0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f7f8 f8d0 	bl	8006d78 <pbuf_free>
  return NULL;
 800ebd8:	2300      	movs	r3, #0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3738      	adds	r7, #56	; 0x38
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	08012840 	.word	0x08012840
 800ebe8:	080129cc 	.word	0x080129cc
 800ebec:	08012888 	.word	0x08012888
 800ebf0:	20008924 	.word	0x20008924
 800ebf4:	080129d8 	.word	0x080129d8

0800ebf8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ebfc:	2005      	movs	r0, #5
 800ebfe:	f7f7 f9d5 	bl	8005fac <memp_malloc>
 800ec02:	4603      	mov	r3, r0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d106      	bne.n	800ec24 <ip_frag_free_pbuf_custom_ref+0x1c>
 800ec16:	4b07      	ldr	r3, [pc, #28]	; (800ec34 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800ec18:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800ec1c:	4906      	ldr	r1, [pc, #24]	; (800ec38 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ec1e:	4807      	ldr	r0, [pc, #28]	; (800ec3c <ip_frag_free_pbuf_custom_ref+0x34>)
 800ec20:	f000 fb5e 	bl	800f2e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ec24:	6879      	ldr	r1, [r7, #4]
 800ec26:	2005      	movs	r0, #5
 800ec28:	f7f7 fa30 	bl	800608c <memp_free>
}
 800ec2c:	bf00      	nop
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	08012840 	.word	0x08012840
 800ec38:	080129f8 	.word	0x080129f8
 800ec3c:	08012888 	.word	0x08012888

0800ec40 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <ipfrag_free_pbuf_custom+0x20>
 800ec52:	4b11      	ldr	r3, [pc, #68]	; (800ec98 <ipfrag_free_pbuf_custom+0x58>)
 800ec54:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ec58:	4910      	ldr	r1, [pc, #64]	; (800ec9c <ipfrag_free_pbuf_custom+0x5c>)
 800ec5a:	4811      	ldr	r0, [pc, #68]	; (800eca0 <ipfrag_free_pbuf_custom+0x60>)
 800ec5c:	f000 fb40 	bl	800f2e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d006      	beq.n	800ec76 <ipfrag_free_pbuf_custom+0x36>
 800ec68:	4b0b      	ldr	r3, [pc, #44]	; (800ec98 <ipfrag_free_pbuf_custom+0x58>)
 800ec6a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ec6e:	490d      	ldr	r1, [pc, #52]	; (800eca4 <ipfrag_free_pbuf_custom+0x64>)
 800ec70:	480b      	ldr	r0, [pc, #44]	; (800eca0 <ipfrag_free_pbuf_custom+0x60>)
 800ec72:	f000 fb35 	bl	800f2e0 <iprintf>
  if (pcr->original != NULL) {
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	695b      	ldr	r3, [r3, #20]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d004      	beq.n	800ec88 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	695b      	ldr	r3, [r3, #20]
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f8 f878 	bl	8006d78 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	f7ff ffbd 	bl	800ec08 <ip_frag_free_pbuf_custom_ref>
}
 800ec8e:	bf00      	nop
 800ec90:	3710      	adds	r7, #16
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop
 800ec98:	08012840 	.word	0x08012840
 800ec9c:	08012a04 	.word	0x08012a04
 800eca0:	08012888 	.word	0x08012888
 800eca4:	08012a10 	.word	0x08012a10

0800eca8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b094      	sub	sp, #80	; 0x50
 800ecac:	af02      	add	r7, sp, #8
 800ecae:	60f8      	str	r0, [r7, #12]
 800ecb0:	60b9      	str	r1, [r7, #8]
 800ecb2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ecbe:	3b14      	subs	r3, #20
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	da00      	bge.n	800ecc6 <ip4_frag+0x1e>
 800ecc4:	3307      	adds	r3, #7
 800ecc6:	10db      	asrs	r3, r3, #3
 800ecc8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ecca:	2314      	movs	r3, #20
 800eccc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ecd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ecd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecda:	781b      	ldrb	r3, [r3, #0]
 800ecdc:	f003 030f 	and.w	r3, r3, #15
 800ece0:	b2db      	uxtb	r3, r3
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	b2db      	uxtb	r3, r3
 800ece6:	2b14      	cmp	r3, #20
 800ece8:	d002      	beq.n	800ecf0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ecea:	f06f 0305 	mvn.w	r3, #5
 800ecee:	e110      	b.n	800ef12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	895b      	ldrh	r3, [r3, #10]
 800ecf4:	2b13      	cmp	r3, #19
 800ecf6:	d809      	bhi.n	800ed0c <ip4_frag+0x64>
 800ecf8:	4b88      	ldr	r3, [pc, #544]	; (800ef1c <ip4_frag+0x274>)
 800ecfa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ecfe:	4988      	ldr	r1, [pc, #544]	; (800ef20 <ip4_frag+0x278>)
 800ed00:	4888      	ldr	r0, [pc, #544]	; (800ef24 <ip4_frag+0x27c>)
 800ed02:	f000 faed 	bl	800f2e0 <iprintf>
 800ed06:	f06f 0305 	mvn.w	r3, #5
 800ed0a:	e102      	b.n	800ef12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed0e:	88db      	ldrh	r3, [r3, #6]
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7f6 fcd2 	bl	80056bc <lwip_htons>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800ed1c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ed22:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800ed26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ed28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ed2c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	891b      	ldrh	r3, [r3, #8]
 800ed32:	3b14      	subs	r3, #20
 800ed34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800ed38:	e0e1      	b.n	800eefe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800ed3a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed3c:	00db      	lsls	r3, r3, #3
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed44:	4293      	cmp	r3, r2
 800ed46:	bf28      	it	cs
 800ed48:	4613      	movcs	r3, r2
 800ed4a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800ed4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed50:	2114      	movs	r1, #20
 800ed52:	200e      	movs	r0, #14
 800ed54:	f7f7 fd2c 	bl	80067b0 <pbuf_alloc>
 800ed58:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ed5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f000 80d5 	beq.w	800ef0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800ed62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed64:	895b      	ldrh	r3, [r3, #10]
 800ed66:	2b13      	cmp	r3, #19
 800ed68:	d806      	bhi.n	800ed78 <ip4_frag+0xd0>
 800ed6a:	4b6c      	ldr	r3, [pc, #432]	; (800ef1c <ip4_frag+0x274>)
 800ed6c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800ed70:	496d      	ldr	r1, [pc, #436]	; (800ef28 <ip4_frag+0x280>)
 800ed72:	486c      	ldr	r0, [pc, #432]	; (800ef24 <ip4_frag+0x27c>)
 800ed74:	f000 fab4 	bl	800f2e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	2214      	movs	r2, #20
 800ed7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 fb88 	bl	800f496 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ed86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed88:	685b      	ldr	r3, [r3, #4]
 800ed8a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ed8c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ed8e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ed92:	e064      	b.n	800ee5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	895a      	ldrh	r2, [r3, #10]
 800ed98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ed9a:	1ad3      	subs	r3, r2, r3
 800ed9c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	895b      	ldrh	r3, [r3, #10]
 800eda2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d906      	bls.n	800edb6 <ip4_frag+0x10e>
 800eda8:	4b5c      	ldr	r3, [pc, #368]	; (800ef1c <ip4_frag+0x274>)
 800edaa:	f240 322d 	movw	r2, #813	; 0x32d
 800edae:	495f      	ldr	r1, [pc, #380]	; (800ef2c <ip4_frag+0x284>)
 800edb0:	485c      	ldr	r0, [pc, #368]	; (800ef24 <ip4_frag+0x27c>)
 800edb2:	f000 fa95 	bl	800f2e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800edb6:	8bfa      	ldrh	r2, [r7, #30]
 800edb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800edbc:	4293      	cmp	r3, r2
 800edbe:	bf28      	it	cs
 800edc0:	4613      	movcs	r3, r2
 800edc2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800edc6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d105      	bne.n	800edda <ip4_frag+0x132>
        poff = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	60fb      	str	r3, [r7, #12]
        continue;
 800edd8:	e041      	b.n	800ee5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800edda:	f7ff ff0d 	bl	800ebf8 <ip_frag_alloc_pbuf_custom_ref>
 800edde:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d103      	bne.n	800edee <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ede6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ede8:	f7f7 ffc6 	bl	8006d78 <pbuf_free>
        goto memerr;
 800edec:	e08f      	b.n	800ef0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800edf4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800edf6:	4413      	add	r3, r2
 800edf8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800edfc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee00:	9201      	str	r2, [sp, #4]
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	4603      	mov	r3, r0
 800ee06:	2241      	movs	r2, #65	; 0x41
 800ee08:	2000      	movs	r0, #0
 800ee0a:	f7f7 fdfb 	bl	8006a04 <pbuf_alloced_custom>
 800ee0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d106      	bne.n	800ee24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800ee16:	69b8      	ldr	r0, [r7, #24]
 800ee18:	f7ff fef6 	bl	800ec08 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800ee1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee1e:	f7f7 ffab 	bl	8006d78 <pbuf_free>
        goto memerr;
 800ee22:	e074      	b.n	800ef0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f7f8 f847 	bl	8006eb8 <pbuf_ref>
      pcr->original = p;
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	68fa      	ldr	r2, [r7, #12]
 800ee2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800ee30:	69bb      	ldr	r3, [r7, #24]
 800ee32:	4a3f      	ldr	r2, [pc, #252]	; (800ef30 <ip4_frag+0x288>)
 800ee34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800ee36:	6979      	ldr	r1, [r7, #20]
 800ee38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee3a:	f7f8 f85f 	bl	8006efc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800ee3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800ee42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee46:	1ad3      	subs	r3, r2, r3
 800ee48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800ee4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d004      	beq.n	800ee5e <ip4_frag+0x1b6>
        poff = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800ee5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d196      	bne.n	800ed94 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800ee66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee6c:	4413      	add	r3, r2
 800ee6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800ee70:	68bb      	ldr	r3, [r7, #8]
 800ee72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee74:	f1a3 0213 	sub.w	r2, r3, #19
 800ee78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	bfcc      	ite	gt
 800ee80:	2301      	movgt	r3, #1
 800ee82:	2300      	movle	r3, #0
 800ee84:	b2db      	uxtb	r3, r3
 800ee86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ee88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ee8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ee90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d002      	beq.n	800ee9e <ip4_frag+0x1f6>
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ee9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eea0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eea4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800eea6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7f6 fc07 	bl	80056bc <lwip_htons>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	461a      	mov	r2, r3
 800eeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800eeb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeb8:	3314      	adds	r3, #20
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7f6 fbfd 	bl	80056bc <lwip_htons>
 800eec2:	4603      	mov	r3, r0
 800eec4:	461a      	mov	r2, r3
 800eec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800eeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eecc:	2200      	movs	r2, #0
 800eece:	729a      	strb	r2, [r3, #10]
 800eed0:	2200      	movs	r2, #0
 800eed2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	695b      	ldr	r3, [r3, #20]
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eedc:	68b8      	ldr	r0, [r7, #8]
 800eede:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800eee0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eee2:	f7f7 ff49 	bl	8006d78 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800eee6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eeea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eeec:	1ad3      	subs	r3, r2, r3
 800eeee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800eef2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800eef6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800eef8:	4413      	add	r3, r2
 800eefa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800eefe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	f47f af19 	bne.w	800ed3a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	e002      	b.n	800ef12 <ip4_frag+0x26a>
      goto memerr;
 800ef0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef12:	4618      	mov	r0, r3
 800ef14:	3748      	adds	r7, #72	; 0x48
 800ef16:	46bd      	mov	sp, r7
 800ef18:	bd80      	pop	{r7, pc}
 800ef1a:	bf00      	nop
 800ef1c:	08012840 	.word	0x08012840
 800ef20:	08012a1c 	.word	0x08012a1c
 800ef24:	08012888 	.word	0x08012888
 800ef28:	08012a38 	.word	0x08012a38
 800ef2c:	08012a58 	.word	0x08012a58
 800ef30:	0800ec41 	.word	0x0800ec41

0800ef34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800ef3e:	230e      	movs	r3, #14
 800ef40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	895b      	ldrh	r3, [r3, #10]
 800ef46:	2b0e      	cmp	r3, #14
 800ef48:	d96e      	bls.n	800f028 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	7bdb      	ldrb	r3, [r3, #15]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d106      	bne.n	800ef60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ef58:	3301      	adds	r3, #1
 800ef5a:	b2da      	uxtb	r2, r3
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	685b      	ldr	r3, [r3, #4]
 800ef64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	7b1a      	ldrb	r2, [r3, #12]
 800ef6a:	7b5b      	ldrb	r3, [r3, #13]
 800ef6c:	021b      	lsls	r3, r3, #8
 800ef6e:	4313      	orrs	r3, r2
 800ef70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f003 0301 	and.w	r3, r3, #1
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d023      	beq.n	800efc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	2b01      	cmp	r3, #1
 800ef84:	d10f      	bne.n	800efa6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	785b      	ldrb	r3, [r3, #1]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d11b      	bne.n	800efc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ef92:	2b5e      	cmp	r3, #94	; 0x5e
 800ef94:	d117      	bne.n	800efc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	7b5b      	ldrb	r3, [r3, #13]
 800ef9a:	f043 0310 	orr.w	r3, r3, #16
 800ef9e:	b2da      	uxtb	r2, r3
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	735a      	strb	r2, [r3, #13]
 800efa4:	e00f      	b.n	800efc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	2206      	movs	r2, #6
 800efaa:	4928      	ldr	r1, [pc, #160]	; (800f04c <ethernet_input+0x118>)
 800efac:	4618      	mov	r0, r3
 800efae:	f000 f9ec 	bl	800f38a <memcmp>
 800efb2:	4603      	mov	r3, r0
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d106      	bne.n	800efc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	7b5b      	ldrb	r3, [r3, #13]
 800efbc:	f043 0308 	orr.w	r3, r3, #8
 800efc0:	b2da      	uxtb	r2, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800efc6:	89fb      	ldrh	r3, [r7, #14]
 800efc8:	2b08      	cmp	r3, #8
 800efca:	d003      	beq.n	800efd4 <ethernet_input+0xa0>
 800efcc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800efd0:	d014      	beq.n	800effc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800efd2:	e032      	b.n	800f03a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efda:	f003 0308 	and.w	r3, r3, #8
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d024      	beq.n	800f02c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800efe2:	8afb      	ldrh	r3, [r7, #22]
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7f7 fe40 	bl	8006c6c <pbuf_remove_header>
 800efec:	4603      	mov	r3, r0
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d11e      	bne.n	800f030 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800eff2:	6839      	ldr	r1, [r7, #0]
 800eff4:	6878      	ldr	r0, [r7, #4]
 800eff6:	f7fe ff21 	bl	800de3c <ip4_input>
      break;
 800effa:	e013      	b.n	800f024 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f002:	f003 0308 	and.w	r3, r3, #8
 800f006:	2b00      	cmp	r3, #0
 800f008:	d014      	beq.n	800f034 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f00a:	8afb      	ldrh	r3, [r7, #22]
 800f00c:	4619      	mov	r1, r3
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f7f7 fe2c 	bl	8006c6c <pbuf_remove_header>
 800f014:	4603      	mov	r3, r0
 800f016:	2b00      	cmp	r3, #0
 800f018:	d10e      	bne.n	800f038 <ethernet_input+0x104>
        etharp_input(p, netif);
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7fe f8c1 	bl	800d1a4 <etharp_input>
      break;
 800f022:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	e00c      	b.n	800f042 <ethernet_input+0x10e>
    goto free_and_return;
 800f028:	bf00      	nop
 800f02a:	e006      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f02c:	bf00      	nop
 800f02e:	e004      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f030:	bf00      	nop
 800f032:	e002      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f034:	bf00      	nop
 800f036:	e000      	b.n	800f03a <ethernet_input+0x106>
        goto free_and_return;
 800f038:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f7f7 fe9c 	bl	8006d78 <pbuf_free>
  return ERR_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3718      	adds	r7, #24
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	08012bf4 	.word	0x08012bf4

0800f050 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800f050:	b580      	push	{r7, lr}
 800f052:	b086      	sub	sp, #24
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
 800f05c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800f05e:	8c3b      	ldrh	r3, [r7, #32]
 800f060:	4618      	mov	r0, r3
 800f062:	f7f6 fb2b 	bl	80056bc <lwip_htons>
 800f066:	4603      	mov	r3, r0
 800f068:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800f06a:	210e      	movs	r1, #14
 800f06c:	68b8      	ldr	r0, [r7, #8]
 800f06e:	f7f7 fded 	bl	8006c4c <pbuf_add_header>
 800f072:	4603      	mov	r3, r0
 800f074:	2b00      	cmp	r3, #0
 800f076:	d125      	bne.n	800f0c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	685b      	ldr	r3, [r3, #4]
 800f07c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800f07e:	693b      	ldr	r3, [r7, #16]
 800f080:	8afa      	ldrh	r2, [r7, #22]
 800f082:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	2206      	movs	r2, #6
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	4618      	mov	r0, r3
 800f08c:	f000 fa03 	bl	800f496 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	3306      	adds	r3, #6
 800f094:	2206      	movs	r2, #6
 800f096:	6879      	ldr	r1, [r7, #4]
 800f098:	4618      	mov	r0, r3
 800f09a:	f000 f9fc 	bl	800f496 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f0a4:	2b06      	cmp	r3, #6
 800f0a6:	d006      	beq.n	800f0b6 <ethernet_output+0x66>
 800f0a8:	4b0a      	ldr	r3, [pc, #40]	; (800f0d4 <ethernet_output+0x84>)
 800f0aa:	f44f 7299 	mov.w	r2, #306	; 0x132
 800f0ae:	490a      	ldr	r1, [pc, #40]	; (800f0d8 <ethernet_output+0x88>)
 800f0b0:	480a      	ldr	r0, [pc, #40]	; (800f0dc <ethernet_output+0x8c>)
 800f0b2:	f000 f915 	bl	800f2e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	699b      	ldr	r3, [r3, #24]
 800f0ba:	68b9      	ldr	r1, [r7, #8]
 800f0bc:	68f8      	ldr	r0, [r7, #12]
 800f0be:	4798      	blx	r3
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	e002      	b.n	800f0ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800f0c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800f0c6:	f06f 0301 	mvn.w	r3, #1
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3718      	adds	r7, #24
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}
 800f0d2:	bf00      	nop
 800f0d4:	08012a68 	.word	0x08012a68
 800f0d8:	08012aa0 	.word	0x08012aa0
 800f0dc:	08012ad4 	.word	0x08012ad4

0800f0e0 <rand>:
 800f0e0:	4b16      	ldr	r3, [pc, #88]	; (800f13c <rand+0x5c>)
 800f0e2:	b510      	push	{r4, lr}
 800f0e4:	681c      	ldr	r4, [r3, #0]
 800f0e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f0e8:	b9b3      	cbnz	r3, 800f118 <rand+0x38>
 800f0ea:	2018      	movs	r0, #24
 800f0ec:	f000 fa4c 	bl	800f588 <malloc>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	6320      	str	r0, [r4, #48]	; 0x30
 800f0f4:	b920      	cbnz	r0, 800f100 <rand+0x20>
 800f0f6:	4b12      	ldr	r3, [pc, #72]	; (800f140 <rand+0x60>)
 800f0f8:	4812      	ldr	r0, [pc, #72]	; (800f144 <rand+0x64>)
 800f0fa:	2152      	movs	r1, #82	; 0x52
 800f0fc:	f000 f9da 	bl	800f4b4 <__assert_func>
 800f100:	4911      	ldr	r1, [pc, #68]	; (800f148 <rand+0x68>)
 800f102:	4b12      	ldr	r3, [pc, #72]	; (800f14c <rand+0x6c>)
 800f104:	e9c0 1300 	strd	r1, r3, [r0]
 800f108:	4b11      	ldr	r3, [pc, #68]	; (800f150 <rand+0x70>)
 800f10a:	6083      	str	r3, [r0, #8]
 800f10c:	230b      	movs	r3, #11
 800f10e:	8183      	strh	r3, [r0, #12]
 800f110:	2100      	movs	r1, #0
 800f112:	2001      	movs	r0, #1
 800f114:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800f118:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800f11a:	480e      	ldr	r0, [pc, #56]	; (800f154 <rand+0x74>)
 800f11c:	690b      	ldr	r3, [r1, #16]
 800f11e:	694c      	ldr	r4, [r1, #20]
 800f120:	4a0d      	ldr	r2, [pc, #52]	; (800f158 <rand+0x78>)
 800f122:	4358      	muls	r0, r3
 800f124:	fb02 0004 	mla	r0, r2, r4, r0
 800f128:	fba3 3202 	umull	r3, r2, r3, r2
 800f12c:	3301      	adds	r3, #1
 800f12e:	eb40 0002 	adc.w	r0, r0, r2
 800f132:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800f136:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f13a:	bd10      	pop	{r4, pc}
 800f13c:	20000084 	.word	0x20000084
 800f140:	08012c02 	.word	0x08012c02
 800f144:	08012c19 	.word	0x08012c19
 800f148:	abcd330e 	.word	0xabcd330e
 800f14c:	e66d1234 	.word	0xe66d1234
 800f150:	0005deec 	.word	0x0005deec
 800f154:	5851f42d 	.word	0x5851f42d
 800f158:	4c957f2d 	.word	0x4c957f2d

0800f15c <std>:
 800f15c:	2300      	movs	r3, #0
 800f15e:	b510      	push	{r4, lr}
 800f160:	4604      	mov	r4, r0
 800f162:	e9c0 3300 	strd	r3, r3, [r0]
 800f166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f16a:	6083      	str	r3, [r0, #8]
 800f16c:	8181      	strh	r1, [r0, #12]
 800f16e:	6643      	str	r3, [r0, #100]	; 0x64
 800f170:	81c2      	strh	r2, [r0, #14]
 800f172:	6183      	str	r3, [r0, #24]
 800f174:	4619      	mov	r1, r3
 800f176:	2208      	movs	r2, #8
 800f178:	305c      	adds	r0, #92	; 0x5c
 800f17a:	f000 f916 	bl	800f3aa <memset>
 800f17e:	4b0d      	ldr	r3, [pc, #52]	; (800f1b4 <std+0x58>)
 800f180:	6263      	str	r3, [r4, #36]	; 0x24
 800f182:	4b0d      	ldr	r3, [pc, #52]	; (800f1b8 <std+0x5c>)
 800f184:	62a3      	str	r3, [r4, #40]	; 0x28
 800f186:	4b0d      	ldr	r3, [pc, #52]	; (800f1bc <std+0x60>)
 800f188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f18a:	4b0d      	ldr	r3, [pc, #52]	; (800f1c0 <std+0x64>)
 800f18c:	6323      	str	r3, [r4, #48]	; 0x30
 800f18e:	4b0d      	ldr	r3, [pc, #52]	; (800f1c4 <std+0x68>)
 800f190:	6224      	str	r4, [r4, #32]
 800f192:	429c      	cmp	r4, r3
 800f194:	d006      	beq.n	800f1a4 <std+0x48>
 800f196:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f19a:	4294      	cmp	r4, r2
 800f19c:	d002      	beq.n	800f1a4 <std+0x48>
 800f19e:	33d0      	adds	r3, #208	; 0xd0
 800f1a0:	429c      	cmp	r4, r3
 800f1a2:	d105      	bne.n	800f1b0 <std+0x54>
 800f1a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1ac:	f000 b970 	b.w	800f490 <__retarget_lock_init_recursive>
 800f1b0:	bd10      	pop	{r4, pc}
 800f1b2:	bf00      	nop
 800f1b4:	0800f305 	.word	0x0800f305
 800f1b8:	0800f327 	.word	0x0800f327
 800f1bc:	0800f35f 	.word	0x0800f35f
 800f1c0:	0800f383 	.word	0x0800f383
 800f1c4:	2000892c 	.word	0x2000892c

0800f1c8 <stdio_exit_handler>:
 800f1c8:	4a02      	ldr	r2, [pc, #8]	; (800f1d4 <stdio_exit_handler+0xc>)
 800f1ca:	4903      	ldr	r1, [pc, #12]	; (800f1d8 <stdio_exit_handler+0x10>)
 800f1cc:	4803      	ldr	r0, [pc, #12]	; (800f1dc <stdio_exit_handler+0x14>)
 800f1ce:	f000 b869 	b.w	800f2a4 <_fwalk_sglue>
 800f1d2:	bf00      	nop
 800f1d4:	2000002c 	.word	0x2000002c
 800f1d8:	0800fda5 	.word	0x0800fda5
 800f1dc:	20000038 	.word	0x20000038

0800f1e0 <cleanup_stdio>:
 800f1e0:	6841      	ldr	r1, [r0, #4]
 800f1e2:	4b0c      	ldr	r3, [pc, #48]	; (800f214 <cleanup_stdio+0x34>)
 800f1e4:	4299      	cmp	r1, r3
 800f1e6:	b510      	push	{r4, lr}
 800f1e8:	4604      	mov	r4, r0
 800f1ea:	d001      	beq.n	800f1f0 <cleanup_stdio+0x10>
 800f1ec:	f000 fdda 	bl	800fda4 <_fflush_r>
 800f1f0:	68a1      	ldr	r1, [r4, #8]
 800f1f2:	4b09      	ldr	r3, [pc, #36]	; (800f218 <cleanup_stdio+0x38>)
 800f1f4:	4299      	cmp	r1, r3
 800f1f6:	d002      	beq.n	800f1fe <cleanup_stdio+0x1e>
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f000 fdd3 	bl	800fda4 <_fflush_r>
 800f1fe:	68e1      	ldr	r1, [r4, #12]
 800f200:	4b06      	ldr	r3, [pc, #24]	; (800f21c <cleanup_stdio+0x3c>)
 800f202:	4299      	cmp	r1, r3
 800f204:	d004      	beq.n	800f210 <cleanup_stdio+0x30>
 800f206:	4620      	mov	r0, r4
 800f208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f20c:	f000 bdca 	b.w	800fda4 <_fflush_r>
 800f210:	bd10      	pop	{r4, pc}
 800f212:	bf00      	nop
 800f214:	2000892c 	.word	0x2000892c
 800f218:	20008994 	.word	0x20008994
 800f21c:	200089fc 	.word	0x200089fc

0800f220 <global_stdio_init.part.0>:
 800f220:	b510      	push	{r4, lr}
 800f222:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <global_stdio_init.part.0+0x30>)
 800f224:	4c0b      	ldr	r4, [pc, #44]	; (800f254 <global_stdio_init.part.0+0x34>)
 800f226:	4a0c      	ldr	r2, [pc, #48]	; (800f258 <global_stdio_init.part.0+0x38>)
 800f228:	601a      	str	r2, [r3, #0]
 800f22a:	4620      	mov	r0, r4
 800f22c:	2200      	movs	r2, #0
 800f22e:	2104      	movs	r1, #4
 800f230:	f7ff ff94 	bl	800f15c <std>
 800f234:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f238:	2201      	movs	r2, #1
 800f23a:	2109      	movs	r1, #9
 800f23c:	f7ff ff8e 	bl	800f15c <std>
 800f240:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f244:	2202      	movs	r2, #2
 800f246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f24a:	2112      	movs	r1, #18
 800f24c:	f7ff bf86 	b.w	800f15c <std>
 800f250:	20008a64 	.word	0x20008a64
 800f254:	2000892c 	.word	0x2000892c
 800f258:	0800f1c9 	.word	0x0800f1c9

0800f25c <__sfp_lock_acquire>:
 800f25c:	4801      	ldr	r0, [pc, #4]	; (800f264 <__sfp_lock_acquire+0x8>)
 800f25e:	f000 b918 	b.w	800f492 <__retarget_lock_acquire_recursive>
 800f262:	bf00      	nop
 800f264:	20008a6d 	.word	0x20008a6d

0800f268 <__sfp_lock_release>:
 800f268:	4801      	ldr	r0, [pc, #4]	; (800f270 <__sfp_lock_release+0x8>)
 800f26a:	f000 b913 	b.w	800f494 <__retarget_lock_release_recursive>
 800f26e:	bf00      	nop
 800f270:	20008a6d 	.word	0x20008a6d

0800f274 <__sinit>:
 800f274:	b510      	push	{r4, lr}
 800f276:	4604      	mov	r4, r0
 800f278:	f7ff fff0 	bl	800f25c <__sfp_lock_acquire>
 800f27c:	6a23      	ldr	r3, [r4, #32]
 800f27e:	b11b      	cbz	r3, 800f288 <__sinit+0x14>
 800f280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f284:	f7ff bff0 	b.w	800f268 <__sfp_lock_release>
 800f288:	4b04      	ldr	r3, [pc, #16]	; (800f29c <__sinit+0x28>)
 800f28a:	6223      	str	r3, [r4, #32]
 800f28c:	4b04      	ldr	r3, [pc, #16]	; (800f2a0 <__sinit+0x2c>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d1f5      	bne.n	800f280 <__sinit+0xc>
 800f294:	f7ff ffc4 	bl	800f220 <global_stdio_init.part.0>
 800f298:	e7f2      	b.n	800f280 <__sinit+0xc>
 800f29a:	bf00      	nop
 800f29c:	0800f1e1 	.word	0x0800f1e1
 800f2a0:	20008a64 	.word	0x20008a64

0800f2a4 <_fwalk_sglue>:
 800f2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2a8:	4607      	mov	r7, r0
 800f2aa:	4688      	mov	r8, r1
 800f2ac:	4614      	mov	r4, r2
 800f2ae:	2600      	movs	r6, #0
 800f2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2b4:	f1b9 0901 	subs.w	r9, r9, #1
 800f2b8:	d505      	bpl.n	800f2c6 <_fwalk_sglue+0x22>
 800f2ba:	6824      	ldr	r4, [r4, #0]
 800f2bc:	2c00      	cmp	r4, #0
 800f2be:	d1f7      	bne.n	800f2b0 <_fwalk_sglue+0xc>
 800f2c0:	4630      	mov	r0, r6
 800f2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2c6:	89ab      	ldrh	r3, [r5, #12]
 800f2c8:	2b01      	cmp	r3, #1
 800f2ca:	d907      	bls.n	800f2dc <_fwalk_sglue+0x38>
 800f2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	d003      	beq.n	800f2dc <_fwalk_sglue+0x38>
 800f2d4:	4629      	mov	r1, r5
 800f2d6:	4638      	mov	r0, r7
 800f2d8:	47c0      	blx	r8
 800f2da:	4306      	orrs	r6, r0
 800f2dc:	3568      	adds	r5, #104	; 0x68
 800f2de:	e7e9      	b.n	800f2b4 <_fwalk_sglue+0x10>

0800f2e0 <iprintf>:
 800f2e0:	b40f      	push	{r0, r1, r2, r3}
 800f2e2:	b507      	push	{r0, r1, r2, lr}
 800f2e4:	4906      	ldr	r1, [pc, #24]	; (800f300 <iprintf+0x20>)
 800f2e6:	ab04      	add	r3, sp, #16
 800f2e8:	6808      	ldr	r0, [r1, #0]
 800f2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800f2ee:	6881      	ldr	r1, [r0, #8]
 800f2f0:	9301      	str	r3, [sp, #4]
 800f2f2:	f000 fa27 	bl	800f744 <_vfiprintf_r>
 800f2f6:	b003      	add	sp, #12
 800f2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f2fc:	b004      	add	sp, #16
 800f2fe:	4770      	bx	lr
 800f300:	20000084 	.word	0x20000084

0800f304 <__sread>:
 800f304:	b510      	push	{r4, lr}
 800f306:	460c      	mov	r4, r1
 800f308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f30c:	f000 f878 	bl	800f400 <_read_r>
 800f310:	2800      	cmp	r0, #0
 800f312:	bfab      	itete	ge
 800f314:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f316:	89a3      	ldrhlt	r3, [r4, #12]
 800f318:	181b      	addge	r3, r3, r0
 800f31a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f31e:	bfac      	ite	ge
 800f320:	6563      	strge	r3, [r4, #84]	; 0x54
 800f322:	81a3      	strhlt	r3, [r4, #12]
 800f324:	bd10      	pop	{r4, pc}

0800f326 <__swrite>:
 800f326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f32a:	461f      	mov	r7, r3
 800f32c:	898b      	ldrh	r3, [r1, #12]
 800f32e:	05db      	lsls	r3, r3, #23
 800f330:	4605      	mov	r5, r0
 800f332:	460c      	mov	r4, r1
 800f334:	4616      	mov	r6, r2
 800f336:	d505      	bpl.n	800f344 <__swrite+0x1e>
 800f338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f33c:	2302      	movs	r3, #2
 800f33e:	2200      	movs	r2, #0
 800f340:	f000 f84c 	bl	800f3dc <_lseek_r>
 800f344:	89a3      	ldrh	r3, [r4, #12]
 800f346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f34a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f34e:	81a3      	strh	r3, [r4, #12]
 800f350:	4632      	mov	r2, r6
 800f352:	463b      	mov	r3, r7
 800f354:	4628      	mov	r0, r5
 800f356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f35a:	f000 b863 	b.w	800f424 <_write_r>

0800f35e <__sseek>:
 800f35e:	b510      	push	{r4, lr}
 800f360:	460c      	mov	r4, r1
 800f362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f366:	f000 f839 	bl	800f3dc <_lseek_r>
 800f36a:	1c43      	adds	r3, r0, #1
 800f36c:	89a3      	ldrh	r3, [r4, #12]
 800f36e:	bf15      	itete	ne
 800f370:	6560      	strne	r0, [r4, #84]	; 0x54
 800f372:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f376:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f37a:	81a3      	strheq	r3, [r4, #12]
 800f37c:	bf18      	it	ne
 800f37e:	81a3      	strhne	r3, [r4, #12]
 800f380:	bd10      	pop	{r4, pc}

0800f382 <__sclose>:
 800f382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f386:	f000 b819 	b.w	800f3bc <_close_r>

0800f38a <memcmp>:
 800f38a:	b510      	push	{r4, lr}
 800f38c:	3901      	subs	r1, #1
 800f38e:	4402      	add	r2, r0
 800f390:	4290      	cmp	r0, r2
 800f392:	d101      	bne.n	800f398 <memcmp+0xe>
 800f394:	2000      	movs	r0, #0
 800f396:	e005      	b.n	800f3a4 <memcmp+0x1a>
 800f398:	7803      	ldrb	r3, [r0, #0]
 800f39a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f39e:	42a3      	cmp	r3, r4
 800f3a0:	d001      	beq.n	800f3a6 <memcmp+0x1c>
 800f3a2:	1b18      	subs	r0, r3, r4
 800f3a4:	bd10      	pop	{r4, pc}
 800f3a6:	3001      	adds	r0, #1
 800f3a8:	e7f2      	b.n	800f390 <memcmp+0x6>

0800f3aa <memset>:
 800f3aa:	4402      	add	r2, r0
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	d100      	bne.n	800f3b4 <memset+0xa>
 800f3b2:	4770      	bx	lr
 800f3b4:	f803 1b01 	strb.w	r1, [r3], #1
 800f3b8:	e7f9      	b.n	800f3ae <memset+0x4>
	...

0800f3bc <_close_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	4d06      	ldr	r5, [pc, #24]	; (800f3d8 <_close_r+0x1c>)
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	4608      	mov	r0, r1
 800f3c6:	602b      	str	r3, [r5, #0]
 800f3c8:	f7f1 fc17 	bl	8000bfa <_close>
 800f3cc:	1c43      	adds	r3, r0, #1
 800f3ce:	d102      	bne.n	800f3d6 <_close_r+0x1a>
 800f3d0:	682b      	ldr	r3, [r5, #0]
 800f3d2:	b103      	cbz	r3, 800f3d6 <_close_r+0x1a>
 800f3d4:	6023      	str	r3, [r4, #0]
 800f3d6:	bd38      	pop	{r3, r4, r5, pc}
 800f3d8:	20008a68 	.word	0x20008a68

0800f3dc <_lseek_r>:
 800f3dc:	b538      	push	{r3, r4, r5, lr}
 800f3de:	4d07      	ldr	r5, [pc, #28]	; (800f3fc <_lseek_r+0x20>)
 800f3e0:	4604      	mov	r4, r0
 800f3e2:	4608      	mov	r0, r1
 800f3e4:	4611      	mov	r1, r2
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	602a      	str	r2, [r5, #0]
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	f7f1 fc2c 	bl	8000c48 <_lseek>
 800f3f0:	1c43      	adds	r3, r0, #1
 800f3f2:	d102      	bne.n	800f3fa <_lseek_r+0x1e>
 800f3f4:	682b      	ldr	r3, [r5, #0]
 800f3f6:	b103      	cbz	r3, 800f3fa <_lseek_r+0x1e>
 800f3f8:	6023      	str	r3, [r4, #0]
 800f3fa:	bd38      	pop	{r3, r4, r5, pc}
 800f3fc:	20008a68 	.word	0x20008a68

0800f400 <_read_r>:
 800f400:	b538      	push	{r3, r4, r5, lr}
 800f402:	4d07      	ldr	r5, [pc, #28]	; (800f420 <_read_r+0x20>)
 800f404:	4604      	mov	r4, r0
 800f406:	4608      	mov	r0, r1
 800f408:	4611      	mov	r1, r2
 800f40a:	2200      	movs	r2, #0
 800f40c:	602a      	str	r2, [r5, #0]
 800f40e:	461a      	mov	r2, r3
 800f410:	f7f1 fbba 	bl	8000b88 <_read>
 800f414:	1c43      	adds	r3, r0, #1
 800f416:	d102      	bne.n	800f41e <_read_r+0x1e>
 800f418:	682b      	ldr	r3, [r5, #0]
 800f41a:	b103      	cbz	r3, 800f41e <_read_r+0x1e>
 800f41c:	6023      	str	r3, [r4, #0]
 800f41e:	bd38      	pop	{r3, r4, r5, pc}
 800f420:	20008a68 	.word	0x20008a68

0800f424 <_write_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	4d07      	ldr	r5, [pc, #28]	; (800f444 <_write_r+0x20>)
 800f428:	4604      	mov	r4, r0
 800f42a:	4608      	mov	r0, r1
 800f42c:	4611      	mov	r1, r2
 800f42e:	2200      	movs	r2, #0
 800f430:	602a      	str	r2, [r5, #0]
 800f432:	461a      	mov	r2, r3
 800f434:	f7f1 fbc5 	bl	8000bc2 <_write>
 800f438:	1c43      	adds	r3, r0, #1
 800f43a:	d102      	bne.n	800f442 <_write_r+0x1e>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b103      	cbz	r3, 800f442 <_write_r+0x1e>
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	bd38      	pop	{r3, r4, r5, pc}
 800f444:	20008a68 	.word	0x20008a68

0800f448 <__libc_init_array>:
 800f448:	b570      	push	{r4, r5, r6, lr}
 800f44a:	4d0d      	ldr	r5, [pc, #52]	; (800f480 <__libc_init_array+0x38>)
 800f44c:	4c0d      	ldr	r4, [pc, #52]	; (800f484 <__libc_init_array+0x3c>)
 800f44e:	1b64      	subs	r4, r4, r5
 800f450:	10a4      	asrs	r4, r4, #2
 800f452:	2600      	movs	r6, #0
 800f454:	42a6      	cmp	r6, r4
 800f456:	d109      	bne.n	800f46c <__libc_init_array+0x24>
 800f458:	4d0b      	ldr	r5, [pc, #44]	; (800f488 <__libc_init_array+0x40>)
 800f45a:	4c0c      	ldr	r4, [pc, #48]	; (800f48c <__libc_init_array+0x44>)
 800f45c:	f000 fe52 	bl	8010104 <_init>
 800f460:	1b64      	subs	r4, r4, r5
 800f462:	10a4      	asrs	r4, r4, #2
 800f464:	2600      	movs	r6, #0
 800f466:	42a6      	cmp	r6, r4
 800f468:	d105      	bne.n	800f476 <__libc_init_array+0x2e>
 800f46a:	bd70      	pop	{r4, r5, r6, pc}
 800f46c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f470:	4798      	blx	r3
 800f472:	3601      	adds	r6, #1
 800f474:	e7ee      	b.n	800f454 <__libc_init_array+0xc>
 800f476:	f855 3b04 	ldr.w	r3, [r5], #4
 800f47a:	4798      	blx	r3
 800f47c:	3601      	adds	r6, #1
 800f47e:	e7f2      	b.n	800f466 <__libc_init_array+0x1e>
 800f480:	08012ce8 	.word	0x08012ce8
 800f484:	08012ce8 	.word	0x08012ce8
 800f488:	08012ce8 	.word	0x08012ce8
 800f48c:	08012cec 	.word	0x08012cec

0800f490 <__retarget_lock_init_recursive>:
 800f490:	4770      	bx	lr

0800f492 <__retarget_lock_acquire_recursive>:
 800f492:	4770      	bx	lr

0800f494 <__retarget_lock_release_recursive>:
 800f494:	4770      	bx	lr

0800f496 <memcpy>:
 800f496:	440a      	add	r2, r1
 800f498:	4291      	cmp	r1, r2
 800f49a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f49e:	d100      	bne.n	800f4a2 <memcpy+0xc>
 800f4a0:	4770      	bx	lr
 800f4a2:	b510      	push	{r4, lr}
 800f4a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f4ac:	4291      	cmp	r1, r2
 800f4ae:	d1f9      	bne.n	800f4a4 <memcpy+0xe>
 800f4b0:	bd10      	pop	{r4, pc}
	...

0800f4b4 <__assert_func>:
 800f4b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4b6:	4614      	mov	r4, r2
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	4b09      	ldr	r3, [pc, #36]	; (800f4e0 <__assert_func+0x2c>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	4605      	mov	r5, r0
 800f4c0:	68d8      	ldr	r0, [r3, #12]
 800f4c2:	b14c      	cbz	r4, 800f4d8 <__assert_func+0x24>
 800f4c4:	4b07      	ldr	r3, [pc, #28]	; (800f4e4 <__assert_func+0x30>)
 800f4c6:	9100      	str	r1, [sp, #0]
 800f4c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f4cc:	4906      	ldr	r1, [pc, #24]	; (800f4e8 <__assert_func+0x34>)
 800f4ce:	462b      	mov	r3, r5
 800f4d0:	f000 fc90 	bl	800fdf4 <fiprintf>
 800f4d4:	f000 fd46 	bl	800ff64 <abort>
 800f4d8:	4b04      	ldr	r3, [pc, #16]	; (800f4ec <__assert_func+0x38>)
 800f4da:	461c      	mov	r4, r3
 800f4dc:	e7f3      	b.n	800f4c6 <__assert_func+0x12>
 800f4de:	bf00      	nop
 800f4e0:	20000084 	.word	0x20000084
 800f4e4:	08012c71 	.word	0x08012c71
 800f4e8:	08012c7e 	.word	0x08012c7e
 800f4ec:	08012cac 	.word	0x08012cac

0800f4f0 <_free_r>:
 800f4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f4f2:	2900      	cmp	r1, #0
 800f4f4:	d044      	beq.n	800f580 <_free_r+0x90>
 800f4f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4fa:	9001      	str	r0, [sp, #4]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	f1a1 0404 	sub.w	r4, r1, #4
 800f502:	bfb8      	it	lt
 800f504:	18e4      	addlt	r4, r4, r3
 800f506:	f000 f8e7 	bl	800f6d8 <__malloc_lock>
 800f50a:	4a1e      	ldr	r2, [pc, #120]	; (800f584 <_free_r+0x94>)
 800f50c:	9801      	ldr	r0, [sp, #4]
 800f50e:	6813      	ldr	r3, [r2, #0]
 800f510:	b933      	cbnz	r3, 800f520 <_free_r+0x30>
 800f512:	6063      	str	r3, [r4, #4]
 800f514:	6014      	str	r4, [r2, #0]
 800f516:	b003      	add	sp, #12
 800f518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f51c:	f000 b8e2 	b.w	800f6e4 <__malloc_unlock>
 800f520:	42a3      	cmp	r3, r4
 800f522:	d908      	bls.n	800f536 <_free_r+0x46>
 800f524:	6825      	ldr	r5, [r4, #0]
 800f526:	1961      	adds	r1, r4, r5
 800f528:	428b      	cmp	r3, r1
 800f52a:	bf01      	itttt	eq
 800f52c:	6819      	ldreq	r1, [r3, #0]
 800f52e:	685b      	ldreq	r3, [r3, #4]
 800f530:	1949      	addeq	r1, r1, r5
 800f532:	6021      	streq	r1, [r4, #0]
 800f534:	e7ed      	b.n	800f512 <_free_r+0x22>
 800f536:	461a      	mov	r2, r3
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	b10b      	cbz	r3, 800f540 <_free_r+0x50>
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	d9fa      	bls.n	800f536 <_free_r+0x46>
 800f540:	6811      	ldr	r1, [r2, #0]
 800f542:	1855      	adds	r5, r2, r1
 800f544:	42a5      	cmp	r5, r4
 800f546:	d10b      	bne.n	800f560 <_free_r+0x70>
 800f548:	6824      	ldr	r4, [r4, #0]
 800f54a:	4421      	add	r1, r4
 800f54c:	1854      	adds	r4, r2, r1
 800f54e:	42a3      	cmp	r3, r4
 800f550:	6011      	str	r1, [r2, #0]
 800f552:	d1e0      	bne.n	800f516 <_free_r+0x26>
 800f554:	681c      	ldr	r4, [r3, #0]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	6053      	str	r3, [r2, #4]
 800f55a:	440c      	add	r4, r1
 800f55c:	6014      	str	r4, [r2, #0]
 800f55e:	e7da      	b.n	800f516 <_free_r+0x26>
 800f560:	d902      	bls.n	800f568 <_free_r+0x78>
 800f562:	230c      	movs	r3, #12
 800f564:	6003      	str	r3, [r0, #0]
 800f566:	e7d6      	b.n	800f516 <_free_r+0x26>
 800f568:	6825      	ldr	r5, [r4, #0]
 800f56a:	1961      	adds	r1, r4, r5
 800f56c:	428b      	cmp	r3, r1
 800f56e:	bf04      	itt	eq
 800f570:	6819      	ldreq	r1, [r3, #0]
 800f572:	685b      	ldreq	r3, [r3, #4]
 800f574:	6063      	str	r3, [r4, #4]
 800f576:	bf04      	itt	eq
 800f578:	1949      	addeq	r1, r1, r5
 800f57a:	6021      	streq	r1, [r4, #0]
 800f57c:	6054      	str	r4, [r2, #4]
 800f57e:	e7ca      	b.n	800f516 <_free_r+0x26>
 800f580:	b003      	add	sp, #12
 800f582:	bd30      	pop	{r4, r5, pc}
 800f584:	20008a70 	.word	0x20008a70

0800f588 <malloc>:
 800f588:	4b02      	ldr	r3, [pc, #8]	; (800f594 <malloc+0xc>)
 800f58a:	4601      	mov	r1, r0
 800f58c:	6818      	ldr	r0, [r3, #0]
 800f58e:	f000 b823 	b.w	800f5d8 <_malloc_r>
 800f592:	bf00      	nop
 800f594:	20000084 	.word	0x20000084

0800f598 <sbrk_aligned>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	4e0e      	ldr	r6, [pc, #56]	; (800f5d4 <sbrk_aligned+0x3c>)
 800f59c:	460c      	mov	r4, r1
 800f59e:	6831      	ldr	r1, [r6, #0]
 800f5a0:	4605      	mov	r5, r0
 800f5a2:	b911      	cbnz	r1, 800f5aa <sbrk_aligned+0x12>
 800f5a4:	f000 fcce 	bl	800ff44 <_sbrk_r>
 800f5a8:	6030      	str	r0, [r6, #0]
 800f5aa:	4621      	mov	r1, r4
 800f5ac:	4628      	mov	r0, r5
 800f5ae:	f000 fcc9 	bl	800ff44 <_sbrk_r>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	d00a      	beq.n	800f5cc <sbrk_aligned+0x34>
 800f5b6:	1cc4      	adds	r4, r0, #3
 800f5b8:	f024 0403 	bic.w	r4, r4, #3
 800f5bc:	42a0      	cmp	r0, r4
 800f5be:	d007      	beq.n	800f5d0 <sbrk_aligned+0x38>
 800f5c0:	1a21      	subs	r1, r4, r0
 800f5c2:	4628      	mov	r0, r5
 800f5c4:	f000 fcbe 	bl	800ff44 <_sbrk_r>
 800f5c8:	3001      	adds	r0, #1
 800f5ca:	d101      	bne.n	800f5d0 <sbrk_aligned+0x38>
 800f5cc:	f04f 34ff 	mov.w	r4, #4294967295
 800f5d0:	4620      	mov	r0, r4
 800f5d2:	bd70      	pop	{r4, r5, r6, pc}
 800f5d4:	20008a74 	.word	0x20008a74

0800f5d8 <_malloc_r>:
 800f5d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5dc:	1ccd      	adds	r5, r1, #3
 800f5de:	f025 0503 	bic.w	r5, r5, #3
 800f5e2:	3508      	adds	r5, #8
 800f5e4:	2d0c      	cmp	r5, #12
 800f5e6:	bf38      	it	cc
 800f5e8:	250c      	movcc	r5, #12
 800f5ea:	2d00      	cmp	r5, #0
 800f5ec:	4607      	mov	r7, r0
 800f5ee:	db01      	blt.n	800f5f4 <_malloc_r+0x1c>
 800f5f0:	42a9      	cmp	r1, r5
 800f5f2:	d905      	bls.n	800f600 <_malloc_r+0x28>
 800f5f4:	230c      	movs	r3, #12
 800f5f6:	603b      	str	r3, [r7, #0]
 800f5f8:	2600      	movs	r6, #0
 800f5fa:	4630      	mov	r0, r6
 800f5fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f600:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f6d4 <_malloc_r+0xfc>
 800f604:	f000 f868 	bl	800f6d8 <__malloc_lock>
 800f608:	f8d8 3000 	ldr.w	r3, [r8]
 800f60c:	461c      	mov	r4, r3
 800f60e:	bb5c      	cbnz	r4, 800f668 <_malloc_r+0x90>
 800f610:	4629      	mov	r1, r5
 800f612:	4638      	mov	r0, r7
 800f614:	f7ff ffc0 	bl	800f598 <sbrk_aligned>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	4604      	mov	r4, r0
 800f61c:	d155      	bne.n	800f6ca <_malloc_r+0xf2>
 800f61e:	f8d8 4000 	ldr.w	r4, [r8]
 800f622:	4626      	mov	r6, r4
 800f624:	2e00      	cmp	r6, #0
 800f626:	d145      	bne.n	800f6b4 <_malloc_r+0xdc>
 800f628:	2c00      	cmp	r4, #0
 800f62a:	d048      	beq.n	800f6be <_malloc_r+0xe6>
 800f62c:	6823      	ldr	r3, [r4, #0]
 800f62e:	4631      	mov	r1, r6
 800f630:	4638      	mov	r0, r7
 800f632:	eb04 0903 	add.w	r9, r4, r3
 800f636:	f000 fc85 	bl	800ff44 <_sbrk_r>
 800f63a:	4581      	cmp	r9, r0
 800f63c:	d13f      	bne.n	800f6be <_malloc_r+0xe6>
 800f63e:	6821      	ldr	r1, [r4, #0]
 800f640:	1a6d      	subs	r5, r5, r1
 800f642:	4629      	mov	r1, r5
 800f644:	4638      	mov	r0, r7
 800f646:	f7ff ffa7 	bl	800f598 <sbrk_aligned>
 800f64a:	3001      	adds	r0, #1
 800f64c:	d037      	beq.n	800f6be <_malloc_r+0xe6>
 800f64e:	6823      	ldr	r3, [r4, #0]
 800f650:	442b      	add	r3, r5
 800f652:	6023      	str	r3, [r4, #0]
 800f654:	f8d8 3000 	ldr.w	r3, [r8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d038      	beq.n	800f6ce <_malloc_r+0xf6>
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	42a2      	cmp	r2, r4
 800f660:	d12b      	bne.n	800f6ba <_malloc_r+0xe2>
 800f662:	2200      	movs	r2, #0
 800f664:	605a      	str	r2, [r3, #4]
 800f666:	e00f      	b.n	800f688 <_malloc_r+0xb0>
 800f668:	6822      	ldr	r2, [r4, #0]
 800f66a:	1b52      	subs	r2, r2, r5
 800f66c:	d41f      	bmi.n	800f6ae <_malloc_r+0xd6>
 800f66e:	2a0b      	cmp	r2, #11
 800f670:	d917      	bls.n	800f6a2 <_malloc_r+0xca>
 800f672:	1961      	adds	r1, r4, r5
 800f674:	42a3      	cmp	r3, r4
 800f676:	6025      	str	r5, [r4, #0]
 800f678:	bf18      	it	ne
 800f67a:	6059      	strne	r1, [r3, #4]
 800f67c:	6863      	ldr	r3, [r4, #4]
 800f67e:	bf08      	it	eq
 800f680:	f8c8 1000 	streq.w	r1, [r8]
 800f684:	5162      	str	r2, [r4, r5]
 800f686:	604b      	str	r3, [r1, #4]
 800f688:	4638      	mov	r0, r7
 800f68a:	f104 060b 	add.w	r6, r4, #11
 800f68e:	f000 f829 	bl	800f6e4 <__malloc_unlock>
 800f692:	f026 0607 	bic.w	r6, r6, #7
 800f696:	1d23      	adds	r3, r4, #4
 800f698:	1af2      	subs	r2, r6, r3
 800f69a:	d0ae      	beq.n	800f5fa <_malloc_r+0x22>
 800f69c:	1b9b      	subs	r3, r3, r6
 800f69e:	50a3      	str	r3, [r4, r2]
 800f6a0:	e7ab      	b.n	800f5fa <_malloc_r+0x22>
 800f6a2:	42a3      	cmp	r3, r4
 800f6a4:	6862      	ldr	r2, [r4, #4]
 800f6a6:	d1dd      	bne.n	800f664 <_malloc_r+0x8c>
 800f6a8:	f8c8 2000 	str.w	r2, [r8]
 800f6ac:	e7ec      	b.n	800f688 <_malloc_r+0xb0>
 800f6ae:	4623      	mov	r3, r4
 800f6b0:	6864      	ldr	r4, [r4, #4]
 800f6b2:	e7ac      	b.n	800f60e <_malloc_r+0x36>
 800f6b4:	4634      	mov	r4, r6
 800f6b6:	6876      	ldr	r6, [r6, #4]
 800f6b8:	e7b4      	b.n	800f624 <_malloc_r+0x4c>
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	e7cc      	b.n	800f658 <_malloc_r+0x80>
 800f6be:	230c      	movs	r3, #12
 800f6c0:	603b      	str	r3, [r7, #0]
 800f6c2:	4638      	mov	r0, r7
 800f6c4:	f000 f80e 	bl	800f6e4 <__malloc_unlock>
 800f6c8:	e797      	b.n	800f5fa <_malloc_r+0x22>
 800f6ca:	6025      	str	r5, [r4, #0]
 800f6cc:	e7dc      	b.n	800f688 <_malloc_r+0xb0>
 800f6ce:	605b      	str	r3, [r3, #4]
 800f6d0:	deff      	udf	#255	; 0xff
 800f6d2:	bf00      	nop
 800f6d4:	20008a70 	.word	0x20008a70

0800f6d8 <__malloc_lock>:
 800f6d8:	4801      	ldr	r0, [pc, #4]	; (800f6e0 <__malloc_lock+0x8>)
 800f6da:	f7ff beda 	b.w	800f492 <__retarget_lock_acquire_recursive>
 800f6de:	bf00      	nop
 800f6e0:	20008a6c 	.word	0x20008a6c

0800f6e4 <__malloc_unlock>:
 800f6e4:	4801      	ldr	r0, [pc, #4]	; (800f6ec <__malloc_unlock+0x8>)
 800f6e6:	f7ff bed5 	b.w	800f494 <__retarget_lock_release_recursive>
 800f6ea:	bf00      	nop
 800f6ec:	20008a6c 	.word	0x20008a6c

0800f6f0 <__sfputc_r>:
 800f6f0:	6893      	ldr	r3, [r2, #8]
 800f6f2:	3b01      	subs	r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	b410      	push	{r4}
 800f6f8:	6093      	str	r3, [r2, #8]
 800f6fa:	da08      	bge.n	800f70e <__sfputc_r+0x1e>
 800f6fc:	6994      	ldr	r4, [r2, #24]
 800f6fe:	42a3      	cmp	r3, r4
 800f700:	db01      	blt.n	800f706 <__sfputc_r+0x16>
 800f702:	290a      	cmp	r1, #10
 800f704:	d103      	bne.n	800f70e <__sfputc_r+0x1e>
 800f706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f70a:	f000 bb85 	b.w	800fe18 <__swbuf_r>
 800f70e:	6813      	ldr	r3, [r2, #0]
 800f710:	1c58      	adds	r0, r3, #1
 800f712:	6010      	str	r0, [r2, #0]
 800f714:	7019      	strb	r1, [r3, #0]
 800f716:	4608      	mov	r0, r1
 800f718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f71c:	4770      	bx	lr

0800f71e <__sfputs_r>:
 800f71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f720:	4606      	mov	r6, r0
 800f722:	460f      	mov	r7, r1
 800f724:	4614      	mov	r4, r2
 800f726:	18d5      	adds	r5, r2, r3
 800f728:	42ac      	cmp	r4, r5
 800f72a:	d101      	bne.n	800f730 <__sfputs_r+0x12>
 800f72c:	2000      	movs	r0, #0
 800f72e:	e007      	b.n	800f740 <__sfputs_r+0x22>
 800f730:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f734:	463a      	mov	r2, r7
 800f736:	4630      	mov	r0, r6
 800f738:	f7ff ffda 	bl	800f6f0 <__sfputc_r>
 800f73c:	1c43      	adds	r3, r0, #1
 800f73e:	d1f3      	bne.n	800f728 <__sfputs_r+0xa>
 800f740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f744 <_vfiprintf_r>:
 800f744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f748:	460d      	mov	r5, r1
 800f74a:	b09d      	sub	sp, #116	; 0x74
 800f74c:	4614      	mov	r4, r2
 800f74e:	4698      	mov	r8, r3
 800f750:	4606      	mov	r6, r0
 800f752:	b118      	cbz	r0, 800f75c <_vfiprintf_r+0x18>
 800f754:	6a03      	ldr	r3, [r0, #32]
 800f756:	b90b      	cbnz	r3, 800f75c <_vfiprintf_r+0x18>
 800f758:	f7ff fd8c 	bl	800f274 <__sinit>
 800f75c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f75e:	07d9      	lsls	r1, r3, #31
 800f760:	d405      	bmi.n	800f76e <_vfiprintf_r+0x2a>
 800f762:	89ab      	ldrh	r3, [r5, #12]
 800f764:	059a      	lsls	r2, r3, #22
 800f766:	d402      	bmi.n	800f76e <_vfiprintf_r+0x2a>
 800f768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f76a:	f7ff fe92 	bl	800f492 <__retarget_lock_acquire_recursive>
 800f76e:	89ab      	ldrh	r3, [r5, #12]
 800f770:	071b      	lsls	r3, r3, #28
 800f772:	d501      	bpl.n	800f778 <_vfiprintf_r+0x34>
 800f774:	692b      	ldr	r3, [r5, #16]
 800f776:	b99b      	cbnz	r3, 800f7a0 <_vfiprintf_r+0x5c>
 800f778:	4629      	mov	r1, r5
 800f77a:	4630      	mov	r0, r6
 800f77c:	f000 fb8a 	bl	800fe94 <__swsetup_r>
 800f780:	b170      	cbz	r0, 800f7a0 <_vfiprintf_r+0x5c>
 800f782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f784:	07dc      	lsls	r4, r3, #31
 800f786:	d504      	bpl.n	800f792 <_vfiprintf_r+0x4e>
 800f788:	f04f 30ff 	mov.w	r0, #4294967295
 800f78c:	b01d      	add	sp, #116	; 0x74
 800f78e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f792:	89ab      	ldrh	r3, [r5, #12]
 800f794:	0598      	lsls	r0, r3, #22
 800f796:	d4f7      	bmi.n	800f788 <_vfiprintf_r+0x44>
 800f798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f79a:	f7ff fe7b 	bl	800f494 <__retarget_lock_release_recursive>
 800f79e:	e7f3      	b.n	800f788 <_vfiprintf_r+0x44>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f7a4:	2320      	movs	r3, #32
 800f7a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f7aa:	f8cd 800c 	str.w	r8, [sp, #12]
 800f7ae:	2330      	movs	r3, #48	; 0x30
 800f7b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f964 <_vfiprintf_r+0x220>
 800f7b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f7b8:	f04f 0901 	mov.w	r9, #1
 800f7bc:	4623      	mov	r3, r4
 800f7be:	469a      	mov	sl, r3
 800f7c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f7c4:	b10a      	cbz	r2, 800f7ca <_vfiprintf_r+0x86>
 800f7c6:	2a25      	cmp	r2, #37	; 0x25
 800f7c8:	d1f9      	bne.n	800f7be <_vfiprintf_r+0x7a>
 800f7ca:	ebba 0b04 	subs.w	fp, sl, r4
 800f7ce:	d00b      	beq.n	800f7e8 <_vfiprintf_r+0xa4>
 800f7d0:	465b      	mov	r3, fp
 800f7d2:	4622      	mov	r2, r4
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f7ff ffa1 	bl	800f71e <__sfputs_r>
 800f7dc:	3001      	adds	r0, #1
 800f7de:	f000 80a9 	beq.w	800f934 <_vfiprintf_r+0x1f0>
 800f7e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7e4:	445a      	add	r2, fp
 800f7e6:	9209      	str	r2, [sp, #36]	; 0x24
 800f7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	f000 80a1 	beq.w	800f934 <_vfiprintf_r+0x1f0>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f7fc:	f10a 0a01 	add.w	sl, sl, #1
 800f800:	9304      	str	r3, [sp, #16]
 800f802:	9307      	str	r3, [sp, #28]
 800f804:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f808:	931a      	str	r3, [sp, #104]	; 0x68
 800f80a:	4654      	mov	r4, sl
 800f80c:	2205      	movs	r2, #5
 800f80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f812:	4854      	ldr	r0, [pc, #336]	; (800f964 <_vfiprintf_r+0x220>)
 800f814:	f7f0 fd14 	bl	8000240 <memchr>
 800f818:	9a04      	ldr	r2, [sp, #16]
 800f81a:	b9d8      	cbnz	r0, 800f854 <_vfiprintf_r+0x110>
 800f81c:	06d1      	lsls	r1, r2, #27
 800f81e:	bf44      	itt	mi
 800f820:	2320      	movmi	r3, #32
 800f822:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f826:	0713      	lsls	r3, r2, #28
 800f828:	bf44      	itt	mi
 800f82a:	232b      	movmi	r3, #43	; 0x2b
 800f82c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f830:	f89a 3000 	ldrb.w	r3, [sl]
 800f834:	2b2a      	cmp	r3, #42	; 0x2a
 800f836:	d015      	beq.n	800f864 <_vfiprintf_r+0x120>
 800f838:	9a07      	ldr	r2, [sp, #28]
 800f83a:	4654      	mov	r4, sl
 800f83c:	2000      	movs	r0, #0
 800f83e:	f04f 0c0a 	mov.w	ip, #10
 800f842:	4621      	mov	r1, r4
 800f844:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f848:	3b30      	subs	r3, #48	; 0x30
 800f84a:	2b09      	cmp	r3, #9
 800f84c:	d94d      	bls.n	800f8ea <_vfiprintf_r+0x1a6>
 800f84e:	b1b0      	cbz	r0, 800f87e <_vfiprintf_r+0x13a>
 800f850:	9207      	str	r2, [sp, #28]
 800f852:	e014      	b.n	800f87e <_vfiprintf_r+0x13a>
 800f854:	eba0 0308 	sub.w	r3, r0, r8
 800f858:	fa09 f303 	lsl.w	r3, r9, r3
 800f85c:	4313      	orrs	r3, r2
 800f85e:	9304      	str	r3, [sp, #16]
 800f860:	46a2      	mov	sl, r4
 800f862:	e7d2      	b.n	800f80a <_vfiprintf_r+0xc6>
 800f864:	9b03      	ldr	r3, [sp, #12]
 800f866:	1d19      	adds	r1, r3, #4
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	9103      	str	r1, [sp, #12]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	bfbb      	ittet	lt
 800f870:	425b      	neglt	r3, r3
 800f872:	f042 0202 	orrlt.w	r2, r2, #2
 800f876:	9307      	strge	r3, [sp, #28]
 800f878:	9307      	strlt	r3, [sp, #28]
 800f87a:	bfb8      	it	lt
 800f87c:	9204      	strlt	r2, [sp, #16]
 800f87e:	7823      	ldrb	r3, [r4, #0]
 800f880:	2b2e      	cmp	r3, #46	; 0x2e
 800f882:	d10c      	bne.n	800f89e <_vfiprintf_r+0x15a>
 800f884:	7863      	ldrb	r3, [r4, #1]
 800f886:	2b2a      	cmp	r3, #42	; 0x2a
 800f888:	d134      	bne.n	800f8f4 <_vfiprintf_r+0x1b0>
 800f88a:	9b03      	ldr	r3, [sp, #12]
 800f88c:	1d1a      	adds	r2, r3, #4
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	9203      	str	r2, [sp, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	bfb8      	it	lt
 800f896:	f04f 33ff 	movlt.w	r3, #4294967295
 800f89a:	3402      	adds	r4, #2
 800f89c:	9305      	str	r3, [sp, #20]
 800f89e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f974 <_vfiprintf_r+0x230>
 800f8a2:	7821      	ldrb	r1, [r4, #0]
 800f8a4:	2203      	movs	r2, #3
 800f8a6:	4650      	mov	r0, sl
 800f8a8:	f7f0 fcca 	bl	8000240 <memchr>
 800f8ac:	b138      	cbz	r0, 800f8be <_vfiprintf_r+0x17a>
 800f8ae:	9b04      	ldr	r3, [sp, #16]
 800f8b0:	eba0 000a 	sub.w	r0, r0, sl
 800f8b4:	2240      	movs	r2, #64	; 0x40
 800f8b6:	4082      	lsls	r2, r0
 800f8b8:	4313      	orrs	r3, r2
 800f8ba:	3401      	adds	r4, #1
 800f8bc:	9304      	str	r3, [sp, #16]
 800f8be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c2:	4829      	ldr	r0, [pc, #164]	; (800f968 <_vfiprintf_r+0x224>)
 800f8c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f8c8:	2206      	movs	r2, #6
 800f8ca:	f7f0 fcb9 	bl	8000240 <memchr>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d03f      	beq.n	800f952 <_vfiprintf_r+0x20e>
 800f8d2:	4b26      	ldr	r3, [pc, #152]	; (800f96c <_vfiprintf_r+0x228>)
 800f8d4:	bb1b      	cbnz	r3, 800f91e <_vfiprintf_r+0x1da>
 800f8d6:	9b03      	ldr	r3, [sp, #12]
 800f8d8:	3307      	adds	r3, #7
 800f8da:	f023 0307 	bic.w	r3, r3, #7
 800f8de:	3308      	adds	r3, #8
 800f8e0:	9303      	str	r3, [sp, #12]
 800f8e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8e4:	443b      	add	r3, r7
 800f8e6:	9309      	str	r3, [sp, #36]	; 0x24
 800f8e8:	e768      	b.n	800f7bc <_vfiprintf_r+0x78>
 800f8ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	e7a6      	b.n	800f842 <_vfiprintf_r+0xfe>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	3401      	adds	r4, #1
 800f8f8:	9305      	str	r3, [sp, #20]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	f04f 0c0a 	mov.w	ip, #10
 800f900:	4620      	mov	r0, r4
 800f902:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f906:	3a30      	subs	r2, #48	; 0x30
 800f908:	2a09      	cmp	r2, #9
 800f90a:	d903      	bls.n	800f914 <_vfiprintf_r+0x1d0>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d0c6      	beq.n	800f89e <_vfiprintf_r+0x15a>
 800f910:	9105      	str	r1, [sp, #20]
 800f912:	e7c4      	b.n	800f89e <_vfiprintf_r+0x15a>
 800f914:	fb0c 2101 	mla	r1, ip, r1, r2
 800f918:	4604      	mov	r4, r0
 800f91a:	2301      	movs	r3, #1
 800f91c:	e7f0      	b.n	800f900 <_vfiprintf_r+0x1bc>
 800f91e:	ab03      	add	r3, sp, #12
 800f920:	9300      	str	r3, [sp, #0]
 800f922:	462a      	mov	r2, r5
 800f924:	4b12      	ldr	r3, [pc, #72]	; (800f970 <_vfiprintf_r+0x22c>)
 800f926:	a904      	add	r1, sp, #16
 800f928:	4630      	mov	r0, r6
 800f92a:	f3af 8000 	nop.w
 800f92e:	4607      	mov	r7, r0
 800f930:	1c78      	adds	r0, r7, #1
 800f932:	d1d6      	bne.n	800f8e2 <_vfiprintf_r+0x19e>
 800f934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f936:	07d9      	lsls	r1, r3, #31
 800f938:	d405      	bmi.n	800f946 <_vfiprintf_r+0x202>
 800f93a:	89ab      	ldrh	r3, [r5, #12]
 800f93c:	059a      	lsls	r2, r3, #22
 800f93e:	d402      	bmi.n	800f946 <_vfiprintf_r+0x202>
 800f940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f942:	f7ff fda7 	bl	800f494 <__retarget_lock_release_recursive>
 800f946:	89ab      	ldrh	r3, [r5, #12]
 800f948:	065b      	lsls	r3, r3, #25
 800f94a:	f53f af1d 	bmi.w	800f788 <_vfiprintf_r+0x44>
 800f94e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f950:	e71c      	b.n	800f78c <_vfiprintf_r+0x48>
 800f952:	ab03      	add	r3, sp, #12
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	462a      	mov	r2, r5
 800f958:	4b05      	ldr	r3, [pc, #20]	; (800f970 <_vfiprintf_r+0x22c>)
 800f95a:	a904      	add	r1, sp, #16
 800f95c:	4630      	mov	r0, r6
 800f95e:	f000 f879 	bl	800fa54 <_printf_i>
 800f962:	e7e4      	b.n	800f92e <_vfiprintf_r+0x1ea>
 800f964:	08012cad 	.word	0x08012cad
 800f968:	08012cb7 	.word	0x08012cb7
 800f96c:	00000000 	.word	0x00000000
 800f970:	0800f71f 	.word	0x0800f71f
 800f974:	08012cb3 	.word	0x08012cb3

0800f978 <_printf_common>:
 800f978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f97c:	4616      	mov	r6, r2
 800f97e:	4699      	mov	r9, r3
 800f980:	688a      	ldr	r2, [r1, #8]
 800f982:	690b      	ldr	r3, [r1, #16]
 800f984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f988:	4293      	cmp	r3, r2
 800f98a:	bfb8      	it	lt
 800f98c:	4613      	movlt	r3, r2
 800f98e:	6033      	str	r3, [r6, #0]
 800f990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f994:	4607      	mov	r7, r0
 800f996:	460c      	mov	r4, r1
 800f998:	b10a      	cbz	r2, 800f99e <_printf_common+0x26>
 800f99a:	3301      	adds	r3, #1
 800f99c:	6033      	str	r3, [r6, #0]
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	0699      	lsls	r1, r3, #26
 800f9a2:	bf42      	ittt	mi
 800f9a4:	6833      	ldrmi	r3, [r6, #0]
 800f9a6:	3302      	addmi	r3, #2
 800f9a8:	6033      	strmi	r3, [r6, #0]
 800f9aa:	6825      	ldr	r5, [r4, #0]
 800f9ac:	f015 0506 	ands.w	r5, r5, #6
 800f9b0:	d106      	bne.n	800f9c0 <_printf_common+0x48>
 800f9b2:	f104 0a19 	add.w	sl, r4, #25
 800f9b6:	68e3      	ldr	r3, [r4, #12]
 800f9b8:	6832      	ldr	r2, [r6, #0]
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	42ab      	cmp	r3, r5
 800f9be:	dc26      	bgt.n	800fa0e <_printf_common+0x96>
 800f9c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f9c4:	1e13      	subs	r3, r2, #0
 800f9c6:	6822      	ldr	r2, [r4, #0]
 800f9c8:	bf18      	it	ne
 800f9ca:	2301      	movne	r3, #1
 800f9cc:	0692      	lsls	r2, r2, #26
 800f9ce:	d42b      	bmi.n	800fa28 <_printf_common+0xb0>
 800f9d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f9d4:	4649      	mov	r1, r9
 800f9d6:	4638      	mov	r0, r7
 800f9d8:	47c0      	blx	r8
 800f9da:	3001      	adds	r0, #1
 800f9dc:	d01e      	beq.n	800fa1c <_printf_common+0xa4>
 800f9de:	6823      	ldr	r3, [r4, #0]
 800f9e0:	6922      	ldr	r2, [r4, #16]
 800f9e2:	f003 0306 	and.w	r3, r3, #6
 800f9e6:	2b04      	cmp	r3, #4
 800f9e8:	bf02      	ittt	eq
 800f9ea:	68e5      	ldreq	r5, [r4, #12]
 800f9ec:	6833      	ldreq	r3, [r6, #0]
 800f9ee:	1aed      	subeq	r5, r5, r3
 800f9f0:	68a3      	ldr	r3, [r4, #8]
 800f9f2:	bf0c      	ite	eq
 800f9f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f9f8:	2500      	movne	r5, #0
 800f9fa:	4293      	cmp	r3, r2
 800f9fc:	bfc4      	itt	gt
 800f9fe:	1a9b      	subgt	r3, r3, r2
 800fa00:	18ed      	addgt	r5, r5, r3
 800fa02:	2600      	movs	r6, #0
 800fa04:	341a      	adds	r4, #26
 800fa06:	42b5      	cmp	r5, r6
 800fa08:	d11a      	bne.n	800fa40 <_printf_common+0xc8>
 800fa0a:	2000      	movs	r0, #0
 800fa0c:	e008      	b.n	800fa20 <_printf_common+0xa8>
 800fa0e:	2301      	movs	r3, #1
 800fa10:	4652      	mov	r2, sl
 800fa12:	4649      	mov	r1, r9
 800fa14:	4638      	mov	r0, r7
 800fa16:	47c0      	blx	r8
 800fa18:	3001      	adds	r0, #1
 800fa1a:	d103      	bne.n	800fa24 <_printf_common+0xac>
 800fa1c:	f04f 30ff 	mov.w	r0, #4294967295
 800fa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa24:	3501      	adds	r5, #1
 800fa26:	e7c6      	b.n	800f9b6 <_printf_common+0x3e>
 800fa28:	18e1      	adds	r1, r4, r3
 800fa2a:	1c5a      	adds	r2, r3, #1
 800fa2c:	2030      	movs	r0, #48	; 0x30
 800fa2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fa32:	4422      	add	r2, r4
 800fa34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fa38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fa3c:	3302      	adds	r3, #2
 800fa3e:	e7c7      	b.n	800f9d0 <_printf_common+0x58>
 800fa40:	2301      	movs	r3, #1
 800fa42:	4622      	mov	r2, r4
 800fa44:	4649      	mov	r1, r9
 800fa46:	4638      	mov	r0, r7
 800fa48:	47c0      	blx	r8
 800fa4a:	3001      	adds	r0, #1
 800fa4c:	d0e6      	beq.n	800fa1c <_printf_common+0xa4>
 800fa4e:	3601      	adds	r6, #1
 800fa50:	e7d9      	b.n	800fa06 <_printf_common+0x8e>
	...

0800fa54 <_printf_i>:
 800fa54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa58:	7e0f      	ldrb	r7, [r1, #24]
 800fa5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fa5c:	2f78      	cmp	r7, #120	; 0x78
 800fa5e:	4691      	mov	r9, r2
 800fa60:	4680      	mov	r8, r0
 800fa62:	460c      	mov	r4, r1
 800fa64:	469a      	mov	sl, r3
 800fa66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fa6a:	d807      	bhi.n	800fa7c <_printf_i+0x28>
 800fa6c:	2f62      	cmp	r7, #98	; 0x62
 800fa6e:	d80a      	bhi.n	800fa86 <_printf_i+0x32>
 800fa70:	2f00      	cmp	r7, #0
 800fa72:	f000 80d4 	beq.w	800fc1e <_printf_i+0x1ca>
 800fa76:	2f58      	cmp	r7, #88	; 0x58
 800fa78:	f000 80c0 	beq.w	800fbfc <_printf_i+0x1a8>
 800fa7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fa80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fa84:	e03a      	b.n	800fafc <_printf_i+0xa8>
 800fa86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fa8a:	2b15      	cmp	r3, #21
 800fa8c:	d8f6      	bhi.n	800fa7c <_printf_i+0x28>
 800fa8e:	a101      	add	r1, pc, #4	; (adr r1, 800fa94 <_printf_i+0x40>)
 800fa90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fa94:	0800faed 	.word	0x0800faed
 800fa98:	0800fb01 	.word	0x0800fb01
 800fa9c:	0800fa7d 	.word	0x0800fa7d
 800faa0:	0800fa7d 	.word	0x0800fa7d
 800faa4:	0800fa7d 	.word	0x0800fa7d
 800faa8:	0800fa7d 	.word	0x0800fa7d
 800faac:	0800fb01 	.word	0x0800fb01
 800fab0:	0800fa7d 	.word	0x0800fa7d
 800fab4:	0800fa7d 	.word	0x0800fa7d
 800fab8:	0800fa7d 	.word	0x0800fa7d
 800fabc:	0800fa7d 	.word	0x0800fa7d
 800fac0:	0800fc05 	.word	0x0800fc05
 800fac4:	0800fb2d 	.word	0x0800fb2d
 800fac8:	0800fbbf 	.word	0x0800fbbf
 800facc:	0800fa7d 	.word	0x0800fa7d
 800fad0:	0800fa7d 	.word	0x0800fa7d
 800fad4:	0800fc27 	.word	0x0800fc27
 800fad8:	0800fa7d 	.word	0x0800fa7d
 800fadc:	0800fb2d 	.word	0x0800fb2d
 800fae0:	0800fa7d 	.word	0x0800fa7d
 800fae4:	0800fa7d 	.word	0x0800fa7d
 800fae8:	0800fbc7 	.word	0x0800fbc7
 800faec:	682b      	ldr	r3, [r5, #0]
 800faee:	1d1a      	adds	r2, r3, #4
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	602a      	str	r2, [r5, #0]
 800faf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fafc:	2301      	movs	r3, #1
 800fafe:	e09f      	b.n	800fc40 <_printf_i+0x1ec>
 800fb00:	6820      	ldr	r0, [r4, #0]
 800fb02:	682b      	ldr	r3, [r5, #0]
 800fb04:	0607      	lsls	r7, r0, #24
 800fb06:	f103 0104 	add.w	r1, r3, #4
 800fb0a:	6029      	str	r1, [r5, #0]
 800fb0c:	d501      	bpl.n	800fb12 <_printf_i+0xbe>
 800fb0e:	681e      	ldr	r6, [r3, #0]
 800fb10:	e003      	b.n	800fb1a <_printf_i+0xc6>
 800fb12:	0646      	lsls	r6, r0, #25
 800fb14:	d5fb      	bpl.n	800fb0e <_printf_i+0xba>
 800fb16:	f9b3 6000 	ldrsh.w	r6, [r3]
 800fb1a:	2e00      	cmp	r6, #0
 800fb1c:	da03      	bge.n	800fb26 <_printf_i+0xd2>
 800fb1e:	232d      	movs	r3, #45	; 0x2d
 800fb20:	4276      	negs	r6, r6
 800fb22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb26:	485a      	ldr	r0, [pc, #360]	; (800fc90 <_printf_i+0x23c>)
 800fb28:	230a      	movs	r3, #10
 800fb2a:	e012      	b.n	800fb52 <_printf_i+0xfe>
 800fb2c:	682b      	ldr	r3, [r5, #0]
 800fb2e:	6820      	ldr	r0, [r4, #0]
 800fb30:	1d19      	adds	r1, r3, #4
 800fb32:	6029      	str	r1, [r5, #0]
 800fb34:	0605      	lsls	r5, r0, #24
 800fb36:	d501      	bpl.n	800fb3c <_printf_i+0xe8>
 800fb38:	681e      	ldr	r6, [r3, #0]
 800fb3a:	e002      	b.n	800fb42 <_printf_i+0xee>
 800fb3c:	0641      	lsls	r1, r0, #25
 800fb3e:	d5fb      	bpl.n	800fb38 <_printf_i+0xe4>
 800fb40:	881e      	ldrh	r6, [r3, #0]
 800fb42:	4853      	ldr	r0, [pc, #332]	; (800fc90 <_printf_i+0x23c>)
 800fb44:	2f6f      	cmp	r7, #111	; 0x6f
 800fb46:	bf0c      	ite	eq
 800fb48:	2308      	moveq	r3, #8
 800fb4a:	230a      	movne	r3, #10
 800fb4c:	2100      	movs	r1, #0
 800fb4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fb52:	6865      	ldr	r5, [r4, #4]
 800fb54:	60a5      	str	r5, [r4, #8]
 800fb56:	2d00      	cmp	r5, #0
 800fb58:	bfa2      	ittt	ge
 800fb5a:	6821      	ldrge	r1, [r4, #0]
 800fb5c:	f021 0104 	bicge.w	r1, r1, #4
 800fb60:	6021      	strge	r1, [r4, #0]
 800fb62:	b90e      	cbnz	r6, 800fb68 <_printf_i+0x114>
 800fb64:	2d00      	cmp	r5, #0
 800fb66:	d04b      	beq.n	800fc00 <_printf_i+0x1ac>
 800fb68:	4615      	mov	r5, r2
 800fb6a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fb6e:	fb03 6711 	mls	r7, r3, r1, r6
 800fb72:	5dc7      	ldrb	r7, [r0, r7]
 800fb74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fb78:	4637      	mov	r7, r6
 800fb7a:	42bb      	cmp	r3, r7
 800fb7c:	460e      	mov	r6, r1
 800fb7e:	d9f4      	bls.n	800fb6a <_printf_i+0x116>
 800fb80:	2b08      	cmp	r3, #8
 800fb82:	d10b      	bne.n	800fb9c <_printf_i+0x148>
 800fb84:	6823      	ldr	r3, [r4, #0]
 800fb86:	07de      	lsls	r6, r3, #31
 800fb88:	d508      	bpl.n	800fb9c <_printf_i+0x148>
 800fb8a:	6923      	ldr	r3, [r4, #16]
 800fb8c:	6861      	ldr	r1, [r4, #4]
 800fb8e:	4299      	cmp	r1, r3
 800fb90:	bfde      	ittt	le
 800fb92:	2330      	movle	r3, #48	; 0x30
 800fb94:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fb98:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fb9c:	1b52      	subs	r2, r2, r5
 800fb9e:	6122      	str	r2, [r4, #16]
 800fba0:	f8cd a000 	str.w	sl, [sp]
 800fba4:	464b      	mov	r3, r9
 800fba6:	aa03      	add	r2, sp, #12
 800fba8:	4621      	mov	r1, r4
 800fbaa:	4640      	mov	r0, r8
 800fbac:	f7ff fee4 	bl	800f978 <_printf_common>
 800fbb0:	3001      	adds	r0, #1
 800fbb2:	d14a      	bne.n	800fc4a <_printf_i+0x1f6>
 800fbb4:	f04f 30ff 	mov.w	r0, #4294967295
 800fbb8:	b004      	add	sp, #16
 800fbba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbbe:	6823      	ldr	r3, [r4, #0]
 800fbc0:	f043 0320 	orr.w	r3, r3, #32
 800fbc4:	6023      	str	r3, [r4, #0]
 800fbc6:	4833      	ldr	r0, [pc, #204]	; (800fc94 <_printf_i+0x240>)
 800fbc8:	2778      	movs	r7, #120	; 0x78
 800fbca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	6829      	ldr	r1, [r5, #0]
 800fbd2:	061f      	lsls	r7, r3, #24
 800fbd4:	f851 6b04 	ldr.w	r6, [r1], #4
 800fbd8:	d402      	bmi.n	800fbe0 <_printf_i+0x18c>
 800fbda:	065f      	lsls	r7, r3, #25
 800fbdc:	bf48      	it	mi
 800fbde:	b2b6      	uxthmi	r6, r6
 800fbe0:	07df      	lsls	r7, r3, #31
 800fbe2:	bf48      	it	mi
 800fbe4:	f043 0320 	orrmi.w	r3, r3, #32
 800fbe8:	6029      	str	r1, [r5, #0]
 800fbea:	bf48      	it	mi
 800fbec:	6023      	strmi	r3, [r4, #0]
 800fbee:	b91e      	cbnz	r6, 800fbf8 <_printf_i+0x1a4>
 800fbf0:	6823      	ldr	r3, [r4, #0]
 800fbf2:	f023 0320 	bic.w	r3, r3, #32
 800fbf6:	6023      	str	r3, [r4, #0]
 800fbf8:	2310      	movs	r3, #16
 800fbfa:	e7a7      	b.n	800fb4c <_printf_i+0xf8>
 800fbfc:	4824      	ldr	r0, [pc, #144]	; (800fc90 <_printf_i+0x23c>)
 800fbfe:	e7e4      	b.n	800fbca <_printf_i+0x176>
 800fc00:	4615      	mov	r5, r2
 800fc02:	e7bd      	b.n	800fb80 <_printf_i+0x12c>
 800fc04:	682b      	ldr	r3, [r5, #0]
 800fc06:	6826      	ldr	r6, [r4, #0]
 800fc08:	6961      	ldr	r1, [r4, #20]
 800fc0a:	1d18      	adds	r0, r3, #4
 800fc0c:	6028      	str	r0, [r5, #0]
 800fc0e:	0635      	lsls	r5, r6, #24
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	d501      	bpl.n	800fc18 <_printf_i+0x1c4>
 800fc14:	6019      	str	r1, [r3, #0]
 800fc16:	e002      	b.n	800fc1e <_printf_i+0x1ca>
 800fc18:	0670      	lsls	r0, r6, #25
 800fc1a:	d5fb      	bpl.n	800fc14 <_printf_i+0x1c0>
 800fc1c:	8019      	strh	r1, [r3, #0]
 800fc1e:	2300      	movs	r3, #0
 800fc20:	6123      	str	r3, [r4, #16]
 800fc22:	4615      	mov	r5, r2
 800fc24:	e7bc      	b.n	800fba0 <_printf_i+0x14c>
 800fc26:	682b      	ldr	r3, [r5, #0]
 800fc28:	1d1a      	adds	r2, r3, #4
 800fc2a:	602a      	str	r2, [r5, #0]
 800fc2c:	681d      	ldr	r5, [r3, #0]
 800fc2e:	6862      	ldr	r2, [r4, #4]
 800fc30:	2100      	movs	r1, #0
 800fc32:	4628      	mov	r0, r5
 800fc34:	f7f0 fb04 	bl	8000240 <memchr>
 800fc38:	b108      	cbz	r0, 800fc3e <_printf_i+0x1ea>
 800fc3a:	1b40      	subs	r0, r0, r5
 800fc3c:	6060      	str	r0, [r4, #4]
 800fc3e:	6863      	ldr	r3, [r4, #4]
 800fc40:	6123      	str	r3, [r4, #16]
 800fc42:	2300      	movs	r3, #0
 800fc44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fc48:	e7aa      	b.n	800fba0 <_printf_i+0x14c>
 800fc4a:	6923      	ldr	r3, [r4, #16]
 800fc4c:	462a      	mov	r2, r5
 800fc4e:	4649      	mov	r1, r9
 800fc50:	4640      	mov	r0, r8
 800fc52:	47d0      	blx	sl
 800fc54:	3001      	adds	r0, #1
 800fc56:	d0ad      	beq.n	800fbb4 <_printf_i+0x160>
 800fc58:	6823      	ldr	r3, [r4, #0]
 800fc5a:	079b      	lsls	r3, r3, #30
 800fc5c:	d413      	bmi.n	800fc86 <_printf_i+0x232>
 800fc5e:	68e0      	ldr	r0, [r4, #12]
 800fc60:	9b03      	ldr	r3, [sp, #12]
 800fc62:	4298      	cmp	r0, r3
 800fc64:	bfb8      	it	lt
 800fc66:	4618      	movlt	r0, r3
 800fc68:	e7a6      	b.n	800fbb8 <_printf_i+0x164>
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	4632      	mov	r2, r6
 800fc6e:	4649      	mov	r1, r9
 800fc70:	4640      	mov	r0, r8
 800fc72:	47d0      	blx	sl
 800fc74:	3001      	adds	r0, #1
 800fc76:	d09d      	beq.n	800fbb4 <_printf_i+0x160>
 800fc78:	3501      	adds	r5, #1
 800fc7a:	68e3      	ldr	r3, [r4, #12]
 800fc7c:	9903      	ldr	r1, [sp, #12]
 800fc7e:	1a5b      	subs	r3, r3, r1
 800fc80:	42ab      	cmp	r3, r5
 800fc82:	dcf2      	bgt.n	800fc6a <_printf_i+0x216>
 800fc84:	e7eb      	b.n	800fc5e <_printf_i+0x20a>
 800fc86:	2500      	movs	r5, #0
 800fc88:	f104 0619 	add.w	r6, r4, #25
 800fc8c:	e7f5      	b.n	800fc7a <_printf_i+0x226>
 800fc8e:	bf00      	nop
 800fc90:	08012cbe 	.word	0x08012cbe
 800fc94:	08012ccf 	.word	0x08012ccf

0800fc98 <__sflush_r>:
 800fc98:	898a      	ldrh	r2, [r1, #12]
 800fc9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc9e:	4605      	mov	r5, r0
 800fca0:	0710      	lsls	r0, r2, #28
 800fca2:	460c      	mov	r4, r1
 800fca4:	d458      	bmi.n	800fd58 <__sflush_r+0xc0>
 800fca6:	684b      	ldr	r3, [r1, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	dc05      	bgt.n	800fcb8 <__sflush_r+0x20>
 800fcac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	dc02      	bgt.n	800fcb8 <__sflush_r+0x20>
 800fcb2:	2000      	movs	r0, #0
 800fcb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fcba:	2e00      	cmp	r6, #0
 800fcbc:	d0f9      	beq.n	800fcb2 <__sflush_r+0x1a>
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fcc4:	682f      	ldr	r7, [r5, #0]
 800fcc6:	6a21      	ldr	r1, [r4, #32]
 800fcc8:	602b      	str	r3, [r5, #0]
 800fcca:	d032      	beq.n	800fd32 <__sflush_r+0x9a>
 800fccc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fcce:	89a3      	ldrh	r3, [r4, #12]
 800fcd0:	075a      	lsls	r2, r3, #29
 800fcd2:	d505      	bpl.n	800fce0 <__sflush_r+0x48>
 800fcd4:	6863      	ldr	r3, [r4, #4]
 800fcd6:	1ac0      	subs	r0, r0, r3
 800fcd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fcda:	b10b      	cbz	r3, 800fce0 <__sflush_r+0x48>
 800fcdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fcde:	1ac0      	subs	r0, r0, r3
 800fce0:	2300      	movs	r3, #0
 800fce2:	4602      	mov	r2, r0
 800fce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fce6:	6a21      	ldr	r1, [r4, #32]
 800fce8:	4628      	mov	r0, r5
 800fcea:	47b0      	blx	r6
 800fcec:	1c43      	adds	r3, r0, #1
 800fcee:	89a3      	ldrh	r3, [r4, #12]
 800fcf0:	d106      	bne.n	800fd00 <__sflush_r+0x68>
 800fcf2:	6829      	ldr	r1, [r5, #0]
 800fcf4:	291d      	cmp	r1, #29
 800fcf6:	d82b      	bhi.n	800fd50 <__sflush_r+0xb8>
 800fcf8:	4a29      	ldr	r2, [pc, #164]	; (800fda0 <__sflush_r+0x108>)
 800fcfa:	410a      	asrs	r2, r1
 800fcfc:	07d6      	lsls	r6, r2, #31
 800fcfe:	d427      	bmi.n	800fd50 <__sflush_r+0xb8>
 800fd00:	2200      	movs	r2, #0
 800fd02:	6062      	str	r2, [r4, #4]
 800fd04:	04d9      	lsls	r1, r3, #19
 800fd06:	6922      	ldr	r2, [r4, #16]
 800fd08:	6022      	str	r2, [r4, #0]
 800fd0a:	d504      	bpl.n	800fd16 <__sflush_r+0x7e>
 800fd0c:	1c42      	adds	r2, r0, #1
 800fd0e:	d101      	bne.n	800fd14 <__sflush_r+0x7c>
 800fd10:	682b      	ldr	r3, [r5, #0]
 800fd12:	b903      	cbnz	r3, 800fd16 <__sflush_r+0x7e>
 800fd14:	6560      	str	r0, [r4, #84]	; 0x54
 800fd16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd18:	602f      	str	r7, [r5, #0]
 800fd1a:	2900      	cmp	r1, #0
 800fd1c:	d0c9      	beq.n	800fcb2 <__sflush_r+0x1a>
 800fd1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd22:	4299      	cmp	r1, r3
 800fd24:	d002      	beq.n	800fd2c <__sflush_r+0x94>
 800fd26:	4628      	mov	r0, r5
 800fd28:	f7ff fbe2 	bl	800f4f0 <_free_r>
 800fd2c:	2000      	movs	r0, #0
 800fd2e:	6360      	str	r0, [r4, #52]	; 0x34
 800fd30:	e7c0      	b.n	800fcb4 <__sflush_r+0x1c>
 800fd32:	2301      	movs	r3, #1
 800fd34:	4628      	mov	r0, r5
 800fd36:	47b0      	blx	r6
 800fd38:	1c41      	adds	r1, r0, #1
 800fd3a:	d1c8      	bne.n	800fcce <__sflush_r+0x36>
 800fd3c:	682b      	ldr	r3, [r5, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d0c5      	beq.n	800fcce <__sflush_r+0x36>
 800fd42:	2b1d      	cmp	r3, #29
 800fd44:	d001      	beq.n	800fd4a <__sflush_r+0xb2>
 800fd46:	2b16      	cmp	r3, #22
 800fd48:	d101      	bne.n	800fd4e <__sflush_r+0xb6>
 800fd4a:	602f      	str	r7, [r5, #0]
 800fd4c:	e7b1      	b.n	800fcb2 <__sflush_r+0x1a>
 800fd4e:	89a3      	ldrh	r3, [r4, #12]
 800fd50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd54:	81a3      	strh	r3, [r4, #12]
 800fd56:	e7ad      	b.n	800fcb4 <__sflush_r+0x1c>
 800fd58:	690f      	ldr	r7, [r1, #16]
 800fd5a:	2f00      	cmp	r7, #0
 800fd5c:	d0a9      	beq.n	800fcb2 <__sflush_r+0x1a>
 800fd5e:	0793      	lsls	r3, r2, #30
 800fd60:	680e      	ldr	r6, [r1, #0]
 800fd62:	bf08      	it	eq
 800fd64:	694b      	ldreq	r3, [r1, #20]
 800fd66:	600f      	str	r7, [r1, #0]
 800fd68:	bf18      	it	ne
 800fd6a:	2300      	movne	r3, #0
 800fd6c:	eba6 0807 	sub.w	r8, r6, r7
 800fd70:	608b      	str	r3, [r1, #8]
 800fd72:	f1b8 0f00 	cmp.w	r8, #0
 800fd76:	dd9c      	ble.n	800fcb2 <__sflush_r+0x1a>
 800fd78:	6a21      	ldr	r1, [r4, #32]
 800fd7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd7c:	4643      	mov	r3, r8
 800fd7e:	463a      	mov	r2, r7
 800fd80:	4628      	mov	r0, r5
 800fd82:	47b0      	blx	r6
 800fd84:	2800      	cmp	r0, #0
 800fd86:	dc06      	bgt.n	800fd96 <__sflush_r+0xfe>
 800fd88:	89a3      	ldrh	r3, [r4, #12]
 800fd8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	f04f 30ff 	mov.w	r0, #4294967295
 800fd94:	e78e      	b.n	800fcb4 <__sflush_r+0x1c>
 800fd96:	4407      	add	r7, r0
 800fd98:	eba8 0800 	sub.w	r8, r8, r0
 800fd9c:	e7e9      	b.n	800fd72 <__sflush_r+0xda>
 800fd9e:	bf00      	nop
 800fda0:	dfbffffe 	.word	0xdfbffffe

0800fda4 <_fflush_r>:
 800fda4:	b538      	push	{r3, r4, r5, lr}
 800fda6:	690b      	ldr	r3, [r1, #16]
 800fda8:	4605      	mov	r5, r0
 800fdaa:	460c      	mov	r4, r1
 800fdac:	b913      	cbnz	r3, 800fdb4 <_fflush_r+0x10>
 800fdae:	2500      	movs	r5, #0
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	bd38      	pop	{r3, r4, r5, pc}
 800fdb4:	b118      	cbz	r0, 800fdbe <_fflush_r+0x1a>
 800fdb6:	6a03      	ldr	r3, [r0, #32]
 800fdb8:	b90b      	cbnz	r3, 800fdbe <_fflush_r+0x1a>
 800fdba:	f7ff fa5b 	bl	800f274 <__sinit>
 800fdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d0f3      	beq.n	800fdae <_fflush_r+0xa>
 800fdc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fdc8:	07d0      	lsls	r0, r2, #31
 800fdca:	d404      	bmi.n	800fdd6 <_fflush_r+0x32>
 800fdcc:	0599      	lsls	r1, r3, #22
 800fdce:	d402      	bmi.n	800fdd6 <_fflush_r+0x32>
 800fdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdd2:	f7ff fb5e 	bl	800f492 <__retarget_lock_acquire_recursive>
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	4621      	mov	r1, r4
 800fdda:	f7ff ff5d 	bl	800fc98 <__sflush_r>
 800fdde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fde0:	07da      	lsls	r2, r3, #31
 800fde2:	4605      	mov	r5, r0
 800fde4:	d4e4      	bmi.n	800fdb0 <_fflush_r+0xc>
 800fde6:	89a3      	ldrh	r3, [r4, #12]
 800fde8:	059b      	lsls	r3, r3, #22
 800fdea:	d4e1      	bmi.n	800fdb0 <_fflush_r+0xc>
 800fdec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fdee:	f7ff fb51 	bl	800f494 <__retarget_lock_release_recursive>
 800fdf2:	e7dd      	b.n	800fdb0 <_fflush_r+0xc>

0800fdf4 <fiprintf>:
 800fdf4:	b40e      	push	{r1, r2, r3}
 800fdf6:	b503      	push	{r0, r1, lr}
 800fdf8:	4601      	mov	r1, r0
 800fdfa:	ab03      	add	r3, sp, #12
 800fdfc:	4805      	ldr	r0, [pc, #20]	; (800fe14 <fiprintf+0x20>)
 800fdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe02:	6800      	ldr	r0, [r0, #0]
 800fe04:	9301      	str	r3, [sp, #4]
 800fe06:	f7ff fc9d 	bl	800f744 <_vfiprintf_r>
 800fe0a:	b002      	add	sp, #8
 800fe0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe10:	b003      	add	sp, #12
 800fe12:	4770      	bx	lr
 800fe14:	20000084 	.word	0x20000084

0800fe18 <__swbuf_r>:
 800fe18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe1a:	460e      	mov	r6, r1
 800fe1c:	4614      	mov	r4, r2
 800fe1e:	4605      	mov	r5, r0
 800fe20:	b118      	cbz	r0, 800fe2a <__swbuf_r+0x12>
 800fe22:	6a03      	ldr	r3, [r0, #32]
 800fe24:	b90b      	cbnz	r3, 800fe2a <__swbuf_r+0x12>
 800fe26:	f7ff fa25 	bl	800f274 <__sinit>
 800fe2a:	69a3      	ldr	r3, [r4, #24]
 800fe2c:	60a3      	str	r3, [r4, #8]
 800fe2e:	89a3      	ldrh	r3, [r4, #12]
 800fe30:	071a      	lsls	r2, r3, #28
 800fe32:	d525      	bpl.n	800fe80 <__swbuf_r+0x68>
 800fe34:	6923      	ldr	r3, [r4, #16]
 800fe36:	b31b      	cbz	r3, 800fe80 <__swbuf_r+0x68>
 800fe38:	6823      	ldr	r3, [r4, #0]
 800fe3a:	6922      	ldr	r2, [r4, #16]
 800fe3c:	1a98      	subs	r0, r3, r2
 800fe3e:	6963      	ldr	r3, [r4, #20]
 800fe40:	b2f6      	uxtb	r6, r6
 800fe42:	4283      	cmp	r3, r0
 800fe44:	4637      	mov	r7, r6
 800fe46:	dc04      	bgt.n	800fe52 <__swbuf_r+0x3a>
 800fe48:	4621      	mov	r1, r4
 800fe4a:	4628      	mov	r0, r5
 800fe4c:	f7ff ffaa 	bl	800fda4 <_fflush_r>
 800fe50:	b9e0      	cbnz	r0, 800fe8c <__swbuf_r+0x74>
 800fe52:	68a3      	ldr	r3, [r4, #8]
 800fe54:	3b01      	subs	r3, #1
 800fe56:	60a3      	str	r3, [r4, #8]
 800fe58:	6823      	ldr	r3, [r4, #0]
 800fe5a:	1c5a      	adds	r2, r3, #1
 800fe5c:	6022      	str	r2, [r4, #0]
 800fe5e:	701e      	strb	r6, [r3, #0]
 800fe60:	6962      	ldr	r2, [r4, #20]
 800fe62:	1c43      	adds	r3, r0, #1
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d004      	beq.n	800fe72 <__swbuf_r+0x5a>
 800fe68:	89a3      	ldrh	r3, [r4, #12]
 800fe6a:	07db      	lsls	r3, r3, #31
 800fe6c:	d506      	bpl.n	800fe7c <__swbuf_r+0x64>
 800fe6e:	2e0a      	cmp	r6, #10
 800fe70:	d104      	bne.n	800fe7c <__swbuf_r+0x64>
 800fe72:	4621      	mov	r1, r4
 800fe74:	4628      	mov	r0, r5
 800fe76:	f7ff ff95 	bl	800fda4 <_fflush_r>
 800fe7a:	b938      	cbnz	r0, 800fe8c <__swbuf_r+0x74>
 800fe7c:	4638      	mov	r0, r7
 800fe7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe80:	4621      	mov	r1, r4
 800fe82:	4628      	mov	r0, r5
 800fe84:	f000 f806 	bl	800fe94 <__swsetup_r>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	d0d5      	beq.n	800fe38 <__swbuf_r+0x20>
 800fe8c:	f04f 37ff 	mov.w	r7, #4294967295
 800fe90:	e7f4      	b.n	800fe7c <__swbuf_r+0x64>
	...

0800fe94 <__swsetup_r>:
 800fe94:	b538      	push	{r3, r4, r5, lr}
 800fe96:	4b2a      	ldr	r3, [pc, #168]	; (800ff40 <__swsetup_r+0xac>)
 800fe98:	4605      	mov	r5, r0
 800fe9a:	6818      	ldr	r0, [r3, #0]
 800fe9c:	460c      	mov	r4, r1
 800fe9e:	b118      	cbz	r0, 800fea8 <__swsetup_r+0x14>
 800fea0:	6a03      	ldr	r3, [r0, #32]
 800fea2:	b90b      	cbnz	r3, 800fea8 <__swsetup_r+0x14>
 800fea4:	f7ff f9e6 	bl	800f274 <__sinit>
 800fea8:	89a3      	ldrh	r3, [r4, #12]
 800feaa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800feae:	0718      	lsls	r0, r3, #28
 800feb0:	d422      	bmi.n	800fef8 <__swsetup_r+0x64>
 800feb2:	06d9      	lsls	r1, r3, #27
 800feb4:	d407      	bmi.n	800fec6 <__swsetup_r+0x32>
 800feb6:	2309      	movs	r3, #9
 800feb8:	602b      	str	r3, [r5, #0]
 800feba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800febe:	81a3      	strh	r3, [r4, #12]
 800fec0:	f04f 30ff 	mov.w	r0, #4294967295
 800fec4:	e034      	b.n	800ff30 <__swsetup_r+0x9c>
 800fec6:	0758      	lsls	r0, r3, #29
 800fec8:	d512      	bpl.n	800fef0 <__swsetup_r+0x5c>
 800feca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fecc:	b141      	cbz	r1, 800fee0 <__swsetup_r+0x4c>
 800fece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fed2:	4299      	cmp	r1, r3
 800fed4:	d002      	beq.n	800fedc <__swsetup_r+0x48>
 800fed6:	4628      	mov	r0, r5
 800fed8:	f7ff fb0a 	bl	800f4f0 <_free_r>
 800fedc:	2300      	movs	r3, #0
 800fede:	6363      	str	r3, [r4, #52]	; 0x34
 800fee0:	89a3      	ldrh	r3, [r4, #12]
 800fee2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fee6:	81a3      	strh	r3, [r4, #12]
 800fee8:	2300      	movs	r3, #0
 800feea:	6063      	str	r3, [r4, #4]
 800feec:	6923      	ldr	r3, [r4, #16]
 800feee:	6023      	str	r3, [r4, #0]
 800fef0:	89a3      	ldrh	r3, [r4, #12]
 800fef2:	f043 0308 	orr.w	r3, r3, #8
 800fef6:	81a3      	strh	r3, [r4, #12]
 800fef8:	6923      	ldr	r3, [r4, #16]
 800fefa:	b94b      	cbnz	r3, 800ff10 <__swsetup_r+0x7c>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ff02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ff06:	d003      	beq.n	800ff10 <__swsetup_r+0x7c>
 800ff08:	4621      	mov	r1, r4
 800ff0a:	4628      	mov	r0, r5
 800ff0c:	f000 f857 	bl	800ffbe <__smakebuf_r>
 800ff10:	89a0      	ldrh	r0, [r4, #12]
 800ff12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ff16:	f010 0301 	ands.w	r3, r0, #1
 800ff1a:	d00a      	beq.n	800ff32 <__swsetup_r+0x9e>
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	60a3      	str	r3, [r4, #8]
 800ff20:	6963      	ldr	r3, [r4, #20]
 800ff22:	425b      	negs	r3, r3
 800ff24:	61a3      	str	r3, [r4, #24]
 800ff26:	6923      	ldr	r3, [r4, #16]
 800ff28:	b943      	cbnz	r3, 800ff3c <__swsetup_r+0xa8>
 800ff2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ff2e:	d1c4      	bne.n	800feba <__swsetup_r+0x26>
 800ff30:	bd38      	pop	{r3, r4, r5, pc}
 800ff32:	0781      	lsls	r1, r0, #30
 800ff34:	bf58      	it	pl
 800ff36:	6963      	ldrpl	r3, [r4, #20]
 800ff38:	60a3      	str	r3, [r4, #8]
 800ff3a:	e7f4      	b.n	800ff26 <__swsetup_r+0x92>
 800ff3c:	2000      	movs	r0, #0
 800ff3e:	e7f7      	b.n	800ff30 <__swsetup_r+0x9c>
 800ff40:	20000084 	.word	0x20000084

0800ff44 <_sbrk_r>:
 800ff44:	b538      	push	{r3, r4, r5, lr}
 800ff46:	4d06      	ldr	r5, [pc, #24]	; (800ff60 <_sbrk_r+0x1c>)
 800ff48:	2300      	movs	r3, #0
 800ff4a:	4604      	mov	r4, r0
 800ff4c:	4608      	mov	r0, r1
 800ff4e:	602b      	str	r3, [r5, #0]
 800ff50:	f7f0 fe88 	bl	8000c64 <_sbrk>
 800ff54:	1c43      	adds	r3, r0, #1
 800ff56:	d102      	bne.n	800ff5e <_sbrk_r+0x1a>
 800ff58:	682b      	ldr	r3, [r5, #0]
 800ff5a:	b103      	cbz	r3, 800ff5e <_sbrk_r+0x1a>
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	bd38      	pop	{r3, r4, r5, pc}
 800ff60:	20008a68 	.word	0x20008a68

0800ff64 <abort>:
 800ff64:	b508      	push	{r3, lr}
 800ff66:	2006      	movs	r0, #6
 800ff68:	f000 f88e 	bl	8010088 <raise>
 800ff6c:	2001      	movs	r0, #1
 800ff6e:	f7f0 fe01 	bl	8000b74 <_exit>

0800ff72 <__swhatbuf_r>:
 800ff72:	b570      	push	{r4, r5, r6, lr}
 800ff74:	460c      	mov	r4, r1
 800ff76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff7a:	2900      	cmp	r1, #0
 800ff7c:	b096      	sub	sp, #88	; 0x58
 800ff7e:	4615      	mov	r5, r2
 800ff80:	461e      	mov	r6, r3
 800ff82:	da0d      	bge.n	800ffa0 <__swhatbuf_r+0x2e>
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ff8a:	f04f 0100 	mov.w	r1, #0
 800ff8e:	bf0c      	ite	eq
 800ff90:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ff94:	2340      	movne	r3, #64	; 0x40
 800ff96:	2000      	movs	r0, #0
 800ff98:	6031      	str	r1, [r6, #0]
 800ff9a:	602b      	str	r3, [r5, #0]
 800ff9c:	b016      	add	sp, #88	; 0x58
 800ff9e:	bd70      	pop	{r4, r5, r6, pc}
 800ffa0:	466a      	mov	r2, sp
 800ffa2:	f000 f879 	bl	8010098 <_fstat_r>
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	dbec      	blt.n	800ff84 <__swhatbuf_r+0x12>
 800ffaa:	9901      	ldr	r1, [sp, #4]
 800ffac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ffb0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ffb4:	4259      	negs	r1, r3
 800ffb6:	4159      	adcs	r1, r3
 800ffb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffbc:	e7eb      	b.n	800ff96 <__swhatbuf_r+0x24>

0800ffbe <__smakebuf_r>:
 800ffbe:	898b      	ldrh	r3, [r1, #12]
 800ffc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffc2:	079d      	lsls	r5, r3, #30
 800ffc4:	4606      	mov	r6, r0
 800ffc6:	460c      	mov	r4, r1
 800ffc8:	d507      	bpl.n	800ffda <__smakebuf_r+0x1c>
 800ffca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ffce:	6023      	str	r3, [r4, #0]
 800ffd0:	6123      	str	r3, [r4, #16]
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	6163      	str	r3, [r4, #20]
 800ffd6:	b002      	add	sp, #8
 800ffd8:	bd70      	pop	{r4, r5, r6, pc}
 800ffda:	ab01      	add	r3, sp, #4
 800ffdc:	466a      	mov	r2, sp
 800ffde:	f7ff ffc8 	bl	800ff72 <__swhatbuf_r>
 800ffe2:	9900      	ldr	r1, [sp, #0]
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	4630      	mov	r0, r6
 800ffe8:	f7ff faf6 	bl	800f5d8 <_malloc_r>
 800ffec:	b948      	cbnz	r0, 8010002 <__smakebuf_r+0x44>
 800ffee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fff2:	059a      	lsls	r2, r3, #22
 800fff4:	d4ef      	bmi.n	800ffd6 <__smakebuf_r+0x18>
 800fff6:	f023 0303 	bic.w	r3, r3, #3
 800fffa:	f043 0302 	orr.w	r3, r3, #2
 800fffe:	81a3      	strh	r3, [r4, #12]
 8010000:	e7e3      	b.n	800ffca <__smakebuf_r+0xc>
 8010002:	89a3      	ldrh	r3, [r4, #12]
 8010004:	6020      	str	r0, [r4, #0]
 8010006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801000a:	81a3      	strh	r3, [r4, #12]
 801000c:	9b00      	ldr	r3, [sp, #0]
 801000e:	6163      	str	r3, [r4, #20]
 8010010:	9b01      	ldr	r3, [sp, #4]
 8010012:	6120      	str	r0, [r4, #16]
 8010014:	b15b      	cbz	r3, 801002e <__smakebuf_r+0x70>
 8010016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801001a:	4630      	mov	r0, r6
 801001c:	f000 f84e 	bl	80100bc <_isatty_r>
 8010020:	b128      	cbz	r0, 801002e <__smakebuf_r+0x70>
 8010022:	89a3      	ldrh	r3, [r4, #12]
 8010024:	f023 0303 	bic.w	r3, r3, #3
 8010028:	f043 0301 	orr.w	r3, r3, #1
 801002c:	81a3      	strh	r3, [r4, #12]
 801002e:	89a3      	ldrh	r3, [r4, #12]
 8010030:	431d      	orrs	r5, r3
 8010032:	81a5      	strh	r5, [r4, #12]
 8010034:	e7cf      	b.n	800ffd6 <__smakebuf_r+0x18>

08010036 <_raise_r>:
 8010036:	291f      	cmp	r1, #31
 8010038:	b538      	push	{r3, r4, r5, lr}
 801003a:	4604      	mov	r4, r0
 801003c:	460d      	mov	r5, r1
 801003e:	d904      	bls.n	801004a <_raise_r+0x14>
 8010040:	2316      	movs	r3, #22
 8010042:	6003      	str	r3, [r0, #0]
 8010044:	f04f 30ff 	mov.w	r0, #4294967295
 8010048:	bd38      	pop	{r3, r4, r5, pc}
 801004a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801004c:	b112      	cbz	r2, 8010054 <_raise_r+0x1e>
 801004e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010052:	b94b      	cbnz	r3, 8010068 <_raise_r+0x32>
 8010054:	4620      	mov	r0, r4
 8010056:	f000 f853 	bl	8010100 <_getpid_r>
 801005a:	462a      	mov	r2, r5
 801005c:	4601      	mov	r1, r0
 801005e:	4620      	mov	r0, r4
 8010060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010064:	f000 b83a 	b.w	80100dc <_kill_r>
 8010068:	2b01      	cmp	r3, #1
 801006a:	d00a      	beq.n	8010082 <_raise_r+0x4c>
 801006c:	1c59      	adds	r1, r3, #1
 801006e:	d103      	bne.n	8010078 <_raise_r+0x42>
 8010070:	2316      	movs	r3, #22
 8010072:	6003      	str	r3, [r0, #0]
 8010074:	2001      	movs	r0, #1
 8010076:	e7e7      	b.n	8010048 <_raise_r+0x12>
 8010078:	2400      	movs	r4, #0
 801007a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801007e:	4628      	mov	r0, r5
 8010080:	4798      	blx	r3
 8010082:	2000      	movs	r0, #0
 8010084:	e7e0      	b.n	8010048 <_raise_r+0x12>
	...

08010088 <raise>:
 8010088:	4b02      	ldr	r3, [pc, #8]	; (8010094 <raise+0xc>)
 801008a:	4601      	mov	r1, r0
 801008c:	6818      	ldr	r0, [r3, #0]
 801008e:	f7ff bfd2 	b.w	8010036 <_raise_r>
 8010092:	bf00      	nop
 8010094:	20000084 	.word	0x20000084

08010098 <_fstat_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d07      	ldr	r5, [pc, #28]	; (80100b8 <_fstat_r+0x20>)
 801009c:	2300      	movs	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	4608      	mov	r0, r1
 80100a2:	4611      	mov	r1, r2
 80100a4:	602b      	str	r3, [r5, #0]
 80100a6:	f7f0 fdb4 	bl	8000c12 <_fstat>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d102      	bne.n	80100b4 <_fstat_r+0x1c>
 80100ae:	682b      	ldr	r3, [r5, #0]
 80100b0:	b103      	cbz	r3, 80100b4 <_fstat_r+0x1c>
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	bd38      	pop	{r3, r4, r5, pc}
 80100b6:	bf00      	nop
 80100b8:	20008a68 	.word	0x20008a68

080100bc <_isatty_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d06      	ldr	r5, [pc, #24]	; (80100d8 <_isatty_r+0x1c>)
 80100c0:	2300      	movs	r3, #0
 80100c2:	4604      	mov	r4, r0
 80100c4:	4608      	mov	r0, r1
 80100c6:	602b      	str	r3, [r5, #0]
 80100c8:	f7f0 fdb3 	bl	8000c32 <_isatty>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	d102      	bne.n	80100d6 <_isatty_r+0x1a>
 80100d0:	682b      	ldr	r3, [r5, #0]
 80100d2:	b103      	cbz	r3, 80100d6 <_isatty_r+0x1a>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	bd38      	pop	{r3, r4, r5, pc}
 80100d8:	20008a68 	.word	0x20008a68

080100dc <_kill_r>:
 80100dc:	b538      	push	{r3, r4, r5, lr}
 80100de:	4d07      	ldr	r5, [pc, #28]	; (80100fc <_kill_r+0x20>)
 80100e0:	2300      	movs	r3, #0
 80100e2:	4604      	mov	r4, r0
 80100e4:	4608      	mov	r0, r1
 80100e6:	4611      	mov	r1, r2
 80100e8:	602b      	str	r3, [r5, #0]
 80100ea:	f7f0 fd31 	bl	8000b50 <_kill>
 80100ee:	1c43      	adds	r3, r0, #1
 80100f0:	d102      	bne.n	80100f8 <_kill_r+0x1c>
 80100f2:	682b      	ldr	r3, [r5, #0]
 80100f4:	b103      	cbz	r3, 80100f8 <_kill_r+0x1c>
 80100f6:	6023      	str	r3, [r4, #0]
 80100f8:	bd38      	pop	{r3, r4, r5, pc}
 80100fa:	bf00      	nop
 80100fc:	20008a68 	.word	0x20008a68

08010100 <_getpid_r>:
 8010100:	f7f0 bd1e 	b.w	8000b40 <_getpid>

08010104 <_init>:
 8010104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010106:	bf00      	nop
 8010108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801010a:	bc08      	pop	{r3}
 801010c:	469e      	mov	lr, r3
 801010e:	4770      	bx	lr

08010110 <_fini>:
 8010110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010112:	bf00      	nop
 8010114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010116:	bc08      	pop	{r3}
 8010118:	469e      	mov	lr, r3
 801011a:	4770      	bx	lr
