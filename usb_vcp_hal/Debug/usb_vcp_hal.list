
usb_vcp_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006090  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006290  08006290  00016290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006350  08006350  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08006350  08006350  00016350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006358  08006358  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006358  08006358  00016358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800635c  0800635c  0001635c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  080063d4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08006474  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004bac  200001b4  08006514  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20004d60  08006514  00024d60  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019614  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003096  00000000  00000000  000397f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  0003c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001018  00000000  00000000  0003d9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000034f9  00000000  00000000  0003e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013e8a  00000000  00000000  00041ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00101536  00000000  00000000  00055d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00157291  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000049e4  00000000  00000000  001572e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006278 	.word	0x08006278

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08006278 	.word	0x08006278

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fb85 	bl	8000c56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f81c 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f912 	bl	8000778 <MX_GPIO_Init>
  MX_ETH_Init();
 8000554:	f000 f88a 	bl	800066c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f8d6 	bl	8000708 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800055c:	f000 f904 	bl	8000768 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f002 ff96 	bl	8003490 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000564:	4a05      	ldr	r2, [pc, #20]	; (800057c <main+0x38>)
 8000566:	2100      	movs	r1, #0
 8000568:	4805      	ldr	r0, [pc, #20]	; (8000580 <main+0x3c>)
 800056a:	f002 fffb 	bl	8003564 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <main+0x40>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f002 ffc0 	bl	80034f8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x34>
 800057a:	bf00      	nop
 800057c:	080062b4 	.word	0x080062b4
 8000580:	080008fd 	.word	0x080008fd
 8000584:	20000340 	.word	0x20000340

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2234      	movs	r2, #52	; 0x34
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 fda4 	bl	80060e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0308 	add.w	r3, r7, #8
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ac:	f001 f9a6 	bl	80018fc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	4b2c      	ldr	r3, [pc, #176]	; (8000664 <SystemClock_Config+0xdc>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	4a2b      	ldr	r2, [pc, #172]	; (8000664 <SystemClock_Config+0xdc>)
 80005b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ba:	6413      	str	r3, [r2, #64]	; 0x40
 80005bc:	4b29      	ldr	r3, [pc, #164]	; (8000664 <SystemClock_Config+0xdc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <SystemClock_Config+0xe0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <SystemClock_Config+0xe0>)
 80005d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005d6:	6013      	str	r3, [r2, #0]
 80005d8:	4b23      	ldr	r3, [pc, #140]	; (8000668 <SystemClock_Config+0xe0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e4:	2301      	movs	r3, #1
 80005e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f8:	2304      	movs	r3, #4
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005fc:	2360      	movs	r3, #96	; 0x60
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	4618      	mov	r0, r3
 8000612:	f001 f9d3 	bl	80019bc <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800061c:	f000 f976 	bl	800090c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000620:	f001 f97c 	bl	800191c <HAL_PWREx_EnableOverDrive>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800062a:	f000 f96f 	bl	800090c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062e:	230f      	movs	r3, #15
 8000630:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000632:	2302      	movs	r3, #2
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000644:	f107 0308 	add.w	r3, r7, #8
 8000648:	2103      	movs	r1, #3
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fc64 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000656:	f000 f959 	bl	800090c <Error_Handler>
  }
}
 800065a:	bf00      	nop
 800065c:	3750      	adds	r7, #80	; 0x50
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40023800 	.word	0x40023800
 8000668:	40007000 	.word	0x40007000

0800066c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ETH_Init+0x84>)
 8000672:	4a20      	ldr	r2, [pc, #128]	; (80006f4 <MX_ETH_Init+0x88>)
 8000674:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000676:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <MX_ETH_Init+0x8c>)
 800067e:	2280      	movs	r2, #128	; 0x80
 8000680:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000684:	22e1      	movs	r2, #225	; 0xe1
 8000686:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_ETH_Init+0x8c>)
 800068a:	2200      	movs	r2, #0
 800068c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000690:	2200      	movs	r2, #0
 8000692:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_ETH_Init+0x8c>)
 8000696:	2200      	movs	r2, #0
 8000698:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_ETH_Init+0x84>)
 800069c:	4a16      	ldr	r2, [pc, #88]	; (80006f8 <MX_ETH_Init+0x8c>)
 800069e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_ETH_Init+0x84>)
 80006a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006a6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ETH_Init+0x84>)
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <MX_ETH_Init+0x90>)
 80006ac:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ae:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_ETH_Init+0x84>)
 80006b0:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_ETH_Init+0x94>)
 80006b2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_ETH_Init+0x84>)
 80006b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006ba:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <MX_ETH_Init+0x84>)
 80006be:	f000 fc31 	bl	8000f24 <HAL_ETH_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006c8:	f000 f920 	bl	800090c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006cc:	2238      	movs	r2, #56	; 0x38
 80006ce:	2100      	movs	r1, #0
 80006d0:	480c      	ldr	r0, [pc, #48]	; (8000704 <MX_ETH_Init+0x98>)
 80006d2:	f005 fd07 	bl	80060e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_ETH_Init+0x98>)
 80006d8:	2221      	movs	r2, #33	; 0x21
 80006da:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_ETH_Init+0x98>)
 80006de:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006e2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e4:	4b07      	ldr	r3, [pc, #28]	; (8000704 <MX_ETH_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000208 	.word	0x20000208
 80006f4:	40028000 	.word	0x40028000
 80006f8:	20000344 	.word	0x20000344
 80006fc:	20000114 	.word	0x20000114
 8000700:	20000074 	.word	0x20000074
 8000704:	200001d0 	.word	0x200001d0

08000708 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART3_UART_Init+0x58>)
 800070e:	4a15      	ldr	r2, [pc, #84]	; (8000764 <MX_USART3_UART_Init+0x5c>)
 8000710:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART3_UART_Init+0x58>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART3_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USART3_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART3_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART3_UART_Init+0x58>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART3_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART3_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART3_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART3_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART3_UART_Init+0x58>)
 800074c:	f002 fa32 	bl	8002bb4 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8d9 	bl	800090c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200002b8 	.word	0x200002b8
 8000764:	40004800 	.word	0x40004800

08000768 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
	...

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b08c      	sub	sp, #48	; 0x30
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 031c 	add.w	r3, r7, #28
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b56      	ldr	r3, [pc, #344]	; (80008e8 <MX_GPIO_Init+0x170>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a55      	ldr	r2, [pc, #340]	; (80008e8 <MX_GPIO_Init+0x170>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b53      	ldr	r3, [pc, #332]	; (80008e8 <MX_GPIO_Init+0x170>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	4b50      	ldr	r3, [pc, #320]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a4f      	ldr	r2, [pc, #316]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b4a      	ldr	r3, [pc, #296]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a49      	ldr	r2, [pc, #292]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	4b44      	ldr	r3, [pc, #272]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a43      	ldr	r2, [pc, #268]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007f4:	f043 0308 	orr.w	r3, r3, #8
 80007f8:	6313      	str	r3, [r2, #48]	; 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x170>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	f003 0308 	and.w	r3, r3, #8
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <MX_GPIO_Init+0x170>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x170>)
 800080c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_GPIO_Init+0x170>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4831      	ldr	r0, [pc, #196]	; (80008ec <MX_GPIO_Init+0x174>)
 8000826:	f001 f84f 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2140      	movs	r1, #64	; 0x40
 800082e:	4830      	ldr	r0, [pc, #192]	; (80008f0 <MX_GPIO_Init+0x178>)
 8000830:	f001 f84a 	bl	80018c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	482a      	ldr	r0, [pc, #168]	; (80008f4 <MX_GPIO_Init+0x17c>)
 800084c:	f000 fe90 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000850:	f244 0381 	movw	r3, #16513	; 0x4081
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	4619      	mov	r1, r3
 8000868:	4820      	ldr	r0, [pc, #128]	; (80008ec <MX_GPIO_Init+0x174>)
 800086a:	f000 fe81 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800086e:	2340      	movs	r3, #64	; 0x40
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 031c 	add.w	r3, r7, #28
 8000882:	4619      	mov	r1, r3
 8000884:	481a      	ldr	r0, [pc, #104]	; (80008f0 <MX_GPIO_Init+0x178>)
 8000886:	f000 fe73 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800088a:	2380      	movs	r3, #128	; 0x80
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	4619      	mov	r1, r3
 800089c:	4814      	ldr	r0, [pc, #80]	; (80008f0 <MX_GPIO_Init+0x178>)
 800089e:	f000 fe67 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008b4:	230a      	movs	r3, #10
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	; (80008f8 <MX_GPIO_Init+0x180>)
 80008c0:	f000 fe56 	bl	8001570 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	4807      	ldr	r0, [pc, #28]	; (80008f8 <MX_GPIO_Init+0x180>)
 80008da:	f000 fe49 	bl	8001570 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008de:	bf00      	nop
 80008e0:	3730      	adds	r7, #48	; 0x30
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40020400 	.word	0x40020400
 80008f0:	40021800 	.word	0x40021800
 80008f4:	40020800 	.word	0x40020800
 80008f8:	40020000 	.word	0x40020000

080008fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000904:	2001      	movs	r0, #1
 8000906:	f002 fed3 	bl	80036b0 <osDelay>
 800090a:	e7fb      	b.n	8000904 <StartDefaultTask+0x8>

0800090c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000910:	b672      	cpsid	i
}
 8000912:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000914:	e7fe      	b.n	8000914 <Error_Handler+0x8>
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <HAL_MspInit+0x4c>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <HAL_MspInit+0x4c>)
 800093c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	f06f 0001 	mvn.w	r0, #1
 8000956:	f000 fabc 	bl	8000ed2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08e      	sub	sp, #56	; 0x38
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a4e      	ldr	r2, [pc, #312]	; (8000ac0 <HAL_ETH_MspInit+0x158>)
 8000986:	4293      	cmp	r3, r2
 8000988:	f040 8096 	bne.w	8000ab8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800098c:	4b4d      	ldr	r3, [pc, #308]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b4a      	ldr	r3, [pc, #296]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a0:	623b      	str	r3, [r7, #32]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	4b47      	ldr	r3, [pc, #284]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a46      	ldr	r2, [pc, #280]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009c6:	6313      	str	r3, [r2, #48]	; 0x30
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009d0:	61bb      	str	r3, [r7, #24]
 80009d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b38      	ldr	r3, [pc, #224]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 0304 	and.w	r3, r3, #4
 80009e8:	617b      	str	r3, [r7, #20]
 80009ea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b35      	ldr	r3, [pc, #212]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	4a34      	ldr	r2, [pc, #208]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6313      	str	r3, [r2, #48]	; 0x30
 80009f8:	4b32      	ldr	r3, [pc, #200]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 80009fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b2f      	ldr	r3, [pc, #188]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <HAL_ETH_MspInit+0x15c>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a34:	2332      	movs	r3, #50	; 0x32
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <HAL_ETH_MspInit+0x160>)
 8000a50:	f000 fd8e 	bl	8001570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a54:	2386      	movs	r3, #134	; 0x86
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4817      	ldr	r0, [pc, #92]	; (8000acc <HAL_ETH_MspInit+0x164>)
 8000a70:	f000 fd7e 	bl	8001570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <HAL_ETH_MspInit+0x168>)
 8000a92:	f000 fd6d 	bl	8001570 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_ETH_MspInit+0x16c>)
 8000ab4:	f000 fd5c 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	; 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40028000 	.word	0x40028000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b0ae      	sub	sp, #184	; 0xb8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2290      	movs	r2, #144	; 0x90
 8000af6:	2100      	movs	r1, #0
 8000af8:	4618      	mov	r0, r3
 8000afa:	f005 faf3 	bl	80060e4 <memset>
  if(huart->Instance==USART3)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a22      	ldr	r2, [pc, #136]	; (8000b8c <HAL_UART_MspInit+0xb4>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d13c      	bne.n	8000b82 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	4618      	mov	r0, r3
 8000b18:	f001 fc24 	bl	8002364 <HAL_RCCEx_PeriphCLKConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b22:	f7ff fef3 	bl	800090c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a19      	ldr	r2, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b17      	ldr	r3, [pc, #92]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_UART_MspInit+0xb8>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0308 	and.w	r3, r3, #8
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b70:	2307      	movs	r3, #7
 8000b72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_UART_MspInit+0xbc>)
 8000b7e:	f000 fcf7 	bl	8001570 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	37b8      	adds	r7, #184	; 0xb8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40004800 	.word	0x40004800
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020c00 	.word	0x40020c00

08000b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <NMI_Handler+0x4>

08000b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <HardFault_Handler+0x4>

08000ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <MemManage_Handler+0x4>

08000baa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc8:	f000 f882 	bl	8000cd0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bcc:	f004 f9f8 	bl	8004fc0 <xTaskGetSchedulerState>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d001      	beq.n	8000bda <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bd6:	f004 ffd7 	bl	8005b88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <SystemInit+0x20>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a05      	ldr	r2, [pc, #20]	; (8000c00 <SystemInit+0x20>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480d      	ldr	r0, [pc, #52]	; (8000c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c0a:	490e      	ldr	r1, [pc, #56]	; (8000c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c0c:	4a0e      	ldr	r2, [pc, #56]	; (8000c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0b      	ldr	r2, [pc, #44]	; (8000c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c20:	4c0b      	ldr	r4, [pc, #44]	; (8000c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c2e:	f7ff ffd7 	bl	8000be0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c32:	f005 fa23 	bl	800607c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c36:	f7ff fc85 	bl	8000544 <main>
  bx  lr    
 8000c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c3c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c44:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c48:	08006360 	.word	0x08006360
  ldr r2, =_sbss
 8000c4c:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000c50:	20004d60 	.word	0x20004d60

08000c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c54:	e7fe      	b.n	8000c54 <ADC_IRQHandler>

08000c56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c5a:	2003      	movs	r0, #3
 8000c5c:	f000 f92e 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c60:	200f      	movs	r0, #15
 8000c62:	f000 f805 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c66:	f7ff fe57 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c6a:	2300      	movs	r3, #0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f93b 	bl	8000f0a <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f911 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_IncTick+0x24>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_IncTick+0x24>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000008 	.word	0x20000008
 8000cf4:	2000034c 	.word	0x2000034c

08000cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <HAL_GetTick+0x14>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	2000034c 	.word	0x2000034c

08000d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d18:	f7ff ffee 	bl	8000cf8 <HAL_GetTick>
 8000d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d28:	d005      	beq.n	8000d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2a:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <HAL_Delay+0x44>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4413      	add	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d36:	bf00      	nop
 8000d38:	f7ff ffde 	bl	8000cf8 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d8f7      	bhi.n	8000d38 <HAL_Delay+0x28>
  {
  }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000008 	.word	0x20000008

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <__NVIC_SetPriorityGrouping+0x40>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <__NVIC_SetPriorityGrouping+0x40>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00
 8000d9c:	05fa0000 	.word	0x05fa0000

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff47 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff5c 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffb0 	bl	8000e78 <SysTick_Config>
 8000f18:	4603      	mov	r3, r0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e06a      	b.n	800100c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d106      	bne.n	8000f4e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2223      	movs	r2, #35	; 0x23
 8000f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff fd0d 	bl	8000968 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <HAL_ETH_Init+0xf0>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a30      	ldr	r2, [pc, #192]	; (8001014 <HAL_ETH_Init+0xf0>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_ETH_Init+0xf0>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000f66:	4b2c      	ldr	r3, [pc, #176]	; (8001018 <HAL_ETH_Init+0xf4>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	4a2b      	ldr	r2, [pc, #172]	; (8001018 <HAL_ETH_Init+0xf4>)
 8000f6c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f70:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000f72:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_ETH_Init+0xf4>)
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	4927      	ldr	r1, [pc, #156]	; (8001018 <HAL_ETH_Init+0xf4>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8000f80:	4b25      	ldr	r3, [pc, #148]	; (8001018 <HAL_ETH_Init+0xf4>)
 8000f82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8000f9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f9c:	f7ff feac 	bl	8000cf8 <HAL_GetTick>
 8000fa0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fa2:	e011      	b.n	8000fc8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8000fa4:	f7ff fea8 	bl	8000cf8 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fb2:	d909      	bls.n	8000fc8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2204      	movs	r2, #4
 8000fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	22e0      	movs	r2, #224	; 0xe0
 8000fc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e021      	b.n	800100c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1e4      	bne.n	8000fa4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 f958 	bl	8001290 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f000 f9ff 	bl	80013e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 fa55 	bl	8001496 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f9bd 	bl	8001374 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2210      	movs	r2, #16
 8001006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40013800 	.word	0x40013800

0800101c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	4b51      	ldr	r3, [pc, #324]	; (8001178 <ETH_SetMACConfig+0x15c>)
 8001032:	4013      	ands	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	7c1b      	ldrb	r3, [r3, #16]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <ETH_SetMACConfig+0x28>
 800103e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001042:	e000      	b.n	8001046 <ETH_SetMACConfig+0x2a>
 8001044:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	7c5b      	ldrb	r3, [r3, #17]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <ETH_SetMACConfig+0x38>
 800104e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001052:	e000      	b.n	8001056 <ETH_SetMACConfig+0x3a>
 8001054:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001056:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800105c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	7fdb      	ldrb	r3, [r3, #31]
 8001062:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001064:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800106a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	7f92      	ldrb	r2, [r2, #30]
 8001070:	2a00      	cmp	r2, #0
 8001072:	d102      	bne.n	800107a <ETH_SetMACConfig+0x5e>
 8001074:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001078:	e000      	b.n	800107c <ETH_SetMACConfig+0x60>
 800107a:	2200      	movs	r2, #0
                        macconf->Speed |
 800107c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	7f1b      	ldrb	r3, [r3, #28]
 8001082:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001084:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800108a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	791b      	ldrb	r3, [r3, #4]
 8001090:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001092:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	f892 2020 	ldrb.w	r2, [r2, #32]
 800109a:	2a00      	cmp	r2, #0
 800109c:	d102      	bne.n	80010a4 <ETH_SetMACConfig+0x88>
 800109e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a2:	e000      	b.n	80010a6 <ETH_SetMACConfig+0x8a>
 80010a4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80010a6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	7bdb      	ldrb	r3, [r3, #15]
 80010ac:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80010ae:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80010b4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80010bc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80010be:	4313      	orrs	r3, r2
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80010d6:	2001      	movs	r0, #1
 80010d8:	f7ff fe1a 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	f64f 7341 	movw	r3, #65345	; 0xff41
 80010f2:	4013      	ands	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001102:	2a00      	cmp	r2, #0
 8001104:	d101      	bne.n	800110a <ETH_SetMACConfig+0xee>
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	e000      	b.n	800110c <ETH_SetMACConfig+0xf0>
 800110a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800110c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001112:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800111a:	2a01      	cmp	r2, #1
 800111c:	d101      	bne.n	8001122 <ETH_SetMACConfig+0x106>
 800111e:	2208      	movs	r2, #8
 8001120:	e000      	b.n	8001124 <ETH_SetMACConfig+0x108>
 8001122:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001124:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800112c:	2a01      	cmp	r2, #1
 800112e:	d101      	bne.n	8001134 <ETH_SetMACConfig+0x118>
 8001130:	2204      	movs	r2, #4
 8001132:	e000      	b.n	8001136 <ETH_SetMACConfig+0x11a>
 8001134:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001136:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800113e:	2a01      	cmp	r2, #1
 8001140:	d101      	bne.n	8001146 <ETH_SetMACConfig+0x12a>
 8001142:	2202      	movs	r2, #2
 8001144:	e000      	b.n	8001148 <ETH_SetMACConfig+0x12c>
 8001146:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001148:	4313      	orrs	r3, r2
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4313      	orrs	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001160:	2001      	movs	r0, #1
 8001162:	f7ff fdd5 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	ff20810f 	.word	0xff20810f

0800117c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	4b3d      	ldr	r3, [pc, #244]	; (800128c <ETH_SetDMAConfig+0x110>)
 8001196:	4013      	ands	r3, r2
 8001198:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	7b1b      	ldrb	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <ETH_SetDMAConfig+0x2c>
 80011a2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011a6:	e000      	b.n	80011aa <ETH_SetDMAConfig+0x2e>
 80011a8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	7b5b      	ldrb	r3, [r3, #13]
 80011ae:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80011b0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	7f52      	ldrb	r2, [r2, #29]
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d102      	bne.n	80011c0 <ETH_SetDMAConfig+0x44>
 80011ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011be:	e000      	b.n	80011c2 <ETH_SetDMAConfig+0x46>
 80011c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80011c2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	7b9b      	ldrb	r3, [r3, #14]
 80011c8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80011ca:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80011d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	7f1b      	ldrb	r3, [r3, #28]
 80011d6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80011d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	7f9b      	ldrb	r3, [r3, #30]
 80011de:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80011e0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80011e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011ee:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80011f0:	4313      	orrs	r3, r2
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001200:	461a      	mov	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001212:	2001      	movs	r0, #1
 8001214:	f7ff fd7c 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001220:	461a      	mov	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001230:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001236:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800123c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001244:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001246:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800124e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001254:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800125e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001262:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fd4d 	bl	8000d10 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800127e:	461a      	mov	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	f8de3f23 	.word	0xf8de3f23

08001290 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0a6      	sub	sp, #152	; 0x98
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001298:	2301      	movs	r3, #1
 800129a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800129e:	2301      	movs	r3, #1
 80012a0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80012cc:	2300      	movs	r3, #0
 80012ce:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80012f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80012f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001304:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001308:	4619      	mov	r1, r3
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fe86 	bl	800101c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001310:	2301      	movs	r3, #1
 8001312:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001314:	2301      	movs	r3, #1
 8001316:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001318:	2301      	movs	r3, #1
 800131a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800131e:	2301      	movs	r3, #1
 8001320:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001332:	2300      	movs	r3, #0
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001336:	2301      	movs	r3, #1
 8001338:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800133c:	2301      	movs	r3, #1
 800133e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001340:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001344:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001346:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800134a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001352:	2301      	movs	r3, #1
 8001354:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff08 	bl	800117c <ETH_SetDMAConfig>
}
 800136c:	bf00      	nop
 800136e:	3798      	adds	r7, #152	; 0x98
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3305      	adds	r3, #5
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	687a      	ldr	r2, [r7, #4]
 800138a:	3204      	adds	r2, #4
 800138c:	7812      	ldrb	r2, [r2, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <ETH_MACAddressConfig+0x68>)
 8001396:	4413      	add	r3, r2
 8001398:	461a      	mov	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3303      	adds	r3, #3
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	061a      	lsls	r2, r3, #24
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3302      	adds	r3, #2
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	041b      	lsls	r3, r3, #16
 80013ae:	431a      	orrs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3301      	adds	r3, #1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	021b      	lsls	r3, r3, #8
 80013b8:	4313      	orrs	r3, r2
 80013ba:	687a      	ldr	r2, [r7, #4]
 80013bc:	7812      	ldrb	r2, [r2, #0]
 80013be:	4313      	orrs	r3, r2
 80013c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <ETH_MACAddressConfig+0x6c>)
 80013c6:	4413      	add	r3, r2
 80013c8:	461a      	mov	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	6013      	str	r3, [r2, #0]
}
 80013ce:	bf00      	nop
 80013d0:	371c      	adds	r7, #28
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	40028040 	.word	0x40028040
 80013e0:	40028044 	.word	0x40028044

080013e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e03e      	b.n	8001470 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	68d9      	ldr	r1, [r3, #12]
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	440b      	add	r3, r1
 8001402:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	2200      	movs	r2, #0
 800141a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	3206      	adds	r2, #6
 8001424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d80c      	bhi.n	8001454 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	461a      	mov	r2, r3
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	60da      	str	r2, [r3, #12]
 8001452:	e004      	b.n	800145e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	461a      	mov	r2, r3
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d9bd      	bls.n	80013f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001488:	611a      	str	r2, [r3, #16]
}
 800148a:	bf00      	nop
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e046      	b.n	8001532 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	4613      	mov	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	440b      	add	r3, r1
 80014b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	2200      	movs	r2, #0
 80014c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2200      	movs	r2, #0
 80014cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80014e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80014e8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68fa      	ldr	r2, [r7, #12]
 80014fc:	3212      	adds	r2, #18
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d80c      	bhi.n	8001522 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6919      	ldr	r1, [r3, #16]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	4613      	mov	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	4413      	add	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	440b      	add	r3, r1
 800151a:	461a      	mov	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	e004      	b.n	800152c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	461a      	mov	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	3301      	adds	r3, #1
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b03      	cmp	r3, #3
 8001536:	d9b5      	bls.n	80014a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691a      	ldr	r2, [r3, #16]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001562:	60da      	str	r2, [r3, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001570:	b480      	push	{r7}
 8001572:	b089      	sub	sp, #36	; 0x24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001582:	2300      	movs	r3, #0
 8001584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800158a:	2300      	movs	r3, #0
 800158c:	61fb      	str	r3, [r7, #28]
 800158e:	e175      	b.n	800187c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001590:	2201      	movs	r2, #1
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	f040 8164 	bne.w	8001876 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d005      	beq.n	80015c6 <HAL_GPIO_Init+0x56>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d130      	bne.n	8001628 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	2203      	movs	r2, #3
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	43db      	mvns	r3, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4013      	ands	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015fc:	2201      	movs	r2, #1
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0201 	and.w	r2, r3, #1
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 0303 	and.w	r3, r3, #3
 8001630:	2b03      	cmp	r3, #3
 8001632:	d017      	beq.n	8001664 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d123      	bne.n	80016b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	08da      	lsrs	r2, r3, #3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3208      	adds	r2, #8
 8001678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691a      	ldr	r2, [r3, #16]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	69b9      	ldr	r1, [r7, #24]
 80016b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0203 	and.w	r2, r3, #3
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80be 	beq.w	8001876 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_GPIO_Init+0x324>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	4a65      	ldr	r2, [pc, #404]	; (8001894 <HAL_GPIO_Init+0x324>)
 8001700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001704:	6453      	str	r3, [r2, #68]	; 0x44
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_GPIO_Init+0x324>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001712:	4a61      	ldr	r2, [pc, #388]	; (8001898 <HAL_GPIO_Init+0x328>)
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	089b      	lsrs	r3, r3, #2
 8001718:	3302      	adds	r3, #2
 800171a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800171e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0303 	and.w	r3, r3, #3
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	220f      	movs	r2, #15
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_GPIO_Init+0x32c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d037      	beq.n	80017ae <HAL_GPIO_Init+0x23e>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a57      	ldr	r2, [pc, #348]	; (80018a0 <HAL_GPIO_Init+0x330>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d031      	beq.n	80017aa <HAL_GPIO_Init+0x23a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a56      	ldr	r2, [pc, #344]	; (80018a4 <HAL_GPIO_Init+0x334>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d02b      	beq.n	80017a6 <HAL_GPIO_Init+0x236>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a55      	ldr	r2, [pc, #340]	; (80018a8 <HAL_GPIO_Init+0x338>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d025      	beq.n	80017a2 <HAL_GPIO_Init+0x232>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a54      	ldr	r2, [pc, #336]	; (80018ac <HAL_GPIO_Init+0x33c>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d01f      	beq.n	800179e <HAL_GPIO_Init+0x22e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a53      	ldr	r2, [pc, #332]	; (80018b0 <HAL_GPIO_Init+0x340>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d019      	beq.n	800179a <HAL_GPIO_Init+0x22a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a52      	ldr	r2, [pc, #328]	; (80018b4 <HAL_GPIO_Init+0x344>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d013      	beq.n	8001796 <HAL_GPIO_Init+0x226>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a51      	ldr	r2, [pc, #324]	; (80018b8 <HAL_GPIO_Init+0x348>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d00d      	beq.n	8001792 <HAL_GPIO_Init+0x222>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <HAL_GPIO_Init+0x34c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d007      	beq.n	800178e <HAL_GPIO_Init+0x21e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a4f      	ldr	r2, [pc, #316]	; (80018c0 <HAL_GPIO_Init+0x350>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d101      	bne.n	800178a <HAL_GPIO_Init+0x21a>
 8001786:	2309      	movs	r3, #9
 8001788:	e012      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800178a:	230a      	movs	r3, #10
 800178c:	e010      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800178e:	2308      	movs	r3, #8
 8001790:	e00e      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 8001792:	2307      	movs	r3, #7
 8001794:	e00c      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 8001796:	2306      	movs	r3, #6
 8001798:	e00a      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800179a:	2305      	movs	r3, #5
 800179c:	e008      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 800179e:	2304      	movs	r3, #4
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e004      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x240>
 80017ae:	2300      	movs	r3, #0
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f002 0203 	and.w	r2, r2, #3
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4093      	lsls	r3, r2
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017c0:	4935      	ldr	r1, [pc, #212]	; (8001898 <HAL_GPIO_Init+0x328>)
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ce:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_GPIO_Init+0x354>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017f2:	4a34      	ldr	r2, [pc, #208]	; (80018c4 <HAL_GPIO_Init+0x354>)
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017f8:	4b32      	ldr	r3, [pc, #200]	; (80018c4 <HAL_GPIO_Init+0x354>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800181c:	4a29      	ldr	r2, [pc, #164]	; (80018c4 <HAL_GPIO_Init+0x354>)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_GPIO_Init+0x354>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <HAL_GPIO_Init+0x354>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <HAL_GPIO_Init+0x354>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001870:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_GPIO_Init+0x354>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3301      	adds	r3, #1
 800187a:	61fb      	str	r3, [r7, #28]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b0f      	cmp	r3, #15
 8001880:	f67f ae86 	bls.w	8001590 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001884:	bf00      	nop
 8001886:	bf00      	nop
 8001888:	3724      	adds	r7, #36	; 0x24
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40013800 	.word	0x40013800
 800189c:	40020000 	.word	0x40020000
 80018a0:	40020400 	.word	0x40020400
 80018a4:	40020800 	.word	0x40020800
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40021400 	.word	0x40021400
 80018b4:	40021800 	.word	0x40021800
 80018b8:	40021c00 	.word	0x40021c00
 80018bc:	40022000 	.word	0x40022000
 80018c0:	40022400 	.word	0x40022400
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
 80018d4:	4613      	mov	r3, r2
 80018d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018d8:	787b      	ldrb	r3, [r7, #1]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80018e6:	887b      	ldrh	r3, [r7, #2]
 80018e8:	041a      	lsls	r2, r3, #16
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800190a:	6013      	str	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40007000 	.word	0x40007000

0800191c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800193e:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800194a:	f7ff f9d5 	bl	8000cf8 <HAL_GetTick>
 800194e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001950:	e009      	b.n	8001966 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001952:	f7ff f9d1 	bl	8000cf8 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001960:	d901      	bls.n	8001966 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e022      	b.n	80019ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800196e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001972:	d1ee      	bne.n	8001952 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001980:	f7ff f9ba 	bl	8000cf8 <HAL_GetTick>
 8001984:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001986:	e009      	b.n	800199c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001988:	f7ff f9b6 	bl	8000cf8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001996:	d901      	bls.n	800199c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e007      	b.n	80019ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80019a8:	d1ee      	bne.n	8001988 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e29b      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8087 	beq.w	8001aee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e0:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d00c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ec:	4b93      	ldr	r3, [pc, #588]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d112      	bne.n	8001a1e <HAL_RCC_OscConfig+0x62>
 80019f8:	4b90      	ldr	r3, [pc, #576]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a04:	d10b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a06:	4b8d      	ldr	r3, [pc, #564]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d06c      	beq.n	8001aec <HAL_RCC_OscConfig+0x130>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d168      	bne.n	8001aec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e275      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x7a>
 8001a28:	4b84      	ldr	r3, [pc, #528]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a83      	ldr	r2, [pc, #524]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e02e      	b.n	8001a94 <HAL_RCC_OscConfig+0xd8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x9c>
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7e      	ldr	r2, [pc, #504]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a7b      	ldr	r2, [pc, #492]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e01d      	b.n	8001a94 <HAL_RCC_OscConfig+0xd8>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0xc0>
 8001a62:	4b76      	ldr	r3, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a75      	ldr	r2, [pc, #468]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a72      	ldr	r2, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xd8>
 8001a7c:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6e      	ldr	r2, [pc, #440]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b6c      	ldr	r3, [pc, #432]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9c:	f7ff f92c 	bl	8000cf8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff f928 	bl	8000cf8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	; 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e229      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b61      	ldr	r3, [pc, #388]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xe8>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7ff f918 	bl	8000cf8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff f914 	bl	8000cf8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	; 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e215      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b57      	ldr	r3, [pc, #348]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x110>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d069      	beq.n	8001bce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afa:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b06:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d11c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x190>
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1e9      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	493d      	ldr	r1, [pc, #244]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e040      	b.n	8001bce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d023      	beq.n	8001b9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b54:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a38      	ldr	r2, [pc, #224]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff f8ca 	bl	8000cf8 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff f8c6 	bl	8000cf8 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1c7      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4929      	ldr	r1, [pc, #164]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	600b      	str	r3, [r1, #0]
 8001b9a:	e018      	b.n	8001bce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9c:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a26      	ldr	r2, [pc, #152]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001ba2:	f023 0301 	bic.w	r3, r3, #1
 8001ba6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f8a6 	bl	8000cf8 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff f8a2 	bl	8000cf8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1a3      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f0      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d038      	beq.n	8001c4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d019      	beq.n	8001c16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001be6:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bee:	f7ff f883 	bl	8000cf8 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7ff f87f 	bl	8000cf8 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e180      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0f0      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x23a>
 8001c14:	e01a      	b.n	8001c4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x280>)
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c22:	f7ff f869 	bl	8000cf8 <HAL_GetTick>
 8001c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	e00a      	b.n	8001c40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c2a:	f7ff f865 	bl	8000cf8 <HAL_GetTick>
 8001c2e:	4602      	mov	r2, r0
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d903      	bls.n	8001c40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e166      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
 8001c3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c40:	4b92      	ldr	r3, [pc, #584]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001c42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1ee      	bne.n	8001c2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f000 80a4 	beq.w	8001da2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c5a:	4b8c      	ldr	r3, [pc, #560]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10d      	bne.n	8001c82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b89      	ldr	r3, [pc, #548]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	4a88      	ldr	r2, [pc, #544]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6413      	str	r3, [r2, #64]	; 0x40
 8001c72:	4b86      	ldr	r3, [pc, #536]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60bb      	str	r3, [r7, #8]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c82:	4b83      	ldr	r3, [pc, #524]	; (8001e90 <HAL_RCC_OscConfig+0x4d4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c8e:	4b80      	ldr	r3, [pc, #512]	; (8001e90 <HAL_RCC_OscConfig+0x4d4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a7f      	ldr	r2, [pc, #508]	; (8001e90 <HAL_RCC_OscConfig+0x4d4>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f82d 	bl	8000cf8 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff f829 	bl	8000cf8 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b64      	cmp	r3, #100	; 0x64
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e12a      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb4:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <HAL_RCC_OscConfig+0x4d4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d106      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x31a>
 8001cc8:	4b70      	ldr	r3, [pc, #448]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ccc:	4a6f      	ldr	r2, [pc, #444]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd4:	e02d      	b.n	8001d32 <HAL_RCC_OscConfig+0x376>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10c      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x33c>
 8001cde:	4b6b      	ldr	r3, [pc, #428]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cea:	4b68      	ldr	r3, [pc, #416]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cee:	4a67      	ldr	r2, [pc, #412]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001cf0:	f023 0304 	bic.w	r3, r3, #4
 8001cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf6:	e01c      	b.n	8001d32 <HAL_RCC_OscConfig+0x376>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d10c      	bne.n	8001d1a <HAL_RCC_OscConfig+0x35e>
 8001d00:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d04:	4a61      	ldr	r2, [pc, #388]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d0c:	4b5f      	ldr	r3, [pc, #380]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	4a5e      	ldr	r2, [pc, #376]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6713      	str	r3, [r2, #112]	; 0x70
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0x376>
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1e:	4a5b      	ldr	r2, [pc, #364]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d20:	f023 0301 	bic.w	r3, r3, #1
 8001d24:	6713      	str	r3, [r2, #112]	; 0x70
 8001d26:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d2a:	4a58      	ldr	r2, [pc, #352]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d2c:	f023 0304 	bic.w	r3, r3, #4
 8001d30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d015      	beq.n	8001d66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3a:	f7fe ffdd 	bl	8000cf8 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	e00a      	b.n	8001d58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d42:	f7fe ffd9 	bl	8000cf8 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0d8      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d58:	4b4c      	ldr	r3, [pc, #304]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0ee      	beq.n	8001d42 <HAL_RCC_OscConfig+0x386>
 8001d64:	e014      	b.n	8001d90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d66:	f7fe ffc7 	bl	8000cf8 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7fe ffc3 	bl	8000cf8 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0c2      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d84:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1ee      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d90:	7dfb      	ldrb	r3, [r7, #23]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d105      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d96:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f000 80ae 	beq.w	8001f08 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d06d      	beq.n	8001e94 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d14b      	bne.n	8001e58 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc0:	4b32      	ldr	r3, [pc, #200]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a31      	ldr	r2, [pc, #196]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dcc:	f7fe ff94 	bl	8000cf8 <HAL_GetTick>
 8001dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd2:	e008      	b.n	8001de6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd4:	f7fe ff90 	bl	8000cf8 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d901      	bls.n	8001de6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001de2:	2303      	movs	r3, #3
 8001de4:	e091      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f0      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e08:	085b      	lsrs	r3, r3, #1
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	041b      	lsls	r3, r3, #16
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	061b      	lsls	r3, r3, #24
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	071b      	lsls	r3, r3, #28
 8001e1e:	491b      	ldr	r1, [pc, #108]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ff62 	bl	8000cf8 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7fe ff5e 	bl	8000cf8 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e05f      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x47c>
 8001e56:	e057      	b.n	8001f08 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff48 	bl	8000cf8 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7fe ff44 	bl	8000cf8 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e045      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <HAL_RCC_OscConfig+0x4d0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4b0>
 8001e8a:	e03d      	b.n	8001f08 <HAL_RCC_OscConfig+0x54c>
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_OscConfig+0x558>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d030      	beq.n	8001f04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d129      	bne.n	8001f04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d122      	bne.n	8001f04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001eca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d119      	bne.n	8001f04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eda:	085b      	lsrs	r3, r3, #1
 8001edc:	3b01      	subs	r3, #1
 8001ede:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d10f      	bne.n	8001f04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d0      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f30:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d910      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b67      	ldr	r3, [pc, #412]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 020f 	bic.w	r2, r3, #15
 8001f46:	4965      	ldr	r1, [pc, #404]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b63      	ldr	r3, [pc, #396]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b8      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d020      	beq.n	8001fae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f78:	4b59      	ldr	r3, [pc, #356]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a58      	ldr	r2, [pc, #352]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d005      	beq.n	8001f9c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f90:	4b53      	ldr	r3, [pc, #332]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f9a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9c:	4b50      	ldr	r3, [pc, #320]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	494d      	ldr	r1, [pc, #308]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d040      	beq.n	800203c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d107      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	4b47      	ldr	r3, [pc, #284]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d115      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e07f      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d107      	bne.n	8001fea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fda:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d109      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e073      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e06b      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ffa:	4b39      	ldr	r3, [pc, #228]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f023 0203 	bic.w	r2, r3, #3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	4936      	ldr	r1, [pc, #216]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800200c:	f7fe fe74 	bl	8000cf8 <HAL_GetTick>
 8002010:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002012:	e00a      	b.n	800202a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002014:	f7fe fe70 	bl	8000cf8 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e053      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202a:	4b2d      	ldr	r3, [pc, #180]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f003 020c 	and.w	r2, r3, #12
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	429a      	cmp	r2, r3
 800203a:	d1eb      	bne.n	8002014 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	683a      	ldr	r2, [r7, #0]
 8002046:	429a      	cmp	r2, r3
 8002048:	d210      	bcs.n	800206c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f023 020f 	bic.w	r2, r3, #15
 8002052:	4922      	ldr	r1, [pc, #136]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	429a      	cmp	r2, r3
 8002066:	d001      	beq.n	800206c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e032      	b.n	80020d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b00      	cmp	r3, #0
 8002076:	d008      	beq.n	800208a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002078:	4b19      	ldr	r3, [pc, #100]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4916      	ldr	r1, [pc, #88]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0308 	and.w	r3, r3, #8
 8002092:	2b00      	cmp	r3, #0
 8002094:	d009      	beq.n	80020aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002096:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020aa:	f000 f821 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80020ae:	4602      	mov	r2, r0
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <HAL_RCC_ClockConfig+0x1c8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	490a      	ldr	r1, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x1cc>)
 80020bc:	5ccb      	ldrb	r3, [r1, r3]
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x1d0>)
 80020c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_ClockConfig+0x1d4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fdd0 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00
 80020e0:	40023800 	.word	0x40023800
 80020e4:	080062d8 	.word	0x080062d8
 80020e8:	20000000 	.word	0x20000000
 80020ec:	20000004 	.word	0x20000004

080020f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b094      	sub	sp, #80	; 0x50
 80020f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	647b      	str	r3, [r7, #68]	; 0x44
 80020fc:	2300      	movs	r3, #0
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002100:	2300      	movs	r3, #0
 8002102:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002104:	2300      	movs	r3, #0
 8002106:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002108:	4b79      	ldr	r3, [pc, #484]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 030c 	and.w	r3, r3, #12
 8002110:	2b08      	cmp	r3, #8
 8002112:	d00d      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0x40>
 8002114:	2b08      	cmp	r3, #8
 8002116:	f200 80e1 	bhi.w	80022dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800211a:	2b00      	cmp	r3, #0
 800211c:	d002      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0x34>
 800211e:	2b04      	cmp	r3, #4
 8002120:	d003      	beq.n	800212a <HAL_RCC_GetSysClockFreq+0x3a>
 8002122:	e0db      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002128:	e0db      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800212a:	4b73      	ldr	r3, [pc, #460]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800212c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800212e:	e0d8      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002130:	4b6f      	ldr	r3, [pc, #444]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800213a:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d063      	beq.n	800220e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002146:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	2200      	movs	r2, #0
 800214e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002150:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
 800215a:	2300      	movs	r3, #0
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
 800215e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002162:	4622      	mov	r2, r4
 8002164:	462b      	mov	r3, r5
 8002166:	f04f 0000 	mov.w	r0, #0
 800216a:	f04f 0100 	mov.w	r1, #0
 800216e:	0159      	lsls	r1, r3, #5
 8002170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002174:	0150      	lsls	r0, r2, #5
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4621      	mov	r1, r4
 800217c:	1a51      	subs	r1, r2, r1
 800217e:	6139      	str	r1, [r7, #16]
 8002180:	4629      	mov	r1, r5
 8002182:	eb63 0301 	sbc.w	r3, r3, r1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	f04f 0200 	mov.w	r2, #0
 800218c:	f04f 0300 	mov.w	r3, #0
 8002190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002194:	4659      	mov	r1, fp
 8002196:	018b      	lsls	r3, r1, #6
 8002198:	4651      	mov	r1, sl
 800219a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800219e:	4651      	mov	r1, sl
 80021a0:	018a      	lsls	r2, r1, #6
 80021a2:	4651      	mov	r1, sl
 80021a4:	ebb2 0801 	subs.w	r8, r2, r1
 80021a8:	4659      	mov	r1, fp
 80021aa:	eb63 0901 	sbc.w	r9, r3, r1
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c2:	4690      	mov	r8, r2
 80021c4:	4699      	mov	r9, r3
 80021c6:	4623      	mov	r3, r4
 80021c8:	eb18 0303 	adds.w	r3, r8, r3
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	462b      	mov	r3, r5
 80021d0:	eb49 0303 	adc.w	r3, r9, r3
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	f04f 0300 	mov.w	r3, #0
 80021de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021e2:	4629      	mov	r1, r5
 80021e4:	024b      	lsls	r3, r1, #9
 80021e6:	4621      	mov	r1, r4
 80021e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80021ec:	4621      	mov	r1, r4
 80021ee:	024a      	lsls	r2, r1, #9
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021f6:	2200      	movs	r2, #0
 80021f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002200:	f7fe f81e 	bl	8000240 <__aeabi_uldivmod>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4613      	mov	r3, r2
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800220c:	e058      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220e:	4b38      	ldr	r3, [pc, #224]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	099b      	lsrs	r3, r3, #6
 8002214:	2200      	movs	r2, #0
 8002216:	4618      	mov	r0, r3
 8002218:	4611      	mov	r1, r2
 800221a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800221e:	623b      	str	r3, [r7, #32]
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002228:	4642      	mov	r2, r8
 800222a:	464b      	mov	r3, r9
 800222c:	f04f 0000 	mov.w	r0, #0
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	0159      	lsls	r1, r3, #5
 8002236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800223a:	0150      	lsls	r0, r2, #5
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4641      	mov	r1, r8
 8002242:	ebb2 0a01 	subs.w	sl, r2, r1
 8002246:	4649      	mov	r1, r9
 8002248:	eb63 0b01 	sbc.w	fp, r3, r1
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800225c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002260:	ebb2 040a 	subs.w	r4, r2, sl
 8002264:	eb63 050b 	sbc.w	r5, r3, fp
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	00eb      	lsls	r3, r5, #3
 8002272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002276:	00e2      	lsls	r2, r4, #3
 8002278:	4614      	mov	r4, r2
 800227a:	461d      	mov	r5, r3
 800227c:	4643      	mov	r3, r8
 800227e:	18e3      	adds	r3, r4, r3
 8002280:	603b      	str	r3, [r7, #0]
 8002282:	464b      	mov	r3, r9
 8002284:	eb45 0303 	adc.w	r3, r5, r3
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	f04f 0300 	mov.w	r3, #0
 8002292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002296:	4629      	mov	r1, r5
 8002298:	028b      	lsls	r3, r1, #10
 800229a:	4621      	mov	r1, r4
 800229c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a0:	4621      	mov	r1, r4
 80022a2:	028a      	lsls	r2, r1, #10
 80022a4:	4610      	mov	r0, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022aa:	2200      	movs	r2, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	61fa      	str	r2, [r7, #28]
 80022b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b4:	f7fd ffc4 	bl	8000240 <__aeabi_uldivmod>
 80022b8:	4602      	mov	r2, r0
 80022ba:	460b      	mov	r3, r1
 80022bc:	4613      	mov	r3, r2
 80022be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	0c1b      	lsrs	r3, r3, #16
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	3301      	adds	r3, #1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80022d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022da:	e002      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80022e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3750      	adds	r7, #80	; 0x50
 80022e8:	46bd      	mov	sp, r7
 80022ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	00f42400 	.word	0x00f42400
 80022f8:	007a1200 	.word	0x007a1200

080022fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a9b      	lsrs	r3, r3, #10
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	080062e8 	.word	0x080062e8

0800233c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002340:	f7ff ffdc 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	0b5b      	lsrs	r3, r3, #13
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4903      	ldr	r1, [pc, #12]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	080062e8 	.word	0x080062e8

08002364 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d012      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800238c:	4b69      	ldr	r3, [pc, #420]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	4a68      	ldr	r2, [pc, #416]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002392:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002396:	6093      	str	r3, [r2, #8]
 8002398:	4b66      	ldr	r3, [pc, #408]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a0:	4964      	ldr	r1, [pc, #400]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023ae:	2301      	movs	r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d017      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023be:	4b5d      	ldr	r3, [pc, #372]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	4959      	ldr	r1, [pc, #356]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023dc:	d101      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80023ea:	2301      	movs	r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d017      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023fa:	4b4e      	ldr	r3, [pc, #312]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002400:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	494a      	ldr	r1, [pc, #296]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002418:	d101      	bne.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800241a:	2301      	movs	r3, #1
 800241c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 808b 	beq.w	800255e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a39      	ldr	r2, [pc, #228]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800244e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b37      	ldr	r3, [pc, #220]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002460:	4b35      	ldr	r3, [pc, #212]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a34      	ldr	r2, [pc, #208]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800246c:	f7fe fc44 	bl	8000cf8 <HAL_GetTick>
 8002470:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002474:	f7fe fc40 	bl	8000cf8 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e38f      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002486:	4b2c      	ldr	r3, [pc, #176]	; (8002538 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d035      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d02e      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	4b20      	ldr	r3, [pc, #128]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024be:	4a1d      	ldr	r2, [pc, #116]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024c6:	4b1b      	ldr	r3, [pc, #108]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	4a1a      	ldr	r2, [pc, #104]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024d2:	4a18      	ldr	r2, [pc, #96]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d114      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e4:	f7fe fc08 	bl	8000cf8 <HAL_GetTick>
 80024e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ea:	e00a      	b.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ec:	f7fe fc04 	bl	8000cf8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d901      	bls.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e351      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0ee      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800251a:	d111      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002528:	4b04      	ldr	r3, [pc, #16]	; (800253c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800252a:	400b      	ands	r3, r1
 800252c:	4901      	ldr	r1, [pc, #4]	; (8002534 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
 8002532:	e00b      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002534:	40023800 	.word	0x40023800
 8002538:	40007000 	.word	0x40007000
 800253c:	0ffffcff 	.word	0x0ffffcff
 8002540:	4bac      	ldr	r3, [pc, #688]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4aab      	ldr	r2, [pc, #684]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002546:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800254a:	6093      	str	r3, [r2, #8]
 800254c:	4ba9      	ldr	r3, [pc, #676]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800254e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002558:	49a6      	ldr	r1, [pc, #664]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800255a:	4313      	orrs	r3, r2
 800255c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800256a:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800256c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002570:	4aa0      	ldr	r2, [pc, #640]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002576:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800257a:	4b9e      	ldr	r3, [pc, #632]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800257c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	499b      	ldr	r1, [pc, #620]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002598:	4b96      	ldr	r3, [pc, #600]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a6:	4993      	ldr	r1, [pc, #588]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ba:	4b8e      	ldr	r3, [pc, #568]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025c8:	498a      	ldr	r1, [pc, #552]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025dc:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025ea:	4982      	ldr	r1, [pc, #520]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80025fe:	4b7d      	ldr	r3, [pc, #500]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4979      	ldr	r1, [pc, #484]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002620:	4b74      	ldr	r3, [pc, #464]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262e:	4971      	ldr	r1, [pc, #452]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	f023 020c 	bic.w	r2, r3, #12
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002650:	4968      	ldr	r1, [pc, #416]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002664:	4b63      	ldr	r3, [pc, #396]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002672:	4960      	ldr	r1, [pc, #384]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002686:	4b5b      	ldr	r3, [pc, #364]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002694:	4957      	ldr	r1, [pc, #348]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026a8:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	494f      	ldr	r1, [pc, #316]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026ca:	4b4a      	ldr	r3, [pc, #296]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4946      	ldr	r1, [pc, #280]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80026ec:	4b41      	ldr	r3, [pc, #260]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	493e      	ldr	r1, [pc, #248]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800271c:	4935      	ldr	r1, [pc, #212]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	492d      	ldr	r1, [pc, #180]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d011      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002760:	4924      	ldr	r1, [pc, #144]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800276c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002770:	d101      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002772:	2301      	movs	r3, #1
 8002774:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002782:	2301      	movs	r3, #1
 8002784:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002792:	4b18      	ldr	r3, [pc, #96]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002798:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a0:	4914      	ldr	r1, [pc, #80]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00b      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027c4:	490b      	ldr	r1, [pc, #44]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00f      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e8:	4902      	ldr	r1, [pc, #8]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027f0:	e002      	b.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002804:	4b8a      	ldr	r3, [pc, #552]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800280a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	4986      	ldr	r1, [pc, #536]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00b      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002828:	4b81      	ldr	r3, [pc, #516]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002838:	497d      	ldr	r1, [pc, #500]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d006      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80d6 	beq.w	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002854:	4b76      	ldr	r3, [pc, #472]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a75      	ldr	r2, [pc, #468]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800285e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002860:	f7fe fa4a 	bl	8000cf8 <HAL_GetTick>
 8002864:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002866:	e008      	b.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002868:	f7fe fa46 	bl	8000cf8 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b64      	cmp	r3, #100	; 0x64
 8002874:	d901      	bls.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e195      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800287a:	4b6d      	ldr	r3, [pc, #436]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f0      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d021      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	2b00      	cmp	r3, #0
 8002898:	d11d      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800289c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028a0:	0c1b      	lsrs	r3, r3, #16
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028a8:	4b61      	ldr	r3, [pc, #388]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ae:	0e1b      	lsrs	r3, r3, #24
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	019a      	lsls	r2, r3, #6
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	071b      	lsls	r3, r3, #28
 80028ce:	4958      	ldr	r1, [pc, #352]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d004      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x588>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ea:	d00a      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d02e      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002900:	d129      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002902:	4b4b      	ldr	r3, [pc, #300]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002904:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002910:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	019a      	lsls	r2, r3, #6
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	041b      	lsls	r3, r3, #16
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	061b      	lsls	r3, r3, #24
 8002930:	431a      	orrs	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	071b      	lsls	r3, r3, #28
 8002936:	493e      	ldr	r1, [pc, #248]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800293e:	4b3c      	ldr	r3, [pc, #240]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002944:	f023 021f 	bic.w	r2, r3, #31
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	3b01      	subs	r3, #1
 800294e:	4938      	ldr	r1, [pc, #224]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01d      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002962:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002968:	0e1b      	lsrs	r3, r3, #24
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002970:	4b2f      	ldr	r3, [pc, #188]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002976:	0f1b      	lsrs	r3, r3, #28
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	019a      	lsls	r2, r3, #6
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	061b      	lsls	r3, r3, #24
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	071b      	lsls	r3, r3, #28
 8002996:	4926      	ldr	r1, [pc, #152]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d011      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	019a      	lsls	r2, r3, #6
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	071b      	lsls	r3, r3, #28
 80029c6:	491a      	ldr	r1, [pc, #104]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fe f98d 	bl	8000cf8 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80029e2:	f7fe f989 	bl	8000cf8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b64      	cmp	r3, #100	; 0x64
 80029ee:	d901      	bls.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e0d8      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	f040 80ce 	bne.w	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a08      	ldr	r2, [pc, #32]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe f970 	bl	8000cf8 <HAL_GetTick>
 8002a18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a1a:	e00b      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a1c:	f7fe f96c 	bl	8000cf8 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b64      	cmp	r3, #100	; 0x64
 8002a28:	d904      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e0bb      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a34:	4b5e      	ldr	r3, [pc, #376]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a40:	d0ec      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d02e      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d12a      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a6a:	4b51      	ldr	r3, [pc, #324]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	0c1b      	lsrs	r3, r3, #16
 8002a72:	f003 0303 	and.w	r3, r3, #3
 8002a76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a78:	4b4d      	ldr	r3, [pc, #308]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	0f1b      	lsrs	r3, r3, #28
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	019a      	lsls	r2, r3, #6
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	041b      	lsls	r3, r3, #16
 8002a90:	431a      	orrs	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	071b      	lsls	r3, r3, #28
 8002a9e:	4944      	ldr	r1, [pc, #272]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002aa6:	4b42      	ldr	r3, [pc, #264]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	493d      	ldr	r1, [pc, #244]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d022      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad4:	d11d      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002adc:	0e1b      	lsrs	r3, r3, #24
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	0f1b      	lsrs	r3, r3, #28
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	019a      	lsls	r2, r3, #6
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	431a      	orrs	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	061b      	lsls	r3, r3, #24
 8002b04:	431a      	orrs	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	071b      	lsls	r3, r3, #28
 8002b0a:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d028      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	0e1b      	lsrs	r3, r3, #24
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	019a      	lsls	r2, r3, #6
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	431a      	orrs	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	69db      	ldr	r3, [r3, #28]
 8002b50:	071b      	lsls	r3, r3, #28
 8002b52:	4917      	ldr	r1, [pc, #92]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	4911      	ldr	r1, [pc, #68]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b70:	4b0f      	ldr	r3, [pc, #60]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b7c:	f7fe f8bc 	bl	8000cf8 <HAL_GetTick>
 8002b80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b84:	f7fe f8b8 	bl	8000cf8 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e007      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ba2:	d1ef      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d101      	bne.n	8002bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e040      	b.n	8002c48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d106      	bne.n	8002bdc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f7fd ff7e 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2224      	movs	r2, #36	; 0x24
 8002be0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f82c 	bl	8002c50 <UART_SetConfig>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e022      	b.n	8002c48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 fa84 	bl	8003118 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 fb0b 	bl	800325c <UART_CheckIdleState>
 8002c46:	4603      	mov	r3, r0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69db      	ldr	r3, [r3, #28]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	4ba6      	ldr	r3, [pc, #664]	; (8002f14 <UART_SetConfig+0x2c4>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	6979      	ldr	r1, [r7, #20]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68da      	ldr	r2, [r3, #12]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a94      	ldr	r2, [pc, #592]	; (8002f18 <UART_SetConfig+0x2c8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d120      	bne.n	8002d0e <UART_SetConfig+0xbe>
 8002ccc:	4b93      	ldr	r3, [pc, #588]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d816      	bhi.n	8002d08 <UART_SetConfig+0xb8>
 8002cda:	a201      	add	r2, pc, #4	; (adr r2, 8002ce0 <UART_SetConfig+0x90>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cfd 	.word	0x08002cfd
 8002ce8:	08002cf7 	.word	0x08002cf7
 8002cec:	08002d03 	.word	0x08002d03
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	77fb      	strb	r3, [r7, #31]
 8002cf4:	e150      	b.n	8002f98 <UART_SetConfig+0x348>
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	77fb      	strb	r3, [r7, #31]
 8002cfa:	e14d      	b.n	8002f98 <UART_SetConfig+0x348>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	77fb      	strb	r3, [r7, #31]
 8002d00:	e14a      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d02:	2308      	movs	r3, #8
 8002d04:	77fb      	strb	r3, [r7, #31]
 8002d06:	e147      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d08:	2310      	movs	r3, #16
 8002d0a:	77fb      	strb	r3, [r7, #31]
 8002d0c:	e144      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a83      	ldr	r2, [pc, #524]	; (8002f20 <UART_SetConfig+0x2d0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d132      	bne.n	8002d7e <UART_SetConfig+0x12e>
 8002d18:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	d828      	bhi.n	8002d78 <UART_SetConfig+0x128>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <UART_SetConfig+0xdc>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d61 	.word	0x08002d61
 8002d30:	08002d79 	.word	0x08002d79
 8002d34:	08002d79 	.word	0x08002d79
 8002d38:	08002d79 	.word	0x08002d79
 8002d3c:	08002d6d 	.word	0x08002d6d
 8002d40:	08002d79 	.word	0x08002d79
 8002d44:	08002d79 	.word	0x08002d79
 8002d48:	08002d79 	.word	0x08002d79
 8002d4c:	08002d67 	.word	0x08002d67
 8002d50:	08002d79 	.word	0x08002d79
 8002d54:	08002d79 	.word	0x08002d79
 8002d58:	08002d79 	.word	0x08002d79
 8002d5c:	08002d73 	.word	0x08002d73
 8002d60:	2300      	movs	r3, #0
 8002d62:	77fb      	strb	r3, [r7, #31]
 8002d64:	e118      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d66:	2302      	movs	r3, #2
 8002d68:	77fb      	strb	r3, [r7, #31]
 8002d6a:	e115      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	77fb      	strb	r3, [r7, #31]
 8002d70:	e112      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d72:	2308      	movs	r3, #8
 8002d74:	77fb      	strb	r3, [r7, #31]
 8002d76:	e10f      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d78:	2310      	movs	r3, #16
 8002d7a:	77fb      	strb	r3, [r7, #31]
 8002d7c:	e10c      	b.n	8002f98 <UART_SetConfig+0x348>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a68      	ldr	r2, [pc, #416]	; (8002f24 <UART_SetConfig+0x2d4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d120      	bne.n	8002dca <UART_SetConfig+0x17a>
 8002d88:	4b64      	ldr	r3, [pc, #400]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d92:	2b30      	cmp	r3, #48	; 0x30
 8002d94:	d013      	beq.n	8002dbe <UART_SetConfig+0x16e>
 8002d96:	2b30      	cmp	r3, #48	; 0x30
 8002d98:	d814      	bhi.n	8002dc4 <UART_SetConfig+0x174>
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d009      	beq.n	8002db2 <UART_SetConfig+0x162>
 8002d9e:	2b20      	cmp	r3, #32
 8002da0:	d810      	bhi.n	8002dc4 <UART_SetConfig+0x174>
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <UART_SetConfig+0x15c>
 8002da6:	2b10      	cmp	r3, #16
 8002da8:	d006      	beq.n	8002db8 <UART_SetConfig+0x168>
 8002daa:	e00b      	b.n	8002dc4 <UART_SetConfig+0x174>
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
 8002db0:	e0f2      	b.n	8002f98 <UART_SetConfig+0x348>
 8002db2:	2302      	movs	r3, #2
 8002db4:	77fb      	strb	r3, [r7, #31]
 8002db6:	e0ef      	b.n	8002f98 <UART_SetConfig+0x348>
 8002db8:	2304      	movs	r3, #4
 8002dba:	77fb      	strb	r3, [r7, #31]
 8002dbc:	e0ec      	b.n	8002f98 <UART_SetConfig+0x348>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	77fb      	strb	r3, [r7, #31]
 8002dc2:	e0e9      	b.n	8002f98 <UART_SetConfig+0x348>
 8002dc4:	2310      	movs	r3, #16
 8002dc6:	77fb      	strb	r3, [r7, #31]
 8002dc8:	e0e6      	b.n	8002f98 <UART_SetConfig+0x348>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a56      	ldr	r2, [pc, #344]	; (8002f28 <UART_SetConfig+0x2d8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d120      	bne.n	8002e16 <UART_SetConfig+0x1c6>
 8002dd4:	4b51      	ldr	r3, [pc, #324]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002dde:	2bc0      	cmp	r3, #192	; 0xc0
 8002de0:	d013      	beq.n	8002e0a <UART_SetConfig+0x1ba>
 8002de2:	2bc0      	cmp	r3, #192	; 0xc0
 8002de4:	d814      	bhi.n	8002e10 <UART_SetConfig+0x1c0>
 8002de6:	2b80      	cmp	r3, #128	; 0x80
 8002de8:	d009      	beq.n	8002dfe <UART_SetConfig+0x1ae>
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d810      	bhi.n	8002e10 <UART_SetConfig+0x1c0>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <UART_SetConfig+0x1a8>
 8002df2:	2b40      	cmp	r3, #64	; 0x40
 8002df4:	d006      	beq.n	8002e04 <UART_SetConfig+0x1b4>
 8002df6:	e00b      	b.n	8002e10 <UART_SetConfig+0x1c0>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	77fb      	strb	r3, [r7, #31]
 8002dfc:	e0cc      	b.n	8002f98 <UART_SetConfig+0x348>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	77fb      	strb	r3, [r7, #31]
 8002e02:	e0c9      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e04:	2304      	movs	r3, #4
 8002e06:	77fb      	strb	r3, [r7, #31]
 8002e08:	e0c6      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e0a:	2308      	movs	r3, #8
 8002e0c:	77fb      	strb	r3, [r7, #31]
 8002e0e:	e0c3      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e10:	2310      	movs	r3, #16
 8002e12:	77fb      	strb	r3, [r7, #31]
 8002e14:	e0c0      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a44      	ldr	r2, [pc, #272]	; (8002f2c <UART_SetConfig+0x2dc>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d125      	bne.n	8002e6c <UART_SetConfig+0x21c>
 8002e20:	4b3e      	ldr	r3, [pc, #248]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e2e:	d017      	beq.n	8002e60 <UART_SetConfig+0x210>
 8002e30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e34:	d817      	bhi.n	8002e66 <UART_SetConfig+0x216>
 8002e36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3a:	d00b      	beq.n	8002e54 <UART_SetConfig+0x204>
 8002e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e40:	d811      	bhi.n	8002e66 <UART_SetConfig+0x216>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <UART_SetConfig+0x1fe>
 8002e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e4a:	d006      	beq.n	8002e5a <UART_SetConfig+0x20a>
 8002e4c:	e00b      	b.n	8002e66 <UART_SetConfig+0x216>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	77fb      	strb	r3, [r7, #31]
 8002e52:	e0a1      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e54:	2302      	movs	r3, #2
 8002e56:	77fb      	strb	r3, [r7, #31]
 8002e58:	e09e      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	77fb      	strb	r3, [r7, #31]
 8002e5e:	e09b      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e60:	2308      	movs	r3, #8
 8002e62:	77fb      	strb	r3, [r7, #31]
 8002e64:	e098      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e66:	2310      	movs	r3, #16
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e095      	b.n	8002f98 <UART_SetConfig+0x348>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2f      	ldr	r2, [pc, #188]	; (8002f30 <UART_SetConfig+0x2e0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d125      	bne.n	8002ec2 <UART_SetConfig+0x272>
 8002e76:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e84:	d017      	beq.n	8002eb6 <UART_SetConfig+0x266>
 8002e86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e8a:	d817      	bhi.n	8002ebc <UART_SetConfig+0x26c>
 8002e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e90:	d00b      	beq.n	8002eaa <UART_SetConfig+0x25a>
 8002e92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e96:	d811      	bhi.n	8002ebc <UART_SetConfig+0x26c>
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <UART_SetConfig+0x254>
 8002e9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea0:	d006      	beq.n	8002eb0 <UART_SetConfig+0x260>
 8002ea2:	e00b      	b.n	8002ebc <UART_SetConfig+0x26c>
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
 8002ea8:	e076      	b.n	8002f98 <UART_SetConfig+0x348>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	77fb      	strb	r3, [r7, #31]
 8002eae:	e073      	b.n	8002f98 <UART_SetConfig+0x348>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	77fb      	strb	r3, [r7, #31]
 8002eb4:	e070      	b.n	8002f98 <UART_SetConfig+0x348>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	77fb      	strb	r3, [r7, #31]
 8002eba:	e06d      	b.n	8002f98 <UART_SetConfig+0x348>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	77fb      	strb	r3, [r7, #31]
 8002ec0:	e06a      	b.n	8002f98 <UART_SetConfig+0x348>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1b      	ldr	r2, [pc, #108]	; (8002f34 <UART_SetConfig+0x2e4>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d138      	bne.n	8002f3e <UART_SetConfig+0x2ee>
 8002ecc:	4b13      	ldr	r3, [pc, #76]	; (8002f1c <UART_SetConfig+0x2cc>)
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002ed6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002eda:	d017      	beq.n	8002f0c <UART_SetConfig+0x2bc>
 8002edc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ee0:	d82a      	bhi.n	8002f38 <UART_SetConfig+0x2e8>
 8002ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee6:	d00b      	beq.n	8002f00 <UART_SetConfig+0x2b0>
 8002ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eec:	d824      	bhi.n	8002f38 <UART_SetConfig+0x2e8>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <UART_SetConfig+0x2aa>
 8002ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef6:	d006      	beq.n	8002f06 <UART_SetConfig+0x2b6>
 8002ef8:	e01e      	b.n	8002f38 <UART_SetConfig+0x2e8>
 8002efa:	2300      	movs	r3, #0
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e04b      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f00:	2302      	movs	r3, #2
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e048      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f06:	2304      	movs	r3, #4
 8002f08:	77fb      	strb	r3, [r7, #31]
 8002f0a:	e045      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e042      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f12:	bf00      	nop
 8002f14:	efff69f3 	.word	0xefff69f3
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40004400 	.word	0x40004400
 8002f24:	40004800 	.word	0x40004800
 8002f28:	40004c00 	.word	0x40004c00
 8002f2c:	40005000 	.word	0x40005000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	40007800 	.word	0x40007800
 8002f38:	2310      	movs	r3, #16
 8002f3a:	77fb      	strb	r3, [r7, #31]
 8002f3c:	e02c      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a72      	ldr	r2, [pc, #456]	; (800310c <UART_SetConfig+0x4bc>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d125      	bne.n	8002f94 <UART_SetConfig+0x344>
 8002f48:	4b71      	ldr	r3, [pc, #452]	; (8003110 <UART_SetConfig+0x4c0>)
 8002f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f52:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f56:	d017      	beq.n	8002f88 <UART_SetConfig+0x338>
 8002f58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f5c:	d817      	bhi.n	8002f8e <UART_SetConfig+0x33e>
 8002f5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f62:	d00b      	beq.n	8002f7c <UART_SetConfig+0x32c>
 8002f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f68:	d811      	bhi.n	8002f8e <UART_SetConfig+0x33e>
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <UART_SetConfig+0x326>
 8002f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f72:	d006      	beq.n	8002f82 <UART_SetConfig+0x332>
 8002f74:	e00b      	b.n	8002f8e <UART_SetConfig+0x33e>
 8002f76:	2300      	movs	r3, #0
 8002f78:	77fb      	strb	r3, [r7, #31]
 8002f7a:	e00d      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	77fb      	strb	r3, [r7, #31]
 8002f80:	e00a      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f82:	2304      	movs	r3, #4
 8002f84:	77fb      	strb	r3, [r7, #31]
 8002f86:	e007      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f88:	2308      	movs	r3, #8
 8002f8a:	77fb      	strb	r3, [r7, #31]
 8002f8c:	e004      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f8e:	2310      	movs	r3, #16
 8002f90:	77fb      	strb	r3, [r7, #31]
 8002f92:	e001      	b.n	8002f98 <UART_SetConfig+0x348>
 8002f94:	2310      	movs	r3, #16
 8002f96:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa0:	d15b      	bne.n	800305a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002fa2:	7ffb      	ldrb	r3, [r7, #31]
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d828      	bhi.n	8002ffa <UART_SetConfig+0x3aa>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x360>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002fdd 	.word	0x08002fdd
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002ffb 	.word	0x08002ffb
 8002fc0:	08002feb 	.word	0x08002feb
 8002fc4:	08002ffb 	.word	0x08002ffb
 8002fc8:	08002ffb 	.word	0x08002ffb
 8002fcc:	08002ffb 	.word	0x08002ffb
 8002fd0:	08002ff3 	.word	0x08002ff3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7ff f99e 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8002fd8:	61b8      	str	r0, [r7, #24]
        break;
 8002fda:	e013      	b.n	8003004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fdc:	f7ff f9ae 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 8002fe0:	61b8      	str	r0, [r7, #24]
        break;
 8002fe2:	e00f      	b.n	8003004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fe4:	4b4b      	ldr	r3, [pc, #300]	; (8003114 <UART_SetConfig+0x4c4>)
 8002fe6:	61bb      	str	r3, [r7, #24]
        break;
 8002fe8:	e00c      	b.n	8003004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fea:	f7ff f881 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 8002fee:	61b8      	str	r0, [r7, #24]
        break;
 8002ff0:	e008      	b.n	8003004 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	61bb      	str	r3, [r7, #24]
        break;
 8002ff8:	e004      	b.n	8003004 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	77bb      	strb	r3, [r7, #30]
        break;
 8003002:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d074      	beq.n	80030f4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	005a      	lsls	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	085b      	lsrs	r3, r3, #1
 8003014:	441a      	add	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	fbb2 f3f3 	udiv	r3, r2, r3
 800301e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	2b0f      	cmp	r3, #15
 8003024:	d916      	bls.n	8003054 <UART_SetConfig+0x404>
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800302c:	d212      	bcs.n	8003054 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	b29b      	uxth	r3, r3
 8003032:	f023 030f 	bic.w	r3, r3, #15
 8003036:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	b29b      	uxth	r3, r3
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	b29a      	uxth	r2, r3
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	4313      	orrs	r3, r2
 8003048:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	89fa      	ldrh	r2, [r7, #14]
 8003050:	60da      	str	r2, [r3, #12]
 8003052:	e04f      	b.n	80030f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	77bb      	strb	r3, [r7, #30]
 8003058:	e04c      	b.n	80030f4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800305a:	7ffb      	ldrb	r3, [r7, #31]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d828      	bhi.n	80030b2 <UART_SetConfig+0x462>
 8003060:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <UART_SetConfig+0x418>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	0800308d 	.word	0x0800308d
 800306c:	08003095 	.word	0x08003095
 8003070:	0800309d 	.word	0x0800309d
 8003074:	080030b3 	.word	0x080030b3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030b3 	.word	0x080030b3
 8003080:	080030b3 	.word	0x080030b3
 8003084:	080030b3 	.word	0x080030b3
 8003088:	080030ab 	.word	0x080030ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800308c:	f7ff f942 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003090:	61b8      	str	r0, [r7, #24]
        break;
 8003092:	e013      	b.n	80030bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003094:	f7ff f952 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 8003098:	61b8      	str	r0, [r7, #24]
        break;
 800309a:	e00f      	b.n	80030bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <UART_SetConfig+0x4c4>)
 800309e:	61bb      	str	r3, [r7, #24]
        break;
 80030a0:	e00c      	b.n	80030bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030a2:	f7ff f825 	bl	80020f0 <HAL_RCC_GetSysClockFreq>
 80030a6:	61b8      	str	r0, [r7, #24]
        break;
 80030a8:	e008      	b.n	80030bc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	61bb      	str	r3, [r7, #24]
        break;
 80030b0:	e004      	b.n	80030bc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80030b2:	2300      	movs	r3, #0
 80030b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	77bb      	strb	r3, [r7, #30]
        break;
 80030ba:	bf00      	nop
    }

    if (pclk != 0U)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d018      	beq.n	80030f4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	085a      	lsrs	r2, r3, #1
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	441a      	add	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b0f      	cmp	r3, #15
 80030da:	d909      	bls.n	80030f0 <UART_SetConfig+0x4a0>
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e2:	d205      	bcs.n	80030f0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e001      	b.n	80030f4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003100:	7fbb      	ldrb	r3, [r7, #30]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40007c00 	.word	0x40007c00
 8003110:	40023800 	.word	0x40023800
 8003114:	00f42400 	.word	0x00f42400

08003118 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	430a      	orrs	r2, r1
 8003162:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	f003 0310 	and.w	r3, r3, #16
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	f003 0320 	and.w	r3, r3, #32
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d01a      	beq.n	800322e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003216:	d10a      	bne.n	800322e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	605a      	str	r2, [r3, #4]
  }
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af02      	add	r7, sp, #8
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800326c:	f7fd fd44 	bl	8000cf8 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b08      	cmp	r3, #8
 800327e:	d10e      	bne.n	800329e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003280:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f831 	bl	80032f6 <UART_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e027      	b.n	80032ee <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d10e      	bne.n	80032ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f81b 	bl	80032f6 <UART_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e011      	b.n	80032ee <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2220      	movs	r2, #32
 80032ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b09c      	sub	sp, #112	; 0x70
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003306:	e0a7      	b.n	8003458 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	f000 80a3 	beq.w	8003458 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fd fcf1 	bl	8000cf8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <UART_WaitOnFlagUntilTimeout+0x32>
 8003322:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003324:	2b00      	cmp	r3, #0
 8003326:	d13f      	bne.n	80033a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003330:	e853 3f00 	ldrex	r3, [r3]
 8003334:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800333c:	667b      	str	r3, [r7, #100]	; 0x64
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003346:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003348:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800334c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800334e:	e841 2300 	strex	r3, r2, [r1]
 8003352:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003354:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1e6      	bne.n	8003328 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	3308      	adds	r3, #8
 8003360:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800336a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800336c:	f023 0301 	bic.w	r3, r3, #1
 8003370:	663b      	str	r3, [r7, #96]	; 0x60
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	3308      	adds	r3, #8
 8003378:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800337a:	64ba      	str	r2, [r7, #72]	; 0x48
 800337c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e5      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2220      	movs	r2, #32
 8003392:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2220      	movs	r2, #32
 8003398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e068      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d050      	beq.n	8003458 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c4:	d148      	bne.n	8003458 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ee:	637b      	str	r3, [r7, #52]	; 0x34
 80033f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033f6:	e841 2300 	strex	r3, r2, [r1]
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1e6      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3308      	adds	r3, #8
 8003408:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	613b      	str	r3, [r7, #16]
   return(result);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	66bb      	str	r3, [r7, #104]	; 0x68
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3308      	adds	r3, #8
 8003420:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003422:	623a      	str	r2, [r7, #32]
 8003424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003426:	69f9      	ldr	r1, [r7, #28]
 8003428:	6a3a      	ldr	r2, [r7, #32]
 800342a:	e841 2300 	strex	r3, r2, [r1]
 800342e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1e5      	bne.n	8003402 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2220      	movs	r2, #32
 800343a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e010      	b.n	800347a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	4013      	ands	r3, r2
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	bf0c      	ite	eq
 8003468:	2301      	moveq	r3, #1
 800346a:	2300      	movne	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	429a      	cmp	r2, r3
 8003474:	f43f af48 	beq.w	8003308 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3770      	adds	r7, #112	; 0x70
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003496:	f3ef 8305 	mrs	r3, IPSR
 800349a:	60bb      	str	r3, [r7, #8]
  return(result);
 800349c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10f      	bne.n	80034c2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a2:	f3ef 8310 	mrs	r3, PRIMASK
 80034a6:	607b      	str	r3, [r7, #4]
  return(result);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d105      	bne.n	80034ba <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034ae:	f3ef 8311 	mrs	r3, BASEPRI
 80034b2:	603b      	str	r3, [r7, #0]
  return(result);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d007      	beq.n	80034ca <osKernelInitialize+0x3a>
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <osKernelInitialize+0x64>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d103      	bne.n	80034ca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80034c2:	f06f 0305 	mvn.w	r3, #5
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e00c      	b.n	80034e4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80034ca:	4b0a      	ldr	r3, [pc, #40]	; (80034f4 <osKernelInitialize+0x64>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d105      	bne.n	80034de <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <osKernelInitialize+0x64>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	e002      	b.n	80034e4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
 80034e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80034e4:	68fb      	ldr	r3, [r7, #12]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000350 	.word	0x20000350

080034f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034fe:	f3ef 8305 	mrs	r3, IPSR
 8003502:	60bb      	str	r3, [r7, #8]
  return(result);
 8003504:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10f      	bne.n	800352a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	607b      	str	r3, [r7, #4]
  return(result);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d105      	bne.n	8003522 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003516:	f3ef 8311 	mrs	r3, BASEPRI
 800351a:	603b      	str	r3, [r7, #0]
  return(result);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <osKernelStart+0x3a>
 8003522:	4b0f      	ldr	r3, [pc, #60]	; (8003560 <osKernelStart+0x68>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d103      	bne.n	8003532 <osKernelStart+0x3a>
    stat = osErrorISR;
 800352a:	f06f 0305 	mvn.w	r3, #5
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e010      	b.n	8003554 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003532:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <osKernelStart+0x68>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d109      	bne.n	800354e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800353a:	f7ff ffa2 	bl	8003482 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800353e:	4b08      	ldr	r3, [pc, #32]	; (8003560 <osKernelStart+0x68>)
 8003540:	2202      	movs	r2, #2
 8003542:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003544:	f001 f8ca 	bl	80046dc <vTaskStartScheduler>
      stat = osOK;
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e002      	b.n	8003554 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800354e:	f04f 33ff 	mov.w	r3, #4294967295
 8003552:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003554:	68fb      	ldr	r3, [r7, #12]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000350 	.word	0x20000350

08003564 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003564:	b580      	push	{r7, lr}
 8003566:	b090      	sub	sp, #64	; 0x40
 8003568:	af04      	add	r7, sp, #16
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003570:	2300      	movs	r3, #0
 8003572:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003574:	f3ef 8305 	mrs	r3, IPSR
 8003578:	61fb      	str	r3, [r7, #28]
  return(result);
 800357a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 808f 	bne.w	80036a0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003582:	f3ef 8310 	mrs	r3, PRIMASK
 8003586:	61bb      	str	r3, [r7, #24]
  return(result);
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d105      	bne.n	800359a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800358e:	f3ef 8311 	mrs	r3, BASEPRI
 8003592:	617b      	str	r3, [r7, #20]
  return(result);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <osThreadNew+0x3e>
 800359a:	4b44      	ldr	r3, [pc, #272]	; (80036ac <osThreadNew+0x148>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d07e      	beq.n	80036a0 <osThreadNew+0x13c>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d07b      	beq.n	80036a0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80035a8:	2380      	movs	r3, #128	; 0x80
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80035ac:	2318      	movs	r3, #24
 80035ae:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d045      	beq.n	800364c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d002      	beq.n	80035ce <osThreadNew+0x6a>
        name = attr->name;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d008      	beq.n	80035f4 <osThreadNew+0x90>
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	2b38      	cmp	r3, #56	; 0x38
 80035e6:	d805      	bhi.n	80035f4 <osThreadNew+0x90>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <osThreadNew+0x94>
        return (NULL);
 80035f4:	2300      	movs	r3, #0
 80035f6:	e054      	b.n	80036a2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	089b      	lsrs	r3, r3, #2
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00e      	beq.n	800362e <osThreadNew+0xca>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2bbb      	cmp	r3, #187	; 0xbb
 8003616:	d90a      	bls.n	800362e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d002      	beq.n	800362e <osThreadNew+0xca>
        mem = 1;
 8003628:	2301      	movs	r3, #1
 800362a:	623b      	str	r3, [r7, #32]
 800362c:	e010      	b.n	8003650 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10c      	bne.n	8003650 <osThreadNew+0xec>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d108      	bne.n	8003650 <osThreadNew+0xec>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d104      	bne.n	8003650 <osThreadNew+0xec>
          mem = 0;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
 800364a:	e001      	b.n	8003650 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800364c:	2300      	movs	r3, #0
 800364e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d110      	bne.n	8003678 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800365e:	9202      	str	r2, [sp, #8]
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800366a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fe3f 	bl	80042f0 <xTaskCreateStatic>
 8003672:	4603      	mov	r3, r0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	e013      	b.n	80036a0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d110      	bne.n	80036a0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	b29a      	uxth	r2, r3
 8003682:	f107 0310 	add.w	r3, r7, #16
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 fe90 	bl	80043b6 <xTaskCreate>
 8003696:	4603      	mov	r3, r0
 8003698:	2b01      	cmp	r3, #1
 800369a:	d001      	beq.n	80036a0 <osThreadNew+0x13c>
          hTask = NULL;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036a0:	693b      	ldr	r3, [r7, #16]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3730      	adds	r7, #48	; 0x30
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	20000350 	.word	0x20000350

080036b0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036b8:	f3ef 8305 	mrs	r3, IPSR
 80036bc:	613b      	str	r3, [r7, #16]
  return(result);
 80036be:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036c4:	f3ef 8310 	mrs	r3, PRIMASK
 80036c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036d0:	f3ef 8311 	mrs	r3, BASEPRI
 80036d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d007      	beq.n	80036ec <osDelay+0x3c>
 80036dc:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <osDelay+0x58>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d103      	bne.n	80036ec <osDelay+0x3c>
    stat = osErrorISR;
 80036e4:	f06f 0305 	mvn.w	r3, #5
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	e007      	b.n	80036fc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <osDelay+0x4c>
      vTaskDelay(ticks);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 ffba 	bl	8004670 <vTaskDelay>
    }
  }

  return (stat);
 80036fc:	697b      	ldr	r3, [r7, #20]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000350 	.word	0x20000350

0800370c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <vApplicationGetIdleTaskMemory+0x2c>)
 800371c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a06      	ldr	r2, [pc, #24]	; (800373c <vApplicationGetIdleTaskMemory+0x30>)
 8003722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2280      	movs	r2, #128	; 0x80
 8003728:	601a      	str	r2, [r3, #0]
}
 800372a:	bf00      	nop
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
 8003736:	bf00      	nop
 8003738:	20000354 	.word	0x20000354
 800373c:	20000410 	.word	0x20000410

08003740 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a07      	ldr	r2, [pc, #28]	; (800376c <vApplicationGetTimerTaskMemory+0x2c>)
 8003750:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	4a06      	ldr	r2, [pc, #24]	; (8003770 <vApplicationGetTimerTaskMemory+0x30>)
 8003756:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800375e:	601a      	str	r2, [r3, #0]
}
 8003760:	bf00      	nop
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	20000610 	.word	0x20000610
 8003770:	200006cc 	.word	0x200006cc

08003774 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f103 0208 	add.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f04f 32ff 	mov.w	r2, #4294967295
 800378c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f103 0208 	add.w	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f103 0208 	add.w	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr

080037b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037ce:	b480      	push	{r7}
 80037d0:	b085      	sub	sp, #20
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	601a      	str	r2, [r3, #0]
}
 800380a:	bf00      	nop
 800380c:	3714      	adds	r7, #20
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d103      	bne.n	8003836 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e00c      	b.n	8003850 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3308      	adds	r3, #8
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	e002      	b.n	8003844 <vListInsert+0x2e>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	429a      	cmp	r2, r3
 800384e:	d2f6      	bcs.n	800383e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	601a      	str	r2, [r3, #0]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6852      	ldr	r2, [r2, #4]
 80038a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d103      	bne.n	80038bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d10c      	bne.n	800390a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f4:	b672      	cpsid	i
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	b662      	cpsie	i
 8003904:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800390a:	f002 f8a7 	bl	8005a5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003916:	68f9      	ldr	r1, [r7, #12]
 8003918:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	441a      	add	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800393a:	3b01      	subs	r3, #1
 800393c:	68f9      	ldr	r1, [r7, #12]
 800393e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003940:	fb01 f303 	mul.w	r3, r1, r3
 8003944:	441a      	add	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d114      	bne.n	800398a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d01a      	beq.n	800399e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3310      	adds	r3, #16
 800396c:	4618      	mov	r0, r3
 800396e:	f001 f95d 	bl	8004c2c <xTaskRemoveFromEventList>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d012      	beq.n	800399e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003978:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <xQueueGenericReset+0xd0>)
 800397a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	f3bf 8f4f 	dsb	sy
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	e009      	b.n	800399e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	3310      	adds	r3, #16
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fef0 	bl	8003774 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3324      	adds	r3, #36	; 0x24
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff feeb 	bl	8003774 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800399e:	f002 f891 	bl	8005ac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039a2:	2301      	movs	r3, #1
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b08e      	sub	sp, #56	; 0x38
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
 80039bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	b672      	cpsid	i
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	b662      	cpsie	i
 80039d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039da:	bf00      	nop
 80039dc:	e7fe      	b.n	80039dc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10c      	bne.n	80039fe <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	b672      	cpsid	i
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	b662      	cpsie	i
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d002      	beq.n	8003a0a <xQueueGenericCreateStatic+0x5a>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <xQueueGenericCreateStatic+0x5e>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <xQueueGenericCreateStatic+0x60>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10c      	bne.n	8003a2e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	b672      	cpsid	i
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	b662      	cpsie	i
 8003a28:	623b      	str	r3, [r7, #32]
}
 8003a2a:	bf00      	nop
 8003a2c:	e7fe      	b.n	8003a2c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <xQueueGenericCreateStatic+0x8a>
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <xQueueGenericCreateStatic+0x8e>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <xQueueGenericCreateStatic+0x90>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10c      	bne.n	8003a5e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	b672      	cpsid	i
 8003a4a:	f383 8811 	msr	BASEPRI, r3
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f3bf 8f4f 	dsb	sy
 8003a56:	b662      	cpsie	i
 8003a58:	61fb      	str	r3, [r7, #28]
}
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a5e:	2350      	movs	r3, #80	; 0x50
 8003a60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b50      	cmp	r3, #80	; 0x50
 8003a66:	d00c      	beq.n	8003a82 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	b672      	cpsid	i
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	b662      	cpsie	i
 8003a7c:	61bb      	str	r3, [r7, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00d      	beq.n	8003aaa <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68b9      	ldr	r1, [r7, #8]
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f805 	bl	8003ab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3730      	adds	r7, #48	; 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d103      	bne.n	8003ad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	e002      	b.n	8003ad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	69b8      	ldr	r0, [r7, #24]
 8003ae6:	f7ff fef9 	bl	80038dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	78fa      	ldrb	r2, [r7, #3]
 8003aee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003af2:	bf00      	nop
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
	...

08003afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	; 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10c      	bne.n	8003b32 <xQueueGenericSend+0x36>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1c:	b672      	cpsid	i
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	b662      	cpsie	i
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b2e:	bf00      	nop
 8003b30:	e7fe      	b.n	8003b30 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d103      	bne.n	8003b40 <xQueueGenericSend+0x44>
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d101      	bne.n	8003b44 <xQueueGenericSend+0x48>
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <xQueueGenericSend+0x4a>
 8003b44:	2300      	movs	r3, #0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d10c      	bne.n	8003b64 <xQueueGenericSend+0x68>
	__asm volatile
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	b672      	cpsid	i
 8003b50:	f383 8811 	msr	BASEPRI, r3
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	f3bf 8f4f 	dsb	sy
 8003b5c:	b662      	cpsie	i
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d103      	bne.n	8003b72 <xQueueGenericSend+0x76>
 8003b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <xQueueGenericSend+0x7a>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <xQueueGenericSend+0x7c>
 8003b76:	2300      	movs	r3, #0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10c      	bne.n	8003b96 <xQueueGenericSend+0x9a>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b80:	b672      	cpsid	i
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	b662      	cpsie	i
 8003b90:	623b      	str	r3, [r7, #32]
}
 8003b92:	bf00      	nop
 8003b94:	e7fe      	b.n	8003b94 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b96:	f001 fa13 	bl	8004fc0 <xTaskGetSchedulerState>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <xQueueGenericSend+0xaa>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueGenericSend+0xae>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericSend+0xb0>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10c      	bne.n	8003bca <xQueueGenericSend+0xce>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	b672      	cpsid	i
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	b662      	cpsie	i
 8003bc4:	61fb      	str	r3, [r7, #28]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bca:	f001 ff47 	bl	8005a5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d302      	bcc.n	8003be0 <xQueueGenericSend+0xe4>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d129      	bne.n	8003c34 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003be6:	f000 fa15 	bl	8004014 <prvCopyDataToQueue>
 8003bea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf6:	3324      	adds	r3, #36	; 0x24
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f001 f817 	bl	8004c2c <xTaskRemoveFromEventList>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d013      	beq.n	8003c2c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c04:	4b3f      	ldr	r3, [pc, #252]	; (8003d04 <xQueueGenericSend+0x208>)
 8003c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	e00a      	b.n	8003c2c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c1c:	4b39      	ldr	r3, [pc, #228]	; (8003d04 <xQueueGenericSend+0x208>)
 8003c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c2c:	f001 ff4a 	bl	8005ac4 <vPortExitCritical>
				return pdPASS;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e063      	b.n	8003cfc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d103      	bne.n	8003c42 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c3a:	f001 ff43 	bl	8005ac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	e05c      	b.n	8003cfc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c48:	f107 0314 	add.w	r3, r7, #20
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f001 f853 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c56:	f001 ff35 	bl	8005ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c5a:	f000 fdb3 	bl	80047c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c5e:	f001 fefd 	bl	8005a5c <vPortEnterCritical>
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c68:	b25b      	sxtb	r3, r3
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d103      	bne.n	8003c78 <xQueueGenericSend+0x17c>
 8003c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c7e:	b25b      	sxtb	r3, r3
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d103      	bne.n	8003c8e <xQueueGenericSend+0x192>
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c8e:	f001 ff19 	bl	8005ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c92:	1d3a      	adds	r2, r7, #4
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4611      	mov	r1, r2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f001 f842 	bl	8004d24 <xTaskCheckForTimeOut>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d124      	bne.n	8003cf0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ca6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ca8:	f000 faac 	bl	8004204 <prvIsQueueFull>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d018      	beq.n	8003ce4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	3310      	adds	r3, #16
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff62 	bl	8004b84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cc2:	f000 fa37 	bl	8004134 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cc6:	f000 fd8b 	bl	80047e0 <xTaskResumeAll>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	f47f af7c 	bne.w	8003bca <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8003cd2:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <xQueueGenericSend+0x208>)
 8003cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	f3bf 8f4f 	dsb	sy
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	e772      	b.n	8003bca <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ce4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ce6:	f000 fa25 	bl	8004134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cea:	f000 fd79 	bl	80047e0 <xTaskResumeAll>
 8003cee:	e76c      	b.n	8003bca <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cf2:	f000 fa1f 	bl	8004134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cf6:	f000 fd73 	bl	80047e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3738      	adds	r7, #56	; 0x38
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b08e      	sub	sp, #56	; 0x38
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10c      	bne.n	8003d3a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	b672      	cpsid	i
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	b662      	cpsie	i
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d36:	bf00      	nop
 8003d38:	e7fe      	b.n	8003d38 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d103      	bne.n	8003d48 <xQueueGenericSendFromISR+0x40>
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <xQueueGenericSendFromISR+0x44>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <xQueueGenericSendFromISR+0x46>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10c      	bne.n	8003d6c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8003d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d56:	b672      	cpsid	i
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	b662      	cpsie	i
 8003d66:	623b      	str	r3, [r7, #32]
}
 8003d68:	bf00      	nop
 8003d6a:	e7fe      	b.n	8003d6a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d103      	bne.n	8003d7a <xQueueGenericSendFromISR+0x72>
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <xQueueGenericSendFromISR+0x76>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <xQueueGenericSendFromISR+0x78>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10c      	bne.n	8003d9e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	b672      	cpsid	i
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	b662      	cpsie	i
 8003d98:	61fb      	str	r3, [r7, #28]
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d9e:	f001 ff45 	bl	8005c2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003da2:	f3ef 8211 	mrs	r2, BASEPRI
 8003da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003daa:	b672      	cpsid	i
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	b662      	cpsie	i
 8003dba:	61ba      	str	r2, [r7, #24]
 8003dbc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <xQueueGenericSendFromISR+0xcc>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d12c      	bne.n	8003e2e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003de4:	f000 f916 	bl	8004014 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003de8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df0:	d112      	bne.n	8003e18 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	3324      	adds	r3, #36	; 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 ff14 	bl	8004c2c <xTaskRemoveFromEventList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00e      	beq.n	8003e28 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00b      	beq.n	8003e28 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	e007      	b.n	8003e28 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	b25a      	sxtb	r2, r3
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003e2c:	e001      	b.n	8003e32 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	637b      	str	r3, [r7, #52]	; 0x34
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3738      	adds	r7, #56	; 0x38
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	; 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e54:	2300      	movs	r3, #0
 8003e56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <xQueueReceive+0x34>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	b672      	cpsid	i
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	b662      	cpsie	i
 8003e76:	623b      	str	r3, [r7, #32]
}
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <xQueueReceive+0x42>
 8003e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <xQueueReceive+0x46>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <xQueueReceive+0x48>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10c      	bne.n	8003eae <xQueueReceive+0x66>
	__asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	b672      	cpsid	i
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	b662      	cpsie	i
 8003ea8:	61fb      	str	r3, [r7, #28]
}
 8003eaa:	bf00      	nop
 8003eac:	e7fe      	b.n	8003eac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eae:	f001 f887 	bl	8004fc0 <xTaskGetSchedulerState>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <xQueueReceive+0x76>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <xQueueReceive+0x7a>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <xQueueReceive+0x7c>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d10c      	bne.n	8003ee2 <xQueueReceive+0x9a>
	__asm volatile
 8003ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ecc:	b672      	cpsid	i
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	b662      	cpsie	i
 8003edc:	61bb      	str	r3, [r7, #24]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ee2:	f001 fdbb 	bl	8005a5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01f      	beq.n	8003f32 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef6:	f000 f8f7 	bl	80040e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00f      	beq.n	8003f2a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fe8c 	bl	8004c2c <xTaskRemoveFromEventList>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f1a:	4b3d      	ldr	r3, [pc, #244]	; (8004010 <xQueueReceive+0x1c8>)
 8003f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f2a:	f001 fdcb 	bl	8005ac4 <vPortExitCritical>
				return pdPASS;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e069      	b.n	8004006 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d103      	bne.n	8003f40 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f38:	f001 fdc4 	bl	8005ac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e062      	b.n	8004006 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fed4 	bl	8004cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f50:	2301      	movs	r3, #1
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f54:	f001 fdb6 	bl	8005ac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f58:	f000 fc34 	bl	80047c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f5c:	f001 fd7e 	bl	8005a5c <vPortEnterCritical>
 8003f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f66:	b25b      	sxtb	r3, r3
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d103      	bne.n	8003f76 <xQueueReceive+0x12e>
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f7c:	b25b      	sxtb	r3, r3
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d103      	bne.n	8003f8c <xQueueReceive+0x144>
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f8c:	f001 fd9a 	bl	8005ac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f90:	1d3a      	adds	r2, r7, #4
 8003f92:	f107 0310 	add.w	r3, r7, #16
 8003f96:	4611      	mov	r1, r2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fec3 	bl	8004d24 <xTaskCheckForTimeOut>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d123      	bne.n	8003fec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa6:	f000 f917 	bl	80041d8 <prvIsQueueEmpty>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d017      	beq.n	8003fe0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	3324      	adds	r3, #36	; 0x24
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4611      	mov	r1, r2
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fde3 	bl	8004b84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fc0:	f000 f8b8 	bl	8004134 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fc4:	f000 fc0c 	bl	80047e0 <xTaskResumeAll>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d189      	bne.n	8003ee2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8003fce:	4b10      	ldr	r3, [pc, #64]	; (8004010 <xQueueReceive+0x1c8>)
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	601a      	str	r2, [r3, #0]
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	e780      	b.n	8003ee2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fe2:	f000 f8a7 	bl	8004134 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe6:	f000 fbfb 	bl	80047e0 <xTaskResumeAll>
 8003fea:	e77a      	b.n	8003ee2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fee:	f000 f8a1 	bl	8004134 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff2:	f000 fbf5 	bl	80047e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff8:	f000 f8ee 	bl	80041d8 <prvIsQueueEmpty>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f43f af6f 	beq.w	8003ee2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004006:	4618      	mov	r0, r3
 8004008:	3730      	adds	r7, #48	; 0x30
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10d      	bne.n	800404e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d14d      	bne.n	80040d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ffdc 	bl	8004ffc <xTaskPriorityDisinherit>
 8004044:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	e043      	b.n	80040d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d119      	bne.n	8004088 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6858      	ldr	r0, [r3, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405c:	461a      	mov	r2, r3
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	f002 f832 	bl	80060c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406c:	441a      	add	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	429a      	cmp	r2, r3
 800407c:	d32b      	bcc.n	80040d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e026      	b.n	80040d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	68d8      	ldr	r0, [r3, #12]
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	461a      	mov	r2, r3
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	f002 f818 	bl	80060c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	425b      	negs	r3, r3
 80040a2:	441a      	add	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d207      	bcs.n	80040c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	425b      	negs	r3, r3
 80040be:	441a      	add	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d105      	bne.n	80040d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80040de:	697b      	ldr	r3, [r7, #20]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d018      	beq.n	800412c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	441a      	add	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	d303      	bcc.n	800411c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68d9      	ldr	r1, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004124:	461a      	mov	r2, r3
 8004126:	6838      	ldr	r0, [r7, #0]
 8004128:	f001 ffce 	bl	80060c8 <memcpy>
	}
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800413c:	f001 fc8e 	bl	8005a5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004146:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004148:	e011      	b.n	800416e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3324      	adds	r3, #36	; 0x24
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fd68 	bl	8004c2c <xTaskRemoveFromEventList>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004162:	f000 fe45 	bl	8004df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	3b01      	subs	r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800416e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004172:	2b00      	cmp	r3, #0
 8004174:	dce9      	bgt.n	800414a <prvUnlockQueue+0x16>
 8004176:	e000      	b.n	800417a <prvUnlockQueue+0x46>
					break;
 8004178:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004182:	f001 fc9f 	bl	8005ac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004186:	f001 fc69 	bl	8005a5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004190:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004192:	e011      	b.n	80041b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d012      	beq.n	80041c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3310      	adds	r3, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fd43 	bl	8004c2c <xTaskRemoveFromEventList>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041ac:	f000 fe20 	bl	8004df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041b0:	7bbb      	ldrb	r3, [r7, #14]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	dce9      	bgt.n	8004194 <prvUnlockQueue+0x60>
 80041c0:	e000      	b.n	80041c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	22ff      	movs	r2, #255	; 0xff
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80041cc:	f001 fc7a 	bl	8005ac4 <vPortExitCritical>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041e0:	f001 fc3c 	bl	8005a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d102      	bne.n	80041f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041ec:	2301      	movs	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e001      	b.n	80041f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041f6:	f001 fc65 	bl	8005ac4 <vPortExitCritical>

	return xReturn;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800420c:	f001 fc26 	bl	8005a5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	429a      	cmp	r2, r3
 800421a:	d102      	bne.n	8004222 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	e001      	b.n	8004226 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004226:	f001 fc4d 	bl	8005ac4 <vPortExitCritical>

	return xReturn;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	e014      	b.n	800426e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004244:	4a0f      	ldr	r2, [pc, #60]	; (8004284 <vQueueAddToRegistry+0x50>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10b      	bne.n	8004268 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004250:	490c      	ldr	r1, [pc, #48]	; (8004284 <vQueueAddToRegistry+0x50>)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800425a:	4a0a      	ldr	r2, [pc, #40]	; (8004284 <vQueueAddToRegistry+0x50>)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4413      	add	r3, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004266:	e006      	b.n	8004276 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3301      	adds	r3, #1
 800426c:	60fb      	str	r3, [r7, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b07      	cmp	r3, #7
 8004272:	d9e7      	bls.n	8004244 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004274:	bf00      	nop
 8004276:	bf00      	nop
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000acc 	.word	0x20000acc

08004288 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004298:	f001 fbe0 	bl	8005a5c <vPortEnterCritical>
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a2:	b25b      	sxtb	r3, r3
 80042a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a8:	d103      	bne.n	80042b2 <vQueueWaitForMessageRestricted+0x2a>
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042b8:	b25b      	sxtb	r3, r3
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d103      	bne.n	80042c8 <vQueueWaitForMessageRestricted+0x40>
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042c8:	f001 fbfc 	bl	8005ac4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d106      	bne.n	80042e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	3324      	adds	r3, #36	; 0x24
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	68b9      	ldr	r1, [r7, #8]
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fc77 	bl	8004bd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042e2:	6978      	ldr	r0, [r7, #20]
 80042e4:	f7ff ff26 	bl	8004134 <prvUnlockQueue>
	}
 80042e8:	bf00      	nop
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08e      	sub	sp, #56	; 0x38
 80042f4:	af04      	add	r7, sp, #16
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10c      	bne.n	800431e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	b672      	cpsid	i
 800430a:	f383 8811 	msr	BASEPRI, r3
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f3bf 8f4f 	dsb	sy
 8004316:	b662      	cpsie	i
 8004318:	623b      	str	r3, [r7, #32]
}
 800431a:	bf00      	nop
 800431c:	e7fe      	b.n	800431c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <xTaskCreateStatic+0x4e>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	b672      	cpsid	i
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	b662      	cpsie	i
 8004338:	61fb      	str	r3, [r7, #28]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800433e:	23bc      	movs	r3, #188	; 0xbc
 8004340:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	2bbc      	cmp	r3, #188	; 0xbc
 8004346:	d00c      	beq.n	8004362 <xTaskCreateStatic+0x72>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434c:	b672      	cpsid	i
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	b662      	cpsie	i
 800435c:	61bb      	str	r3, [r7, #24]
}
 800435e:	bf00      	nop
 8004360:	e7fe      	b.n	8004360 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004362:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	2b00      	cmp	r3, #0
 8004368:	d01e      	beq.n	80043a8 <xTaskCreateStatic+0xb8>
 800436a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004378:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800437a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437c:	2202      	movs	r2, #2
 800437e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004382:	2300      	movs	r3, #0
 8004384:	9303      	str	r3, [sp, #12]
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	9302      	str	r3, [sp, #8]
 800438a:	f107 0314 	add.w	r3, r7, #20
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	68b9      	ldr	r1, [r7, #8]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 f850 	bl	8004440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043a2:	f000 f8f5 	bl	8004590 <prvAddNewTaskToReadyList>
 80043a6:	e001      	b.n	80043ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043ac:	697b      	ldr	r3, [r7, #20]
	}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3728      	adds	r7, #40	; 0x28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b08c      	sub	sp, #48	; 0x30
 80043ba:	af04      	add	r7, sp, #16
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4618      	mov	r0, r3
 80043cc:	f001 fc72 	bl	8005cb4 <pvPortMalloc>
 80043d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00e      	beq.n	80043f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043d8:	20bc      	movs	r0, #188	; 0xbc
 80043da:	f001 fc6b 	bl	8005cb4 <pvPortMalloc>
 80043de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
 80043ec:	e005      	b.n	80043fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043ee:	6978      	ldr	r0, [r7, #20]
 80043f0:	f001 fd2a 	bl	8005e48 <vPortFree>
 80043f4:	e001      	b.n	80043fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d017      	beq.n	8004430 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004408:	88fa      	ldrh	r2, [r7, #6]
 800440a:	2300      	movs	r3, #0
 800440c:	9303      	str	r3, [sp, #12]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	9302      	str	r3, [sp, #8]
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004414:	9301      	str	r3, [sp, #4]
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f80e 	bl	8004440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004424:	69f8      	ldr	r0, [r7, #28]
 8004426:	f000 f8b3 	bl	8004590 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800442a:	2301      	movs	r3, #1
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	e002      	b.n	8004436 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004430:	f04f 33ff 	mov.w	r3, #4294967295
 8004434:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004436:	69bb      	ldr	r3, [r7, #24]
	}
 8004438:	4618      	mov	r0, r3
 800443a:	3720      	adds	r7, #32
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b088      	sub	sp, #32
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800444e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004450:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	461a      	mov	r2, r3
 8004458:	21a5      	movs	r1, #165	; 0xa5
 800445a:	f001 fe43 	bl	80060e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800445e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004468:	440b      	add	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f023 0307 	bic.w	r3, r3, #7
 8004476:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	b672      	cpsid	i
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	b662      	cpsie	i
 8004496:	617b      	str	r3, [r7, #20]
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d01f      	beq.n	80044e2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e012      	b.n	80044ce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	7819      	ldrb	r1, [r3, #0]
 80044b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	3334      	adds	r3, #52	; 0x34
 80044b8:	460a      	mov	r2, r1
 80044ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	4413      	add	r3, r2
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d006      	beq.n	80044d6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	3301      	adds	r3, #1
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	2b0f      	cmp	r3, #15
 80044d2:	d9e9      	bls.n	80044a8 <prvInitialiseNewTask+0x68>
 80044d4:	e000      	b.n	80044d8 <prvInitialiseNewTask+0x98>
			{
				break;
 80044d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044e0:	e003      	b.n	80044ea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	2b37      	cmp	r3, #55	; 0x37
 80044ee:	d901      	bls.n	80044f4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044f0:	2337      	movs	r3, #55	; 0x37
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7ff f952 	bl	80037b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	3318      	adds	r3, #24
 8004514:	4618      	mov	r0, r3
 8004516:	f7ff f94d 	bl	80037b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800451a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004522:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004528:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800452a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2200      	movs	r2, #0
 8004534:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	2200      	movs	r2, #0
 800453c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	3354      	adds	r3, #84	; 0x54
 8004544:	2260      	movs	r2, #96	; 0x60
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f001 fdcb 	bl	80060e4 <memset>
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <prvInitialiseNewTask+0x144>)
 8004552:	659a      	str	r2, [r3, #88]	; 0x58
 8004554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004556:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <prvInitialiseNewTask+0x148>)
 8004558:	65da      	str	r2, [r3, #92]	; 0x5c
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	4a0b      	ldr	r2, [pc, #44]	; (800458c <prvInitialiseNewTask+0x14c>)
 800455e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	69b8      	ldr	r0, [r7, #24]
 8004566:	f001 f96b 	bl	8005840 <pxPortInitialiseStack>
 800456a:	4602      	mov	r2, r0
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004572:	2b00      	cmp	r3, #0
 8004574:	d002      	beq.n	800457c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800457c:	bf00      	nop
 800457e:	3720      	adds	r7, #32
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	08006310 	.word	0x08006310
 8004588:	08006330 	.word	0x08006330
 800458c:	080062f0 	.word	0x080062f0

08004590 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b082      	sub	sp, #8
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004598:	f001 fa60 	bl	8005a5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800459c:	4b2d      	ldr	r3, [pc, #180]	; (8004654 <prvAddNewTaskToReadyList+0xc4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	4a2c      	ldr	r2, [pc, #176]	; (8004654 <prvAddNewTaskToReadyList+0xc4>)
 80045a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045a6:	4b2c      	ldr	r3, [pc, #176]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045ae:	4a2a      	ldr	r2, [pc, #168]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <prvAddNewTaskToReadyList+0xc4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d110      	bne.n	80045de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045bc:	f000 fc3c 	bl	8004e38 <prvInitialiseTaskLists>
 80045c0:	e00d      	b.n	80045de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <prvAddNewTaskToReadyList+0xcc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d109      	bne.n	80045de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045ca:	4b23      	ldr	r3, [pc, #140]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d802      	bhi.n	80045de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80045d8:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <prvAddNewTaskToReadyList+0xd0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3301      	adds	r3, #1
 80045e4:	4a1e      	ldr	r2, [pc, #120]	; (8004660 <prvAddNewTaskToReadyList+0xd0>)
 80045e6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <prvAddNewTaskToReadyList+0xd0>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <prvAddNewTaskToReadyList+0xd4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d903      	bls.n	8004604 <prvAddNewTaskToReadyList+0x74>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	4a18      	ldr	r2, [pc, #96]	; (8004664 <prvAddNewTaskToReadyList+0xd4>)
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004608:	4613      	mov	r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	4413      	add	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4a15      	ldr	r2, [pc, #84]	; (8004668 <prvAddNewTaskToReadyList+0xd8>)
 8004612:	441a      	add	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	4610      	mov	r0, r2
 800461c:	f7ff f8d7 	bl	80037ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004620:	f001 fa50 	bl	8005ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004624:	4b0d      	ldr	r3, [pc, #52]	; (800465c <prvAddNewTaskToReadyList+0xcc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00e      	beq.n	800464a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <prvAddNewTaskToReadyList+0xc8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	429a      	cmp	r2, r3
 8004638:	d207      	bcs.n	800464a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800463a:	4b0c      	ldr	r3, [pc, #48]	; (800466c <prvAddNewTaskToReadyList+0xdc>)
 800463c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800464a:	bf00      	nop
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000fe0 	.word	0x20000fe0
 8004658:	20000b0c 	.word	0x20000b0c
 800465c:	20000fec 	.word	0x20000fec
 8004660:	20000ffc 	.word	0x20000ffc
 8004664:	20000fe8 	.word	0x20000fe8
 8004668:	20000b10 	.word	0x20000b10
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004678:	2300      	movs	r3, #0
 800467a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d019      	beq.n	80046b6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004682:	4b14      	ldr	r3, [pc, #80]	; (80046d4 <vTaskDelay+0x64>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00c      	beq.n	80046a4 <vTaskDelay+0x34>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	b672      	cpsid	i
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	b662      	cpsie	i
 800469e:	60bb      	str	r3, [r7, #8]
}
 80046a0:	bf00      	nop
 80046a2:	e7fe      	b.n	80046a2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80046a4:	f000 f88e 	bl	80047c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046a8:	2100      	movs	r1, #0
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 fd18 	bl	80050e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046b0:	f000 f896 	bl	80047e0 <xTaskResumeAll>
 80046b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80046bc:	4b06      	ldr	r3, [pc, #24]	; (80046d8 <vTaskDelay+0x68>)
 80046be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046cc:	bf00      	nop
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	20001008 	.word	0x20001008
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046e6:	2300      	movs	r3, #0
 80046e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046ea:	463a      	mov	r2, r7
 80046ec:	1d39      	adds	r1, r7, #4
 80046ee:	f107 0308 	add.w	r3, r7, #8
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff f80a 	bl	800370c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	9202      	str	r2, [sp, #8]
 8004700:	9301      	str	r3, [sp, #4]
 8004702:	2300      	movs	r3, #0
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2300      	movs	r3, #0
 8004708:	460a      	mov	r2, r1
 800470a:	4926      	ldr	r1, [pc, #152]	; (80047a4 <vTaskStartScheduler+0xc8>)
 800470c:	4826      	ldr	r0, [pc, #152]	; (80047a8 <vTaskStartScheduler+0xcc>)
 800470e:	f7ff fdef 	bl	80042f0 <xTaskCreateStatic>
 8004712:	4603      	mov	r3, r0
 8004714:	4a25      	ldr	r2, [pc, #148]	; (80047ac <vTaskStartScheduler+0xd0>)
 8004716:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004718:	4b24      	ldr	r3, [pc, #144]	; (80047ac <vTaskStartScheduler+0xd0>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004720:	2301      	movs	r3, #1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	e001      	b.n	800472a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004726:	2300      	movs	r3, #0
 8004728:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d102      	bne.n	8004736 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004730:	f000 fd2a 	bl	8005188 <xTimerCreateTimerTask>
 8004734:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d11d      	bne.n	8004778 <vTaskStartScheduler+0x9c>
	__asm volatile
 800473c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004740:	b672      	cpsid	i
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	b662      	cpsie	i
 8004750:	613b      	str	r3, [r7, #16]
}
 8004752:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004754:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <vTaskStartScheduler+0xd4>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3354      	adds	r3, #84	; 0x54
 800475a:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <vTaskStartScheduler+0xd8>)
 800475c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800475e:	4b16      	ldr	r3, [pc, #88]	; (80047b8 <vTaskStartScheduler+0xdc>)
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004766:	4b15      	ldr	r3, [pc, #84]	; (80047bc <vTaskStartScheduler+0xe0>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <vTaskStartScheduler+0xe4>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004772:	f001 f8f5 	bl	8005960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004776:	e010      	b.n	800479a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800477e:	d10c      	bne.n	800479a <vTaskStartScheduler+0xbe>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	b672      	cpsid	i
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	b662      	cpsie	i
 8004794:	60fb      	str	r3, [r7, #12]
}
 8004796:	bf00      	nop
 8004798:	e7fe      	b.n	8004798 <vTaskStartScheduler+0xbc>
}
 800479a:	bf00      	nop
 800479c:	3718      	adds	r7, #24
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	0800629c 	.word	0x0800629c
 80047a8:	08004e09 	.word	0x08004e09
 80047ac:	20001004 	.word	0x20001004
 80047b0:	20000b0c 	.word	0x20000b0c
 80047b4:	20000010 	.word	0x20000010
 80047b8:	20001000 	.word	0x20001000
 80047bc:	20000fec 	.word	0x20000fec
 80047c0:	20000fe4 	.word	0x20000fe4

080047c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <vTaskSuspendAll+0x18>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4a03      	ldr	r2, [pc, #12]	; (80047dc <vTaskSuspendAll+0x18>)
 80047d0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80047d2:	bf00      	nop
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20001008 	.word	0x20001008

080047e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047ee:	4b43      	ldr	r3, [pc, #268]	; (80048fc <xTaskResumeAll+0x11c>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <xTaskResumeAll+0x30>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	b672      	cpsid	i
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	b662      	cpsie	i
 800480a:	603b      	str	r3, [r7, #0]
}
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004810:	f001 f924 	bl	8005a5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004814:	4b39      	ldr	r3, [pc, #228]	; (80048fc <xTaskResumeAll+0x11c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	3b01      	subs	r3, #1
 800481a:	4a38      	ldr	r2, [pc, #224]	; (80048fc <xTaskResumeAll+0x11c>)
 800481c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800481e:	4b37      	ldr	r3, [pc, #220]	; (80048fc <xTaskResumeAll+0x11c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d162      	bne.n	80048ec <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004826:	4b36      	ldr	r3, [pc, #216]	; (8004900 <xTaskResumeAll+0x120>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d05e      	beq.n	80048ec <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482e:	e02f      	b.n	8004890 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004830:	4b34      	ldr	r3, [pc, #208]	; (8004904 <xTaskResumeAll+0x124>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	3318      	adds	r3, #24
 800483c:	4618      	mov	r0, r3
 800483e:	f7ff f823 	bl	8003888 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3304      	adds	r3, #4
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f81e 	bl	8003888 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004850:	4b2d      	ldr	r3, [pc, #180]	; (8004908 <xTaskResumeAll+0x128>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d903      	bls.n	8004860 <xTaskResumeAll+0x80>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	4a2a      	ldr	r2, [pc, #168]	; (8004908 <xTaskResumeAll+0x128>)
 800485e:	6013      	str	r3, [r2, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4613      	mov	r3, r2
 8004866:	009b      	lsls	r3, r3, #2
 8004868:	4413      	add	r3, r2
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	4a27      	ldr	r2, [pc, #156]	; (800490c <xTaskResumeAll+0x12c>)
 800486e:	441a      	add	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	3304      	adds	r3, #4
 8004874:	4619      	mov	r1, r3
 8004876:	4610      	mov	r0, r2
 8004878:	f7fe ffa9 	bl	80037ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004880:	4b23      	ldr	r3, [pc, #140]	; (8004910 <xTaskResumeAll+0x130>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d302      	bcc.n	8004890 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800488a:	4b22      	ldr	r3, [pc, #136]	; (8004914 <xTaskResumeAll+0x134>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <xTaskResumeAll+0x124>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1cb      	bne.n	8004830 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800489e:	f000 fb6f 	bl	8004f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <xTaskResumeAll+0x138>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d010      	beq.n	80048d0 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ae:	f000 f847 	bl	8004940 <xTaskIncrementTick>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d002      	beq.n	80048be <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80048b8:	4b16      	ldr	r3, [pc, #88]	; (8004914 <xTaskResumeAll+0x134>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3b01      	subs	r3, #1
 80048c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f1      	bne.n	80048ae <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <xTaskResumeAll+0x138>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048d0:	4b10      	ldr	r3, [pc, #64]	; (8004914 <xTaskResumeAll+0x134>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d009      	beq.n	80048ec <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048dc:	4b0f      	ldr	r3, [pc, #60]	; (800491c <xTaskResumeAll+0x13c>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048ec:	f001 f8ea 	bl	8005ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80048f0:	68bb      	ldr	r3, [r7, #8]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	20001008 	.word	0x20001008
 8004900:	20000fe0 	.word	0x20000fe0
 8004904:	20000fa0 	.word	0x20000fa0
 8004908:	20000fe8 	.word	0x20000fe8
 800490c:	20000b10 	.word	0x20000b10
 8004910:	20000b0c 	.word	0x20000b0c
 8004914:	20000ff4 	.word	0x20000ff4
 8004918:	20000ff0 	.word	0x20000ff0
 800491c:	e000ed04 	.word	0xe000ed04

08004920 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <xTaskGetTickCount+0x1c>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800492c:	687b      	ldr	r3, [r7, #4]
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000fe4 	.word	0x20000fe4

08004940 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004946:	2300      	movs	r3, #0
 8004948:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800494a:	4b50      	ldr	r3, [pc, #320]	; (8004a8c <xTaskIncrementTick+0x14c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f040 808b 	bne.w	8004a6a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004954:	4b4e      	ldr	r3, [pc, #312]	; (8004a90 <xTaskIncrementTick+0x150>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800495c:	4a4c      	ldr	r2, [pc, #304]	; (8004a90 <xTaskIncrementTick+0x150>)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d122      	bne.n	80049ae <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8004968:	4b4a      	ldr	r3, [pc, #296]	; (8004a94 <xTaskIncrementTick+0x154>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	b672      	cpsid	i
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	b662      	cpsie	i
 8004986:	603b      	str	r3, [r7, #0]
}
 8004988:	bf00      	nop
 800498a:	e7fe      	b.n	800498a <xTaskIncrementTick+0x4a>
 800498c:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <xTaskIncrementTick+0x154>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	60fb      	str	r3, [r7, #12]
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <xTaskIncrementTick+0x158>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a3f      	ldr	r2, [pc, #252]	; (8004a94 <xTaskIncrementTick+0x154>)
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4a3f      	ldr	r2, [pc, #252]	; (8004a98 <xTaskIncrementTick+0x158>)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b3e      	ldr	r3, [pc, #248]	; (8004a9c <xTaskIncrementTick+0x15c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	4a3d      	ldr	r2, [pc, #244]	; (8004a9c <xTaskIncrementTick+0x15c>)
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	f000 fae9 	bl	8004f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049ae:	4b3c      	ldr	r3, [pc, #240]	; (8004aa0 <xTaskIncrementTick+0x160>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d349      	bcc.n	8004a4c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049b8:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <xTaskIncrementTick+0x154>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d104      	bne.n	80049cc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <xTaskIncrementTick+0x160>)
 80049c4:	f04f 32ff 	mov.w	r2, #4294967295
 80049c8:	601a      	str	r2, [r3, #0]
					break;
 80049ca:	e03f      	b.n	8004a4c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049cc:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <xTaskIncrementTick+0x154>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d203      	bcs.n	80049ec <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049e4:	4a2e      	ldr	r2, [pc, #184]	; (8004aa0 <xTaskIncrementTick+0x160>)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049ea:	e02f      	b.n	8004a4c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe ff49 	bl	8003888 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d004      	beq.n	8004a08 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	3318      	adds	r3, #24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fe ff40 	bl	8003888 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0c:	4b25      	ldr	r3, [pc, #148]	; (8004aa4 <xTaskIncrementTick+0x164>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d903      	bls.n	8004a1c <xTaskIncrementTick+0xdc>
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	4a22      	ldr	r2, [pc, #136]	; (8004aa4 <xTaskIncrementTick+0x164>)
 8004a1a:	6013      	str	r3, [r2, #0]
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <xTaskIncrementTick+0x168>)
 8004a2a:	441a      	add	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	3304      	adds	r3, #4
 8004a30:	4619      	mov	r1, r3
 8004a32:	4610      	mov	r0, r2
 8004a34:	f7fe fecb 	bl	80037ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a3c:	4b1b      	ldr	r3, [pc, #108]	; (8004aac <xTaskIncrementTick+0x16c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d3b8      	bcc.n	80049b8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8004a46:	2301      	movs	r3, #1
 8004a48:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a4a:	e7b5      	b.n	80049b8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a4c:	4b17      	ldr	r3, [pc, #92]	; (8004aac <xTaskIncrementTick+0x16c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a52:	4915      	ldr	r1, [pc, #84]	; (8004aa8 <xTaskIncrementTick+0x168>)
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d907      	bls.n	8004a74 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e004      	b.n	8004a74 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004a6a:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <xTaskIncrementTick+0x170>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	4a0f      	ldr	r2, [pc, #60]	; (8004ab0 <xTaskIncrementTick+0x170>)
 8004a72:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004a74:	4b0f      	ldr	r3, [pc, #60]	; (8004ab4 <xTaskIncrementTick+0x174>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004a80:	697b      	ldr	r3, [r7, #20]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20001008 	.word	0x20001008
 8004a90:	20000fe4 	.word	0x20000fe4
 8004a94:	20000f98 	.word	0x20000f98
 8004a98:	20000f9c 	.word	0x20000f9c
 8004a9c:	20000ff8 	.word	0x20000ff8
 8004aa0:	20001000 	.word	0x20001000
 8004aa4:	20000fe8 	.word	0x20000fe8
 8004aa8:	20000b10 	.word	0x20000b10
 8004aac:	20000b0c 	.word	0x20000b0c
 8004ab0:	20000ff0 	.word	0x20000ff0
 8004ab4:	20000ff4 	.word	0x20000ff4

08004ab8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <vTaskSwitchContext+0xb4>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ac6:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <vTaskSwitchContext+0xb8>)
 8004ac8:	2201      	movs	r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004acc:	e048      	b.n	8004b60 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <vTaskSwitchContext+0xb8>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <vTaskSwitchContext+0xbc>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	e012      	b.n	8004b02 <vTaskSwitchContext+0x4a>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <vTaskSwitchContext+0x44>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	b672      	cpsid	i
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	b662      	cpsie	i
 8004af6:	607b      	str	r3, [r7, #4]
}
 8004af8:	bf00      	nop
 8004afa:	e7fe      	b.n	8004afa <vTaskSwitchContext+0x42>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	491d      	ldr	r1, [pc, #116]	; (8004b78 <vTaskSwitchContext+0xc0>)
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4613      	mov	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	4413      	add	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	440b      	add	r3, r1
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0e2      	beq.n	8004adc <vTaskSwitchContext+0x24>
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <vTaskSwitchContext+0xc0>)
 8004b22:	4413      	add	r3, r2
 8004b24:	60bb      	str	r3, [r7, #8]
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3308      	adds	r3, #8
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d104      	bne.n	8004b46 <vTaskSwitchContext+0x8e>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <vTaskSwitchContext+0xc4>)
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <vTaskSwitchContext+0xbc>)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b56:	4b09      	ldr	r3, [pc, #36]	; (8004b7c <vTaskSwitchContext+0xc4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3354      	adds	r3, #84	; 0x54
 8004b5c:	4a08      	ldr	r2, [pc, #32]	; (8004b80 <vTaskSwitchContext+0xc8>)
 8004b5e:	6013      	str	r3, [r2, #0]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	20001008 	.word	0x20001008
 8004b70:	20000ff4 	.word	0x20000ff4
 8004b74:	20000fe8 	.word	0x20000fe8
 8004b78:	20000b10 	.word	0x20000b10
 8004b7c:	20000b0c 	.word	0x20000b0c
 8004b80:	20000010 	.word	0x20000010

08004b84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10c      	bne.n	8004bae <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	b672      	cpsid	i
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	b662      	cpsie	i
 8004ba8:	60fb      	str	r3, [r7, #12]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bae:	4b07      	ldr	r3, [pc, #28]	; (8004bcc <vTaskPlaceOnEventList+0x48>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3318      	adds	r3, #24
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7fe fe2d 	bl	8003816 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bbc:	2101      	movs	r1, #1
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f000 fa8e 	bl	80050e0 <prvAddCurrentTaskToDelayedList>
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000b0c 	.word	0x20000b0c

08004bd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be6:	b672      	cpsid	i
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	b662      	cpsie	i
 8004bf6:	617b      	str	r3, [r7, #20]
}
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <vTaskPlaceOnEventListRestricted+0x58>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	3318      	adds	r3, #24
 8004c02:	4619      	mov	r1, r3
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f7fe fde2 	bl	80037ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d002      	beq.n	8004c16 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295
 8004c14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	68b8      	ldr	r0, [r7, #8]
 8004c1a:	f000 fa61 	bl	80050e0 <prvAddCurrentTaskToDelayedList>
	}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	20000b0c 	.word	0x20000b0c

08004c2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8004c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c46:	b672      	cpsid	i
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	b662      	cpsie	i
 8004c56:	60fb      	str	r3, [r7, #12]
}
 8004c58:	bf00      	nop
 8004c5a:	e7fe      	b.n	8004c5a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	3318      	adds	r3, #24
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fe fe11 	bl	8003888 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c66:	4b1e      	ldr	r3, [pc, #120]	; (8004ce0 <xTaskRemoveFromEventList+0xb4>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d11d      	bne.n	8004caa <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fe fe08 	bl	8003888 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7c:	4b19      	ldr	r3, [pc, #100]	; (8004ce4 <xTaskRemoveFromEventList+0xb8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d903      	bls.n	8004c8c <xTaskRemoveFromEventList+0x60>
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c88:	4a16      	ldr	r2, [pc, #88]	; (8004ce4 <xTaskRemoveFromEventList+0xb8>)
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	4613      	mov	r3, r2
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	4413      	add	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4a13      	ldr	r2, [pc, #76]	; (8004ce8 <xTaskRemoveFromEventList+0xbc>)
 8004c9a:	441a      	add	r2, r3
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fe fd93 	bl	80037ce <vListInsertEnd>
 8004ca8:	e005      	b.n	8004cb6 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3318      	adds	r3, #24
 8004cae:	4619      	mov	r1, r3
 8004cb0:	480e      	ldr	r0, [pc, #56]	; (8004cec <xTaskRemoveFromEventList+0xc0>)
 8004cb2:	f7fe fd8c 	bl	80037ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4b0d      	ldr	r3, [pc, #52]	; (8004cf0 <xTaskRemoveFromEventList+0xc4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d905      	bls.n	8004cd0 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <xTaskRemoveFromEventList+0xc8>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e001      	b.n	8004cd4 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cd4:	697b      	ldr	r3, [r7, #20]
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	20001008 	.word	0x20001008
 8004ce4:	20000fe8 	.word	0x20000fe8
 8004ce8:	20000b10 	.word	0x20000b10
 8004cec:	20000fa0 	.word	0x20000fa0
 8004cf0:	20000b0c 	.word	0x20000b0c
 8004cf4:	20000ff4 	.word	0x20000ff4

08004cf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d00:	4b06      	ldr	r3, [pc, #24]	; (8004d1c <vTaskInternalSetTimeOutState+0x24>)
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <vTaskInternalSetTimeOutState+0x28>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	605a      	str	r2, [r3, #4]
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000ff8 	.word	0x20000ff8
 8004d20:	20000fe4 	.word	0x20000fe4

08004d24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10c      	bne.n	8004d4e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	b672      	cpsid	i
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	b662      	cpsie	i
 8004d48:	613b      	str	r3, [r7, #16]
}
 8004d4a:	bf00      	nop
 8004d4c:	e7fe      	b.n	8004d4c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10c      	bne.n	8004d6e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	b672      	cpsid	i
 8004d5a:	f383 8811 	msr	BASEPRI, r3
 8004d5e:	f3bf 8f6f 	isb	sy
 8004d62:	f3bf 8f4f 	dsb	sy
 8004d66:	b662      	cpsie	i
 8004d68:	60fb      	str	r3, [r7, #12]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8004d6e:	f000 fe75 	bl	8005a5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <xTaskCheckForTimeOut+0xc4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d102      	bne.n	8004d92 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e023      	b.n	8004dda <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <xTaskCheckForTimeOut+0xc8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d007      	beq.n	8004dae <xTaskCheckForTimeOut+0x8a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e015      	b.n	8004dda <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d20b      	bcs.n	8004dd0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ff97 	bl	8004cf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e004      	b.n	8004dda <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dda:	f000 fe73 	bl	8005ac4 <vPortExitCritical>

	return xReturn;
 8004dde:	69fb      	ldr	r3, [r7, #28]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20000fe4 	.word	0x20000fe4
 8004dec:	20000ff8 	.word	0x20000ff8

08004df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <vTaskMissedYield+0x14>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	20000ff4 	.word	0x20000ff4

08004e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e10:	f000 f852 	bl	8004eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <prvIdleTask+0x28>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d9f9      	bls.n	8004e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <prvIdleTask+0x2c>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e2c:	e7f0      	b.n	8004e10 <prvIdleTask+0x8>
 8004e2e:	bf00      	nop
 8004e30:	20000b10 	.word	0x20000b10
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e00c      	b.n	8004e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <prvInitialiseTaskLists+0x60>)
 8004e50:	4413      	add	r3, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe fc8e 	bl	8003774 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b37      	cmp	r3, #55	; 0x37
 8004e62:	d9ef      	bls.n	8004e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e64:	480d      	ldr	r0, [pc, #52]	; (8004e9c <prvInitialiseTaskLists+0x64>)
 8004e66:	f7fe fc85 	bl	8003774 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e6a:	480d      	ldr	r0, [pc, #52]	; (8004ea0 <prvInitialiseTaskLists+0x68>)
 8004e6c:	f7fe fc82 	bl	8003774 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e70:	480c      	ldr	r0, [pc, #48]	; (8004ea4 <prvInitialiseTaskLists+0x6c>)
 8004e72:	f7fe fc7f 	bl	8003774 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e76:	480c      	ldr	r0, [pc, #48]	; (8004ea8 <prvInitialiseTaskLists+0x70>)
 8004e78:	f7fe fc7c 	bl	8003774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e7c:	480b      	ldr	r0, [pc, #44]	; (8004eac <prvInitialiseTaskLists+0x74>)
 8004e7e:	f7fe fc79 	bl	8003774 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <prvInitialiseTaskLists+0x78>)
 8004e84:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <prvInitialiseTaskLists+0x64>)
 8004e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <prvInitialiseTaskLists+0x7c>)
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <prvInitialiseTaskLists+0x68>)
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000b10 	.word	0x20000b10
 8004e9c:	20000f70 	.word	0x20000f70
 8004ea0:	20000f84 	.word	0x20000f84
 8004ea4:	20000fa0 	.word	0x20000fa0
 8004ea8:	20000fb4 	.word	0x20000fb4
 8004eac:	20000fcc 	.word	0x20000fcc
 8004eb0:	20000f98 	.word	0x20000f98
 8004eb4:	20000f9c 	.word	0x20000f9c

08004eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ebe:	e019      	b.n	8004ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ec0:	f000 fdcc 	bl	8005a5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <prvCheckTasksWaitingTermination+0x50>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fe fcd9 	bl	8003888 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <prvCheckTasksWaitingTermination+0x54>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	4a0b      	ldr	r2, [pc, #44]	; (8004f0c <prvCheckTasksWaitingTermination+0x54>)
 8004ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvCheckTasksWaitingTermination+0x58>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <prvCheckTasksWaitingTermination+0x58>)
 8004ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eea:	f000 fdeb 	bl	8005ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f810 	bl	8004f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <prvCheckTasksWaitingTermination+0x58>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e1      	bne.n	8004ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000fb4 	.word	0x20000fb4
 8004f0c:	20000fe0 	.word	0x20000fe0
 8004f10:	20000fc8 	.word	0x20000fc8

08004f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3354      	adds	r3, #84	; 0x54
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 f8f5 	bl	8006110 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 ff87 	bl	8005e48 <vPortFree>
				vPortFree( pxTCB );
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 ff84 	bl	8005e48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f40:	e01a      	b.n	8004f78 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d103      	bne.n	8004f54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 ff7b 	bl	8005e48 <vPortFree>
	}
 8004f52:	e011      	b.n	8004f78 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d00c      	beq.n	8004f78 <prvDeleteTCB+0x64>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	b672      	cpsid	i
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	b662      	cpsie	i
 8004f72:	60fb      	str	r3, [r7, #12]
}
 8004f74:	bf00      	nop
 8004f76:	e7fe      	b.n	8004f76 <prvDeleteTCB+0x62>
	}
 8004f78:	bf00      	nop
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f86:	4b0c      	ldr	r3, [pc, #48]	; (8004fb8 <prvResetNextTaskUnblockTime+0x38>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d104      	bne.n	8004f9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f90:	4b0a      	ldr	r3, [pc, #40]	; (8004fbc <prvResetNextTaskUnblockTime+0x3c>)
 8004f92:	f04f 32ff 	mov.w	r2, #4294967295
 8004f96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f98:	e008      	b.n	8004fac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9a:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <prvResetNextTaskUnblockTime+0x38>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a04      	ldr	r2, [pc, #16]	; (8004fbc <prvResetNextTaskUnblockTime+0x3c>)
 8004faa:	6013      	str	r3, [r2, #0]
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	20000f98 	.word	0x20000f98
 8004fbc:	20001000 	.word	0x20001000

08004fc0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <xTaskGetSchedulerState+0x34>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	607b      	str	r3, [r7, #4]
 8004fd2:	e008      	b.n	8004fe6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd4:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <xTaskGetSchedulerState+0x38>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fdc:	2302      	movs	r3, #2
 8004fde:	607b      	str	r3, [r7, #4]
 8004fe0:	e001      	b.n	8004fe6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fe6:	687b      	ldr	r3, [r7, #4]
	}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	20000fec 	.word	0x20000fec
 8004ff8:	20001008 	.word	0x20001008

08004ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b086      	sub	sp, #24
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d05a      	beq.n	80050c8 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005012:	4b30      	ldr	r3, [pc, #192]	; (80050d4 <xTaskPriorityDisinherit+0xd8>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	429a      	cmp	r2, r3
 800501a:	d00c      	beq.n	8005036 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	b672      	cpsid	i
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	b662      	cpsie	i
 8005030:	60fb      	str	r3, [r7, #12]
}
 8005032:	bf00      	nop
 8005034:	e7fe      	b.n	8005034 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10c      	bne.n	8005058 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	b672      	cpsid	i
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	b662      	cpsie	i
 8005052:	60bb      	str	r3, [r7, #8]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	1e5a      	subs	r2, r3, #1
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	429a      	cmp	r2, r3
 800506c:	d02c      	beq.n	80050c8 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005072:	2b00      	cmp	r3, #0
 8005074:	d128      	bne.n	80050c8 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	3304      	adds	r3, #4
 800507a:	4618      	mov	r0, r3
 800507c:	f7fe fc04 	bl	8003888 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800508c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <xTaskPriorityDisinherit+0xdc>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d903      	bls.n	80050a8 <xTaskPriorityDisinherit+0xac>
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a0c      	ldr	r2, [pc, #48]	; (80050d8 <xTaskPriorityDisinherit+0xdc>)
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4a09      	ldr	r2, [pc, #36]	; (80050dc <xTaskPriorityDisinherit+0xe0>)
 80050b6:	441a      	add	r2, r3
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fe fb85 	bl	80037ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050c4:	2301      	movs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050c8:	697b      	ldr	r3, [r7, #20]
	}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3718      	adds	r7, #24
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000b0c 	.word	0x20000b0c
 80050d8:	20000fe8 	.word	0x20000fe8
 80050dc:	20000b10 	.word	0x20000b10

080050e0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80050ea:	4b21      	ldr	r3, [pc, #132]	; (8005170 <prvAddCurrentTaskToDelayedList+0x90>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050f0:	4b20      	ldr	r3, [pc, #128]	; (8005174 <prvAddCurrentTaskToDelayedList+0x94>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3304      	adds	r3, #4
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fe fbc6 	bl	8003888 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d10a      	bne.n	800511a <prvAddCurrentTaskToDelayedList+0x3a>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d007      	beq.n	800511a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510a:	4b1a      	ldr	r3, [pc, #104]	; (8005174 <prvAddCurrentTaskToDelayedList+0x94>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4819      	ldr	r0, [pc, #100]	; (8005178 <prvAddCurrentTaskToDelayedList+0x98>)
 8005114:	f7fe fb5b 	bl	80037ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005118:	e026      	b.n	8005168 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4413      	add	r3, r2
 8005120:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005122:	4b14      	ldr	r3, [pc, #80]	; (8005174 <prvAddCurrentTaskToDelayedList+0x94>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68ba      	ldr	r2, [r7, #8]
 8005128:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	429a      	cmp	r2, r3
 8005130:	d209      	bcs.n	8005146 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005132:	4b12      	ldr	r3, [pc, #72]	; (800517c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	4b0f      	ldr	r3, [pc, #60]	; (8005174 <prvAddCurrentTaskToDelayedList+0x94>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f7fe fb69 	bl	8003816 <vListInsert>
}
 8005144:	e010      	b.n	8005168 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005146:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <prvAddCurrentTaskToDelayedList+0x94>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f7fe fb5f 	bl	8003816 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <prvAddCurrentTaskToDelayedList+0xa4>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	429a      	cmp	r2, r3
 8005160:	d202      	bcs.n	8005168 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005162:	4a08      	ldr	r2, [pc, #32]	; (8005184 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20000fe4 	.word	0x20000fe4
 8005174:	20000b0c 	.word	0x20000b0c
 8005178:	20000fcc 	.word	0x20000fcc
 800517c:	20000f9c 	.word	0x20000f9c
 8005180:	20000f98 	.word	0x20000f98
 8005184:	20001000 	.word	0x20001000

08005188 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	; 0x28
 800518c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005192:	f000 fb15 	bl	80057c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005196:	4b1d      	ldr	r3, [pc, #116]	; (800520c <xTimerCreateTimerTask+0x84>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d021      	beq.n	80051e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051a6:	1d3a      	adds	r2, r7, #4
 80051a8:	f107 0108 	add.w	r1, r7, #8
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe fac5 	bl	8003740 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	9202      	str	r2, [sp, #8]
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	2302      	movs	r3, #2
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2300      	movs	r3, #0
 80051c6:	460a      	mov	r2, r1
 80051c8:	4911      	ldr	r1, [pc, #68]	; (8005210 <xTimerCreateTimerTask+0x88>)
 80051ca:	4812      	ldr	r0, [pc, #72]	; (8005214 <xTimerCreateTimerTask+0x8c>)
 80051cc:	f7ff f890 	bl	80042f0 <xTaskCreateStatic>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4a11      	ldr	r2, [pc, #68]	; (8005218 <xTimerCreateTimerTask+0x90>)
 80051d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051d6:	4b10      	ldr	r3, [pc, #64]	; (8005218 <xTimerCreateTimerTask+0x90>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051de:	2301      	movs	r3, #1
 80051e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d10c      	bne.n	8005202 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	b672      	cpsid	i
 80051ee:	f383 8811 	msr	BASEPRI, r3
 80051f2:	f3bf 8f6f 	isb	sy
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	b662      	cpsie	i
 80051fc:	613b      	str	r3, [r7, #16]
}
 80051fe:	bf00      	nop
 8005200:	e7fe      	b.n	8005200 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005202:	697b      	ldr	r3, [r7, #20]
}
 8005204:	4618      	mov	r0, r3
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	2000103c 	.word	0x2000103c
 8005210:	080062a4 	.word	0x080062a4
 8005214:	08005359 	.word	0x08005359
 8005218:	20001040 	.word	0x20001040

0800521c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
 8005228:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10c      	bne.n	800524e <xTimerGenericCommand+0x32>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	b672      	cpsid	i
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	b662      	cpsie	i
 8005248:	623b      	str	r3, [r7, #32]
}
 800524a:	bf00      	nop
 800524c:	e7fe      	b.n	800524c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800524e:	4b1a      	ldr	r3, [pc, #104]	; (80052b8 <xTimerGenericCommand+0x9c>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d02a      	beq.n	80052ac <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b05      	cmp	r3, #5
 8005266:	dc18      	bgt.n	800529a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005268:	f7ff feaa 	bl	8004fc0 <xTaskGetSchedulerState>
 800526c:	4603      	mov	r3, r0
 800526e:	2b02      	cmp	r3, #2
 8005270:	d109      	bne.n	8005286 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005272:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <xTimerGenericCommand+0x9c>)
 8005274:	6818      	ldr	r0, [r3, #0]
 8005276:	f107 0110 	add.w	r1, r7, #16
 800527a:	2300      	movs	r3, #0
 800527c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800527e:	f7fe fc3d 	bl	8003afc <xQueueGenericSend>
 8005282:	6278      	str	r0, [r7, #36]	; 0x24
 8005284:	e012      	b.n	80052ac <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005286:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <xTimerGenericCommand+0x9c>)
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f107 0110 	add.w	r1, r7, #16
 800528e:	2300      	movs	r3, #0
 8005290:	2200      	movs	r2, #0
 8005292:	f7fe fc33 	bl	8003afc <xQueueGenericSend>
 8005296:	6278      	str	r0, [r7, #36]	; 0x24
 8005298:	e008      	b.n	80052ac <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <xTimerGenericCommand+0x9c>)
 800529c:	6818      	ldr	r0, [r3, #0]
 800529e:	f107 0110 	add.w	r1, r7, #16
 80052a2:	2300      	movs	r3, #0
 80052a4:	683a      	ldr	r2, [r7, #0]
 80052a6:	f7fe fd2f 	bl	8003d08 <xQueueGenericSendFromISR>
 80052aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3728      	adds	r7, #40	; 0x28
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	2000103c 	.word	0x2000103c

080052bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052c6:	4b23      	ldr	r3, [pc, #140]	; (8005354 <prvProcessExpiredTimer+0x98>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fad7 	bl	8003888 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d024      	beq.n	8005332 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	699a      	ldr	r2, [r3, #24]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	18d1      	adds	r1, r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	6978      	ldr	r0, [r7, #20]
 80052f6:	f000 f8d3 	bl	80054a0 <prvInsertTimerInActiveList>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d021      	beq.n	8005344 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005300:	2300      	movs	r3, #0
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	2100      	movs	r1, #0
 800530a:	6978      	ldr	r0, [r7, #20]
 800530c:	f7ff ff86 	bl	800521c <xTimerGenericCommand>
 8005310:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d115      	bne.n	8005344 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	b672      	cpsid	i
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	b662      	cpsie	i
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005338:	f023 0301 	bic.w	r3, r3, #1
 800533c:	b2da      	uxtb	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	6a1b      	ldr	r3, [r3, #32]
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	4798      	blx	r3
}
 800534c:	bf00      	nop
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	20001034 	.word	0x20001034

08005358 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005360:	f107 0308 	add.w	r3, r7, #8
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f857 	bl	8005418 <prvGetNextExpireTime>
 800536a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4619      	mov	r1, r3
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f803 	bl	800537c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005376:	f000 f8d5 	bl	8005524 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800537a:	e7f1      	b.n	8005360 <prvTimerTask+0x8>

0800537c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005386:	f7ff fa1d 	bl	80047c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800538a:	f107 0308 	add.w	r3, r7, #8
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f866 	bl	8005460 <prvSampleTimeNow>
 8005394:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d130      	bne.n	80053fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10a      	bne.n	80053b8 <prvProcessTimerOrBlockTask+0x3c>
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d806      	bhi.n	80053b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053aa:	f7ff fa19 	bl	80047e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053ae:	68f9      	ldr	r1, [r7, #12]
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff83 	bl	80052bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053b6:	e024      	b.n	8005402 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053be:	4b13      	ldr	r3, [pc, #76]	; (800540c <prvProcessTimerOrBlockTask+0x90>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <prvProcessTimerOrBlockTask+0x50>
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <prvProcessTimerOrBlockTask+0x52>
 80053cc:	2300      	movs	r3, #0
 80053ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053d0:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <prvProcessTimerOrBlockTask+0x94>)
 80053d2:	6818      	ldr	r0, [r3, #0]
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	4619      	mov	r1, r3
 80053de:	f7fe ff53 	bl	8004288 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053e2:	f7ff f9fd 	bl	80047e0 <xTaskResumeAll>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10a      	bne.n	8005402 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80053ec:	4b09      	ldr	r3, [pc, #36]	; (8005414 <prvProcessTimerOrBlockTask+0x98>)
 80053ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	f3bf 8f6f 	isb	sy
}
 80053fc:	e001      	b.n	8005402 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053fe:	f7ff f9ef 	bl	80047e0 <xTaskResumeAll>
}
 8005402:	bf00      	nop
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20001038 	.word	0x20001038
 8005410:	2000103c 	.word	0x2000103c
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <prvGetNextExpireTime+0x44>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <prvGetNextExpireTime+0x16>
 800542a:	2201      	movs	r2, #1
 800542c:	e000      	b.n	8005430 <prvGetNextExpireTime+0x18>
 800542e:	2200      	movs	r2, #0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800543c:	4b07      	ldr	r3, [pc, #28]	; (800545c <prvGetNextExpireTime+0x44>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e001      	b.n	800544c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800544c:	68fb      	ldr	r3, [r7, #12]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20001034 	.word	0x20001034

08005460 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005468:	f7ff fa5a 	bl	8004920 <xTaskGetTickCount>
 800546c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800546e:	4b0b      	ldr	r3, [pc, #44]	; (800549c <prvSampleTimeNow+0x3c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	d205      	bcs.n	8005484 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005478:	f000 f93c 	bl	80056f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	e002      	b.n	800548a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800548a:	4a04      	ldr	r2, [pc, #16]	; (800549c <prvSampleTimeNow+0x3c>)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005490:	68fb      	ldr	r3, [r7, #12]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20001044 	.word	0x20001044

080054a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d812      	bhi.n	80054ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad2      	subs	r2, r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d302      	bcc.n	80054da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e01b      	b.n	8005512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054da:	4b10      	ldr	r3, [pc, #64]	; (800551c <prvInsertTimerInActiveList+0x7c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	3304      	adds	r3, #4
 80054e2:	4619      	mov	r1, r3
 80054e4:	4610      	mov	r0, r2
 80054e6:	f7fe f996 	bl	8003816 <vListInsert>
 80054ea:	e012      	b.n	8005512 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d206      	bcs.n	8005502 <prvInsertTimerInActiveList+0x62>
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d302      	bcc.n	8005502 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	e007      	b.n	8005512 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005502:	4b07      	ldr	r3, [pc, #28]	; (8005520 <prvInsertTimerInActiveList+0x80>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	3304      	adds	r3, #4
 800550a:	4619      	mov	r1, r3
 800550c:	4610      	mov	r0, r2
 800550e:	f7fe f982 	bl	8003816 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005512:	697b      	ldr	r3, [r7, #20]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3718      	adds	r7, #24
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20001038 	.word	0x20001038
 8005520:	20001034 	.word	0x20001034

08005524 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08e      	sub	sp, #56	; 0x38
 8005528:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800552a:	e0d0      	b.n	80056ce <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	da1a      	bge.n	8005568 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005532:	1d3b      	adds	r3, r7, #4
 8005534:	3304      	adds	r3, #4
 8005536:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10c      	bne.n	8005558 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	b672      	cpsid	i
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	b662      	cpsie	i
 8005552:	61fb      	str	r3, [r7, #28]
}
 8005554:	bf00      	nop
 8005556:	e7fe      	b.n	8005556 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800555e:	6850      	ldr	r0, [r2, #4]
 8005560:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005562:	6892      	ldr	r2, [r2, #8]
 8005564:	4611      	mov	r1, r2
 8005566:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	f2c0 80ae 	blt.w	80056cc <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005576:	695b      	ldr	r3, [r3, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe f981 	bl	8003888 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005586:	463b      	mov	r3, r7
 8005588:	4618      	mov	r0, r3
 800558a:	f7ff ff69 	bl	8005460 <prvSampleTimeNow>
 800558e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b09      	cmp	r3, #9
 8005594:	f200 809b 	bhi.w	80056ce <prvProcessReceivedCommands+0x1aa>
 8005598:	a201      	add	r2, pc, #4	; (adr r2, 80055a0 <prvProcessReceivedCommands+0x7c>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055c9 	.word	0x080055c9
 80055a4:	080055c9 	.word	0x080055c9
 80055a8:	080055c9 	.word	0x080055c9
 80055ac:	08005641 	.word	0x08005641
 80055b0:	08005655 	.word	0x08005655
 80055b4:	080056a3 	.word	0x080056a3
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055c9 	.word	0x080055c9
 80055c0:	08005641 	.word	0x08005641
 80055c4:	08005655 	.word	0x08005655
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ce:	f043 0301 	orr.w	r3, r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	18d1      	adds	r1, r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055e8:	f7ff ff5a 	bl	80054a0 <prvInsertTimerInActiveList>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d06d      	beq.n	80056ce <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d062      	beq.n	80056ce <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	441a      	add	r2, r3
 8005610:	2300      	movs	r3, #0
 8005612:	9300      	str	r3, [sp, #0]
 8005614:	2300      	movs	r3, #0
 8005616:	2100      	movs	r1, #0
 8005618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800561a:	f7ff fdff 	bl	800521c <xTimerGenericCommand>
 800561e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d153      	bne.n	80056ce <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	b672      	cpsid	i
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	b662      	cpsie	i
 800563a:	61bb      	str	r3, [r7, #24]
}
 800563c:	bf00      	nop
 800563e:	e7fe      	b.n	800563e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005646:	f023 0301 	bic.w	r3, r3, #1
 800564a:	b2da      	uxtb	r2, r3
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005652:	e03c      	b.n	80056ce <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800565a:	f043 0301 	orr.w	r3, r3, #1
 800565e:	b2da      	uxtb	r2, r3
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d10c      	bne.n	800568e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005678:	b672      	cpsid	i
 800567a:	f383 8811 	msr	BASEPRI, r3
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	b662      	cpsie	i
 8005688:	617b      	str	r3, [r7, #20]
}
 800568a:	bf00      	nop
 800568c:	e7fe      	b.n	800568c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	18d1      	adds	r1, r2, r3
 8005696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569c:	f7ff ff00 	bl	80054a0 <prvInsertTimerInActiveList>
					break;
 80056a0:	e015      	b.n	80056ce <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 80056b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056b2:	f000 fbc9 	bl	8005e48 <vPortFree>
 80056b6:	e00a      	b.n	80056ce <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056ca:	e000      	b.n	80056ce <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056ce:	4b08      	ldr	r3, [pc, #32]	; (80056f0 <prvProcessReceivedCommands+0x1cc>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1d39      	adds	r1, r7, #4
 80056d4:	2200      	movs	r2, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fe fbb6 	bl	8003e48 <xQueueReceive>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f47f af24 	bne.w	800552c <prvProcessReceivedCommands+0x8>
	}
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	3730      	adds	r7, #48	; 0x30
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	2000103c 	.word	0x2000103c

080056f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056fa:	e04a      	b.n	8005792 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056fc:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005706:	4b2c      	ldr	r3, [pc, #176]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3304      	adds	r3, #4
 8005714:	4618      	mov	r0, r3
 8005716:	f7fe f8b7 	bl	8003888 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	68f8      	ldr	r0, [r7, #12]
 8005720:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d030      	beq.n	8005792 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4413      	add	r3, r2
 8005738:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800573a:	68ba      	ldr	r2, [r7, #8]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	429a      	cmp	r2, r3
 8005740:	d90e      	bls.n	8005760 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	68ba      	ldr	r2, [r7, #8]
 8005746:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800574e:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fe f85c 	bl	8003816 <vListInsert>
 800575e:	e018      	b.n	8005792 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005760:	2300      	movs	r3, #0
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	2100      	movs	r1, #0
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff fd56 	bl	800521c <xTimerGenericCommand>
 8005770:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10c      	bne.n	8005792 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	b672      	cpsid	i
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	b662      	cpsie	i
 800578c:	603b      	str	r3, [r7, #0]
}
 800578e:	bf00      	nop
 8005790:	e7fe      	b.n	8005790 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005792:	4b09      	ldr	r3, [pc, #36]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1af      	bne.n	80056fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057a2:	4b06      	ldr	r3, [pc, #24]	; (80057bc <prvSwitchTimerLists+0xc8>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a04      	ldr	r2, [pc, #16]	; (80057b8 <prvSwitchTimerLists+0xc4>)
 80057a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057aa:	4a04      	ldr	r2, [pc, #16]	; (80057bc <prvSwitchTimerLists+0xc8>)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	6013      	str	r3, [r2, #0]
}
 80057b0:	bf00      	nop
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20001034 	.word	0x20001034
 80057bc:	20001038 	.word	0x20001038

080057c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057c6:	f000 f949 	bl	8005a5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057ca:	4b15      	ldr	r3, [pc, #84]	; (8005820 <prvCheckForValidListAndQueue+0x60>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d120      	bne.n	8005814 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057d2:	4814      	ldr	r0, [pc, #80]	; (8005824 <prvCheckForValidListAndQueue+0x64>)
 80057d4:	f7fd ffce 	bl	8003774 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057d8:	4813      	ldr	r0, [pc, #76]	; (8005828 <prvCheckForValidListAndQueue+0x68>)
 80057da:	f7fd ffcb 	bl	8003774 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057de:	4b13      	ldr	r3, [pc, #76]	; (800582c <prvCheckForValidListAndQueue+0x6c>)
 80057e0:	4a10      	ldr	r2, [pc, #64]	; (8005824 <prvCheckForValidListAndQueue+0x64>)
 80057e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057e4:	4b12      	ldr	r3, [pc, #72]	; (8005830 <prvCheckForValidListAndQueue+0x70>)
 80057e6:	4a10      	ldr	r2, [pc, #64]	; (8005828 <prvCheckForValidListAndQueue+0x68>)
 80057e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057ea:	2300      	movs	r3, #0
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	4b11      	ldr	r3, [pc, #68]	; (8005834 <prvCheckForValidListAndQueue+0x74>)
 80057f0:	4a11      	ldr	r2, [pc, #68]	; (8005838 <prvCheckForValidListAndQueue+0x78>)
 80057f2:	2110      	movs	r1, #16
 80057f4:	200a      	movs	r0, #10
 80057f6:	f7fe f8db 	bl	80039b0 <xQueueGenericCreateStatic>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4a08      	ldr	r2, [pc, #32]	; (8005820 <prvCheckForValidListAndQueue+0x60>)
 80057fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005800:	4b07      	ldr	r3, [pc, #28]	; (8005820 <prvCheckForValidListAndQueue+0x60>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d005      	beq.n	8005814 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005808:	4b05      	ldr	r3, [pc, #20]	; (8005820 <prvCheckForValidListAndQueue+0x60>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	490b      	ldr	r1, [pc, #44]	; (800583c <prvCheckForValidListAndQueue+0x7c>)
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fd10 	bl	8004234 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005814:	f000 f956 	bl	8005ac4 <vPortExitCritical>
}
 8005818:	bf00      	nop
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	2000103c 	.word	0x2000103c
 8005824:	2000100c 	.word	0x2000100c
 8005828:	20001020 	.word	0x20001020
 800582c:	20001034 	.word	0x20001034
 8005830:	20001038 	.word	0x20001038
 8005834:	200010e8 	.word	0x200010e8
 8005838:	20001048 	.word	0x20001048
 800583c:	080062ac 	.word	0x080062ac

08005840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3b04      	subs	r3, #4
 8005850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	3b04      	subs	r3, #4
 800585e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	f023 0201 	bic.w	r2, r3, #1
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	3b04      	subs	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005870:	4a0c      	ldr	r2, [pc, #48]	; (80058a4 <pxPortInitialiseStack+0x64>)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3b14      	subs	r3, #20
 800587a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3b04      	subs	r3, #4
 8005886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f06f 0202 	mvn.w	r2, #2
 800588e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3b20      	subs	r3, #32
 8005894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	080058a9 	.word	0x080058a9

080058a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058b2:	4b14      	ldr	r3, [pc, #80]	; (8005904 <prvTaskExitError+0x5c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ba:	d00c      	beq.n	80058d6 <prvTaskExitError+0x2e>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	b672      	cpsid	i
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	b662      	cpsie	i
 80058d0:	60fb      	str	r3, [r7, #12]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <prvTaskExitError+0x2c>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	b672      	cpsid	i
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	b662      	cpsie	i
 80058ea:	60bb      	str	r3, [r7, #8]
}
 80058ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058ee:	bf00      	nop
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d0fc      	beq.n	80058f0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	3714      	adds	r7, #20
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	2000000c 	.word	0x2000000c
	...

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	20000b0c 	.word	0x20000b0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <prvPortStartFirstTask+0x24>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8814 	msr	CONTROL, r0
 800594a:	b662      	cpsie	i
 800594c:	b661      	cpsie	f
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	df00      	svc	0
 8005958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800595a:	bf00      	nop
 800595c:	e000ed08 	.word	0xe000ed08

08005960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005966:	4b37      	ldr	r3, [pc, #220]	; (8005a44 <xPortStartScheduler+0xe4>)
 8005968:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	22ff      	movs	r2, #255	; 0xff
 8005976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005980:	78fb      	ldrb	r3, [r7, #3]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005988:	b2da      	uxtb	r2, r3
 800598a:	4b2f      	ldr	r3, [pc, #188]	; (8005a48 <xPortStartScheduler+0xe8>)
 800598c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800598e:	4b2f      	ldr	r3, [pc, #188]	; (8005a4c <xPortStartScheduler+0xec>)
 8005990:	2207      	movs	r2, #7
 8005992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005994:	e009      	b.n	80059aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005996:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <xPortStartScheduler+0xec>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <xPortStartScheduler+0xec>)
 800599e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b2:	2b80      	cmp	r3, #128	; 0x80
 80059b4:	d0ef      	beq.n	8005996 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059b6:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <xPortStartScheduler+0xec>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f1c3 0307 	rsb	r3, r3, #7
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d00c      	beq.n	80059dc <xPortStartScheduler+0x7c>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	b672      	cpsid	i
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	b662      	cpsie	i
 80059d6:	60bb      	str	r3, [r7, #8]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059dc:	4b1b      	ldr	r3, [pc, #108]	; (8005a4c <xPortStartScheduler+0xec>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <xPortStartScheduler+0xec>)
 80059e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059e6:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <xPortStartScheduler+0xec>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <xPortStartScheduler+0xec>)
 80059f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059fa:	4b15      	ldr	r3, [pc, #84]	; (8005a50 <xPortStartScheduler+0xf0>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a14      	ldr	r2, [pc, #80]	; (8005a50 <xPortStartScheduler+0xf0>)
 8005a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a06:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <xPortStartScheduler+0xf0>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a11      	ldr	r2, [pc, #68]	; (8005a50 <xPortStartScheduler+0xf0>)
 8005a0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a12:	f000 f8dd 	bl	8005bd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a16:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <xPortStartScheduler+0xf4>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a1c:	f000 f8fc 	bl	8005c18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a20:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <xPortStartScheduler+0xf8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a0c      	ldr	r2, [pc, #48]	; (8005a58 <xPortStartScheduler+0xf8>)
 8005a26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a2c:	f7ff ff84 	bl	8005938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a30:	f7ff f842 	bl	8004ab8 <vTaskSwitchContext>
	prvTaskExitError();
 8005a34:	f7ff ff38 	bl	80058a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	e000e400 	.word	0xe000e400
 8005a48:	20001138 	.word	0x20001138
 8005a4c:	2000113c 	.word	0x2000113c
 8005a50:	e000ed20 	.word	0xe000ed20
 8005a54:	2000000c 	.word	0x2000000c
 8005a58:	e000ef34 	.word	0xe000ef34

08005a5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
	__asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	b672      	cpsid	i
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	b662      	cpsie	i
 8005a76:	607b      	str	r3, [r7, #4]
}
 8005a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <vPortEnterCritical+0x60>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	4a0e      	ldr	r2, [pc, #56]	; (8005abc <vPortEnterCritical+0x60>)
 8005a82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a84:	4b0d      	ldr	r3, [pc, #52]	; (8005abc <vPortEnterCritical+0x60>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d111      	bne.n	8005ab0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a8c:	4b0c      	ldr	r3, [pc, #48]	; (8005ac0 <vPortEnterCritical+0x64>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <vPortEnterCritical+0x54>
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	b672      	cpsid	i
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	b662      	cpsie	i
 8005aaa:	603b      	str	r3, [r7, #0]
}
 8005aac:	bf00      	nop
 8005aae:	e7fe      	b.n	8005aae <vPortEnterCritical+0x52>
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000000c 	.word	0x2000000c
 8005ac0:	e000ed04 	.word	0xe000ed04

08005ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b083      	sub	sp, #12
 8005ac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005aca:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <vPortExitCritical+0x54>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10c      	bne.n	8005aec <vPortExitCritical+0x28>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	b672      	cpsid	i
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	b662      	cpsie	i
 8005ae6:	607b      	str	r3, [r7, #4]
}
 8005ae8:	bf00      	nop
 8005aea:	e7fe      	b.n	8005aea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005aec:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <vPortExitCritical+0x54>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	4a09      	ldr	r2, [pc, #36]	; (8005b18 <vPortExitCritical+0x54>)
 8005af4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005af6:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <vPortExitCritical+0x54>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <vPortExitCritical+0x46>
 8005afe:	2300      	movs	r3, #0
 8005b00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	f383 8811 	msr	BASEPRI, r3
}
 8005b08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	2000000c 	.word	0x2000000c
 8005b1c:	00000000 	.word	0x00000000

08005b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b20:	f3ef 8009 	mrs	r0, PSP
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <pxCurrentTCBConst>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f01e 0f10 	tst.w	lr, #16
 8005b30:	bf08      	it	eq
 8005b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	6010      	str	r0, [r2, #0]
 8005b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b44:	b672      	cpsid	i
 8005b46:	f380 8811 	msr	BASEPRI, r0
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	f3bf 8f6f 	isb	sy
 8005b52:	b662      	cpsie	i
 8005b54:	f7fe ffb0 	bl	8004ab8 <vTaskSwitchContext>
 8005b58:	f04f 0000 	mov.w	r0, #0
 8005b5c:	f380 8811 	msr	BASEPRI, r0
 8005b60:	bc09      	pop	{r0, r3}
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	6808      	ldr	r0, [r1, #0]
 8005b66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b6a:	f01e 0f10 	tst.w	lr, #16
 8005b6e:	bf08      	it	eq
 8005b70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b74:	f380 8809 	msr	PSP, r0
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <pxCurrentTCBConst>:
 8005b80:	20000b0c 	.word	0x20000b0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	b672      	cpsid	i
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	b662      	cpsie	i
 8005ba2:	607b      	str	r3, [r7, #4]
}
 8005ba4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ba6:	f7fe fecb 	bl	8004940 <xTaskIncrementTick>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d003      	beq.n	8005bb8 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <xPortSysTickHandler+0x44>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	2300      	movs	r3, #0
 8005bba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f383 8811 	msr	BASEPRI, r3
}
 8005bc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	e000ed04 	.word	0xe000ed04

08005bd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bd4:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <vPortSetupTimerInterrupt+0x34>)
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <vPortSetupTimerInterrupt+0x38>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <vPortSetupTimerInterrupt+0x3c>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <vPortSetupTimerInterrupt+0x40>)
 8005be6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bea:	099b      	lsrs	r3, r3, #6
 8005bec:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <vPortSetupTimerInterrupt+0x44>)
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bf2:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <vPortSetupTimerInterrupt+0x34>)
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	601a      	str	r2, [r3, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	e000e010 	.word	0xe000e010
 8005c08:	e000e018 	.word	0xe000e018
 8005c0c:	20000000 	.word	0x20000000
 8005c10:	10624dd3 	.word	0x10624dd3
 8005c14:	e000e014 	.word	0xe000e014

08005c18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c28 <vPortEnableVFP+0x10>
 8005c1c:	6801      	ldr	r1, [r0, #0]
 8005c1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c22:	6001      	str	r1, [r0, #0]
 8005c24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c26:	bf00      	nop
 8005c28:	e000ed88 	.word	0xe000ed88

08005c2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c32:	f3ef 8305 	mrs	r3, IPSR
 8005c36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2b0f      	cmp	r3, #15
 8005c3c:	d916      	bls.n	8005c6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c3e:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <vPortValidateInterruptPriority+0x78>)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c48:	4b17      	ldr	r3, [pc, #92]	; (8005ca8 <vPortValidateInterruptPriority+0x7c>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	7afa      	ldrb	r2, [r7, #11]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d20c      	bcs.n	8005c6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	607b      	str	r3, [r7, #4]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c6c:	4b0f      	ldr	r3, [pc, #60]	; (8005cac <vPortValidateInterruptPriority+0x80>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005c74:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <vPortValidateInterruptPriority+0x84>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d90c      	bls.n	8005c96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8005c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c80:	b672      	cpsid	i
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	b662      	cpsie	i
 8005c90:	603b      	str	r3, [r7, #0]
}
 8005c92:	bf00      	nop
 8005c94:	e7fe      	b.n	8005c94 <vPortValidateInterruptPriority+0x68>
	}
 8005c96:	bf00      	nop
 8005c98:	3714      	adds	r7, #20
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca0:	4770      	bx	lr
 8005ca2:	bf00      	nop
 8005ca4:	e000e3f0 	.word	0xe000e3f0
 8005ca8:	20001138 	.word	0x20001138
 8005cac:	e000ed0c 	.word	0xe000ed0c
 8005cb0:	2000113c 	.word	0x2000113c

08005cb4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08a      	sub	sp, #40	; 0x28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cc0:	f7fe fd80 	bl	80047c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cc4:	4b5b      	ldr	r3, [pc, #364]	; (8005e34 <pvPortMalloc+0x180>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ccc:	f000 f91a 	bl	8005f04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cd0:	4b59      	ldr	r3, [pc, #356]	; (8005e38 <pvPortMalloc+0x184>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f040 8092 	bne.w	8005e02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01f      	beq.n	8005d24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005ce4:	2208      	movs	r2, #8
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d016      	beq.n	8005d24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f023 0307 	bic.w	r3, r3, #7
 8005cfc:	3308      	adds	r3, #8
 8005cfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <pvPortMalloc+0x70>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0e:	b672      	cpsid	i
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	b662      	cpsie	i
 8005d1e:	617b      	str	r3, [r7, #20]
}
 8005d20:	bf00      	nop
 8005d22:	e7fe      	b.n	8005d22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d06b      	beq.n	8005e02 <pvPortMalloc+0x14e>
 8005d2a:	4b44      	ldr	r3, [pc, #272]	; (8005e3c <pvPortMalloc+0x188>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d866      	bhi.n	8005e02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d34:	4b42      	ldr	r3, [pc, #264]	; (8005e40 <pvPortMalloc+0x18c>)
 8005d36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d38:	4b41      	ldr	r3, [pc, #260]	; (8005e40 <pvPortMalloc+0x18c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d3e:	e004      	b.n	8005d4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d903      	bls.n	8005d5c <pvPortMalloc+0xa8>
 8005d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f1      	bne.n	8005d40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d5c:	4b35      	ldr	r3, [pc, #212]	; (8005e34 <pvPortMalloc+0x180>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d04d      	beq.n	8005e02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2208      	movs	r2, #8
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	1ad2      	subs	r2, r2, r3
 8005d80:	2308      	movs	r3, #8
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d921      	bls.n	8005dcc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00c      	beq.n	8005db4 <pvPortMalloc+0x100>
	__asm volatile
 8005d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9e:	b672      	cpsid	i
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	b662      	cpsie	i
 8005dae:	613b      	str	r3, [r7, #16]
}
 8005db0:	bf00      	nop
 8005db2:	e7fe      	b.n	8005db2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	685a      	ldr	r2, [r3, #4]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005dc6:	69b8      	ldr	r0, [r7, #24]
 8005dc8:	f000 f8fe 	bl	8005fc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dcc:	4b1b      	ldr	r3, [pc, #108]	; (8005e3c <pvPortMalloc+0x188>)
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	4a19      	ldr	r2, [pc, #100]	; (8005e3c <pvPortMalloc+0x188>)
 8005dd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dda:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <pvPortMalloc+0x188>)
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <pvPortMalloc+0x190>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d203      	bcs.n	8005dee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005de6:	4b15      	ldr	r3, [pc, #84]	; (8005e3c <pvPortMalloc+0x188>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <pvPortMalloc+0x190>)
 8005dec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <pvPortMalloc+0x184>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	431a      	orrs	r2, r3
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e02:	f7fe fced 	bl	80047e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00c      	beq.n	8005e2a <pvPortMalloc+0x176>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e14:	b672      	cpsid	i
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	b662      	cpsie	i
 8005e24:	60fb      	str	r3, [r7, #12]
}
 8005e26:	bf00      	nop
 8005e28:	e7fe      	b.n	8005e28 <pvPortMalloc+0x174>
	return pvReturn;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3728      	adds	r7, #40	; 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20004d48 	.word	0x20004d48
 8005e38:	20004d54 	.word	0x20004d54
 8005e3c:	20004d4c 	.word	0x20004d4c
 8005e40:	20004d40 	.word	0x20004d40
 8005e44:	20004d50 	.word	0x20004d50

08005e48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d04c      	beq.n	8005ef4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e5a:	2308      	movs	r3, #8
 8005e5c:	425b      	negs	r3, r3
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	4b23      	ldr	r3, [pc, #140]	; (8005efc <vPortFree+0xb4>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4013      	ands	r3, r2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10c      	bne.n	8005e90 <vPortFree+0x48>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	60fb      	str	r3, [r7, #12]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00c      	beq.n	8005eb2 <vPortFree+0x6a>
	__asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	b672      	cpsid	i
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	b662      	cpsie	i
 8005eac:	60bb      	str	r3, [r7, #8]
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	4b11      	ldr	r3, [pc, #68]	; (8005efc <vPortFree+0xb4>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d019      	beq.n	8005ef4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d115      	bne.n	8005ef4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <vPortFree+0xb4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	401a      	ands	r2, r3
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ed8:	f7fe fc74 	bl	80047c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <vPortFree+0xb8>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <vPortFree+0xb8>)
 8005ee8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005eea:	6938      	ldr	r0, [r7, #16]
 8005eec:	f000 f86c 	bl	8005fc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ef0:	f7fe fc76 	bl	80047e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ef4:	bf00      	nop
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}
 8005efc:	20004d54 	.word	0x20004d54
 8005f00:	20004d4c 	.word	0x20004d4c

08005f04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f10:	4b27      	ldr	r3, [pc, #156]	; (8005fb0 <prvHeapInit+0xac>)
 8005f12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00c      	beq.n	8005f38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	3307      	adds	r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0307 	bic.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	4a1f      	ldr	r2, [pc, #124]	; (8005fb0 <prvHeapInit+0xac>)
 8005f34:	4413      	add	r3, r2
 8005f36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f3c:	4a1d      	ldr	r2, [pc, #116]	; (8005fb4 <prvHeapInit+0xb0>)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f42:	4b1c      	ldr	r3, [pc, #112]	; (8005fb4 <prvHeapInit+0xb0>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f50:	2208      	movs	r2, #8
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0307 	bic.w	r3, r3, #7
 8005f5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f66:	4b14      	ldr	r3, [pc, #80]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f6e:	4b12      	ldr	r3, [pc, #72]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f84:	4b0c      	ldr	r3, [pc, #48]	; (8005fb8 <prvHeapInit+0xb4>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a0a      	ldr	r2, [pc, #40]	; (8005fbc <prvHeapInit+0xb8>)
 8005f92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a09      	ldr	r2, [pc, #36]	; (8005fc0 <prvHeapInit+0xbc>)
 8005f9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f9c:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <prvHeapInit+0xc0>)
 8005f9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fa2:	601a      	str	r2, [r3, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	3714      	adds	r7, #20
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	20001140 	.word	0x20001140
 8005fb4:	20004d40 	.word	0x20004d40
 8005fb8:	20004d48 	.word	0x20004d48
 8005fbc:	20004d50 	.word	0x20004d50
 8005fc0:	20004d4c 	.word	0x20004d4c
 8005fc4:	20004d54 	.word	0x20004d54

08005fc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fd0:	4b28      	ldr	r3, [pc, #160]	; (8006074 <prvInsertBlockIntoFreeList+0xac>)
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <prvInsertBlockIntoFreeList+0x14>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d8f7      	bhi.n	8005fd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d108      	bne.n	800600a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	441a      	add	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	441a      	add	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d118      	bne.n	8006050 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <prvInsertBlockIntoFreeList+0xb0>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d00d      	beq.n	8006046 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	441a      	add	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]
 8006044:	e008      	b.n	8006058 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <prvInsertBlockIntoFreeList+0xb0>)
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e003      	b.n	8006058 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	429a      	cmp	r2, r3
 800605e:	d002      	beq.n	8006066 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006066:	bf00      	nop
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	20004d40 	.word	0x20004d40
 8006078:	20004d48 	.word	0x20004d48

0800607c <__libc_init_array>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4d0d      	ldr	r5, [pc, #52]	; (80060b4 <__libc_init_array+0x38>)
 8006080:	4c0d      	ldr	r4, [pc, #52]	; (80060b8 <__libc_init_array+0x3c>)
 8006082:	1b64      	subs	r4, r4, r5
 8006084:	10a4      	asrs	r4, r4, #2
 8006086:	2600      	movs	r6, #0
 8006088:	42a6      	cmp	r6, r4
 800608a:	d109      	bne.n	80060a0 <__libc_init_array+0x24>
 800608c:	4d0b      	ldr	r5, [pc, #44]	; (80060bc <__libc_init_array+0x40>)
 800608e:	4c0c      	ldr	r4, [pc, #48]	; (80060c0 <__libc_init_array+0x44>)
 8006090:	f000 f8f2 	bl	8006278 <_init>
 8006094:	1b64      	subs	r4, r4, r5
 8006096:	10a4      	asrs	r4, r4, #2
 8006098:	2600      	movs	r6, #0
 800609a:	42a6      	cmp	r6, r4
 800609c:	d105      	bne.n	80060aa <__libc_init_array+0x2e>
 800609e:	bd70      	pop	{r4, r5, r6, pc}
 80060a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80060a4:	4798      	blx	r3
 80060a6:	3601      	adds	r6, #1
 80060a8:	e7ee      	b.n	8006088 <__libc_init_array+0xc>
 80060aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ae:	4798      	blx	r3
 80060b0:	3601      	adds	r6, #1
 80060b2:	e7f2      	b.n	800609a <__libc_init_array+0x1e>
 80060b4:	08006358 	.word	0x08006358
 80060b8:	08006358 	.word	0x08006358
 80060bc:	08006358 	.word	0x08006358
 80060c0:	0800635c 	.word	0x0800635c

080060c4 <__retarget_lock_acquire_recursive>:
 80060c4:	4770      	bx	lr

080060c6 <__retarget_lock_release_recursive>:
 80060c6:	4770      	bx	lr

080060c8 <memcpy>:
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d0:	d100      	bne.n	80060d4 <memcpy+0xc>
 80060d2:	4770      	bx	lr
 80060d4:	b510      	push	{r4, lr}
 80060d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060de:	4291      	cmp	r1, r2
 80060e0:	d1f9      	bne.n	80060d6 <memcpy+0xe>
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <memset>:
 80060e4:	4402      	add	r2, r0
 80060e6:	4603      	mov	r3, r0
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d100      	bne.n	80060ee <memset+0xa>
 80060ec:	4770      	bx	lr
 80060ee:	f803 1b01 	strb.w	r1, [r3], #1
 80060f2:	e7f9      	b.n	80060e8 <memset+0x4>

080060f4 <cleanup_glue>:
 80060f4:	b538      	push	{r3, r4, r5, lr}
 80060f6:	460c      	mov	r4, r1
 80060f8:	6809      	ldr	r1, [r1, #0]
 80060fa:	4605      	mov	r5, r0
 80060fc:	b109      	cbz	r1, 8006102 <cleanup_glue+0xe>
 80060fe:	f7ff fff9 	bl	80060f4 <cleanup_glue>
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800610a:	f000 b869 	b.w	80061e0 <_free_r>
	...

08006110 <_reclaim_reent>:
 8006110:	4b2c      	ldr	r3, [pc, #176]	; (80061c4 <_reclaim_reent+0xb4>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4283      	cmp	r3, r0
 8006116:	b570      	push	{r4, r5, r6, lr}
 8006118:	4604      	mov	r4, r0
 800611a:	d051      	beq.n	80061c0 <_reclaim_reent+0xb0>
 800611c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800611e:	b143      	cbz	r3, 8006132 <_reclaim_reent+0x22>
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d14a      	bne.n	80061bc <_reclaim_reent+0xac>
 8006126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006128:	6819      	ldr	r1, [r3, #0]
 800612a:	b111      	cbz	r1, 8006132 <_reclaim_reent+0x22>
 800612c:	4620      	mov	r0, r4
 800612e:	f000 f857 	bl	80061e0 <_free_r>
 8006132:	6961      	ldr	r1, [r4, #20]
 8006134:	b111      	cbz	r1, 800613c <_reclaim_reent+0x2c>
 8006136:	4620      	mov	r0, r4
 8006138:	f000 f852 	bl	80061e0 <_free_r>
 800613c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800613e:	b111      	cbz	r1, 8006146 <_reclaim_reent+0x36>
 8006140:	4620      	mov	r0, r4
 8006142:	f000 f84d 	bl	80061e0 <_free_r>
 8006146:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006148:	b111      	cbz	r1, 8006150 <_reclaim_reent+0x40>
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f848 	bl	80061e0 <_free_r>
 8006150:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006152:	b111      	cbz	r1, 800615a <_reclaim_reent+0x4a>
 8006154:	4620      	mov	r0, r4
 8006156:	f000 f843 	bl	80061e0 <_free_r>
 800615a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800615c:	b111      	cbz	r1, 8006164 <_reclaim_reent+0x54>
 800615e:	4620      	mov	r0, r4
 8006160:	f000 f83e 	bl	80061e0 <_free_r>
 8006164:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006166:	b111      	cbz	r1, 800616e <_reclaim_reent+0x5e>
 8006168:	4620      	mov	r0, r4
 800616a:	f000 f839 	bl	80061e0 <_free_r>
 800616e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006170:	b111      	cbz	r1, 8006178 <_reclaim_reent+0x68>
 8006172:	4620      	mov	r0, r4
 8006174:	f000 f834 	bl	80061e0 <_free_r>
 8006178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800617a:	b111      	cbz	r1, 8006182 <_reclaim_reent+0x72>
 800617c:	4620      	mov	r0, r4
 800617e:	f000 f82f 	bl	80061e0 <_free_r>
 8006182:	69a3      	ldr	r3, [r4, #24]
 8006184:	b1e3      	cbz	r3, 80061c0 <_reclaim_reent+0xb0>
 8006186:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006188:	4620      	mov	r0, r4
 800618a:	4798      	blx	r3
 800618c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800618e:	b1b9      	cbz	r1, 80061c0 <_reclaim_reent+0xb0>
 8006190:	4620      	mov	r0, r4
 8006192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006196:	f7ff bfad 	b.w	80060f4 <cleanup_glue>
 800619a:	5949      	ldr	r1, [r1, r5]
 800619c:	b941      	cbnz	r1, 80061b0 <_reclaim_reent+0xa0>
 800619e:	3504      	adds	r5, #4
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	2d80      	cmp	r5, #128	; 0x80
 80061a4:	68d9      	ldr	r1, [r3, #12]
 80061a6:	d1f8      	bne.n	800619a <_reclaim_reent+0x8a>
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 f819 	bl	80061e0 <_free_r>
 80061ae:	e7ba      	b.n	8006126 <_reclaim_reent+0x16>
 80061b0:	680e      	ldr	r6, [r1, #0]
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f814 	bl	80061e0 <_free_r>
 80061b8:	4631      	mov	r1, r6
 80061ba:	e7ef      	b.n	800619c <_reclaim_reent+0x8c>
 80061bc:	2500      	movs	r5, #0
 80061be:	e7ef      	b.n	80061a0 <_reclaim_reent+0x90>
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	bf00      	nop
 80061c4:	20000010 	.word	0x20000010

080061c8 <__malloc_lock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__malloc_lock+0x8>)
 80061ca:	f7ff bf7b 	b.w	80060c4 <__retarget_lock_acquire_recursive>
 80061ce:	bf00      	nop
 80061d0:	20004d58 	.word	0x20004d58

080061d4 <__malloc_unlock>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__malloc_unlock+0x8>)
 80061d6:	f7ff bf76 	b.w	80060c6 <__retarget_lock_release_recursive>
 80061da:	bf00      	nop
 80061dc:	20004d58 	.word	0x20004d58

080061e0 <_free_r>:
 80061e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061e2:	2900      	cmp	r1, #0
 80061e4:	d044      	beq.n	8006270 <_free_r+0x90>
 80061e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ea:	9001      	str	r0, [sp, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f1a1 0404 	sub.w	r4, r1, #4
 80061f2:	bfb8      	it	lt
 80061f4:	18e4      	addlt	r4, r4, r3
 80061f6:	f7ff ffe7 	bl	80061c8 <__malloc_lock>
 80061fa:	4a1e      	ldr	r2, [pc, #120]	; (8006274 <_free_r+0x94>)
 80061fc:	9801      	ldr	r0, [sp, #4]
 80061fe:	6813      	ldr	r3, [r2, #0]
 8006200:	b933      	cbnz	r3, 8006210 <_free_r+0x30>
 8006202:	6063      	str	r3, [r4, #4]
 8006204:	6014      	str	r4, [r2, #0]
 8006206:	b003      	add	sp, #12
 8006208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800620c:	f7ff bfe2 	b.w	80061d4 <__malloc_unlock>
 8006210:	42a3      	cmp	r3, r4
 8006212:	d908      	bls.n	8006226 <_free_r+0x46>
 8006214:	6825      	ldr	r5, [r4, #0]
 8006216:	1961      	adds	r1, r4, r5
 8006218:	428b      	cmp	r3, r1
 800621a:	bf01      	itttt	eq
 800621c:	6819      	ldreq	r1, [r3, #0]
 800621e:	685b      	ldreq	r3, [r3, #4]
 8006220:	1949      	addeq	r1, r1, r5
 8006222:	6021      	streq	r1, [r4, #0]
 8006224:	e7ed      	b.n	8006202 <_free_r+0x22>
 8006226:	461a      	mov	r2, r3
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	b10b      	cbz	r3, 8006230 <_free_r+0x50>
 800622c:	42a3      	cmp	r3, r4
 800622e:	d9fa      	bls.n	8006226 <_free_r+0x46>
 8006230:	6811      	ldr	r1, [r2, #0]
 8006232:	1855      	adds	r5, r2, r1
 8006234:	42a5      	cmp	r5, r4
 8006236:	d10b      	bne.n	8006250 <_free_r+0x70>
 8006238:	6824      	ldr	r4, [r4, #0]
 800623a:	4421      	add	r1, r4
 800623c:	1854      	adds	r4, r2, r1
 800623e:	42a3      	cmp	r3, r4
 8006240:	6011      	str	r1, [r2, #0]
 8006242:	d1e0      	bne.n	8006206 <_free_r+0x26>
 8006244:	681c      	ldr	r4, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	6053      	str	r3, [r2, #4]
 800624a:	4421      	add	r1, r4
 800624c:	6011      	str	r1, [r2, #0]
 800624e:	e7da      	b.n	8006206 <_free_r+0x26>
 8006250:	d902      	bls.n	8006258 <_free_r+0x78>
 8006252:	230c      	movs	r3, #12
 8006254:	6003      	str	r3, [r0, #0]
 8006256:	e7d6      	b.n	8006206 <_free_r+0x26>
 8006258:	6825      	ldr	r5, [r4, #0]
 800625a:	1961      	adds	r1, r4, r5
 800625c:	428b      	cmp	r3, r1
 800625e:	bf04      	itt	eq
 8006260:	6819      	ldreq	r1, [r3, #0]
 8006262:	685b      	ldreq	r3, [r3, #4]
 8006264:	6063      	str	r3, [r4, #4]
 8006266:	bf04      	itt	eq
 8006268:	1949      	addeq	r1, r1, r5
 800626a:	6021      	streq	r1, [r4, #0]
 800626c:	6054      	str	r4, [r2, #4]
 800626e:	e7ca      	b.n	8006206 <_free_r+0x26>
 8006270:	b003      	add	sp, #12
 8006272:	bd30      	pop	{r4, r5, pc}
 8006274:	20004d5c 	.word	0x20004d5c

08006278 <_init>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr

08006284 <_fini>:
 8006284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006286:	bf00      	nop
 8006288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800628a:	bc08      	pop	{r3}
 800628c:	469e      	mov	lr, r3
 800628e:	4770      	bx	lr
