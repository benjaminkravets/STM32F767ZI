
can_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fe4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080061e4  080061e4  000071e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800624c  0800624c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800624c  0800624c  0000724c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006254  08006254  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006254  08006254  00007254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006258  08006258  00007258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800625c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b94  20000060  080062bc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bf4  080062bc  00008bf4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129b6  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ee4  00000000  00000000  0001aa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001d928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000adc  00000000  00000000  0001e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fe7  00000000  00000000  0001f254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010736  00000000  00000000  0002223b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8d83  00000000  00000000  00032971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b6f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d54  00000000  00000000  0012b738  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012f48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080061cc 	.word	0x080061cc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080061cc 	.word	0x080061cc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_CAN_RxFifo0MsgPendingCallback>:
static StreamBufferHandle_t xStreamBuffer0 = NULL;
static StreamBufferHandle_t xStreamBuffer1 = NULL;

//9.2.7 Rx FIFO 0 message pending callback.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800053a:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800053c:	2100      	movs	r1, #0
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 fe10 	bl	8001164 <HAL_CAN_GetRxMessage>
	size_t sent = xStreamBufferSendFromISR(xStreamBuffer0, RxData, 8, NULL);
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	2208      	movs	r2, #8
 800054c:	4905      	ldr	r1, [pc, #20]	@ (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800054e:	f003 f943 	bl	80037d8 <xStreamBufferSendFromISR>
 8000552:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000554:	2101      	movs	r1, #1
 8000556:	4806      	ldr	r0, [pc, #24]	@ (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000558:	f001 fc53 	bl	8001e02 <HAL_GPIO_TogglePin>
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000c4 	.word	0x200000c4
 8000568:	200000a8 	.word	0x200000a8
 800056c:	200000cc 	.word	0x200000cc
 8000570:	40020400 	.word	0x40020400

08000574 <CanReceiverTask>:

static void CanReceiverTask() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	@ 0x48
 8000578:	af00      	add	r7, sp, #0
	uint8_t RxDataToProcess[64];
	uint8_t received = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	for (;;) {
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 8000580:	4b11      	ldr	r3, [pc, #68]	@ (80005c8 <CanReceiverTask+0x54>)
 8000582:	6818      	ldr	r0, [r3, #0]
 8000584:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000588:	1d3a      	adds	r2, r7, #4
 800058a:	18d1      	adds	r1, r2, r3
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2208      	movs	r2, #8
 8000592:	f003 f9d7 	bl	8003944 <xStreamBufferReceive>
 8000596:	4603      	mov	r3, r0
 8000598:	b2da      	uxtb	r2, r3
 800059a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800059e:	4413      	add	r3, r2
 80005a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (received == 64) {
 80005a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80005a8:	2b40      	cmp	r3, #64	@ 0x40
 80005aa:	d1e9      	bne.n	8000580 <CanReceiverTask+0xc>
			memset(RxDataToProcess, 0, 64);
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2240      	movs	r2, #64	@ 0x40
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f005 fd22 	bl	8005ffc <memset>
			received = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <CanReceiverTask+0x58>)
 80005c2:	f001 fc1e 	bl	8001e02 <HAL_GPIO_TogglePin>
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 80005c6:	e7db      	b.n	8000580 <CanReceiverTask+0xc>
 80005c8:	200000cc 	.word	0x200000cc
 80005cc:	40020400 	.word	0x40020400

080005d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d6:	f000 fb3c 	bl	8000c52 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005da:	f000 f85d 	bl	8000698 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005de:	f000 f91f 	bl	8000820 <MX_GPIO_Init>
	MX_CAN1_Init();
 80005e2:	f000 f8c9 	bl	8000778 <MX_CAN1_Init>
	/* USER CODE BEGIN 2 */
	HAL_CAN_Start(&hcan1);
 80005e6:	4825      	ldr	r0, [pc, #148]	@ (800067c <main+0xac>)
 80005e8:	f000 fd78 	bl	80010dc <HAL_CAN_Start>
	//from HAL SDK docs 9.2.1, argument from 9.3.1
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005ec:	2102      	movs	r1, #2
 80005ee:	4823      	ldr	r0, [pc, #140]	@ (800067c <main+0xac>)
 80005f0:	f000 feda 	bl	80013a8 <HAL_CAN_ActivateNotification>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005f4:	f002 f916 	bl	8002824 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	xStreamBuffer0 = xStreamBufferCreate(COMMAND_BUFFER_LENGTH, 1);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2101      	movs	r1, #1
 80005fc:	200a      	movs	r0, #10
 80005fe:	f003 f851 	bl	80036a4 <xStreamBufferGenericCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a1e      	ldr	r2, [pc, #120]	@ (8000680 <main+0xb0>)
 8000606:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer0);
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <main+0xb0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10d      	bne.n	800062c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000614:	b672      	cpsid	i
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	b662      	cpsie	i
 8000624:	607b      	str	r3, [r7, #4]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x58>
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800062c:	4a15      	ldr	r2, [pc, #84]	@ (8000684 <main+0xb4>)
 800062e:	2100      	movs	r1, #0
 8000630:	4815      	ldr	r0, [pc, #84]	@ (8000688 <main+0xb8>)
 8000632:	f002 f961 	bl	80028f8 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a14      	ldr	r2, [pc, #80]	@ (800068c <main+0xbc>)
 800063a:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	configASSERT(pdPASS == xTaskCreate(CanReceiverTask, "CanReceiverTask", 128 * 4, NULL,
 800063c:	2300      	movs	r3, #0
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2301      	movs	r3, #1
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800064a:	4911      	ldr	r1, [pc, #68]	@ (8000690 <main+0xc0>)
 800064c:	4811      	ldr	r0, [pc, #68]	@ (8000694 <main+0xc4>)
 800064e:	f003 fc03 	bl	8003e58 <xTaskCreate>
 8000652:	4603      	mov	r3, r0
 8000654:	2b01      	cmp	r3, #1
 8000656:	d00d      	beq.n	8000674 <main+0xa4>
	__asm volatile
 8000658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800065c:	b672      	cpsid	i
 800065e:	f383 8811 	msr	BASEPRI, r3
 8000662:	f3bf 8f6f 	isb	sy
 8000666:	f3bf 8f4f 	dsb	sy
 800066a:	b662      	cpsie	i
 800066c:	603b      	str	r3, [r7, #0]
}
 800066e:	bf00      	nop
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <main+0xa0>
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000674:	f002 f90a 	bl	800288c <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <main+0xa8>
 800067c:	2000007c 	.word	0x2000007c
 8000680:	200000cc 	.word	0x200000cc
 8000684:	08006218 	.word	0x08006218
 8000688:	08000a75 	.word	0x08000a75
 800068c:	200000a4 	.word	0x200000a4
 8000690:	080061f0 	.word	0x080061f0
 8000694:	08000575 	.word	0x08000575

08000698 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	@ 0x50
 800069c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	@ 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fca8 	bl	8005ffc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000770 <SystemClock_Config+0xd8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000770 <SystemClock_Config+0xd8>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c8:	4b29      	ldr	r3, [pc, #164]	@ (8000770 <SystemClock_Config+0xd8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d4:	4b27      	ldr	r3, [pc, #156]	@ (8000774 <SystemClock_Config+0xdc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006dc:	4a25      	ldr	r2, [pc, #148]	@ (8000774 <SystemClock_Config+0xdc>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <SystemClock_Config+0xdc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	603b      	str	r3, [r7, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000704:	2308      	movs	r3, #8
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 192;
 8000708:	23c0      	movs	r3, #192	@ 0xc0
 800070a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800070c:	2304      	movs	r3, #4
 800070e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000710:	2302      	movs	r3, #2
 8000712:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fbdb 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <SystemClock_Config+0x94>
		Error_Handler();
 8000728:	f000 f9ac 	bl	8000a84 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800072c:	f001 fb84 	bl	8001e38 <HAL_PWREx_EnableOverDrive>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xa2>
		Error_Handler();
 8000736:	f000 f9a5 	bl	8000a84 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2302      	movs	r3, #2
 8000740:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000746:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800074a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000750:	f107 0308 	add.w	r3, r7, #8
 8000754:	2103      	movs	r1, #3
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fe6c 	bl	8002434 <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xce>
		Error_Handler();
 8000762:	f000 f98f 	bl	8000a84 <Error_Handler>
	}
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	@ 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b08a      	sub	sp, #40	@ 0x28
 800077c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800077e:	4b26      	ldr	r3, [pc, #152]	@ (8000818 <MX_CAN1_Init+0xa0>)
 8000780:	4a26      	ldr	r2, [pc, #152]	@ (800081c <MX_CAN1_Init+0xa4>)
 8000782:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 32;
 8000784:	4b24      	ldr	r3, [pc, #144]	@ (8000818 <MX_CAN1_Init+0xa0>)
 8000786:	2220      	movs	r2, #32
 8000788:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800078a:	4b23      	ldr	r3, [pc, #140]	@ (8000818 <MX_CAN1_Init+0xa0>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000790:	4b21      	ldr	r3, [pc, #132]	@ (8000818 <MX_CAN1_Init+0xa0>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000796:	4b20      	ldr	r3, [pc, #128]	@ (8000818 <MX_CAN1_Init+0xa0>)
 8000798:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800079c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007a0:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80007a4:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80007b8:	4b17      	ldr	r3, [pc, #92]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80007c4:	4b14      	ldr	r3, [pc, #80]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80007ca:	4813      	ldr	r0, [pc, #76]	@ (8000818 <MX_CAN1_Init+0xa0>)
 80007cc:	f000 fa9e 	bl	8000d0c <HAL_CAN_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_CAN1_Init+0x62>
		Error_Handler();
 80007d6:	f000 f955 	bl	8000a84 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	//Filter for KW45's 0x123 messages
	CAN_FilterTypeDef CanFilter0;
	CanFilter0.FilterActivation = CAN_FILTER_ENABLE;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
	CanFilter0.FilterBank = 18;
 80007de:	2312      	movs	r3, #18
 80007e0:	617b      	str	r3, [r7, #20]
	CanFilter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	613b      	str	r3, [r7, #16]
	CanFilter0.FilterIdHigh = 0x123 << 5;
 80007e6:	f242 4360 	movw	r3, #9312	@ 0x2460
 80007ea:	603b      	str	r3, [r7, #0]
	CanFilter0.FilterIdLow = 0x0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
	CanFilter0.FilterMaskIdHigh = 0x123 << 5;
 80007f0:	f242 4360 	movw	r3, #9312	@ 0x2460
 80007f4:	60bb      	str	r3, [r7, #8]
	CanFilter0.FilterMaskIdLow = 0x0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
	CanFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
	CanFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 80007fe:	2301      	movs	r3, #1
 8000800:	61fb      	str	r3, [r7, #28]
	CanFilter0.SlaveStartFilterBank = 20;
 8000802:	2314      	movs	r3, #20
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &CanFilter0);
 8000806:	463b      	mov	r3, r7
 8000808:	4619      	mov	r1, r3
 800080a:	4803      	ldr	r0, [pc, #12]	@ (8000818 <MX_CAN1_Init+0xa0>)
 800080c:	f000 fb7a 	bl	8000f04 <HAL_CAN_ConfigFilter>

	/* USER CODE END CAN1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000007c 	.word	0x2000007c
 800081c:	40006400 	.word	0x40006400

08000820 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	@ 0x30
 8000824:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000836:	4b89      	ldr	r3, [pc, #548]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a88      	ldr	r2, [pc, #544]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 800083c:	f043 0304 	orr.w	r3, r3, #4
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b86      	ldr	r3, [pc, #536]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0304 	and.w	r3, r3, #4
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b83      	ldr	r3, [pc, #524]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a82      	ldr	r2, [pc, #520]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b80      	ldr	r3, [pc, #512]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b7d      	ldr	r3, [pc, #500]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a7c      	ldr	r2, [pc, #496]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b7a      	ldr	r3, [pc, #488]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b77      	ldr	r3, [pc, #476]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a76      	ldr	r2, [pc, #472]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b74      	ldr	r3, [pc, #464]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b71      	ldr	r3, [pc, #452]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a70      	ldr	r2, [pc, #448]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b6e      	ldr	r3, [pc, #440]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	4b6b      	ldr	r3, [pc, #428]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a6a      	ldr	r2, [pc, #424]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b68      	ldr	r3, [pc, #416]	@ (8000a5c <MX_GPIO_Init+0x23c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008cc:	4864      	ldr	r0, [pc, #400]	@ (8000a60 <MX_GPIO_Init+0x240>)
 80008ce:	f001 fa7f 	bl	8001dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 80008d2:	2200      	movs	r2, #0
 80008d4:	2140      	movs	r1, #64	@ 0x40
 80008d6:	4863      	ldr	r0, [pc, #396]	@ (8000a64 <MX_GPIO_Init+0x244>)
 80008d8:	f001 fa7a 	bl	8001dd0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2180      	movs	r1, #128	@ 0x80
 80008e0:	4861      	ldr	r0, [pc, #388]	@ (8000a68 <MX_GPIO_Init+0x248>)
 80008e2:	f001 fa75 	bl	8001dd0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ea:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	485b      	ldr	r0, [pc, #364]	@ (8000a6c <MX_GPIO_Init+0x24c>)
 80008fe:	f001 f8bb 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8000902:	2332      	movs	r3, #50	@ 0x32
 8000904:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000906:	2302      	movs	r3, #2
 8000908:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090e:	2303      	movs	r3, #3
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000912:	230b      	movs	r3, #11
 8000914:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4853      	ldr	r0, [pc, #332]	@ (8000a6c <MX_GPIO_Init+0x24c>)
 800091e:	f001 f8ab 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8000922:	2386      	movs	r3, #134	@ 0x86
 8000924:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000932:	230b      	movs	r3, #11
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <MX_GPIO_Init+0x250>)
 800093e:	f001 f89b 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000942:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000946:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4841      	ldr	r0, [pc, #260]	@ (8000a60 <MX_GPIO_Init+0x240>)
 800095c:	f001 f88c 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_TXD1_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000960:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000964:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000972:	230b      	movs	r3, #11
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4838      	ldr	r0, [pc, #224]	@ (8000a60 <MX_GPIO_Init+0x240>)
 800097e:	f001 f87b 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	GPIO_InitStruct.Pin = STLK_RX_Pin | STLK_TX_Pin;
 8000982:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000986:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	2302      	movs	r3, #2
 800098a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000994:	2307      	movs	r3, #7
 8000996:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4832      	ldr	r0, [pc, #200]	@ (8000a68 <MX_GPIO_Init+0x248>)
 80009a0:	f001 f86a 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009a4:	2340      	movs	r3, #64	@ 0x40
 80009a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	482a      	ldr	r0, [pc, #168]	@ (8000a64 <MX_GPIO_Init+0x244>)
 80009bc:	f001 f85c 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4824      	ldr	r0, [pc, #144]	@ (8000a64 <MX_GPIO_Init+0x244>)
 80009d4:	f001 f850 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	GPIO_InitStruct.Pin = USB_SOF_Pin | USB_ID_Pin | USB_DM_Pin | USB_DP_Pin;
 80009d8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009ea:	230a      	movs	r3, #10
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	481e      	ldr	r0, [pc, #120]	@ (8000a70 <MX_GPIO_Init+0x250>)
 80009f6:	f001 f83f 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009fe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a00:	2300      	movs	r3, #0
 8000a02:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4818      	ldr	r0, [pc, #96]	@ (8000a70 <MX_GPIO_Init+0x250>)
 8000a10:	f001 f832 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	480f      	ldr	r0, [pc, #60]	@ (8000a68 <MX_GPIO_Init+0x248>)
 8000a2c:	f001 f824 	bl	8001a78 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
	GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8000a30:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a42:	230b      	movs	r3, #11
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_GPIO_Init+0x244>)
 8000a4e:	f001 f813 	bl	8001a78 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000a52:	bf00      	nop
 8000a54:	3730      	adds	r7, #48	@ 0x30
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020400 	.word	0x40020400
 8000a64:	40021800 	.word	0x40021800
 8000a68:	40020c00 	.word	0x40020c00
 8000a6c:	40020800 	.word	0x40020800
 8000a70:	40020000 	.word	0x40020000

08000a74 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
//		HAL_Delay(1000);
		osDelay(1);
 8000a7c:	2001      	movs	r0, #1
 8000a7e:	f001 ffe1 	bl	8002a44 <osDelay>
 8000a82:	e7fb      	b.n	8000a7c <StartDefaultTask+0x8>

08000a84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9a:	4a10      	ldr	r2, [pc, #64]	@ (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8000adc <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 ff9c 	bl	8001a0a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	@ 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <HAL_CAN_MspInit+0x8c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d12f      	bne.n	8000b62 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <HAL_CAN_MspInit+0x90>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a1a      	ldr	r2, [pc, #104]	@ (8000b70 <HAL_CAN_MspInit+0x90>)
 8000b08:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_CAN_MspInit+0x90>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_CAN_MspInit+0x90>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a14      	ldr	r2, [pc, #80]	@ (8000b70 <HAL_CAN_MspInit+0x90>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_CAN_MspInit+0x90>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b32:	2303      	movs	r3, #3
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b42:	2309      	movs	r3, #9
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <HAL_CAN_MspInit+0x94>)
 8000b4e:	f000 ff93 	bl	8001a78 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2105      	movs	r1, #5
 8000b56:	2014      	movs	r0, #20
 8000b58:	f000 ff57 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000b5c:	2014      	movs	r0, #20
 8000b5e:	f000 ff70 	bl	8001a42 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40006400 	.word	0x40006400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb2:	f000 f88b 	bl	8000ccc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000bb6:	f003 ff71 	bl	8004a9c <xTaskGetSchedulerState>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b01      	cmp	r3, #1
 8000bbe:	d001      	beq.n	8000bc4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000bc0:	f004 ff9a 	bl	8005af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <CAN1_RX0_IRQHandler+0x10>)
 8000bce:	f000 fc11 	bl	80013f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000007c 	.word	0x2000007c

08000bdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000be0:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <SystemInit+0x20>)
 8000be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be6:	4a05      	ldr	r2, [pc, #20]	@ (8000bfc <SystemInit+0x20>)
 8000be8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c04:	f7ff ffea 	bl	8000bdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c0a:	490d      	ldr	r1, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c10:	e002      	b.n	8000c18 <LoopCopyDataInit>

08000c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c16:	3304      	adds	r3, #4

08000c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c1c:	d3f9      	bcc.n	8000c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c20:	4c0a      	ldr	r4, [pc, #40]	@ (8000c4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c24:	e001      	b.n	8000c2a <LoopFillZerobss>

08000c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c28:	3204      	adds	r2, #4

08000c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c2c:	d3fb      	bcc.n	8000c26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c2e:	f005 fa43 	bl	80060b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c32:	f7ff fccd 	bl	80005d0 <main>
  bx  lr    
 8000c36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000c44:	0800625c 	.word	0x0800625c
  ldr r2, =_sbss
 8000c48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000c4c:	20004bf4 	.word	0x20004bf4

08000c50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c50:	e7fe      	b.n	8000c50 <ADC_IRQHandler>

08000c52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c56:	2003      	movs	r0, #3
 8000c58:	f000 fecc 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5c:	200f      	movs	r0, #15
 8000c5e:	f000 f805 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c62:	f7ff ff15 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	@ (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fee7 	bl	8001a5e <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f000 feaf 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	@ (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200000d0 	.word	0x200000d0

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	200000d0 	.word	0x200000d0

08000d0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d101      	bne.n	8000d1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e0ed      	b.n	8000efa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d102      	bne.n	8000d30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff fed8 	bl	8000ae0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f042 0201 	orr.w	r2, r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d40:	f7ff ffd8 	bl	8000cf4 <HAL_GetTick>
 8000d44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d46:	e012      	b.n	8000d6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d48:	f7ff ffd4 	bl	8000cf4 <HAL_GetTick>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	2b0a      	cmp	r3, #10
 8000d54:	d90b      	bls.n	8000d6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2205      	movs	r2, #5
 8000d66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e0c5      	b.n	8000efa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0e5      	beq.n	8000d48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0202 	bic.w	r2, r2, #2
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d8c:	f7ff ffb2 	bl	8000cf4 <HAL_GetTick>
 8000d90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d92:	e012      	b.n	8000dba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d94:	f7ff ffae 	bl	8000cf4 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	2b0a      	cmp	r3, #10
 8000da0:	d90b      	bls.n	8000dba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000da6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2205      	movs	r2, #5
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e09f      	b.n	8000efa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1e5      	bne.n	8000d94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7e1b      	ldrb	r3, [r3, #24]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7e5b      	ldrb	r3, [r3, #25]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7e9b      	ldrb	r3, [r3, #26]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0220 	orr.w	r2, r2, #32
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e007      	b.n	8000e46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0220 	bic.w	r2, r2, #32
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7edb      	ldrb	r3, [r3, #27]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d108      	bne.n	8000e60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f022 0210 	bic.w	r2, r2, #16
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f042 0210 	orr.w	r2, r2, #16
 8000e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	7f1b      	ldrb	r3, [r3, #28]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d108      	bne.n	8000e8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 0208 	orr.w	r2, r2, #8
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e007      	b.n	8000e9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f022 0208 	bic.w	r2, r2, #8
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	7f5b      	ldrb	r3, [r3, #29]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d108      	bne.n	8000eb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f042 0204 	orr.w	r2, r2, #4
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	e007      	b.n	8000ec4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 0204 	bic.w	r2, r2, #4
 8000ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689a      	ldr	r2, [r3, #8]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	431a      	orrs	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	431a      	orrs	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	ea42 0103 	orr.w	r1, r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	1e5a      	subs	r2, r3, #1
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
	...

08000f04 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f1a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f1c:	7cfb      	ldrb	r3, [r7, #19]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d003      	beq.n	8000f2a <HAL_CAN_ConfigFilter+0x26>
 8000f22:	7cfb      	ldrb	r3, [r7, #19]
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	f040 80c7 	bne.w	80010b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a69      	ldr	r2, [pc, #420]	@ (80010d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d001      	beq.n	8000f38 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8000f34:	4b68      	ldr	r3, [pc, #416]	@ (80010d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8000f36:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f3e:	f043 0201 	orr.w	r2, r3, #1
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	4a63      	ldr	r2, [pc, #396]	@ (80010d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d111      	bne.n	8000f74 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f56:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6a:	021b      	lsls	r3, r3, #8
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f003 031f 	and.w	r3, r3, #31
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d123      	bne.n	8000fe6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fc0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3248      	adds	r2, #72	@ 0x48
 8000fc6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fda:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fdc:	6979      	ldr	r1, [r7, #20]
 8000fde:	3348      	adds	r3, #72	@ 0x48
 8000fe0:	00db      	lsls	r3, r3, #3
 8000fe2:	440b      	add	r3, r1
 8000fe4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d122      	bne.n	8001034 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	431a      	orrs	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800100e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3248      	adds	r2, #72	@ 0x48
 8001014:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001028:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800102a:	6979      	ldr	r1, [r7, #20]
 800102c:	3348      	adds	r3, #72	@ 0x48
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	440b      	add	r3, r1
 8001032:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d109      	bne.n	8001050 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43db      	mvns	r3, r3
 8001046:	401a      	ands	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800104e:	e007      	b.n	8001060 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	431a      	orrs	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	691b      	ldr	r3, [r3, #16]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d109      	bne.n	800107c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	43db      	mvns	r3, r3
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800107a:	e007      	b.n	800108c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d107      	bne.n	80010a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	431a      	orrs	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80010aa:	f023 0201 	bic.w	r2, r3, #1
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e006      	b.n	80010c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
  }
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	371c      	adds	r7, #28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40003400 	.word	0x40003400
 80010d8:	40006400 	.word	0x40006400

080010dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d12e      	bne.n	800114e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0201 	bic.w	r2, r2, #1
 8001106:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001108:	f7ff fdf4 	bl	8000cf4 <HAL_GetTick>
 800110c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800110e:	e012      	b.n	8001136 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001110:	f7ff fdf0 	bl	8000cf4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b0a      	cmp	r3, #10
 800111c:	d90b      	bls.n	8001136 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001122:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2205      	movs	r2, #5
 800112e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e012      	b.n	800115c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0301 	and.w	r3, r3, #1
 8001140:	2b00      	cmp	r3, #0
 8001142:	d1e5      	bne.n	8001110 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2200      	movs	r2, #0
 8001148:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e006      	b.n	800115c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
  }
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001164:	b480      	push	{r7}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
 8001170:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001178:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d003      	beq.n	8001188 <HAL_CAN_GetRxMessage+0x24>
 8001180:	7dfb      	ldrb	r3, [r7, #23]
 8001182:	2b02      	cmp	r3, #2
 8001184:	f040 8103 	bne.w	800138e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d10e      	bne.n	80011ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	2b00      	cmp	r3, #0
 800119a:	d116      	bne.n	80011ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e0f7      	b.n	800139c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d107      	bne.n	80011ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e0e8      	b.n	800139c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	331b      	adds	r3, #27
 80011d2:	011b      	lsls	r3, r3, #4
 80011d4:	4413      	add	r3, r2
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0204 	and.w	r2, r3, #4
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d10c      	bne.n	8001202 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	331b      	adds	r3, #27
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0d5b      	lsrs	r3, r3, #21
 80011f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	e00b      	b.n	800121a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	331b      	adds	r3, #27
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	08db      	lsrs	r3, r3, #3
 8001212:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	331b      	adds	r3, #27
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0202 	and.w	r2, r3, #2
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	331b      	adds	r3, #27
 8001238:	011b      	lsls	r3, r3, #4
 800123a:	4413      	add	r3, r2
 800123c:	3304      	adds	r3, #4
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2208      	movs	r2, #8
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	e00b      	b.n	8001268 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	331b      	adds	r3, #27
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	3304      	adds	r3, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 020f 	and.w	r2, r3, #15
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	331b      	adds	r3, #27
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	4413      	add	r3, r2
 8001274:	3304      	adds	r3, #4
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0a1b      	lsrs	r3, r3, #8
 800127a:	b2da      	uxtb	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	331b      	adds	r3, #27
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	4413      	add	r3, r2
 800128c:	3304      	adds	r3, #4
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0c1b      	lsrs	r3, r3, #16
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	011b      	lsls	r3, r3, #4
 80012a0:	4413      	add	r3, r2
 80012a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	0a1a      	lsrs	r2, r3, #8
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	3301      	adds	r3, #1
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	4413      	add	r3, r2
 80012d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0c1a      	lsrs	r2, r3, #16
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	3302      	adds	r3, #2
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	011b      	lsls	r3, r3, #4
 80012ea:	4413      	add	r3, r2
 80012ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	0e1a      	lsrs	r2, r3, #24
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	3303      	adds	r3, #3
 80012f8:	b2d2      	uxtb	r2, r2
 80012fa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4413      	add	r3, r2
 8001306:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	3304      	adds	r3, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	0a1a      	lsrs	r2, r3, #8
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	3305      	adds	r3, #5
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	4413      	add	r3, r2
 8001338:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	0c1a      	lsrs	r2, r3, #16
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	3306      	adds	r3, #6
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	011b      	lsls	r3, r3, #4
 8001350:	4413      	add	r3, r2
 8001352:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0e1a      	lsrs	r2, r3, #24
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3307      	adds	r3, #7
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d108      	bne.n	800137a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0220 	orr.w	r2, r2, #32
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	e007      	b.n	800138a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691a      	ldr	r2, [r3, #16]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f042 0220 	orr.w	r2, r2, #32
 8001388:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e006      	b.n	800139c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001392:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d002      	beq.n	80013c6 <HAL_CAN_ActivateNotification+0x1e>
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d109      	bne.n	80013da <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6959      	ldr	r1, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e006      	b.n	80013e8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
  }
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	699b      	ldr	r3, [r3, #24]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	2b00      	cmp	r3, #0
 8001438:	d07c      	beq.n	8001534 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	2b00      	cmp	r3, #0
 8001442:	d023      	beq.n	800148c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f983 	bl	8001762 <HAL_CAN_TxMailbox0CompleteCallback>
 800145c:	e016      	b.n	800148c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d004      	beq.n	8001472 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800146a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001470:	e00c      	b.n	800148c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	2b00      	cmp	r3, #0
 800147a:	d004      	beq.n	8001486 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800147c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800147e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
 8001484:	e002      	b.n	800148c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f000 f989 	bl	800179e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d024      	beq.n	80014e0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800149e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f000 f963 	bl	8001776 <HAL_CAN_TxMailbox1CompleteCallback>
 80014b0:	e016      	b.n	80014e0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d004      	beq.n	80014c6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014be:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c4:	e00c      	b.n	80014e0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d004      	beq.n	80014da <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80014d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d8:	e002      	b.n	80014e0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f000 f969 	bl	80017b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d024      	beq.n	8001534 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f943 	bl	800178a <HAL_CAN_TxMailbox2CompleteCallback>
 8001504:	e016      	b.n	8001534 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d004      	beq.n	800151a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001516:	627b      	str	r3, [r7, #36]	@ 0x24
 8001518:	e00c      	b.n	8001534 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d004      	beq.n	800152e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
 800152c:	e002      	b.n	8001534 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f949 	bl	80017c6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001534:	6a3b      	ldr	r3, [r7, #32]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00c      	beq.n	8001558 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00b      	beq.n	800157a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d006      	beq.n	800157a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2208      	movs	r2, #8
 8001572:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f930 	bl	80017da <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d009      	beq.n	8001598 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d002      	beq.n	8001598 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7fe ffcc 	bl	8000530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00c      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2210      	movs	r2, #16
 80015ba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d00b      	beq.n	80015de <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2208      	movs	r2, #8
 80015d6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f912 	bl	8001802 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80015de:	6a3b      	ldr	r3, [r7, #32]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	f003 0303 	and.w	r3, r3, #3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f8f9 	bl	80017ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00b      	beq.n	800161e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b00      	cmp	r3, #0
 800160e:	d006      	beq.n	800161e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2210      	movs	r2, #16
 8001616:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f8fc 	bl	8001816 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d006      	beq.n	8001640 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2208      	movs	r2, #8
 8001638:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8f5 	bl	800182a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d07b      	beq.n	8001742 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d072      	beq.n	800173a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001670:	6a3b      	ldr	r3, [r7, #32]
 8001672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001686:	f043 0302 	orr.w	r3, r3, #2
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800169c:	2b00      	cmp	r3, #0
 800169e:	d003      	beq.n	80016a8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d043      	beq.n	800173a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03e      	beq.n	800173a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016c2:	2b60      	cmp	r3, #96	@ 0x60
 80016c4:	d02b      	beq.n	800171e <HAL_CAN_IRQHandler+0x32a>
 80016c6:	2b60      	cmp	r3, #96	@ 0x60
 80016c8:	d82e      	bhi.n	8001728 <HAL_CAN_IRQHandler+0x334>
 80016ca:	2b50      	cmp	r3, #80	@ 0x50
 80016cc:	d022      	beq.n	8001714 <HAL_CAN_IRQHandler+0x320>
 80016ce:	2b50      	cmp	r3, #80	@ 0x50
 80016d0:	d82a      	bhi.n	8001728 <HAL_CAN_IRQHandler+0x334>
 80016d2:	2b40      	cmp	r3, #64	@ 0x40
 80016d4:	d019      	beq.n	800170a <HAL_CAN_IRQHandler+0x316>
 80016d6:	2b40      	cmp	r3, #64	@ 0x40
 80016d8:	d826      	bhi.n	8001728 <HAL_CAN_IRQHandler+0x334>
 80016da:	2b30      	cmp	r3, #48	@ 0x30
 80016dc:	d010      	beq.n	8001700 <HAL_CAN_IRQHandler+0x30c>
 80016de:	2b30      	cmp	r3, #48	@ 0x30
 80016e0:	d822      	bhi.n	8001728 <HAL_CAN_IRQHandler+0x334>
 80016e2:	2b10      	cmp	r3, #16
 80016e4:	d002      	beq.n	80016ec <HAL_CAN_IRQHandler+0x2f8>
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d005      	beq.n	80016f6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80016ea:	e01d      	b.n	8001728 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80016ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016f4:	e019      	b.n	800172a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	f043 0310 	orr.w	r3, r3, #16
 80016fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80016fe:	e014      	b.n	800172a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001702:	f043 0320 	orr.w	r3, r3, #32
 8001706:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001708:	e00f      	b.n	800172a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001712:	e00a      	b.n	800172a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800171c:	e005      	b.n	800172a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001726:	e000      	b.n	800172a <HAL_CAN_IRQHandler+0x336>
            break;
 8001728:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001738:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2204      	movs	r2, #4
 8001740:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f872 	bl	800183e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800175a:	bf00      	nop
 800175c:	3728      	adds	r7, #40	@ 0x28
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800178a:	b480      	push	{r7}
 800178c:	b083      	sub	sp, #12
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017ba:	bf00      	nop
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80017ee:	b480      	push	{r7}
 80017f0:	b083      	sub	sp, #12
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001846:	bf00      	nop
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0b      	ldr	r3, [pc, #44]	@ (8001894 <__NVIC_SetPriorityGrouping+0x40>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	4313      	orrs	r3, r2
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <__NVIC_SetPriorityGrouping+0x40>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	05fa0000 	.word	0x05fa0000

0800189c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff8e 	bl	80018f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff29 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff3e 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff8e 	bl	8001948 <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5d 	bl	80018f4 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff31 	bl	80018b8 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001a86:	2300      	movs	r3, #0
 8001a88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
 8001a96:	e175      	b.n	8001d84 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001a98:	2201      	movs	r2, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	f040 8164 	bne.w	8001d7e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d005      	beq.n	8001ace <HAL_GPIO_Init+0x56>
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0303 	and.w	r3, r3, #3
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d017      	beq.n	8001b6c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d123      	bne.n	8001bc0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	08da      	lsrs	r2, r3, #3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3208      	adds	r2, #8
 8001b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	220f      	movs	r2, #15
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	69b9      	ldr	r1, [r7, #24]
 8001bbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0203 	and.w	r2, r3, #3
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80be 	beq.w	8001d7e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b66      	ldr	r3, [pc, #408]	@ (8001d9c <HAL_GPIO_Init+0x324>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	4a65      	ldr	r2, [pc, #404]	@ (8001d9c <HAL_GPIO_Init+0x324>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c0e:	4b63      	ldr	r3, [pc, #396]	@ (8001d9c <HAL_GPIO_Init+0x324>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c1a:	4a61      	ldr	r2, [pc, #388]	@ (8001da0 <HAL_GPIO_Init+0x328>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a58      	ldr	r2, [pc, #352]	@ (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d037      	beq.n	8001cb6 <HAL_GPIO_Init+0x23e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a57      	ldr	r2, [pc, #348]	@ (8001da8 <HAL_GPIO_Init+0x330>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d031      	beq.n	8001cb2 <HAL_GPIO_Init+0x23a>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a56      	ldr	r2, [pc, #344]	@ (8001dac <HAL_GPIO_Init+0x334>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d02b      	beq.n	8001cae <HAL_GPIO_Init+0x236>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a55      	ldr	r2, [pc, #340]	@ (8001db0 <HAL_GPIO_Init+0x338>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d025      	beq.n	8001caa <HAL_GPIO_Init+0x232>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a54      	ldr	r2, [pc, #336]	@ (8001db4 <HAL_GPIO_Init+0x33c>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d01f      	beq.n	8001ca6 <HAL_GPIO_Init+0x22e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a53      	ldr	r2, [pc, #332]	@ (8001db8 <HAL_GPIO_Init+0x340>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d019      	beq.n	8001ca2 <HAL_GPIO_Init+0x22a>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a52      	ldr	r2, [pc, #328]	@ (8001dbc <HAL_GPIO_Init+0x344>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d013      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a51      	ldr	r2, [pc, #324]	@ (8001dc0 <HAL_GPIO_Init+0x348>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00d      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a50      	ldr	r2, [pc, #320]	@ (8001dc4 <HAL_GPIO_Init+0x34c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a4f      	ldr	r2, [pc, #316]	@ (8001dc8 <HAL_GPIO_Init+0x350>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d101      	bne.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c8e:	2309      	movs	r3, #9
 8001c90:	e012      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c92:	230a      	movs	r3, #10
 8001c94:	e010      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00e      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	e00c      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001c9e:	2306      	movs	r3, #6
 8001ca0:	e00a      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca2:	2305      	movs	r3, #5
 8001ca4:	e008      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	e006      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001caa:	2303      	movs	r3, #3
 8001cac:	e004      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cae:	2302      	movs	r3, #2
 8001cb0:	e002      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e000      	b.n	8001cb8 <HAL_GPIO_Init+0x240>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	f002 0203 	and.w	r2, r2, #3
 8001cbe:	0092      	lsls	r2, r2, #2
 8001cc0:	4093      	lsls	r3, r2
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cc8:	4935      	ldr	r1, [pc, #212]	@ (8001da0 <HAL_GPIO_Init+0x328>)
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cfa:	4a34      	ldr	r2, [pc, #208]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d00:	4b32      	ldr	r3, [pc, #200]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d24:	4a29      	ldr	r2, [pc, #164]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d2a:	4b28      	ldr	r3, [pc, #160]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4013      	ands	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4e:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d54:	4b1d      	ldr	r3, [pc, #116]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d003      	beq.n	8001d78 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d78:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <HAL_GPIO_Init+0x354>)
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3301      	adds	r3, #1
 8001d82:	61fb      	str	r3, [r7, #28]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	2b0f      	cmp	r3, #15
 8001d88:	f67f ae86 	bls.w	8001a98 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001d8c:	bf00      	nop
 8001d8e:	bf00      	nop
 8001d90:	3724      	adds	r7, #36	@ 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40013800 	.word	0x40013800
 8001da4:	40020000 	.word	0x40020000
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40020c00 	.word	0x40020c00
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40021400 	.word	0x40021400
 8001dbc:	40021800 	.word	0x40021800
 8001dc0:	40021c00 	.word	0x40021c00
 8001dc4:	40022000 	.word	0x40022000
 8001dc8:	40022400 	.word	0x40022400
 8001dcc:	40013c00 	.word	0x40013c00

08001dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	807b      	strh	r3, [r7, #2]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001de0:	787b      	ldrb	r3, [r7, #1]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001de6:	887a      	ldrh	r2, [r7, #2]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001dec:	e003      	b.n	8001df6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001dee:	887b      	ldrh	r3, [r7, #2]
 8001df0:	041a      	lsls	r2, r3, #16
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	619a      	str	r2, [r3, #24]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b085      	sub	sp, #20
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e14:	887a      	ldrh	r2, [r7, #2]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	041a      	lsls	r2, r3, #16
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43d9      	mvns	r1, r3
 8001e20:	887b      	ldrh	r3, [r7, #2]
 8001e22:	400b      	ands	r3, r1
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	619a      	str	r2, [r3, #24]
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
	...

08001e38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e66:	f7fe ff45 	bl	8000cf4 <HAL_GetTick>
 8001e6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e6c:	e009      	b.n	8001e82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e6e:	f7fe ff41 	bl	8000cf4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001e7c:	d901      	bls.n	8001e82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e022      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e82:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e8e:	d1ee      	bne.n	8001e6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e9c:	f7fe ff2a 	bl	8000cf4 <HAL_GetTick>
 8001ea0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea2:	e009      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ea4:	f7fe ff26 	bl	8000cf4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e007      	b.n	8001ec8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e29b      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8087 	beq.w	800200a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001efc:	4b96      	ldr	r3, [pc, #600]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d00c      	beq.n	8001f22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f08:	4b93      	ldr	r3, [pc, #588]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d112      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
 8001f14:	4b90      	ldr	r3, [pc, #576]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f20:	d10b      	bne.n	8001f3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f22:	4b8d      	ldr	r3, [pc, #564]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d06c      	beq.n	8002008 <HAL_RCC_OscConfig+0x130>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d168      	bne.n	8002008 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e275      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f42:	d106      	bne.n	8001f52 <HAL_RCC_OscConfig+0x7a>
 8001f44:	4b84      	ldr	r3, [pc, #528]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a83      	ldr	r2, [pc, #524]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f4e:	6013      	str	r3, [r2, #0]
 8001f50:	e02e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d10c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x9c>
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f64:	6013      	str	r3, [r2, #0]
 8001f66:	4b7c      	ldr	r3, [pc, #496]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a7b      	ldr	r2, [pc, #492]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	e01d      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc0>
 8001f7e:	4b76      	ldr	r3, [pc, #472]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a75      	ldr	r2, [pc, #468]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b73      	ldr	r3, [pc, #460]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a72      	ldr	r2, [pc, #456]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xd8>
 8001f98:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b6c      	ldr	r3, [pc, #432]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a6b      	ldr	r2, [pc, #428]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe fe9c 	bl	8000cf4 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc0:	f7fe fe98 	bl	8000cf4 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b64      	cmp	r3, #100	@ 0x64
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e229      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd2:	4b61      	ldr	r3, [pc, #388]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d0f0      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe8>
 8001fde:	e014      	b.n	800200a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe0:	f7fe fe88 	bl	8000cf4 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fe8:	f7fe fe84 	bl	8000cf4 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b64      	cmp	r3, #100	@ 0x64
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e215      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffa:	4b57      	ldr	r3, [pc, #348]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x110>
 8002006:	e000      	b.n	800200a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d069      	beq.n	80020ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002016:	4b50      	ldr	r3, [pc, #320]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 030c 	and.w	r3, r3, #12
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00b      	beq.n	800203a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b4d      	ldr	r3, [pc, #308]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	2b08      	cmp	r3, #8
 800202c:	d11c      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
 800202e:	4b4a      	ldr	r3, [pc, #296]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d116      	bne.n	8002068 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	4b47      	ldr	r3, [pc, #284]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d005      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d001      	beq.n	8002052 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e1e9      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002052:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	493d      	ldr	r1, [pc, #244]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002066:	e040      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d023      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002070:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a38      	ldr	r2, [pc, #224]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7fe fe3a 	bl	8000cf4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7fe fe36 	bl	8000cf4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e1c7      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4b30      	ldr	r3, [pc, #192]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4929      	ldr	r1, [pc, #164]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	600b      	str	r3, [r1, #0]
 80020b6:	e018      	b.n	80020ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b8:	4b27      	ldr	r3, [pc, #156]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a26      	ldr	r2, [pc, #152]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7fe fe16 	bl	8000cf4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7fe fe12 	bl	8000cf4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1a3      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d038      	beq.n	8002168 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d019      	beq.n	8002132 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fe:	4b16      	ldr	r3, [pc, #88]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002100:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002102:	4a15      	ldr	r2, [pc, #84]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7fe fdf3 	bl	8000cf4 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002112:	f7fe fdef 	bl	8000cf4 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e180      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x23a>
 8002130:	e01a      	b.n	8002168 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002134:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002136:	4a08      	ldr	r2, [pc, #32]	@ (8002158 <HAL_RCC_OscConfig+0x280>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213e:	f7fe fdd9 	bl	8000cf4 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002144:	e00a      	b.n	800215c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002146:	f7fe fdd5 	bl	8000cf4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d903      	bls.n	800215c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e166      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
 8002158:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800215c:	4b92      	ldr	r3, [pc, #584]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800215e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1ee      	bne.n	8002146 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	f000 80a4 	beq.w	80022be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8c      	ldr	r3, [pc, #560]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b89      	ldr	r3, [pc, #548]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	4a88      	ldr	r2, [pc, #544]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	6413      	str	r3, [r2, #64]	@ 0x40
 800218e:	4b86      	ldr	r3, [pc, #536]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800219e:	4b83      	ldr	r3, [pc, #524]	@ (80023ac <HAL_RCC_OscConfig+0x4d4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80021aa:	4b80      	ldr	r3, [pc, #512]	@ (80023ac <HAL_RCC_OscConfig+0x4d4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7f      	ldr	r2, [pc, #508]	@ (80023ac <HAL_RCC_OscConfig+0x4d4>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7fe fd9d 	bl	8000cf4 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7fe fd99 	bl	8000cf4 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	@ 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e12a      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d0:	4b76      	ldr	r3, [pc, #472]	@ (80023ac <HAL_RCC_OscConfig+0x4d4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x31a>
 80021e4:	4b70      	ldr	r3, [pc, #448]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e8:	4a6f      	ldr	r2, [pc, #444]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x33c>
 80021fa:	4b6b      	ldr	r3, [pc, #428]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80021fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021fe:	4a6a      	ldr	r2, [pc, #424]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6713      	str	r3, [r2, #112]	@ 0x70
 8002206:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800220a:	4a67      	ldr	r2, [pc, #412]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6713      	str	r3, [r2, #112]	@ 0x70
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x35e>
 800221c:	4b62      	ldr	r3, [pc, #392]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002220:	4a61      	ldr	r2, [pc, #388]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6713      	str	r3, [r2, #112]	@ 0x70
 8002228:	4b5f      	ldr	r3, [pc, #380]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	4a5e      	ldr	r2, [pc, #376]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6713      	str	r3, [r2, #112]	@ 0x70
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x376>
 8002236:	4b5c      	ldr	r3, [pc, #368]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223a:	4a5b      	ldr	r2, [pc, #364]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	@ 0x70
 8002242:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002246:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002256:	f7fe fd4d 	bl	8000cf4 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fd49 	bl	8000cf4 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0d8      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4c      	ldr	r3, [pc, #304]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x386>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002282:	f7fe fd37 	bl	8000cf4 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7fe fd33 	bl	8000cf4 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0c2      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3d      	ldr	r3, [pc, #244]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	4a3c      	ldr	r2, [pc, #240]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 80ae 	beq.w	8002424 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d06d      	beq.n	80023b0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d14b      	bne.n	8002374 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b32      	ldr	r3, [pc, #200]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a31      	ldr	r2, [pc, #196]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 80022e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe fd04 	bl	8000cf4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fd00 	bl	8000cf4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e091      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002302:	4b29      	ldr	r3, [pc, #164]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231c:	019b      	lsls	r3, r3, #6
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	3b01      	subs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002338:	071b      	lsls	r3, r3, #28
 800233a:	491b      	ldr	r1, [pc, #108]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a18      	ldr	r2, [pc, #96]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800234a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234c:	f7fe fcd2 	bl	8000cf4 <HAL_GetTick>
 8002350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fcce 	bl	8000cf4 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e05f      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	4b10      	ldr	r3, [pc, #64]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x47c>
 8002372:	e057      	b.n	8002424 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b0c      	ldr	r3, [pc, #48]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a0b      	ldr	r2, [pc, #44]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800237a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800237e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002380:	f7fe fcb8 	bl	8000cf4 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002388:	f7fe fcb4 	bl	8000cf4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e045      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239a:	4b03      	ldr	r3, [pc, #12]	@ (80023a8 <HAL_RCC_OscConfig+0x4d0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x4b0>
 80023a6:	e03d      	b.n	8002424 <HAL_RCC_OscConfig+0x54c>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80023b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002430 <HAL_RCC_OscConfig+0x558>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d030      	beq.n	8002420 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d129      	bne.n	8002420 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d122      	bne.n	8002420 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023e0:	4013      	ands	r3, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d119      	bne.n	8002420 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f6:	085b      	lsrs	r3, r3, #1
 80023f8:	3b01      	subs	r3, #1
 80023fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d10f      	bne.n	8002420 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d107      	bne.n	8002420 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e000      	b.n	8002426 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e0d0      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4b6a      	ldr	r3, [pc, #424]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 030f 	and.w	r3, r3, #15
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	429a      	cmp	r2, r3
 8002458:	d910      	bls.n	800247c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245a:	4b67      	ldr	r3, [pc, #412]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 020f 	bic.w	r2, r3, #15
 8002462:	4965      	ldr	r1, [pc, #404]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246a:	4b63      	ldr	r3, [pc, #396]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	429a      	cmp	r2, r3
 8002476:	d001      	beq.n	800247c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0b8      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d020      	beq.n	80024ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002494:	4b59      	ldr	r3, [pc, #356]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a58      	ldr	r2, [pc, #352]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 800249a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800249e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ac:	4b53      	ldr	r3, [pc, #332]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4a52      	ldr	r2, [pc, #328]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b50      	ldr	r3, [pc, #320]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	494d      	ldr	r1, [pc, #308]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d040      	beq.n	8002558 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d107      	bne.n	80024ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	4b47      	ldr	r3, [pc, #284]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d115      	bne.n	8002516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e07f      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f6:	4b41      	ldr	r3, [pc, #260]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e073      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002506:	4b3d      	ldr	r3, [pc, #244]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06b      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4b39      	ldr	r3, [pc, #228]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f023 0203 	bic.w	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	4936      	ldr	r1, [pc, #216]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002524:	4313      	orrs	r3, r2
 8002526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002528:	f7fe fbe4 	bl	8000cf4 <HAL_GetTick>
 800252c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	e00a      	b.n	8002546 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002530:	f7fe fbe0 	bl	8000cf4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253e:	4293      	cmp	r3, r2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e053      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	4b2d      	ldr	r3, [pc, #180]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 020c 	and.w	r2, r3, #12
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	429a      	cmp	r2, r3
 8002556:	d1eb      	bne.n	8002530 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002558:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d210      	bcs.n	8002588 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b24      	ldr	r3, [pc, #144]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 020f 	bic.w	r2, r3, #15
 800256e:	4922      	ldr	r1, [pc, #136]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b20      	ldr	r3, [pc, #128]	@ (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e032      	b.n	80025ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0304 	and.w	r3, r3, #4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002594:	4b19      	ldr	r3, [pc, #100]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	4916      	ldr	r1, [pc, #88]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0308 	and.w	r3, r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025b2:	4b12      	ldr	r3, [pc, #72]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	490e      	ldr	r1, [pc, #56]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025c6:	f000 f821 	bl	800260c <HAL_RCC_GetSysClockFreq>
 80025ca:	4602      	mov	r2, r0
 80025cc:	4b0b      	ldr	r3, [pc, #44]	@ (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	091b      	lsrs	r3, r3, #4
 80025d2:	f003 030f 	and.w	r3, r3, #15
 80025d6:	490a      	ldr	r1, [pc, #40]	@ (8002600 <HAL_RCC_ClockConfig+0x1cc>)
 80025d8:	5ccb      	ldrb	r3, [r1, r3]
 80025da:	fa22 f303 	lsr.w	r3, r2, r3
 80025de:	4a09      	ldr	r2, [pc, #36]	@ (8002604 <HAL_RCC_ClockConfig+0x1d0>)
 80025e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_RCC_ClockConfig+0x1d4>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fb40 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00
 80025fc:	40023800 	.word	0x40023800
 8002600:	0800623c 	.word	0x0800623c
 8002604:	20000000 	.word	0x20000000
 8002608:	20000004 	.word	0x20000004

0800260c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800260c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002610:	b094      	sub	sp, #80	@ 0x50
 8002612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	647b      	str	r3, [r7, #68]	@ 0x44
 8002618:	2300      	movs	r3, #0
 800261a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800261c:	2300      	movs	r3, #0
 800261e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002624:	4b79      	ldr	r3, [pc, #484]	@ (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 030c 	and.w	r3, r3, #12
 800262c:	2b08      	cmp	r3, #8
 800262e:	d00d      	beq.n	800264c <HAL_RCC_GetSysClockFreq+0x40>
 8002630:	2b08      	cmp	r3, #8
 8002632:	f200 80e1 	bhi.w	80027f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d002      	beq.n	8002640 <HAL_RCC_GetSysClockFreq+0x34>
 800263a:	2b04      	cmp	r3, #4
 800263c:	d003      	beq.n	8002646 <HAL_RCC_GetSysClockFreq+0x3a>
 800263e:	e0db      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002640:	4b73      	ldr	r3, [pc, #460]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 8002642:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002644:	e0db      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002646:	4b72      	ldr	r3, [pc, #456]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 8002648:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800264a:	e0d8      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800264c:	4b6f      	ldr	r3, [pc, #444]	@ (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002654:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002656:	4b6d      	ldr	r3, [pc, #436]	@ (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d063      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002662:	4b6a      	ldr	r3, [pc, #424]	@ (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	2200      	movs	r2, #0
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800266c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002674:	633b      	str	r3, [r7, #48]	@ 0x30
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	@ 0x34
 800267a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800267e:	4622      	mov	r2, r4
 8002680:	462b      	mov	r3, r5
 8002682:	f04f 0000 	mov.w	r0, #0
 8002686:	f04f 0100 	mov.w	r1, #0
 800268a:	0159      	lsls	r1, r3, #5
 800268c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002690:	0150      	lsls	r0, r2, #5
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	4621      	mov	r1, r4
 8002698:	1a51      	subs	r1, r2, r1
 800269a:	6139      	str	r1, [r7, #16]
 800269c:	4629      	mov	r1, r5
 800269e:	eb63 0301 	sbc.w	r3, r3, r1
 80026a2:	617b      	str	r3, [r7, #20]
 80026a4:	f04f 0200 	mov.w	r2, #0
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b0:	4659      	mov	r1, fp
 80026b2:	018b      	lsls	r3, r1, #6
 80026b4:	4651      	mov	r1, sl
 80026b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ba:	4651      	mov	r1, sl
 80026bc:	018a      	lsls	r2, r1, #6
 80026be:	4651      	mov	r1, sl
 80026c0:	ebb2 0801 	subs.w	r8, r2, r1
 80026c4:	4659      	mov	r1, fp
 80026c6:	eb63 0901 	sbc.w	r9, r3, r1
 80026ca:	f04f 0200 	mov.w	r2, #0
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026de:	4690      	mov	r8, r2
 80026e0:	4699      	mov	r9, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	eb18 0303 	adds.w	r3, r8, r3
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	462b      	mov	r3, r5
 80026ec:	eb49 0303 	adc.w	r3, r9, r3
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800271c:	f7fd fd90 	bl	8000240 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002728:	e058      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800272a:	4b38      	ldr	r3, [pc, #224]	@ (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	099b      	lsrs	r3, r3, #6
 8002730:	2200      	movs	r2, #0
 8002732:	4618      	mov	r0, r3
 8002734:	4611      	mov	r1, r2
 8002736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800273a:	623b      	str	r3, [r7, #32]
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002744:	4642      	mov	r2, r8
 8002746:	464b      	mov	r3, r9
 8002748:	f04f 0000 	mov.w	r0, #0
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	0159      	lsls	r1, r3, #5
 8002752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002756:	0150      	lsls	r0, r2, #5
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4641      	mov	r1, r8
 800275e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002762:	4649      	mov	r1, r9
 8002764:	eb63 0b01 	sbc.w	fp, r3, r1
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800277c:	ebb2 040a 	subs.w	r4, r2, sl
 8002780:	eb63 050b 	sbc.w	r5, r3, fp
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	00eb      	lsls	r3, r5, #3
 800278e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002792:	00e2      	lsls	r2, r4, #3
 8002794:	4614      	mov	r4, r2
 8002796:	461d      	mov	r5, r3
 8002798:	4643      	mov	r3, r8
 800279a:	18e3      	adds	r3, r4, r3
 800279c:	603b      	str	r3, [r7, #0]
 800279e:	464b      	mov	r3, r9
 80027a0:	eb45 0303 	adc.w	r3, r5, r3
 80027a4:	607b      	str	r3, [r7, #4]
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	f04f 0300 	mov.w	r3, #0
 80027ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027b2:	4629      	mov	r1, r5
 80027b4:	028b      	lsls	r3, r1, #10
 80027b6:	4621      	mov	r1, r4
 80027b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027bc:	4621      	mov	r1, r4
 80027be:	028a      	lsls	r2, r1, #10
 80027c0:	4610      	mov	r0, r2
 80027c2:	4619      	mov	r1, r3
 80027c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c6:	2200      	movs	r2, #0
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	61fa      	str	r2, [r7, #28]
 80027cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d0:	f7fd fd36 	bl	8000240 <__aeabi_uldivmod>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4613      	mov	r3, r2
 80027da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80027dc:	4b0b      	ldr	r3, [pc, #44]	@ (800280c <HAL_RCC_GetSysClockFreq+0x200>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	0c1b      	lsrs	r3, r3, #16
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	3301      	adds	r3, #1
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f6:	e002      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f8:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x204>)
 80027fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002800:	4618      	mov	r0, r3
 8002802:	3750      	adds	r7, #80	@ 0x50
 8002804:	46bd      	mov	sp, r7
 8002806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800280a:	bf00      	nop
 800280c:	40023800 	.word	0x40023800
 8002810:	00f42400 	.word	0x00f42400

08002814 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002818:	bf00      	nop
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800282a:	f3ef 8305 	mrs	r3, IPSR
 800282e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002830:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10f      	bne.n	8002856 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002836:	f3ef 8310 	mrs	r3, PRIMASK
 800283a:	607b      	str	r3, [r7, #4]
  return(result);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d105      	bne.n	800284e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002842:	f3ef 8311 	mrs	r3, BASEPRI
 8002846:	603b      	str	r3, [r7, #0]
  return(result);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d007      	beq.n	800285e <osKernelInitialize+0x3a>
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <osKernelInitialize+0x64>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002856:	f06f 0305 	mvn.w	r3, #5
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e00c      	b.n	8002878 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800285e:	4b0a      	ldr	r3, [pc, #40]	@ (8002888 <osKernelInitialize+0x64>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <osKernelInitialize+0x64>)
 8002868:	2201      	movs	r2, #1
 800286a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	e002      	b.n	8002878 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002872:	f04f 33ff 	mov.w	r3, #4294967295
 8002876:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002878:	68fb      	ldr	r3, [r7, #12]
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	200000d4 	.word	0x200000d4

0800288c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002892:	f3ef 8305 	mrs	r3, IPSR
 8002896:	60bb      	str	r3, [r7, #8]
  return(result);
 8002898:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10f      	bne.n	80028be <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800289e:	f3ef 8310 	mrs	r3, PRIMASK
 80028a2:	607b      	str	r3, [r7, #4]
  return(result);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028aa:	f3ef 8311 	mrs	r3, BASEPRI
 80028ae:	603b      	str	r3, [r7, #0]
  return(result);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d007      	beq.n	80028c6 <osKernelStart+0x3a>
 80028b6:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <osKernelStart+0x68>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d103      	bne.n	80028c6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80028be:	f06f 0305 	mvn.w	r3, #5
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e010      	b.n	80028e8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028c6:	4b0b      	ldr	r3, [pc, #44]	@ (80028f4 <osKernelStart+0x68>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d109      	bne.n	80028e2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028ce:	f7ff ffa1 	bl	8002814 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028d2:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <osKernelStart+0x68>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028d8:	f001 fc56 	bl	8004188 <vTaskStartScheduler>
      stat = osOK;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]
 80028e0:	e002      	b.n	80028e8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80028e2:	f04f 33ff 	mov.w	r3, #4294967295
 80028e6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80028e8:	68fb      	ldr	r3, [r7, #12]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	200000d4 	.word	0x200000d4

080028f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b090      	sub	sp, #64	@ 0x40
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002908:	f3ef 8305 	mrs	r3, IPSR
 800290c:	61fb      	str	r3, [r7, #28]
  return(result);
 800290e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 808f 	bne.w	8002a34 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002916:	f3ef 8310 	mrs	r3, PRIMASK
 800291a:	61bb      	str	r3, [r7, #24]
  return(result);
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d105      	bne.n	800292e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002922:	f3ef 8311 	mrs	r3, BASEPRI
 8002926:	617b      	str	r3, [r7, #20]
  return(result);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <osThreadNew+0x3e>
 800292e:	4b44      	ldr	r3, [pc, #272]	@ (8002a40 <osThreadNew+0x148>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d07e      	beq.n	8002a34 <osThreadNew+0x13c>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d07b      	beq.n	8002a34 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800293c:	2380      	movs	r3, #128	@ 0x80
 800293e:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002940:	2318      	movs	r3, #24
 8002942:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8002948:	f04f 33ff 	mov.w	r3, #4294967295
 800294c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d045      	beq.n	80029e0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <osThreadNew+0x6a>
        name = attr->name;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d008      	beq.n	8002988 <osThreadNew+0x90>
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	2b38      	cmp	r3, #56	@ 0x38
 800297a:	d805      	bhi.n	8002988 <osThreadNew+0x90>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <osThreadNew+0x94>
        return (NULL);
 8002988:	2300      	movs	r3, #0
 800298a:	e054      	b.n	8002a36 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d003      	beq.n	800299c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	089b      	lsrs	r3, r3, #2
 800299a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00e      	beq.n	80029c2 <osThreadNew+0xca>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2ba7      	cmp	r3, #167	@ 0xa7
 80029aa:	d90a      	bls.n	80029c2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <osThreadNew+0xca>
        mem = 1;
 80029bc:	2301      	movs	r3, #1
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	e010      	b.n	80029e4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d10c      	bne.n	80029e4 <osThreadNew+0xec>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d108      	bne.n	80029e4 <osThreadNew+0xec>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d104      	bne.n	80029e4 <osThreadNew+0xec>
          mem = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
 80029de:	e001      	b.n	80029e4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d110      	bne.n	8002a0c <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029f2:	9202      	str	r2, [sp, #8]
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f001 f9c3 	bl	8003d8c <xTaskCreateStatic>
 8002a06:	4603      	mov	r3, r0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	e013      	b.n	8002a34 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002a0c:	6a3b      	ldr	r3, [r7, #32]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d110      	bne.n	8002a34 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	f107 0310 	add.w	r3, r7, #16
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f001 fa17 	bl	8003e58 <xTaskCreate>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <osThreadNew+0x13c>
          hTask = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a34:	693b      	ldr	r3, [r7, #16]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3730      	adds	r7, #48	@ 0x30
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200000d4 	.word	0x200000d4

08002a44 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a4c:	f3ef 8305 	mrs	r3, IPSR
 8002a50:	613b      	str	r3, [r7, #16]
  return(result);
 8002a52:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10f      	bne.n	8002a78 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a58:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a64:	f3ef 8311 	mrs	r3, BASEPRI
 8002a68:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d007      	beq.n	8002a80 <osDelay+0x3c>
 8002a70:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <osDelay+0x58>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d103      	bne.n	8002a80 <osDelay+0x3c>
    stat = osErrorISR;
 8002a78:	f06f 0305 	mvn.w	r3, #5
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	e007      	b.n	8002a90 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f001 fb44 	bl	8004118 <vTaskDelay>
    }
  }

  return (stat);
 8002a90:	697b      	ldr	r3, [r7, #20]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200000d4 	.word	0x200000d4

08002aa0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4a07      	ldr	r2, [pc, #28]	@ (8002acc <vApplicationGetIdleTaskMemory+0x2c>)
 8002ab0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4a06      	ldr	r2, [pc, #24]	@ (8002ad0 <vApplicationGetIdleTaskMemory+0x30>)
 8002ab6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	@ 0x80
 8002abc:	601a      	str	r2, [r3, #0]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	200000d8 	.word	0x200000d8
 8002ad0:	20000180 	.word	0x20000180

08002ad4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ae4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	4a06      	ldr	r2, [pc, #24]	@ (8002b04 <vApplicationGetTimerTaskMemory+0x30>)
 8002aea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002af2:	601a      	str	r2, [r3, #0]
}
 8002af4:	bf00      	nop
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	20000380 	.word	0x20000380
 8002b04:	20000428 	.word	0x20000428

08002b08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f103 0208 	add.w	r2, r3, #8
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f103 0208 	add.w	r2, r3, #8
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f103 0208 	add.w	r2, r3, #8
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr

08002b48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b56:	bf00      	nop
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b62:	b480      	push	{r7}
 8002b64:	b085      	sub	sp, #20
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1c5a      	adds	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	601a      	str	r2, [r3, #0]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d103      	bne.n	8002bca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	e00c      	b.n	8002be4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3308      	adds	r3, #8
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	e002      	b.n	8002bd8 <vListInsert+0x2e>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d2f6      	bcs.n	8002bd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685a      	ldr	r2, [r3, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	1c5a      	adds	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	601a      	str	r2, [r3, #0]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6852      	ldr	r2, [r2, #4]
 8002c3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d103      	bne.n	8002c50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	1e5a      	subs	r2, r3, #1
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10d      	bne.n	8002ca0 <xQueueGenericReset+0x30>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c88:	b672      	cpsid	i
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	b662      	cpsie	i
 8002c98:	60bb      	str	r3, [r7, #8]
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8002ca0:	f002 fe94 	bl	80059cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	68f9      	ldr	r1, [r7, #12]
 8002cd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	441a      	add	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	22ff      	movs	r2, #255	@ 0xff
 8002ce4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	22ff      	movs	r2, #255	@ 0xff
 8002cec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d114      	bne.n	8002d20 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01a      	beq.n	8002d34 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3310      	adds	r3, #16
 8002d02:	4618      	mov	r0, r3
 8002d04:	f001 fcec 	bl	80046e0 <xTaskRemoveFromEventList>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d012      	beq.n	8002d34 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d44 <xQueueGenericReset+0xd4>)
 8002d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	f3bf 8f6f 	isb	sy
 8002d1e:	e009      	b.n	8002d34 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	3310      	adds	r3, #16
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff feef 	bl	8002b08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	3324      	adds	r3, #36	@ 0x24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff feea 	bl	8002b08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d34:	f002 fe80 	bl	8005a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d38:	2301      	movs	r3, #1
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08e      	sub	sp, #56	@ 0x38
 8002d4c:	af02      	add	r7, sp, #8
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
 8002d54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8002d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d60:	b672      	cpsid	i
 8002d62:	f383 8811 	msr	BASEPRI, r3
 8002d66:	f3bf 8f6f 	isb	sy
 8002d6a:	f3bf 8f4f 	dsb	sy
 8002d6e:	b662      	cpsie	i
 8002d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	e7fd      	b.n	8002d74 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10d      	bne.n	8002d9a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8002d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d82:	b672      	cpsid	i
 8002d84:	f383 8811 	msr	BASEPRI, r3
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	f3bf 8f4f 	dsb	sy
 8002d90:	b662      	cpsie	i
 8002d92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <xQueueGenericCreateStatic+0x5e>
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <xQueueGenericCreateStatic+0x62>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <xQueueGenericCreateStatic+0x64>
 8002daa:	2300      	movs	r3, #0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10d      	bne.n	8002dcc <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002db4:	b672      	cpsid	i
 8002db6:	f383 8811 	msr	BASEPRI, r3
 8002dba:	f3bf 8f6f 	isb	sy
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	b662      	cpsie	i
 8002dc4:	623b      	str	r3, [r7, #32]
}
 8002dc6:	bf00      	nop
 8002dc8:	bf00      	nop
 8002dca:	e7fd      	b.n	8002dc8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <xQueueGenericCreateStatic+0x90>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <xQueueGenericCreateStatic+0x94>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <xQueueGenericCreateStatic+0x96>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10d      	bne.n	8002dfe <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8002de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de6:	b672      	cpsid	i
 8002de8:	f383 8811 	msr	BASEPRI, r3
 8002dec:	f3bf 8f6f 	isb	sy
 8002df0:	f3bf 8f4f 	dsb	sy
 8002df4:	b662      	cpsie	i
 8002df6:	61fb      	str	r3, [r7, #28]
}
 8002df8:	bf00      	nop
 8002dfa:	bf00      	nop
 8002dfc:	e7fd      	b.n	8002dfa <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dfe:	2350      	movs	r3, #80	@ 0x50
 8002e00:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2b50      	cmp	r3, #80	@ 0x50
 8002e06:	d00d      	beq.n	8002e24 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e0c:	b672      	cpsid	i
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	b662      	cpsie	i
 8002e1c:	61bb      	str	r3, [r7, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f805 	bl	8002e56 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3730      	adds	r7, #48	@ 0x30
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e002      	b.n	8002e78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e84:	2101      	movs	r1, #1
 8002e86:	69b8      	ldr	r0, [r7, #24]
 8002e88:	f7ff fef2 	bl	8002c70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	@ 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10d      	bne.n	8002ed4 <xQueueGenericSend+0x38>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	b672      	cpsid	i
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	b662      	cpsie	i
 8002ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ece:	bf00      	nop
 8002ed0:	bf00      	nop
 8002ed2:	e7fd      	b.n	8002ed0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x46>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSend+0x4a>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSend+0x4c>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d10d      	bne.n	8002f08 <xQueueGenericSend+0x6c>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	b672      	cpsid	i
 8002ef2:	f383 8811 	msr	BASEPRI, r3
 8002ef6:	f3bf 8f6f 	isb	sy
 8002efa:	f3bf 8f4f 	dsb	sy
 8002efe:	b662      	cpsie	i
 8002f00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f02:	bf00      	nop
 8002f04:	bf00      	nop
 8002f06:	e7fd      	b.n	8002f04 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d103      	bne.n	8002f16 <xQueueGenericSend+0x7a>
 8002f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <xQueueGenericSend+0x7e>
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <xQueueGenericSend+0x80>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <xQueueGenericSend+0xa0>
	__asm volatile
 8002f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f24:	b672      	cpsid	i
 8002f26:	f383 8811 	msr	BASEPRI, r3
 8002f2a:	f3bf 8f6f 	isb	sy
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	b662      	cpsie	i
 8002f34:	623b      	str	r3, [r7, #32]
}
 8002f36:	bf00      	nop
 8002f38:	bf00      	nop
 8002f3a:	e7fd      	b.n	8002f38 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f3c:	f001 fdae 	bl	8004a9c <xTaskGetSchedulerState>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <xQueueGenericSend+0xb0>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <xQueueGenericSend+0xb4>
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e000      	b.n	8002f52 <xQueueGenericSend+0xb6>
 8002f50:	2300      	movs	r3, #0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <xQueueGenericSend+0xd6>
	__asm volatile
 8002f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f5a:	b672      	cpsid	i
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
 8002f68:	b662      	cpsie	i
 8002f6a:	61fb      	str	r3, [r7, #28]
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	e7fd      	b.n	8002f6e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f72:	f002 fd2b 	bl	80059cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <xQueueGenericSend+0xec>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d129      	bne.n	8002fdc <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f8e:	f000 fa1b 	bl	80033c8 <prvCopyDataToQueue>
 8002f92:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d010      	beq.n	8002fbe <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	3324      	adds	r3, #36	@ 0x24
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f001 fb9d 	bl	80046e0 <xTaskRemoveFromEventList>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002fac:	4b3f      	ldr	r3, [pc, #252]	@ (80030ac <xQueueGenericSend+0x210>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
 8002fbc:	e00a      	b.n	8002fd4 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d007      	beq.n	8002fd4 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fc4:	4b39      	ldr	r3, [pc, #228]	@ (80030ac <xQueueGenericSend+0x210>)
 8002fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fca:	601a      	str	r2, [r3, #0]
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fd4:	f002 fd30 	bl	8005a38 <vPortExitCritical>
				return pdPASS;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e063      	b.n	80030a4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d103      	bne.n	8002fea <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fe2:	f002 fd29 	bl	8005a38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	e05c      	b.n	80030a4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d106      	bne.n	8002ffe <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fbd9 	bl	80047ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ffe:	f002 fd1b 	bl	8005a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003002:	f001 f935 	bl	8004270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003006:	f002 fce1 	bl	80059cc <vPortEnterCritical>
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003010:	b25b      	sxtb	r3, r3
 8003012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003016:	d103      	bne.n	8003020 <xQueueGenericSend+0x184>
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003026:	b25b      	sxtb	r3, r3
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d103      	bne.n	8003036 <xQueueGenericSend+0x19a>
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003036:	f002 fcff 	bl	8005a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800303a:	1d3a      	adds	r2, r7, #4
 800303c:	f107 0314 	add.w	r3, r7, #20
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f001 fbc8 	bl	80047d8 <xTaskCheckForTimeOut>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d124      	bne.n	8003098 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800304e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003050:	f000 fab2 	bl	80035b8 <prvIsQueueFull>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d018      	beq.n	800308c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	3310      	adds	r3, #16
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f001 fae6 	bl	8004634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003068:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800306a:	f000 fa3d 	bl	80034e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800306e:	f001 f90d 	bl	800428c <xTaskResumeAll>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	f47f af7c 	bne.w	8002f72 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800307a:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <xQueueGenericSend+0x210>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	e772      	b.n	8002f72 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800308c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800308e:	f000 fa2b 	bl	80034e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003092:	f001 f8fb 	bl	800428c <xTaskResumeAll>
 8003096:	e76c      	b.n	8002f72 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003098:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800309a:	f000 fa25 	bl	80034e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800309e:	f001 f8f5 	bl	800428c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80030a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3738      	adds	r7, #56	@ 0x38
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	e000ed04 	.word	0xe000ed04

080030b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08e      	sub	sp, #56	@ 0x38
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
 80030bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10d      	bne.n	80030e4 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80030c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030cc:	b672      	cpsid	i
 80030ce:	f383 8811 	msr	BASEPRI, r3
 80030d2:	f3bf 8f6f 	isb	sy
 80030d6:	f3bf 8f4f 	dsb	sy
 80030da:	b662      	cpsie	i
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030de:	bf00      	nop
 80030e0:	bf00      	nop
 80030e2:	e7fd      	b.n	80030e0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <xQueueGenericSendFromISR+0x42>
 80030ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <xQueueGenericSendFromISR+0x46>
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <xQueueGenericSendFromISR+0x48>
 80030f6:	2300      	movs	r3, #0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80030fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003100:	b672      	cpsid	i
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	b662      	cpsie	i
 8003110:	623b      	str	r3, [r7, #32]
}
 8003112:	bf00      	nop
 8003114:	bf00      	nop
 8003116:	e7fd      	b.n	8003114 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d103      	bne.n	8003126 <xQueueGenericSendFromISR+0x76>
 800311e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <xQueueGenericSendFromISR+0x7a>
 8003126:	2301      	movs	r3, #1
 8003128:	e000      	b.n	800312c <xQueueGenericSendFromISR+0x7c>
 800312a:	2300      	movs	r3, #0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10d      	bne.n	800314c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8003130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003134:	b672      	cpsid	i
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	b662      	cpsie	i
 8003144:	61fb      	str	r3, [r7, #28]
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800314c:	f002 fd26 	bl	8005b9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003150:	f3ef 8211 	mrs	r2, BASEPRI
 8003154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003158:	b672      	cpsid	i
 800315a:	f383 8811 	msr	BASEPRI, r3
 800315e:	f3bf 8f6f 	isb	sy
 8003162:	f3bf 8f4f 	dsb	sy
 8003166:	b662      	cpsie	i
 8003168:	61ba      	str	r2, [r7, #24]
 800316a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800316c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800316e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003172:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003178:	429a      	cmp	r2, r3
 800317a:	d302      	bcc.n	8003182 <xQueueGenericSendFromISR+0xd2>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d12c      	bne.n	80031dc <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003184:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	68b9      	ldr	r1, [r7, #8]
 8003190:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003192:	f000 f919 	bl	80033c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003196:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800319a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319e:	d112      	bne.n	80031c6 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d016      	beq.n	80031d6 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031aa:	3324      	adds	r3, #36	@ 0x24
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fa97 	bl	80046e0 <xTaskRemoveFromEventList>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00e      	beq.n	80031d6 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e007      	b.n	80031d6 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031c6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80031ca:	3301      	adds	r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	b25a      	sxtb	r2, r3
 80031d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80031d6:	2301      	movs	r3, #1
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80031da:	e001      	b.n	80031e0 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031dc:	2300      	movs	r3, #0
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
 80031e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031ea:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3738      	adds	r7, #56	@ 0x38
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
	...

080031f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08c      	sub	sp, #48	@ 0x30
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003204:	2300      	movs	r3, #0
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800320c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10d      	bne.n	800322e <xQueueReceive+0x36>
	__asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003216:	b672      	cpsid	i
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	b662      	cpsie	i
 8003226:	623b      	str	r3, [r7, #32]
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	e7fd      	b.n	800322a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <xQueueReceive+0x44>
 8003234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <xQueueReceive+0x48>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <xQueueReceive+0x4a>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10d      	bne.n	8003262 <xQueueReceive+0x6a>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324a:	b672      	cpsid	i
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	b662      	cpsie	i
 800325a:	61fb      	str	r3, [r7, #28]
}
 800325c:	bf00      	nop
 800325e:	bf00      	nop
 8003260:	e7fd      	b.n	800325e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003262:	f001 fc1b 	bl	8004a9c <xTaskGetSchedulerState>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <xQueueReceive+0x7a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <xQueueReceive+0x7e>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <xQueueReceive+0x80>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10d      	bne.n	8003298 <xQueueReceive+0xa0>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003280:	b672      	cpsid	i
 8003282:	f383 8811 	msr	BASEPRI, r3
 8003286:	f3bf 8f6f 	isb	sy
 800328a:	f3bf 8f4f 	dsb	sy
 800328e:	b662      	cpsie	i
 8003290:	61bb      	str	r3, [r7, #24]
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	e7fd      	b.n	8003294 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003298:	f002 fb98 	bl	80059cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01f      	beq.n	80032e8 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032a8:	68b9      	ldr	r1, [r7, #8]
 80032aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032ac:	f000 f8f6 	bl	800349c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	1e5a      	subs	r2, r3, #1
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00f      	beq.n	80032e0 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c2:	3310      	adds	r3, #16
 80032c4:	4618      	mov	r0, r3
 80032c6:	f001 fa0b 	bl	80046e0 <xTaskRemoveFromEventList>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032d0:	4b3c      	ldr	r3, [pc, #240]	@ (80033c4 <xQueueReceive+0x1cc>)
 80032d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032e0:	f002 fbaa 	bl	8005a38 <vPortExitCritical>
				return pdPASS;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e069      	b.n	80033bc <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032ee:	f002 fba3 	bl	8005a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e062      	b.n	80033bc <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d106      	bne.n	800330a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032fc:	f107 0310 	add.w	r3, r7, #16
 8003300:	4618      	mov	r0, r3
 8003302:	f001 fa53 	bl	80047ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003306:	2301      	movs	r3, #1
 8003308:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800330a:	f002 fb95 	bl	8005a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800330e:	f000 ffaf 	bl	8004270 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003312:	f002 fb5b 	bl	80059cc <vPortEnterCritical>
 8003316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800331c:	b25b      	sxtb	r3, r3
 800331e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003322:	d103      	bne.n	800332c <xQueueReceive+0x134>
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003332:	b25b      	sxtb	r3, r3
 8003334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003338:	d103      	bne.n	8003342 <xQueueReceive+0x14a>
 800333a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003342:	f002 fb79 	bl	8005a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003346:	1d3a      	adds	r2, r7, #4
 8003348:	f107 0310 	add.w	r3, r7, #16
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f001 fa42 	bl	80047d8 <xTaskCheckForTimeOut>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d123      	bne.n	80033a2 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800335a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800335c:	f000 f916 	bl	800358c <prvIsQueueEmpty>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d017      	beq.n	8003396 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003368:	3324      	adds	r3, #36	@ 0x24
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4611      	mov	r1, r2
 800336e:	4618      	mov	r0, r3
 8003370:	f001 f960 	bl	8004634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003374:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003376:	f000 f8b7 	bl	80034e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800337a:	f000 ff87 	bl	800428c <xTaskResumeAll>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d189      	bne.n	8003298 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8003384:	4b0f      	ldr	r3, [pc, #60]	@ (80033c4 <xQueueReceive+0x1cc>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	e780      	b.n	8003298 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003396:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003398:	f000 f8a6 	bl	80034e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800339c:	f000 ff76 	bl	800428c <xTaskResumeAll>
 80033a0:	e77a      	b.n	8003298 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80033a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033a4:	f000 f8a0 	bl	80034e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033a8:	f000 ff70 	bl	800428c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033ae:	f000 f8ed 	bl	800358c <prvIsQueueEmpty>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f43f af6f 	beq.w	8003298 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80033ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3730      	adds	r7, #48	@ 0x30
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	e000ed04 	.word	0xe000ed04

080033c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d14d      	bne.n	800348a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f001 fb70 	bl	8004ad8 <xTaskPriorityDisinherit>
 80033f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	609a      	str	r2, [r3, #8]
 8003400:	e043      	b.n	800348a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d119      	bne.n	800343c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6858      	ldr	r0, [r3, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	461a      	mov	r2, r3
 8003412:	68b9      	ldr	r1, [r7, #8]
 8003414:	f002 fe76 	bl	8006104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003420:	441a      	add	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	429a      	cmp	r2, r3
 8003430:	d32b      	bcc.n	800348a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	605a      	str	r2, [r3, #4]
 800343a:	e026      	b.n	800348a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	68d8      	ldr	r0, [r3, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	461a      	mov	r2, r3
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	f002 fe5c 	bl	8006104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	425b      	negs	r3, r3
 8003456:	441a      	add	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	429a      	cmp	r2, r3
 8003466:	d207      	bcs.n	8003478 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	425b      	negs	r3, r3
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d105      	bne.n	800348a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d002      	beq.n	800348a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	3b01      	subs	r3, #1
 8003488:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003492:	697b      	ldr	r3, [r7, #20]
}
 8003494:	4618      	mov	r0, r3
 8003496:	3718      	adds	r7, #24
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d018      	beq.n	80034e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68da      	ldr	r2, [r3, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	441a      	add	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d303      	bcc.n	80034d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68d9      	ldr	r1, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	461a      	mov	r2, r3
 80034da:	6838      	ldr	r0, [r7, #0]
 80034dc:	f002 fe12 	bl	8006104 <memcpy>
	}
}
 80034e0:	bf00      	nop
 80034e2:	3708      	adds	r7, #8
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034f0:	f002 fa6c 	bl	80059cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034fc:	e011      	b.n	8003522 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d012      	beq.n	800352c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3324      	adds	r3, #36	@ 0x24
 800350a:	4618      	mov	r0, r3
 800350c:	f001 f8e8 	bl	80046e0 <xTaskRemoveFromEventList>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d001      	beq.n	800351a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003516:	f001 f9c7 	bl	80048a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800351a:	7bfb      	ldrb	r3, [r7, #15]
 800351c:	3b01      	subs	r3, #1
 800351e:	b2db      	uxtb	r3, r3
 8003520:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003526:	2b00      	cmp	r3, #0
 8003528:	dce9      	bgt.n	80034fe <prvUnlockQueue+0x16>
 800352a:	e000      	b.n	800352e <prvUnlockQueue+0x46>
					break;
 800352c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	22ff      	movs	r2, #255	@ 0xff
 8003532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003536:	f002 fa7f 	bl	8005a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800353a:	f002 fa47 	bl	80059cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003544:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003546:	e011      	b.n	800356c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d012      	beq.n	8003576 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3310      	adds	r3, #16
 8003554:	4618      	mov	r0, r3
 8003556:	f001 f8c3 	bl	80046e0 <xTaskRemoveFromEventList>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003560:	f001 f9a2 	bl	80048a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003564:	7bbb      	ldrb	r3, [r7, #14]
 8003566:	3b01      	subs	r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800356c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003570:	2b00      	cmp	r3, #0
 8003572:	dce9      	bgt.n	8003548 <prvUnlockQueue+0x60>
 8003574:	e000      	b.n	8003578 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003576:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	22ff      	movs	r2, #255	@ 0xff
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003580:	f002 fa5a 	bl	8005a38 <vPortExitCritical>
}
 8003584:	bf00      	nop
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003594:	f002 fa1a 	bl	80059cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e001      	b.n	80035aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035aa:	f002 fa45 	bl	8005a38 <vPortExitCritical>

	return xReturn;
 80035ae:	68fb      	ldr	r3, [r7, #12]
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035c0:	f002 fa04 	bl	80059cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d102      	bne.n	80035d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	e001      	b.n	80035da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035da:	f002 fa2d 	bl	8005a38 <vPortExitCritical>

	return xReturn;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	e014      	b.n	8003622 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035f8:	4a0f      	ldr	r2, [pc, #60]	@ (8003638 <vQueueAddToRegistry+0x50>)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003604:	490c      	ldr	r1, [pc, #48]	@ (8003638 <vQueueAddToRegistry+0x50>)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800360e:	4a0a      	ldr	r2, [pc, #40]	@ (8003638 <vQueueAddToRegistry+0x50>)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	4413      	add	r3, r2
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800361a:	e006      	b.n	800362a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	3301      	adds	r3, #1
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2b07      	cmp	r3, #7
 8003626:	d9e7      	bls.n	80035f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003628:	bf00      	nop
 800362a:	bf00      	nop
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	20000828 	.word	0x20000828

0800363c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800364c:	f002 f9be 	bl	80059cc <vPortEnterCritical>
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003656:	b25b      	sxtb	r3, r3
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d103      	bne.n	8003666 <vQueueWaitForMessageRestricted+0x2a>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800366c:	b25b      	sxtb	r3, r3
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d103      	bne.n	800367c <vQueueWaitForMessageRestricted+0x40>
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800367c:	f002 f9dc 	bl	8005a38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003684:	2b00      	cmp	r3, #0
 8003686:	d106      	bne.n	8003696 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3324      	adds	r3, #36	@ 0x24
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	68b9      	ldr	r1, [r7, #8]
 8003690:	4618      	mov	r0, r3
 8003692:	f000 fff7 	bl	8004684 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003696:	6978      	ldr	r0, [r7, #20]
 8003698:	f7ff ff26 	bl	80034e8 <prvUnlockQueue>
	}
 800369c:	bf00      	nop
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	@ 0x30
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d113      	bne.n	80036de <xStreamBufferGenericCreate+0x3a>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80036b6:	2301      	movs	r3, #1
 80036b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d821      	bhi.n	8003706 <xStreamBufferGenericCreate+0x62>
	__asm volatile
 80036c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c6:	b672      	cpsid	i
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	b662      	cpsie	i
 80036d6:	61fb      	str	r3, [r7, #28]
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	e7fd      	b.n	80036da <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80036de:	2300      	movs	r3, #0
 80036e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10d      	bne.n	8003706 <xStreamBufferGenericCreate+0x62>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ee:	b672      	cpsid	i
 80036f0:	f383 8811 	msr	BASEPRI, r3
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	b662      	cpsie	i
 80036fe:	61bb      	str	r3, [r7, #24]
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	e7fd      	b.n	8003702 <xStreamBufferGenericCreate+0x5e>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90d      	bls.n	800372a <xStreamBufferGenericCreate+0x86>
	__asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003712:	b672      	cpsid	i
 8003714:	f383 8811 	msr	BASEPRI, r3
 8003718:	f3bf 8f6f 	isb	sy
 800371c:	f3bf 8f4f 	dsb	sy
 8003720:	b662      	cpsie	i
 8003722:	617b      	str	r3, [r7, #20]
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xStreamBufferGenericCreate+0x82>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <xStreamBufferGenericCreate+0x90>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8003730:	2301      	movs	r3, #1
 8003732:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3324      	adds	r3, #36	@ 0x24
 800373e:	4618      	mov	r0, r3
 8003740:	f002 fa72 	bl	8005c28 <pvPortMalloc>
 8003744:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <xStreamBufferGenericCreate+0xbe>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8003752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003756:	9300      	str	r3, [sp, #0]
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	6a38      	ldr	r0, [r7, #32]
 800375e:	f000 fadf 	bl	8003d20 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8003762:	6a3b      	ldr	r3, [r7, #32]
	}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	@ 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10d      	bne.n	800379a <xStreamBufferSpacesAvailable+0x2e>
	__asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	b672      	cpsid	i
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	b662      	cpsie	i
 8003792:	60fb      	str	r3, [r7, #12]
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	e7fd      	b.n	8003796 <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4413      	add	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	697a      	ldr	r2, [r7, #20]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d304      	bcc.n	80037ca <xStreamBufferSpacesAvailable+0x5e>
	{
		xSpace -= pxStreamBuffer->xLength;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80037ca:	697b      	ldr	r3, [r7, #20]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	371c      	adds	r7, #28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b090      	sub	sp, #64	@ 0x40
 80037dc:	af02      	add	r7, sp, #8
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10d      	bne.n	8003810 <xStreamBufferSendFromISR+0x38>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	b672      	cpsid	i
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	b662      	cpsie	i
 8003808:	623b      	str	r3, [r7, #32]
}
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	e7fd      	b.n	800380c <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 8003810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10d      	bne.n	8003832 <xStreamBufferSendFromISR+0x5a>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381a:	b672      	cpsid	i
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	b662      	cpsie	i
 800382a:	61fb      	str	r3, [r7, #28]
}
 800382c:	bf00      	nop
 800382e:	bf00      	nop
 8003830:	e7fd      	b.n	800382e <xStreamBufferSendFromISR+0x56>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	7f1b      	ldrb	r3, [r3, #28]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d002      	beq.n	8003844 <xStreamBufferSendFromISR+0x6c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800383e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003840:	3304      	adds	r3, #4
 8003842:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003846:	f7ff ff91 	bl	800376c <xStreamBufferSpacesAvailable>
 800384a:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800384c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800384e:	9300      	str	r3, [sp, #0]
 8003850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003858:	f000 f837 	bl	80038ca <prvWriteMessageToBuffer>
 800385c:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 800385e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	d02d      	beq.n	80038c0 <xStreamBufferSendFromISR+0xe8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003864:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003866:	f000 fa3b 	bl	8003ce0 <prvBytesInBuffer>
 800386a:	4602      	mov	r2, r0
 800386c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	429a      	cmp	r2, r3
 8003872:	d325      	bcc.n	80038c0 <xStreamBufferSendFromISR+0xe8>
	__asm volatile
 8003874:	f3ef 8211 	mrs	r2, BASEPRI
 8003878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387c:	b672      	cpsid	i
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	b662      	cpsie	i
 800388c:	61ba      	str	r2, [r7, #24]
 800388e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003890:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <xStreamBufferSendFromISR+0xdc>
 800389c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389e:	6918      	ldr	r0, [r3, #16]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	2300      	movs	r3, #0
 80038a6:	2200      	movs	r2, #0
 80038a8:	2100      	movs	r1, #0
 80038aa:	f001 fab1 	bl	8004e10 <xTaskGenericNotifyFromISR>
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	2200      	movs	r2, #0
 80038b2:	611a      	str	r2, [r3, #16]
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f383 8811 	msr	BASEPRI, r3
}
 80038be:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3738      	adds	r7, #56	@ 0x38
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d102      	bne.n	80038e4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e01d      	b.n	8003920 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	7f1b      	ldrb	r3, [r3, #28]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d108      	bne.n	8003902 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	4293      	cmp	r3, r2
 80038fa:	bf28      	it	cs
 80038fc:	4613      	movcs	r3, r2
 80038fe:	607b      	str	r3, [r7, #4]
 8003900:	e00e      	b.n	8003920 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	429a      	cmp	r2, r3
 8003908:	d308      	bcc.n	800391c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800390a:	2301      	movs	r3, #1
 800390c:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	2204      	movs	r2, #4
 8003912:	4619      	mov	r1, r3
 8003914:	68f8      	ldr	r0, [r7, #12]
 8003916:	f000 f8e5 	bl	8003ae4 <prvWriteBytesToBuffer>
 800391a:	e001      	b.n	8003920 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d007      	beq.n	8003936 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	461a      	mov	r2, r3
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f8d9 	bl	8003ae4 <prvWriteBytesToBuffer>
 8003932:	6138      	str	r0, [r7, #16]
 8003934:	e001      	b.n	800393a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800393a:	693b      	ldr	r3, [r7, #16]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	@ 0x38
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8003956:	2300      	movs	r3, #0
 8003958:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <xStreamBufferReceive+0x38>
	__asm volatile
 8003960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003964:	b672      	cpsid	i
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	b662      	cpsie	i
 8003974:	61fb      	str	r3, [r7, #28]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10d      	bne.n	800399e <xStreamBufferReceive+0x5a>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003986:	b672      	cpsid	i
 8003988:	f383 8811 	msr	BASEPRI, r3
 800398c:	f3bf 8f6f 	isb	sy
 8003990:	f3bf 8f4f 	dsb	sy
 8003994:	b662      	cpsie	i
 8003996:	61bb      	str	r3, [r7, #24]
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	e7fd      	b.n	800399a <xStreamBufferReceive+0x56>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	7f1b      	ldrb	r3, [r3, #28]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <xStreamBufferReceive+0x6c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80039aa:	2304      	movs	r3, #4
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80039ae:	e001      	b.n	80039b4 <xStreamBufferReceive+0x70>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d037      	beq.n	8003a2a <xStreamBufferReceive+0xe6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80039ba:	f002 f807 	bl	80059cc <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80039be:	6a38      	ldr	r0, [r7, #32]
 80039c0:	f000 f98e 	bl	8003ce0 <prvBytesInBuffer>
 80039c4:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80039c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d819      	bhi.n	8003a02 <xStreamBufferReceive+0xbe>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80039ce:	2000      	movs	r0, #0
 80039d0:	f001 fb0c 	bl	8004fec <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00d      	beq.n	80039f8 <xStreamBufferReceive+0xb4>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e0:	b672      	cpsid	i
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	b662      	cpsie	i
 80039f0:	617b      	str	r3, [r7, #20]
}
 80039f2:	bf00      	nop
 80039f4:	bf00      	nop
 80039f6:	e7fd      	b.n	80039f4 <xStreamBufferReceive+0xb0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80039f8:	f001 f840 	bl	8004a7c <xTaskGetCurrentTaskHandle>
 80039fc:	4602      	mov	r2, r0
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003a02:	f002 f819 	bl	8005a38 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8003a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d811      	bhi.n	8003a32 <xStreamBufferReceive+0xee>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2200      	movs	r2, #0
 8003a12:	2100      	movs	r1, #0
 8003a14:	2000      	movs	r0, #0
 8003a16:	f001 f8d3 	bl	8004bc0 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003a20:	6a38      	ldr	r0, [r7, #32]
 8003a22:	f000 f95d 	bl	8003ce0 <prvBytesInBuffer>
 8003a26:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003a28:	e003      	b.n	8003a32 <xStreamBufferReceive+0xee>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003a2a:	6a38      	ldr	r0, [r7, #32]
 8003a2c:	f000 f958 	bl	8003ce0 <prvBytesInBuffer>
 8003a30:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8003a32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d91d      	bls.n	8003a76 <xStreamBufferReceive+0x132>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	6a38      	ldr	r0, [r7, #32]
 8003a46:	f000 f81b 	bl	8003a80 <prvReadMessageFromBuffer>
 8003a4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8003a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d011      	beq.n	8003a76 <xStreamBufferReceive+0x132>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8003a52:	f000 fc0d 	bl	8004270 <vTaskSuspendAll>
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <xStreamBufferReceive+0x12e>
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	6958      	ldr	r0, [r3, #20]
 8003a62:	2300      	movs	r3, #0
 8003a64:	2200      	movs	r2, #0
 8003a66:	2100      	movs	r1, #0
 8003a68:	f001 f90a 	bl	8004c80 <xTaskGenericNotify>
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	615a      	str	r2, [r3, #20]
 8003a72:	f000 fc0b 	bl	800428c <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8003a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3730      	adds	r7, #48	@ 0x30
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8003a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d019      	beq.n	8003ac8 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8003a9a:	f107 0110 	add.w	r1, r7, #16
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 f899 	bl	8003bda <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8003ab4:	69fa      	ldr	r2, [r7, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d907      	bls.n	8003acc <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
 8003ac6:	e001      	b.n	8003acc <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 f881 	bl	8003bda <prvReadBytesFromBuffer>
 8003ad8:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8003ada:	697b      	ldr	r3, [r7, #20]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b08a      	sub	sp, #40	@ 0x28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10d      	bne.n	8003b12 <prvWriteBytesToBuffer+0x2e>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afa:	b672      	cpsid	i
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	b662      	cpsie	i
 8003b0a:	61fb      	str	r3, [r7, #28]
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	e7fd      	b.n	8003b0e <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	689a      	ldr	r2, [r3, #8]
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4293      	cmp	r3, r2
 8003b24:	bf28      	it	cs
 8003b26:	4613      	movcs	r3, r2
 8003b28:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8003b2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	441a      	add	r2, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d90d      	bls.n	8003b54 <prvWriteBytesToBuffer+0x70>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3c:	b672      	cpsid	i
 8003b3e:	f383 8811 	msr	BASEPRI, r3
 8003b42:	f3bf 8f6f 	isb	sy
 8003b46:	f3bf 8f4f 	dsb	sy
 8003b4a:	b662      	cpsie	i
 8003b4c:	61bb      	str	r3, [r7, #24]
}
 8003b4e:	bf00      	nop
 8003b50:	bf00      	nop
 8003b52:	e7fd      	b.n	8003b50 <prvWriteBytesToBuffer+0x6c>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	699a      	ldr	r2, [r3, #24]
 8003b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b5a:	4413      	add	r3, r2
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f002 facf 	bl	8006104 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d91f      	bls.n	8003bae <prvWriteBytesToBuffer+0xca>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d90d      	bls.n	8003b98 <prvWriteBytesToBuffer+0xb4>
	__asm volatile
 8003b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b80:	b672      	cpsid	i
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	b662      	cpsie	i
 8003b90:	617b      	str	r3, [r7, #20]
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <prvWriteBytesToBuffer+0xb0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6998      	ldr	r0, [r3, #24]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	18d1      	adds	r1, r2, r3
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	461a      	mov	r2, r3
 8003baa:	f002 faab 	bl	8006104 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8003bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d304      	bcc.n	8003bca <prvWriteBytesToBuffer+0xe6>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bc6:	1ad3      	subs	r3, r2, r3
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bce:	605a      	str	r2, [r3, #4]

	return xCount;
 8003bd0:	687b      	ldr	r3, [r7, #4]
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3728      	adds	r7, #40	@ 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b08a      	sub	sp, #40	@ 0x28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	4293      	cmp	r3, r2
 8003bee:	bf28      	it	cs
 8003bf0:	4613      	movcs	r3, r2
 8003bf2:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d06d      	beq.n	8003cd6 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	bf28      	it	cs
 8003c0e:	4613      	movcs	r3, r2
 8003c10:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d90d      	bls.n	8003c36 <prvReadBytesFromBuffer+0x5c>
	__asm volatile
 8003c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1e:	b672      	cpsid	i
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	b662      	cpsie	i
 8003c2e:	61bb      	str	r3, [r7, #24]
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	e7fd      	b.n	8003c32 <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8003c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	441a      	add	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d90d      	bls.n	8003c60 <prvReadBytesFromBuffer+0x86>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c48:	b672      	cpsid	i
 8003c4a:	f383 8811 	msr	BASEPRI, r3
 8003c4e:	f3bf 8f6f 	isb	sy
 8003c52:	f3bf 8f4f 	dsb	sy
 8003c56:	b662      	cpsie	i
 8003c58:	617b      	str	r3, [r7, #20]
}
 8003c5a:	bf00      	nop
 8003c5c:	bf00      	nop
 8003c5e:	e7fd      	b.n	8003c5c <prvReadBytesFromBuffer+0x82>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	699a      	ldr	r2, [r3, #24]
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	4413      	add	r3, r2
 8003c68:	69fa      	ldr	r2, [r7, #28]
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	68b8      	ldr	r0, [r7, #8]
 8003c6e:	f002 fa49 	bl	8006104 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8003c72:	6a3a      	ldr	r2, [r7, #32]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d91c      	bls.n	8003cb4 <prvReadBytesFromBuffer+0xda>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8003c7a:	6a3a      	ldr	r2, [r7, #32]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d90d      	bls.n	8003c9e <prvReadBytesFromBuffer+0xc4>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c86:	b672      	cpsid	i
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	b662      	cpsie	i
 8003c96:	613b      	str	r3, [r7, #16]
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	e7fd      	b.n	8003c9a <prvReadBytesFromBuffer+0xc0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	18d0      	adds	r0, r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6999      	ldr	r1, [r3, #24]
 8003ca8:	6a3a      	ldr	r2, [r7, #32]
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	f002 fa28 	bl	8006104 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	4413      	add	r3, r2
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d304      	bcc.n	8003cd0 <prvReadBytesFromBuffer+0xf6>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cd4:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3728      	adds	r7, #40	@ 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d304      	bcc.n	8003d12 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8003d12:	68fb      	ldr	r3, [r7, #12]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8003d2e:	2355      	movs	r3, #85	@ 0x55
 8003d30:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	6979      	ldr	r1, [r7, #20]
 8003d36:	68b8      	ldr	r0, [r7, #8]
 8003d38:	f002 f960 	bl	8005ffc <memset>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00d      	beq.n	8003d60 <prvInitialiseNewStreamBuffer+0x40>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d48:	b672      	cpsid	i
 8003d4a:	f383 8811 	msr	BASEPRI, r3
 8003d4e:	f3bf 8f6f 	isb	sy
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	b662      	cpsie	i
 8003d58:	613b      	str	r3, [r7, #16]
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8003d60:	2224      	movs	r2, #36	@ 0x24
 8003d62:	2100      	movs	r1, #0
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f002 f949 	bl	8005ffc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003d82:	771a      	strb	r2, [r3, #28]
}
 8003d84:	bf00      	nop
 8003d86:	3718      	adds	r7, #24
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08e      	sub	sp, #56	@ 0x38
 8003d90:	af04      	add	r7, sp, #16
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
 8003d98:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <xTaskCreateStatic+0x30>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	b672      	cpsid	i
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	b662      	cpsie	i
 8003db4:	623b      	str	r3, [r7, #32]
}
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10d      	bne.n	8003dde <xTaskCreateStatic+0x52>
	__asm volatile
 8003dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc6:	b672      	cpsid	i
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	b662      	cpsie	i
 8003dd6:	61fb      	str	r3, [r7, #28]
}
 8003dd8:	bf00      	nop
 8003dda:	bf00      	nop
 8003ddc:	e7fd      	b.n	8003dda <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003dde:	23a8      	movs	r3, #168	@ 0xa8
 8003de0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	2ba8      	cmp	r3, #168	@ 0xa8
 8003de6:	d00d      	beq.n	8003e04 <xTaskCreateStatic+0x78>
	__asm volatile
 8003de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dec:	b672      	cpsid	i
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	b662      	cpsie	i
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01e      	beq.n	8003e4a <xTaskCreateStatic+0xbe>
 8003e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01b      	beq.n	8003e4a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e24:	2300      	movs	r3, #0
 8003e26:	9303      	str	r3, [sp, #12]
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	9302      	str	r3, [sp, #8]
 8003e2c:	f107 0314 	add.w	r3, r7, #20
 8003e30:	9301      	str	r3, [sp, #4]
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f851 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003e42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e44:	f000 f8f8 	bl	8004038 <prvAddNewTaskToReadyList>
 8003e48:	e001      	b.n	8003e4e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003e4e:	697b      	ldr	r3, [r7, #20]
	}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3728      	adds	r7, #40	@ 0x28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af04      	add	r7, sp, #16
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 fedb 	bl	8005c28 <pvPortMalloc>
 8003e72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00e      	beq.n	8003e98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003e7a:	20a8      	movs	r0, #168	@ 0xa8
 8003e7c:	f001 fed4 	bl	8005c28 <pvPortMalloc>
 8003e80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e8e:	e005      	b.n	8003e9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003e90:	6978      	ldr	r0, [r7, #20]
 8003e92:	f001 ff97 	bl	8005dc4 <vPortFree>
 8003e96:	e001      	b.n	8003e9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d017      	beq.n	8003ed2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	2300      	movs	r3, #0
 8003eae:	9303      	str	r3, [sp, #12]
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	68b9      	ldr	r1, [r7, #8]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 f80f 	bl	8003ee4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ec6:	69f8      	ldr	r0, [r7, #28]
 8003ec8:	f000 f8b6 	bl	8004038 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e002      	b.n	8003ed8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ed8:	69bb      	ldr	r3, [r7, #24]
	}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	21a5      	movs	r1, #165	@ 0xa5
 8003efe:	f002 f87d 	bl	8005ffc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8003f0c:	440b      	add	r3, r1
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f023 0307 	bic.w	r3, r3, #7
 8003f1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	b672      	cpsid	i
 8003f2c:	f383 8811 	msr	BASEPRI, r3
 8003f30:	f3bf 8f6f 	isb	sy
 8003f34:	f3bf 8f4f 	dsb	sy
 8003f38:	b662      	cpsie	i
 8003f3a:	617b      	str	r3, [r7, #20]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d01f      	beq.n	8003f88 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e012      	b.n	8003f74 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	4413      	add	r3, r2
 8003f54:	7819      	ldrb	r1, [r3, #0]
 8003f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3334      	adds	r3, #52	@ 0x34
 8003f5e:	460a      	mov	r2, r1
 8003f60:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	4413      	add	r3, r2
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d006      	beq.n	8003f7c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	d9e9      	bls.n	8003f4e <prvInitialiseNewTask+0x6a>
 8003f7a:	e000      	b.n	8003f7e <prvInitialiseNewTask+0x9a>
			{
				break;
 8003f7c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f86:	e003      	b.n	8003f90 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	2b37      	cmp	r3, #55	@ 0x37
 8003f94:	d901      	bls.n	8003f9a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003f96:	2337      	movs	r3, #55	@ 0x37
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f9e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fa4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa8:	2200      	movs	r2, #0
 8003faa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fae:	3304      	adds	r3, #4
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fdc9 	bl	8002b48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb8:	3318      	adds	r3, #24
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7fe fdc4 	bl	8002b48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe8:	3354      	adds	r3, #84	@ 0x54
 8003fea:	224c      	movs	r2, #76	@ 0x4c
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 f804 	bl	8005ffc <memset>
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	4a0d      	ldr	r2, [pc, #52]	@ (800402c <prvInitialiseNewTask+0x148>)
 8003ff8:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8004030 <prvInitialiseNewTask+0x14c>)
 8003ffe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004002:	4a0c      	ldr	r2, [pc, #48]	@ (8004034 <prvInitialiseNewTask+0x150>)
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	68f9      	ldr	r1, [r7, #12]
 800400a:	69b8      	ldr	r0, [r7, #24]
 800400c:	f001 fbd0 	bl	80057b0 <pxPortInitialiseStack>
 8004010:	4602      	mov	r2, r0
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800401c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800401e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004020:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004022:	bf00      	nop
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20004ab4 	.word	0x20004ab4
 8004030:	20004b1c 	.word	0x20004b1c
 8004034:	20004b84 	.word	0x20004b84

08004038 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004040:	f001 fcc4 	bl	80059cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004044:	4b2d      	ldr	r3, [pc, #180]	@ (80040fc <prvAddNewTaskToReadyList+0xc4>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3301      	adds	r3, #1
 800404a:	4a2c      	ldr	r2, [pc, #176]	@ (80040fc <prvAddNewTaskToReadyList+0xc4>)
 800404c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800404e:	4b2c      	ldr	r3, [pc, #176]	@ (8004100 <prvAddNewTaskToReadyList+0xc8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d109      	bne.n	800406a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004056:	4a2a      	ldr	r2, [pc, #168]	@ (8004100 <prvAddNewTaskToReadyList+0xc8>)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800405c:	4b27      	ldr	r3, [pc, #156]	@ (80040fc <prvAddNewTaskToReadyList+0xc4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d110      	bne.n	8004086 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004064:	f000 fc44 	bl	80048f0 <prvInitialiseTaskLists>
 8004068:	e00d      	b.n	8004086 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800406a:	4b26      	ldr	r3, [pc, #152]	@ (8004104 <prvAddNewTaskToReadyList+0xcc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d109      	bne.n	8004086 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004072:	4b23      	ldr	r3, [pc, #140]	@ (8004100 <prvAddNewTaskToReadyList+0xc8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	429a      	cmp	r2, r3
 800407e:	d802      	bhi.n	8004086 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004080:	4a1f      	ldr	r2, [pc, #124]	@ (8004100 <prvAddNewTaskToReadyList+0xc8>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004086:	4b20      	ldr	r3, [pc, #128]	@ (8004108 <prvAddNewTaskToReadyList+0xd0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3301      	adds	r3, #1
 800408c:	4a1e      	ldr	r2, [pc, #120]	@ (8004108 <prvAddNewTaskToReadyList+0xd0>)
 800408e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004090:	4b1d      	ldr	r3, [pc, #116]	@ (8004108 <prvAddNewTaskToReadyList+0xd0>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409c:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <prvAddNewTaskToReadyList+0xd4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d903      	bls.n	80040ac <prvAddNewTaskToReadyList+0x74>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	4a18      	ldr	r2, [pc, #96]	@ (800410c <prvAddNewTaskToReadyList+0xd4>)
 80040aa:	6013      	str	r3, [r2, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4a15      	ldr	r2, [pc, #84]	@ (8004110 <prvAddNewTaskToReadyList+0xd8>)
 80040ba:	441a      	add	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3304      	adds	r3, #4
 80040c0:	4619      	mov	r1, r3
 80040c2:	4610      	mov	r0, r2
 80040c4:	f7fe fd4d 	bl	8002b62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80040c8:	f001 fcb6 	bl	8005a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80040cc:	4b0d      	ldr	r3, [pc, #52]	@ (8004104 <prvAddNewTaskToReadyList+0xcc>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00e      	beq.n	80040f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80040d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004100 <prvAddNewTaskToReadyList+0xc8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d207      	bcs.n	80040f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80040e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004114 <prvAddNewTaskToReadyList+0xdc>)
 80040e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040f2:	bf00      	nop
 80040f4:	3708      	adds	r7, #8
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20000d3c 	.word	0x20000d3c
 8004100:	20000868 	.word	0x20000868
 8004104:	20000d48 	.word	0x20000d48
 8004108:	20000d58 	.word	0x20000d58
 800410c:	20000d44 	.word	0x20000d44
 8004110:	2000086c 	.word	0x2000086c
 8004114:	e000ed04 	.word	0xe000ed04

08004118 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004120:	2300      	movs	r3, #0
 8004122:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d01a      	beq.n	8004160 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800412a:	4b15      	ldr	r3, [pc, #84]	@ (8004180 <vTaskDelay+0x68>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <vTaskDelay+0x36>
	__asm volatile
 8004132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004136:	b672      	cpsid	i
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	b662      	cpsie	i
 8004146:	60bb      	str	r3, [r7, #8]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800414e:	f000 f88f 	bl	8004270 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004152:	2100      	movs	r1, #0
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 ff6f 	bl	8005038 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800415a:	f000 f897 	bl	800428c <xTaskResumeAll>
 800415e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d107      	bne.n	8004176 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004166:	4b07      	ldr	r3, [pc, #28]	@ (8004184 <vTaskDelay+0x6c>)
 8004168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20000d64 	.word	0x20000d64
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	@ 0x28
 800418c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004196:	463a      	mov	r2, r7
 8004198:	1d39      	adds	r1, r7, #4
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fc7e 	bl	8002aa0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041a4:	6839      	ldr	r1, [r7, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	9202      	str	r2, [sp, #8]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	460a      	mov	r2, r1
 80041b6:	4926      	ldr	r1, [pc, #152]	@ (8004250 <vTaskStartScheduler+0xc8>)
 80041b8:	4826      	ldr	r0, [pc, #152]	@ (8004254 <vTaskStartScheduler+0xcc>)
 80041ba:	f7ff fde7 	bl	8003d8c <xTaskCreateStatic>
 80041be:	4603      	mov	r3, r0
 80041c0:	4a25      	ldr	r2, [pc, #148]	@ (8004258 <vTaskStartScheduler+0xd0>)
 80041c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80041c4:	4b24      	ldr	r3, [pc, #144]	@ (8004258 <vTaskStartScheduler+0xd0>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d002      	beq.n	80041d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80041cc:	2301      	movs	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e001      	b.n	80041d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d102      	bne.n	80041e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80041dc:	f000 ff80 	bl	80050e0 <xTimerCreateTimerTask>
 80041e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d11d      	bne.n	8004224 <vTaskStartScheduler+0x9c>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	b672      	cpsid	i
 80041ee:	f383 8811 	msr	BASEPRI, r3
 80041f2:	f3bf 8f6f 	isb	sy
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	b662      	cpsie	i
 80041fc:	613b      	str	r3, [r7, #16]
}
 80041fe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004200:	4b16      	ldr	r3, [pc, #88]	@ (800425c <vTaskStartScheduler+0xd4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3354      	adds	r3, #84	@ 0x54
 8004206:	4a16      	ldr	r2, [pc, #88]	@ (8004260 <vTaskStartScheduler+0xd8>)
 8004208:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800420a:	4b16      	ldr	r3, [pc, #88]	@ (8004264 <vTaskStartScheduler+0xdc>)
 800420c:	f04f 32ff 	mov.w	r2, #4294967295
 8004210:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004212:	4b15      	ldr	r3, [pc, #84]	@ (8004268 <vTaskStartScheduler+0xe0>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004218:	4b14      	ldr	r3, [pc, #80]	@ (800426c <vTaskStartScheduler+0xe4>)
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800421e:	f001 fb57 	bl	80058d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004222:	e011      	b.n	8004248 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422a:	d10d      	bne.n	8004248 <vTaskStartScheduler+0xc0>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	b672      	cpsid	i
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	b662      	cpsie	i
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <vTaskStartScheduler+0xbc>
}
 8004248:	bf00      	nop
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	08006200 	.word	0x08006200
 8004254:	080048c1 	.word	0x080048c1
 8004258:	20000d60 	.word	0x20000d60
 800425c:	20000868 	.word	0x20000868
 8004260:	20000010 	.word	0x20000010
 8004264:	20000d5c 	.word	0x20000d5c
 8004268:	20000d48 	.word	0x20000d48
 800426c:	20000d40 	.word	0x20000d40

08004270 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004270:	b480      	push	{r7}
 8004272:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004274:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <vTaskSuspendAll+0x18>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	4a03      	ldr	r2, [pc, #12]	@ (8004288 <vTaskSuspendAll+0x18>)
 800427c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000d64 	.word	0x20000d64

0800428c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004296:	2300      	movs	r3, #0
 8004298:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800429a:	4b43      	ldr	r3, [pc, #268]	@ (80043a8 <xTaskResumeAll+0x11c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10d      	bne.n	80042be <xTaskResumeAll+0x32>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	b672      	cpsid	i
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	b662      	cpsie	i
 80042b6:	603b      	str	r3, [r7, #0]
}
 80042b8:	bf00      	nop
 80042ba:	bf00      	nop
 80042bc:	e7fd      	b.n	80042ba <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042be:	f001 fb85 	bl	80059cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042c2:	4b39      	ldr	r3, [pc, #228]	@ (80043a8 <xTaskResumeAll+0x11c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	4a37      	ldr	r2, [pc, #220]	@ (80043a8 <xTaskResumeAll+0x11c>)
 80042ca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042cc:	4b36      	ldr	r3, [pc, #216]	@ (80043a8 <xTaskResumeAll+0x11c>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d162      	bne.n	800439a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80042d4:	4b35      	ldr	r3, [pc, #212]	@ (80043ac <xTaskResumeAll+0x120>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d05e      	beq.n	800439a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80042dc:	e02f      	b.n	800433e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042de:	4b34      	ldr	r3, [pc, #208]	@ (80043b0 <xTaskResumeAll+0x124>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	3318      	adds	r3, #24
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe fc96 	bl	8002c1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe fc91 	bl	8002c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fe:	4b2d      	ldr	r3, [pc, #180]	@ (80043b4 <xTaskResumeAll+0x128>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d903      	bls.n	800430e <xTaskResumeAll+0x82>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a2a      	ldr	r2, [pc, #168]	@ (80043b4 <xTaskResumeAll+0x128>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a27      	ldr	r2, [pc, #156]	@ (80043b8 <xTaskResumeAll+0x12c>)
 800431c:	441a      	add	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7fe fc1c 	bl	8002b62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	4b23      	ldr	r3, [pc, #140]	@ (80043bc <xTaskResumeAll+0x130>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	429a      	cmp	r2, r3
 8004336:	d302      	bcc.n	800433e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8004338:	4b21      	ldr	r3, [pc, #132]	@ (80043c0 <xTaskResumeAll+0x134>)
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800433e:	4b1c      	ldr	r3, [pc, #112]	@ (80043b0 <xTaskResumeAll+0x124>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1cb      	bne.n	80042de <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800434c:	f000 fb76 	bl	8004a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004350:	4b1c      	ldr	r3, [pc, #112]	@ (80043c4 <xTaskResumeAll+0x138>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800435c:	f000 f846 	bl	80043ec <xTaskIncrementTick>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004366:	4b16      	ldr	r3, [pc, #88]	@ (80043c0 <xTaskResumeAll+0x134>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3b01      	subs	r3, #1
 8004370:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f1      	bne.n	800435c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004378:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <xTaskResumeAll+0x138>)
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800437e:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <xTaskResumeAll+0x134>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004386:	2301      	movs	r3, #1
 8004388:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800438a:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <xTaskResumeAll+0x13c>)
 800438c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800439a:	f001 fb4d 	bl	8005a38 <vPortExitCritical>

	return xAlreadyYielded;
 800439e:	68bb      	ldr	r3, [r7, #8]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}
 80043a8:	20000d64 	.word	0x20000d64
 80043ac:	20000d3c 	.word	0x20000d3c
 80043b0:	20000cfc 	.word	0x20000cfc
 80043b4:	20000d44 	.word	0x20000d44
 80043b8:	2000086c 	.word	0x2000086c
 80043bc:	20000868 	.word	0x20000868
 80043c0:	20000d50 	.word	0x20000d50
 80043c4:	20000d4c 	.word	0x20000d4c
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80043d2:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <xTaskGetTickCount+0x1c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80043d8:	687b      	ldr	r3, [r7, #4]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000d40 	.word	0x20000d40

080043ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f6:	4b50      	ldr	r3, [pc, #320]	@ (8004538 <xTaskIncrementTick+0x14c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f040 808c 	bne.w	8004518 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004400:	4b4e      	ldr	r3, [pc, #312]	@ (800453c <xTaskIncrementTick+0x150>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004408:	4a4c      	ldr	r2, [pc, #304]	@ (800453c <xTaskIncrementTick+0x150>)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d123      	bne.n	800445c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004414:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <xTaskIncrementTick+0x154>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <xTaskIncrementTick+0x4e>
	__asm volatile
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	b672      	cpsid	i
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	b662      	cpsie	i
 8004432:	603b      	str	r3, [r7, #0]
}
 8004434:	bf00      	nop
 8004436:	bf00      	nop
 8004438:	e7fd      	b.n	8004436 <xTaskIncrementTick+0x4a>
 800443a:	4b41      	ldr	r3, [pc, #260]	@ (8004540 <xTaskIncrementTick+0x154>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	4b40      	ldr	r3, [pc, #256]	@ (8004544 <xTaskIncrementTick+0x158>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a3e      	ldr	r2, [pc, #248]	@ (8004540 <xTaskIncrementTick+0x154>)
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4a3e      	ldr	r2, [pc, #248]	@ (8004544 <xTaskIncrementTick+0x158>)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b3e      	ldr	r3, [pc, #248]	@ (8004548 <xTaskIncrementTick+0x15c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	3301      	adds	r3, #1
 8004454:	4a3c      	ldr	r2, [pc, #240]	@ (8004548 <xTaskIncrementTick+0x15c>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	f000 faf0 	bl	8004a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800445c:	4b3b      	ldr	r3, [pc, #236]	@ (800454c <xTaskIncrementTick+0x160>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	429a      	cmp	r2, r3
 8004464:	d349      	bcc.n	80044fa <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004466:	4b36      	ldr	r3, [pc, #216]	@ (8004540 <xTaskIncrementTick+0x154>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004470:	4b36      	ldr	r3, [pc, #216]	@ (800454c <xTaskIncrementTick+0x160>)
 8004472:	f04f 32ff 	mov.w	r2, #4294967295
 8004476:	601a      	str	r2, [r3, #0]
					break;
 8004478:	e03f      	b.n	80044fa <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800447a:	4b31      	ldr	r3, [pc, #196]	@ (8004540 <xTaskIncrementTick+0x154>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	429a      	cmp	r2, r3
 8004490:	d203      	bcs.n	800449a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004492:	4a2e      	ldr	r2, [pc, #184]	@ (800454c <xTaskIncrementTick+0x160>)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004498:	e02f      	b.n	80044fa <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fe fbbc 	bl	8002c1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3318      	adds	r3, #24
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7fe fbb3 	bl	8002c1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ba:	4b25      	ldr	r3, [pc, #148]	@ (8004550 <xTaskIncrementTick+0x164>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d903      	bls.n	80044ca <xTaskIncrementTick+0xde>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c6:	4a22      	ldr	r2, [pc, #136]	@ (8004550 <xTaskIncrementTick+0x164>)
 80044c8:	6013      	str	r3, [r2, #0]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004554 <xTaskIncrementTick+0x168>)
 80044d8:	441a      	add	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f7fe fb3e 	bl	8002b62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <xTaskIncrementTick+0x16c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d3b8      	bcc.n	8004466 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f8:	e7b5      	b.n	8004466 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80044fa:	4b17      	ldr	r3, [pc, #92]	@ (8004558 <xTaskIncrementTick+0x16c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004500:	4914      	ldr	r1, [pc, #80]	@ (8004554 <xTaskIncrementTick+0x168>)
 8004502:	4613      	mov	r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	440b      	add	r3, r1
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d907      	bls.n	8004522 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]
 8004516:	e004      	b.n	8004522 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004518:	4b10      	ldr	r3, [pc, #64]	@ (800455c <xTaskIncrementTick+0x170>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3301      	adds	r3, #1
 800451e:	4a0f      	ldr	r2, [pc, #60]	@ (800455c <xTaskIncrementTick+0x170>)
 8004520:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004522:	4b0f      	ldr	r3, [pc, #60]	@ (8004560 <xTaskIncrementTick+0x174>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800452a:	2301      	movs	r3, #1
 800452c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800452e:	697b      	ldr	r3, [r7, #20]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	20000d64 	.word	0x20000d64
 800453c:	20000d40 	.word	0x20000d40
 8004540:	20000cf4 	.word	0x20000cf4
 8004544:	20000cf8 	.word	0x20000cf8
 8004548:	20000d54 	.word	0x20000d54
 800454c:	20000d5c 	.word	0x20000d5c
 8004550:	20000d44 	.word	0x20000d44
 8004554:	2000086c 	.word	0x2000086c
 8004558:	20000868 	.word	0x20000868
 800455c:	20000d4c 	.word	0x20000d4c
 8004560:	20000d50 	.word	0x20000d50

08004564 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800456a:	4b2c      	ldr	r3, [pc, #176]	@ (800461c <vTaskSwitchContext+0xb8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004572:	4b2b      	ldr	r3, [pc, #172]	@ (8004620 <vTaskSwitchContext+0xbc>)
 8004574:	2201      	movs	r2, #1
 8004576:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004578:	e049      	b.n	800460e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800457a:	4b29      	ldr	r3, [pc, #164]	@ (8004620 <vTaskSwitchContext+0xbc>)
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004580:	4b28      	ldr	r3, [pc, #160]	@ (8004624 <vTaskSwitchContext+0xc0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	e013      	b.n	80045b0 <vTaskSwitchContext+0x4c>
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10d      	bne.n	80045aa <vTaskSwitchContext+0x46>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	b672      	cpsid	i
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	b662      	cpsie	i
 80045a2:	607b      	str	r3, [r7, #4]
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	e7fd      	b.n	80045a6 <vTaskSwitchContext+0x42>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	491d      	ldr	r1, [pc, #116]	@ (8004628 <vTaskSwitchContext+0xc4>)
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d0e1      	beq.n	8004588 <vTaskSwitchContext+0x24>
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4613      	mov	r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4413      	add	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4a16      	ldr	r2, [pc, #88]	@ (8004628 <vTaskSwitchContext+0xc4>)
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3308      	adds	r3, #8
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d104      	bne.n	80045f4 <vTaskSwitchContext+0x90>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a0c      	ldr	r2, [pc, #48]	@ (800462c <vTaskSwitchContext+0xc8>)
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4a09      	ldr	r2, [pc, #36]	@ (8004624 <vTaskSwitchContext+0xc0>)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004604:	4b09      	ldr	r3, [pc, #36]	@ (800462c <vTaskSwitchContext+0xc8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3354      	adds	r3, #84	@ 0x54
 800460a:	4a09      	ldr	r2, [pc, #36]	@ (8004630 <vTaskSwitchContext+0xcc>)
 800460c:	6013      	str	r3, [r2, #0]
}
 800460e:	bf00      	nop
 8004610:	3714      	adds	r7, #20
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	20000d64 	.word	0x20000d64
 8004620:	20000d50 	.word	0x20000d50
 8004624:	20000d44 	.word	0x20000d44
 8004628:	2000086c 	.word	0x2000086c
 800462c:	20000868 	.word	0x20000868
 8004630:	20000010 	.word	0x20000010

08004634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10d      	bne.n	8004660 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004648:	b672      	cpsid	i
 800464a:	f383 8811 	msr	BASEPRI, r3
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f3bf 8f4f 	dsb	sy
 8004656:	b662      	cpsie	i
 8004658:	60fb      	str	r3, [r7, #12]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004660:	4b07      	ldr	r3, [pc, #28]	@ (8004680 <vTaskPlaceOnEventList+0x4c>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	3318      	adds	r3, #24
 8004666:	4619      	mov	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fe fa9e 	bl	8002baa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800466e:	2101      	movs	r1, #1
 8004670:	6838      	ldr	r0, [r7, #0]
 8004672:	f000 fce1 	bl	8005038 <prvAddCurrentTaskToDelayedList>
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20000868 	.word	0x20000868

08004684 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10d      	bne.n	80046b2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469a:	b672      	cpsid	i
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	b662      	cpsie	i
 80046aa:	617b      	str	r3, [r7, #20]
}
 80046ac:	bf00      	nop
 80046ae:	bf00      	nop
 80046b0:	e7fd      	b.n	80046ae <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046b2:	4b0a      	ldr	r3, [pc, #40]	@ (80046dc <vTaskPlaceOnEventListRestricted+0x58>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3318      	adds	r3, #24
 80046b8:	4619      	mov	r1, r3
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7fe fa51 	bl	8002b62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 80046c6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	68b8      	ldr	r0, [r7, #8]
 80046d0:	f000 fcb2 	bl	8005038 <prvAddCurrentTaskToDelayedList>
	}
 80046d4:	bf00      	nop
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	20000868 	.word	0x20000868

080046e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10d      	bne.n	8004712 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fa:	b672      	cpsid	i
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	b662      	cpsie	i
 800470a:	60fb      	str	r3, [r7, #12]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	3318      	adds	r3, #24
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe fa80 	bl	8002c1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800471c:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <xTaskRemoveFromEventList+0xb4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d11d      	bne.n	8004760 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe fa77 	bl	8002c1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004732:	4b19      	ldr	r3, [pc, #100]	@ (8004798 <xTaskRemoveFromEventList+0xb8>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d903      	bls.n	8004742 <xTaskRemoveFromEventList+0x62>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <xTaskRemoveFromEventList+0xb8>)
 8004740:	6013      	str	r3, [r2, #0]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4a13      	ldr	r2, [pc, #76]	@ (800479c <xTaskRemoveFromEventList+0xbc>)
 8004750:	441a      	add	r2, r3
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	3304      	adds	r3, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4610      	mov	r0, r2
 800475a:	f7fe fa02 	bl	8002b62 <vListInsertEnd>
 800475e:	e005      	b.n	800476c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	3318      	adds	r3, #24
 8004764:	4619      	mov	r1, r3
 8004766:	480e      	ldr	r0, [pc, #56]	@ (80047a0 <xTaskRemoveFromEventList+0xc0>)
 8004768:	f7fe f9fb 	bl	8002b62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <xTaskRemoveFromEventList+0xc4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004776:	429a      	cmp	r2, r3
 8004778:	d905      	bls.n	8004786 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800477e:	4b0a      	ldr	r3, [pc, #40]	@ (80047a8 <xTaskRemoveFromEventList+0xc8>)
 8004780:	2201      	movs	r2, #1
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	e001      	b.n	800478a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800478a:	697b      	ldr	r3, [r7, #20]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20000d64 	.word	0x20000d64
 8004798:	20000d44 	.word	0x20000d44
 800479c:	2000086c 	.word	0x2000086c
 80047a0:	20000cfc 	.word	0x20000cfc
 80047a4:	20000868 	.word	0x20000868
 80047a8:	20000d50 	.word	0x20000d50

080047ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80047b4:	4b06      	ldr	r3, [pc, #24]	@ (80047d0 <vTaskInternalSetTimeOutState+0x24>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80047bc:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <vTaskInternalSetTimeOutState+0x28>)
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	605a      	str	r2, [r3, #4]
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	20000d54 	.word	0x20000d54
 80047d4:	20000d40 	.word	0x20000d40

080047d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10d      	bne.n	8004804 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ec:	b672      	cpsid	i
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	b662      	cpsie	i
 80047fc:	613b      	str	r3, [r7, #16]
}
 80047fe:	bf00      	nop
 8004800:	bf00      	nop
 8004802:	e7fd      	b.n	8004800 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10d      	bne.n	8004826 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800480e:	b672      	cpsid	i
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	b662      	cpsie	i
 800481e:	60fb      	str	r3, [r7, #12]
}
 8004820:	bf00      	nop
 8004822:	bf00      	nop
 8004824:	e7fd      	b.n	8004822 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004826:	f001 f8d1 	bl	80059cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800482a:	4b1d      	ldr	r3, [pc, #116]	@ (80048a0 <xTaskCheckForTimeOut+0xc8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004842:	d102      	bne.n	800484a <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004844:	2300      	movs	r3, #0
 8004846:	61fb      	str	r3, [r7, #28]
 8004848:	e023      	b.n	8004892 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b15      	ldr	r3, [pc, #84]	@ (80048a4 <xTaskCheckForTimeOut+0xcc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d007      	beq.n	8004866 <xTaskCheckForTimeOut+0x8e>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	429a      	cmp	r2, r3
 800485e:	d302      	bcc.n	8004866 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004860:	2301      	movs	r3, #1
 8004862:	61fb      	str	r3, [r7, #28]
 8004864:	e015      	b.n	8004892 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	d20b      	bcs.n	8004888 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	1ad2      	subs	r2, r2, r3
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff95 	bl	80047ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
 8004886:	e004      	b.n	8004892 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800488e:	2301      	movs	r3, #1
 8004890:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004892:	f001 f8d1 	bl	8005a38 <vPortExitCritical>

	return xReturn;
 8004896:	69fb      	ldr	r3, [r7, #28]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000d40 	.word	0x20000d40
 80048a4:	20000d54 	.word	0x20000d54

080048a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048ac:	4b03      	ldr	r3, [pc, #12]	@ (80048bc <vTaskMissedYield+0x14>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	601a      	str	r2, [r3, #0]
}
 80048b2:	bf00      	nop
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	20000d50 	.word	0x20000d50

080048c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80048c8:	f000 f852 	bl	8004970 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80048cc:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <prvIdleTask+0x28>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d9f9      	bls.n	80048c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80048d4:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <prvIdleTask+0x2c>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80048e4:	e7f0      	b.n	80048c8 <prvIdleTask+0x8>
 80048e6:	bf00      	nop
 80048e8:	2000086c 	.word	0x2000086c
 80048ec:	e000ed04 	.word	0xe000ed04

080048f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80048f6:	2300      	movs	r3, #0
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	e00c      	b.n	8004916 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4a12      	ldr	r2, [pc, #72]	@ (8004950 <prvInitialiseTaskLists+0x60>)
 8004908:	4413      	add	r3, r2
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe f8fc 	bl	8002b08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3301      	adds	r3, #1
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2b37      	cmp	r3, #55	@ 0x37
 800491a:	d9ef      	bls.n	80048fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800491c:	480d      	ldr	r0, [pc, #52]	@ (8004954 <prvInitialiseTaskLists+0x64>)
 800491e:	f7fe f8f3 	bl	8002b08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004922:	480d      	ldr	r0, [pc, #52]	@ (8004958 <prvInitialiseTaskLists+0x68>)
 8004924:	f7fe f8f0 	bl	8002b08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004928:	480c      	ldr	r0, [pc, #48]	@ (800495c <prvInitialiseTaskLists+0x6c>)
 800492a:	f7fe f8ed 	bl	8002b08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800492e:	480c      	ldr	r0, [pc, #48]	@ (8004960 <prvInitialiseTaskLists+0x70>)
 8004930:	f7fe f8ea 	bl	8002b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004934:	480b      	ldr	r0, [pc, #44]	@ (8004964 <prvInitialiseTaskLists+0x74>)
 8004936:	f7fe f8e7 	bl	8002b08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <prvInitialiseTaskLists+0x78>)
 800493c:	4a05      	ldr	r2, [pc, #20]	@ (8004954 <prvInitialiseTaskLists+0x64>)
 800493e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004940:	4b0a      	ldr	r3, [pc, #40]	@ (800496c <prvInitialiseTaskLists+0x7c>)
 8004942:	4a05      	ldr	r2, [pc, #20]	@ (8004958 <prvInitialiseTaskLists+0x68>)
 8004944:	601a      	str	r2, [r3, #0]
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	2000086c 	.word	0x2000086c
 8004954:	20000ccc 	.word	0x20000ccc
 8004958:	20000ce0 	.word	0x20000ce0
 800495c:	20000cfc 	.word	0x20000cfc
 8004960:	20000d10 	.word	0x20000d10
 8004964:	20000d28 	.word	0x20000d28
 8004968:	20000cf4 	.word	0x20000cf4
 800496c:	20000cf8 	.word	0x20000cf8

08004970 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004976:	e019      	b.n	80049ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004978:	f001 f828 	bl	80059cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497c:	4b10      	ldr	r3, [pc, #64]	@ (80049c0 <prvCheckTasksWaitingTermination+0x50>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe f947 	bl	8002c1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800498e:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <prvCheckTasksWaitingTermination+0x54>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	4a0b      	ldr	r2, [pc, #44]	@ (80049c4 <prvCheckTasksWaitingTermination+0x54>)
 8004996:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <prvCheckTasksWaitingTermination+0x58>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3b01      	subs	r3, #1
 800499e:	4a0a      	ldr	r2, [pc, #40]	@ (80049c8 <prvCheckTasksWaitingTermination+0x58>)
 80049a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049a2:	f001 f849 	bl	8005a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f810 	bl	80049cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049ac:	4b06      	ldr	r3, [pc, #24]	@ (80049c8 <prvCheckTasksWaitingTermination+0x58>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e1      	bne.n	8004978 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80049b4:	bf00      	nop
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000d10 	.word	0x20000d10
 80049c4:	20000d3c 	.word	0x20000d3c
 80049c8:	20000d24 	.word	0x20000d24

080049cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	3354      	adds	r3, #84	@ 0x54
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fb17 	bl	800600c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d108      	bne.n	80049fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 f9e9 	bl	8005dc4 <vPortFree>
				vPortFree( pxTCB );
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f001 f9e6 	bl	8005dc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80049f8:	e01b      	b.n	8004a32 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d103      	bne.n	8004a0c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f001 f9dd 	bl	8005dc4 <vPortFree>
	}
 8004a0a:	e012      	b.n	8004a32 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	d00d      	beq.n	8004a32 <prvDeleteTCB+0x66>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1a:	b672      	cpsid	i
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	b662      	cpsie	i
 8004a2a:	60fb      	str	r3, [r7, #12]
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	e7fd      	b.n	8004a2e <prvDeleteTCB+0x62>
	}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a42:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <prvResetNextTaskUnblockTime+0x38>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d104      	bne.n	8004a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a78 <prvResetNextTaskUnblockTime+0x3c>)
 8004a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a54:	e008      	b.n	8004a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a56:	4b07      	ldr	r3, [pc, #28]	@ (8004a74 <prvResetNextTaskUnblockTime+0x38>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4a04      	ldr	r2, [pc, #16]	@ (8004a78 <prvResetNextTaskUnblockTime+0x3c>)
 8004a66:	6013      	str	r3, [r2, #0]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000cf4 	.word	0x20000cf4
 8004a78:	20000d5c 	.word	0x20000d5c

08004a7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004a82:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <xTaskGetCurrentTaskHandle+0x1c>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004a88:	687b      	ldr	r3, [r7, #4]
	}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000868 	.word	0x20000868

08004a9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad0 <xTaskGetSchedulerState+0x34>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d102      	bne.n	8004ab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	e008      	b.n	8004ac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab0:	4b08      	ldr	r3, [pc, #32]	@ (8004ad4 <xTaskGetSchedulerState+0x38>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ab8:	2302      	movs	r3, #2
 8004aba:	607b      	str	r3, [r7, #4]
 8004abc:	e001      	b.n	8004ac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ac2:	687b      	ldr	r3, [r7, #4]
	}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000d48 	.word	0x20000d48
 8004ad4:	20000d64 	.word	0x20000d64

08004ad8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d05c      	beq.n	8004ba8 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004aee:	4b31      	ldr	r3, [pc, #196]	@ (8004bb4 <xTaskPriorityDisinherit+0xdc>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	693a      	ldr	r2, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d00d      	beq.n	8004b14 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	60fb      	str	r3, [r7, #12]
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	e7fd      	b.n	8004b10 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10d      	bne.n	8004b38 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	b672      	cpsid	i
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	b662      	cpsie	i
 8004b30:	60bb      	str	r3, [r7, #8]
}
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b3c:	1e5a      	subs	r2, r3, #1
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d02c      	beq.n	8004ba8 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d128      	bne.n	8004ba8 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe f85e 	bl	8002c1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	4b0f      	ldr	r3, [pc, #60]	@ (8004bb8 <xTaskPriorityDisinherit+0xe0>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d903      	bls.n	8004b88 <xTaskPriorityDisinherit+0xb0>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb8 <xTaskPriorityDisinherit+0xe0>)
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4a09      	ldr	r2, [pc, #36]	@ (8004bbc <xTaskPriorityDisinherit+0xe4>)
 8004b96:	441a      	add	r2, r3
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7fd ffdf 	bl	8002b62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ba8:	697b      	ldr	r3, [r7, #20]
	}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000868 	.word	0x20000868
 8004bb8:	20000d44 	.word	0x20000d44
 8004bbc:	2000086c 	.word	0x2000086c

08004bc0 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
 8004bcc:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8004bce:	f000 fefd 	bl	80059cc <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004bd2:	4b29      	ldr	r3, [pc, #164]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d01c      	beq.n	8004c1a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004be0:	4b25      	ldr	r3, [pc, #148]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	43d2      	mvns	r2, r2
 8004bec:	400a      	ands	r2, r1
 8004bee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004bf2:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00b      	beq.n	8004c1a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c02:	2101      	movs	r1, #1
 8004c04:	6838      	ldr	r0, [r7, #0]
 8004c06:	f000 fa17 	bl	8005038 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8004c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c7c <xTaskNotifyWait+0xbc>)
 8004c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004c1a:	f000 ff0d 	bl	8005a38 <vPortExitCritical>

		taskENTER_CRITICAL();
 8004c1e:	f000 fed5 	bl	80059cc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d005      	beq.n	8004c34 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004c28:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c34:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d002      	beq.n	8004c48 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
 8004c46:	e00a      	b.n	8004c5e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004c48:	4b0b      	ldr	r3, [pc, #44]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	43d2      	mvns	r2, r2
 8004c54:	400a      	ands	r2, r1
 8004c56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c5e:	4b06      	ldr	r3, [pc, #24]	@ (8004c78 <xTaskNotifyWait+0xb8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8004c68:	f000 fee6 	bl	8005a38 <vPortExitCritical>

		return xReturn;
 8004c6c:	697b      	ldr	r3, [r7, #20]
	}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3718      	adds	r7, #24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000868 	.word	0x20000868
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	@ 0x28
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8004c90:	2301      	movs	r3, #1
 8004c92:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10d      	bne.n	8004cb6 <xTaskGenericNotify+0x36>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c9e:	b672      	cpsid	i
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	b662      	cpsie	i
 8004cae:	61bb      	str	r3, [r7, #24]
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8004cba:	f000 fe87 	bl	80059cc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d004      	beq.n	8004cce <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004cd4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2202      	movs	r2, #2
 8004cda:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8004cde:	79fb      	ldrb	r3, [r7, #7]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d82e      	bhi.n	8004d42 <xTaskGenericNotify+0xc2>
 8004ce4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cec <xTaskGenericNotify+0x6c>)
 8004ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cea:	bf00      	nop
 8004cec:	08004d6b 	.word	0x08004d6b
 8004cf0:	08004d01 	.word	0x08004d01
 8004cf4:	08004d13 	.word	0x08004d13
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d2d 	.word	0x08004d2d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	431a      	orrs	r2, r3
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8004d10:	e02e      	b.n	8004d70 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004d12:	6a3b      	ldr	r3, [r7, #32]
 8004d14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8004d20:	e026      	b.n	8004d70 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004d22:	6a3b      	ldr	r3, [r7, #32]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8004d2a:	e021      	b.n	8004d70 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004d2c:	7ffb      	ldrb	r3, [r7, #31]
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d004      	beq.n	8004d3c <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004d3a:	e019      	b.n	8004d70 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8004d40:	e016      	b.n	8004d70 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4c:	d00f      	beq.n	8004d6e <xTaskGenericNotify+0xee>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	b672      	cpsid	i
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	b662      	cpsie	i
 8004d62:	617b      	str	r3, [r7, #20]
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <xTaskGenericNotify+0xe6>
					break;
 8004d6a:	bf00      	nop
 8004d6c:	e000      	b.n	8004d70 <xTaskGenericNotify+0xf0>

					break;
 8004d6e:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d70:	7ffb      	ldrb	r3, [r7, #31]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d13d      	bne.n	8004df2 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	3304      	adds	r3, #4
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd ff4e 	bl	8002c1c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004d80:	6a3b      	ldr	r3, [r7, #32]
 8004d82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d84:	4b1e      	ldr	r3, [pc, #120]	@ (8004e00 <xTaskGenericNotify+0x180>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d903      	bls.n	8004d94 <xTaskGenericNotify+0x114>
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	4a1b      	ldr	r2, [pc, #108]	@ (8004e00 <xTaskGenericNotify+0x180>)
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d98:	4613      	mov	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4413      	add	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4a18      	ldr	r2, [pc, #96]	@ (8004e04 <xTaskGenericNotify+0x184>)
 8004da2:	441a      	add	r2, r3
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4619      	mov	r1, r3
 8004daa:	4610      	mov	r0, r2
 8004dac:	f7fd fed9 	bl	8002b62 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004db0:	6a3b      	ldr	r3, [r7, #32]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00d      	beq.n	8004dd4 <xTaskGenericNotify+0x154>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbc:	b672      	cpsid	i
 8004dbe:	f383 8811 	msr	BASEPRI, r3
 8004dc2:	f3bf 8f6f 	isb	sy
 8004dc6:	f3bf 8f4f 	dsb	sy
 8004dca:	b662      	cpsie	i
 8004dcc:	613b      	str	r3, [r7, #16]
}
 8004dce:	bf00      	nop
 8004dd0:	bf00      	nop
 8004dd2:	e7fd      	b.n	8004dd0 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004e08 <xTaskGenericNotify+0x188>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d907      	bls.n	8004df2 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004de2:	4b0a      	ldr	r3, [pc, #40]	@ (8004e0c <xTaskGenericNotify+0x18c>)
 8004de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004df2:	f000 fe21 	bl	8005a38 <vPortExitCritical>

		return xReturn;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3728      	adds	r7, #40	@ 0x28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000d44 	.word	0x20000d44
 8004e04:	2000086c 	.word	0x2000086c
 8004e08:	20000868 	.word	0x20000868
 8004e0c:	e000ed04 	.word	0xe000ed04

08004e10 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	@ 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004e20:	2301      	movs	r3, #1
 8004e22:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10d      	bne.n	8004e46 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2e:	b672      	cpsid	i
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	b662      	cpsie	i
 8004e3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004e46:	f000 fea9 	bl	8005b9c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8004e4e:	f3ef 8211 	mrs	r2, BASEPRI
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	b672      	cpsid	i
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	b662      	cpsie	i
 8004e66:	623a      	str	r2, [r7, #32]
 8004e68:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004e6a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e76:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8004e84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d82e      	bhi.n	8004ef4 <xTaskGenericNotifyFromISR+0xe4>
 8004e96:	a201      	add	r2, pc, #4	@ (adr r2, 8004e9c <xTaskGenericNotifyFromISR+0x8c>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004f1d 	.word	0x08004f1d
 8004ea0:	08004eb1 	.word	0x08004eb1
 8004ea4:	08004ec3 	.word	0x08004ec3
 8004ea8:	08004ed3 	.word	0x08004ed3
 8004eac:	08004edd 	.word	0x08004edd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ebc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8004ec0:	e02f      	b.n	8004f22 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ec8:	1c5a      	adds	r2, r3, #1
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8004ed0:	e027      	b.n	8004f22 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8004eda:	e022      	b.n	8004f22 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004edc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d004      	beq.n	8004eee <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004eec:	e019      	b.n	8004f22 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8004ef2:	e016      	b.n	8004f22 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efe:	d00f      	beq.n	8004f20 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	61bb      	str	r3, [r7, #24]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xTaskGenericNotifyFromISR+0x108>
					break;
 8004f1c:	bf00      	nop
 8004f1e:	e000      	b.n	8004f22 <xTaskGenericNotifyFromISR+0x112>
					break;
 8004f20:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004f22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d149      	bne.n	8004fbe <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00d      	beq.n	8004f4e <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	b672      	cpsid	i
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	b662      	cpsie	i
 8004f46:	617b      	str	r3, [r7, #20]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f4e:	4b21      	ldr	r3, [pc, #132]	@ (8004fd4 <xTaskGenericNotifyFromISR+0x1c4>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d11d      	bne.n	8004f92 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	3304      	adds	r3, #4
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd fe5e 	bl	8002c1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f64:	4b1c      	ldr	r3, [pc, #112]	@ (8004fd8 <xTaskGenericNotifyFromISR+0x1c8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d903      	bls.n	8004f74 <xTaskGenericNotifyFromISR+0x164>
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <xTaskGenericNotifyFromISR+0x1c8>)
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4a16      	ldr	r2, [pc, #88]	@ (8004fdc <xTaskGenericNotifyFromISR+0x1cc>)
 8004f82:	441a      	add	r2, r3
 8004f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f86:	3304      	adds	r3, #4
 8004f88:	4619      	mov	r1, r3
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	f7fd fde9 	bl	8002b62 <vListInsertEnd>
 8004f90:	e005      	b.n	8004f9e <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f94:	3318      	adds	r3, #24
 8004f96:	4619      	mov	r1, r3
 8004f98:	4811      	ldr	r0, [pc, #68]	@ (8004fe0 <xTaskGenericNotifyFromISR+0x1d0>)
 8004f9a:	f7fd fde2 	bl	8002b62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <xTaskGenericNotifyFromISR+0x1d4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d908      	bls.n	8004fbe <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004fb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <xTaskGenericNotifyFromISR+0x1d8>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fc0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f383 8811 	msr	BASEPRI, r3
}
 8004fc8:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3738      	adds	r7, #56	@ 0x38
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	20000d64 	.word	0x20000d64
 8004fd8:	20000d44 	.word	0x20000d44
 8004fdc:	2000086c 	.word	0x2000086c
 8004fe0:	20000cfc 	.word	0x20000cfc
 8004fe4:	20000868 	.word	0x20000868
 8004fe8:	20000d50 	.word	0x20000d50

08004fec <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d102      	bne.n	8005000 <xTaskNotifyStateClear+0x14>
 8004ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8005034 <xTaskNotifyStateClear+0x48>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	e000      	b.n	8005002 <xTaskNotifyStateClear+0x16>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005004:	f000 fce2 	bl	80059cc <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d106      	bne.n	8005022 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 800501c:	2301      	movs	r3, #1
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	e001      	b.n	8005026 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005026:	f000 fd07 	bl	8005a38 <vPortExitCritical>

		return xReturn;
 800502a:	68fb      	ldr	r3, [r7, #12]
	}
 800502c:	4618      	mov	r0, r3
 800502e:	3710      	adds	r7, #16
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000868 	.word	0x20000868

08005038 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005042:	4b21      	ldr	r3, [pc, #132]	@ (80050c8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005048:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7fd fde4 	bl	8002c1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800505a:	d10a      	bne.n	8005072 <prvAddCurrentTaskToDelayedList+0x3a>
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005062:	4b1a      	ldr	r3, [pc, #104]	@ (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4819      	ldr	r0, [pc, #100]	@ (80050d0 <prvAddCurrentTaskToDelayedList+0x98>)
 800506c:	f7fd fd79 	bl	8002b62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005070:	e026      	b.n	80050c0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4413      	add	r3, r2
 8005078:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800507a:	4b14      	ldr	r3, [pc, #80]	@ (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	429a      	cmp	r2, r3
 8005088:	d209      	bcs.n	800509e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800508a:	4b12      	ldr	r3, [pc, #72]	@ (80050d4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b0f      	ldr	r3, [pc, #60]	@ (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f7fd fd87 	bl	8002baa <vListInsert>
}
 800509c:	e010      	b.n	80050c0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509e:	4b0e      	ldr	r3, [pc, #56]	@ (80050d8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b0a      	ldr	r3, [pc, #40]	@ (80050cc <prvAddCurrentTaskToDelayedList+0x94>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fd fd7d 	bl	8002baa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050b0:	4b0a      	ldr	r3, [pc, #40]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d202      	bcs.n	80050c0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ba:	4a08      	ldr	r2, [pc, #32]	@ (80050dc <prvAddCurrentTaskToDelayedList+0xa4>)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	6013      	str	r3, [r2, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000d40 	.word	0x20000d40
 80050cc:	20000868 	.word	0x20000868
 80050d0:	20000d28 	.word	0x20000d28
 80050d4:	20000cf8 	.word	0x20000cf8
 80050d8:	20000cf4 	.word	0x20000cf4
 80050dc:	20000d5c 	.word	0x20000d5c

080050e0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b08a      	sub	sp, #40	@ 0x28
 80050e4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050ea:	f000 fb21 	bl	8005730 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <xTimerCreateTimerTask+0x88>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d021      	beq.n	800513a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050fe:	1d3a      	adds	r2, r7, #4
 8005100:	f107 0108 	add.w	r1, r7, #8
 8005104:	f107 030c 	add.w	r3, r7, #12
 8005108:	4618      	mov	r0, r3
 800510a:	f7fd fce3 	bl	8002ad4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	9202      	str	r2, [sp, #8]
 8005116:	9301      	str	r3, [sp, #4]
 8005118:	2302      	movs	r3, #2
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	2300      	movs	r3, #0
 800511e:	460a      	mov	r2, r1
 8005120:	4912      	ldr	r1, [pc, #72]	@ (800516c <xTimerCreateTimerTask+0x8c>)
 8005122:	4813      	ldr	r0, [pc, #76]	@ (8005170 <xTimerCreateTimerTask+0x90>)
 8005124:	f7fe fe32 	bl	8003d8c <xTaskCreateStatic>
 8005128:	4603      	mov	r3, r0
 800512a:	4a12      	ldr	r2, [pc, #72]	@ (8005174 <xTimerCreateTimerTask+0x94>)
 800512c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800512e:	4b11      	ldr	r3, [pc, #68]	@ (8005174 <xTimerCreateTimerTask+0x94>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005136:	2301      	movs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10d      	bne.n	800515c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005144:	b672      	cpsid	i
 8005146:	f383 8811 	msr	BASEPRI, r3
 800514a:	f3bf 8f6f 	isb	sy
 800514e:	f3bf 8f4f 	dsb	sy
 8005152:	b662      	cpsie	i
 8005154:	613b      	str	r3, [r7, #16]
}
 8005156:	bf00      	nop
 8005158:	bf00      	nop
 800515a:	e7fd      	b.n	8005158 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800515c:	697b      	ldr	r3, [r7, #20]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000d98 	.word	0x20000d98
 800516c:	08006208 	.word	0x08006208
 8005170:	080052b9 	.word	0x080052b9
 8005174:	20000d9c 	.word	0x20000d9c

08005178 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	@ 0x28
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005186:	2300      	movs	r3, #0
 8005188:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10d      	bne.n	80051ac <xTimerGenericCommand+0x34>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	b672      	cpsid	i
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	b662      	cpsie	i
 80051a4:	623b      	str	r3, [r7, #32]
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051ac:	4b19      	ldr	r3, [pc, #100]	@ (8005214 <xTimerGenericCommand+0x9c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d02a      	beq.n	800520a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	dc18      	bgt.n	80051f8 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051c6:	f7ff fc69 	bl	8004a9c <xTaskGetSchedulerState>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d109      	bne.n	80051e4 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051d0:	4b10      	ldr	r3, [pc, #64]	@ (8005214 <xTimerGenericCommand+0x9c>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	f107 0110 	add.w	r1, r7, #16
 80051d8:	2300      	movs	r3, #0
 80051da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051dc:	f7fd fe5e 	bl	8002e9c <xQueueGenericSend>
 80051e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80051e2:	e012      	b.n	800520a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005214 <xTimerGenericCommand+0x9c>)
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	f107 0110 	add.w	r1, r7, #16
 80051ec:	2300      	movs	r3, #0
 80051ee:	2200      	movs	r2, #0
 80051f0:	f7fd fe54 	bl	8002e9c <xQueueGenericSend>
 80051f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80051f6:	e008      	b.n	800520a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051f8:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <xTimerGenericCommand+0x9c>)
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	f107 0110 	add.w	r1, r7, #16
 8005200:	2300      	movs	r3, #0
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	f7fd ff54 	bl	80030b0 <xQueueGenericSendFromISR>
 8005208:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800520a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800520c:	4618      	mov	r0, r3
 800520e:	3728      	adds	r7, #40	@ 0x28
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20000d98 	.word	0x20000d98

08005218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b088      	sub	sp, #32
 800521c:	af02      	add	r7, sp, #8
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005222:	4b24      	ldr	r3, [pc, #144]	@ (80052b4 <prvProcessExpiredTimer+0x9c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3304      	adds	r3, #4
 8005230:	4618      	mov	r0, r3
 8005232:	f7fd fcf3 	bl	8002c1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d025      	beq.n	8005290 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	699a      	ldr	r2, [r3, #24]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	18d1      	adds	r1, r2, r3
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	6978      	ldr	r0, [r7, #20]
 8005252:	f000 f8d7 	bl	8005404 <prvInsertTimerInActiveList>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d022      	beq.n	80052a2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800525c:	2300      	movs	r3, #0
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	2300      	movs	r3, #0
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	2100      	movs	r1, #0
 8005266:	6978      	ldr	r0, [r7, #20]
 8005268:	f7ff ff86 	bl	8005178 <xTimerGenericCommand>
 800526c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d116      	bne.n	80052a2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	b672      	cpsid	i
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	b662      	cpsie	i
 8005288:	60fb      	str	r3, [r7, #12]
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	e7fd      	b.n	800528c <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	b2da      	uxtb	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	6a1b      	ldr	r3, [r3, #32]
 80052a6:	6978      	ldr	r0, [r7, #20]
 80052a8:	4798      	blx	r3
}
 80052aa:	bf00      	nop
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000d90 	.word	0x20000d90

080052b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c0:	f107 0308 	add.w	r3, r7, #8
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f859 	bl	800537c <prvGetNextExpireTime>
 80052ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4619      	mov	r1, r3
 80052d0:	68f8      	ldr	r0, [r7, #12]
 80052d2:	f000 f805 	bl	80052e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052d6:	f000 f8d7 	bl	8005488 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052da:	bf00      	nop
 80052dc:	e7f0      	b.n	80052c0 <prvTimerTask+0x8>
	...

080052e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052ea:	f7fe ffc1 	bl	8004270 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052ee:	f107 0308 	add.w	r3, r7, #8
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f866 	bl	80053c4 <prvSampleTimeNow>
 80052f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d130      	bne.n	8005362 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d10a      	bne.n	800531c <prvProcessTimerOrBlockTask+0x3c>
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	429a      	cmp	r2, r3
 800530c:	d806      	bhi.n	800531c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800530e:	f7fe ffbd 	bl	800428c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005312:	68f9      	ldr	r1, [r7, #12]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff ff7f 	bl	8005218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800531a:	e024      	b.n	8005366 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005322:	4b13      	ldr	r3, [pc, #76]	@ (8005370 <prvProcessTimerOrBlockTask+0x90>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <prvProcessTimerOrBlockTask+0x50>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <prvProcessTimerOrBlockTask+0x52>
 8005330:	2300      	movs	r3, #0
 8005332:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005334:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <prvProcessTimerOrBlockTask+0x94>)
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	4619      	mov	r1, r3
 8005342:	f7fe f97b 	bl	800363c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005346:	f7fe ffa1 	bl	800428c <xTaskResumeAll>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005350:	4b09      	ldr	r3, [pc, #36]	@ (8005378 <prvProcessTimerOrBlockTask+0x98>)
 8005352:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	f3bf 8f6f 	isb	sy
}
 8005360:	e001      	b.n	8005366 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005362:	f7fe ff93 	bl	800428c <xTaskResumeAll>
}
 8005366:	bf00      	nop
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	20000d94 	.word	0x20000d94
 8005374:	20000d98 	.word	0x20000d98
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005384:	4b0e      	ldr	r3, [pc, #56]	@ (80053c0 <prvGetNextExpireTime+0x44>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <prvGetNextExpireTime+0x16>
 800538e:	2201      	movs	r2, #1
 8005390:	e000      	b.n	8005394 <prvGetNextExpireTime+0x18>
 8005392:	2200      	movs	r2, #0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d105      	bne.n	80053ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a0:	4b07      	ldr	r3, [pc, #28]	@ (80053c0 <prvGetNextExpireTime+0x44>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	e001      	b.n	80053b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20000d90 	.word	0x20000d90

080053c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053cc:	f7fe fffe 	bl	80043cc <xTaskGetTickCount>
 80053d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005400 <prvSampleTimeNow+0x3c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d205      	bcs.n	80053e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053dc:	f000 f940 	bl	8005660 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e002      	b.n	80053ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053ee:	4a04      	ldr	r2, [pc, #16]	@ (8005400 <prvSampleTimeNow+0x3c>)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000da0 	.word	0x20000da0

08005404 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
 8005410:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005422:	68ba      	ldr	r2, [r7, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	429a      	cmp	r2, r3
 8005428:	d812      	bhi.n	8005450 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	1ad2      	subs	r2, r2, r3
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	429a      	cmp	r2, r3
 8005436:	d302      	bcc.n	800543e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e01b      	b.n	8005476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800543e:	4b10      	ldr	r3, [pc, #64]	@ (8005480 <prvInsertTimerInActiveList+0x7c>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f7fd fbae 	bl	8002baa <vListInsert>
 800544e:	e012      	b.n	8005476 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	429a      	cmp	r2, r3
 8005456:	d206      	bcs.n	8005466 <prvInsertTimerInActiveList+0x62>
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d302      	bcc.n	8005466 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005460:	2301      	movs	r3, #1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	e007      	b.n	8005476 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005466:	4b07      	ldr	r3, [pc, #28]	@ (8005484 <prvInsertTimerInActiveList+0x80>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3304      	adds	r3, #4
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f7fd fb9a 	bl	8002baa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005476:	697b      	ldr	r3, [r7, #20]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000d94 	.word	0x20000d94
 8005484:	20000d90 	.word	0x20000d90

08005488 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08e      	sub	sp, #56	@ 0x38
 800548c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800548e:	e0d4      	b.n	800563a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	da1b      	bge.n	80054ce <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005496:	1d3b      	adds	r3, r7, #4
 8005498:	3304      	adds	r3, #4
 800549a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800549c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10d      	bne.n	80054be <prvProcessReceivedCommands+0x36>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	b672      	cpsid	i
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	b662      	cpsie	i
 80054b6:	61fb      	str	r3, [r7, #28]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c4:	6850      	ldr	r0, [r2, #4]
 80054c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c8:	6892      	ldr	r2, [r2, #8]
 80054ca:	4611      	mov	r1, r2
 80054cc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f2c0 80b2 	blt.w	800563a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e4:	3304      	adds	r3, #4
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7fd fb98 	bl	8002c1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ec:	463b      	mov	r3, r7
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff ff68 	bl	80053c4 <prvSampleTimeNow>
 80054f4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b09      	cmp	r3, #9
 80054fa:	f200 809b 	bhi.w	8005634 <prvProcessReceivedCommands+0x1ac>
 80054fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <prvProcessReceivedCommands+0x7c>)
 8005500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005504:	0800552d 	.word	0x0800552d
 8005508:	0800552d 	.word	0x0800552d
 800550c:	0800552d 	.word	0x0800552d
 8005510:	080055a7 	.word	0x080055a7
 8005514:	080055bb 	.word	0x080055bb
 8005518:	0800560b 	.word	0x0800560b
 800551c:	0800552d 	.word	0x0800552d
 8005520:	0800552d 	.word	0x0800552d
 8005524:	080055a7 	.word	0x080055a7
 8005528:	080055bb 	.word	0x080055bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005532:	f043 0301 	orr.w	r3, r3, #1
 8005536:	b2da      	uxtb	r2, r3
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	18d1      	adds	r1, r2, r3
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800554c:	f7ff ff5a 	bl	8005404 <prvInsertTimerInActiveList>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d070      	beq.n	8005638 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800555c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800555e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005564:	f003 0304 	and.w	r3, r3, #4
 8005568:	2b00      	cmp	r3, #0
 800556a:	d065      	beq.n	8005638 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800556c:	68ba      	ldr	r2, [r7, #8]
 800556e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	441a      	add	r2, r3
 8005574:	2300      	movs	r3, #0
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	2100      	movs	r1, #0
 800557c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800557e:	f7ff fdfb 	bl	8005178 <xTimerGenericCommand>
 8005582:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d156      	bne.n	8005638 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558e:	b672      	cpsid	i
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	b662      	cpsie	i
 800559e:	61bb      	str	r3, [r7, #24]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055b8:	e03f      	b.n	800563a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10d      	bne.n	80055f6 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	b672      	cpsid	i
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	b662      	cpsie	i
 80055ee:	617b      	str	r3, [r7, #20]
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	e7fd      	b.n	80055f2 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	18d1      	adds	r1, r2, r3
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005604:	f7ff fefe 	bl	8005404 <prvInsertTimerInActiveList>
					break;
 8005608:	e017      	b.n	800563a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d103      	bne.n	8005620 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8005618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800561a:	f000 fbd3 	bl	8005dc4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800561e:	e00c      	b.n	800563a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005622:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005626:	f023 0301 	bic.w	r3, r3, #1
 800562a:	b2da      	uxtb	r2, r3
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005632:	e002      	b.n	800563a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8005634:	bf00      	nop
 8005636:	e000      	b.n	800563a <prvProcessReceivedCommands+0x1b2>
					break;
 8005638:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800563a:	4b08      	ldr	r3, [pc, #32]	@ (800565c <prvProcessReceivedCommands+0x1d4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	1d39      	adds	r1, r7, #4
 8005640:	2200      	movs	r2, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f7fd fdd8 	bl	80031f8 <xQueueReceive>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	f47f af20 	bne.w	8005490 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	3730      	adds	r7, #48	@ 0x30
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000d98 	.word	0x20000d98

08005660 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005666:	e04b      	b.n	8005700 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005668:	4b2f      	ldr	r3, [pc, #188]	@ (8005728 <prvSwitchTimerLists+0xc8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005672:	4b2d      	ldr	r3, [pc, #180]	@ (8005728 <prvSwitchTimerLists+0xc8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f7fd facb 	bl	8002c1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d031      	beq.n	8005700 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90e      	bls.n	80056cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ba:	4b1b      	ldr	r3, [pc, #108]	@ (8005728 <prvSwitchTimerLists+0xc8>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	3304      	adds	r3, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	4610      	mov	r0, r2
 80056c6:	f7fd fa70 	bl	8002baa <vListInsert>
 80056ca:	e019      	b.n	8005700 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	693a      	ldr	r2, [r7, #16]
 80056d4:	2100      	movs	r1, #0
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f7ff fd4e 	bl	8005178 <xTimerGenericCommand>
 80056dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10d      	bne.n	8005700 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	b672      	cpsid	i
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	b662      	cpsie	i
 80056f8:	603b      	str	r3, [r7, #0]
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005700:	4b09      	ldr	r3, [pc, #36]	@ (8005728 <prvSwitchTimerLists+0xc8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1ae      	bne.n	8005668 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800570a:	4b07      	ldr	r3, [pc, #28]	@ (8005728 <prvSwitchTimerLists+0xc8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005710:	4b06      	ldr	r3, [pc, #24]	@ (800572c <prvSwitchTimerLists+0xcc>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a04      	ldr	r2, [pc, #16]	@ (8005728 <prvSwitchTimerLists+0xc8>)
 8005716:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005718:	4a04      	ldr	r2, [pc, #16]	@ (800572c <prvSwitchTimerLists+0xcc>)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	6013      	str	r3, [r2, #0]
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000d90 	.word	0x20000d90
 800572c:	20000d94 	.word	0x20000d94

08005730 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005736:	f000 f949 	bl	80059cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800573a:	4b15      	ldr	r3, [pc, #84]	@ (8005790 <prvCheckForValidListAndQueue+0x60>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d120      	bne.n	8005784 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005742:	4814      	ldr	r0, [pc, #80]	@ (8005794 <prvCheckForValidListAndQueue+0x64>)
 8005744:	f7fd f9e0 	bl	8002b08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005748:	4813      	ldr	r0, [pc, #76]	@ (8005798 <prvCheckForValidListAndQueue+0x68>)
 800574a:	f7fd f9dd 	bl	8002b08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800574e:	4b13      	ldr	r3, [pc, #76]	@ (800579c <prvCheckForValidListAndQueue+0x6c>)
 8005750:	4a10      	ldr	r2, [pc, #64]	@ (8005794 <prvCheckForValidListAndQueue+0x64>)
 8005752:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005754:	4b12      	ldr	r3, [pc, #72]	@ (80057a0 <prvCheckForValidListAndQueue+0x70>)
 8005756:	4a10      	ldr	r2, [pc, #64]	@ (8005798 <prvCheckForValidListAndQueue+0x68>)
 8005758:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800575a:	2300      	movs	r3, #0
 800575c:	9300      	str	r3, [sp, #0]
 800575e:	4b11      	ldr	r3, [pc, #68]	@ (80057a4 <prvCheckForValidListAndQueue+0x74>)
 8005760:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <prvCheckForValidListAndQueue+0x78>)
 8005762:	2110      	movs	r1, #16
 8005764:	200a      	movs	r0, #10
 8005766:	f7fd faef 	bl	8002d48 <xQueueGenericCreateStatic>
 800576a:	4603      	mov	r3, r0
 800576c:	4a08      	ldr	r2, [pc, #32]	@ (8005790 <prvCheckForValidListAndQueue+0x60>)
 800576e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005770:	4b07      	ldr	r3, [pc, #28]	@ (8005790 <prvCheckForValidListAndQueue+0x60>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005778:	4b05      	ldr	r3, [pc, #20]	@ (8005790 <prvCheckForValidListAndQueue+0x60>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	490b      	ldr	r1, [pc, #44]	@ (80057ac <prvCheckForValidListAndQueue+0x7c>)
 800577e:	4618      	mov	r0, r3
 8005780:	f7fd ff32 	bl	80035e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005784:	f000 f958 	bl	8005a38 <vPortExitCritical>
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20000d98 	.word	0x20000d98
 8005794:	20000d68 	.word	0x20000d68
 8005798:	20000d7c 	.word	0x20000d7c
 800579c:	20000d90 	.word	0x20000d90
 80057a0:	20000d94 	.word	0x20000d94
 80057a4:	20000e44 	.word	0x20000e44
 80057a8:	20000da4 	.word	0x20000da4
 80057ac:	08006210 	.word	0x08006210

080057b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	3b04      	subs	r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	3b04      	subs	r3, #4
 80057ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f023 0201 	bic.w	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	3b04      	subs	r3, #4
 80057de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005814 <pxPortInitialiseStack+0x64>)
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b14      	subs	r3, #20
 80057ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3b04      	subs	r3, #4
 80057f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f06f 0202 	mvn.w	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3b20      	subs	r3, #32
 8005804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005806:	68fb      	ldr	r3, [r7, #12]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	08005819 	.word	0x08005819

08005818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <prvTaskExitError+0x60>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582a:	d00d      	beq.n	8005848 <prvTaskExitError+0x30>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	b672      	cpsid	i
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	b662      	cpsie	i
 8005840:	60fb      	str	r3, [r7, #12]
}
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <prvTaskExitError+0x2c>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	b672      	cpsid	i
 800584e:	f383 8811 	msr	BASEPRI, r3
 8005852:	f3bf 8f6f 	isb	sy
 8005856:	f3bf 8f4f 	dsb	sy
 800585a:	b662      	cpsie	i
 800585c:	60bb      	str	r3, [r7, #8]
}
 800585e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005860:	bf00      	nop
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0fc      	beq.n	8005862 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	2000000c 	.word	0x2000000c
 800587c:	00000000 	.word	0x00000000

08005880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <pxCurrentTCBConst2>)
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6808      	ldr	r0, [r1, #0]
 8005886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	f380 8809 	msr	PSP, r0
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	4770      	bx	lr
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst2>:
 80058a0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058a8:	4808      	ldr	r0, [pc, #32]	@ (80058cc <prvPortStartFirstTask+0x24>)
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f380 8808 	msr	MSP, r0
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8814 	msr	CONTROL, r0
 80058ba:	b662      	cpsie	i
 80058bc:	b661      	cpsie	f
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	df00      	svc	0
 80058c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ca:	bf00      	nop
 80058cc:	e000ed08 	.word	0xe000ed08

080058d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058d6:	4b37      	ldr	r3, [pc, #220]	@ (80059b4 <xPortStartScheduler+0xe4>)
 80058d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	22ff      	movs	r2, #255	@ 0xff
 80058e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058f0:	78fb      	ldrb	r3, [r7, #3]
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	4b2f      	ldr	r3, [pc, #188]	@ (80059b8 <xPortStartScheduler+0xe8>)
 80058fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058fe:	4b2f      	ldr	r3, [pc, #188]	@ (80059bc <xPortStartScheduler+0xec>)
 8005900:	2207      	movs	r2, #7
 8005902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005904:	e009      	b.n	800591a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005906:	4b2d      	ldr	r3, [pc, #180]	@ (80059bc <xPortStartScheduler+0xec>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3b01      	subs	r3, #1
 800590c:	4a2b      	ldr	r2, [pc, #172]	@ (80059bc <xPortStartScheduler+0xec>)
 800590e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005910:	78fb      	ldrb	r3, [r7, #3]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005922:	2b80      	cmp	r3, #128	@ 0x80
 8005924:	d0ef      	beq.n	8005906 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005926:	4b25      	ldr	r3, [pc, #148]	@ (80059bc <xPortStartScheduler+0xec>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f1c3 0307 	rsb	r3, r3, #7
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00d      	beq.n	800594e <xPortStartScheduler+0x7e>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	b672      	cpsid	i
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	b662      	cpsie	i
 8005946:	60bb      	str	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800594e:	4b1b      	ldr	r3, [pc, #108]	@ (80059bc <xPortStartScheduler+0xec>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	4a19      	ldr	r2, [pc, #100]	@ (80059bc <xPortStartScheduler+0xec>)
 8005956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005958:	4b18      	ldr	r3, [pc, #96]	@ (80059bc <xPortStartScheduler+0xec>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005960:	4a16      	ldr	r2, [pc, #88]	@ (80059bc <xPortStartScheduler+0xec>)
 8005962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800596c:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <xPortStartScheduler+0xf0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a13      	ldr	r2, [pc, #76]	@ (80059c0 <xPortStartScheduler+0xf0>)
 8005972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005978:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <xPortStartScheduler+0xf0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a10      	ldr	r2, [pc, #64]	@ (80059c0 <xPortStartScheduler+0xf0>)
 800597e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005984:	f000 f8dc 	bl	8005b40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005988:	4b0e      	ldr	r3, [pc, #56]	@ (80059c4 <xPortStartScheduler+0xf4>)
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800598e:	f000 f8fb 	bl	8005b88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005992:	4b0d      	ldr	r3, [pc, #52]	@ (80059c8 <xPortStartScheduler+0xf8>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a0c      	ldr	r2, [pc, #48]	@ (80059c8 <xPortStartScheduler+0xf8>)
 8005998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800599e:	f7ff ff83 	bl	80058a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059a2:	f7fe fddf 	bl	8004564 <vTaskSwitchContext>
	prvTaskExitError();
 80059a6:	f7ff ff37 	bl	8005818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	e000e400 	.word	0xe000e400
 80059b8:	20000e94 	.word	0x20000e94
 80059bc:	20000e98 	.word	0x20000e98
 80059c0:	e000ed20 	.word	0xe000ed20
 80059c4:	2000000c 	.word	0x2000000c
 80059c8:	e000ef34 	.word	0xe000ef34

080059cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
	__asm volatile
 80059d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d6:	b672      	cpsid	i
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	b662      	cpsie	i
 80059e6:	607b      	str	r3, [r7, #4]
}
 80059e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059ea:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <vPortEnterCritical+0x64>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3301      	adds	r3, #1
 80059f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005a30 <vPortEnterCritical+0x64>)
 80059f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059f4:	4b0e      	ldr	r3, [pc, #56]	@ (8005a30 <vPortEnterCritical+0x64>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d112      	bne.n	8005a22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <vPortEnterCritical+0x68>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <vPortEnterCritical+0x56>
	__asm volatile
 8005a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0a:	b672      	cpsid	i
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	b662      	cpsie	i
 8005a1a:	603b      	str	r3, [r7, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	bf00      	nop
 8005a20:	e7fd      	b.n	8005a1e <vPortEnterCritical+0x52>
	}
}
 8005a22:	bf00      	nop
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	2000000c 	.word	0x2000000c
 8005a34:	e000ed04 	.word	0xe000ed04

08005a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a3e:	4b13      	ldr	r3, [pc, #76]	@ (8005a8c <vPortExitCritical+0x54>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10d      	bne.n	8005a62 <vPortExitCritical+0x2a>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4a:	b672      	cpsid	i
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	b662      	cpsie	i
 8005a5a:	607b      	str	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005a62:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <vPortExitCritical+0x54>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	4a08      	ldr	r2, [pc, #32]	@ (8005a8c <vPortExitCritical+0x54>)
 8005a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <vPortExitCritical+0x54>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <vPortExitCritical+0x48>
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f383 8811 	msr	BASEPRI, r3
}
 8005a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a90:	f3ef 8009 	mrs	r0, PSP
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4b15      	ldr	r3, [pc, #84]	@ (8005af0 <pxCurrentTCBConst>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f01e 0f10 	tst.w	lr, #16
 8005aa0:	bf08      	it	eq
 8005aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ab4:	b672      	cpsid	i
 8005ab6:	f380 8811 	msr	BASEPRI, r0
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	b662      	cpsie	i
 8005ac4:	f7fe fd4e 	bl	8004564 <vTaskSwitchContext>
 8005ac8:	f04f 0000 	mov.w	r0, #0
 8005acc:	f380 8811 	msr	BASEPRI, r0
 8005ad0:	bc09      	pop	{r0, r3}
 8005ad2:	6819      	ldr	r1, [r3, #0]
 8005ad4:	6808      	ldr	r0, [r1, #0]
 8005ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	f01e 0f10 	tst.w	lr, #16
 8005ade:	bf08      	it	eq
 8005ae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ae4:	f380 8809 	msr	PSP, r0
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop

08005af0 <pxCurrentTCBConst>:
 8005af0:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	b672      	cpsid	i
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	b662      	cpsie	i
 8005b12:	607b      	str	r3, [r7, #4]
}
 8005b14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b16:	f7fe fc69 	bl	80043ec <xTaskIncrementTick>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b20:	4b06      	ldr	r3, [pc, #24]	@ (8005b3c <xPortSysTickHandler+0x44>)
 8005b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	2300      	movs	r3, #0
 8005b2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	f383 8811 	msr	BASEPRI, r3
}
 8005b32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b34:	bf00      	nop
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b44:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <vPortSetupTimerInterrupt+0x34>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <vPortSetupTimerInterrupt+0x38>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b50:	4b0a      	ldr	r3, [pc, #40]	@ (8005b7c <vPortSetupTimerInterrupt+0x3c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a0a      	ldr	r2, [pc, #40]	@ (8005b80 <vPortSetupTimerInterrupt+0x40>)
 8005b56:	fba2 2303 	umull	r2, r3, r2, r3
 8005b5a:	099b      	lsrs	r3, r3, #6
 8005b5c:	4a09      	ldr	r2, [pc, #36]	@ (8005b84 <vPortSetupTimerInterrupt+0x44>)
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b62:	4b04      	ldr	r3, [pc, #16]	@ (8005b74 <vPortSetupTimerInterrupt+0x34>)
 8005b64:	2207      	movs	r2, #7
 8005b66:	601a      	str	r2, [r3, #0]
}
 8005b68:	bf00      	nop
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	e000e010 	.word	0xe000e010
 8005b78:	e000e018 	.word	0xe000e018
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	10624dd3 	.word	0x10624dd3
 8005b84:	e000e014 	.word	0xe000e014

08005b88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b98 <vPortEnableVFP+0x10>
 8005b8c:	6801      	ldr	r1, [r0, #0]
 8005b8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b92:	6001      	str	r1, [r0, #0]
 8005b94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b96:	bf00      	nop
 8005b98:	e000ed88 	.word	0xe000ed88

08005b9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ba2:	f3ef 8305 	mrs	r3, IPSR
 8005ba6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	d917      	bls.n	8005bde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bae:	4a1a      	ldr	r2, [pc, #104]	@ (8005c18 <vPortValidateInterruptPriority+0x7c>)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bb8:	4b18      	ldr	r3, [pc, #96]	@ (8005c1c <vPortValidateInterruptPriority+0x80>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	7afa      	ldrb	r2, [r7, #11]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d20d      	bcs.n	8005bde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc6:	b672      	cpsid	i
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	b662      	cpsie	i
 8005bd6:	607b      	str	r3, [r7, #4]
}
 8005bd8:	bf00      	nop
 8005bda:	bf00      	nop
 8005bdc:	e7fd      	b.n	8005bda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bde:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <vPortValidateInterruptPriority+0x84>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005be6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c24 <vPortValidateInterruptPriority+0x88>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d90d      	bls.n	8005c0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	b672      	cpsid	i
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	b662      	cpsie	i
 8005c02:	603b      	str	r3, [r7, #0]
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <vPortValidateInterruptPriority+0x6a>
	}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000e3f0 	.word	0xe000e3f0
 8005c1c:	20000e94 	.word	0x20000e94
 8005c20:	e000ed0c 	.word	0xe000ed0c
 8005c24:	20000e98 	.word	0x20000e98

08005c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b08a      	sub	sp, #40	@ 0x28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c30:	2300      	movs	r3, #0
 8005c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c34:	f7fe fb1c 	bl	8004270 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c38:	4b5d      	ldr	r3, [pc, #372]	@ (8005db0 <pvPortMalloc+0x188>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c40:	f000 f920 	bl	8005e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c44:	4b5b      	ldr	r3, [pc, #364]	@ (8005db4 <pvPortMalloc+0x18c>)
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8094 	bne.w	8005d7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d020      	beq.n	8005c9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8005c58:	2208      	movs	r2, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d017      	beq.n	8005c9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f023 0307 	bic.w	r3, r3, #7
 8005c70:	3308      	adds	r3, #8
 8005c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d00d      	beq.n	8005c9a <pvPortMalloc+0x72>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	b672      	cpsid	i
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	b662      	cpsie	i
 8005c92:	617b      	str	r3, [r7, #20]
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop
 8005c98:	e7fd      	b.n	8005c96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d06c      	beq.n	8005d7a <pvPortMalloc+0x152>
 8005ca0:	4b45      	ldr	r3, [pc, #276]	@ (8005db8 <pvPortMalloc+0x190>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d867      	bhi.n	8005d7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005caa:	4b44      	ldr	r3, [pc, #272]	@ (8005dbc <pvPortMalloc+0x194>)
 8005cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cae:	4b43      	ldr	r3, [pc, #268]	@ (8005dbc <pvPortMalloc+0x194>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cb4:	e004      	b.n	8005cc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8005cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d903      	bls.n	8005cd2 <pvPortMalloc+0xaa>
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1f1      	bne.n	8005cb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cd2:	4b37      	ldr	r3, [pc, #220]	@ (8005db0 <pvPortMalloc+0x188>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d04e      	beq.n	8005d7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2208      	movs	r2, #8
 8005ce2:	4413      	add	r3, r2
 8005ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	1ad2      	subs	r2, r2, r3
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d922      	bls.n	8005d44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4413      	add	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <pvPortMalloc+0x104>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d14:	b672      	cpsid	i
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	b662      	cpsie	i
 8005d24:	613b      	str	r3, [r7, #16]
}
 8005d26:	bf00      	nop
 8005d28:	bf00      	nop
 8005d2a:	e7fd      	b.n	8005d28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	1ad2      	subs	r2, r2, r3
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d3e:	69b8      	ldr	r0, [r7, #24]
 8005d40:	f000 f902 	bl	8005f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d44:	4b1c      	ldr	r3, [pc, #112]	@ (8005db8 <pvPortMalloc+0x190>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005db8 <pvPortMalloc+0x190>)
 8005d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d52:	4b19      	ldr	r3, [pc, #100]	@ (8005db8 <pvPortMalloc+0x190>)
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <pvPortMalloc+0x198>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d203      	bcs.n	8005d66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d5e:	4b16      	ldr	r3, [pc, #88]	@ (8005db8 <pvPortMalloc+0x190>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a17      	ldr	r2, [pc, #92]	@ (8005dc0 <pvPortMalloc+0x198>)
 8005d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	4b12      	ldr	r3, [pc, #72]	@ (8005db4 <pvPortMalloc+0x18c>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	2200      	movs	r2, #0
 8005d78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d7a:	f7fe fa87 	bl	800428c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00d      	beq.n	8005da4 <pvPortMalloc+0x17c>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8c:	b672      	cpsid	i
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	b662      	cpsie	i
 8005d9c:	60fb      	str	r3, [r7, #12]
}
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <pvPortMalloc+0x178>
	return pvReturn;
 8005da4:	69fb      	ldr	r3, [r7, #28]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	@ 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20004aa4 	.word	0x20004aa4
 8005db4:	20004ab0 	.word	0x20004ab0
 8005db8:	20004aa8 	.word	0x20004aa8
 8005dbc:	20004a9c 	.word	0x20004a9c
 8005dc0:	20004aac 	.word	0x20004aac

08005dc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d04e      	beq.n	8005e74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dd6:	2308      	movs	r3, #8
 8005dd8:	425b      	negs	r3, r3
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4413      	add	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	4b24      	ldr	r3, [pc, #144]	@ (8005e7c <vPortFree+0xb8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10d      	bne.n	8005e0e <vPortFree+0x4a>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	b672      	cpsid	i
 8005df8:	f383 8811 	msr	BASEPRI, r3
 8005dfc:	f3bf 8f6f 	isb	sy
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	b662      	cpsie	i
 8005e06:	60fb      	str	r3, [r7, #12]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00d      	beq.n	8005e32 <vPortFree+0x6e>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	b672      	cpsid	i
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	b662      	cpsie	i
 8005e2a:	60bb      	str	r3, [r7, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	e7fd      	b.n	8005e2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	4b11      	ldr	r3, [pc, #68]	@ (8005e7c <vPortFree+0xb8>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d019      	beq.n	8005e74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d115      	bne.n	8005e74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <vPortFree+0xb8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	43db      	mvns	r3, r3
 8005e52:	401a      	ands	r2, r3
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e58:	f7fe fa0a 	bl	8004270 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <vPortFree+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4413      	add	r3, r2
 8005e66:	4a06      	ldr	r2, [pc, #24]	@ (8005e80 <vPortFree+0xbc>)
 8005e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e6a:	6938      	ldr	r0, [r7, #16]
 8005e6c:	f000 f86c 	bl	8005f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e70:	f7fe fa0c 	bl	800428c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20004ab0 	.word	0x20004ab0
 8005e80:	20004aa8 	.word	0x20004aa8

08005e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e90:	4b27      	ldr	r3, [pc, #156]	@ (8005f30 <prvHeapInit+0xac>)
 8005e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d00c      	beq.n	8005eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0307 	bic.w	r3, r3, #7
 8005eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005eac:	68ba      	ldr	r2, [r7, #8]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8005f30 <prvHeapInit+0xac>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <prvHeapInit+0xb0>)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8005f34 <prvHeapInit+0xb0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	4a15      	ldr	r2, [pc, #84]	@ (8005f38 <prvHeapInit+0xb4>)
 8005ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee6:	4b14      	ldr	r3, [pc, #80]	@ (8005f38 <prvHeapInit+0xb4>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2200      	movs	r2, #0
 8005eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eee:	4b12      	ldr	r3, [pc, #72]	@ (8005f38 <prvHeapInit+0xb4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <prvHeapInit+0xb4>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	@ (8005f3c <prvHeapInit+0xb8>)
 8005f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a09      	ldr	r2, [pc, #36]	@ (8005f40 <prvHeapInit+0xbc>)
 8005f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f1c:	4b09      	ldr	r3, [pc, #36]	@ (8005f44 <prvHeapInit+0xc0>)
 8005f1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f22:	601a      	str	r2, [r3, #0]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr
 8005f30:	20000e9c 	.word	0x20000e9c
 8005f34:	20004a9c 	.word	0x20004a9c
 8005f38:	20004aa4 	.word	0x20004aa4
 8005f3c:	20004aac 	.word	0x20004aac
 8005f40:	20004aa8 	.word	0x20004aa8
 8005f44:	20004ab0 	.word	0x20004ab0

08005f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f50:	4b28      	ldr	r3, [pc, #160]	@ (8005ff4 <prvInsertBlockIntoFreeList+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e002      	b.n	8005f5c <prvInsertBlockIntoFreeList+0x14>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d8f7      	bhi.n	8005f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68ba      	ldr	r2, [r7, #8]
 8005f70:	4413      	add	r3, r2
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d108      	bne.n	8005f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	441a      	add	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	68ba      	ldr	r2, [r7, #8]
 8005f94:	441a      	add	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d118      	bne.n	8005fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b15      	ldr	r3, [pc, #84]	@ (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d00d      	beq.n	8005fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685a      	ldr	r2, [r3, #4]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	441a      	add	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	601a      	str	r2, [r3, #0]
 8005fc4:	e008      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	601a      	str	r2, [r3, #0]
 8005fce:	e003      	b.n	8005fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d002      	beq.n	8005fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	20004a9c 	.word	0x20004a9c
 8005ff8:	20004aa4 	.word	0x20004aa4

08005ffc <memset>:
 8005ffc:	4402      	add	r2, r0
 8005ffe:	4603      	mov	r3, r0
 8006000:	4293      	cmp	r3, r2
 8006002:	d100      	bne.n	8006006 <memset+0xa>
 8006004:	4770      	bx	lr
 8006006:	f803 1b01 	strb.w	r1, [r3], #1
 800600a:	e7f9      	b.n	8006000 <memset+0x4>

0800600c <_reclaim_reent>:
 800600c:	4b29      	ldr	r3, [pc, #164]	@ (80060b4 <_reclaim_reent+0xa8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4283      	cmp	r3, r0
 8006012:	b570      	push	{r4, r5, r6, lr}
 8006014:	4604      	mov	r4, r0
 8006016:	d04b      	beq.n	80060b0 <_reclaim_reent+0xa4>
 8006018:	69c3      	ldr	r3, [r0, #28]
 800601a:	b1ab      	cbz	r3, 8006048 <_reclaim_reent+0x3c>
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	b16b      	cbz	r3, 800603c <_reclaim_reent+0x30>
 8006020:	2500      	movs	r5, #0
 8006022:	69e3      	ldr	r3, [r4, #28]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	5959      	ldr	r1, [r3, r5]
 8006028:	2900      	cmp	r1, #0
 800602a:	d13b      	bne.n	80060a4 <_reclaim_reent+0x98>
 800602c:	3504      	adds	r5, #4
 800602e:	2d80      	cmp	r5, #128	@ 0x80
 8006030:	d1f7      	bne.n	8006022 <_reclaim_reent+0x16>
 8006032:	69e3      	ldr	r3, [r4, #28]
 8006034:	4620      	mov	r0, r4
 8006036:	68d9      	ldr	r1, [r3, #12]
 8006038:	f000 f872 	bl	8006120 <_free_r>
 800603c:	69e3      	ldr	r3, [r4, #28]
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	b111      	cbz	r1, 8006048 <_reclaim_reent+0x3c>
 8006042:	4620      	mov	r0, r4
 8006044:	f000 f86c 	bl	8006120 <_free_r>
 8006048:	6961      	ldr	r1, [r4, #20]
 800604a:	b111      	cbz	r1, 8006052 <_reclaim_reent+0x46>
 800604c:	4620      	mov	r0, r4
 800604e:	f000 f867 	bl	8006120 <_free_r>
 8006052:	69e1      	ldr	r1, [r4, #28]
 8006054:	b111      	cbz	r1, 800605c <_reclaim_reent+0x50>
 8006056:	4620      	mov	r0, r4
 8006058:	f000 f862 	bl	8006120 <_free_r>
 800605c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800605e:	b111      	cbz	r1, 8006066 <_reclaim_reent+0x5a>
 8006060:	4620      	mov	r0, r4
 8006062:	f000 f85d 	bl	8006120 <_free_r>
 8006066:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006068:	b111      	cbz	r1, 8006070 <_reclaim_reent+0x64>
 800606a:	4620      	mov	r0, r4
 800606c:	f000 f858 	bl	8006120 <_free_r>
 8006070:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006072:	b111      	cbz	r1, 800607a <_reclaim_reent+0x6e>
 8006074:	4620      	mov	r0, r4
 8006076:	f000 f853 	bl	8006120 <_free_r>
 800607a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800607c:	b111      	cbz	r1, 8006084 <_reclaim_reent+0x78>
 800607e:	4620      	mov	r0, r4
 8006080:	f000 f84e 	bl	8006120 <_free_r>
 8006084:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006086:	b111      	cbz	r1, 800608e <_reclaim_reent+0x82>
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f849 	bl	8006120 <_free_r>
 800608e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006090:	b111      	cbz	r1, 8006098 <_reclaim_reent+0x8c>
 8006092:	4620      	mov	r0, r4
 8006094:	f000 f844 	bl	8006120 <_free_r>
 8006098:	6a23      	ldr	r3, [r4, #32]
 800609a:	b14b      	cbz	r3, 80060b0 <_reclaim_reent+0xa4>
 800609c:	4620      	mov	r0, r4
 800609e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060a2:	4718      	bx	r3
 80060a4:	680e      	ldr	r6, [r1, #0]
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 f83a 	bl	8006120 <_free_r>
 80060ac:	4631      	mov	r1, r6
 80060ae:	e7bb      	b.n	8006028 <_reclaim_reent+0x1c>
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	bf00      	nop
 80060b4:	20000010 	.word	0x20000010

080060b8 <__libc_init_array>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	4d0d      	ldr	r5, [pc, #52]	@ (80060f0 <__libc_init_array+0x38>)
 80060bc:	4c0d      	ldr	r4, [pc, #52]	@ (80060f4 <__libc_init_array+0x3c>)
 80060be:	1b64      	subs	r4, r4, r5
 80060c0:	10a4      	asrs	r4, r4, #2
 80060c2:	2600      	movs	r6, #0
 80060c4:	42a6      	cmp	r6, r4
 80060c6:	d109      	bne.n	80060dc <__libc_init_array+0x24>
 80060c8:	4d0b      	ldr	r5, [pc, #44]	@ (80060f8 <__libc_init_array+0x40>)
 80060ca:	4c0c      	ldr	r4, [pc, #48]	@ (80060fc <__libc_init_array+0x44>)
 80060cc:	f000 f87e 	bl	80061cc <_init>
 80060d0:	1b64      	subs	r4, r4, r5
 80060d2:	10a4      	asrs	r4, r4, #2
 80060d4:	2600      	movs	r6, #0
 80060d6:	42a6      	cmp	r6, r4
 80060d8:	d105      	bne.n	80060e6 <__libc_init_array+0x2e>
 80060da:	bd70      	pop	{r4, r5, r6, pc}
 80060dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80060e0:	4798      	blx	r3
 80060e2:	3601      	adds	r6, #1
 80060e4:	e7ee      	b.n	80060c4 <__libc_init_array+0xc>
 80060e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ea:	4798      	blx	r3
 80060ec:	3601      	adds	r6, #1
 80060ee:	e7f2      	b.n	80060d6 <__libc_init_array+0x1e>
 80060f0:	08006254 	.word	0x08006254
 80060f4:	08006254 	.word	0x08006254
 80060f8:	08006254 	.word	0x08006254
 80060fc:	08006258 	.word	0x08006258

08006100 <__retarget_lock_acquire_recursive>:
 8006100:	4770      	bx	lr

08006102 <__retarget_lock_release_recursive>:
 8006102:	4770      	bx	lr

08006104 <memcpy>:
 8006104:	440a      	add	r2, r1
 8006106:	4291      	cmp	r1, r2
 8006108:	f100 33ff 	add.w	r3, r0, #4294967295
 800610c:	d100      	bne.n	8006110 <memcpy+0xc>
 800610e:	4770      	bx	lr
 8006110:	b510      	push	{r4, lr}
 8006112:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800611a:	4291      	cmp	r1, r2
 800611c:	d1f9      	bne.n	8006112 <memcpy+0xe>
 800611e:	bd10      	pop	{r4, pc}

08006120 <_free_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4605      	mov	r5, r0
 8006124:	2900      	cmp	r1, #0
 8006126:	d041      	beq.n	80061ac <_free_r+0x8c>
 8006128:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800612c:	1f0c      	subs	r4, r1, #4
 800612e:	2b00      	cmp	r3, #0
 8006130:	bfb8      	it	lt
 8006132:	18e4      	addlt	r4, r4, r3
 8006134:	f000 f83e 	bl	80061b4 <__malloc_lock>
 8006138:	4a1d      	ldr	r2, [pc, #116]	@ (80061b0 <_free_r+0x90>)
 800613a:	6813      	ldr	r3, [r2, #0]
 800613c:	b933      	cbnz	r3, 800614c <_free_r+0x2c>
 800613e:	6063      	str	r3, [r4, #4]
 8006140:	6014      	str	r4, [r2, #0]
 8006142:	4628      	mov	r0, r5
 8006144:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006148:	f000 b83a 	b.w	80061c0 <__malloc_unlock>
 800614c:	42a3      	cmp	r3, r4
 800614e:	d908      	bls.n	8006162 <_free_r+0x42>
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	1821      	adds	r1, r4, r0
 8006154:	428b      	cmp	r3, r1
 8006156:	bf01      	itttt	eq
 8006158:	6819      	ldreq	r1, [r3, #0]
 800615a:	685b      	ldreq	r3, [r3, #4]
 800615c:	1809      	addeq	r1, r1, r0
 800615e:	6021      	streq	r1, [r4, #0]
 8006160:	e7ed      	b.n	800613e <_free_r+0x1e>
 8006162:	461a      	mov	r2, r3
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	b10b      	cbz	r3, 800616c <_free_r+0x4c>
 8006168:	42a3      	cmp	r3, r4
 800616a:	d9fa      	bls.n	8006162 <_free_r+0x42>
 800616c:	6811      	ldr	r1, [r2, #0]
 800616e:	1850      	adds	r0, r2, r1
 8006170:	42a0      	cmp	r0, r4
 8006172:	d10b      	bne.n	800618c <_free_r+0x6c>
 8006174:	6820      	ldr	r0, [r4, #0]
 8006176:	4401      	add	r1, r0
 8006178:	1850      	adds	r0, r2, r1
 800617a:	4283      	cmp	r3, r0
 800617c:	6011      	str	r1, [r2, #0]
 800617e:	d1e0      	bne.n	8006142 <_free_r+0x22>
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	6053      	str	r3, [r2, #4]
 8006186:	4408      	add	r0, r1
 8006188:	6010      	str	r0, [r2, #0]
 800618a:	e7da      	b.n	8006142 <_free_r+0x22>
 800618c:	d902      	bls.n	8006194 <_free_r+0x74>
 800618e:	230c      	movs	r3, #12
 8006190:	602b      	str	r3, [r5, #0]
 8006192:	e7d6      	b.n	8006142 <_free_r+0x22>
 8006194:	6820      	ldr	r0, [r4, #0]
 8006196:	1821      	adds	r1, r4, r0
 8006198:	428b      	cmp	r3, r1
 800619a:	bf04      	itt	eq
 800619c:	6819      	ldreq	r1, [r3, #0]
 800619e:	685b      	ldreq	r3, [r3, #4]
 80061a0:	6063      	str	r3, [r4, #4]
 80061a2:	bf04      	itt	eq
 80061a4:	1809      	addeq	r1, r1, r0
 80061a6:	6021      	streq	r1, [r4, #0]
 80061a8:	6054      	str	r4, [r2, #4]
 80061aa:	e7ca      	b.n	8006142 <_free_r+0x22>
 80061ac:	bd38      	pop	{r3, r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	20004bf0 	.word	0x20004bf0

080061b4 <__malloc_lock>:
 80061b4:	4801      	ldr	r0, [pc, #4]	@ (80061bc <__malloc_lock+0x8>)
 80061b6:	f7ff bfa3 	b.w	8006100 <__retarget_lock_acquire_recursive>
 80061ba:	bf00      	nop
 80061bc:	20004bec 	.word	0x20004bec

080061c0 <__malloc_unlock>:
 80061c0:	4801      	ldr	r0, [pc, #4]	@ (80061c8 <__malloc_unlock+0x8>)
 80061c2:	f7ff bf9e 	b.w	8006102 <__retarget_lock_release_recursive>
 80061c6:	bf00      	nop
 80061c8:	20004bec 	.word	0x20004bec

080061cc <_init>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	bf00      	nop
 80061d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061d2:	bc08      	pop	{r3}
 80061d4:	469e      	mov	lr, r3
 80061d6:	4770      	bx	lr

080061d8 <_fini>:
 80061d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061da:	bf00      	nop
 80061dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061de:	bc08      	pop	{r3}
 80061e0:	469e      	mov	lr, r3
 80061e2:	4770      	bx	lr
