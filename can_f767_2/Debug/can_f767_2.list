
can_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006714  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006914  08006914  00007914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800698c  0800698c  0000798c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006994  08006994  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006994  08006994  00007994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006998  08006998  00007998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800699c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb4  20000060  080069fc  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c14  080069fc  00008c14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ad  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f63  00000000  00000000  0001b13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  0001ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d07  00000000  00000000  0001fa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ae4  00000000  00000000  0002271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f91c8  00000000  00000000  00033200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c3c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  0012c40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00130218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080068fc 	.word	0x080068fc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080068fc 	.word	0x080068fc

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b988 	b.w	8000568 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	468e      	mov	lr, r1
 8000278:	4604      	mov	r4, r0
 800027a:	4688      	mov	r8, r1
 800027c:	2b00      	cmp	r3, #0
 800027e:	d14a      	bne.n	8000316 <__udivmoddi4+0xa6>
 8000280:	428a      	cmp	r2, r1
 8000282:	4617      	mov	r7, r2
 8000284:	d962      	bls.n	800034c <__udivmoddi4+0xdc>
 8000286:	fab2 f682 	clz	r6, r2
 800028a:	b14e      	cbz	r6, 80002a0 <__udivmoddi4+0x30>
 800028c:	f1c6 0320 	rsb	r3, r6, #32
 8000290:	fa01 f806 	lsl.w	r8, r1, r6
 8000294:	fa20 f303 	lsr.w	r3, r0, r3
 8000298:	40b7      	lsls	r7, r6
 800029a:	ea43 0808 	orr.w	r8, r3, r8
 800029e:	40b4      	lsls	r4, r6
 80002a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002a4:	fa1f fc87 	uxth.w	ip, r7
 80002a8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ac:	0c23      	lsrs	r3, r4, #16
 80002ae:	fb0e 8811 	mls	r8, lr, r1, r8
 80002b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0x62>
 80002be:	18fb      	adds	r3, r7, r3
 80002c0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002c4:	f080 80ea 	bcs.w	800049c <__udivmoddi4+0x22c>
 80002c8:	429a      	cmp	r2, r3
 80002ca:	f240 80e7 	bls.w	800049c <__udivmoddi4+0x22c>
 80002ce:	3902      	subs	r1, #2
 80002d0:	443b      	add	r3, r7
 80002d2:	1a9a      	subs	r2, r3, r2
 80002d4:	b2a3      	uxth	r3, r4
 80002d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002da:	fb0e 2210 	mls	r2, lr, r0, r2
 80002de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002e2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e6:	459c      	cmp	ip, r3
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0x8e>
 80002ea:	18fb      	adds	r3, r7, r3
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	f080 80d6 	bcs.w	80004a0 <__udivmoddi4+0x230>
 80002f4:	459c      	cmp	ip, r3
 80002f6:	f240 80d3 	bls.w	80004a0 <__udivmoddi4+0x230>
 80002fa:	443b      	add	r3, r7
 80002fc:	3802      	subs	r0, #2
 80002fe:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000302:	eba3 030c 	sub.w	r3, r3, ip
 8000306:	2100      	movs	r1, #0
 8000308:	b11d      	cbz	r5, 8000312 <__udivmoddi4+0xa2>
 800030a:	40f3      	lsrs	r3, r6
 800030c:	2200      	movs	r2, #0
 800030e:	e9c5 3200 	strd	r3, r2, [r5]
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d905      	bls.n	8000326 <__udivmoddi4+0xb6>
 800031a:	b10d      	cbz	r5, 8000320 <__udivmoddi4+0xb0>
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	2100      	movs	r1, #0
 8000322:	4608      	mov	r0, r1
 8000324:	e7f5      	b.n	8000312 <__udivmoddi4+0xa2>
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	d146      	bne.n	80003bc <__udivmoddi4+0x14c>
 800032e:	4573      	cmp	r3, lr
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xc8>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 8105 	bhi.w	8000542 <__udivmoddi4+0x2d2>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb6e 0203 	sbc.w	r2, lr, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4690      	mov	r8, r2
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e5      	beq.n	8000312 <__udivmoddi4+0xa2>
 8000346:	e9c5 4800 	strd	r4, r8, [r5]
 800034a:	e7e2      	b.n	8000312 <__udivmoddi4+0xa2>
 800034c:	2a00      	cmp	r2, #0
 800034e:	f000 8090 	beq.w	8000472 <__udivmoddi4+0x202>
 8000352:	fab2 f682 	clz	r6, r2
 8000356:	2e00      	cmp	r6, #0
 8000358:	f040 80a4 	bne.w	80004a4 <__udivmoddi4+0x234>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	0c03      	lsrs	r3, r0, #16
 8000360:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000364:	b280      	uxth	r0, r0
 8000366:	b2bc      	uxth	r4, r7
 8000368:	2101      	movs	r1, #1
 800036a:	fbb2 fcfe 	udiv	ip, r2, lr
 800036e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000372:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000376:	fb04 f20c 	mul.w	r2, r4, ip
 800037a:	429a      	cmp	r2, r3
 800037c:	d907      	bls.n	800038e <__udivmoddi4+0x11e>
 800037e:	18fb      	adds	r3, r7, r3
 8000380:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x11c>
 8000386:	429a      	cmp	r2, r3
 8000388:	f200 80e0 	bhi.w	800054c <__udivmoddi4+0x2dc>
 800038c:	46c4      	mov	ip, r8
 800038e:	1a9b      	subs	r3, r3, r2
 8000390:	fbb3 f2fe 	udiv	r2, r3, lr
 8000394:	fb0e 3312 	mls	r3, lr, r2, r3
 8000398:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800039c:	fb02 f404 	mul.w	r4, r2, r4
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x144>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x142>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f200 80ca 	bhi.w	8000546 <__udivmoddi4+0x2d6>
 80003b2:	4602      	mov	r2, r0
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0x98>
 80003bc:	f1c1 0620 	rsb	r6, r1, #32
 80003c0:	408b      	lsls	r3, r1
 80003c2:	fa22 f706 	lsr.w	r7, r2, r6
 80003c6:	431f      	orrs	r7, r3
 80003c8:	fa0e f401 	lsl.w	r4, lr, r1
 80003cc:	fa20 f306 	lsr.w	r3, r0, r6
 80003d0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003d4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d8:	4323      	orrs	r3, r4
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	fa1f fc87 	uxth.w	ip, r7
 80003e2:	fbbe f0f9 	udiv	r0, lr, r9
 80003e6:	0c1c      	lsrs	r4, r3, #16
 80003e8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003ec:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003f0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003f4:	45a6      	cmp	lr, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x1a0>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f100 3aff 	add.w	sl, r0, #4294967295
 8000402:	f080 809c 	bcs.w	800053e <__udivmoddi4+0x2ce>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f240 8099 	bls.w	800053e <__udivmoddi4+0x2ce>
 800040c:	3802      	subs	r0, #2
 800040e:	443c      	add	r4, r7
 8000410:	eba4 040e 	sub.w	r4, r4, lr
 8000414:	fa1f fe83 	uxth.w	lr, r3
 8000418:	fbb4 f3f9 	udiv	r3, r4, r9
 800041c:	fb09 4413 	mls	r4, r9, r3, r4
 8000420:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000424:	fb03 fc0c 	mul.w	ip, r3, ip
 8000428:	45a4      	cmp	ip, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x1ce>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000432:	f080 8082 	bcs.w	800053a <__udivmoddi4+0x2ca>
 8000436:	45a4      	cmp	ip, r4
 8000438:	d97f      	bls.n	800053a <__udivmoddi4+0x2ca>
 800043a:	3b02      	subs	r3, #2
 800043c:	443c      	add	r4, r7
 800043e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	fba0 ec02 	umull	lr, ip, r0, r2
 800044a:	4564      	cmp	r4, ip
 800044c:	4673      	mov	r3, lr
 800044e:	46e1      	mov	r9, ip
 8000450:	d362      	bcc.n	8000518 <__udivmoddi4+0x2a8>
 8000452:	d05f      	beq.n	8000514 <__udivmoddi4+0x2a4>
 8000454:	b15d      	cbz	r5, 800046e <__udivmoddi4+0x1fe>
 8000456:	ebb8 0203 	subs.w	r2, r8, r3
 800045a:	eb64 0409 	sbc.w	r4, r4, r9
 800045e:	fa04 f606 	lsl.w	r6, r4, r6
 8000462:	fa22 f301 	lsr.w	r3, r2, r1
 8000466:	431e      	orrs	r6, r3
 8000468:	40cc      	lsrs	r4, r1
 800046a:	e9c5 6400 	strd	r6, r4, [r5]
 800046e:	2100      	movs	r1, #0
 8000470:	e74f      	b.n	8000312 <__udivmoddi4+0xa2>
 8000472:	fbb1 fcf2 	udiv	ip, r1, r2
 8000476:	0c01      	lsrs	r1, r0, #16
 8000478:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800047c:	b280      	uxth	r0, r0
 800047e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000482:	463b      	mov	r3, r7
 8000484:	4638      	mov	r0, r7
 8000486:	463c      	mov	r4, r7
 8000488:	46b8      	mov	r8, r7
 800048a:	46be      	mov	lr, r7
 800048c:	2620      	movs	r6, #32
 800048e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000492:	eba2 0208 	sub.w	r2, r2, r8
 8000496:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800049a:	e766      	b.n	800036a <__udivmoddi4+0xfa>
 800049c:	4601      	mov	r1, r0
 800049e:	e718      	b.n	80002d2 <__udivmoddi4+0x62>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e72c      	b.n	80002fe <__udivmoddi4+0x8e>
 80004a4:	f1c6 0220 	rsb	r2, r6, #32
 80004a8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ac:	40b7      	lsls	r7, r6
 80004ae:	40b1      	lsls	r1, r6
 80004b0:	fa20 f202 	lsr.w	r2, r0, r2
 80004b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b8:	430a      	orrs	r2, r1
 80004ba:	fbb3 f8fe 	udiv	r8, r3, lr
 80004be:	b2bc      	uxth	r4, r7
 80004c0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ca:	fb08 f904 	mul.w	r9, r8, r4
 80004ce:	40b0      	lsls	r0, r6
 80004d0:	4589      	cmp	r9, r1
 80004d2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004d6:	b280      	uxth	r0, r0
 80004d8:	d93e      	bls.n	8000558 <__udivmoddi4+0x2e8>
 80004da:	1879      	adds	r1, r7, r1
 80004dc:	f108 3cff 	add.w	ip, r8, #4294967295
 80004e0:	d201      	bcs.n	80004e6 <__udivmoddi4+0x276>
 80004e2:	4589      	cmp	r9, r1
 80004e4:	d81f      	bhi.n	8000526 <__udivmoddi4+0x2b6>
 80004e6:	eba1 0109 	sub.w	r1, r1, r9
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004f6:	b292      	uxth	r2, r2
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d229      	bcs.n	8000554 <__udivmoddi4+0x2e4>
 8000500:	18ba      	adds	r2, r7, r2
 8000502:	f109 31ff 	add.w	r1, r9, #4294967295
 8000506:	d2c4      	bcs.n	8000492 <__udivmoddi4+0x222>
 8000508:	4542      	cmp	r2, r8
 800050a:	d2c2      	bcs.n	8000492 <__udivmoddi4+0x222>
 800050c:	f1a9 0102 	sub.w	r1, r9, #2
 8000510:	443a      	add	r2, r7
 8000512:	e7be      	b.n	8000492 <__udivmoddi4+0x222>
 8000514:	45f0      	cmp	r8, lr
 8000516:	d29d      	bcs.n	8000454 <__udivmoddi4+0x1e4>
 8000518:	ebbe 0302 	subs.w	r3, lr, r2
 800051c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000520:	3801      	subs	r0, #1
 8000522:	46e1      	mov	r9, ip
 8000524:	e796      	b.n	8000454 <__udivmoddi4+0x1e4>
 8000526:	eba7 0909 	sub.w	r9, r7, r9
 800052a:	4449      	add	r1, r9
 800052c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000530:	fbb1 f9fe 	udiv	r9, r1, lr
 8000534:	fb09 f804 	mul.w	r8, r9, r4
 8000538:	e7db      	b.n	80004f2 <__udivmoddi4+0x282>
 800053a:	4673      	mov	r3, lr
 800053c:	e77f      	b.n	800043e <__udivmoddi4+0x1ce>
 800053e:	4650      	mov	r0, sl
 8000540:	e766      	b.n	8000410 <__udivmoddi4+0x1a0>
 8000542:	4608      	mov	r0, r1
 8000544:	e6fd      	b.n	8000342 <__udivmoddi4+0xd2>
 8000546:	443b      	add	r3, r7
 8000548:	3a02      	subs	r2, #2
 800054a:	e733      	b.n	80003b4 <__udivmoddi4+0x144>
 800054c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000550:	443b      	add	r3, r7
 8000552:	e71c      	b.n	800038e <__udivmoddi4+0x11e>
 8000554:	4649      	mov	r1, r9
 8000556:	e79c      	b.n	8000492 <__udivmoddi4+0x222>
 8000558:	eba1 0109 	sub.w	r1, r1, r9
 800055c:	46c4      	mov	ip, r8
 800055e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000562:	fb09 f804 	mul.w	r8, r9, r4
 8000566:	e7c4      	b.n	80004f2 <__udivmoddi4+0x282>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint32_t TxComplete = 0;


//9.2.7 Rx FIFO 0 message pending callback.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	@ 0x30
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	f107 0210 	add.w	r2, r7, #16
 800057c:	2100      	movs	r1, #0
 800057e:	6878      	ldr	r0, [r7, #4]
 8000580:	f001 f88e 	bl	80016a0 <HAL_CAN_GetRxMessage>
	size_t sent = xStreamBufferSendFromISR(xStreamBuffer0, RxData, 8, NULL);
 8000584:	4b08      	ldr	r3, [pc, #32]	@ (80005a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000586:	6818      	ldr	r0, [r3, #0]
 8000588:	f107 0108 	add.w	r1, r7, #8
 800058c:	2300      	movs	r3, #0
 800058e:	2208      	movs	r2, #8
 8000590:	f003 fc85 	bl	8003e9e <xStreamBufferSendFromISR>
 8000594:	62f8      	str	r0, [r7, #44]	@ 0x2c
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000596:	2101      	movs	r1, #1
 8000598:	4804      	ldr	r0, [pc, #16]	@ (80005ac <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800059a:	f001 fed4 	bl	8002346 <HAL_GPIO_TogglePin>
}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	@ 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	200000e4 	.word	0x200000e4
 80005ac:	40020400 	.word	0x40020400

080005b0 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	TxComplete = 1;
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	601a      	str	r2, [r3, #0]
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000ec 	.word	0x200000ec

080005d0 <CanReceiverTask>:


static void CanReceiverTask() {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	@ 0x50
 80005d4:	af00      	add	r7, sp, #0
	uint8_t RxDataToProcess[64];
	uint32_t received = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t sent = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	647b      	str	r3, [r7, #68]	@ 0x44
	for (;;) {
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 80005de:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <CanReceiverTask+0x84>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	1d3a      	adds	r2, r7, #4
 80005e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005e6:	18d1      	adds	r1, r2, r3
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295
 80005ec:	2208      	movs	r2, #8
 80005ee:	f003 fd0c 	bl	800400a <xStreamBufferReceive>
 80005f2:	4602      	mov	r2, r0
 80005f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005f6:	4413      	add	r3, r2
 80005f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (received == 64) {
 80005fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005fc:	2b40      	cmp	r3, #64	@ 0x40
 80005fe:	d1ee      	bne.n	80005de <CanReceiverTask+0xe>
			for(uint32_t i = 0; i < 64; i++){
 8000600:	2300      	movs	r3, #0
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000604:	e00d      	b.n	8000622 <CanReceiverTask+0x52>
				RxDataToProcess[i] += 1;
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800060a:	4413      	add	r3, r2
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	3301      	adds	r3, #1
 8000610:	b2d9      	uxtb	r1, r3
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000616:	4413      	add	r3, r2
 8000618:	460a      	mov	r2, r1
 800061a:	701a      	strb	r2, [r3, #0]
			for(uint32_t i = 0; i < 64; i++){
 800061c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800061e:	3301      	adds	r3, #1
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000622:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000624:	2b3f      	cmp	r3, #63	@ 0x3f
 8000626:	d9ee      	bls.n	8000606 <CanReceiverTask+0x36>
			}
			sent = xStreamBufferSend(xStreamBuffer1, RxDataToProcess, 64, 0);
 8000628:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <CanReceiverTask+0x88>)
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	1d39      	adds	r1, r7, #4
 800062e:	2300      	movs	r3, #0
 8000630:	2240      	movs	r2, #64	@ 0x40
 8000632:	f003 fb73 	bl	8003d1c <xStreamBufferSend>
 8000636:	6478      	str	r0, [r7, #68]	@ 0x44
			memset(RxDataToProcess, 0, 64);
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2240      	movs	r2, #64	@ 0x40
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f006 f86c 	bl	800671c <memset>
			received = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	64fb      	str	r3, [r7, #76]	@ 0x4c
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000648:	2180      	movs	r1, #128	@ 0x80
 800064a:	4804      	ldr	r0, [pc, #16]	@ (800065c <CanReceiverTask+0x8c>)
 800064c:	f001 fe7b 	bl	8002346 <HAL_GPIO_TogglePin>
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 8000650:	e7c5      	b.n	80005de <CanReceiverTask+0xe>
 8000652:	bf00      	nop
 8000654:	200000e4 	.word	0x200000e4
 8000658:	200000e8 	.word	0x200000e8
 800065c:	40020400 	.word	0x40020400

08000660 <CanSenderTask>:

		}
	}
}

static void CanSenderTask() {
 8000660:	b580      	push	{r7, lr}
 8000662:	b08c      	sub	sp, #48	@ 0x30
 8000664:	af00      	add	r7, sp, #0
	uint8_t DataToSend[8];
	uint32_t received = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	62fb      	str	r3, [r7, #44]	@ 0x2c
	CAN_RxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;


	TxHeader.DLC = 8;
 800066a:	2308      	movs	r3, #8
 800066c:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;		// use 11 bit identifier
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
	TxHeader.StdId = 0x321;			// ID
 8000676:	f240 3321 	movw	r3, #801	@ 0x321
 800067a:	60bb      	str	r3, [r7, #8]
	while(1) {
		received = xStreamBufferReceive(xStreamBuffer1, DataToSend, 8, portMAX_DELAY);
 800067c:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <CanSenderTask+0x54>)
 800067e:	6818      	ldr	r0, [r3, #0]
 8000680:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	2208      	movs	r2, #8
 800068a:	f003 fcbe 	bl	800400a <xStreamBufferReceive>
 800068e:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, DataToSend, &TxMailbox);
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000696:	f107 0108 	add.w	r1, r7, #8
 800069a:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <CanSenderTask+0x58>)
 800069c:	f000 ff30 	bl	8001500 <HAL_CAN_AddTxMessage>
		while(!TxComplete) {
 80006a0:	bf00      	nop
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <CanSenderTask+0x5c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0fb      	beq.n	80006a2 <CanSenderTask+0x42>

		};
		TxComplete = 0;
 80006aa:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <CanSenderTask+0x5c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
		received = xStreamBufferReceive(xStreamBuffer1, DataToSend, 8, portMAX_DELAY);
 80006b0:	e7e4      	b.n	800067c <CanSenderTask+0x1c>
 80006b2:	bf00      	nop
 80006b4:	200000e8 	.word	0x200000e8
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	200000ec 	.word	0x200000ec

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b088      	sub	sp, #32
 80006c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fb98 	bl	8000dfa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f8a7 	bl	800081c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 f969 	bl	80009a4 <MX_GPIO_Init>
  MX_CAN1_Init();
 80006d2:	f000 f913 	bl	80008fc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret = HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID, HAL_CAN_TxMailbox0CompleteCallback);
 80006d6:	4a46      	ldr	r2, [pc, #280]	@ (80007f0 <main+0x130>)
 80006d8:	2100      	movs	r1, #0
 80006da:	4846      	ldr	r0, [pc, #280]	@ (80007f4 <main+0x134>)
 80006dc:	f000 fd30 	bl	8001140 <HAL_CAN_RegisterCallback>
 80006e0:	4603      	mov	r3, r0
 80006e2:	75fb      	strb	r3, [r7, #23]

  HAL_CAN_Start(&hcan1);
 80006e4:	4843      	ldr	r0, [pc, #268]	@ (80007f4 <main+0x134>)
 80006e6:	f000 fec7 	bl	8001478 <HAL_CAN_Start>
  //from HAL SDK docs 9.2.1, argument from 9.3.1

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006ea:	2102      	movs	r1, #2
 80006ec:	4841      	ldr	r0, [pc, #260]	@ (80007f4 <main+0x134>)
 80006ee:	f001 f8f9 	bl	80018e4 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80006f2:	2101      	movs	r1, #1
 80006f4:	483f      	ldr	r0, [pc, #252]	@ (80007f4 <main+0x134>)
 80006f6:	f001 f8f5 	bl	80018e4 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006fa:	f002 fb35 	bl	8002d68 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	xStreamBuffer0 = xStreamBufferCreate(RECEIVE_BUFFER_LENGTH, 1);
 80006fe:	2200      	movs	r2, #0
 8000700:	2101      	movs	r1, #1
 8000702:	200a      	movs	r0, #10
 8000704:	f003 fa70 	bl	8003be8 <xStreamBufferGenericCreate>
 8000708:	4603      	mov	r3, r0
 800070a:	4a3b      	ldr	r2, [pc, #236]	@ (80007f8 <main+0x138>)
 800070c:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer0);
 800070e:	4b3a      	ldr	r3, [pc, #232]	@ (80007f8 <main+0x138>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d10d      	bne.n	8000732 <main+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800071a:	b672      	cpsid	i
 800071c:	f383 8811 	msr	BASEPRI, r3
 8000720:	f3bf 8f6f 	isb	sy
 8000724:	f3bf 8f4f 	dsb	sy
 8000728:	b662      	cpsie	i
 800072a:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800072c:	bf00      	nop
 800072e:	bf00      	nop
 8000730:	e7fd      	b.n	800072e <main+0x6e>
	xStreamBuffer1 = xStreamBufferCreate(SEND_BUFFER_LENGTH, 1);
 8000732:	2200      	movs	r2, #0
 8000734:	2101      	movs	r1, #1
 8000736:	2040      	movs	r0, #64	@ 0x40
 8000738:	f003 fa56 	bl	8003be8 <xStreamBufferGenericCreate>
 800073c:	4603      	mov	r3, r0
 800073e:	4a2f      	ldr	r2, [pc, #188]	@ (80007fc <main+0x13c>)
 8000740:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer1);
 8000742:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <main+0x13c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d10d      	bne.n	8000766 <main+0xa6>
	__asm volatile
 800074a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800074e:	b672      	cpsid	i
 8000750:	f383 8811 	msr	BASEPRI, r3
 8000754:	f3bf 8f6f 	isb	sy
 8000758:	f3bf 8f4f 	dsb	sy
 800075c:	b662      	cpsie	i
 800075e:	60fb      	str	r3, [r7, #12]
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	e7fd      	b.n	8000762 <main+0xa2>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000766:	4a26      	ldr	r2, [pc, #152]	@ (8000800 <main+0x140>)
 8000768:	2100      	movs	r1, #0
 800076a:	4826      	ldr	r0, [pc, #152]	@ (8000804 <main+0x144>)
 800076c:	f002 fb66 	bl	8002e3c <osThreadNew>
 8000770:	4603      	mov	r3, r0
 8000772:	4a25      	ldr	r2, [pc, #148]	@ (8000808 <main+0x148>)
 8000774:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	configASSERT(pdPASS == xTaskCreate(CanReceiverTask, "CanReceiverTask", 128 * 4, NULL,
 8000776:	2300      	movs	r3, #0
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	2301      	movs	r3, #1
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	2300      	movs	r3, #0
 8000780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000784:	4921      	ldr	r1, [pc, #132]	@ (800080c <main+0x14c>)
 8000786:	4822      	ldr	r0, [pc, #136]	@ (8000810 <main+0x150>)
 8000788:	f003 fec9 	bl	800451e <xTaskCreate>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d00d      	beq.n	80007ae <main+0xee>
	__asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000796:	b672      	cpsid	i
 8000798:	f383 8811 	msr	BASEPRI, r3
 800079c:	f3bf 8f6f 	isb	sy
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	b662      	cpsie	i
 80007a6:	60bb      	str	r3, [r7, #8]
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	e7fd      	b.n	80007aa <main+0xea>
			tskIDLE_PRIORITY + 1, NULL));

	configASSERT(pdPASS == xTaskCreate(CanSenderTask, "CanSenderTask", 128 * 4, NULL,
 80007ae:	2300      	movs	r3, #0
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	2302      	movs	r3, #2
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2300      	movs	r3, #0
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	4915      	ldr	r1, [pc, #84]	@ (8000814 <main+0x154>)
 80007be:	4816      	ldr	r0, [pc, #88]	@ (8000818 <main+0x158>)
 80007c0:	f003 fead 	bl	800451e <xTaskCreate>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d00d      	beq.n	80007e6 <main+0x126>
	__asm volatile
 80007ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007ce:	b672      	cpsid	i
 80007d0:	f383 8811 	msr	BASEPRI, r3
 80007d4:	f3bf 8f6f 	isb	sy
 80007d8:	f3bf 8f4f 	dsb	sy
 80007dc:	b662      	cpsie	i
 80007de:	607b      	str	r3, [r7, #4]
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	e7fd      	b.n	80007e2 <main+0x122>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007e6:	f002 faf3 	bl	8002dd0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80007ea:	bf00      	nop
 80007ec:	e7fd      	b.n	80007ea <main+0x12a>
 80007ee:	bf00      	nop
 80007f0:	080005b1 	.word	0x080005b1
 80007f4:	2000007c 	.word	0x2000007c
 80007f8:	200000e4 	.word	0x200000e4
 80007fc:	200000e8 	.word	0x200000e8
 8000800:	08006958 	.word	0x08006958
 8000804:	08000bf9 	.word	0x08000bf9
 8000808:	200000e0 	.word	0x200000e0
 800080c:	08006920 	.word	0x08006920
 8000810:	080005d1 	.word	0x080005d1
 8000814:	08006930 	.word	0x08006930
 8000818:	08000661 	.word	0x08000661

0800081c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b094      	sub	sp, #80	@ 0x50
 8000820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000822:	f107 031c 	add.w	r3, r7, #28
 8000826:	2234      	movs	r2, #52	@ 0x34
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f005 ff76 	bl	800671c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000830:	f107 0308 	add.w	r3, r7, #8
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000840:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <SystemClock_Config+0xd8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000844:	4a2b      	ldr	r2, [pc, #172]	@ (80008f4 <SystemClock_Config+0xd8>)
 8000846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084a:	6413      	str	r3, [r2, #64]	@ 0x40
 800084c:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <SystemClock_Config+0xd8>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000850:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <SystemClock_Config+0xdc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000860:	4a25      	ldr	r2, [pc, #148]	@ (80008f8 <SystemClock_Config+0xdc>)
 8000862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	4b23      	ldr	r3, [pc, #140]	@ (80008f8 <SystemClock_Config+0xdc>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	2301      	movs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087c:	2310      	movs	r3, #16
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000880:	2302      	movs	r3, #2
 8000882:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000888:	2308      	movs	r3, #8
 800088a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 800088c:	23c0      	movs	r3, #192	@ 0xc0
 800088e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000890:	2304      	movs	r3, #4
 8000892:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000894:	2302      	movs	r3, #2
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000898:	2302      	movs	r3, #2
 800089a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fdbb 	bl	800241c <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008ac:	f000 f9ac 	bl	8000c08 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b0:	f001 fd64 	bl	800237c <HAL_PWREx_EnableOverDrive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008ba:	f000 f9a5 	bl	8000c08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c2:	2302      	movs	r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c6:	2300      	movs	r3, #0
 80008c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008d4:	f107 0308 	add.w	r3, r7, #8
 80008d8:	2103      	movs	r1, #3
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 f84c 	bl	8002978 <HAL_RCC_ClockConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008e6:	f000 f98f 	bl	8000c08 <Error_Handler>
  }
}
 80008ea:	bf00      	nop
 80008ec:	3750      	adds	r7, #80	@ 0x50
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40007000 	.word	0x40007000

080008fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	@ 0x28
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000902:	4b26      	ldr	r3, [pc, #152]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000904:	4a26      	ldr	r2, [pc, #152]	@ (80009a0 <MX_CAN1_Init+0xa4>)
 8000906:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000908:	4b24      	ldr	r3, [pc, #144]	@ (800099c <MX_CAN1_Init+0xa0>)
 800090a:	2220      	movs	r2, #32
 800090c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800090e:	4b23      	ldr	r3, [pc, #140]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000914:	4b21      	ldr	r3, [pc, #132]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <MX_CAN1_Init+0xa0>)
 800091c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000920:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000922:	4b1e      	ldr	r3, [pc, #120]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000924:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 8000928:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800092a:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <MX_CAN1_Init+0xa0>)
 800092c:	2200      	movs	r2, #0
 800092e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000930:	4b1a      	ldr	r3, [pc, #104]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000932:	2200      	movs	r2, #0
 8000934:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000936:	4b19      	ldr	r3, [pc, #100]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000938:	2200      	movs	r2, #0
 800093a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800093c:	4b17      	ldr	r3, [pc, #92]	@ (800099c <MX_CAN1_Init+0xa0>)
 800093e:	2200      	movs	r2, #0
 8000940:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000942:	4b16      	ldr	r3, [pc, #88]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000944:	2200      	movs	r2, #0
 8000946:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000948:	4b14      	ldr	r3, [pc, #80]	@ (800099c <MX_CAN1_Init+0xa0>)
 800094a:	2200      	movs	r2, #0
 800094c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800094e:	4813      	ldr	r0, [pc, #76]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000950:	f000 fab0 	bl	8000eb4 <HAL_CAN_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800095a:	f000 f955 	bl	8000c08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	//Filter for KW45's 0x123 messages
	CAN_FilterTypeDef CanFilter0;
	CanFilter0.FilterActivation = CAN_FILTER_ENABLE;
 800095e:	2301      	movs	r3, #1
 8000960:	623b      	str	r3, [r7, #32]
	CanFilter0.FilterBank = 18;
 8000962:	2312      	movs	r3, #18
 8000964:	617b      	str	r3, [r7, #20]
	CanFilter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
	CanFilter0.FilterIdHigh = 0x123 << 5;
 800096a:	f242 4360 	movw	r3, #9312	@ 0x2460
 800096e:	603b      	str	r3, [r7, #0]
	CanFilter0.FilterIdLow = 0x0;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
	CanFilter0.FilterMaskIdHigh = 0x123 << 5;
 8000974:	f242 4360 	movw	r3, #9312	@ 0x2460
 8000978:	60bb      	str	r3, [r7, #8]
	CanFilter0.FilterMaskIdLow = 0x0;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
	CanFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
	CanFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000982:	2301      	movs	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
	CanFilter0.SlaveStartFilterBank = 20;
 8000986:	2314      	movs	r3, #20
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &CanFilter0);
 800098a:	463b      	mov	r3, r7
 800098c:	4619      	mov	r1, r3
 800098e:	4803      	ldr	r0, [pc, #12]	@ (800099c <MX_CAN1_Init+0xa0>)
 8000990:	f000 fc86 	bl	80012a0 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	3728      	adds	r7, #40	@ 0x28
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000007c 	.word	0x2000007c
 80009a0:	40006400 	.word	0x40006400

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	@ 0x30
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b89      	ldr	r3, [pc, #548]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a88      	ldr	r2, [pc, #544]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b86      	ldr	r3, [pc, #536]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	61bb      	str	r3, [r7, #24]
 80009d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	4b83      	ldr	r3, [pc, #524]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a82      	ldr	r2, [pc, #520]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b80      	ldr	r3, [pc, #512]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b7d      	ldr	r3, [pc, #500]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a7c      	ldr	r2, [pc, #496]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b7a      	ldr	r3, [pc, #488]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	4b77      	ldr	r3, [pc, #476]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a76      	ldr	r2, [pc, #472]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b74      	ldr	r3, [pc, #464]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1a:	4b71      	ldr	r3, [pc, #452]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	4a70      	ldr	r2, [pc, #448]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a26:	4b6e      	ldr	r3, [pc, #440]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	f003 0308 	and.w	r3, r3, #8
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a32:	4b6b      	ldr	r3, [pc, #428]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a6a      	ldr	r2, [pc, #424]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b68      	ldr	r3, [pc, #416]	@ (8000be0 <MX_GPIO_Init+0x23c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a50:	4864      	ldr	r0, [pc, #400]	@ (8000be4 <MX_GPIO_Init+0x240>)
 8000a52:	f001 fc5f 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2140      	movs	r1, #64	@ 0x40
 8000a5a:	4863      	ldr	r0, [pc, #396]	@ (8000be8 <MX_GPIO_Init+0x244>)
 8000a5c:	f001 fc5a 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2180      	movs	r1, #128	@ 0x80
 8000a64:	4861      	ldr	r0, [pc, #388]	@ (8000bec <MX_GPIO_Init+0x248>)
 8000a66:	f001 fc55 	bl	8002314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	485b      	ldr	r0, [pc, #364]	@ (8000bf0 <MX_GPIO_Init+0x24c>)
 8000a82:	f001 fa9b 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a86:	2332      	movs	r3, #50	@ 0x32
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a96:	230b      	movs	r3, #11
 8000a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4853      	ldr	r0, [pc, #332]	@ (8000bf0 <MX_GPIO_Init+0x24c>)
 8000aa2:	f001 fa8b 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000aa6:	2386      	movs	r3, #134	@ 0x86
 8000aa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ab6:	230b      	movs	r3, #11
 8000ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	4619      	mov	r1, r3
 8000ac0:	484c      	ldr	r0, [pc, #304]	@ (8000bf4 <MX_GPIO_Init+0x250>)
 8000ac2:	f001 fa7b 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ac6:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4841      	ldr	r0, [pc, #260]	@ (8000be4 <MX_GPIO_Init+0x240>)
 8000ae0:	f001 fa6c 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ae4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	2302      	movs	r3, #2
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	2303      	movs	r3, #3
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af6:	230b      	movs	r3, #11
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000afa:	f107 031c 	add.w	r3, r7, #28
 8000afe:	4619      	mov	r1, r3
 8000b00:	4838      	ldr	r0, [pc, #224]	@ (8000be4 <MX_GPIO_Init+0x240>)
 8000b02:	f001 fa5b 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1c:	f107 031c 	add.w	r3, r7, #28
 8000b20:	4619      	mov	r1, r3
 8000b22:	4832      	ldr	r0, [pc, #200]	@ (8000bec <MX_GPIO_Init+0x248>)
 8000b24:	f001 fa4a 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000b28:	2340      	movs	r3, #64	@ 0x40
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482a      	ldr	r0, [pc, #168]	@ (8000be8 <MX_GPIO_Init+0x244>)
 8000b40:	f001 fa3c 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b44:	2380      	movs	r3, #128	@ 0x80
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <MX_GPIO_Init+0x244>)
 8000b58:	f001 fa30 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b5c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b6e:	230a      	movs	r3, #10
 8000b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <MX_GPIO_Init+0x250>)
 8000b7a:	f001 fa1f 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4818      	ldr	r0, [pc, #96]	@ (8000bf4 <MX_GPIO_Init+0x250>)
 8000b94:	f001 fa12 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b98:	2380      	movs	r3, #128	@ 0x80
 8000b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	480f      	ldr	r0, [pc, #60]	@ (8000bec <MX_GPIO_Init+0x248>)
 8000bb0:	f001 fa04 	bl	8001fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000bb4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc6:	230b      	movs	r3, #11
 8000bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <MX_GPIO_Init+0x244>)
 8000bd2:	f001 f9f3 	bl	8001fbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3730      	adds	r7, #48	@ 0x30
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020400 	.word	0x40020400
 8000be8:	40021800 	.word	0x40021800
 8000bec:	40020c00 	.word	0x40020c00
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f002 f9c1 	bl	8002f88 <osDelay>
 8000c06:	e7fb      	b.n	8000c00 <StartDefaultTask+0x8>

08000c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <Error_Handler+0x8>

08000c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1e:	4a10      	ldr	r2, [pc, #64]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c24:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0b      	ldr	r3, [pc, #44]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	210f      	movs	r1, #15
 8000c4e:	f06f 0001 	mvn.w	r0, #1
 8000c52:	f001 f97c 	bl	8001f4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800

08000c64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a1f      	ldr	r2, [pc, #124]	@ (8000d00 <HAL_CAN_MspInit+0x9c>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d137      	bne.n	8000cf6 <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c86:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <HAL_CAN_MspInit+0xa0>)
 8000c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000d04 <HAL_CAN_MspInit+0xa0>)
 8000c8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c92:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_CAN_MspInit+0xa0>)
 8000c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9e:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_CAN_MspInit+0xa0>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <HAL_CAN_MspInit+0xa0>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_CAN_MspInit+0xa0>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000cc6:	2309      	movs	r3, #9
 8000cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480d      	ldr	r0, [pc, #52]	@ (8000d08 <HAL_CAN_MspInit+0xa4>)
 8000cd2:	f001 f973 	bl	8001fbc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2105      	movs	r1, #5
 8000cda:	2013      	movs	r0, #19
 8000cdc:	f001 f937 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ce0:	2013      	movs	r0, #19
 8000ce2:	f001 f950 	bl	8001f86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2105      	movs	r1, #5
 8000cea:	2014      	movs	r0, #20
 8000cec:	f001 f92f 	bl	8001f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cf0:	2014      	movs	r0, #20
 8000cf2:	f001 f948 	bl	8001f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	@ 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40006400 	.word	0x40006400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d46:	f000 f895 	bl	8000e74 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d4a:	f004 fa33 	bl	80051b4 <xTaskGetSchedulerState>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d001      	beq.n	8000d58 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d54:	f005 fa60 	bl	8006218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d60:	4802      	ldr	r0, [pc, #8]	@ (8000d6c <CAN1_TX_IRQHandler+0x10>)
 8000d62:	f000 fde5 	bl	8001930 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2000007c 	.word	0x2000007c

08000d70 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <CAN1_RX0_IRQHandler+0x10>)
 8000d76:	f000 fddb 	bl	8001930 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000007c 	.word	0x2000007c

08000d84 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	@ (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	@ (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f005 fd07 	bl	80067e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fc71 	bl	80006c0 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000dec:	0800699c 	.word	0x0800699c
  ldr r2, =_sbss
 8000df0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000df4:	20004c14 	.word	0x20004c14

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>

08000dfa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f001 f89a 	bl	8001f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e04:	200f      	movs	r0, #15
 8000e06:	f000 f805 	bl	8000e14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e0a:	f7ff ff03 	bl	8000c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e1c:	4b12      	ldr	r3, [pc, #72]	@ (8000e68 <HAL_InitTick+0x54>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <HAL_InitTick+0x58>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f8b5 	bl	8001fa2 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e00e      	b.n	8000e60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2b0f      	cmp	r3, #15
 8000e46:	d80a      	bhi.n	8000e5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	6879      	ldr	r1, [r7, #4]
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e50:	f001 f87d 	bl	8001f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e54:	4a06      	ldr	r2, [pc, #24]	@ (8000e70 <HAL_InitTick+0x5c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	e000      	b.n	8000e60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	20000008 	.word	0x20000008
 8000e70:	20000004 	.word	0x20000004

08000e74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_IncTick+0x20>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	461a      	mov	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4413      	add	r3, r2
 8000e84:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <HAL_IncTick+0x24>)
 8000e86:	6013      	str	r3, [r2, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000008 	.word	0x20000008
 8000e98:	200000f0 	.word	0x200000f0

08000e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea0:	4b03      	ldr	r3, [pc, #12]	@ (8000eb0 <HAL_GetTick+0x14>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	200000f0 	.word	0x200000f0

08000eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d101      	bne.n	8000ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e11c      	b.n	8001100 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d131      	bne.n	8000f36 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a8c      	ldr	r2, [pc, #560]	@ (8001108 <HAL_CAN_Init+0x254>)
 8000ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a8c      	ldr	r2, [pc, #560]	@ (800110c <HAL_CAN_Init+0x258>)
 8000edc:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a8b      	ldr	r2, [pc, #556]	@ (8001110 <HAL_CAN_Init+0x25c>)
 8000ee2:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a8b      	ldr	r2, [pc, #556]	@ (8001114 <HAL_CAN_Init+0x260>)
 8000ee8:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a8a      	ldr	r2, [pc, #552]	@ (8001118 <HAL_CAN_Init+0x264>)
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a8a      	ldr	r2, [pc, #552]	@ (800111c <HAL_CAN_Init+0x268>)
 8000ef4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a89      	ldr	r2, [pc, #548]	@ (8001120 <HAL_CAN_Init+0x26c>)
 8000efa:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a89      	ldr	r2, [pc, #548]	@ (8001124 <HAL_CAN_Init+0x270>)
 8000f00:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a88      	ldr	r2, [pc, #544]	@ (8001128 <HAL_CAN_Init+0x274>)
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a88      	ldr	r2, [pc, #544]	@ (800112c <HAL_CAN_Init+0x278>)
 8000f0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a87      	ldr	r2, [pc, #540]	@ (8001130 <HAL_CAN_Init+0x27c>)
 8000f12:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a87      	ldr	r2, [pc, #540]	@ (8001134 <HAL_CAN_Init+0x280>)
 8000f18:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a86      	ldr	r2, [pc, #536]	@ (8001138 <HAL_CAN_Init+0x284>)
 8000f1e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d102      	bne.n	8000f2e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a84      	ldr	r2, [pc, #528]	@ (800113c <HAL_CAN_Init+0x288>)
 8000f2c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f042 0201 	orr.w	r2, r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f46:	f7ff ffa9 	bl	8000e9c <HAL_GetTick>
 8000f4a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f4c:	e012      	b.n	8000f74 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f4e:	f7ff ffa5 	bl	8000e9c <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b0a      	cmp	r3, #10
 8000f5a:	d90b      	bls.n	8000f74 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2205      	movs	r2, #5
 8000f6c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0c5      	b.n	8001100 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0e5      	beq.n	8000f4e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0202 	bic.w	r2, r2, #2
 8000f90:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f92:	f7ff ff83 	bl	8000e9c <HAL_GetTick>
 8000f96:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f98:	e012      	b.n	8000fc0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f9a:	f7ff ff7f 	bl	8000e9c <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b0a      	cmp	r3, #10
 8000fa6:	d90b      	bls.n	8000fc0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2205      	movs	r2, #5
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e09f      	b.n	8001100 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d1e5      	bne.n	8000f9a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7e1b      	ldrb	r3, [r3, #24]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d108      	bne.n	8000fe8 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e007      	b.n	8000ff8 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ff6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e5b      	ldrb	r3, [r3, #25]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e007      	b.n	8001022 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7e9b      	ldrb	r3, [r3, #26]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0220 	orr.w	r2, r2, #32
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0220 	bic.w	r2, r2, #32
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7edb      	ldrb	r3, [r3, #27]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0210 	bic.w	r2, r2, #16
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0210 	orr.w	r2, r2, #16
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7f1b      	ldrb	r3, [r3, #28]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0208 	orr.w	r2, r2, #8
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0208 	bic.w	r2, r2, #8
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7f5b      	ldrb	r3, [r3, #29]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0204 	orr.w	r2, r2, #4
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0204 	bic.w	r2, r2, #4
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689a      	ldr	r2, [r3, #8]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	ea42 0103 	orr.w	r1, r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	0800056d 	.word	0x0800056d
 800110c:	08001d1f 	.word	0x08001d1f
 8001110:	08001d33 	.word	0x08001d33
 8001114:	08001d47 	.word	0x08001d47
 8001118:	080005b1 	.word	0x080005b1
 800111c:	08001cbb 	.word	0x08001cbb
 8001120:	08001ccf 	.word	0x08001ccf
 8001124:	08001ce3 	.word	0x08001ce3
 8001128:	08001cf7 	.word	0x08001cf7
 800112c:	08001d0b 	.word	0x08001d0b
 8001130:	08001d5b 	.word	0x08001d5b
 8001134:	08001d6f 	.word	0x08001d6f
 8001138:	08001d83 	.word	0x08001d83
 800113c:	08000c65 	.word	0x08000c65

08001140 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	460b      	mov	r3, r1
 800114a:	607a      	str	r2, [r7, #4]
 800114c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d107      	bne.n	8001168 <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e094      	b.n	8001292 <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d168      	bne.n	8001246 <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8001174:	7afb      	ldrb	r3, [r7, #11]
 8001176:	2b0e      	cmp	r3, #14
 8001178:	d85c      	bhi.n	8001234 <HAL_CAN_RegisterCallback+0xf4>
 800117a:	a201      	add	r2, pc, #4	@ (adr r2, 8001180 <HAL_CAN_RegisterCallback+0x40>)
 800117c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001180:	080011bd 	.word	0x080011bd
 8001184:	080011c5 	.word	0x080011c5
 8001188:	080011cd 	.word	0x080011cd
 800118c:	080011d5 	.word	0x080011d5
 8001190:	080011dd 	.word	0x080011dd
 8001194:	080011e5 	.word	0x080011e5
 8001198:	080011ed 	.word	0x080011ed
 800119c:	080011f5 	.word	0x080011f5
 80011a0:	080011fd 	.word	0x080011fd
 80011a4:	08001205 	.word	0x08001205
 80011a8:	0800120d 	.word	0x0800120d
 80011ac:	08001215 	.word	0x08001215
 80011b0:	0800121d 	.word	0x0800121d
 80011b4:	08001225 	.word	0x08001225
 80011b8:	0800122d 	.word	0x0800122d
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 80011c2:	e065      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 80011ca:	e061      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 80011d2:	e05d      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 80011da:	e059      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80011e2:	e055      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80011ea:	e051      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80011f2:	e04d      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80011fa:	e049      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 8001202:	e045      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800120a:	e041      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8001212:	e03d      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800121a:	e039      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8001222:	e035      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800122a:	e031      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8001232:	e02d      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001238:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	75fb      	strb	r3, [r7, #23]
        break;
 8001244:	e024      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d116      	bne.n	8001280 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8001252:	7afb      	ldrb	r3, [r7, #11]
 8001254:	2b0d      	cmp	r3, #13
 8001256:	d002      	beq.n	800125e <HAL_CAN_RegisterCallback+0x11e>
 8001258:	2b0e      	cmp	r3, #14
 800125a:	d004      	beq.n	8001266 <HAL_CAN_RegisterCallback+0x126>
 800125c:	e007      	b.n	800126e <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8001264:	e014      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800126c:	e010      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001272:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	75fb      	strb	r3, [r7, #23]
        break;
 800127e:	e007      	b.n	8001290 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001284:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status =  HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001290:	7dfb      	ldrb	r3, [r7, #23]
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b087      	sub	sp, #28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80012b8:	7cfb      	ldrb	r3, [r7, #19]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d003      	beq.n	80012c6 <HAL_CAN_ConfigFilter+0x26>
 80012be:	7cfb      	ldrb	r3, [r7, #19]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	f040 80c7 	bne.w	8001454 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a69      	ldr	r2, [pc, #420]	@ (8001470 <HAL_CAN_ConfigFilter+0x1d0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d001      	beq.n	80012d4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80012d0:	4b68      	ldr	r3, [pc, #416]	@ (8001474 <HAL_CAN_ConfigFilter+0x1d4>)
 80012d2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012da:	f043 0201 	orr.w	r2, r3, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	4a63      	ldr	r2, [pc, #396]	@ (8001474 <HAL_CAN_ConfigFilter+0x1d4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d111      	bne.n	8001310 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012f2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	431a      	orrs	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f003 031f 	and.w	r3, r3, #31
 8001318:	2201      	movs	r2, #1
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	401a      	ands	r2, r3
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d123      	bne.n	8001382 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43db      	mvns	r3, r3
 8001344:	401a      	ands	r2, r3
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800135c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	3248      	adds	r2, #72	@ 0x48
 8001362:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001376:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001378:	6979      	ldr	r1, [r7, #20]
 800137a:	3348      	adds	r3, #72	@ 0x48
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d122      	bne.n	80013d0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	431a      	orrs	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013a6:	683a      	ldr	r2, [r7, #0]
 80013a8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013aa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	3248      	adds	r2, #72	@ 0x48
 80013b0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013c6:	6979      	ldr	r1, [r7, #20]
 80013c8:	3348      	adds	r3, #72	@ 0x48
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	440b      	add	r3, r1
 80013ce:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d109      	bne.n	80013ec <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	43db      	mvns	r3, r3
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80013ea:	e007      	b.n	80013fc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001416:	e007      	b.n	8001428 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	431a      	orrs	r2, r3
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d107      	bne.n	8001440 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	431a      	orrs	r2, r3
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001446:	f023 0201 	bic.w	r2, r3, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001450:	2300      	movs	r3, #0
 8001452:	e006      	b.n	8001462 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
  }
}
 8001462:	4618      	mov	r0, r3
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40003400 	.word	0x40003400
 8001474:	40006400 	.word	0x40006400

08001478 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001486:	b2db      	uxtb	r3, r3
 8001488:	2b01      	cmp	r3, #1
 800148a:	d12e      	bne.n	80014ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2202      	movs	r2, #2
 8001490:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0201 	bic.w	r2, r2, #1
 80014a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80014a4:	f7ff fcfa 	bl	8000e9c <HAL_GetTick>
 80014a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014aa:	e012      	b.n	80014d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014ac:	f7ff fcf6 	bl	8000e9c <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b0a      	cmp	r3, #10
 80014b8:	d90b      	bls.n	80014d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2205      	movs	r2, #5
 80014ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e012      	b.n	80014f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1e5      	bne.n	80014ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e006      	b.n	80014f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ee:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
  }
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3710      	adds	r7, #16
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001514:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800151e:	7ffb      	ldrb	r3, [r7, #31]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d003      	beq.n	800152c <HAL_CAN_AddTxMessage+0x2c>
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	2b02      	cmp	r3, #2
 8001528:	f040 80ad 	bne.w	8001686 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800153c:	2b00      	cmp	r3, #0
 800153e:	d105      	bne.n	800154c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8095 	beq.w	8001676 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	0e1b      	lsrs	r3, r3, #24
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001556:	2201      	movs	r2, #1
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d10d      	bne.n	8001584 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001572:	68f9      	ldr	r1, [r7, #12]
 8001574:	6809      	ldr	r1, [r1, #0]
 8001576:	431a      	orrs	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3318      	adds	r3, #24
 800157c:	011b      	lsls	r3, r3, #4
 800157e:	440b      	add	r3, r1
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e00f      	b.n	80015a4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800158e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001594:	68f9      	ldr	r1, [r7, #12]
 8001596:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001598:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3318      	adds	r3, #24
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	440b      	add	r3, r1
 80015a2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6819      	ldr	r1, [r3, #0]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	691a      	ldr	r2, [r3, #16]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	3318      	adds	r3, #24
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	440b      	add	r3, r1
 80015b4:	3304      	adds	r3, #4
 80015b6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	7d1b      	ldrb	r3, [r3, #20]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d111      	bne.n	80015e4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	3318      	adds	r3, #24
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	4413      	add	r3, r2
 80015cc:	3304      	adds	r3, #4
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	6811      	ldr	r1, [r2, #0]
 80015d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3318      	adds	r3, #24
 80015dc:	011b      	lsls	r3, r3, #4
 80015de:	440b      	add	r3, r1
 80015e0:	3304      	adds	r3, #4
 80015e2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3307      	adds	r3, #7
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	061a      	lsls	r2, r3, #24
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3306      	adds	r3, #6
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3305      	adds	r3, #5
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	021b      	lsls	r3, r3, #8
 80015fe:	4313      	orrs	r3, r2
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	3204      	adds	r2, #4
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4610      	mov	r0, r2
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	6811      	ldr	r1, [r2, #0]
 800160c:	ea43 0200 	orr.w	r2, r3, r0
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	011b      	lsls	r3, r3, #4
 8001614:	440b      	add	r3, r1
 8001616:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800161a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3303      	adds	r3, #3
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	061a      	lsls	r2, r3, #24
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3302      	adds	r3, #2
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	041b      	lsls	r3, r3, #16
 800162c:	431a      	orrs	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3301      	adds	r3, #1
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	021b      	lsls	r3, r3, #8
 8001636:	4313      	orrs	r3, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	7812      	ldrb	r2, [r2, #0]
 800163c:	4610      	mov	r0, r2
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	6811      	ldr	r1, [r2, #0]
 8001642:	ea43 0200 	orr.w	r2, r3, r0
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	011b      	lsls	r3, r3, #4
 800164a:	440b      	add	r3, r1
 800164c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001650:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	3318      	adds	r3, #24
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	4413      	add	r3, r2
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	6811      	ldr	r1, [r2, #0]
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	3318      	adds	r3, #24
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	440b      	add	r3, r1
 8001670:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	e00e      	b.n	8001694 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e006      	b.n	8001694 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
  }
}
 8001694:	4618      	mov	r0, r3
 8001696:	3724      	adds	r7, #36	@ 0x24
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80016a0:	b480      	push	{r7}
 80016a2:	b087      	sub	sp, #28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
 80016ac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016b4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b6:	7dfb      	ldrb	r3, [r7, #23]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d003      	beq.n	80016c4 <HAL_CAN_GetRxMessage+0x24>
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	f040 8103 	bne.w	80018ca <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10e      	bne.n	80016e8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d116      	bne.n	8001706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e0f7      	b.n	80018d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d107      	bne.n	8001706 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e0e8      	b.n	80018d8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	331b      	adds	r3, #27
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4413      	add	r3, r2
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0204 	and.w	r2, r3, #4
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	331b      	adds	r3, #27
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	0d5b      	lsrs	r3, r3, #21
 8001734:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e00b      	b.n	8001756 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	331b      	adds	r3, #27
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4413      	add	r3, r2
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	08db      	lsrs	r3, r3, #3
 800174e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	331b      	adds	r3, #27
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	4413      	add	r3, r2
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0202 	and.w	r2, r3, #2
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	331b      	adds	r3, #27
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2208      	movs	r2, #8
 8001788:	611a      	str	r2, [r3, #16]
 800178a:	e00b      	b.n	80017a4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	331b      	adds	r3, #27
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	4413      	add	r3, r2
 8001798:	3304      	adds	r3, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 020f 	and.w	r2, r3, #15
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	331b      	adds	r3, #27
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	4413      	add	r3, r2
 80017b0:	3304      	adds	r3, #4
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	331b      	adds	r3, #27
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	4413      	add	r3, r2
 80017c8:	3304      	adds	r3, #4
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	4413      	add	r3, r2
 80017de:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0a1a      	lsrs	r2, r3, #8
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0c1a      	lsrs	r2, r3, #16
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3302      	adds	r3, #2
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	0e1a      	lsrs	r2, r3, #24
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3303      	adds	r3, #3
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	011b      	lsls	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3304      	adds	r3, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0a1a      	lsrs	r2, r3, #8
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3305      	adds	r3, #5
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0c1a      	lsrs	r2, r3, #16
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	3306      	adds	r3, #6
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	011b      	lsls	r3, r3, #4
 800188c:	4413      	add	r3, r2
 800188e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	0e1a      	lsrs	r2, r3, #24
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	3307      	adds	r3, #7
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0220 	orr.w	r2, r2, #32
 80018b2:	60da      	str	r2, [r3, #12]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	691a      	ldr	r2, [r3, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0220 	orr.w	r2, r2, #32
 80018c4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e006      	b.n	80018d8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
  }
}
 80018d8:	4618      	mov	r0, r3
 80018da:	371c      	adds	r7, #28
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d002      	beq.n	8001902 <HAL_CAN_ActivateNotification+0x1e>
 80018fc:	7bfb      	ldrb	r3, [r7, #15]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d109      	bne.n	8001916 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6959      	ldr	r1, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	683a      	ldr	r2, [r7, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001912:	2300      	movs	r3, #0
 8001914:	e006      	b.n	8001924 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
  }
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08a      	sub	sp, #40	@ 0x28
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800196c:	6a3b      	ldr	r3, [r7, #32]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8083 	beq.w	8001a7e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	2b00      	cmp	r3, #0
 8001980:	d025      	beq.n	80019ce <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2201      	movs	r2, #1
 8001988:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d004      	beq.n	800199e <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
 800199c:	e017      	b.n	80019ce <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d004      	beq.n	80019b2 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b0:	e00d      	b.n	80019ce <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d004      	beq.n	80019c6 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80019bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80019c4:	e003      	b.n	80019ce <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d026      	beq.n	8001a26 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d004      	beq.n	80019f6 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	4798      	blx	r3
 80019f4:	e017      	b.n	8001a26 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a08:	e00d      	b.n	8001a26 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d004      	beq.n	8001a1e <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a16:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a1c:	e003      	b.n	8001a26 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d026      	beq.n	8001a7e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
 8001a4c:	e017      	b.n	8001a7e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a60:	e00d      	b.n	8001a7e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d004      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	e003      	b.n	8001a7e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f003 0308 	and.w	r3, r3, #8
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00c      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a98:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001aa2:	6a3b      	ldr	r3, [r7, #32]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00c      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2208      	movs	r2, #8
 8001abc:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d00a      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00c      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f003 0310 	and.w	r3, r3, #16
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001afc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2210      	movs	r2, #16
 8001b08:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b0a:	6a3b      	ldr	r3, [r7, #32]
 8001b0c:	f003 0320 	and.w	r3, r3, #32
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00c      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d007      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2208      	movs	r2, #8
 8001b24:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00a      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00c      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2210      	movs	r2, #16
 8001b68:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d00c      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d007      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d07b      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d072      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d043      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d03e      	beq.n	8001c90 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c18:	2b60      	cmp	r3, #96	@ 0x60
 8001c1a:	d02b      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x344>
 8001c1c:	2b60      	cmp	r3, #96	@ 0x60
 8001c1e:	d82e      	bhi.n	8001c7e <HAL_CAN_IRQHandler+0x34e>
 8001c20:	2b50      	cmp	r3, #80	@ 0x50
 8001c22:	d022      	beq.n	8001c6a <HAL_CAN_IRQHandler+0x33a>
 8001c24:	2b50      	cmp	r3, #80	@ 0x50
 8001c26:	d82a      	bhi.n	8001c7e <HAL_CAN_IRQHandler+0x34e>
 8001c28:	2b40      	cmp	r3, #64	@ 0x40
 8001c2a:	d019      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x330>
 8001c2c:	2b40      	cmp	r3, #64	@ 0x40
 8001c2e:	d826      	bhi.n	8001c7e <HAL_CAN_IRQHandler+0x34e>
 8001c30:	2b30      	cmp	r3, #48	@ 0x30
 8001c32:	d010      	beq.n	8001c56 <HAL_CAN_IRQHandler+0x326>
 8001c34:	2b30      	cmp	r3, #48	@ 0x30
 8001c36:	d822      	bhi.n	8001c7e <HAL_CAN_IRQHandler+0x34e>
 8001c38:	2b10      	cmp	r3, #16
 8001c3a:	d002      	beq.n	8001c42 <HAL_CAN_IRQHandler+0x312>
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d005      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c40:	e01d      	b.n	8001c7e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c4a:	e019      	b.n	8001c80 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	f043 0310 	orr.w	r3, r3, #16
 8001c52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c54:	e014      	b.n	8001c80 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	f043 0320 	orr.w	r3, r3, #32
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c5e:	e00f      	b.n	8001c80 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c66:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c68:	e00a      	b.n	8001c80 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c70:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c72:	e005      	b.n	8001c80 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c7c:	e000      	b.n	8001c80 <HAL_CAN_IRQHandler+0x350>
            break;
 8001c7e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c8e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2204      	movs	r2, #4
 8001c96:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	@ 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da8:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001db4:	4013      	ands	r3, r2
 8001db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	@ (8001dd8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00
 8001ddc:	05fa0000 	.word	0x05fa0000

08001de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de4:	4b04      	ldr	r3, [pc, #16]	@ (8001df8 <__NVIC_GetPriorityGrouping+0x18>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	0a1b      	lsrs	r3, r3, #8
 8001dea:	f003 0307 	and.w	r3, r3, #7
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	db0b      	blt.n	8001e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	f003 021f 	and.w	r2, r3, #31
 8001e14:	4907      	ldr	r1, [pc, #28]	@ (8001e34 <__NVIC_EnableIRQ+0x38>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	095b      	lsrs	r3, r3, #5
 8001e1c:	2001      	movs	r0, #1
 8001e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	e000e100 	.word	0xe000e100

08001e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6039      	str	r1, [r7, #0]
 8001e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	db0a      	blt.n	8001e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	490c      	ldr	r1, [pc, #48]	@ (8001e84 <__NVIC_SetPriority+0x4c>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e60:	e00a      	b.n	8001e78 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4908      	ldr	r1, [pc, #32]	@ (8001e88 <__NVIC_SetPriority+0x50>)
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	3b04      	subs	r3, #4
 8001e70:	0112      	lsls	r2, r2, #4
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	761a      	strb	r2, [r3, #24]
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	e000e100 	.word	0xe000e100
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f1c3 0307 	rsb	r3, r3, #7
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	bf28      	it	cs
 8001eaa:	2304      	movcs	r3, #4
 8001eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	2b06      	cmp	r3, #6
 8001eb4:	d902      	bls.n	8001ebc <NVIC_EncodePriority+0x30>
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3b03      	subs	r3, #3
 8001eba:	e000      	b.n	8001ebe <NVIC_EncodePriority+0x32>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43da      	mvns	r2, r3
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	401a      	ands	r2, r3
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee4:	4313      	orrs	r3, r2
         );
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	@ 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f04:	d301      	bcc.n	8001f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00f      	b.n	8001f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f34 <SysTick_Config+0x40>)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f12:	210f      	movs	r1, #15
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	f7ff ff8e 	bl	8001e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f1c:	4b05      	ldr	r3, [pc, #20]	@ (8001f34 <SysTick_Config+0x40>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f22:	4b04      	ldr	r3, [pc, #16]	@ (8001f34 <SysTick_Config+0x40>)
 8001f24:	2207      	movs	r2, #7
 8001f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	e000e010 	.word	0xe000e010

08001f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff29 	bl	8001d98 <__NVIC_SetPriorityGrouping>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	4603      	mov	r3, r0
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
 8001f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f60:	f7ff ff3e 	bl	8001de0 <__NVIC_GetPriorityGrouping>
 8001f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	68b9      	ldr	r1, [r7, #8]
 8001f6a:	6978      	ldr	r0, [r7, #20]
 8001f6c:	f7ff ff8e 	bl	8001e8c <NVIC_EncodePriority>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff ff5d 	bl	8001e38 <__NVIC_SetPriority>
}
 8001f7e:	bf00      	nop
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b082      	sub	sp, #8
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff ff31 	bl	8001dfc <__NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa2 	bl	8001ef4 <SysTick_Config>
 8001fb0:	4603      	mov	r3, r0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
	...

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	e175      	b.n	80022c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fdc:	2201      	movs	r2, #1
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	4013      	ands	r3, r2
 8001fee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	f040 8164 	bne.w	80022c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0303 	and.w	r3, r3, #3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d005      	beq.n	8002012 <HAL_GPIO_Init+0x56>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d130      	bne.n	8002074 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	2203      	movs	r2, #3
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 0201 	and.w	r2, r3, #1
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b03      	cmp	r3, #3
 800207e:	d017      	beq.n	80020b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	2203      	movs	r2, #3
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d123      	bne.n	8002104 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	220f      	movs	r2, #15
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	08da      	lsrs	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	69b9      	ldr	r1, [r7, #24]
 8002100:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0203 	and.w	r2, r3, #3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002140:	2b00      	cmp	r3, #0
 8002142:	f000 80be 	beq.w	80022c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002146:	4b66      	ldr	r3, [pc, #408]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214a:	4a65      	ldr	r2, [pc, #404]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 800214c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002150:	6453      	str	r3, [r2, #68]	@ 0x44
 8002152:	4b63      	ldr	r3, [pc, #396]	@ (80022e0 <HAL_GPIO_Init+0x324>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800215e:	4a61      	ldr	r2, [pc, #388]	@ (80022e4 <HAL_GPIO_Init+0x328>)
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	089b      	lsrs	r3, r3, #2
 8002164:	3302      	adds	r3, #2
 8002166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	220f      	movs	r2, #15
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_GPIO_Init+0x32c>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d037      	beq.n	80021fa <HAL_GPIO_Init+0x23e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a57      	ldr	r2, [pc, #348]	@ (80022ec <HAL_GPIO_Init+0x330>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d031      	beq.n	80021f6 <HAL_GPIO_Init+0x23a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a56      	ldr	r2, [pc, #344]	@ (80022f0 <HAL_GPIO_Init+0x334>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d02b      	beq.n	80021f2 <HAL_GPIO_Init+0x236>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a55      	ldr	r2, [pc, #340]	@ (80022f4 <HAL_GPIO_Init+0x338>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d025      	beq.n	80021ee <HAL_GPIO_Init+0x232>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a54      	ldr	r2, [pc, #336]	@ (80022f8 <HAL_GPIO_Init+0x33c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d01f      	beq.n	80021ea <HAL_GPIO_Init+0x22e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a53      	ldr	r2, [pc, #332]	@ (80022fc <HAL_GPIO_Init+0x340>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d019      	beq.n	80021e6 <HAL_GPIO_Init+0x22a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a52      	ldr	r2, [pc, #328]	@ (8002300 <HAL_GPIO_Init+0x344>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d013      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a51      	ldr	r2, [pc, #324]	@ (8002304 <HAL_GPIO_Init+0x348>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00d      	beq.n	80021de <HAL_GPIO_Init+0x222>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a50      	ldr	r2, [pc, #320]	@ (8002308 <HAL_GPIO_Init+0x34c>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4f      	ldr	r2, [pc, #316]	@ (800230c <HAL_GPIO_Init+0x350>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d101      	bne.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021d2:	2309      	movs	r3, #9
 80021d4:	e012      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021d6:	230a      	movs	r3, #10
 80021d8:	e010      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021da:	2308      	movs	r3, #8
 80021dc:	e00e      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021de:	2307      	movs	r3, #7
 80021e0:	e00c      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00a      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021e6:	2305      	movs	r3, #5
 80021e8:	e008      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021ea:	2304      	movs	r3, #4
 80021ec:	e006      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021ee:	2303      	movs	r3, #3
 80021f0:	e004      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021f2:	2302      	movs	r3, #2
 80021f4:	e002      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <HAL_GPIO_Init+0x240>
 80021fa:	2300      	movs	r3, #0
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f002 0203 	and.w	r2, r2, #3
 8002202:	0092      	lsls	r2, r2, #2
 8002204:	4093      	lsls	r3, r2
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800220c:	4935      	ldr	r1, [pc, #212]	@ (80022e4 <HAL_GPIO_Init+0x328>)
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	3302      	adds	r3, #2
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <HAL_GPIO_Init+0x354>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800223e:	4a34      	ldr	r2, [pc, #208]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002244:	4b32      	ldr	r3, [pc, #200]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002268:	4a29      	ldr	r2, [pc, #164]	@ (8002310 <HAL_GPIO_Init+0x354>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800226e:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002292:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_GPIO_Init+0x354>)
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002298:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_GPIO_Init+0x354>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <HAL_GPIO_Init+0x354>)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	2b0f      	cmp	r3, #15
 80022cc:	f67f ae86 	bls.w	8001fdc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40013800 	.word	0x40013800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020400 	.word	0x40020400
 80022f0:	40020800 	.word	0x40020800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40021400 	.word	0x40021400
 8002300:	40021800 	.word	0x40021800
 8002304:	40021c00 	.word	0x40021c00
 8002308:	40022000 	.word	0x40022000
 800230c:	40022400 	.word	0x40022400
 8002310:	40013c00 	.word	0x40013c00

08002314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	807b      	strh	r3, [r7, #2]
 8002320:	4613      	mov	r3, r2
 8002322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002324:	787b      	ldrb	r3, [r7, #1]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232a:	887a      	ldrh	r2, [r7, #2]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002330:	e003      	b.n	800233a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002332:	887b      	ldrh	r3, [r7, #2]
 8002334:	041a      	lsls	r2, r3, #16
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	619a      	str	r2, [r3, #24]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
 800234e:	460b      	mov	r3, r1
 8002350:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002358:	887a      	ldrh	r2, [r7, #2]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4013      	ands	r3, r2
 800235e:	041a      	lsls	r2, r3, #16
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	43d9      	mvns	r1, r3
 8002364:	887b      	ldrh	r3, [r7, #2]
 8002366:	400b      	ands	r3, r1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	619a      	str	r2, [r3, #24]
}
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <HAL_PWREx_EnableOverDrive+0x98>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <HAL_PWREx_EnableOverDrive+0x98>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	@ 0x40
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <HAL_PWREx_EnableOverDrive+0x98>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023aa:	f7fe fd77 	bl	8000e9c <HAL_GetTick>
 80023ae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023b0:	e009      	b.n	80023c6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023b2:	f7fe fd73 	bl	8000e9c <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023c0:	d901      	bls.n	80023c6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e022      	b.n	800240c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023c6:	4b14      	ldr	r3, [pc, #80]	@ (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d2:	d1ee      	bne.n	80023b2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023d4:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023e0:	f7fe fd5c 	bl	8000e9c <HAL_GetTick>
 80023e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023e6:	e009      	b.n	80023fc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023e8:	f7fe fd58 	bl	8000e9c <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023f6:	d901      	bls.n	80023fc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e007      	b.n	800240c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023fc:	4b06      	ldr	r3, [pc, #24]	@ (8002418 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002404:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002408:	d1ee      	bne.n	80023e8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40023800 	.word	0x40023800
 8002418:	40007000 	.word	0x40007000

0800241c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e29b      	b.n	800296a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8087 	beq.w	800254e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002440:	4b96      	ldr	r3, [pc, #600]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 030c 	and.w	r3, r3, #12
 8002448:	2b04      	cmp	r3, #4
 800244a:	d00c      	beq.n	8002466 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244c:	4b93      	ldr	r3, [pc, #588]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 030c 	and.w	r3, r3, #12
 8002454:	2b08      	cmp	r3, #8
 8002456:	d112      	bne.n	800247e <HAL_RCC_OscConfig+0x62>
 8002458:	4b90      	ldr	r3, [pc, #576]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002460:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002464:	d10b      	bne.n	800247e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002466:	4b8d      	ldr	r3, [pc, #564]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d06c      	beq.n	800254c <HAL_RCC_OscConfig+0x130>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d168      	bne.n	800254c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e275      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x7a>
 8002488:	4b84      	ldr	r3, [pc, #528]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a83      	ldr	r2, [pc, #524]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800248e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	e02e      	b.n	80024f4 <HAL_RCC_OscConfig+0xd8>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x9c>
 800249e:	4b7f      	ldr	r3, [pc, #508]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a7e      	ldr	r2, [pc, #504]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7b      	ldr	r2, [pc, #492]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xd8>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0xc0>
 80024c2:	4b76      	ldr	r3, [pc, #472]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a75      	ldr	r2, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b73      	ldr	r3, [pc, #460]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a72      	ldr	r2, [pc, #456]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xd8>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6b      	ldr	r2, [pc, #428]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7fe fcce 	bl	8000e9c <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7fe fcca 	bl	8000e9c <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e229      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b61      	ldr	r3, [pc, #388]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xe8>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7fe fcba 	bl	8000e9c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7fe fcb6 	bl	8000e9c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	@ 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e215      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b57      	ldr	r3, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x110>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d069      	beq.n	800262e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800255a:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00b      	beq.n	800257e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002566:	4b4d      	ldr	r3, [pc, #308]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
 800256e:	2b08      	cmp	r3, #8
 8002570:	d11c      	bne.n	80025ac <HAL_RCC_OscConfig+0x190>
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d116      	bne.n	80025ac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x17a>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e1e9      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	493d      	ldr	r1, [pc, #244]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025aa:	e040      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d023      	beq.n	80025fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025b4:	4b39      	ldr	r3, [pc, #228]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a38      	ldr	r2, [pc, #224]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fc6c 	bl	8000e9c <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025c8:	f7fe fc68 	bl	8000e9c <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e1c7      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b30      	ldr	r3, [pc, #192]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b2d      	ldr	r3, [pc, #180]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4929      	ldr	r1, [pc, #164]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
 80025fa:	e018      	b.n	800262e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025fc:	4b27      	ldr	r3, [pc, #156]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002602:	f023 0301 	bic.w	r3, r3, #1
 8002606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002608:	f7fe fc48 	bl	8000e9c <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002610:	f7fe fc44 	bl	8000e9c <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1a3      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	4b1e      	ldr	r3, [pc, #120]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d038      	beq.n	80026ac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d019      	beq.n	8002676 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002646:	4a15      	ldr	r2, [pc, #84]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002648:	f043 0301 	orr.w	r3, r3, #1
 800264c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800264e:	f7fe fc25 	bl	8000e9c <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002656:	f7fe fc21 	bl	8000e9c <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e180      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800266a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x23a>
 8002674:	e01a      	b.n	80026ac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 8002678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267a:	4a08      	ldr	r2, [pc, #32]	@ (800269c <HAL_RCC_OscConfig+0x280>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fc0b 	bl	8000e9c <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7fe fc07 	bl	8000e9c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d903      	bls.n	80026a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e166      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
 800269c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	4b92      	ldr	r3, [pc, #584]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ee      	bne.n	800268a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 80a4 	beq.w	8002802 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b8c      	ldr	r3, [pc, #560]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10d      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b89      	ldr	r3, [pc, #548]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	4a88      	ldr	r2, [pc, #544]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026d2:	4b86      	ldr	r3, [pc, #536]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e2:	4b83      	ldr	r3, [pc, #524]	@ (80028f0 <HAL_RCC_OscConfig+0x4d4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d118      	bne.n	8002720 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026ee:	4b80      	ldr	r3, [pc, #512]	@ (80028f0 <HAL_RCC_OscConfig+0x4d4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7f      	ldr	r2, [pc, #508]	@ (80028f0 <HAL_RCC_OscConfig+0x4d4>)
 80026f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fa:	f7fe fbcf 	bl	8000e9c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002702:	f7fe fbcb 	bl	8000e9c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b64      	cmp	r3, #100	@ 0x64
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e12a      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002714:	4b76      	ldr	r3, [pc, #472]	@ (80028f0 <HAL_RCC_OscConfig+0x4d4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x31a>
 8002728:	4b70      	ldr	r3, [pc, #448]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800272a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800272c:	4a6f      	ldr	r2, [pc, #444]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6713      	str	r3, [r2, #112]	@ 0x70
 8002734:	e02d      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10c      	bne.n	8002758 <HAL_RCC_OscConfig+0x33c>
 800273e:	4b6b      	ldr	r3, [pc, #428]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	4a6a      	ldr	r2, [pc, #424]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
 800274a:	4b68      	ldr	r3, [pc, #416]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	4a67      	ldr	r2, [pc, #412]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	@ 0x70
 8002756:	e01c      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b05      	cmp	r3, #5
 800275e:	d10c      	bne.n	800277a <HAL_RCC_OscConfig+0x35e>
 8002760:	4b62      	ldr	r3, [pc, #392]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002764:	4a61      	ldr	r2, [pc, #388]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6713      	str	r3, [r2, #112]	@ 0x70
 800276c:	4b5f      	ldr	r3, [pc, #380]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a5e      	ldr	r2, [pc, #376]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
 8002778:	e00b      	b.n	8002792 <HAL_RCC_OscConfig+0x376>
 800277a:	4b5c      	ldr	r3, [pc, #368]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	4a5b      	ldr	r2, [pc, #364]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	@ 0x70
 8002786:	4b59      	ldr	r3, [pc, #356]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800278a:	4a58      	ldr	r2, [pc, #352]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800278c:	f023 0304 	bic.w	r3, r3, #4
 8002790:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fb7f 	bl	8000e9c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a0:	e00a      	b.n	80027b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fb7b 	bl	8000e9c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e0d8      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b8:	4b4c      	ldr	r3, [pc, #304]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d0ee      	beq.n	80027a2 <HAL_RCC_OscConfig+0x386>
 80027c4:	e014      	b.n	80027f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7fe fb69 	bl	8000e9c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7fe fb65 	bl	8000e9c <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0c2      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e4:	4b41      	ldr	r3, [pc, #260]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ee      	bne.n	80027ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b3d      	ldr	r3, [pc, #244]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a3c      	ldr	r2, [pc, #240]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80ae 	beq.w	8002968 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800280c:	4b37      	ldr	r3, [pc, #220]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 030c 	and.w	r3, r3, #12
 8002814:	2b08      	cmp	r3, #8
 8002816:	d06d      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d14b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b32      	ldr	r3, [pc, #200]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a31      	ldr	r2, [pc, #196]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe fb36 	bl	8000e9c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fb32 	bl	8000e9c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e091      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287c:	071b      	lsls	r3, r3, #28
 800287e:	491b      	ldr	r1, [pc, #108]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a18      	ldr	r2, [pc, #96]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 800288a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800288e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7fe fb04 	bl	8000e9c <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fb00 	bl	8000e9c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e05f      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028aa:	4b10      	ldr	r3, [pc, #64]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x47c>
 80028b6:	e057      	b.n	8002968 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a0b      	ldr	r2, [pc, #44]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80028be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe faea 	bl	8000e9c <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fae6 	bl	8000e9c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e045      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028de:	4b03      	ldr	r3, [pc, #12]	@ (80028ec <HAL_RCC_OscConfig+0x4d0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x4b0>
 80028ea:	e03d      	b.n	8002968 <HAL_RCC_OscConfig+0x54c>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002974 <HAL_RCC_OscConfig+0x558>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d030      	beq.n	8002964 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290c:	429a      	cmp	r2, r3
 800290e:	d129      	bne.n	8002964 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d122      	bne.n	8002964 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800291e:	68fa      	ldr	r2, [r7, #12]
 8002920:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800292a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800292c:	4293      	cmp	r3, r2
 800292e:	d119      	bne.n	8002964 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	085b      	lsrs	r3, r3, #1
 800293c:	3b01      	subs	r3, #1
 800293e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d10f      	bne.n	8002964 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002950:	429a      	cmp	r2, r3
 8002952:	d107      	bne.n	8002964 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e000      	b.n	800296a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3718      	adds	r7, #24
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0d0      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d910      	bls.n	80029c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b67      	ldr	r3, [pc, #412]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f023 020f 	bic.w	r2, r3, #15
 80029a6:	4965      	ldr	r1, [pc, #404]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	4b63      	ldr	r3, [pc, #396]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e0b8      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d020      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d005      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d8:	4b59      	ldr	r3, [pc, #356]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	4a58      	ldr	r2, [pc, #352]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0308 	and.w	r3, r3, #8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f0:	4b53      	ldr	r3, [pc, #332]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a52      	ldr	r2, [pc, #328]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b50      	ldr	r3, [pc, #320]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	494d      	ldr	r1, [pc, #308]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d040      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a22:	4b47      	ldr	r3, [pc, #284]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d115      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e07f      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b41      	ldr	r3, [pc, #260]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e073      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e06b      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b39      	ldr	r3, [pc, #228]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4936      	ldr	r1, [pc, #216]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a6c:	f7fe fa16 	bl	8000e9c <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7fe fa12 	bl	8000e9c <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e053      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d210      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b24      	ldr	r3, [pc, #144]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 020f 	bic.w	r2, r3, #15
 8002ab2:	4922      	ldr	r1, [pc, #136]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e032      	b.n	8002b32 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4916      	ldr	r1, [pc, #88]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002af6:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490e      	ldr	r1, [pc, #56]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b0a:	f000 f821 	bl	8002b50 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <HAL_RCC_ClockConfig+0x1c8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490a      	ldr	r1, [pc, #40]	@ (8002b44 <HAL_RCC_ClockConfig+0x1cc>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b22:	4a09      	ldr	r2, [pc, #36]	@ (8002b48 <HAL_RCC_ClockConfig+0x1d0>)
 8002b24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b26:	4b09      	ldr	r3, [pc, #36]	@ (8002b4c <HAL_RCC_ClockConfig+0x1d4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fe f972 	bl	8000e14 <HAL_InitTick>

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023c00 	.word	0x40023c00
 8002b40:	40023800 	.word	0x40023800
 8002b44:	0800697c 	.word	0x0800697c
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	20000004 	.word	0x20000004

08002b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b54:	b094      	sub	sp, #80	@ 0x50
 8002b56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b60:	2300      	movs	r3, #0
 8002b62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b68:	4b79      	ldr	r3, [pc, #484]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d00d      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x40>
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	f200 80e1 	bhi.w	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d002      	beq.n	8002b84 <HAL_RCC_GetSysClockFreq+0x34>
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d003      	beq.n	8002b8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b82:	e0db      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b84:	4b73      	ldr	r3, [pc, #460]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b88:	e0db      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b8a:	4b72      	ldr	r3, [pc, #456]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b8e:	e0d8      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b90:	4b6f      	ldr	r3, [pc, #444]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d063      	beq.n	8002c6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	099b      	lsrs	r3, r3, #6
 8002bac:	2200      	movs	r2, #0
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bba:	2300      	movs	r3, #0
 8002bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc2:	4622      	mov	r2, r4
 8002bc4:	462b      	mov	r3, r5
 8002bc6:	f04f 0000 	mov.w	r0, #0
 8002bca:	f04f 0100 	mov.w	r1, #0
 8002bce:	0159      	lsls	r1, r3, #5
 8002bd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bd4:	0150      	lsls	r0, r2, #5
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4621      	mov	r1, r4
 8002bdc:	1a51      	subs	r1, r2, r1
 8002bde:	6139      	str	r1, [r7, #16]
 8002be0:	4629      	mov	r1, r5
 8002be2:	eb63 0301 	sbc.w	r3, r3, r1
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf4:	4659      	mov	r1, fp
 8002bf6:	018b      	lsls	r3, r1, #6
 8002bf8:	4651      	mov	r1, sl
 8002bfa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bfe:	4651      	mov	r1, sl
 8002c00:	018a      	lsls	r2, r1, #6
 8002c02:	4651      	mov	r1, sl
 8002c04:	ebb2 0801 	subs.w	r8, r2, r1
 8002c08:	4659      	mov	r1, fp
 8002c0a:	eb63 0901 	sbc.w	r9, r3, r1
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	f04f 0300 	mov.w	r3, #0
 8002c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	4623      	mov	r3, r4
 8002c28:	eb18 0303 	adds.w	r3, r8, r3
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	462b      	mov	r3, r5
 8002c30:	eb49 0303 	adc.w	r3, r9, r3
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c42:	4629      	mov	r1, r5
 8002c44:	028b      	lsls	r3, r1, #10
 8002c46:	4621      	mov	r1, r4
 8002c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	028a      	lsls	r2, r1, #10
 8002c50:	4610      	mov	r0, r2
 8002c52:	4619      	mov	r1, r3
 8002c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c56:	2200      	movs	r2, #0
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c60:	f7fd faee 	bl	8000240 <__aeabi_uldivmod>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4613      	mov	r3, r2
 8002c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c6c:	e058      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c6e:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	099b      	lsrs	r3, r3, #6
 8002c74:	2200      	movs	r2, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	4611      	mov	r1, r2
 8002c7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c7e:	623b      	str	r3, [r7, #32]
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c88:	4642      	mov	r2, r8
 8002c8a:	464b      	mov	r3, r9
 8002c8c:	f04f 0000 	mov.w	r0, #0
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	0159      	lsls	r1, r3, #5
 8002c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c9a:	0150      	lsls	r0, r2, #5
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4641      	mov	r1, r8
 8002ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002cc0:	ebb2 040a 	subs.w	r4, r2, sl
 8002cc4:	eb63 050b 	sbc.w	r5, r3, fp
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	00eb      	lsls	r3, r5, #3
 8002cd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cd6:	00e2      	lsls	r2, r4, #3
 8002cd8:	4614      	mov	r4, r2
 8002cda:	461d      	mov	r5, r3
 8002cdc:	4643      	mov	r3, r8
 8002cde:	18e3      	adds	r3, r4, r3
 8002ce0:	603b      	str	r3, [r7, #0]
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	eb45 0303 	adc.w	r3, r5, r3
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cf6:	4629      	mov	r1, r5
 8002cf8:	028b      	lsls	r3, r1, #10
 8002cfa:	4621      	mov	r1, r4
 8002cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d00:	4621      	mov	r1, r4
 8002d02:	028a      	lsls	r2, r1, #10
 8002d04:	4610      	mov	r0, r2
 8002d06:	4619      	mov	r1, r3
 8002d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	61fa      	str	r2, [r7, #28]
 8002d10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d14:	f7fd fa94 	bl	8000240 <__aeabi_uldivmod>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002d30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3750      	adds	r7, #80	@ 0x50
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023800 	.word	0x40023800
 8002d54:	00f42400 	.word	0x00f42400

08002d58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002d5c:	bf00      	nop
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
	...

08002d68 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d6e:	f3ef 8305 	mrs	r3, IPSR
 8002d72:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10f      	bne.n	8002d9a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d7e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d105      	bne.n	8002d92 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d86:	f3ef 8311 	mrs	r3, BASEPRI
 8002d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <osKernelInitialize+0x3a>
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <osKernelInitialize+0x64>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d103      	bne.n	8002da2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d9a:	f06f 0305 	mvn.w	r3, #5
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e00c      	b.n	8002dbc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002da2:	4b0a      	ldr	r3, [pc, #40]	@ (8002dcc <osKernelInitialize+0x64>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <osKernelInitialize+0x64>)
 8002dac:	2201      	movs	r2, #1
 8002dae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	e002      	b.n	8002dbc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	200000f4 	.word	0x200000f4

08002dd0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd6:	f3ef 8305 	mrs	r3, IPSR
 8002dda:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10f      	bne.n	8002e02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de2:	f3ef 8310 	mrs	r3, PRIMASK
 8002de6:	607b      	str	r3, [r7, #4]
  return(result);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d105      	bne.n	8002dfa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dee:	f3ef 8311 	mrs	r3, BASEPRI
 8002df2:	603b      	str	r3, [r7, #0]
  return(result);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d007      	beq.n	8002e0a <osKernelStart+0x3a>
 8002dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8002e38 <osKernelStart+0x68>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d103      	bne.n	8002e0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e02:	f06f 0305 	mvn.w	r3, #5
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e010      	b.n	8002e2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <osKernelStart+0x68>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d109      	bne.n	8002e26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e12:	f7ff ffa1 	bl	8002d58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e16:	4b08      	ldr	r3, [pc, #32]	@ (8002e38 <osKernelStart+0x68>)
 8002e18:	2202      	movs	r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e1c:	f001 fd16 	bl	800484c <vTaskStartScheduler>
      stat = osOK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	e002      	b.n	8002e2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002e26:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200000f4 	.word	0x200000f4

08002e3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b090      	sub	sp, #64	@ 0x40
 8002e40:	af04      	add	r7, sp, #16
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e4c:	f3ef 8305 	mrs	r3, IPSR
 8002e50:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e52:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 808f 	bne.w	8002f78 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e66:	f3ef 8311 	mrs	r3, BASEPRI
 8002e6a:	617b      	str	r3, [r7, #20]
  return(result);
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <osThreadNew+0x3e>
 8002e72:	4b44      	ldr	r3, [pc, #272]	@ (8002f84 <osThreadNew+0x148>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d07e      	beq.n	8002f78 <osThreadNew+0x13c>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d07b      	beq.n	8002f78 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002e80:	2380      	movs	r3, #128	@ 0x80
 8002e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002e84:	2318      	movs	r3, #24
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8002e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e90:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d045      	beq.n	8002f24 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d002      	beq.n	8002ea6 <osThreadNew+0x6a>
        name = attr->name;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <osThreadNew+0x90>
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	2b38      	cmp	r3, #56	@ 0x38
 8002ebe:	d805      	bhi.n	8002ecc <osThreadNew+0x90>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <osThreadNew+0x94>
        return (NULL);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	e054      	b.n	8002f7a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	089b      	lsrs	r3, r3, #2
 8002ede:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00e      	beq.n	8002f06 <osThreadNew+0xca>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	2ba7      	cmp	r3, #167	@ 0xa7
 8002eee:	d90a      	bls.n	8002f06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <osThreadNew+0xca>
        mem = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	623b      	str	r3, [r7, #32]
 8002f04:	e010      	b.n	8002f28 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10c      	bne.n	8002f28 <osThreadNew+0xec>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d108      	bne.n	8002f28 <osThreadNew+0xec>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <osThreadNew+0xec>
          mem = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	623b      	str	r3, [r7, #32]
 8002f22:	e001      	b.n	8002f28 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d110      	bne.n	8002f50 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002f36:	9202      	str	r2, [sp, #8]
 8002f38:	9301      	str	r3, [sp, #4]
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f001 fa84 	bl	8004452 <xTaskCreateStatic>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	e013      	b.n	8002f78 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d110      	bne.n	8002f78 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	f107 0310 	add.w	r3, r7, #16
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f001 fad8 	bl	800451e <xTaskCreate>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d001      	beq.n	8002f78 <osThreadNew+0x13c>
          hTask = NULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f78:	693b      	ldr	r3, [r7, #16]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3730      	adds	r7, #48	@ 0x30
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200000f4 	.word	0x200000f4

08002f88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f90:	f3ef 8305 	mrs	r3, IPSR
 8002f94:	613b      	str	r3, [r7, #16]
  return(result);
 8002f96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10f      	bne.n	8002fbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d105      	bne.n	8002fb4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8002fac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <osDelay+0x3c>
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe0 <osDelay+0x58>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d103      	bne.n	8002fc4 <osDelay+0x3c>
    stat = osErrorISR;
 8002fbc:	f06f 0305 	mvn.w	r3, #5
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e007      	b.n	8002fd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d002      	beq.n	8002fd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f001 fc04 	bl	80047dc <vTaskDelay>
    }
  }

  return (stat);
 8002fd4:	697b      	ldr	r3, [r7, #20]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000f4 	.word	0x200000f4

08002fe4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ff4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4a06      	ldr	r2, [pc, #24]	@ (8003014 <vApplicationGetIdleTaskMemory+0x30>)
 8002ffa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2280      	movs	r2, #128	@ 0x80
 8003000:	601a      	str	r2, [r3, #0]
}
 8003002:	bf00      	nop
 8003004:	3714      	adds	r7, #20
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	200000f8 	.word	0x200000f8
 8003014:	200001a0 	.word	0x200001a0

08003018 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <vApplicationGetTimerTaskMemory+0x2c>)
 8003028:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4a06      	ldr	r2, [pc, #24]	@ (8003048 <vApplicationGetTimerTaskMemory+0x30>)
 800302e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003036:	601a      	str	r2, [r3, #0]
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr
 8003044:	200003a0 	.word	0x200003a0
 8003048:	20000448 	.word	0x20000448

0800304c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f103 0208 	add.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f103 0208 	add.w	r2, r3, #8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f103 0208 	add.w	r2, r3, #8
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030a6:	b480      	push	{r7}
 80030a8:	b085      	sub	sp, #20
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	6078      	str	r0, [r7, #4]
 80030ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	601a      	str	r2, [r3, #0]
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003104:	d103      	bne.n	800310e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e00c      	b.n	8003128 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3308      	adds	r3, #8
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	e002      	b.n	800311c <vListInsert+0x2e>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	d2f6      	bcs.n	8003116 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	601a      	str	r2, [r3, #0]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6892      	ldr	r2, [r2, #8]
 8003176:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6852      	ldr	r2, [r2, #4]
 8003180:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d103      	bne.n	8003194 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	1e5a      	subs	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10d      	bne.n	80031e4 <xQueueGenericReset+0x30>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031cc:	b672      	cpsid	i
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	b662      	cpsie	i
 80031dc:	60bb      	str	r3, [r7, #8]
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	e7fd      	b.n	80031e0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80031e4:	f002 ff82 	bl	80060ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	441a      	add	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	3b01      	subs	r3, #1
 8003216:	68f9      	ldr	r1, [r7, #12]
 8003218:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	441a      	add	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	22ff      	movs	r2, #255	@ 0xff
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	22ff      	movs	r2, #255	@ 0xff
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d114      	bne.n	8003264 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01a      	beq.n	8003278 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3310      	adds	r3, #16
 8003246:	4618      	mov	r0, r3
 8003248:	f001 fdac 	bl	8004da4 <xTaskRemoveFromEventList>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d012      	beq.n	8003278 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003252:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <xQueueGenericReset+0xd4>)
 8003254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003258:	601a      	str	r2, [r3, #0]
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	e009      	b.n	8003278 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3310      	adds	r3, #16
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff feef 	bl	800304c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3324      	adds	r3, #36	@ 0x24
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff feea 	bl	800304c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003278:	f002 ff6e 	bl	8006158 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800327c:	2301      	movs	r3, #1
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000ed04 	.word	0xe000ed04

0800328c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	@ 0x38
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a4:	b672      	cpsid	i
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	b662      	cpsie	i
 80032b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80032b6:	bf00      	nop
 80032b8:	bf00      	nop
 80032ba:	e7fd      	b.n	80032b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10d      	bne.n	80032de <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	b672      	cpsid	i
 80032c8:	f383 8811 	msr	BASEPRI, r3
 80032cc:	f3bf 8f6f 	isb	sy
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	b662      	cpsie	i
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xQueueGenericCreateStatic+0x5e>
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <xQueueGenericCreateStatic+0x62>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <xQueueGenericCreateStatic+0x64>
 80032ee:	2300      	movs	r3, #0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10d      	bne.n	8003310 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80032f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f8:	b672      	cpsid	i
 80032fa:	f383 8811 	msr	BASEPRI, r3
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f3bf 8f4f 	dsb	sy
 8003306:	b662      	cpsie	i
 8003308:	623b      	str	r3, [r7, #32]
}
 800330a:	bf00      	nop
 800330c:	bf00      	nop
 800330e:	e7fd      	b.n	800330c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d102      	bne.n	800331c <xQueueGenericCreateStatic+0x90>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d101      	bne.n	8003320 <xQueueGenericCreateStatic+0x94>
 800331c:	2301      	movs	r3, #1
 800331e:	e000      	b.n	8003322 <xQueueGenericCreateStatic+0x96>
 8003320:	2300      	movs	r3, #0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10d      	bne.n	8003342 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8003326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332a:	b672      	cpsid	i
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	b662      	cpsie	i
 800333a:	61fb      	str	r3, [r7, #28]
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	e7fd      	b.n	800333e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003342:	2350      	movs	r3, #80	@ 0x50
 8003344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b50      	cmp	r3, #80	@ 0x50
 800334a:	d00d      	beq.n	8003368 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003350:	b672      	cpsid	i
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	b662      	cpsie	i
 8003360:	61bb      	str	r3, [r7, #24]
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003368:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800336e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00d      	beq.n	8003390 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800337c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	4613      	mov	r3, r2
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	68b9      	ldr	r1, [r7, #8]
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f805 	bl	800339a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003392:	4618      	mov	r0, r3
 8003394:	3730      	adds	r7, #48	@ 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	607a      	str	r2, [r7, #4]
 80033a6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d103      	bne.n	80033b6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e002      	b.n	80033bc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033c8:	2101      	movs	r1, #1
 80033ca:	69b8      	ldr	r0, [r7, #24]
 80033cc:	f7ff fef2 	bl	80031b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	@ 0x38
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033ee:	2300      	movs	r3, #0
 80033f0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10d      	bne.n	8003418 <xQueueGenericSend+0x38>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003400:	b672      	cpsid	i
 8003402:	f383 8811 	msr	BASEPRI, r3
 8003406:	f3bf 8f6f 	isb	sy
 800340a:	f3bf 8f4f 	dsb	sy
 800340e:	b662      	cpsie	i
 8003410:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d103      	bne.n	8003426 <xQueueGenericSend+0x46>
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <xQueueGenericSend+0x4a>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <xQueueGenericSend+0x4c>
 800342a:	2300      	movs	r3, #0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10d      	bne.n	800344c <xQueueGenericSend+0x6c>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003434:	b672      	cpsid	i
 8003436:	f383 8811 	msr	BASEPRI, r3
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	f3bf 8f4f 	dsb	sy
 8003442:	b662      	cpsie	i
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003446:	bf00      	nop
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b02      	cmp	r3, #2
 8003450:	d103      	bne.n	800345a <xQueueGenericSend+0x7a>
 8003452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <xQueueGenericSend+0x7e>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <xQueueGenericSend+0x80>
 800345e:	2300      	movs	r3, #0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10d      	bne.n	8003480 <xQueueGenericSend+0xa0>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003468:	b672      	cpsid	i
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	b662      	cpsie	i
 8003478:	623b      	str	r3, [r7, #32]
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003480:	f001 fe98 	bl	80051b4 <xTaskGetSchedulerState>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <xQueueGenericSend+0xb0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d101      	bne.n	8003494 <xQueueGenericSend+0xb4>
 8003490:	2301      	movs	r3, #1
 8003492:	e000      	b.n	8003496 <xQueueGenericSend+0xb6>
 8003494:	2300      	movs	r3, #0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d10d      	bne.n	80034b6 <xQueueGenericSend+0xd6>
	__asm volatile
 800349a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349e:	b672      	cpsid	i
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	b662      	cpsie	i
 80034ae:	61fb      	str	r3, [r7, #28]
}
 80034b0:	bf00      	nop
 80034b2:	bf00      	nop
 80034b4:	e7fd      	b.n	80034b2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034b6:	f002 fe19 	bl	80060ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <xQueueGenericSend+0xec>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d129      	bne.n	8003520 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034d2:	f000 fa1b 	bl	800390c <prvCopyDataToQueue>
 80034d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e2:	3324      	adds	r3, #36	@ 0x24
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fc5d 	bl	8004da4 <xTaskRemoveFromEventList>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034f0:	4b3f      	ldr	r3, [pc, #252]	@ (80035f0 <xQueueGenericSend+0x210>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e00a      	b.n	8003518 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003504:	2b00      	cmp	r3, #0
 8003506:	d007      	beq.n	8003518 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003508:	4b39      	ldr	r3, [pc, #228]	@ (80035f0 <xQueueGenericSend+0x210>)
 800350a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	f3bf 8f4f 	dsb	sy
 8003514:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003518:	f002 fe1e 	bl	8006158 <vPortExitCritical>
				return pdPASS;
 800351c:	2301      	movs	r3, #1
 800351e:	e063      	b.n	80035e8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003526:	f002 fe17 	bl	8006158 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800352a:	2300      	movs	r3, #0
 800352c:	e05c      	b.n	80035e8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800352e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003534:	f107 0314 	add.w	r3, r7, #20
 8003538:	4618      	mov	r0, r3
 800353a:	f001 fcc3 	bl	8004ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003542:	f002 fe09 	bl	8006158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003546:	f001 f9f5 	bl	8004934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800354a:	f002 fdcf 	bl	80060ec <vPortEnterCritical>
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003554:	b25b      	sxtb	r3, r3
 8003556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355a:	d103      	bne.n	8003564 <xQueueGenericSend+0x184>
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800356a:	b25b      	sxtb	r3, r3
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d103      	bne.n	800357a <xQueueGenericSend+0x19a>
 8003572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800357a:	f002 fded 	bl	8006158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800357e:	1d3a      	adds	r2, r7, #4
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	4611      	mov	r1, r2
 8003586:	4618      	mov	r0, r3
 8003588:	f001 fcb2 	bl	8004ef0 <xTaskCheckForTimeOut>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d124      	bne.n	80035dc <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003592:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003594:	f000 fab2 	bl	8003afc <prvIsQueueFull>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d018      	beq.n	80035d0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	3310      	adds	r3, #16
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fba6 	bl	8004cf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ae:	f000 fa3d 	bl	8003a2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035b2:	f001 f9cd 	bl	8004950 <xTaskResumeAll>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f47f af7c 	bne.w	80034b6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <xQueueGenericSend+0x210>)
 80035c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	e772      	b.n	80034b6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035d2:	f000 fa2b 	bl	8003a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035d6:	f001 f9bb 	bl	8004950 <xTaskResumeAll>
 80035da:	e76c      	b.n	80034b6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035de:	f000 fa25 	bl	8003a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035e2:	f001 f9b5 	bl	8004950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3738      	adds	r7, #56	@ 0x38
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08e      	sub	sp, #56	@ 0x38
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003610:	b672      	cpsid	i
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	b662      	cpsie	i
 8003620:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003622:	bf00      	nop
 8003624:	bf00      	nop
 8003626:	e7fd      	b.n	8003624 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d103      	bne.n	8003636 <xQueueGenericSendFromISR+0x42>
 800362e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <xQueueGenericSendFromISR+0x46>
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <xQueueGenericSendFromISR+0x48>
 800363a:	2300      	movs	r3, #0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10d      	bne.n	800365c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8003640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003644:	b672      	cpsid	i
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	b662      	cpsie	i
 8003654:	623b      	str	r3, [r7, #32]
}
 8003656:	bf00      	nop
 8003658:	bf00      	nop
 800365a:	e7fd      	b.n	8003658 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	2b02      	cmp	r3, #2
 8003660:	d103      	bne.n	800366a <xQueueGenericSendFromISR+0x76>
 8003662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003666:	2b01      	cmp	r3, #1
 8003668:	d101      	bne.n	800366e <xQueueGenericSendFromISR+0x7a>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <xQueueGenericSendFromISR+0x7c>
 800366e:	2300      	movs	r3, #0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8003674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003678:	b672      	cpsid	i
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	b662      	cpsie	i
 8003688:	61fb      	str	r3, [r7, #28]
}
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003690:	f002 fe14 	bl	80062bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003694:	f3ef 8211 	mrs	r2, BASEPRI
 8003698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369c:	b672      	cpsid	i
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	b662      	cpsie	i
 80036ac:	61ba      	str	r2, [r7, #24]
 80036ae:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036b0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	429a      	cmp	r2, r3
 80036be:	d302      	bcc.n	80036c6 <xQueueGenericSendFromISR+0xd2>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d12c      	bne.n	8003720 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036d6:	f000 f919 	bl	800390c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036da:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d112      	bne.n	800370a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d016      	beq.n	800371a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	3324      	adds	r3, #36	@ 0x24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f001 fb57 	bl	8004da4 <xTaskRemoveFromEventList>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	e007      	b.n	800371a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800370a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800370e:	3301      	adds	r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	b25a      	sxtb	r2, r3
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800371a:	2301      	movs	r3, #1
 800371c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800371e:	e001      	b.n	8003724 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003720:	2300      	movs	r3, #0
 8003722:	637b      	str	r3, [r7, #52]	@ 0x34
 8003724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003726:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800372e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003732:	4618      	mov	r0, r3
 8003734:	3738      	adds	r7, #56	@ 0x38
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	@ 0x30
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003748:	2300      	movs	r3, #0
 800374a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10d      	bne.n	8003772 <xQueueReceive+0x36>
	__asm volatile
 8003756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375a:	b672      	cpsid	i
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	b662      	cpsie	i
 800376a:	623b      	str	r3, [r7, #32]
}
 800376c:	bf00      	nop
 800376e:	bf00      	nop
 8003770:	e7fd      	b.n	800376e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <xQueueReceive+0x44>
 8003778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <xQueueReceive+0x48>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <xQueueReceive+0x4a>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <xQueueReceive+0x6a>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	b672      	cpsid	i
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	b662      	cpsie	i
 800379e:	61fb      	str	r3, [r7, #28]
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	e7fd      	b.n	80037a2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037a6:	f001 fd05 	bl	80051b4 <xTaskGetSchedulerState>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <xQueueReceive+0x7a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <xQueueReceive+0x7e>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <xQueueReceive+0x80>
 80037ba:	2300      	movs	r3, #0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <xQueueReceive+0xa0>
	__asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c4:	b672      	cpsid	i
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	b662      	cpsie	i
 80037d4:	61bb      	str	r3, [r7, #24]
}
 80037d6:	bf00      	nop
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037dc:	f002 fc86 	bl	80060ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01f      	beq.n	800382c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037ec:	68b9      	ldr	r1, [r7, #8]
 80037ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037f0:	f000 f8f6 	bl	80039e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	1e5a      	subs	r2, r3, #1
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00f      	beq.n	8003824 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	3310      	adds	r3, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f001 facb 	bl	8004da4 <xTaskRemoveFromEventList>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d007      	beq.n	8003824 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003814:	4b3c      	ldr	r3, [pc, #240]	@ (8003908 <xQueueReceive+0x1cc>)
 8003816:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003824:	f002 fc98 	bl	8006158 <vPortExitCritical>
				return pdPASS;
 8003828:	2301      	movs	r3, #1
 800382a:	e069      	b.n	8003900 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d103      	bne.n	800383a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003832:	f002 fc91 	bl	8006158 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003836:	2300      	movs	r3, #0
 8003838:	e062      	b.n	8003900 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d106      	bne.n	800384e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003840:	f107 0310 	add.w	r3, r7, #16
 8003844:	4618      	mov	r0, r3
 8003846:	f001 fb3d 	bl	8004ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800384a:	2301      	movs	r3, #1
 800384c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800384e:	f002 fc83 	bl	8006158 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003852:	f001 f86f 	bl	8004934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003856:	f002 fc49 	bl	80060ec <vPortEnterCritical>
 800385a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003860:	b25b      	sxtb	r3, r3
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d103      	bne.n	8003870 <xQueueReceive+0x134>
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	2200      	movs	r2, #0
 800386c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003872:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003876:	b25b      	sxtb	r3, r3
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d103      	bne.n	8003886 <xQueueReceive+0x14a>
 800387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003886:	f002 fc67 	bl	8006158 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800388a:	1d3a      	adds	r2, r7, #4
 800388c:	f107 0310 	add.w	r3, r7, #16
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f001 fb2c 	bl	8004ef0 <xTaskCheckForTimeOut>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d123      	bne.n	80038e6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800389e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a0:	f000 f916 	bl	8003ad0 <prvIsQueueEmpty>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ac:	3324      	adds	r3, #36	@ 0x24
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f001 fa20 	bl	8004cf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ba:	f000 f8b7 	bl	8003a2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038be:	f001 f847 	bl	8004950 <xTaskResumeAll>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d189      	bne.n	80037dc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80038c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003908 <xQueueReceive+0x1cc>)
 80038ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	f3bf 8f4f 	dsb	sy
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	e780      	b.n	80037dc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038dc:	f000 f8a6 	bl	8003a2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038e0:	f001 f836 	bl	8004950 <xTaskResumeAll>
 80038e4:	e77a      	b.n	80037dc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038e8:	f000 f8a0 	bl	8003a2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ec:	f001 f830 	bl	8004950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f2:	f000 f8ed 	bl	8003ad0 <prvIsQueueEmpty>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f43f af6f 	beq.w	80037dc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003900:	4618      	mov	r0, r3
 8003902:	3730      	adds	r7, #48	@ 0x30
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10d      	bne.n	8003946 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d14d      	bne.n	80039ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4618      	mov	r0, r3
 8003938:	f001 fc5a 	bl	80051f0 <xTaskPriorityDisinherit>
 800393c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	e043      	b.n	80039ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d119      	bne.n	8003980 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6858      	ldr	r0, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	461a      	mov	r2, r3
 8003956:	68b9      	ldr	r1, [r7, #8]
 8003958:	f002 ff6c 	bl	8006834 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003964:	441a      	add	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	d32b      	bcc.n	80039ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	e026      	b.n	80039ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68d8      	ldr	r0, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003988:	461a      	mov	r2, r3
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	f002 ff52 	bl	8006834 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	425b      	negs	r3, r3
 800399a:	441a      	add	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d207      	bcs.n	80039bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	425b      	negs	r3, r3
 80039b6:	441a      	add	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d105      	bne.n	80039ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039d6:	697b      	ldr	r3, [r7, #20]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d018      	beq.n	8003a24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68da      	ldr	r2, [r3, #12]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fa:	441a      	add	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d303      	bcc.n	8003a14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68d9      	ldr	r1, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6838      	ldr	r0, [r7, #0]
 8003a20:	f002 ff08 	bl	8006834 <memcpy>
	}
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a34:	f002 fb5a 	bl	80060ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a40:	e011      	b.n	8003a66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d012      	beq.n	8003a70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3324      	adds	r3, #36	@ 0x24
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 f9a8 	bl	8004da4 <xTaskRemoveFromEventList>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a5a:	f001 fab1 	bl	8004fc0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	dce9      	bgt.n	8003a42 <prvUnlockQueue+0x16>
 8003a6e:	e000      	b.n	8003a72 <prvUnlockQueue+0x46>
					break;
 8003a70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	22ff      	movs	r2, #255	@ 0xff
 8003a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a7a:	f002 fb6d 	bl	8006158 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a7e:	f002 fb35 	bl	80060ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a8a:	e011      	b.n	8003ab0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d012      	beq.n	8003aba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3310      	adds	r3, #16
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f001 f983 	bl	8004da4 <xTaskRemoveFromEventList>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003aa4:	f001 fa8c 	bl	8004fc0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003aa8:	7bbb      	ldrb	r3, [r7, #14]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dce9      	bgt.n	8003a8c <prvUnlockQueue+0x60>
 8003ab8:	e000      	b.n	8003abc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003aba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	22ff      	movs	r2, #255	@ 0xff
 8003ac0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ac4:	f002 fb48 	bl	8006158 <vPortExitCritical>
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ad8:	f002 fb08 	bl	80060ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d102      	bne.n	8003aea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	e001      	b.n	8003aee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003aee:	f002 fb33 	bl	8006158 <vPortExitCritical>

	return xReturn;
 8003af2:	68fb      	ldr	r3, [r7, #12]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b04:	f002 faf2 	bl	80060ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d102      	bne.n	8003b1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e001      	b.n	8003b1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b1e:	f002 fb1b 	bl	8006158 <vPortExitCritical>

	return xReturn;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	e014      	b.n	8003b66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b3c:	4a0f      	ldr	r2, [pc, #60]	@ (8003b7c <vQueueAddToRegistry+0x50>)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b48:	490c      	ldr	r1, [pc, #48]	@ (8003b7c <vQueueAddToRegistry+0x50>)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b52:	4a0a      	ldr	r2, [pc, #40]	@ (8003b7c <vQueueAddToRegistry+0x50>)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b5e:	e006      	b.n	8003b6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	3301      	adds	r3, #1
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b07      	cmp	r3, #7
 8003b6a:	d9e7      	bls.n	8003b3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000848 	.word	0x20000848

08003b80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b90:	f002 faac 	bl	80060ec <vPortEnterCritical>
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba0:	d103      	bne.n	8003baa <vQueueWaitForMessageRestricted+0x2a>
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb0:	b25b      	sxtb	r3, r3
 8003bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb6:	d103      	bne.n	8003bc0 <vQueueWaitForMessageRestricted+0x40>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bc0:	f002 faca 	bl	8006158 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d106      	bne.n	8003bda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3324      	adds	r3, #36	@ 0x24
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f8b7 	bl	8004d48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff ff26 	bl	8003a2c <prvUnlockQueue>
	}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	@ 0x30
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d113      	bne.n	8003c22 <xStreamBufferGenericCreate+0x3a>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	d821      	bhi.n	8003c4a <xStreamBufferGenericCreate+0x62>
	__asm volatile
 8003c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0a:	b672      	cpsid	i
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	b662      	cpsie	i
 8003c1a:	61fb      	str	r3, [r7, #28]
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <xStreamBufferGenericCreate+0x62>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c32:	b672      	cpsid	i
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	b662      	cpsie	i
 8003c42:	61bb      	str	r3, [r7, #24]
}
 8003c44:	bf00      	nop
 8003c46:	bf00      	nop
 8003c48:	e7fd      	b.n	8003c46 <xStreamBufferGenericCreate+0x5e>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d90d      	bls.n	8003c6e <xStreamBufferGenericCreate+0x86>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	b672      	cpsid	i
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	b662      	cpsie	i
 8003c66:	617b      	str	r3, [r7, #20]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xStreamBufferGenericCreate+0x82>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <xStreamBufferGenericCreate+0x90>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	3301      	adds	r3, #1
 8003c7c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3324      	adds	r3, #36	@ 0x24
 8003c82:	4618      	mov	r0, r3
 8003c84:	f002 fb60 	bl	8006348 <pvPortMalloc>
 8003c88:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <xStreamBufferGenericCreate+0xbe>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8003c96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c9a:	9300      	str	r3, [sp, #0]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	6a38      	ldr	r0, [r7, #32]
 8003ca2:	f000 fba0 	bl	80043e6 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
	}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	@ 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10d      	bne.n	8003cde <xStreamBufferSpacesAvailable+0x2e>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc6:	b672      	cpsid	i
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	b662      	cpsie	i
 8003cd6:	60fb      	str	r3, [r7, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	e7fd      	b.n	8003cda <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	697a      	ldr	r2, [r7, #20]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d304      	bcc.n	8003d0e <xStreamBufferSpacesAvailable+0x5e>
	{
		xSpace -= pxStreamBuffer->xLength;
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8003d0e:	697b      	ldr	r3, [r7, #20]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b090      	sub	sp, #64	@ 0x40
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10d      	bne.n	8003d58 <xStreamBufferSend+0x3c>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	b672      	cpsid	i
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	b662      	cpsie	i
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	e7fd      	b.n	8003d54 <xStreamBufferSend+0x38>
	configASSERT( pxStreamBuffer );
 8003d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10d      	bne.n	8003d7a <xStreamBufferSend+0x5e>
	__asm volatile
 8003d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d62:	b672      	cpsid	i
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	b662      	cpsie	i
 8003d72:	623b      	str	r3, [r7, #32]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <xStreamBufferSend+0x5a>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d7c:	7f1b      	ldrb	r3, [r3, #28]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d014      	beq.n	8003db0 <xStreamBufferSend+0x94>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	3304      	adds	r3, #4
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d80d      	bhi.n	8003db0 <xStreamBufferSend+0x94>
	__asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	b672      	cpsid	i
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	b662      	cpsie	i
 8003da8:	61fb      	str	r3, [r7, #28]
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <xStreamBufferSend+0x90>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d041      	beq.n	8003e3a <xStreamBufferSend+0x11e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 f858 	bl	8004e70 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8003dc0:	f002 f994 	bl	80060ec <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003dc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003dc6:	f7ff ff73 	bl	8003cb0 <xStreamBufferSpacesAvailable>
 8003dca:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8003dcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d21a      	bcs.n	8003e0a <xStreamBufferSend+0xee>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8003dd4:	2000      	movs	r0, #0
 8003dd6:	f001 fc95 	bl	8005704 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8003dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00d      	beq.n	8003dfe <xStreamBufferSend+0xe2>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	b672      	cpsid	i
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	b662      	cpsie	i
 8003df6:	61bb      	str	r3, [r7, #24]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <xStreamBufferSend+0xde>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8003dfe:	f001 f9c9 	bl	8005194 <xTaskGetCurrentTaskHandle>
 8003e02:	4602      	mov	r2, r0
 8003e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e06:	615a      	str	r2, [r3, #20]
 8003e08:	e002      	b.n	8003e10 <xStreamBufferSend+0xf4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8003e0a:	f002 f9a5 	bl	8006158 <vPortExitCritical>
					break;
 8003e0e:	e014      	b.n	8003e3a <xStreamBufferSend+0x11e>
				}
			}
			taskEXIT_CRITICAL();
 8003e10:	f002 f9a2 	bl	8006158 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2200      	movs	r2, #0
 8003e18:	2100      	movs	r1, #0
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f001 fa5c 	bl	80052d8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	2200      	movs	r2, #0
 8003e24:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8003e26:	463a      	mov	r2, r7
 8003e28:	f107 0310 	add.w	r3, r7, #16
 8003e2c:	4611      	mov	r1, r2
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f001 f85e 	bl	8004ef0 <xTaskCheckForTimeOut>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c2      	beq.n	8003dc0 <xStreamBufferSend+0xa4>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8003e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <xStreamBufferSend+0x12c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003e40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e42:	f7ff ff35 	bl	8003cb0 <xStreamBufferSpacesAvailable>
 8003e46:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8003e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e54:	f000 f89c 	bl	8003f90 <prvWriteMessageToBuffer>
 8003e58:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8003e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d019      	beq.n	8003e94 <xStreamBufferSend+0x178>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003e60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e62:	f000 faa0 	bl	80043a6 <prvBytesInBuffer>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d311      	bcc.n	8003e94 <xStreamBufferSend+0x178>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8003e70:	f000 fd60 	bl	8004934 <vTaskSuspendAll>
 8003e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d009      	beq.n	8003e90 <xStreamBufferSend+0x174>
 8003e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7e:	6918      	ldr	r0, [r3, #16]
 8003e80:	2300      	movs	r3, #0
 8003e82:	2200      	movs	r2, #0
 8003e84:	2100      	movs	r1, #0
 8003e86:	f001 fa87 	bl	8005398 <xTaskGenericNotify>
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	611a      	str	r2, [r3, #16]
 8003e90:	f000 fd5e 	bl	8004950 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8003e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3738      	adds	r7, #56	@ 0x38
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b090      	sub	sp, #64	@ 0x40
 8003ea2:	af02      	add	r7, sp, #8
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
 8003eaa:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10d      	bne.n	8003ed6 <xStreamBufferSendFromISR+0x38>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	b672      	cpsid	i
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	b662      	cpsie	i
 8003ece:	623b      	str	r3, [r7, #32]
}
 8003ed0:	bf00      	nop
 8003ed2:	bf00      	nop
 8003ed4:	e7fd      	b.n	8003ed2 <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10d      	bne.n	8003ef8 <xStreamBufferSendFromISR+0x5a>
	__asm volatile
 8003edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee0:	b672      	cpsid	i
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	b662      	cpsie	i
 8003ef0:	61fb      	str	r3, [r7, #28]
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	e7fd      	b.n	8003ef4 <xStreamBufferSendFromISR+0x56>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efa:	7f1b      	ldrb	r3, [r3, #28]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <xStreamBufferSendFromISR+0x6c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f06:	3304      	adds	r3, #4
 8003f08:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003f0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f0c:	f7ff fed0 	bl	8003cb0 <xStreamBufferSpacesAvailable>
 8003f10:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8003f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f1e:	f000 f837 	bl	8003f90 <prvWriteMessageToBuffer>
 8003f22:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02d      	beq.n	8003f86 <xStreamBufferSendFromISR+0xe8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003f2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f2c:	f000 fa3b 	bl	80043a6 <prvBytesInBuffer>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d325      	bcc.n	8003f86 <xStreamBufferSendFromISR+0xe8>
	__asm volatile
 8003f3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f42:	b672      	cpsid	i
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	b662      	cpsie	i
 8003f52:	61ba      	str	r2, [r7, #24]
 8003f54:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f56:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8003f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <xStreamBufferSendFromISR+0xdc>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	6918      	ldr	r0, [r3, #16]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2100      	movs	r1, #0
 8003f70:	f001 fada 	bl	8005528 <xTaskGenericNotifyFromISR>
 8003f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f76:	2200      	movs	r2, #0
 8003f78:	611a      	str	r2, [r3, #16]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f383 8811 	msr	BASEPRI, r3
}
 8003f84:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8003f86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3738      	adds	r7, #56	@ 0x38
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d102      	bne.n	8003faa <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	e01d      	b.n	8003fe6 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	7f1b      	ldrb	r3, [r3, #28]
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bf28      	it	cs
 8003fc2:	4613      	movcs	r3, r2
 8003fc4:	607b      	str	r3, [r7, #4]
 8003fc6:	e00e      	b.n	8003fe6 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d308      	bcc.n	8003fe2 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8003fd4:	1d3b      	adds	r3, r7, #4
 8003fd6:	2204      	movs	r2, #4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 f8e5 	bl	80041aa <prvWriteBytesToBuffer>
 8003fe0:	e001      	b.n	8003fe6 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d007      	beq.n	8003ffc <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	68b9      	ldr	r1, [r7, #8]
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f8d9 	bl	80041aa <prvWriteBytesToBuffer>
 8003ff8:	6138      	str	r0, [r7, #16]
 8003ffa:	e001      	b.n	8004000 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8004000:	693b      	ldr	r3, [r7, #16]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08e      	sub	sp, #56	@ 0x38
 800400e:	af02      	add	r7, sp, #8
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800401c:	2300      	movs	r3, #0
 800401e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10d      	bne.n	8004042 <xStreamBufferReceive+0x38>
	__asm volatile
 8004026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402a:	b672      	cpsid	i
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	b662      	cpsie	i
 800403a:	61fb      	str	r3, [r7, #28]
}
 800403c:	bf00      	nop
 800403e:	bf00      	nop
 8004040:	e7fd      	b.n	800403e <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 8004042:	6a3b      	ldr	r3, [r7, #32]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10d      	bne.n	8004064 <xStreamBufferReceive+0x5a>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	b672      	cpsid	i
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	b662      	cpsie	i
 800405c:	61bb      	str	r3, [r7, #24]
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	e7fd      	b.n	8004060 <xStreamBufferReceive+0x56>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	7f1b      	ldrb	r3, [r3, #28]
 8004068:	f003 0301 	and.w	r3, r3, #1
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <xStreamBufferReceive+0x6c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004070:	2304      	movs	r3, #4
 8004072:	627b      	str	r3, [r7, #36]	@ 0x24
 8004074:	e001      	b.n	800407a <xStreamBufferReceive+0x70>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d037      	beq.n	80040f0 <xStreamBufferReceive+0xe6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004080:	f002 f834 	bl	80060ec <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004084:	6a38      	ldr	r0, [r7, #32]
 8004086:	f000 f98e 	bl	80043a6 <prvBytesInBuffer>
 800408a:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800408c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800408e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004090:	429a      	cmp	r2, r3
 8004092:	d819      	bhi.n	80040c8 <xStreamBufferReceive+0xbe>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004094:	2000      	movs	r0, #0
 8004096:	f001 fb35 	bl	8005704 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800409a:	6a3b      	ldr	r3, [r7, #32]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00d      	beq.n	80040be <xStreamBufferReceive+0xb4>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a6:	b672      	cpsid	i
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	b662      	cpsie	i
 80040b6:	617b      	str	r3, [r7, #20]
}
 80040b8:	bf00      	nop
 80040ba:	bf00      	nop
 80040bc:	e7fd      	b.n	80040ba <xStreamBufferReceive+0xb0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80040be:	f001 f869 	bl	8005194 <xTaskGetCurrentTaskHandle>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a3b      	ldr	r3, [r7, #32]
 80040c6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80040c8:	f002 f846 	bl	8006158 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80040cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d811      	bhi.n	80040f8 <xStreamBufferReceive+0xee>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	2000      	movs	r0, #0
 80040dc:	f001 f8fc 	bl	80052d8 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2200      	movs	r2, #0
 80040e4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80040e6:	6a38      	ldr	r0, [r7, #32]
 80040e8:	f000 f95d 	bl	80043a6 <prvBytesInBuffer>
 80040ec:	62b8      	str	r0, [r7, #40]	@ 0x28
 80040ee:	e003      	b.n	80040f8 <xStreamBufferReceive+0xee>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80040f0:	6a38      	ldr	r0, [r7, #32]
 80040f2:	f000 f958 	bl	80043a6 <prvBytesInBuffer>
 80040f6:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80040f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d91d      	bls.n	800413c <xStreamBufferReceive+0x132>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	6a38      	ldr	r0, [r7, #32]
 800410c:	f000 f81b 	bl	8004146 <prvReadMessageFromBuffer>
 8004110:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8004112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d011      	beq.n	800413c <xStreamBufferReceive+0x132>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8004118:	f000 fc0c 	bl	8004934 <vTaskSuspendAll>
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <xStreamBufferReceive+0x12e>
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	6958      	ldr	r0, [r3, #20]
 8004128:	2300      	movs	r3, #0
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	f001 f933 	bl	8005398 <xTaskGenericNotify>
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	2200      	movs	r2, #0
 8004136:	615a      	str	r2, [r3, #20]
 8004138:	f000 fc0a 	bl	8004950 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800413c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800413e:	4618      	mov	r0, r3
 8004140:	3730      	adds	r7, #48	@ 0x30
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b088      	sub	sp, #32
 800414a:	af00      	add	r7, sp, #0
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	607a      	str	r2, [r7, #4]
 8004152:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	2b00      	cmp	r3, #0
 8004158:	d019      	beq.n	800418e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004160:	f107 0110 	add.w	r1, r7, #16
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004168:	68f8      	ldr	r0, [r7, #12]
 800416a:	f000 f899 	bl	80042a0 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8004172:	683a      	ldr	r2, [r7, #0]
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	429a      	cmp	r2, r3
 8004180:	d907      	bls.n	8004192 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	61fb      	str	r3, [r7, #28]
 800418c:	e001      	b.n	8004192 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	68b9      	ldr	r1, [r7, #8]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f881 	bl	80042a0 <prvReadBytesFromBuffer>
 800419e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80041a0:	697b      	ldr	r3, [r7, #20]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3720      	adds	r7, #32
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08a      	sub	sp, #40	@ 0x28
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <prvWriteBytesToBuffer+0x2e>
	__asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	b672      	cpsid	i
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	b662      	cpsie	i
 80041d0:	61fb      	str	r3, [r7, #28]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	bf28      	it	cs
 80041ec:	4613      	movcs	r3, r2
 80041ee:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80041f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	441a      	add	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d90d      	bls.n	800421a <prvWriteBytesToBuffer+0x70>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004202:	b672      	cpsid	i
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	b662      	cpsie	i
 8004212:	61bb      	str	r3, [r7, #24]
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	e7fd      	b.n	8004216 <prvWriteBytesToBuffer+0x6c>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004220:	4413      	add	r3, r2
 8004222:	6a3a      	ldr	r2, [r7, #32]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f002 fb04 	bl	8006834 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	429a      	cmp	r2, r3
 8004232:	d91f      	bls.n	8004274 <prvWriteBytesToBuffer+0xca>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	1ad2      	subs	r2, r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	429a      	cmp	r2, r3
 8004240:	d90d      	bls.n	800425e <prvWriteBytesToBuffer+0xb4>
	__asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	b672      	cpsid	i
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	b662      	cpsie	i
 8004256:	617b      	str	r3, [r7, #20]
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	e7fd      	b.n	800425a <prvWriteBytesToBuffer+0xb0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6998      	ldr	r0, [r3, #24]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	18d1      	adds	r1, r2, r3
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	461a      	mov	r2, r3
 8004270:	f002 fae0 	bl	8006834 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8004274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4413      	add	r3, r2
 800427a:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004282:	429a      	cmp	r2, r3
 8004284:	d304      	bcc.n	8004290 <prvWriteBytesToBuffer+0xe6>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004294:	605a      	str	r2, [r3, #4]

	return xCount;
 8004296:	687b      	ldr	r3, [r7, #4]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3728      	adds	r7, #40	@ 0x28
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	@ 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
 80042ac:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	4293      	cmp	r3, r2
 80042b4:	bf28      	it	cs
 80042b6:	4613      	movcs	r3, r2
 80042b8:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d06d      	beq.n	800439c <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689a      	ldr	r2, [r3, #8]
 80042ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	6a3a      	ldr	r2, [r7, #32]
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bf28      	it	cs
 80042d4:	4613      	movcs	r3, r2
 80042d6:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80042d8:	69fa      	ldr	r2, [r7, #28]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d90d      	bls.n	80042fc <prvReadBytesFromBuffer+0x5c>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	b672      	cpsid	i
 80042e6:	f383 8811 	msr	BASEPRI, r3
 80042ea:	f3bf 8f6f 	isb	sy
 80042ee:	f3bf 8f4f 	dsb	sy
 80042f2:	b662      	cpsie	i
 80042f4:	61bb      	str	r3, [r7, #24]
}
 80042f6:	bf00      	nop
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80042fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	441a      	add	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	429a      	cmp	r2, r3
 8004308:	d90d      	bls.n	8004326 <prvReadBytesFromBuffer+0x86>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430e:	b672      	cpsid	i
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	b662      	cpsie	i
 800431e:	617b      	str	r3, [r7, #20]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <prvReadBytesFromBuffer+0x82>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	699a      	ldr	r2, [r3, #24]
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	4413      	add	r3, r2
 800432e:	69fa      	ldr	r2, [r7, #28]
 8004330:	4619      	mov	r1, r3
 8004332:	68b8      	ldr	r0, [r7, #8]
 8004334:	f002 fa7e 	bl	8006834 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8004338:	6a3a      	ldr	r2, [r7, #32]
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d91c      	bls.n	800437a <prvReadBytesFromBuffer+0xda>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8004340:	6a3a      	ldr	r2, [r7, #32]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d90d      	bls.n	8004364 <prvReadBytesFromBuffer+0xc4>
	__asm volatile
 8004348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434c:	b672      	cpsid	i
 800434e:	f383 8811 	msr	BASEPRI, r3
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	f3bf 8f4f 	dsb	sy
 800435a:	b662      	cpsie	i
 800435c:	613b      	str	r3, [r7, #16]
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <prvReadBytesFromBuffer+0xc0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	18d0      	adds	r0, r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6999      	ldr	r1, [r3, #24]
 800436e:	6a3a      	ldr	r2, [r7, #32]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	461a      	mov	r2, r3
 8004376:	f002 fa5d 	bl	8006834 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	4413      	add	r3, r2
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004388:	429a      	cmp	r2, r3
 800438a:	d304      	bcc.n	8004396 <prvReadBytesFromBuffer+0xf6>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800439c:	6a3b      	ldr	r3, [r7, #32]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3728      	adds	r7, #40	@ 0x28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d304      	bcc.n	80043d8 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80043d8:	68fb      	ldr	r3, [r7, #12]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80043f4:	2355      	movs	r3, #85	@ 0x55
 80043f6:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6979      	ldr	r1, [r7, #20]
 80043fc:	68b8      	ldr	r0, [r7, #8]
 80043fe:	f002 f98d 	bl	800671c <memset>
 8004402:	4602      	mov	r2, r0
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4293      	cmp	r3, r2
 8004408:	d00d      	beq.n	8004426 <prvInitialiseNewStreamBuffer+0x40>
	__asm volatile
 800440a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800440e:	b672      	cpsid	i
 8004410:	f383 8811 	msr	BASEPRI, r3
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	b662      	cpsie	i
 800441e:	613b      	str	r3, [r7, #16]
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	e7fd      	b.n	8004422 <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004426:	2224      	movs	r2, #36	@ 0x24
 8004428:	2100      	movs	r1, #0
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f002 f976 	bl	800671c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004448:	771a      	strb	r2, [r3, #28]
}
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004452:	b580      	push	{r7, lr}
 8004454:	b08e      	sub	sp, #56	@ 0x38
 8004456:	af04      	add	r7, sp, #16
 8004458:	60f8      	str	r0, [r7, #12]
 800445a:	60b9      	str	r1, [r7, #8]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10d      	bne.n	8004482 <xTaskCreateStatic+0x30>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	b672      	cpsid	i
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	b662      	cpsie	i
 800447a:	623b      	str	r3, [r7, #32]
}
 800447c:	bf00      	nop
 800447e:	bf00      	nop
 8004480:	e7fd      	b.n	800447e <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <xTaskCreateStatic+0x52>
	__asm volatile
 8004488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448c:	b672      	cpsid	i
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	b662      	cpsie	i
 800449c:	61fb      	str	r3, [r7, #28]
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80044a4:	23a8      	movs	r3, #168	@ 0xa8
 80044a6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	2ba8      	cmp	r3, #168	@ 0xa8
 80044ac:	d00d      	beq.n	80044ca <xTaskCreateStatic+0x78>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b2:	b672      	cpsid	i
 80044b4:	f383 8811 	msr	BASEPRI, r3
 80044b8:	f3bf 8f6f 	isb	sy
 80044bc:	f3bf 8f4f 	dsb	sy
 80044c0:	b662      	cpsie	i
 80044c2:	61bb      	str	r3, [r7, #24]
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	e7fd      	b.n	80044c6 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80044ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01e      	beq.n	8004510 <xTaskCreateStatic+0xbe>
 80044d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01b      	beq.n	8004510 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044da:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044e0:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e4:	2202      	movs	r2, #2
 80044e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044ea:	2300      	movs	r3, #0
 80044ec:	9303      	str	r3, [sp, #12]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f0:	9302      	str	r3, [sp, #8]
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	9301      	str	r3, [sp, #4]
 80044f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 f850 	bl	80045a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004508:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800450a:	f000 f8f7 	bl	80046fc <prvAddNewTaskToReadyList>
 800450e:	e001      	b.n	8004514 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004514:	697b      	ldr	r3, [r7, #20]
	}
 8004516:	4618      	mov	r0, r3
 8004518:	3728      	adds	r7, #40	@ 0x28
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08c      	sub	sp, #48	@ 0x30
 8004522:	af04      	add	r7, sp, #16
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	4613      	mov	r3, r2
 800452c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800452e:	88fb      	ldrh	r3, [r7, #6]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4618      	mov	r0, r3
 8004534:	f001 ff08 	bl	8006348 <pvPortMalloc>
 8004538:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00e      	beq.n	800455e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004540:	20a8      	movs	r0, #168	@ 0xa8
 8004542:	f001 ff01 	bl	8006348 <pvPortMalloc>
 8004546:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
 8004554:	e005      	b.n	8004562 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f001 ffc4 	bl	80064e4 <vPortFree>
 800455c:	e001      	b.n	8004562 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d017      	beq.n	8004598 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004570:	88fa      	ldrh	r2, [r7, #6]
 8004572:	2300      	movs	r3, #0
 8004574:	9303      	str	r3, [sp, #12]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	9302      	str	r3, [sp, #8]
 800457a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 f80e 	bl	80045a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800458c:	69f8      	ldr	r0, [r7, #28]
 800458e:	f000 f8b5 	bl	80046fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004592:	2301      	movs	r3, #1
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e002      	b.n	800459e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004598:	f04f 33ff 	mov.w	r3, #4294967295
 800459c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800459e:	69bb      	ldr	r3, [r7, #24]
	}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	461a      	mov	r2, r3
 80045c0:	21a5      	movs	r1, #165	@ 0xa5
 80045c2:	f002 f8ab 	bl	800671c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80045d0:	440b      	add	r3, r1
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	f023 0307 	bic.w	r3, r3, #7
 80045de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00d      	beq.n	8004606 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ee:	b672      	cpsid	i
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	b662      	cpsie	i
 80045fe:	617b      	str	r3, [r7, #20]
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	e7fd      	b.n	8004602 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01f      	beq.n	800464c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e012      	b.n	8004638 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	4413      	add	r3, r2
 8004618:	7819      	ldrb	r1, [r3, #0]
 800461a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	3334      	adds	r3, #52	@ 0x34
 8004622:	460a      	mov	r2, r1
 8004624:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d006      	beq.n	8004640 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	2b0f      	cmp	r3, #15
 800463c:	d9e9      	bls.n	8004612 <prvInitialiseNewTask+0x6a>
 800463e:	e000      	b.n	8004642 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004640:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800464a:	e003      	b.n	8004654 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	2b37      	cmp	r3, #55	@ 0x37
 8004658:	d901      	bls.n	800465e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800465a:	2337      	movs	r3, #55	@ 0x37
 800465c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004662:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004668:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	2200      	movs	r2, #0
 800466e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe fd09 	bl	800308c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	3318      	adds	r3, #24
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fd04 	bl	800308c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004688:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004692:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004698:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	2200      	movs	r2, #0
 800469e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	3354      	adds	r3, #84	@ 0x54
 80046ae:	224c      	movs	r2, #76	@ 0x4c
 80046b0:	2100      	movs	r1, #0
 80046b2:	4618      	mov	r0, r3
 80046b4:	f002 f832 	bl	800671c <memset>
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	4a0d      	ldr	r2, [pc, #52]	@ (80046f0 <prvInitialiseNewTask+0x148>)
 80046bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <prvInitialiseNewTask+0x14c>)
 80046c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80046c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c6:	4a0c      	ldr	r2, [pc, #48]	@ (80046f8 <prvInitialiseNewTask+0x150>)
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046ca:	683a      	ldr	r2, [r7, #0]
 80046cc:	68f9      	ldr	r1, [r7, #12]
 80046ce:	69b8      	ldr	r0, [r7, #24]
 80046d0:	f001 fbfa 	bl	8005ec8 <pxPortInitialiseStack>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80046da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046e6:	bf00      	nop
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20004ad4 	.word	0x20004ad4
 80046f4:	20004b3c 	.word	0x20004b3c
 80046f8:	20004ba4 	.word	0x20004ba4

080046fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004704:	f001 fcf2 	bl	80060ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004708:	4b2d      	ldr	r3, [pc, #180]	@ (80047c0 <prvAddNewTaskToReadyList+0xc4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <prvAddNewTaskToReadyList+0xc4>)
 8004710:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004712:	4b2c      	ldr	r3, [pc, #176]	@ (80047c4 <prvAddNewTaskToReadyList+0xc8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d109      	bne.n	800472e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800471a:	4a2a      	ldr	r2, [pc, #168]	@ (80047c4 <prvAddNewTaskToReadyList+0xc8>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004720:	4b27      	ldr	r3, [pc, #156]	@ (80047c0 <prvAddNewTaskToReadyList+0xc4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d110      	bne.n	800474a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004728:	f000 fc6e 	bl	8005008 <prvInitialiseTaskLists>
 800472c:	e00d      	b.n	800474a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800472e:	4b26      	ldr	r3, [pc, #152]	@ (80047c8 <prvAddNewTaskToReadyList+0xcc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004736:	4b23      	ldr	r3, [pc, #140]	@ (80047c4 <prvAddNewTaskToReadyList+0xc8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d802      	bhi.n	800474a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004744:	4a1f      	ldr	r2, [pc, #124]	@ (80047c4 <prvAddNewTaskToReadyList+0xc8>)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800474a:	4b20      	ldr	r3, [pc, #128]	@ (80047cc <prvAddNewTaskToReadyList+0xd0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	3301      	adds	r3, #1
 8004750:	4a1e      	ldr	r2, [pc, #120]	@ (80047cc <prvAddNewTaskToReadyList+0xd0>)
 8004752:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004754:	4b1d      	ldr	r3, [pc, #116]	@ (80047cc <prvAddNewTaskToReadyList+0xd0>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004760:	4b1b      	ldr	r3, [pc, #108]	@ (80047d0 <prvAddNewTaskToReadyList+0xd4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	429a      	cmp	r2, r3
 8004766:	d903      	bls.n	8004770 <prvAddNewTaskToReadyList+0x74>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	4a18      	ldr	r2, [pc, #96]	@ (80047d0 <prvAddNewTaskToReadyList+0xd4>)
 800476e:	6013      	str	r3, [r2, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4a15      	ldr	r2, [pc, #84]	@ (80047d4 <prvAddNewTaskToReadyList+0xd8>)
 800477e:	441a      	add	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	3304      	adds	r3, #4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fe fc8d 	bl	80030a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800478c:	f001 fce4 	bl	8006158 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004790:	4b0d      	ldr	r3, [pc, #52]	@ (80047c8 <prvAddNewTaskToReadyList+0xcc>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004798:	4b0a      	ldr	r3, [pc, #40]	@ (80047c4 <prvAddNewTaskToReadyList+0xc8>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d207      	bcs.n	80047b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047a6:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <prvAddNewTaskToReadyList+0xdc>)
 80047a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b6:	bf00      	nop
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20000d5c 	.word	0x20000d5c
 80047c4:	20000888 	.word	0x20000888
 80047c8:	20000d68 	.word	0x20000d68
 80047cc:	20000d78 	.word	0x20000d78
 80047d0:	20000d64 	.word	0x20000d64
 80047d4:	2000088c 	.word	0x2000088c
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d01a      	beq.n	8004824 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047ee:	4b15      	ldr	r3, [pc, #84]	@ (8004844 <vTaskDelay+0x68>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <vTaskDelay+0x36>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047fa:	b672      	cpsid	i
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	b662      	cpsie	i
 800480a:	60bb      	str	r3, [r7, #8]
}
 800480c:	bf00      	nop
 800480e:	bf00      	nop
 8004810:	e7fd      	b.n	800480e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8004812:	f000 f88f 	bl	8004934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004816:	2100      	movs	r1, #0
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 ff99 	bl	8005750 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800481e:	f000 f897 	bl	8004950 <xTaskResumeAll>
 8004822:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d107      	bne.n	800483a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800482a:	4b07      	ldr	r3, [pc, #28]	@ (8004848 <vTaskDelay+0x6c>)
 800482c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800483a:	bf00      	nop
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000d84 	.word	0x20000d84
 8004848:	e000ed04 	.word	0xe000ed04

0800484c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	@ 0x28
 8004850:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800485a:	463a      	mov	r2, r7
 800485c:	1d39      	adds	r1, r7, #4
 800485e:	f107 0308 	add.w	r3, r7, #8
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fbbe 	bl	8002fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004868:	6839      	ldr	r1, [r7, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	9202      	str	r2, [sp, #8]
 8004870:	9301      	str	r3, [sp, #4]
 8004872:	2300      	movs	r3, #0
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	2300      	movs	r3, #0
 8004878:	460a      	mov	r2, r1
 800487a:	4926      	ldr	r1, [pc, #152]	@ (8004914 <vTaskStartScheduler+0xc8>)
 800487c:	4826      	ldr	r0, [pc, #152]	@ (8004918 <vTaskStartScheduler+0xcc>)
 800487e:	f7ff fde8 	bl	8004452 <xTaskCreateStatic>
 8004882:	4603      	mov	r3, r0
 8004884:	4a25      	ldr	r2, [pc, #148]	@ (800491c <vTaskStartScheduler+0xd0>)
 8004886:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004888:	4b24      	ldr	r3, [pc, #144]	@ (800491c <vTaskStartScheduler+0xd0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004890:	2301      	movs	r3, #1
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	e001      	b.n	800489a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004896:	2300      	movs	r3, #0
 8004898:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b01      	cmp	r3, #1
 800489e:	d102      	bne.n	80048a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80048a0:	f000 ffaa 	bl	80057f8 <xTimerCreateTimerTask>
 80048a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d11d      	bne.n	80048e8 <vTaskStartScheduler+0x9c>
	__asm volatile
 80048ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b0:	b672      	cpsid	i
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	b662      	cpsie	i
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048c4:	4b16      	ldr	r3, [pc, #88]	@ (8004920 <vTaskStartScheduler+0xd4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3354      	adds	r3, #84	@ 0x54
 80048ca:	4a16      	ldr	r2, [pc, #88]	@ (8004924 <vTaskStartScheduler+0xd8>)
 80048cc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048ce:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <vTaskStartScheduler+0xdc>)
 80048d0:	f04f 32ff 	mov.w	r2, #4294967295
 80048d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80048d6:	4b15      	ldr	r3, [pc, #84]	@ (800492c <vTaskStartScheduler+0xe0>)
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048dc:	4b14      	ldr	r3, [pc, #80]	@ (8004930 <vTaskStartScheduler+0xe4>)
 80048de:	2200      	movs	r2, #0
 80048e0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048e2:	f001 fb85 	bl	8005ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048e6:	e011      	b.n	800490c <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ee:	d10d      	bne.n	800490c <vTaskStartScheduler+0xc0>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f4:	b672      	cpsid	i
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	b662      	cpsie	i
 8004904:	60fb      	str	r3, [r7, #12]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <vTaskStartScheduler+0xbc>
}
 800490c:	bf00      	nop
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}
 8004914:	08006940 	.word	0x08006940
 8004918:	08004fd9 	.word	0x08004fd9
 800491c:	20000d80 	.word	0x20000d80
 8004920:	20000888 	.word	0x20000888
 8004924:	20000010 	.word	0x20000010
 8004928:	20000d7c 	.word	0x20000d7c
 800492c:	20000d68 	.word	0x20000d68
 8004930:	20000d60 	.word	0x20000d60

08004934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004938:	4b04      	ldr	r3, [pc, #16]	@ (800494c <vTaskSuspendAll+0x18>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a03      	ldr	r2, [pc, #12]	@ (800494c <vTaskSuspendAll+0x18>)
 8004940:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004942:	bf00      	nop
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	20000d84 	.word	0x20000d84

08004950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800495a:	2300      	movs	r3, #0
 800495c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800495e:	4b43      	ldr	r3, [pc, #268]	@ (8004a6c <xTaskResumeAll+0x11c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10d      	bne.n	8004982 <xTaskResumeAll+0x32>
	__asm volatile
 8004966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496a:	b672      	cpsid	i
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	b662      	cpsie	i
 800497a:	603b      	str	r3, [r7, #0]
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	e7fd      	b.n	800497e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004982:	f001 fbb3 	bl	80060ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004986:	4b39      	ldr	r3, [pc, #228]	@ (8004a6c <xTaskResumeAll+0x11c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3b01      	subs	r3, #1
 800498c:	4a37      	ldr	r2, [pc, #220]	@ (8004a6c <xTaskResumeAll+0x11c>)
 800498e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004990:	4b36      	ldr	r3, [pc, #216]	@ (8004a6c <xTaskResumeAll+0x11c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d162      	bne.n	8004a5e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004998:	4b35      	ldr	r3, [pc, #212]	@ (8004a70 <xTaskResumeAll+0x120>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d05e      	beq.n	8004a5e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049a0:	e02f      	b.n	8004a02 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a2:	4b34      	ldr	r3, [pc, #208]	@ (8004a74 <xTaskResumeAll+0x124>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3318      	adds	r3, #24
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fbd6 	bl	8003160 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe fbd1 	bl	8003160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004a78 <xTaskResumeAll+0x128>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d903      	bls.n	80049d2 <xTaskResumeAll+0x82>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004a78 <xTaskResumeAll+0x128>)
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4a27      	ldr	r2, [pc, #156]	@ (8004a7c <xTaskResumeAll+0x12c>)
 80049e0:	441a      	add	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fe fb5c 	bl	80030a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f2:	4b23      	ldr	r3, [pc, #140]	@ (8004a80 <xTaskResumeAll+0x130>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d302      	bcc.n	8004a02 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80049fc:	4b21      	ldr	r3, [pc, #132]	@ (8004a84 <xTaskResumeAll+0x134>)
 80049fe:	2201      	movs	r2, #1
 8004a00:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a02:	4b1c      	ldr	r3, [pc, #112]	@ (8004a74 <xTaskResumeAll+0x124>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1cb      	bne.n	80049a2 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a10:	f000 fba0 	bl	8005154 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004a14:	4b1c      	ldr	r3, [pc, #112]	@ (8004a88 <xTaskResumeAll+0x138>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d010      	beq.n	8004a42 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a20:	f000 f846 	bl	8004ab0 <xTaskIncrementTick>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004a2a:	4b16      	ldr	r3, [pc, #88]	@ (8004a84 <xTaskResumeAll+0x134>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3b01      	subs	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1f1      	bne.n	8004a20 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004a3c:	4b12      	ldr	r3, [pc, #72]	@ (8004a88 <xTaskResumeAll+0x138>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a42:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <xTaskResumeAll+0x134>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d009      	beq.n	8004a5e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8004a8c <xTaskResumeAll+0x13c>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a5e:	f001 fb7b 	bl	8006158 <vPortExitCritical>

	return xAlreadyYielded;
 8004a62:	68bb      	ldr	r3, [r7, #8]
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000d84 	.word	0x20000d84
 8004a70:	20000d5c 	.word	0x20000d5c
 8004a74:	20000d1c 	.word	0x20000d1c
 8004a78:	20000d64 	.word	0x20000d64
 8004a7c:	2000088c 	.word	0x2000088c
 8004a80:	20000888 	.word	0x20000888
 8004a84:	20000d70 	.word	0x20000d70
 8004a88:	20000d6c 	.word	0x20000d6c
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a96:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <xTaskGetTickCount+0x1c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a9c:	687b      	ldr	r3, [r7, #4]
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	20000d60 	.word	0x20000d60

08004ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aba:	4b50      	ldr	r3, [pc, #320]	@ (8004bfc <xTaskIncrementTick+0x14c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 808c 	bne.w	8004bdc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ac4:	4b4e      	ldr	r3, [pc, #312]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004acc:	4a4c      	ldr	r2, [pc, #304]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d123      	bne.n	8004b20 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ad8:	4b4a      	ldr	r3, [pc, #296]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <xTaskIncrementTick+0x4e>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	b672      	cpsid	i
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	b662      	cpsie	i
 8004af6:	603b      	str	r3, [r7, #0]
}
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <xTaskIncrementTick+0x4a>
 8004afe:	4b41      	ldr	r3, [pc, #260]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	4b40      	ldr	r3, [pc, #256]	@ (8004c08 <xTaskIncrementTick+0x158>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a3e      	ldr	r2, [pc, #248]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c08 <xTaskIncrementTick+0x158>)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <xTaskIncrementTick+0x15c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3301      	adds	r3, #1
 8004b18:	4a3c      	ldr	r2, [pc, #240]	@ (8004c0c <xTaskIncrementTick+0x15c>)
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	f000 fb1a 	bl	8005154 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b20:	4b3b      	ldr	r3, [pc, #236]	@ (8004c10 <xTaskIncrementTick+0x160>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d349      	bcc.n	8004bbe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b2a:	4b36      	ldr	r3, [pc, #216]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d104      	bne.n	8004b3e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b34:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <xTaskIncrementTick+0x160>)
 8004b36:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3a:	601a      	str	r2, [r3, #0]
					break;
 8004b3c:	e03f      	b.n	8004bbe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b3e:	4b31      	ldr	r3, [pc, #196]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d203      	bcs.n	8004b5e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b56:	4a2e      	ldr	r2, [pc, #184]	@ (8004c10 <xTaskIncrementTick+0x160>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b5c:	e02f      	b.n	8004bbe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe fafc 	bl	8003160 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d004      	beq.n	8004b7a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	3318      	adds	r3, #24
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe faf3 	bl	8003160 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7e:	4b25      	ldr	r3, [pc, #148]	@ (8004c14 <xTaskIncrementTick+0x164>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d903      	bls.n	8004b8e <xTaskIncrementTick+0xde>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	4a22      	ldr	r2, [pc, #136]	@ (8004c14 <xTaskIncrementTick+0x164>)
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c18 <xTaskIncrementTick+0x168>)
 8004b9c:	441a      	add	r2, r3
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	f7fe fa7e 	bl	80030a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bae:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <xTaskIncrementTick+0x16c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3b8      	bcc.n	8004b2a <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bbc:	e7b5      	b.n	8004b2a <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bbe:	4b17      	ldr	r3, [pc, #92]	@ (8004c1c <xTaskIncrementTick+0x16c>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc4:	4914      	ldr	r1, [pc, #80]	@ (8004c18 <xTaskIncrementTick+0x168>)
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	440b      	add	r3, r1
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d907      	bls.n	8004be6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e004      	b.n	8004be6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <xTaskIncrementTick+0x170>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3301      	adds	r3, #1
 8004be2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c20 <xTaskIncrementTick+0x170>)
 8004be4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004be6:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <xTaskIncrementTick+0x174>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bf2:	697b      	ldr	r3, [r7, #20]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000d84 	.word	0x20000d84
 8004c00:	20000d60 	.word	0x20000d60
 8004c04:	20000d14 	.word	0x20000d14
 8004c08:	20000d18 	.word	0x20000d18
 8004c0c:	20000d74 	.word	0x20000d74
 8004c10:	20000d7c 	.word	0x20000d7c
 8004c14:	20000d64 	.word	0x20000d64
 8004c18:	2000088c 	.word	0x2000088c
 8004c1c:	20000888 	.word	0x20000888
 8004c20:	20000d6c 	.word	0x20000d6c
 8004c24:	20000d70 	.word	0x20000d70

08004c28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ce0 <vTaskSwitchContext+0xb8>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c36:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <vTaskSwitchContext+0xbc>)
 8004c38:	2201      	movs	r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c3c:	e049      	b.n	8004cd2 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8004c3e:	4b29      	ldr	r3, [pc, #164]	@ (8004ce4 <vTaskSwitchContext+0xbc>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c44:	4b28      	ldr	r3, [pc, #160]	@ (8004ce8 <vTaskSwitchContext+0xc0>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	60fb      	str	r3, [r7, #12]
 8004c4a:	e013      	b.n	8004c74 <vTaskSwitchContext+0x4c>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <vTaskSwitchContext+0x46>
	__asm volatile
 8004c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c56:	b672      	cpsid	i
 8004c58:	f383 8811 	msr	BASEPRI, r3
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	f3bf 8f4f 	dsb	sy
 8004c64:	b662      	cpsie	i
 8004c66:	607b      	str	r3, [r7, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	e7fd      	b.n	8004c6a <vTaskSwitchContext+0x42>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3b01      	subs	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	491d      	ldr	r1, [pc, #116]	@ (8004cec <vTaskSwitchContext+0xc4>)
 8004c76:	68fa      	ldr	r2, [r7, #12]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	440b      	add	r3, r1
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0e1      	beq.n	8004c4c <vTaskSwitchContext+0x24>
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a16      	ldr	r2, [pc, #88]	@ (8004cec <vTaskSwitchContext+0xc4>)
 8004c94:	4413      	add	r3, r2
 8004c96:	60bb      	str	r3, [r7, #8]
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d104      	bne.n	8004cb8 <vTaskSwitchContext+0x90>
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf0 <vTaskSwitchContext+0xc8>)
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	4a09      	ldr	r2, [pc, #36]	@ (8004ce8 <vTaskSwitchContext+0xc0>)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <vTaskSwitchContext+0xc8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	3354      	adds	r3, #84	@ 0x54
 8004cce:	4a09      	ldr	r2, [pc, #36]	@ (8004cf4 <vTaskSwitchContext+0xcc>)
 8004cd0:	6013      	str	r3, [r2, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000d84 	.word	0x20000d84
 8004ce4:	20000d70 	.word	0x20000d70
 8004ce8:	20000d64 	.word	0x20000d64
 8004cec:	2000088c 	.word	0x2000088c
 8004cf0:	20000888 	.word	0x20000888
 8004cf4:	20000010 	.word	0x20000010

08004cf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10d      	bne.n	8004d24 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0c:	b672      	cpsid	i
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	b662      	cpsie	i
 8004d1c:	60fb      	str	r3, [r7, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d24:	4b07      	ldr	r3, [pc, #28]	@ (8004d44 <vTaskPlaceOnEventList+0x4c>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3318      	adds	r3, #24
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f7fe f9de 	bl	80030ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d32:	2101      	movs	r1, #1
 8004d34:	6838      	ldr	r0, [r7, #0]
 8004d36:	f000 fd0b 	bl	8005750 <prvAddCurrentTaskToDelayedList>
}
 8004d3a:	bf00      	nop
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	20000888 	.word	0x20000888

08004d48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10d      	bne.n	8004d76 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	b672      	cpsid	i
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	b662      	cpsie	i
 8004d6e:	617b      	str	r3, [r7, #20]
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	e7fd      	b.n	8004d72 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d76:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <vTaskPlaceOnEventListRestricted+0x58>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3318      	adds	r3, #24
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7fe f991 	bl	80030a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	68b8      	ldr	r0, [r7, #8]
 8004d94:	f000 fcdc 	bl	8005750 <prvAddCurrentTaskToDelayedList>
	}
 8004d98:	bf00      	nop
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000888 	.word	0x20000888

08004da4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dbe:	b672      	cpsid	i
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	b662      	cpsie	i
 8004dce:	60fb      	str	r3, [r7, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	e7fd      	b.n	8004dd2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3318      	adds	r3, #24
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe f9c0 	bl	8003160 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004de0:	4b1d      	ldr	r3, [pc, #116]	@ (8004e58 <xTaskRemoveFromEventList+0xb4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11d      	bne.n	8004e24 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3304      	adds	r3, #4
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7fe f9b7 	bl	8003160 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df6:	4b19      	ldr	r3, [pc, #100]	@ (8004e5c <xTaskRemoveFromEventList+0xb8>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d903      	bls.n	8004e06 <xTaskRemoveFromEventList+0x62>
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a16      	ldr	r2, [pc, #88]	@ (8004e5c <xTaskRemoveFromEventList+0xb8>)
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4a13      	ldr	r2, [pc, #76]	@ (8004e60 <xTaskRemoveFromEventList+0xbc>)
 8004e14:	441a      	add	r2, r3
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	f7fe f942 	bl	80030a6 <vListInsertEnd>
 8004e22:	e005      	b.n	8004e30 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3318      	adds	r3, #24
 8004e28:	4619      	mov	r1, r3
 8004e2a:	480e      	ldr	r0, [pc, #56]	@ (8004e64 <xTaskRemoveFromEventList+0xc0>)
 8004e2c:	f7fe f93b 	bl	80030a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e34:	4b0c      	ldr	r3, [pc, #48]	@ (8004e68 <xTaskRemoveFromEventList+0xc4>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d905      	bls.n	8004e4a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e42:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <xTaskRemoveFromEventList+0xc8>)
 8004e44:	2201      	movs	r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e001      	b.n	8004e4e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e4e:	697b      	ldr	r3, [r7, #20]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20000d84 	.word	0x20000d84
 8004e5c:	20000d64 	.word	0x20000d64
 8004e60:	2000088c 	.word	0x2000088c
 8004e64:	20000d1c 	.word	0x20000d1c
 8004e68:	20000888 	.word	0x20000888
 8004e6c:	20000d70 	.word	0x20000d70

08004e70 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10d      	bne.n	8004e9a <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	b672      	cpsid	i
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	b662      	cpsie	i
 8004e92:	60fb      	str	r3, [r7, #12]
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	e7fd      	b.n	8004e96 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8004e9a:	f001 f927 	bl	80060ec <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e9e:	4b07      	ldr	r3, [pc, #28]	@ (8004ebc <vTaskSetTimeOutState+0x4c>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8004ea6:	4b06      	ldr	r3, [pc, #24]	@ (8004ec0 <vTaskSetTimeOutState+0x50>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8004eae:	f001 f953 	bl	8006158 <vPortExitCritical>
}
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20000d74 	.word	0x20000d74
 8004ec0:	20000d60 	.word	0x20000d60

08004ec4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ecc:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <vTaskInternalSetTimeOutState+0x24>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <vTaskInternalSetTimeOutState+0x28>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	605a      	str	r2, [r3, #4]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	20000d74 	.word	0x20000d74
 8004eec:	20000d60 	.word	0x20000d60

08004ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10d      	bne.n	8004f1c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	b672      	cpsid	i
 8004f06:	f383 8811 	msr	BASEPRI, r3
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	b662      	cpsie	i
 8004f14:	613b      	str	r3, [r7, #16]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d10d      	bne.n	8004f3e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f26:	b672      	cpsid	i
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	b662      	cpsie	i
 8004f36:	60fb      	str	r3, [r7, #12]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004f3e:	f001 f8d5 	bl	80060ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f42:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb8 <xTaskCheckForTimeOut+0xc8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f5a:	d102      	bne.n	8004f62 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	e023      	b.n	8004faa <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	4b15      	ldr	r3, [pc, #84]	@ (8004fbc <xTaskCheckForTimeOut+0xcc>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d007      	beq.n	8004f7e <xTaskCheckForTimeOut+0x8e>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d302      	bcc.n	8004f7e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
 8004f7c:	e015      	b.n	8004faa <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d20b      	bcs.n	8004fa0 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	1ad2      	subs	r2, r2, r3
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff95 	bl	8004ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e004      	b.n	8004faa <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004faa:	f001 f8d5 	bl	8006158 <vPortExitCritical>

	return xReturn;
 8004fae:	69fb      	ldr	r3, [r7, #28]
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3720      	adds	r7, #32
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000d60 	.word	0x20000d60
 8004fbc:	20000d74 	.word	0x20000d74

08004fc0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	@ (8004fd4 <vTaskMissedYield+0x14>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
}
 8004fca:	bf00      	nop
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20000d70 	.word	0x20000d70

08004fd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fe0:	f000 f852 	bl	8005088 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fe4:	4b06      	ldr	r3, [pc, #24]	@ (8005000 <prvIdleTask+0x28>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d9f9      	bls.n	8004fe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fec:	4b05      	ldr	r3, [pc, #20]	@ (8005004 <prvIdleTask+0x2c>)
 8004fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	f3bf 8f4f 	dsb	sy
 8004ff8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004ffc:	e7f0      	b.n	8004fe0 <prvIdleTask+0x8>
 8004ffe:	bf00      	nop
 8005000:	2000088c 	.word	0x2000088c
 8005004:	e000ed04 	.word	0xe000ed04

08005008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
 8005012:	e00c      	b.n	800502e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4a12      	ldr	r2, [pc, #72]	@ (8005068 <prvInitialiseTaskLists+0x60>)
 8005020:	4413      	add	r3, r2
 8005022:	4618      	mov	r0, r3
 8005024:	f7fe f812 	bl	800304c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3301      	adds	r3, #1
 800502c:	607b      	str	r3, [r7, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b37      	cmp	r3, #55	@ 0x37
 8005032:	d9ef      	bls.n	8005014 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005034:	480d      	ldr	r0, [pc, #52]	@ (800506c <prvInitialiseTaskLists+0x64>)
 8005036:	f7fe f809 	bl	800304c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800503a:	480d      	ldr	r0, [pc, #52]	@ (8005070 <prvInitialiseTaskLists+0x68>)
 800503c:	f7fe f806 	bl	800304c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005040:	480c      	ldr	r0, [pc, #48]	@ (8005074 <prvInitialiseTaskLists+0x6c>)
 8005042:	f7fe f803 	bl	800304c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005046:	480c      	ldr	r0, [pc, #48]	@ (8005078 <prvInitialiseTaskLists+0x70>)
 8005048:	f7fe f800 	bl	800304c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800504c:	480b      	ldr	r0, [pc, #44]	@ (800507c <prvInitialiseTaskLists+0x74>)
 800504e:	f7fd fffd 	bl	800304c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005052:	4b0b      	ldr	r3, [pc, #44]	@ (8005080 <prvInitialiseTaskLists+0x78>)
 8005054:	4a05      	ldr	r2, [pc, #20]	@ (800506c <prvInitialiseTaskLists+0x64>)
 8005056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005058:	4b0a      	ldr	r3, [pc, #40]	@ (8005084 <prvInitialiseTaskLists+0x7c>)
 800505a:	4a05      	ldr	r2, [pc, #20]	@ (8005070 <prvInitialiseTaskLists+0x68>)
 800505c:	601a      	str	r2, [r3, #0]
}
 800505e:	bf00      	nop
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	2000088c 	.word	0x2000088c
 800506c:	20000cec 	.word	0x20000cec
 8005070:	20000d00 	.word	0x20000d00
 8005074:	20000d1c 	.word	0x20000d1c
 8005078:	20000d30 	.word	0x20000d30
 800507c:	20000d48 	.word	0x20000d48
 8005080:	20000d14 	.word	0x20000d14
 8005084:	20000d18 	.word	0x20000d18

08005088 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800508e:	e019      	b.n	80050c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005090:	f001 f82c 	bl	80060ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005094:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <prvCheckTasksWaitingTermination+0x50>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe f85d 	bl	8003160 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050a6:	4b0d      	ldr	r3, [pc, #52]	@ (80050dc <prvCheckTasksWaitingTermination+0x54>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	4a0b      	ldr	r2, [pc, #44]	@ (80050dc <prvCheckTasksWaitingTermination+0x54>)
 80050ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	@ (80050e0 <prvCheckTasksWaitingTermination+0x58>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	4a0a      	ldr	r2, [pc, #40]	@ (80050e0 <prvCheckTasksWaitingTermination+0x58>)
 80050b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050ba:	f001 f84d 	bl	8006158 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f810 	bl	80050e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050c4:	4b06      	ldr	r3, [pc, #24]	@ (80050e0 <prvCheckTasksWaitingTermination+0x58>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e1      	bne.n	8005090 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000d30 	.word	0x20000d30
 80050dc:	20000d5c 	.word	0x20000d5c
 80050e0:	20000d44 	.word	0x20000d44

080050e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3354      	adds	r3, #84	@ 0x54
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 fb1b 	bl	800672c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d108      	bne.n	8005112 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	4618      	mov	r0, r3
 8005106:	f001 f9ed 	bl	80064e4 <vPortFree>
				vPortFree( pxTCB );
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f001 f9ea 	bl	80064e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005110:	e01b      	b.n	800514a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005118:	2b01      	cmp	r3, #1
 800511a:	d103      	bne.n	8005124 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f001 f9e1 	bl	80064e4 <vPortFree>
	}
 8005122:	e012      	b.n	800514a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800512a:	2b02      	cmp	r3, #2
 800512c:	d00d      	beq.n	800514a <prvDeleteTCB+0x66>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005132:	b672      	cpsid	i
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	b662      	cpsie	i
 8005142:	60fb      	str	r3, [r7, #12]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <prvDeleteTCB+0x62>
	}
 800514a:	bf00      	nop
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
	...

08005154 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800515a:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <prvResetNextTaskUnblockTime+0x38>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d104      	bne.n	800516e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005164:	4b0a      	ldr	r3, [pc, #40]	@ (8005190 <prvResetNextTaskUnblockTime+0x3c>)
 8005166:	f04f 32ff 	mov.w	r2, #4294967295
 800516a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800516c:	e008      	b.n	8005180 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516e:	4b07      	ldr	r3, [pc, #28]	@ (800518c <prvResetNextTaskUnblockTime+0x38>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	4a04      	ldr	r2, [pc, #16]	@ (8005190 <prvResetNextTaskUnblockTime+0x3c>)
 800517e:	6013      	str	r3, [r2, #0]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000d14 	.word	0x20000d14
 8005190:	20000d7c 	.word	0x20000d7c

08005194 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800519a:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <xTaskGetCurrentTaskHandle+0x1c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	607b      	str	r3, [r7, #4]

		return xReturn;
 80051a0:	687b      	ldr	r3, [r7, #4]
	}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	20000888 	.word	0x20000888

080051b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051ba:	4b0b      	ldr	r3, [pc, #44]	@ (80051e8 <xTaskGetSchedulerState+0x34>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051c2:	2301      	movs	r3, #1
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	e008      	b.n	80051da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c8:	4b08      	ldr	r3, [pc, #32]	@ (80051ec <xTaskGetSchedulerState+0x38>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d102      	bne.n	80051d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051d0:	2302      	movs	r3, #2
 80051d2:	607b      	str	r3, [r7, #4]
 80051d4:	e001      	b.n	80051da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051d6:	2300      	movs	r3, #0
 80051d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051da:	687b      	ldr	r3, [r7, #4]
	}
 80051dc:	4618      	mov	r0, r3
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr
 80051e8:	20000d68 	.word	0x20000d68
 80051ec:	20000d84 	.word	0x20000d84

080051f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d05c      	beq.n	80052c0 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005206:	4b31      	ldr	r3, [pc, #196]	@ (80052cc <xTaskPriorityDisinherit+0xdc>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	429a      	cmp	r2, r3
 800520e:	d00d      	beq.n	800522c <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	b672      	cpsid	i
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	b662      	cpsie	i
 8005224:	60fb      	str	r3, [r7, #12]
}
 8005226:	bf00      	nop
 8005228:	bf00      	nop
 800522a:	e7fd      	b.n	8005228 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005238:	b672      	cpsid	i
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	b662      	cpsie	i
 8005248:	60bb      	str	r3, [r7, #8]
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	e7fd      	b.n	800524c <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005254:	1e5a      	subs	r2, r3, #1
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005262:	429a      	cmp	r2, r3
 8005264:	d02c      	beq.n	80052c0 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526a:	2b00      	cmp	r3, #0
 800526c:	d128      	bne.n	80052c0 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	3304      	adds	r3, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f7fd ff74 	bl	8003160 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005290:	4b0f      	ldr	r3, [pc, #60]	@ (80052d0 <xTaskPriorityDisinherit+0xe0>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	429a      	cmp	r2, r3
 8005296:	d903      	bls.n	80052a0 <xTaskPriorityDisinherit+0xb0>
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529c:	4a0c      	ldr	r2, [pc, #48]	@ (80052d0 <xTaskPriorityDisinherit+0xe0>)
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4a09      	ldr	r2, [pc, #36]	@ (80052d4 <xTaskPriorityDisinherit+0xe4>)
 80052ae:	441a      	add	r2, r3
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7fd fef5 	bl	80030a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052bc:	2301      	movs	r3, #1
 80052be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052c0:	697b      	ldr	r3, [r7, #20]
	}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000888 	.word	0x20000888
 80052d0:	20000d64 	.word	0x20000d64
 80052d4:	2000088c 	.word	0x2000088c

080052d8 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
 80052e4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80052e6:	f000 ff01 	bl	80060ec <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80052ea:	4b29      	ldr	r3, [pc, #164]	@ (8005390 <xTaskNotifyWait+0xb8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d01c      	beq.n	8005332 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80052f8:	4b25      	ldr	r3, [pc, #148]	@ (8005390 <xTaskNotifyWait+0xb8>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	43d2      	mvns	r2, r2
 8005304:	400a      	ands	r2, r1
 8005306:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800530a:	4b21      	ldr	r3, [pc, #132]	@ (8005390 <xTaskNotifyWait+0xb8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800531a:	2101      	movs	r1, #1
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f000 fa17 	bl	8005750 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005322:	4b1c      	ldr	r3, [pc, #112]	@ (8005394 <xTaskNotifyWait+0xbc>)
 8005324:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005332:	f000 ff11 	bl	8006158 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005336:	f000 fed9 	bl	80060ec <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005340:	4b13      	ldr	r3, [pc, #76]	@ (8005390 <xTaskNotifyWait+0xb8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800534c:	4b10      	ldr	r3, [pc, #64]	@ (8005390 <xTaskNotifyWait+0xb8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d002      	beq.n	8005360 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800535a:	2300      	movs	r3, #0
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e00a      	b.n	8005376 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <xTaskNotifyWait+0xb8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	43d2      	mvns	r2, r2
 800536c:	400a      	ands	r2, r1
 800536e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005376:	4b06      	ldr	r3, [pc, #24]	@ (8005390 <xTaskNotifyWait+0xb8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8005380:	f000 feea 	bl	8006158 <vPortExitCritical>

		return xReturn;
 8005384:	697b      	ldr	r3, [r7, #20]
	}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	20000888 	.word	0x20000888
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08a      	sub	sp, #40	@ 0x28
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4613      	mov	r3, r2
 80053a6:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80053a8:	2301      	movs	r3, #1
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10d      	bne.n	80053ce <xTaskGenericNotify+0x36>
	__asm volatile
 80053b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b6:	b672      	cpsid	i
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	b662      	cpsie	i
 80053c6:	61bb      	str	r3, [r7, #24]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80053d2:	f000 fe8b 	bl	80060ec <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d004      	beq.n	80053e6 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80053ec:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	2202      	movs	r2, #2
 80053f2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d82e      	bhi.n	800545a <xTaskGenericNotify+0xc2>
 80053fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <xTaskGenericNotify+0x6c>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005483 	.word	0x08005483
 8005408:	08005419 	.word	0x08005419
 800540c:	0800542b 	.word	0x0800542b
 8005410:	0800543b 	.word	0x0800543b
 8005414:	08005445 	.word	0x08005445
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005418:	6a3b      	ldr	r3, [r7, #32]
 800541a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	431a      	orrs	r2, r3
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005428:	e02e      	b.n	8005488 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800542a:	6a3b      	ldr	r3, [r7, #32]
 800542c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005438:	e026      	b.n	8005488 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	68ba      	ldr	r2, [r7, #8]
 800543e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005442:	e021      	b.n	8005488 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005444:	7ffb      	ldrb	r3, [r7, #31]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d004      	beq.n	8005454 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005452:	e019      	b.n	8005488 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8005454:	2300      	movs	r3, #0
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8005458:	e016      	b.n	8005488 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d00f      	beq.n	8005486 <xTaskGenericNotify+0xee>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	b672      	cpsid	i
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	b662      	cpsie	i
 800547a:	617b      	str	r3, [r7, #20]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <xTaskGenericNotify+0xe6>
					break;
 8005482:	bf00      	nop
 8005484:	e000      	b.n	8005488 <xTaskGenericNotify+0xf0>

					break;
 8005486:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005488:	7ffb      	ldrb	r3, [r7, #31]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d13d      	bne.n	800550a <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	3304      	adds	r3, #4
 8005492:	4618      	mov	r0, r3
 8005494:	f7fd fe64 	bl	8003160 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	4b1e      	ldr	r3, [pc, #120]	@ (8005518 <xTaskGenericNotify+0x180>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d903      	bls.n	80054ac <xTaskGenericNotify+0x114>
 80054a4:	6a3b      	ldr	r3, [r7, #32]
 80054a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005518 <xTaskGenericNotify+0x180>)
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	4a18      	ldr	r2, [pc, #96]	@ (800551c <xTaskGenericNotify+0x184>)
 80054ba:	441a      	add	r2, r3
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	3304      	adds	r3, #4
 80054c0:	4619      	mov	r1, r3
 80054c2:	4610      	mov	r0, r2
 80054c4:	f7fd fdef 	bl	80030a6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80054c8:	6a3b      	ldr	r3, [r7, #32]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00d      	beq.n	80054ec <xTaskGenericNotify+0x154>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	613b      	str	r3, [r7, #16]
}
 80054e6:	bf00      	nop
 80054e8:	bf00      	nop
 80054ea:	e7fd      	b.n	80054e8 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005520 <xTaskGenericNotify+0x188>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d907      	bls.n	800550a <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80054fa:	4b0a      	ldr	r3, [pc, #40]	@ (8005524 <xTaskGenericNotify+0x18c>)
 80054fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005500:	601a      	str	r2, [r3, #0]
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800550a:	f000 fe25 	bl	8006158 <vPortExitCritical>

		return xReturn;
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8005510:	4618      	mov	r0, r3
 8005512:	3728      	adds	r7, #40	@ 0x28
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000d64 	.word	0x20000d64
 800551c:	2000088c 	.word	0x2000088c
 8005520:	20000888 	.word	0x20000888
 8005524:	e000ed04 	.word	0xe000ed04

08005528 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08e      	sub	sp, #56	@ 0x38
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	603b      	str	r3, [r7, #0]
 8005534:	4613      	mov	r3, r2
 8005536:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005538:	2301      	movs	r3, #1
 800553a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8005542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005546:	b672      	cpsid	i
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	b662      	cpsie	i
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800555e:	f000 fead 	bl	80062bc <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8005566:	f3ef 8211 	mrs	r2, BASEPRI
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	b672      	cpsid	i
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	b662      	cpsie	i
 800557e:	623a      	str	r2, [r7, #32]
 8005580:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005582:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005584:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800559c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80055a8:	79fb      	ldrb	r3, [r7, #7]
 80055aa:	2b04      	cmp	r3, #4
 80055ac:	d82e      	bhi.n	800560c <xTaskGenericNotifyFromISR+0xe4>
 80055ae:	a201      	add	r2, pc, #4	@ (adr r2, 80055b4 <xTaskGenericNotifyFromISR+0x8c>)
 80055b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b4:	08005635 	.word	0x08005635
 80055b8:	080055c9 	.word	0x080055c9
 80055bc:	080055db 	.word	0x080055db
 80055c0:	080055eb 	.word	0x080055eb
 80055c4:	080055f5 	.word	0x080055f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80055c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ca:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	431a      	orrs	r2, r3
 80055d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80055d8:	e02f      	b.n	800563a <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80055da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055e0:	1c5a      	adds	r2, r3, #1
 80055e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055e4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80055e8:	e027      	b.n	800563a <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80055f2:	e022      	b.n	800563a <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80055f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d004      	beq.n	8005606 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005604:	e019      	b.n	800563a <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8005606:	2300      	movs	r3, #0
 8005608:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800560a:	e016      	b.n	800563a <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800560c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800560e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d00f      	beq.n	8005638 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561c:	b672      	cpsid	i
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
 800562a:	b662      	cpsie	i
 800562c:	61bb      	str	r3, [r7, #24]
}
 800562e:	bf00      	nop
 8005630:	bf00      	nop
 8005632:	e7fd      	b.n	8005630 <xTaskGenericNotifyFromISR+0x108>
					break;
 8005634:	bf00      	nop
 8005636:	e000      	b.n	800563a <xTaskGenericNotifyFromISR+0x112>
					break;
 8005638:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800563a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800563e:	2b01      	cmp	r3, #1
 8005640:	d149      	bne.n	80056d6 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00d      	beq.n	8005666 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 800564a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564e:	b672      	cpsid	i
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	b662      	cpsie	i
 800565e:	617b      	str	r3, [r7, #20]
}
 8005660:	bf00      	nop
 8005662:	bf00      	nop
 8005664:	e7fd      	b.n	8005662 <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005666:	4b21      	ldr	r3, [pc, #132]	@ (80056ec <xTaskGenericNotifyFromISR+0x1c4>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d11d      	bne.n	80056aa <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	3304      	adds	r3, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f7fd fd74 	bl	8003160 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567c:	4b1c      	ldr	r3, [pc, #112]	@ (80056f0 <xTaskGenericNotifyFromISR+0x1c8>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d903      	bls.n	800568c <xTaskGenericNotifyFromISR+0x164>
 8005684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005688:	4a19      	ldr	r2, [pc, #100]	@ (80056f0 <xTaskGenericNotifyFromISR+0x1c8>)
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800568e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005690:	4613      	mov	r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4a16      	ldr	r2, [pc, #88]	@ (80056f4 <xTaskGenericNotifyFromISR+0x1cc>)
 800569a:	441a      	add	r2, r3
 800569c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569e:	3304      	adds	r3, #4
 80056a0:	4619      	mov	r1, r3
 80056a2:	4610      	mov	r0, r2
 80056a4:	f7fd fcff 	bl	80030a6 <vListInsertEnd>
 80056a8:	e005      	b.n	80056b6 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80056aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ac:	3318      	adds	r3, #24
 80056ae:	4619      	mov	r1, r3
 80056b0:	4811      	ldr	r0, [pc, #68]	@ (80056f8 <xTaskGenericNotifyFromISR+0x1d0>)
 80056b2:	f7fd fcf8 	bl	80030a6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ba:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <xTaskGenericNotifyFromISR+0x1d4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d908      	bls.n	80056d6 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80056c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80056ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80056d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005700 <xTaskGenericNotifyFromISR+0x1d8>)
 80056d2:	2201      	movs	r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f383 8811 	msr	BASEPRI, r3
}
 80056e0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80056e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3738      	adds	r7, #56	@ 0x38
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20000d84 	.word	0x20000d84
 80056f0:	20000d64 	.word	0x20000d64
 80056f4:	2000088c 	.word	0x2000088c
 80056f8:	20000d1c 	.word	0x20000d1c
 80056fc:	20000888 	.word	0x20000888
 8005700:	20000d70 	.word	0x20000d70

08005704 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d102      	bne.n	8005718 <xTaskNotifyStateClear+0x14>
 8005712:	4b0e      	ldr	r3, [pc, #56]	@ (800574c <xTaskNotifyStateClear+0x48>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	e000      	b.n	800571a <xTaskNotifyStateClear+0x16>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 800571c:	f000 fce6 	bl	80060ec <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d106      	bne.n	800573a <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8005734:	2301      	movs	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e001      	b.n	800573e <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800573e:	f000 fd0b 	bl	8006158 <vPortExitCritical>

		return xReturn;
 8005742:	68fb      	ldr	r3, [r7, #12]
	}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000888 	.word	0x20000888

08005750 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800575a:	4b21      	ldr	r3, [pc, #132]	@ (80057e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005760:	4b20      	ldr	r3, [pc, #128]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3304      	adds	r3, #4
 8005766:	4618      	mov	r0, r3
 8005768:	f7fd fcfa 	bl	8003160 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005772:	d10a      	bne.n	800578a <prvAddCurrentTaskToDelayedList+0x3a>
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d007      	beq.n	800578a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800577a:	4b1a      	ldr	r3, [pc, #104]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3304      	adds	r3, #4
 8005780:	4619      	mov	r1, r3
 8005782:	4819      	ldr	r0, [pc, #100]	@ (80057e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005784:	f7fd fc8f 	bl	80030a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005788:	e026      	b.n	80057d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800578a:	68fa      	ldr	r2, [r7, #12]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4413      	add	r3, r2
 8005790:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005792:	4b14      	ldr	r3, [pc, #80]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68ba      	ldr	r2, [r7, #8]
 8005798:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d209      	bcs.n	80057b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057a2:	4b12      	ldr	r3, [pc, #72]	@ (80057ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	4610      	mov	r0, r2
 80057b0:	f7fd fc9d 	bl	80030ee <vListInsert>
}
 80057b4:	e010      	b.n	80057d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057b6:	4b0e      	ldr	r3, [pc, #56]	@ (80057f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	4b0a      	ldr	r3, [pc, #40]	@ (80057e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3304      	adds	r3, #4
 80057c0:	4619      	mov	r1, r3
 80057c2:	4610      	mov	r0, r2
 80057c4:	f7fd fc93 	bl	80030ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80057c8:	4b0a      	ldr	r3, [pc, #40]	@ (80057f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d202      	bcs.n	80057d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80057d2:	4a08      	ldr	r2, [pc, #32]	@ (80057f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	6013      	str	r3, [r2, #0]
}
 80057d8:	bf00      	nop
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	20000d60 	.word	0x20000d60
 80057e4:	20000888 	.word	0x20000888
 80057e8:	20000d48 	.word	0x20000d48
 80057ec:	20000d18 	.word	0x20000d18
 80057f0:	20000d14 	.word	0x20000d14
 80057f4:	20000d7c 	.word	0x20000d7c

080057f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b08a      	sub	sp, #40	@ 0x28
 80057fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005802:	f000 fb21 	bl	8005e48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005806:	4b1e      	ldr	r3, [pc, #120]	@ (8005880 <xTimerCreateTimerTask+0x88>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d021      	beq.n	8005852 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005816:	1d3a      	adds	r2, r7, #4
 8005818:	f107 0108 	add.w	r1, r7, #8
 800581c:	f107 030c 	add.w	r3, r7, #12
 8005820:	4618      	mov	r0, r3
 8005822:	f7fd fbf9 	bl	8003018 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005826:	6879      	ldr	r1, [r7, #4]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	9202      	str	r2, [sp, #8]
 800582e:	9301      	str	r3, [sp, #4]
 8005830:	2302      	movs	r3, #2
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	2300      	movs	r3, #0
 8005836:	460a      	mov	r2, r1
 8005838:	4912      	ldr	r1, [pc, #72]	@ (8005884 <xTimerCreateTimerTask+0x8c>)
 800583a:	4813      	ldr	r0, [pc, #76]	@ (8005888 <xTimerCreateTimerTask+0x90>)
 800583c:	f7fe fe09 	bl	8004452 <xTaskCreateStatic>
 8005840:	4603      	mov	r3, r0
 8005842:	4a12      	ldr	r2, [pc, #72]	@ (800588c <xTimerCreateTimerTask+0x94>)
 8005844:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005846:	4b11      	ldr	r3, [pc, #68]	@ (800588c <xTimerCreateTimerTask+0x94>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d001      	beq.n	8005852 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800584e:	2301      	movs	r3, #1
 8005850:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10d      	bne.n	8005874 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	b672      	cpsid	i
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	b662      	cpsie	i
 800586c:	613b      	str	r3, [r7, #16]
}
 800586e:	bf00      	nop
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005874:	697b      	ldr	r3, [r7, #20]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000db8 	.word	0x20000db8
 8005884:	08006948 	.word	0x08006948
 8005888:	080059d1 	.word	0x080059d1
 800588c:	20000dbc 	.word	0x20000dbc

08005890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b08a      	sub	sp, #40	@ 0x28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
 800589c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <xTimerGenericCommand+0x34>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	b672      	cpsid	i
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	b662      	cpsie	i
 80058bc:	623b      	str	r3, [r7, #32]
}
 80058be:	bf00      	nop
 80058c0:	bf00      	nop
 80058c2:	e7fd      	b.n	80058c0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80058c4:	4b19      	ldr	r3, [pc, #100]	@ (800592c <xTimerGenericCommand+0x9c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02a      	beq.n	8005922 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b05      	cmp	r3, #5
 80058dc:	dc18      	bgt.n	8005910 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058de:	f7ff fc69 	bl	80051b4 <xTaskGetSchedulerState>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d109      	bne.n	80058fc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058e8:	4b10      	ldr	r3, [pc, #64]	@ (800592c <xTimerGenericCommand+0x9c>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	f107 0110 	add.w	r1, r7, #16
 80058f0:	2300      	movs	r3, #0
 80058f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058f4:	f7fd fd74 	bl	80033e0 <xQueueGenericSend>
 80058f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80058fa:	e012      	b.n	8005922 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058fc:	4b0b      	ldr	r3, [pc, #44]	@ (800592c <xTimerGenericCommand+0x9c>)
 80058fe:	6818      	ldr	r0, [r3, #0]
 8005900:	f107 0110 	add.w	r1, r7, #16
 8005904:	2300      	movs	r3, #0
 8005906:	2200      	movs	r2, #0
 8005908:	f7fd fd6a 	bl	80033e0 <xQueueGenericSend>
 800590c:	6278      	str	r0, [r7, #36]	@ 0x24
 800590e:	e008      	b.n	8005922 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005910:	4b06      	ldr	r3, [pc, #24]	@ (800592c <xTimerGenericCommand+0x9c>)
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	f107 0110 	add.w	r1, r7, #16
 8005918:	2300      	movs	r3, #0
 800591a:	683a      	ldr	r2, [r7, #0]
 800591c:	f7fd fe6a 	bl	80035f4 <xQueueGenericSendFromISR>
 8005920:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005924:	4618      	mov	r0, r3
 8005926:	3728      	adds	r7, #40	@ 0x28
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000db8 	.word	0x20000db8

08005930 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b088      	sub	sp, #32
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593a:	4b24      	ldr	r3, [pc, #144]	@ (80059cc <prvProcessExpiredTimer+0x9c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	3304      	adds	r3, #4
 8005948:	4618      	mov	r0, r3
 800594a:	f7fd fc09 	bl	8003160 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d025      	beq.n	80059a8 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	699a      	ldr	r2, [r3, #24]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	18d1      	adds	r1, r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	6978      	ldr	r0, [r7, #20]
 800596a:	f000 f8d7 	bl	8005b1c <prvInsertTimerInActiveList>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d022      	beq.n	80059ba <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005974:	2300      	movs	r3, #0
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	2300      	movs	r3, #0
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	2100      	movs	r1, #0
 800597e:	6978      	ldr	r0, [r7, #20]
 8005980:	f7ff ff86 	bl	8005890 <xTimerGenericCommand>
 8005984:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d116      	bne.n	80059ba <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800598c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005990:	b672      	cpsid	i
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	b662      	cpsie	i
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	6978      	ldr	r0, [r7, #20]
 80059c0:	4798      	blx	r3
}
 80059c2:	bf00      	nop
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	20000db0 	.word	0x20000db0

080059d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059d8:	f107 0308 	add.w	r3, r7, #8
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 f859 	bl	8005a94 <prvGetNextExpireTime>
 80059e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4619      	mov	r1, r3
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 f805 	bl	80059f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059ee:	f000 f8d7 	bl	8005ba0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059f2:	bf00      	nop
 80059f4:	e7f0      	b.n	80059d8 <prvTimerTask+0x8>
	...

080059f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005a02:	f7fe ff97 	bl	8004934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005a06:	f107 0308 	add.w	r3, r7, #8
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 f866 	bl	8005adc <prvSampleTimeNow>
 8005a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d130      	bne.n	8005a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d806      	bhi.n	8005a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005a26:	f7fe ff93 	bl	8004950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005a2a:	68f9      	ldr	r1, [r7, #12]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff ff7f 	bl	8005930 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005a32:	e024      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005a3a:	4b13      	ldr	r3, [pc, #76]	@ (8005a88 <prvProcessTimerOrBlockTask+0x90>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <prvProcessTimerOrBlockTask+0x50>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <prvProcessTimerOrBlockTask+0x52>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <prvProcessTimerOrBlockTask+0x94>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f7fe f891 	bl	8003b80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a5e:	f7fe ff77 	bl	8004950 <xTaskResumeAll>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d10a      	bne.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a68:	4b09      	ldr	r3, [pc, #36]	@ (8005a90 <prvProcessTimerOrBlockTask+0x98>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
}
 8005a78:	e001      	b.n	8005a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a7a:	f7fe ff69 	bl	8004950 <xTaskResumeAll>
}
 8005a7e:	bf00      	nop
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000db4 	.word	0x20000db4
 8005a8c:	20000db8 	.word	0x20000db8
 8005a90:	e000ed04 	.word	0xe000ed04

08005a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ad8 <prvGetNextExpireTime+0x44>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <prvGetNextExpireTime+0x16>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	e000      	b.n	8005aac <prvGetNextExpireTime+0x18>
 8005aaa:	2200      	movs	r2, #0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ab8:	4b07      	ldr	r3, [pc, #28]	@ (8005ad8 <prvGetNextExpireTime+0x44>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e001      	b.n	8005ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	20000db0 	.word	0x20000db0

08005adc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ae4:	f7fe ffd4 	bl	8004a90 <xTaskGetTickCount>
 8005ae8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005aea:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <prvSampleTimeNow+0x3c>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d205      	bcs.n	8005b00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005af4:	f000 f940 	bl	8005d78 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005b06:	4a04      	ldr	r2, [pc, #16]	@ (8005b18 <prvSampleTimeNow+0x3c>)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	20000dc0 	.word	0x20000dc0

08005b1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
 8005b28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	68ba      	ldr	r2, [r7, #8]
 8005b32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d812      	bhi.n	8005b68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d302      	bcc.n	8005b56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b50:	2301      	movs	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	e01b      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b56:	4b10      	ldr	r3, [pc, #64]	@ (8005b98 <prvInsertTimerInActiveList+0x7c>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f7fd fac4 	bl	80030ee <vListInsert>
 8005b66:	e012      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d206      	bcs.n	8005b7e <prvInsertTimerInActiveList+0x62>
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d302      	bcc.n	8005b7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e007      	b.n	8005b8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b7e:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <prvInsertTimerInActiveList+0x80>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7fd fab0 	bl	80030ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000db4 	.word	0x20000db4
 8005b9c:	20000db0 	.word	0x20000db0

08005ba0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08e      	sub	sp, #56	@ 0x38
 8005ba4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ba6:	e0d4      	b.n	8005d52 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	da1b      	bge.n	8005be6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005bae:	1d3b      	adds	r3, r7, #4
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10d      	bne.n	8005bd6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	b672      	cpsid	i
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	b662      	cpsie	i
 8005bce:	61fb      	str	r3, [r7, #28]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bdc:	6850      	ldr	r0, [r2, #4]
 8005bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be0:	6892      	ldr	r2, [r2, #8]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f2c0 80b2 	blt.w	8005d52 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d004      	beq.n	8005c04 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fd faae 	bl	8003160 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c04:	463b      	mov	r3, r7
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7ff ff68 	bl	8005adc <prvSampleTimeNow>
 8005c0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b09      	cmp	r3, #9
 8005c12:	f200 809b 	bhi.w	8005d4c <prvProcessReceivedCommands+0x1ac>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <prvProcessReceivedCommands+0x7c>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c45 	.word	0x08005c45
 8005c20:	08005c45 	.word	0x08005c45
 8005c24:	08005c45 	.word	0x08005c45
 8005c28:	08005cbf 	.word	0x08005cbf
 8005c2c:	08005cd3 	.word	0x08005cd3
 8005c30:	08005d23 	.word	0x08005d23
 8005c34:	08005c45 	.word	0x08005c45
 8005c38:	08005c45 	.word	0x08005c45
 8005c3c:	08005cbf 	.word	0x08005cbf
 8005c40:	08005cd3 	.word	0x08005cd3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	18d1      	adds	r1, r2, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c64:	f7ff ff5a 	bl	8005b1c <prvInsertTimerInActiveList>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d070      	beq.n	8005d50 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c7c:	f003 0304 	and.w	r3, r3, #4
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d065      	beq.n	8005d50 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	441a      	add	r2, r3
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	2300      	movs	r3, #0
 8005c92:	2100      	movs	r1, #0
 8005c94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c96:	f7ff fdfb 	bl	8005890 <xTimerGenericCommand>
 8005c9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d156      	bne.n	8005d50 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	b672      	cpsid	i
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	b662      	cpsie	i
 8005cb6:	61bb      	str	r3, [r7, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	bf00      	nop
 8005cbc:	e7fd      	b.n	8005cba <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005cd0:	e03f      	b.n	8005d52 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	699b      	ldr	r3, [r3, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10d      	bne.n	8005d0e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	b672      	cpsid	i
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	b662      	cpsie	i
 8005d06:	617b      	str	r3, [r7, #20]
}
 8005d08:	bf00      	nop
 8005d0a:	bf00      	nop
 8005d0c:	e7fd      	b.n	8005d0a <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d10:	699a      	ldr	r2, [r3, #24]
 8005d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d14:	18d1      	adds	r1, r2, r3
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d1c:	f7ff fefe 	bl	8005b1c <prvInsertTimerInActiveList>
					break;
 8005d20:	e017      	b.n	8005d52 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8005d30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d32:	f000 fbd7 	bl	80064e4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005d36:	e00c      	b.n	8005d52 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d4a:	e002      	b.n	8005d52 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8005d4c:	bf00      	nop
 8005d4e:	e000      	b.n	8005d52 <prvProcessReceivedCommands+0x1b2>
					break;
 8005d50:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d52:	4b08      	ldr	r3, [pc, #32]	@ (8005d74 <prvProcessReceivedCommands+0x1d4>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	1d39      	adds	r1, r7, #4
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7fd fcee 	bl	800373c <xQueueReceive>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f47f af20 	bne.w	8005ba8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d68:	bf00      	nop
 8005d6a:	bf00      	nop
 8005d6c:	3730      	adds	r7, #48	@ 0x30
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	20000db8 	.word	0x20000db8

08005d78 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d7e:	e04b      	b.n	8005e18 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d80:	4b2f      	ldr	r3, [pc, #188]	@ (8005e40 <prvSwitchTimerLists+0xc8>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e40 <prvSwitchTimerLists+0xc8>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3304      	adds	r3, #4
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fd f9e1 	bl	8003160 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d031      	beq.n	8005e18 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4413      	add	r3, r2
 8005dbc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d90e      	bls.n	8005de4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e40 <prvSwitchTimerLists+0xc8>)
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f7fd f986 	bl	80030ee <vListInsert>
 8005de2:	e019      	b.n	8005e18 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005de4:	2300      	movs	r3, #0
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	2300      	movs	r3, #0
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	2100      	movs	r1, #0
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff fd4e 	bl	8005890 <xTimerGenericCommand>
 8005df4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10d      	bne.n	8005e18 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e00:	b672      	cpsid	i
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	b662      	cpsie	i
 8005e10:	603b      	str	r3, [r7, #0]
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e18:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <prvSwitchTimerLists+0xc8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1ae      	bne.n	8005d80 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005e22:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <prvSwitchTimerLists+0xc8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005e28:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <prvSwitchTimerLists+0xcc>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a04      	ldr	r2, [pc, #16]	@ (8005e40 <prvSwitchTimerLists+0xc8>)
 8005e2e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005e30:	4a04      	ldr	r2, [pc, #16]	@ (8005e44 <prvSwitchTimerLists+0xcc>)
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6013      	str	r3, [r2, #0]
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000db0 	.word	0x20000db0
 8005e44:	20000db4 	.word	0x20000db4

08005e48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e4e:	f000 f94d 	bl	80060ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e52:	4b15      	ldr	r3, [pc, #84]	@ (8005ea8 <prvCheckForValidListAndQueue+0x60>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d120      	bne.n	8005e9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e5a:	4814      	ldr	r0, [pc, #80]	@ (8005eac <prvCheckForValidListAndQueue+0x64>)
 8005e5c:	f7fd f8f6 	bl	800304c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e60:	4813      	ldr	r0, [pc, #76]	@ (8005eb0 <prvCheckForValidListAndQueue+0x68>)
 8005e62:	f7fd f8f3 	bl	800304c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e66:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <prvCheckForValidListAndQueue+0x6c>)
 8005e68:	4a10      	ldr	r2, [pc, #64]	@ (8005eac <prvCheckForValidListAndQueue+0x64>)
 8005e6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e6c:	4b12      	ldr	r3, [pc, #72]	@ (8005eb8 <prvCheckForValidListAndQueue+0x70>)
 8005e6e:	4a10      	ldr	r2, [pc, #64]	@ (8005eb0 <prvCheckForValidListAndQueue+0x68>)
 8005e70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e72:	2300      	movs	r3, #0
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	4b11      	ldr	r3, [pc, #68]	@ (8005ebc <prvCheckForValidListAndQueue+0x74>)
 8005e78:	4a11      	ldr	r2, [pc, #68]	@ (8005ec0 <prvCheckForValidListAndQueue+0x78>)
 8005e7a:	2110      	movs	r1, #16
 8005e7c:	200a      	movs	r0, #10
 8005e7e:	f7fd fa05 	bl	800328c <xQueueGenericCreateStatic>
 8005e82:	4603      	mov	r3, r0
 8005e84:	4a08      	ldr	r2, [pc, #32]	@ (8005ea8 <prvCheckForValidListAndQueue+0x60>)
 8005e86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e88:	4b07      	ldr	r3, [pc, #28]	@ (8005ea8 <prvCheckForValidListAndQueue+0x60>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d005      	beq.n	8005e9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e90:	4b05      	ldr	r3, [pc, #20]	@ (8005ea8 <prvCheckForValidListAndQueue+0x60>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	490b      	ldr	r1, [pc, #44]	@ (8005ec4 <prvCheckForValidListAndQueue+0x7c>)
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fd fe48 	bl	8003b2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e9c:	f000 f95c 	bl	8006158 <vPortExitCritical>
}
 8005ea0:	bf00      	nop
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000db8 	.word	0x20000db8
 8005eac:	20000d88 	.word	0x20000d88
 8005eb0:	20000d9c 	.word	0x20000d9c
 8005eb4:	20000db0 	.word	0x20000db0
 8005eb8:	20000db4 	.word	0x20000db4
 8005ebc:	20000e64 	.word	0x20000e64
 8005ec0:	20000dc4 	.word	0x20000dc4
 8005ec4:	08006950 	.word	0x08006950

08005ec8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3b04      	subs	r3, #4
 8005ed8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ee0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3b04      	subs	r3, #4
 8005ee6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f023 0201 	bic.w	r2, r3, #1
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	3b04      	subs	r3, #4
 8005ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ef8:	4a0c      	ldr	r2, [pc, #48]	@ (8005f2c <pxPortInitialiseStack+0x64>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3b14      	subs	r3, #20
 8005f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3b04      	subs	r3, #4
 8005f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f06f 0202 	mvn.w	r2, #2
 8005f16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	3b20      	subs	r3, #32
 8005f1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	08005f31 	.word	0x08005f31

08005f30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f30:	b480      	push	{r7}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005f3a:	4b15      	ldr	r3, [pc, #84]	@ (8005f90 <prvTaskExitError+0x60>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f42:	d00d      	beq.n	8005f60 <prvTaskExitError+0x30>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f48:	b672      	cpsid	i
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	b662      	cpsie	i
 8005f58:	60fb      	str	r3, [r7, #12]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <prvTaskExitError+0x2c>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	b672      	cpsid	i
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	b662      	cpsie	i
 8005f74:	60bb      	str	r3, [r7, #8]
}
 8005f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f78:	bf00      	nop
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d0fc      	beq.n	8005f7a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f80:	bf00      	nop
 8005f82:	bf00      	nop
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	2000000c 	.word	0x2000000c
	...

08005fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005fa0:	4b07      	ldr	r3, [pc, #28]	@ (8005fc0 <pxCurrentTCBConst2>)
 8005fa2:	6819      	ldr	r1, [r3, #0]
 8005fa4:	6808      	ldr	r0, [r1, #0]
 8005fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005faa:	f380 8809 	msr	PSP, r0
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8811 	msr	BASEPRI, r0
 8005fba:	4770      	bx	lr
 8005fbc:	f3af 8000 	nop.w

08005fc0 <pxCurrentTCBConst2>:
 8005fc0:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop

08005fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005fc8:	4808      	ldr	r0, [pc, #32]	@ (8005fec <prvPortStartFirstTask+0x24>)
 8005fca:	6800      	ldr	r0, [r0, #0]
 8005fcc:	6800      	ldr	r0, [r0, #0]
 8005fce:	f380 8808 	msr	MSP, r0
 8005fd2:	f04f 0000 	mov.w	r0, #0
 8005fd6:	f380 8814 	msr	CONTROL, r0
 8005fda:	b662      	cpsie	i
 8005fdc:	b661      	cpsie	f
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
 8005fe6:	df00      	svc	0
 8005fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005fea:	bf00      	nop
 8005fec:	e000ed08 	.word	0xe000ed08

08005ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ff6:	4b37      	ldr	r3, [pc, #220]	@ (80060d4 <xPortStartScheduler+0xe4>)
 8005ff8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	22ff      	movs	r2, #255	@ 0xff
 8006006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b2db      	uxtb	r3, r3
 800600e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	b2db      	uxtb	r3, r3
 8006014:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006018:	b2da      	uxtb	r2, r3
 800601a:	4b2f      	ldr	r3, [pc, #188]	@ (80060d8 <xPortStartScheduler+0xe8>)
 800601c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800601e:	4b2f      	ldr	r3, [pc, #188]	@ (80060dc <xPortStartScheduler+0xec>)
 8006020:	2207      	movs	r2, #7
 8006022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006024:	e009      	b.n	800603a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006026:	4b2d      	ldr	r3, [pc, #180]	@ (80060dc <xPortStartScheduler+0xec>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3b01      	subs	r3, #1
 800602c:	4a2b      	ldr	r2, [pc, #172]	@ (80060dc <xPortStartScheduler+0xec>)
 800602e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	b2db      	uxtb	r3, r3
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	b2db      	uxtb	r3, r3
 8006038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800603a:	78fb      	ldrb	r3, [r7, #3]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006042:	2b80      	cmp	r3, #128	@ 0x80
 8006044:	d0ef      	beq.n	8006026 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006046:	4b25      	ldr	r3, [pc, #148]	@ (80060dc <xPortStartScheduler+0xec>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f1c3 0307 	rsb	r3, r3, #7
 800604e:	2b04      	cmp	r3, #4
 8006050:	d00d      	beq.n	800606e <xPortStartScheduler+0x7e>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	b672      	cpsid	i
 8006058:	f383 8811 	msr	BASEPRI, r3
 800605c:	f3bf 8f6f 	isb	sy
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	b662      	cpsie	i
 8006066:	60bb      	str	r3, [r7, #8]
}
 8006068:	bf00      	nop
 800606a:	bf00      	nop
 800606c:	e7fd      	b.n	800606a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800606e:	4b1b      	ldr	r3, [pc, #108]	@ (80060dc <xPortStartScheduler+0xec>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	4a19      	ldr	r2, [pc, #100]	@ (80060dc <xPortStartScheduler+0xec>)
 8006076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006078:	4b18      	ldr	r3, [pc, #96]	@ (80060dc <xPortStartScheduler+0xec>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006080:	4a16      	ldr	r2, [pc, #88]	@ (80060dc <xPortStartScheduler+0xec>)
 8006082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800608c:	4b14      	ldr	r3, [pc, #80]	@ (80060e0 <xPortStartScheduler+0xf0>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a13      	ldr	r2, [pc, #76]	@ (80060e0 <xPortStartScheduler+0xf0>)
 8006092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006098:	4b11      	ldr	r3, [pc, #68]	@ (80060e0 <xPortStartScheduler+0xf0>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a10      	ldr	r2, [pc, #64]	@ (80060e0 <xPortStartScheduler+0xf0>)
 800609e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80060a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80060a4:	f000 f8dc 	bl	8006260 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80060a8:	4b0e      	ldr	r3, [pc, #56]	@ (80060e4 <xPortStartScheduler+0xf4>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80060ae:	f000 f8fb 	bl	80062a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060b2:	4b0d      	ldr	r3, [pc, #52]	@ (80060e8 <xPortStartScheduler+0xf8>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a0c      	ldr	r2, [pc, #48]	@ (80060e8 <xPortStartScheduler+0xf8>)
 80060b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80060be:	f7ff ff83 	bl	8005fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80060c2:	f7fe fdb1 	bl	8004c28 <vTaskSwitchContext>
	prvTaskExitError();
 80060c6:	f7ff ff33 	bl	8005f30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000e400 	.word	0xe000e400
 80060d8:	20000eb4 	.word	0x20000eb4
 80060dc:	20000eb8 	.word	0x20000eb8
 80060e0:	e000ed20 	.word	0xe000ed20
 80060e4:	2000000c 	.word	0x2000000c
 80060e8:	e000ef34 	.word	0xe000ef34

080060ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f6:	b672      	cpsid	i
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	b662      	cpsie	i
 8006106:	607b      	str	r3, [r7, #4]
}
 8006108:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800610a:	4b11      	ldr	r3, [pc, #68]	@ (8006150 <vPortEnterCritical+0x64>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	3301      	adds	r3, #1
 8006110:	4a0f      	ldr	r2, [pc, #60]	@ (8006150 <vPortEnterCritical+0x64>)
 8006112:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006114:	4b0e      	ldr	r3, [pc, #56]	@ (8006150 <vPortEnterCritical+0x64>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d112      	bne.n	8006142 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800611c:	4b0d      	ldr	r3, [pc, #52]	@ (8006154 <vPortEnterCritical+0x68>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <vPortEnterCritical+0x56>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	b672      	cpsid	i
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	b662      	cpsie	i
 800613a:	603b      	str	r3, [r7, #0]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <vPortEnterCritical+0x52>
	}
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	2000000c 	.word	0x2000000c
 8006154:	e000ed04 	.word	0xe000ed04

08006158 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800615e:	4b13      	ldr	r3, [pc, #76]	@ (80061ac <vPortExitCritical+0x54>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <vPortExitCritical+0x2a>
	__asm volatile
 8006166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616a:	b672      	cpsid	i
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	b662      	cpsie	i
 800617a:	607b      	str	r3, [r7, #4]
}
 800617c:	bf00      	nop
 800617e:	bf00      	nop
 8006180:	e7fd      	b.n	800617e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006182:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <vPortExitCritical+0x54>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	3b01      	subs	r3, #1
 8006188:	4a08      	ldr	r2, [pc, #32]	@ (80061ac <vPortExitCritical+0x54>)
 800618a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800618c:	4b07      	ldr	r3, [pc, #28]	@ (80061ac <vPortExitCritical+0x54>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <vPortExitCritical+0x48>
 8006194:	2300      	movs	r3, #0
 8006196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	2000000c 	.word	0x2000000c

080061b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80061b0:	f3ef 8009 	mrs	r0, PSP
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	4b15      	ldr	r3, [pc, #84]	@ (8006210 <pxCurrentTCBConst>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	f01e 0f10 	tst.w	lr, #16
 80061c0:	bf08      	it	eq
 80061c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ca:	6010      	str	r0, [r2, #0]
 80061cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80061d4:	b672      	cpsid	i
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	f3bf 8f4f 	dsb	sy
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	b662      	cpsie	i
 80061e4:	f7fe fd20 	bl	8004c28 <vTaskSwitchContext>
 80061e8:	f04f 0000 	mov.w	r0, #0
 80061ec:	f380 8811 	msr	BASEPRI, r0
 80061f0:	bc09      	pop	{r0, r3}
 80061f2:	6819      	ldr	r1, [r3, #0]
 80061f4:	6808      	ldr	r0, [r1, #0]
 80061f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fa:	f01e 0f10 	tst.w	lr, #16
 80061fe:	bf08      	it	eq
 8006200:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006204:	f380 8809 	msr	PSP, r0
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop

08006210 <pxCurrentTCBConst>:
 8006210:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop

08006218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
	__asm volatile
 800621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006222:	b672      	cpsid	i
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	b662      	cpsie	i
 8006232:	607b      	str	r3, [r7, #4]
}
 8006234:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006236:	f7fe fc3b 	bl	8004ab0 <xTaskIncrementTick>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006240:	4b06      	ldr	r3, [pc, #24]	@ (800625c <xPortSysTickHandler+0x44>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	2300      	movs	r3, #0
 800624a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	f383 8811 	msr	BASEPRI, r3
}
 8006252:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006254:	bf00      	nop
 8006256:	3708      	adds	r7, #8
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006264:	4b0b      	ldr	r3, [pc, #44]	@ (8006294 <vPortSetupTimerInterrupt+0x34>)
 8006266:	2200      	movs	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800626a:	4b0b      	ldr	r3, [pc, #44]	@ (8006298 <vPortSetupTimerInterrupt+0x38>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006270:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <vPortSetupTimerInterrupt+0x3c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0a      	ldr	r2, [pc, #40]	@ (80062a0 <vPortSetupTimerInterrupt+0x40>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	099b      	lsrs	r3, r3, #6
 800627c:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <vPortSetupTimerInterrupt+0x44>)
 800627e:	3b01      	subs	r3, #1
 8006280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006282:	4b04      	ldr	r3, [pc, #16]	@ (8006294 <vPortSetupTimerInterrupt+0x34>)
 8006284:	2207      	movs	r2, #7
 8006286:	601a      	str	r2, [r3, #0]
}
 8006288:	bf00      	nop
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	e000e010 	.word	0xe000e010
 8006298:	e000e018 	.word	0xe000e018
 800629c:	20000000 	.word	0x20000000
 80062a0:	10624dd3 	.word	0x10624dd3
 80062a4:	e000e014 	.word	0xe000e014

080062a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80062a8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062b8 <vPortEnableVFP+0x10>
 80062ac:	6801      	ldr	r1, [r0, #0]
 80062ae:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062b2:	6001      	str	r1, [r0, #0]
 80062b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80062b6:	bf00      	nop
 80062b8:	e000ed88 	.word	0xe000ed88

080062bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80062c2:	f3ef 8305 	mrs	r3, IPSR
 80062c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2b0f      	cmp	r3, #15
 80062cc:	d917      	bls.n	80062fe <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006338 <vPortValidateInterruptPriority+0x7c>)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062d8:	4b18      	ldr	r3, [pc, #96]	@ (800633c <vPortValidateInterruptPriority+0x80>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	7afa      	ldrb	r2, [r7, #11]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d20d      	bcs.n	80062fe <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e6:	b672      	cpsid	i
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	b662      	cpsie	i
 80062f6:	607b      	str	r3, [r7, #4]
}
 80062f8:	bf00      	nop
 80062fa:	bf00      	nop
 80062fc:	e7fd      	b.n	80062fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062fe:	4b10      	ldr	r3, [pc, #64]	@ (8006340 <vPortValidateInterruptPriority+0x84>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <vPortValidateInterruptPriority+0x88>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d90d      	bls.n	800632a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800630e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006312:	b672      	cpsid	i
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	b662      	cpsie	i
 8006322:	603b      	str	r3, [r7, #0]
}
 8006324:	bf00      	nop
 8006326:	bf00      	nop
 8006328:	e7fd      	b.n	8006326 <vPortValidateInterruptPriority+0x6a>
	}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	e000e3f0 	.word	0xe000e3f0
 800633c:	20000eb4 	.word	0x20000eb4
 8006340:	e000ed0c 	.word	0xe000ed0c
 8006344:	20000eb8 	.word	0x20000eb8

08006348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006354:	f7fe faee 	bl	8004934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006358:	4b5d      	ldr	r3, [pc, #372]	@ (80064d0 <pvPortMalloc+0x188>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006360:	f000 f920 	bl	80065a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006364:	4b5b      	ldr	r3, [pc, #364]	@ (80064d4 <pvPortMalloc+0x18c>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	f040 8094 	bne.w	800649a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d020      	beq.n	80063ba <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006378:	2208      	movs	r2, #8
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4413      	add	r3, r2
 800637e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	2b00      	cmp	r3, #0
 8006388:	d017      	beq.n	80063ba <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f023 0307 	bic.w	r3, r3, #7
 8006390:	3308      	adds	r3, #8
 8006392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0307 	and.w	r3, r3, #7
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00d      	beq.n	80063ba <pvPortMalloc+0x72>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	b672      	cpsid	i
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	b662      	cpsie	i
 80063b2:	617b      	str	r3, [r7, #20]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d06c      	beq.n	800649a <pvPortMalloc+0x152>
 80063c0:	4b45      	ldr	r3, [pc, #276]	@ (80064d8 <pvPortMalloc+0x190>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d867      	bhi.n	800649a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80063ca:	4b44      	ldr	r3, [pc, #272]	@ (80064dc <pvPortMalloc+0x194>)
 80063cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80063ce:	4b43      	ldr	r3, [pc, #268]	@ (80064dc <pvPortMalloc+0x194>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063d4:	e004      	b.n	80063e0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80063d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80063da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d903      	bls.n	80063f2 <pvPortMalloc+0xaa>
 80063ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1f1      	bne.n	80063d6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063f2:	4b37      	ldr	r3, [pc, #220]	@ (80064d0 <pvPortMalloc+0x188>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d04e      	beq.n	800649a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2208      	movs	r2, #8
 8006402:	4413      	add	r3, r2
 8006404:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	2308      	movs	r3, #8
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	d922      	bls.n	8006464 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800641e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	2b00      	cmp	r3, #0
 800642e:	d00d      	beq.n	800644c <pvPortMalloc+0x104>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006434:	b672      	cpsid	i
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	b662      	cpsie	i
 8006444:	613b      	str	r3, [r7, #16]
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	e7fd      	b.n	8006448 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	1ad2      	subs	r2, r2, r3
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800645e:	69b8      	ldr	r0, [r7, #24]
 8006460:	f000 f902 	bl	8006668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006464:	4b1c      	ldr	r3, [pc, #112]	@ (80064d8 <pvPortMalloc+0x190>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	4a1a      	ldr	r2, [pc, #104]	@ (80064d8 <pvPortMalloc+0x190>)
 8006470:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006472:	4b19      	ldr	r3, [pc, #100]	@ (80064d8 <pvPortMalloc+0x190>)
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	4b1a      	ldr	r3, [pc, #104]	@ (80064e0 <pvPortMalloc+0x198>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d203      	bcs.n	8006486 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800647e:	4b16      	ldr	r3, [pc, #88]	@ (80064d8 <pvPortMalloc+0x190>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a17      	ldr	r2, [pc, #92]	@ (80064e0 <pvPortMalloc+0x198>)
 8006484:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	4b12      	ldr	r3, [pc, #72]	@ (80064d4 <pvPortMalloc+0x18c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	431a      	orrs	r2, r3
 8006490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006492:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800649a:	f7fe fa59 	bl	8004950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	f003 0307 	and.w	r3, r3, #7
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00d      	beq.n	80064c4 <pvPortMalloc+0x17c>
	__asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	b672      	cpsid	i
 80064ae:	f383 8811 	msr	BASEPRI, r3
 80064b2:	f3bf 8f6f 	isb	sy
 80064b6:	f3bf 8f4f 	dsb	sy
 80064ba:	b662      	cpsie	i
 80064bc:	60fb      	str	r3, [r7, #12]
}
 80064be:	bf00      	nop
 80064c0:	bf00      	nop
 80064c2:	e7fd      	b.n	80064c0 <pvPortMalloc+0x178>
	return pvReturn;
 80064c4:	69fb      	ldr	r3, [r7, #28]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3728      	adds	r7, #40	@ 0x28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20004ac4 	.word	0x20004ac4
 80064d4:	20004ad0 	.word	0x20004ad0
 80064d8:	20004ac8 	.word	0x20004ac8
 80064dc:	20004abc 	.word	0x20004abc
 80064e0:	20004acc 	.word	0x20004acc

080064e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d04e      	beq.n	8006594 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064f6:	2308      	movs	r3, #8
 80064f8:	425b      	negs	r3, r3
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	685a      	ldr	r2, [r3, #4]
 8006508:	4b24      	ldr	r3, [pc, #144]	@ (800659c <vPortFree+0xb8>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4013      	ands	r3, r2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10d      	bne.n	800652e <vPortFree+0x4a>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	b672      	cpsid	i
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	b662      	cpsie	i
 8006526:	60fb      	str	r3, [r7, #12]
}
 8006528:	bf00      	nop
 800652a:	bf00      	nop
 800652c:	e7fd      	b.n	800652a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00d      	beq.n	8006552 <vPortFree+0x6e>
	__asm volatile
 8006536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653a:	b672      	cpsid	i
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	b662      	cpsie	i
 800654a:	60bb      	str	r3, [r7, #8]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	685a      	ldr	r2, [r3, #4]
 8006556:	4b11      	ldr	r3, [pc, #68]	@ (800659c <vPortFree+0xb8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d019      	beq.n	8006594 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d115      	bne.n	8006594 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	4b0b      	ldr	r3, [pc, #44]	@ (800659c <vPortFree+0xb8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	43db      	mvns	r3, r3
 8006572:	401a      	ands	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006578:	f7fe f9dc 	bl	8004934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	685a      	ldr	r2, [r3, #4]
 8006580:	4b07      	ldr	r3, [pc, #28]	@ (80065a0 <vPortFree+0xbc>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4413      	add	r3, r2
 8006586:	4a06      	ldr	r2, [pc, #24]	@ (80065a0 <vPortFree+0xbc>)
 8006588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800658a:	6938      	ldr	r0, [r7, #16]
 800658c:	f000 f86c 	bl	8006668 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006590:	f7fe f9de 	bl	8004950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006594:	bf00      	nop
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20004ad0 	.word	0x20004ad0
 80065a0:	20004ac8 	.word	0x20004ac8

080065a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065aa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80065ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80065b0:	4b27      	ldr	r3, [pc, #156]	@ (8006650 <prvHeapInit+0xac>)
 80065b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0307 	and.w	r3, r3, #7
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00c      	beq.n	80065d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3307      	adds	r3, #7
 80065c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 0307 	bic.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006650 <prvHeapInit+0xac>)
 80065d4:	4413      	add	r3, r2
 80065d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80065dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006654 <prvHeapInit+0xb0>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <prvHeapInit+0xb0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	4413      	add	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065f0:	2208      	movs	r2, #8
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0307 	bic.w	r3, r3, #7
 80065fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4a15      	ldr	r2, [pc, #84]	@ (8006658 <prvHeapInit+0xb4>)
 8006604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006606:	4b14      	ldr	r3, [pc, #80]	@ (8006658 <prvHeapInit+0xb4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2200      	movs	r2, #0
 800660c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800660e:	4b12      	ldr	r3, [pc, #72]	@ (8006658 <prvHeapInit+0xb4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	1ad2      	subs	r2, r2, r3
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006624:	4b0c      	ldr	r3, [pc, #48]	@ (8006658 <prvHeapInit+0xb4>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a0a      	ldr	r2, [pc, #40]	@ (800665c <prvHeapInit+0xb8>)
 8006632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	4a09      	ldr	r2, [pc, #36]	@ (8006660 <prvHeapInit+0xbc>)
 800663a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800663c:	4b09      	ldr	r3, [pc, #36]	@ (8006664 <prvHeapInit+0xc0>)
 800663e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006642:	601a      	str	r2, [r3, #0]
}
 8006644:	bf00      	nop
 8006646:	3714      	adds	r7, #20
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr
 8006650:	20000ebc 	.word	0x20000ebc
 8006654:	20004abc 	.word	0x20004abc
 8006658:	20004ac4 	.word	0x20004ac4
 800665c:	20004acc 	.word	0x20004acc
 8006660:	20004ac8 	.word	0x20004ac8
 8006664:	20004ad0 	.word	0x20004ad0

08006668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006670:	4b28      	ldr	r3, [pc, #160]	@ (8006714 <prvInsertBlockIntoFreeList+0xac>)
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e002      	b.n	800667c <prvInsertBlockIntoFreeList+0x14>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	429a      	cmp	r2, r3
 8006684:	d8f7      	bhi.n	8006676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	4413      	add	r3, r2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d108      	bne.n	80066aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	441a      	add	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	441a      	add	r2, r3
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d118      	bne.n	80066f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b15      	ldr	r3, [pc, #84]	@ (8006718 <prvInsertBlockIntoFreeList+0xb0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d00d      	beq.n	80066e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685a      	ldr	r2, [r3, #4]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	441a      	add	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e008      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006718 <prvInsertBlockIntoFreeList+0xb0>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e003      	b.n	80066f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066f8:	68fa      	ldr	r2, [r7, #12]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d002      	beq.n	8006706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006706:	bf00      	nop
 8006708:	3714      	adds	r7, #20
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20004abc 	.word	0x20004abc
 8006718:	20004ac4 	.word	0x20004ac4

0800671c <memset>:
 800671c:	4402      	add	r2, r0
 800671e:	4603      	mov	r3, r0
 8006720:	4293      	cmp	r3, r2
 8006722:	d100      	bne.n	8006726 <memset+0xa>
 8006724:	4770      	bx	lr
 8006726:	f803 1b01 	strb.w	r1, [r3], #1
 800672a:	e7f9      	b.n	8006720 <memset+0x4>

0800672c <_reclaim_reent>:
 800672c:	4b2d      	ldr	r3, [pc, #180]	@ (80067e4 <_reclaim_reent+0xb8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4283      	cmp	r3, r0
 8006732:	b570      	push	{r4, r5, r6, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	d053      	beq.n	80067e0 <_reclaim_reent+0xb4>
 8006738:	69c3      	ldr	r3, [r0, #28]
 800673a:	b31b      	cbz	r3, 8006784 <_reclaim_reent+0x58>
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	b163      	cbz	r3, 800675a <_reclaim_reent+0x2e>
 8006740:	2500      	movs	r5, #0
 8006742:	69e3      	ldr	r3, [r4, #28]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	5959      	ldr	r1, [r3, r5]
 8006748:	b9b1      	cbnz	r1, 8006778 <_reclaim_reent+0x4c>
 800674a:	3504      	adds	r5, #4
 800674c:	2d80      	cmp	r5, #128	@ 0x80
 800674e:	d1f8      	bne.n	8006742 <_reclaim_reent+0x16>
 8006750:	69e3      	ldr	r3, [r4, #28]
 8006752:	4620      	mov	r0, r4
 8006754:	68d9      	ldr	r1, [r3, #12]
 8006756:	f000 f87b 	bl	8006850 <_free_r>
 800675a:	69e3      	ldr	r3, [r4, #28]
 800675c:	6819      	ldr	r1, [r3, #0]
 800675e:	b111      	cbz	r1, 8006766 <_reclaim_reent+0x3a>
 8006760:	4620      	mov	r0, r4
 8006762:	f000 f875 	bl	8006850 <_free_r>
 8006766:	69e3      	ldr	r3, [r4, #28]
 8006768:	689d      	ldr	r5, [r3, #8]
 800676a:	b15d      	cbz	r5, 8006784 <_reclaim_reent+0x58>
 800676c:	4629      	mov	r1, r5
 800676e:	4620      	mov	r0, r4
 8006770:	682d      	ldr	r5, [r5, #0]
 8006772:	f000 f86d 	bl	8006850 <_free_r>
 8006776:	e7f8      	b.n	800676a <_reclaim_reent+0x3e>
 8006778:	680e      	ldr	r6, [r1, #0]
 800677a:	4620      	mov	r0, r4
 800677c:	f000 f868 	bl	8006850 <_free_r>
 8006780:	4631      	mov	r1, r6
 8006782:	e7e1      	b.n	8006748 <_reclaim_reent+0x1c>
 8006784:	6961      	ldr	r1, [r4, #20]
 8006786:	b111      	cbz	r1, 800678e <_reclaim_reent+0x62>
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f861 	bl	8006850 <_free_r>
 800678e:	69e1      	ldr	r1, [r4, #28]
 8006790:	b111      	cbz	r1, 8006798 <_reclaim_reent+0x6c>
 8006792:	4620      	mov	r0, r4
 8006794:	f000 f85c 	bl	8006850 <_free_r>
 8006798:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800679a:	b111      	cbz	r1, 80067a2 <_reclaim_reent+0x76>
 800679c:	4620      	mov	r0, r4
 800679e:	f000 f857 	bl	8006850 <_free_r>
 80067a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067a4:	b111      	cbz	r1, 80067ac <_reclaim_reent+0x80>
 80067a6:	4620      	mov	r0, r4
 80067a8:	f000 f852 	bl	8006850 <_free_r>
 80067ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80067ae:	b111      	cbz	r1, 80067b6 <_reclaim_reent+0x8a>
 80067b0:	4620      	mov	r0, r4
 80067b2:	f000 f84d 	bl	8006850 <_free_r>
 80067b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80067b8:	b111      	cbz	r1, 80067c0 <_reclaim_reent+0x94>
 80067ba:	4620      	mov	r0, r4
 80067bc:	f000 f848 	bl	8006850 <_free_r>
 80067c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80067c2:	b111      	cbz	r1, 80067ca <_reclaim_reent+0x9e>
 80067c4:	4620      	mov	r0, r4
 80067c6:	f000 f843 	bl	8006850 <_free_r>
 80067ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80067cc:	b111      	cbz	r1, 80067d4 <_reclaim_reent+0xa8>
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f83e 	bl	8006850 <_free_r>
 80067d4:	6a23      	ldr	r3, [r4, #32]
 80067d6:	b11b      	cbz	r3, 80067e0 <_reclaim_reent+0xb4>
 80067d8:	4620      	mov	r0, r4
 80067da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80067de:	4718      	bx	r3
 80067e0:	bd70      	pop	{r4, r5, r6, pc}
 80067e2:	bf00      	nop
 80067e4:	20000010 	.word	0x20000010

080067e8 <__libc_init_array>:
 80067e8:	b570      	push	{r4, r5, r6, lr}
 80067ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006820 <__libc_init_array+0x38>)
 80067ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006824 <__libc_init_array+0x3c>)
 80067ee:	1b64      	subs	r4, r4, r5
 80067f0:	10a4      	asrs	r4, r4, #2
 80067f2:	2600      	movs	r6, #0
 80067f4:	42a6      	cmp	r6, r4
 80067f6:	d109      	bne.n	800680c <__libc_init_array+0x24>
 80067f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006828 <__libc_init_array+0x40>)
 80067fa:	4c0c      	ldr	r4, [pc, #48]	@ (800682c <__libc_init_array+0x44>)
 80067fc:	f000 f87e 	bl	80068fc <_init>
 8006800:	1b64      	subs	r4, r4, r5
 8006802:	10a4      	asrs	r4, r4, #2
 8006804:	2600      	movs	r6, #0
 8006806:	42a6      	cmp	r6, r4
 8006808:	d105      	bne.n	8006816 <__libc_init_array+0x2e>
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006810:	4798      	blx	r3
 8006812:	3601      	adds	r6, #1
 8006814:	e7ee      	b.n	80067f4 <__libc_init_array+0xc>
 8006816:	f855 3b04 	ldr.w	r3, [r5], #4
 800681a:	4798      	blx	r3
 800681c:	3601      	adds	r6, #1
 800681e:	e7f2      	b.n	8006806 <__libc_init_array+0x1e>
 8006820:	08006994 	.word	0x08006994
 8006824:	08006994 	.word	0x08006994
 8006828:	08006994 	.word	0x08006994
 800682c:	08006998 	.word	0x08006998

08006830 <__retarget_lock_acquire_recursive>:
 8006830:	4770      	bx	lr

08006832 <__retarget_lock_release_recursive>:
 8006832:	4770      	bx	lr

08006834 <memcpy>:
 8006834:	440a      	add	r2, r1
 8006836:	4291      	cmp	r1, r2
 8006838:	f100 33ff 	add.w	r3, r0, #4294967295
 800683c:	d100      	bne.n	8006840 <memcpy+0xc>
 800683e:	4770      	bx	lr
 8006840:	b510      	push	{r4, lr}
 8006842:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800684a:	4291      	cmp	r1, r2
 800684c:	d1f9      	bne.n	8006842 <memcpy+0xe>
 800684e:	bd10      	pop	{r4, pc}

08006850 <_free_r>:
 8006850:	b538      	push	{r3, r4, r5, lr}
 8006852:	4605      	mov	r5, r0
 8006854:	2900      	cmp	r1, #0
 8006856:	d041      	beq.n	80068dc <_free_r+0x8c>
 8006858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685c:	1f0c      	subs	r4, r1, #4
 800685e:	2b00      	cmp	r3, #0
 8006860:	bfb8      	it	lt
 8006862:	18e4      	addlt	r4, r4, r3
 8006864:	f000 f83e 	bl	80068e4 <__malloc_lock>
 8006868:	4a1d      	ldr	r2, [pc, #116]	@ (80068e0 <_free_r+0x90>)
 800686a:	6813      	ldr	r3, [r2, #0]
 800686c:	b933      	cbnz	r3, 800687c <_free_r+0x2c>
 800686e:	6063      	str	r3, [r4, #4]
 8006870:	6014      	str	r4, [r2, #0]
 8006872:	4628      	mov	r0, r5
 8006874:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006878:	f000 b83a 	b.w	80068f0 <__malloc_unlock>
 800687c:	42a3      	cmp	r3, r4
 800687e:	d908      	bls.n	8006892 <_free_r+0x42>
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	1821      	adds	r1, r4, r0
 8006884:	428b      	cmp	r3, r1
 8006886:	bf01      	itttt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	1809      	addeq	r1, r1, r0
 800688e:	6021      	streq	r1, [r4, #0]
 8006890:	e7ed      	b.n	800686e <_free_r+0x1e>
 8006892:	461a      	mov	r2, r3
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b10b      	cbz	r3, 800689c <_free_r+0x4c>
 8006898:	42a3      	cmp	r3, r4
 800689a:	d9fa      	bls.n	8006892 <_free_r+0x42>
 800689c:	6811      	ldr	r1, [r2, #0]
 800689e:	1850      	adds	r0, r2, r1
 80068a0:	42a0      	cmp	r0, r4
 80068a2:	d10b      	bne.n	80068bc <_free_r+0x6c>
 80068a4:	6820      	ldr	r0, [r4, #0]
 80068a6:	4401      	add	r1, r0
 80068a8:	1850      	adds	r0, r2, r1
 80068aa:	4283      	cmp	r3, r0
 80068ac:	6011      	str	r1, [r2, #0]
 80068ae:	d1e0      	bne.n	8006872 <_free_r+0x22>
 80068b0:	6818      	ldr	r0, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	6053      	str	r3, [r2, #4]
 80068b6:	4408      	add	r0, r1
 80068b8:	6010      	str	r0, [r2, #0]
 80068ba:	e7da      	b.n	8006872 <_free_r+0x22>
 80068bc:	d902      	bls.n	80068c4 <_free_r+0x74>
 80068be:	230c      	movs	r3, #12
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	e7d6      	b.n	8006872 <_free_r+0x22>
 80068c4:	6820      	ldr	r0, [r4, #0]
 80068c6:	1821      	adds	r1, r4, r0
 80068c8:	428b      	cmp	r3, r1
 80068ca:	bf04      	itt	eq
 80068cc:	6819      	ldreq	r1, [r3, #0]
 80068ce:	685b      	ldreq	r3, [r3, #4]
 80068d0:	6063      	str	r3, [r4, #4]
 80068d2:	bf04      	itt	eq
 80068d4:	1809      	addeq	r1, r1, r0
 80068d6:	6021      	streq	r1, [r4, #0]
 80068d8:	6054      	str	r4, [r2, #4]
 80068da:	e7ca      	b.n	8006872 <_free_r+0x22>
 80068dc:	bd38      	pop	{r3, r4, r5, pc}
 80068de:	bf00      	nop
 80068e0:	20004c10 	.word	0x20004c10

080068e4 <__malloc_lock>:
 80068e4:	4801      	ldr	r0, [pc, #4]	@ (80068ec <__malloc_lock+0x8>)
 80068e6:	f7ff bfa3 	b.w	8006830 <__retarget_lock_acquire_recursive>
 80068ea:	bf00      	nop
 80068ec:	20004c0c 	.word	0x20004c0c

080068f0 <__malloc_unlock>:
 80068f0:	4801      	ldr	r0, [pc, #4]	@ (80068f8 <__malloc_unlock+0x8>)
 80068f2:	f7ff bf9e 	b.w	8006832 <__retarget_lock_release_recursive>
 80068f6:	bf00      	nop
 80068f8:	20004c0c 	.word	0x20004c0c

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
