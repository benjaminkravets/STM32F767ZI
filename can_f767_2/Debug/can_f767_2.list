
can_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006454  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08006654  08006654  00007654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066cc  080066cc  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d4  080066d4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080066dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb8  20000060  0800673c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004c18  0800673c  00008c18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b48  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efd  00000000  00000000  0001abd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001dad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae8  00000000  00000000  0001e938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fed  00000000  00000000  0001f420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107bf  00000000  00000000  0002240d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f8dd3  00000000  00000000  00032bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012b99f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  0012b9e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0012f774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	0800663c 	.word	0x0800663c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	0800663c 	.word	0x0800663c

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint32_t TxMailbox;


//9.2.7 Rx FIFO 0 message pending callback.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000538:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800053a:	4a0b      	ldr	r2, [pc, #44]	@ (8000568 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800053c:	2100      	movs	r1, #0
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f000 ff60 	bl	8001404 <HAL_CAN_GetRxMessage>
	size_t sent = xStreamBufferSendFromISR(xStreamBuffer0, RxData, 8, NULL);
 8000544:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000546:	6818      	ldr	r0, [r3, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	2208      	movs	r2, #8
 800054c:	4905      	ldr	r1, [pc, #20]	@ (8000564 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800054e:	f003 fb54 	bl	8003bfa <xStreamBufferSendFromISR>
 8000552:	60f8      	str	r0, [r7, #12]
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000554:	2101      	movs	r1, #1
 8000556:	4806      	ldr	r0, [pc, #24]	@ (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000558:	f001 fda3 	bl	80020a2 <HAL_GPIO_TogglePin>
}
 800055c:	bf00      	nop
 800055e:	3710      	adds	r7, #16
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000e0 	.word	0x200000e0
 8000568:	200000a8 	.word	0x200000a8
 800056c:	200000e8 	.word	0x200000e8
 8000570:	40020400 	.word	0x40020400

08000574 <CanReceiverTask>:

static void CanReceiverTask() {
 8000574:	b580      	push	{r7, lr}
 8000576:	b092      	sub	sp, #72	@ 0x48
 8000578:	af00      	add	r7, sp, #0
	uint8_t RxDataToProcess[64];
	uint32_t received = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t sent = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	643b      	str	r3, [r7, #64]	@ 0x40
	for (;;) {
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 8000582:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <CanReceiverTask+0x5c>)
 8000584:	6818      	ldr	r0, [r3, #0]
 8000586:	463a      	mov	r2, r7
 8000588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800058a:	18d1      	adds	r1, r2, r3
 800058c:	f04f 33ff 	mov.w	r3, #4294967295
 8000590:	2208      	movs	r2, #8
 8000592:	f003 fbe8 	bl	8003d66 <xStreamBufferReceive>
 8000596:	4602      	mov	r2, r0
 8000598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800059a:	4413      	add	r3, r2
 800059c:	647b      	str	r3, [r7, #68]	@ 0x44
		if (received == 64) {
 800059e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80005a0:	2b40      	cmp	r3, #64	@ 0x40
 80005a2:	d1ee      	bne.n	8000582 <CanReceiverTask+0xe>
			sent = xStreamBufferSend(xStreamBuffer1, RxDataToProcess, 64, 0);
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <CanReceiverTask+0x60>)
 80005a6:	6818      	ldr	r0, [r3, #0]
 80005a8:	4639      	mov	r1, r7
 80005aa:	2300      	movs	r3, #0
 80005ac:	2240      	movs	r2, #64	@ 0x40
 80005ae:	f003 fa63 	bl	8003a78 <xStreamBufferSend>
 80005b2:	6438      	str	r0, [r7, #64]	@ 0x40
			memset(RxDataToProcess, 0, 64);
 80005b4:	463b      	mov	r3, r7
 80005b6:	2240      	movs	r2, #64	@ 0x40
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 ff56 	bl	800646c <memset>
			received = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	647b      	str	r3, [r7, #68]	@ 0x44
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005c4:	2180      	movs	r1, #128	@ 0x80
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <CanReceiverTask+0x64>)
 80005c8:	f001 fd6b 	bl	80020a2 <HAL_GPIO_TogglePin>
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 80005cc:	e7d9      	b.n	8000582 <CanReceiverTask+0xe>
 80005ce:	bf00      	nop
 80005d0:	200000e8 	.word	0x200000e8
 80005d4:	200000ec 	.word	0x200000ec
 80005d8:	40020400 	.word	0x40020400

080005dc <CanSenderTask>:

		}
	}
}

static void CanSenderTask() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
	uint8_t DataToSend[8];
	uint8_t received = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]

	TxHeader.DLC;
	TxHeader.IDE = CAN_ID_STD;		// use 11 bit identifier
 80005e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000620 <CanSenderTask+0x44>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <CanSenderTask+0x44>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x123;			// ID
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <CanSenderTask+0x44>)
 80005f4:	f240 1223 	movw	r2, #291	@ 0x123
 80005f8:	601a      	str	r2, [r3, #0]
	while(1) {
		received = xStreamBufferReceive(xStreamBuffer1, DataToSend, 8, portMAX_DELAY);
 80005fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <CanSenderTask+0x48>)
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	1d39      	adds	r1, r7, #4
 8000600:	f04f 33ff 	mov.w	r3, #4294967295
 8000604:	2208      	movs	r2, #8
 8000606:	f003 fbae 	bl	8003d66 <xStreamBufferReceive>
 800060a:	4603      	mov	r3, r0
 800060c:	73fb      	strb	r3, [r7, #15]
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, DataToSend, &TxMailbox);
 800060e:	1d3a      	adds	r2, r7, #4
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <CanSenderTask+0x4c>)
 8000612:	4903      	ldr	r1, [pc, #12]	@ (8000620 <CanSenderTask+0x44>)
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <CanSenderTask+0x50>)
 8000616:	f000 fe25 	bl	8001264 <HAL_CAN_AddTxMessage>
		received = xStreamBufferReceive(xStreamBuffer1, DataToSend, 8, portMAX_DELAY);
 800061a:	bf00      	nop
 800061c:	e7ed      	b.n	80005fa <CanSenderTask+0x1e>
 800061e:	bf00      	nop
 8000620:	200000c4 	.word	0x200000c4
 8000624:	200000ec 	.word	0x200000ec
 8000628:	200000f0 	.word	0x200000f0
 800062c:	2000007c 	.word	0x2000007c

08000630 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000636:	f000 fb8c 	bl	8000d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063a:	f000 f899 	bl	8000770 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800063e:	f000 f95b 	bl	80008f8 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000642:	f000 f905 	bl	8000850 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000646:	4840      	ldr	r0, [pc, #256]	@ (8000748 <main+0x118>)
 8000648:	f000 fdc8 	bl	80011dc <HAL_CAN_Start>
  //from HAL SDK docs 9.2.1, argument from 9.3.1
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800064c:	2102      	movs	r1, #2
 800064e:	483e      	ldr	r0, [pc, #248]	@ (8000748 <main+0x118>)
 8000650:	f000 fffa 	bl	8001648 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f002 fa36 	bl	8002ac4 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	xStreamBuffer0 = xStreamBufferCreate(RECEIVE_BUFFER_LENGTH, 1);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	200a      	movs	r0, #10
 800065e:	f003 f971 	bl	8003944 <xStreamBufferGenericCreate>
 8000662:	4603      	mov	r3, r0
 8000664:	4a39      	ldr	r2, [pc, #228]	@ (800074c <main+0x11c>)
 8000666:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer0);
 8000668:	4b38      	ldr	r3, [pc, #224]	@ (800074c <main+0x11c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d10d      	bne.n	800068c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000674:	b672      	cpsid	i
 8000676:	f383 8811 	msr	BASEPRI, r3
 800067a:	f3bf 8f6f 	isb	sy
 800067e:	f3bf 8f4f 	dsb	sy
 8000682:	b662      	cpsie	i
 8000684:	60fb      	str	r3, [r7, #12]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	e7fd      	b.n	8000688 <main+0x58>
	xStreamBuffer1 = xStreamBufferCreate(SEND_BUFFER_LENGTH, 1);
 800068c:	2200      	movs	r2, #0
 800068e:	2101      	movs	r1, #1
 8000690:	2040      	movs	r0, #64	@ 0x40
 8000692:	f003 f957 	bl	8003944 <xStreamBufferGenericCreate>
 8000696:	4603      	mov	r3, r0
 8000698:	4a2d      	ldr	r2, [pc, #180]	@ (8000750 <main+0x120>)
 800069a:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer1);
 800069c:	4b2c      	ldr	r3, [pc, #176]	@ (8000750 <main+0x120>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d10d      	bne.n	80006c0 <main+0x90>
	__asm volatile
 80006a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006a8:	b672      	cpsid	i
 80006aa:	f383 8811 	msr	BASEPRI, r3
 80006ae:	f3bf 8f6f 	isb	sy
 80006b2:	f3bf 8f4f 	dsb	sy
 80006b6:	b662      	cpsie	i
 80006b8:	60bb      	str	r3, [r7, #8]
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <main+0x8c>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006c0:	4a24      	ldr	r2, [pc, #144]	@ (8000754 <main+0x124>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	4824      	ldr	r0, [pc, #144]	@ (8000758 <main+0x128>)
 80006c6:	f002 fa67 	bl	8002b98 <osThreadNew>
 80006ca:	4603      	mov	r3, r0
 80006cc:	4a23      	ldr	r2, [pc, #140]	@ (800075c <main+0x12c>)
 80006ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	configASSERT(pdPASS == xTaskCreate(CanReceiverTask, "CanReceiverTask", 128 * 4, NULL,
 80006d0:	2300      	movs	r3, #0
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9300      	str	r3, [sp, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006de:	4920      	ldr	r1, [pc, #128]	@ (8000760 <main+0x130>)
 80006e0:	4820      	ldr	r0, [pc, #128]	@ (8000764 <main+0x134>)
 80006e2:	f003 fdca 	bl	800427a <xTaskCreate>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d00d      	beq.n	8000708 <main+0xd8>
	__asm volatile
 80006ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f0:	b672      	cpsid	i
 80006f2:	f383 8811 	msr	BASEPRI, r3
 80006f6:	f3bf 8f6f 	isb	sy
 80006fa:	f3bf 8f4f 	dsb	sy
 80006fe:	b662      	cpsie	i
 8000700:	607b      	str	r3, [r7, #4]
}
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <main+0xd4>
			tskIDLE_PRIORITY + 1, NULL));

	configASSERT(pdPASS == xTaskCreate(CanSenderTask, "CanSenderTask", 128 * 4, NULL,
 8000708:	2300      	movs	r3, #0
 800070a:	9301      	str	r3, [sp, #4]
 800070c:	2301      	movs	r3, #1
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	2300      	movs	r3, #0
 8000712:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000716:	4914      	ldr	r1, [pc, #80]	@ (8000768 <main+0x138>)
 8000718:	4814      	ldr	r0, [pc, #80]	@ (800076c <main+0x13c>)
 800071a:	f003 fdae 	bl	800427a <xTaskCreate>
 800071e:	4603      	mov	r3, r0
 8000720:	2b01      	cmp	r3, #1
 8000722:	d00d      	beq.n	8000740 <main+0x110>
	__asm volatile
 8000724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000728:	b672      	cpsid	i
 800072a:	f383 8811 	msr	BASEPRI, r3
 800072e:	f3bf 8f6f 	isb	sy
 8000732:	f3bf 8f4f 	dsb	sy
 8000736:	b662      	cpsie	i
 8000738:	603b      	str	r3, [r7, #0]
}
 800073a:	bf00      	nop
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <main+0x10c>
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000740:	f002 f9f4 	bl	8002b2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <main+0x114>
 8000748:	2000007c 	.word	0x2000007c
 800074c:	200000e8 	.word	0x200000e8
 8000750:	200000ec 	.word	0x200000ec
 8000754:	08006698 	.word	0x08006698
 8000758:	08000b4d 	.word	0x08000b4d
 800075c:	200000a4 	.word	0x200000a4
 8000760:	08006660 	.word	0x08006660
 8000764:	08000575 	.word	0x08000575
 8000768:	08006670 	.word	0x08006670
 800076c:	080005dd 	.word	0x080005dd

08000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b094      	sub	sp, #80	@ 0x50
 8000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2234      	movs	r2, #52	@ 0x34
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f005 fe74 	bl	800646c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000794:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <SystemClock_Config+0xd8>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a2b      	ldr	r2, [pc, #172]	@ (8000848 <SystemClock_Config+0xd8>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a0:	4b29      	ldr	r3, [pc, #164]	@ (8000848 <SystemClock_Config+0xd8>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007ac:	4b27      	ldr	r3, [pc, #156]	@ (800084c <SystemClock_Config+0xdc>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007b4:	4a25      	ldr	r2, [pc, #148]	@ (800084c <SystemClock_Config+0xdc>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b23      	ldr	r3, [pc, #140]	@ (800084c <SystemClock_Config+0xdc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d4:	2302      	movs	r3, #2
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007dc:	2308      	movs	r3, #8
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007e0:	23c0      	movs	r3, #192	@ 0xc0
 80007e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007e4:	2304      	movs	r3, #4
 80007e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ec:	2302      	movs	r3, #2
 80007ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 031c 	add.w	r3, r7, #28
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 fcbf 	bl	8002178 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000800:	f000 f9ac 	bl	8000b5c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000804:	f001 fc68 	bl	80020d8 <HAL_PWREx_EnableOverDrive>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800080e:	f000 f9a5 	bl	8000b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2302      	movs	r3, #2
 8000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000822:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000828:	f107 0308 	add.w	r3, r7, #8
 800082c:	2103      	movs	r1, #3
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff50 	bl	80026d4 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800083a:	f000 f98f 	bl	8000b5c <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08a      	sub	sp, #40	@ 0x28
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000856:	4b26      	ldr	r3, [pc, #152]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000858:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <MX_CAN1_Init+0xa4>)
 800085a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 800085c:	4b24      	ldr	r3, [pc, #144]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 800085e:	2220      	movs	r2, #32
 8000860:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000862:	4b23      	ldr	r3, [pc, #140]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000868:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 800086e:	4b20      	ldr	r3, [pc, #128]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000870:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000874:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 8000876:	4b1e      	ldr	r3, [pc, #120]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000878:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 800087c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800087e:	4b1c      	ldr	r3, [pc, #112]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000880:	2200      	movs	r2, #0
 8000882:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000884:	4b1a      	ldr	r3, [pc, #104]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000886:	2200      	movs	r2, #0
 8000888:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800088a:	4b19      	ldr	r3, [pc, #100]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 800088c:	2200      	movs	r2, #0
 800088e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000890:	4b17      	ldr	r3, [pc, #92]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000892:	2200      	movs	r2, #0
 8000894:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000896:	4b16      	ldr	r3, [pc, #88]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 8000898:	2200      	movs	r2, #0
 800089a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800089c:	4b14      	ldr	r3, [pc, #80]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008a2:	4813      	ldr	r0, [pc, #76]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 80008a4:	f000 fab2 	bl	8000e0c <HAL_CAN_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80008ae:	f000 f955 	bl	8000b5c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	//Filter for KW45's 0x123 messages
	CAN_FilterTypeDef CanFilter0;
	CanFilter0.FilterActivation = CAN_FILTER_ENABLE;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
	CanFilter0.FilterBank = 18;
 80008b6:	2312      	movs	r3, #18
 80008b8:	617b      	str	r3, [r7, #20]
	CanFilter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	613b      	str	r3, [r7, #16]
	CanFilter0.FilterIdHigh = 0x123 << 5;
 80008be:	f242 4360 	movw	r3, #9312	@ 0x2460
 80008c2:	603b      	str	r3, [r7, #0]
	CanFilter0.FilterIdLow = 0x0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	607b      	str	r3, [r7, #4]
	CanFilter0.FilterMaskIdHigh = 0x123 << 5;
 80008c8:	f242 4360 	movw	r3, #9312	@ 0x2460
 80008cc:	60bb      	str	r3, [r7, #8]
	CanFilter0.FilterMaskIdLow = 0x0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
	CanFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
	CanFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 80008d6:	2301      	movs	r3, #1
 80008d8:	61fb      	str	r3, [r7, #28]
	CanFilter0.SlaveStartFilterBank = 20;
 80008da:	2314      	movs	r3, #20
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &CanFilter0);
 80008de:	463b      	mov	r3, r7
 80008e0:	4619      	mov	r1, r3
 80008e2:	4803      	ldr	r0, [pc, #12]	@ (80008f0 <MX_CAN1_Init+0xa0>)
 80008e4:	f000 fb8e 	bl	8001004 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	3728      	adds	r7, #40	@ 0x28
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000007c 	.word	0x2000007c
 80008f4:	40006400 	.word	0x40006400

080008f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08c      	sub	sp, #48	@ 0x30
 80008fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
 8000908:	609a      	str	r2, [r3, #8]
 800090a:	60da      	str	r2, [r3, #12]
 800090c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	4b89      	ldr	r3, [pc, #548]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a88      	ldr	r2, [pc, #544]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000914:	f043 0304 	orr.w	r3, r3, #4
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b86      	ldr	r3, [pc, #536]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0304 	and.w	r3, r3, #4
 8000922:	61bb      	str	r3, [r7, #24]
 8000924:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000926:	4b83      	ldr	r3, [pc, #524]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a82      	ldr	r2, [pc, #520]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 800092c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b80      	ldr	r3, [pc, #512]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800093a:	617b      	str	r3, [r7, #20]
 800093c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800093e:	4b7d      	ldr	r3, [pc, #500]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a7c      	ldr	r2, [pc, #496]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000944:	f043 0301 	orr.w	r3, r3, #1
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b7a      	ldr	r3, [pc, #488]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000956:	4b77      	ldr	r3, [pc, #476]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a76      	ldr	r2, [pc, #472]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b74      	ldr	r3, [pc, #464]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0302 	and.w	r3, r3, #2
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b71      	ldr	r3, [pc, #452]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a70      	ldr	r2, [pc, #448]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b6e      	ldr	r3, [pc, #440]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000986:	4b6b      	ldr	r3, [pc, #428]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a6a      	ldr	r2, [pc, #424]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 800098c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b68      	ldr	r3, [pc, #416]	@ (8000b34 <MX_GPIO_Init+0x23c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80009a4:	4864      	ldr	r0, [pc, #400]	@ (8000b38 <MX_GPIO_Init+0x240>)
 80009a6:	f001 fb63 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2140      	movs	r1, #64	@ 0x40
 80009ae:	4863      	ldr	r0, [pc, #396]	@ (8000b3c <MX_GPIO_Init+0x244>)
 80009b0:	f001 fb5e 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2180      	movs	r1, #128	@ 0x80
 80009b8:	4861      	ldr	r0, [pc, #388]	@ (8000b40 <MX_GPIO_Init+0x248>)
 80009ba:	f001 fb59 	bl	8002070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	485b      	ldr	r0, [pc, #364]	@ (8000b44 <MX_GPIO_Init+0x24c>)
 80009d6:	f001 f99f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009da:	2332      	movs	r3, #50	@ 0x32
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ea:	230b      	movs	r3, #11
 80009ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4853      	ldr	r0, [pc, #332]	@ (8000b44 <MX_GPIO_Init+0x24c>)
 80009f6:	f001 f98f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009fa:	2386      	movs	r3, #134	@ 0x86
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a06:	2303      	movs	r3, #3
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a0a:	230b      	movs	r3, #11
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	484c      	ldr	r0, [pc, #304]	@ (8000b48 <MX_GPIO_Init+0x250>)
 8000a16:	f001 f97f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a1a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4841      	ldr	r0, [pc, #260]	@ (8000b38 <MX_GPIO_Init+0x240>)
 8000a34:	f001 f970 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a4a:	230b      	movs	r3, #11
 8000a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4838      	ldr	r0, [pc, #224]	@ (8000b38 <MX_GPIO_Init+0x240>)
 8000a56:	f001 f95f 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a60:	2302      	movs	r3, #2
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a70:	f107 031c 	add.w	r3, r7, #28
 8000a74:	4619      	mov	r1, r3
 8000a76:	4832      	ldr	r0, [pc, #200]	@ (8000b40 <MX_GPIO_Init+0x248>)
 8000a78:	f001 f94e 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a7c:	2340      	movs	r3, #64	@ 0x40
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	482a      	ldr	r0, [pc, #168]	@ (8000b3c <MX_GPIO_Init+0x244>)
 8000a94:	f001 f940 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4824      	ldr	r0, [pc, #144]	@ (8000b3c <MX_GPIO_Init+0x244>)
 8000aac:	f001 f934 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ab0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	4619      	mov	r1, r3
 8000acc:	481e      	ldr	r0, [pc, #120]	@ (8000b48 <MX_GPIO_Init+0x250>)
 8000ace:	f001 f923 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ad2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4818      	ldr	r0, [pc, #96]	@ (8000b48 <MX_GPIO_Init+0x250>)
 8000ae8:	f001 f916 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000aec:	2380      	movs	r3, #128	@ 0x80
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	480f      	ldr	r0, [pc, #60]	@ (8000b40 <MX_GPIO_Init+0x248>)
 8000b04:	f001 f908 	bl	8001d18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b08:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_GPIO_Init+0x244>)
 8000b26:	f001 f8f7 	bl	8001d18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40021800 	.word	0x40021800
 8000b40:	40020c00 	.word	0x40020c00
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020000 	.word	0x40020000

08000b4c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
//		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
//		HAL_Delay(1000);
		osDelay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f002 f8c5 	bl	8002ce4 <osDelay>
 8000b5a:	e7fb      	b.n	8000b54 <StartDefaultTask+0x8>

08000b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <Error_Handler+0x8>

08000b68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	4a10      	ldr	r2, [pc, #64]	@ (8000bb4 <HAL_MspInit+0x4c>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x4c>)
 8000b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_MspInit+0x4c>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <HAL_MspInit+0x4c>)
 8000b8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0001 	mvn.w	r0, #1
 8000ba6:	f001 f880 	bl	8001caa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1f      	ldr	r2, [pc, #124]	@ (8000c54 <HAL_CAN_MspInit+0x9c>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d137      	bne.n	8000c4a <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <HAL_CAN_MspInit+0xa0>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bde:	4a1e      	ldr	r2, [pc, #120]	@ (8000c58 <HAL_CAN_MspInit+0xa0>)
 8000be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <HAL_CAN_MspInit+0xa0>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <HAL_CAN_MspInit+0xa0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <HAL_CAN_MspInit+0xa0>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <HAL_CAN_MspInit+0xa0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c1a:	2309      	movs	r3, #9
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <HAL_CAN_MspInit+0xa4>)
 8000c26:	f001 f877 	bl	8001d18 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2105      	movs	r1, #5
 8000c2e:	2013      	movs	r0, #19
 8000c30:	f001 f83b 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000c34:	2013      	movs	r0, #19
 8000c36:	f001 f854 	bl	8001ce2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2105      	movs	r1, #5
 8000c3e:	2014      	movs	r0, #20
 8000c40:	f001 f833 	bl	8001caa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000c44:	2014      	movs	r0, #20
 8000c46:	f001 f84c 	bl	8001ce2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40006400 	.word	0x40006400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020c00 	.word	0x40020c00

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <NMI_Handler+0x4>

08000c68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  __BKPT(0);
 8000c6c:	be00      	bkpt	0x0000
  static volatile int junk = 0;
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	bf00      	nop
 8000c70:	e7fd      	b.n	8000c6e <HardFault_Handler+0x6>

08000c72 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c76:	bf00      	nop
 8000c78:	e7fd      	b.n	8000c76 <MemManage_Handler+0x4>

08000c7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7e:	bf00      	nop
 8000c80:	e7fd      	b.n	8000c7e <BusFault_Handler+0x4>

08000c82 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c86:	bf00      	nop
 8000c88:	e7fd      	b.n	8000c86 <UsageFault_Handler+0x4>

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c9c:	f000 f896 	bl	8000dcc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ca0:	f004 f936 	bl	8004f10 <xTaskGetSchedulerState>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d001      	beq.n	8000cae <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000caa:	f005 f95d 	bl	8005f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <CAN1_TX_IRQHandler+0x10>)
 8000cba:	f000 fceb 	bl	8001694 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000007c 	.word	0x2000007c

08000cc8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ccc:	4802      	ldr	r0, [pc, #8]	@ (8000cd8 <CAN1_RX0_IRQHandler+0x10>)
 8000cce:	f000 fce1 	bl	8001694 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	2000007c 	.word	0x2000007c

08000cdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f005 fbfb 	bl	8006528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fc7d 	bl	8000630 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000d44:	080066dc 	.word	0x080066dc
  ldr r2, =_sbss
 8000d48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000d4c:	20004c18 	.word	0x20004c18

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>

08000d52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 ff9c 	bl	8001c94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5c:	200f      	movs	r0, #15
 8000d5e:	f000 f805 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d62:	f7ff ff01 	bl	8000b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 ffb7 	bl	8001cfe <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 ff7f 	bl	8001caa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	200000f4 	.word	0x200000f4

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200000f4 	.word	0x200000f4

08000e0c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0ed      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d102      	bne.n	8000e30 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fec4 	bl	8000bb8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f042 0201 	orr.w	r2, r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e40:	f7ff ffd8 	bl	8000df4 <HAL_GetTick>
 8000e44:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e46:	e012      	b.n	8000e6e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e48:	f7ff ffd4 	bl	8000df4 <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b0a      	cmp	r3, #10
 8000e54:	d90b      	bls.n	8000e6e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2205      	movs	r2, #5
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e0c5      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0301 	and.w	r3, r3, #1
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0e5      	beq.n	8000e48 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f022 0202 	bic.w	r2, r2, #2
 8000e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e8c:	f7ff ffb2 	bl	8000df4 <HAL_GetTick>
 8000e90:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e92:	e012      	b.n	8000eba <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e94:	f7ff ffae 	bl	8000df4 <HAL_GetTick>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	1ad3      	subs	r3, r2, r3
 8000e9e:	2b0a      	cmp	r3, #10
 8000ea0:	d90b      	bls.n	8000eba <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2205      	movs	r2, #5
 8000eb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e09f      	b.n	8000ffa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e5      	bne.n	8000e94 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7e1b      	ldrb	r3, [r3, #24]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d108      	bne.n	8000ee2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	e007      	b.n	8000ef2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	7e5b      	ldrb	r3, [r3, #25]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d108      	bne.n	8000f0c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e007      	b.n	8000f1c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	7e9b      	ldrb	r3, [r3, #26]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d108      	bne.n	8000f36 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0220 	orr.w	r2, r2, #32
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	e007      	b.n	8000f46 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 0220 	bic.w	r2, r2, #32
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	7edb      	ldrb	r3, [r3, #27]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d108      	bne.n	8000f60 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0210 	bic.w	r2, r2, #16
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e007      	b.n	8000f70 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0210 	orr.w	r2, r2, #16
 8000f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7f1b      	ldrb	r3, [r3, #28]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d108      	bne.n	8000f8a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 0208 	orr.w	r2, r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	e007      	b.n	8000f9a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0208 	bic.w	r2, r2, #8
 8000f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7f5b      	ldrb	r3, [r3, #29]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d108      	bne.n	8000fb4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f042 0204 	orr.w	r2, r2, #4
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	e007      	b.n	8000fc4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0204 	bic.w	r2, r2, #4
 8000fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	431a      	orrs	r2, r3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	431a      	orrs	r2, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	ea42 0103 	orr.w	r1, r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001004:	b480      	push	{r7}
 8001006:	b087      	sub	sp, #28
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800101c:	7cfb      	ldrb	r3, [r7, #19]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d003      	beq.n	800102a <HAL_CAN_ConfigFilter+0x26>
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	2b02      	cmp	r3, #2
 8001026:	f040 80c7 	bne.w	80011b8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a69      	ldr	r2, [pc, #420]	@ (80011d4 <HAL_CAN_ConfigFilter+0x1d0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d001      	beq.n	8001038 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001034:	4b68      	ldr	r3, [pc, #416]	@ (80011d8 <HAL_CAN_ConfigFilter+0x1d4>)
 8001036:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	4a63      	ldr	r2, [pc, #396]	@ (80011d8 <HAL_CAN_ConfigFilter+0x1d4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d111      	bne.n	8001074 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001056:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	431a      	orrs	r2, r3
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	2201      	movs	r2, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43db      	mvns	r3, r3
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d123      	bne.n	80010e6 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	401a      	ands	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80010c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3248      	adds	r2, #72	@ 0x48
 80010c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010dc:	6979      	ldr	r1, [r7, #20]
 80010de:	3348      	adds	r3, #72	@ 0x48
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d122      	bne.n	8001134 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	431a      	orrs	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800110e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	3248      	adds	r2, #72	@ 0x48
 8001114:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001128:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800112a:	6979      	ldr	r1, [r7, #20]
 800112c:	3348      	adds	r3, #72	@ 0x48
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	440b      	add	r3, r1
 8001132:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d109      	bne.n	8001150 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	43db      	mvns	r3, r3
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800114e:	e007      	b.n	8001160 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	431a      	orrs	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800117a:	e007      	b.n	800118c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d107      	bne.n	80011a4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	431a      	orrs	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011aa:	f023 0201 	bic.w	r2, r3, #1
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80011b4:	2300      	movs	r3, #0
 80011b6:	e006      	b.n	80011c6 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011bc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
  }
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40003400 	.word	0x40003400
 80011d8:	40006400 	.word	0x40006400

080011dc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d12e      	bne.n	800124e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2202      	movs	r2, #2
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0201 	bic.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001208:	f7ff fdf4 	bl	8000df4 <HAL_GetTick>
 800120c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800120e:	e012      	b.n	8001236 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001210:	f7ff fdf0 	bl	8000df4 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b0a      	cmp	r3, #10
 800121c:	d90b      	bls.n	8001236 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2205      	movs	r2, #5
 800122e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e012      	b.n	800125c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1e5      	bne.n	8001210 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800124a:	2300      	movs	r3, #0
 800124c:	e006      	b.n	800125c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001252:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
  }
}
 800125c:	4618      	mov	r0, r3
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	@ 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
 8001270:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001278:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001282:	7ffb      	ldrb	r3, [r7, #31]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d003      	beq.n	8001290 <HAL_CAN_AddTxMessage+0x2c>
 8001288:	7ffb      	ldrb	r3, [r7, #31]
 800128a:	2b02      	cmp	r3, #2
 800128c:	f040 80ad 	bne.w	80013ea <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10a      	bne.n	80012b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d105      	bne.n	80012b0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f000 8095 	beq.w	80013da <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	0e1b      	lsrs	r3, r3, #24
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80012ba:	2201      	movs	r2, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d10d      	bne.n	80012e8 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80012d6:	68f9      	ldr	r1, [r7, #12]
 80012d8:	6809      	ldr	r1, [r1, #0]
 80012da:	431a      	orrs	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3318      	adds	r3, #24
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	440b      	add	r3, r1
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	e00f      	b.n	8001308 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012f8:	68f9      	ldr	r1, [r7, #12]
 80012fa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80012fc:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3318      	adds	r3, #24
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	440b      	add	r3, r1
 8001306:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6819      	ldr	r1, [r3, #0]
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3318      	adds	r3, #24
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	440b      	add	r3, r1
 8001318:	3304      	adds	r3, #4
 800131a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	7d1b      	ldrb	r3, [r3, #20]
 8001320:	2b01      	cmp	r3, #1
 8001322:	d111      	bne.n	8001348 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3318      	adds	r3, #24
 800132c:	011b      	lsls	r3, r3, #4
 800132e:	4413      	add	r3, r2
 8001330:	3304      	adds	r3, #4
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	6811      	ldr	r1, [r2, #0]
 8001338:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	3318      	adds	r3, #24
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	440b      	add	r3, r1
 8001344:	3304      	adds	r3, #4
 8001346:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3307      	adds	r3, #7
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	061a      	lsls	r2, r3, #24
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3306      	adds	r3, #6
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	041b      	lsls	r3, r3, #16
 8001358:	431a      	orrs	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	3305      	adds	r3, #5
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4313      	orrs	r3, r2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	3204      	adds	r2, #4
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	4610      	mov	r0, r2
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	6811      	ldr	r1, [r2, #0]
 8001370:	ea43 0200 	orr.w	r2, r3, r0
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	440b      	add	r3, r1
 800137a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800137e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3303      	adds	r3, #3
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	061a      	lsls	r2, r3, #24
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3302      	adds	r3, #2
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3301      	adds	r3, #1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	4313      	orrs	r3, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	7812      	ldrb	r2, [r2, #0]
 80013a0:	4610      	mov	r0, r2
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	6811      	ldr	r1, [r2, #0]
 80013a6:	ea43 0200 	orr.w	r2, r3, r0
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	011b      	lsls	r3, r3, #4
 80013ae:	440b      	add	r3, r1
 80013b0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80013b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3318      	adds	r3, #24
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	6811      	ldr	r1, [r2, #0]
 80013c8:	f043 0201 	orr.w	r2, r3, #1
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3318      	adds	r3, #24
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	440b      	add	r3, r1
 80013d4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e00e      	b.n	80013f8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e006      	b.n	80013f8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
  }
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3724      	adds	r7, #36	@ 0x24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001404:	b480      	push	{r7}
 8001406:	b087      	sub	sp, #28
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
 8001410:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001418:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800141a:	7dfb      	ldrb	r3, [r7, #23]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d003      	beq.n	8001428 <HAL_CAN_GetRxMessage+0x24>
 8001420:	7dfb      	ldrb	r3, [r7, #23]
 8001422:	2b02      	cmp	r3, #2
 8001424:	f040 8103 	bne.w	800162e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d10e      	bne.n	800144c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d116      	bne.n	800146a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001440:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e0f7      	b.n	800163c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d107      	bne.n	800146a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e0e8      	b.n	800163c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	331b      	adds	r3, #27
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0204 	and.w	r2, r3, #4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d10c      	bne.n	80014a2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	331b      	adds	r3, #27
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	0d5b      	lsrs	r3, r3, #21
 8001498:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e00b      	b.n	80014ba <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	331b      	adds	r3, #27
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	331b      	adds	r3, #27
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	4413      	add	r3, r2
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0202 	and.w	r2, r3, #2
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	331b      	adds	r3, #27
 80014d8:	011b      	lsls	r3, r3, #4
 80014da:	4413      	add	r3, r2
 80014dc:	3304      	adds	r3, #4
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0308 	and.w	r3, r3, #8
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2208      	movs	r2, #8
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	e00b      	b.n	8001508 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	331b      	adds	r3, #27
 80014f8:	011b      	lsls	r3, r3, #4
 80014fa:	4413      	add	r3, r2
 80014fc:	3304      	adds	r3, #4
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 020f 	and.w	r2, r3, #15
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	331b      	adds	r3, #27
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	3304      	adds	r3, #4
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	b2da      	uxtb	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	331b      	adds	r3, #27
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	4413      	add	r3, r2
 800152c:	3304      	adds	r3, #4
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0c1b      	lsrs	r3, r3, #16
 8001532:	b29a      	uxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	4413      	add	r3, r2
 8001542:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	b2da      	uxtb	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4413      	add	r3, r2
 8001558:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	0a1a      	lsrs	r2, r3, #8
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	011b      	lsls	r3, r3, #4
 8001570:	4413      	add	r3, r2
 8001572:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	0c1a      	lsrs	r2, r3, #16
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	4413      	add	r3, r2
 800158c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	0e1a      	lsrs	r2, r3, #24
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	3303      	adds	r3, #3
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	011b      	lsls	r3, r3, #4
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	3304      	adds	r3, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	4413      	add	r3, r2
 80015be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0a1a      	lsrs	r2, r3, #8
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	3305      	adds	r3, #5
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	011b      	lsls	r3, r3, #4
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	0c1a      	lsrs	r2, r3, #16
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	3306      	adds	r3, #6
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	4413      	add	r3, r2
 80015f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	0e1a      	lsrs	r2, r3, #24
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	3307      	adds	r3, #7
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d108      	bne.n	800161a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0220 	orr.w	r2, r2, #32
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	e007      	b.n	800162a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691a      	ldr	r2, [r3, #16]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0220 	orr.w	r2, r2, #32
 8001628:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e006      	b.n	800163c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001632:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
  }
}
 800163c:	4618      	mov	r0, r3
 800163e:	371c      	adds	r7, #28
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800165a:	7bfb      	ldrb	r3, [r7, #15]
 800165c:	2b01      	cmp	r3, #1
 800165e:	d002      	beq.n	8001666 <HAL_CAN_ActivateNotification+0x1e>
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	2b02      	cmp	r3, #2
 8001664:	d109      	bne.n	800167a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6959      	ldr	r1, [r3, #20]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e006      	b.n	8001688 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
  }
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800169c:	2300      	movs	r3, #0
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d07c      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d023      	beq.n	800172c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2201      	movs	r2, #1
 80016ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f983 	bl	8001a02 <HAL_CAN_TxMailbox0CompleteCallback>
 80016fc:	e016      	b.n	800172c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d004      	beq.n	8001712 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800170e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001710:	e00c      	b.n	800172c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	f003 0308 	and.w	r3, r3, #8
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001722:	627b      	str	r3, [r7, #36]	@ 0x24
 8001724:	e002      	b.n	800172c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f989 	bl	8001a3e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d024      	beq.n	8001780 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800173e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001746:	2b00      	cmp	r3, #0
 8001748:	d003      	beq.n	8001752 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f963 	bl	8001a16 <HAL_CAN_TxMailbox1CompleteCallback>
 8001750:	e016      	b.n	8001780 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001758:	2b00      	cmp	r3, #0
 800175a:	d004      	beq.n	8001766 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800175c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
 8001764:	e00c      	b.n	8001780 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
 8001778:	e002      	b.n	8001780 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f969 	bl	8001a52 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001780:	69bb      	ldr	r3, [r7, #24]
 8001782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d024      	beq.n	80017d4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001792:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f943 	bl	8001a2a <HAL_CAN_TxMailbox2CompleteCallback>
 80017a4:	e016      	b.n	80017d4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d004      	beq.n	80017ba <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80017b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b8:	e00c      	b.n	80017d4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80017cc:	e002      	b.n	80017d4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f949 	bl	8001a66 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00c      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d007      	beq.n	80017f8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80017e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2210      	movs	r2, #16
 80017f6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	f003 0304 	and.w	r3, r3, #4
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	2b00      	cmp	r3, #0
 800180a:	d006      	beq.n	800181a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2208      	movs	r2, #8
 8001812:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f930 	bl	8001a7a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800181a:	6a3b      	ldr	r3, [r7, #32]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d009      	beq.n	8001838 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d002      	beq.n	8001838 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7fe fe7c 	bl	8000530 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00c      	beq.n	800185c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	d007      	beq.n	800185c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2210      	movs	r2, #16
 800185a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00b      	beq.n	800187e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	2b00      	cmp	r3, #0
 800186e:	d006      	beq.n	800187e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2208      	movs	r2, #8
 8001876:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 f912 	bl	8001aa2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	f003 0310 	and.w	r3, r3, #16
 8001884:	2b00      	cmp	r3, #0
 8001886:	d009      	beq.n	800189c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f8f9 	bl	8001a8e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800189c:	6a3b      	ldr	r3, [r7, #32]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2210      	movs	r2, #16
 80018b6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f8fc 	bl	8001ab6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2208      	movs	r2, #8
 80018d8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f8f5 	bl	8001aca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d07b      	beq.n	80019e2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d072      	beq.n	80019da <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d008      	beq.n	8001910 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001916:	2b00      	cmp	r3, #0
 8001918:	d008      	beq.n	800192c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001932:	2b00      	cmp	r3, #0
 8001934:	d008      	beq.n	8001948 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	f043 0304 	orr.w	r3, r3, #4
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800194e:	2b00      	cmp	r3, #0
 8001950:	d043      	beq.n	80019da <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03e      	beq.n	80019da <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001962:	2b60      	cmp	r3, #96	@ 0x60
 8001964:	d02b      	beq.n	80019be <HAL_CAN_IRQHandler+0x32a>
 8001966:	2b60      	cmp	r3, #96	@ 0x60
 8001968:	d82e      	bhi.n	80019c8 <HAL_CAN_IRQHandler+0x334>
 800196a:	2b50      	cmp	r3, #80	@ 0x50
 800196c:	d022      	beq.n	80019b4 <HAL_CAN_IRQHandler+0x320>
 800196e:	2b50      	cmp	r3, #80	@ 0x50
 8001970:	d82a      	bhi.n	80019c8 <HAL_CAN_IRQHandler+0x334>
 8001972:	2b40      	cmp	r3, #64	@ 0x40
 8001974:	d019      	beq.n	80019aa <HAL_CAN_IRQHandler+0x316>
 8001976:	2b40      	cmp	r3, #64	@ 0x40
 8001978:	d826      	bhi.n	80019c8 <HAL_CAN_IRQHandler+0x334>
 800197a:	2b30      	cmp	r3, #48	@ 0x30
 800197c:	d010      	beq.n	80019a0 <HAL_CAN_IRQHandler+0x30c>
 800197e:	2b30      	cmp	r3, #48	@ 0x30
 8001980:	d822      	bhi.n	80019c8 <HAL_CAN_IRQHandler+0x334>
 8001982:	2b10      	cmp	r3, #16
 8001984:	d002      	beq.n	800198c <HAL_CAN_IRQHandler+0x2f8>
 8001986:	2b20      	cmp	r3, #32
 8001988:	d005      	beq.n	8001996 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800198a:	e01d      	b.n	80019c8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	f043 0308 	orr.w	r3, r3, #8
 8001992:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001994:	e019      	b.n	80019ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800199e:	e014      	b.n	80019ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80019a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a2:	f043 0320 	orr.w	r3, r3, #32
 80019a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019a8:	e00f      	b.n	80019ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80019aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019b2:	e00a      	b.n	80019ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80019b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019bc:	e005      	b.n	80019ca <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80019be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80019c6:	e000      	b.n	80019ca <HAL_CAN_IRQHandler+0x336>
            break;
 80019c8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699a      	ldr	r2, [r3, #24]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80019d8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2204      	movs	r2, #4
 80019e0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d008      	beq.n	80019fa <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f872 	bl	8001ade <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80019fa:	bf00      	nop
 80019fc:	3728      	adds	r7, #40	@ 0x28
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr

08001a2a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	b083      	sub	sp, #12
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001a32:	bf00      	nop
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b083      	sub	sp, #12
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b04:	4b0b      	ldr	r3, [pc, #44]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x40>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0a:	68ba      	ldr	r2, [r7, #8]
 8001b0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b10:	4013      	ands	r3, r2
 8001b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001b1c:	4b06      	ldr	r3, [pc, #24]	@ (8001b38 <__NVIC_SetPriorityGrouping+0x44>)
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b22:	4a04      	ldr	r2, [pc, #16]	@ (8001b34 <__NVIC_SetPriorityGrouping+0x40>)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	60d3      	str	r3, [r2, #12]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00
 8001b38:	05fa0000 	.word	0x05fa0000

08001b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b40:	4b04      	ldr	r3, [pc, #16]	@ (8001b54 <__NVIC_GetPriorityGrouping+0x18>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	f003 0307 	and.w	r3, r3, #7
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	db0b      	blt.n	8001b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	f003 021f 	and.w	r2, r3, #31
 8001b70:	4907      	ldr	r1, [pc, #28]	@ (8001b90 <__NVIC_EnableIRQ+0x38>)
 8001b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	2001      	movs	r0, #1
 8001b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	@ (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	@ (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	@ 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	@ 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c60:	d301      	bcc.n	8001c66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c62:	2301      	movs	r3, #1
 8001c64:	e00f      	b.n	8001c86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c66:	4a0a      	ldr	r2, [pc, #40]	@ (8001c90 <SysTick_Config+0x40>)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6e:	210f      	movs	r1, #15
 8001c70:	f04f 30ff 	mov.w	r0, #4294967295
 8001c74:	f7ff ff8e 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <SysTick_Config+0x40>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <SysTick_Config+0x40>)
 8001c80:	2207      	movs	r2, #7
 8001c82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	e000e010 	.word	0xe000e010

08001c94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f7ff ff29 	bl	8001af4 <__NVIC_SetPriorityGrouping>
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
 8001cb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cbc:	f7ff ff3e 	bl	8001b3c <__NVIC_GetPriorityGrouping>
 8001cc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	68b9      	ldr	r1, [r7, #8]
 8001cc6:	6978      	ldr	r0, [r7, #20]
 8001cc8:	f7ff ff8e 	bl	8001be8 <NVIC_EncodePriority>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff ff5d 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cda:	bf00      	nop
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4603      	mov	r3, r0
 8001cea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff31 	bl	8001b58 <__NVIC_EnableIRQ>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff ffa2 	bl	8001c50 <SysTick_Config>
 8001d0c:	4603      	mov	r3, r0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b089      	sub	sp, #36	@ 0x24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e175      	b.n	8002024 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d38:	2201      	movs	r2, #1
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	f040 8164 	bne.w	800201e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d005      	beq.n	8001d6e <HAL_GPIO_Init+0x56>
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d130      	bne.n	8001dd0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	68da      	ldr	r2, [r3, #12]
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001da4:	2201      	movs	r2, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 0201 	and.w	r2, r3, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 0303 	and.w	r3, r3, #3
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d017      	beq.n	8001e0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	2203      	movs	r2, #3
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d123      	bne.n	8001e60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	08da      	lsrs	r2, r3, #3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3208      	adds	r2, #8
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	220f      	movs	r2, #15
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	69b9      	ldr	r1, [r7, #24]
 8001e5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2203      	movs	r2, #3
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0203 	and.w	r2, r3, #3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	f000 80be 	beq.w	800201e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ea2:	4b66      	ldr	r3, [pc, #408]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ea6:	4a65      	ldr	r2, [pc, #404]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001ea8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eae:	4b63      	ldr	r3, [pc, #396]	@ (800203c <HAL_GPIO_Init+0x324>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001eba:	4a61      	ldr	r2, [pc, #388]	@ (8002040 <HAL_GPIO_Init+0x328>)
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	089b      	lsrs	r3, r3, #2
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a58      	ldr	r2, [pc, #352]	@ (8002044 <HAL_GPIO_Init+0x32c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d037      	beq.n	8001f56 <HAL_GPIO_Init+0x23e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	@ (8002048 <HAL_GPIO_Init+0x330>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d031      	beq.n	8001f52 <HAL_GPIO_Init+0x23a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a56      	ldr	r2, [pc, #344]	@ (800204c <HAL_GPIO_Init+0x334>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d02b      	beq.n	8001f4e <HAL_GPIO_Init+0x236>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a55      	ldr	r2, [pc, #340]	@ (8002050 <HAL_GPIO_Init+0x338>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d025      	beq.n	8001f4a <HAL_GPIO_Init+0x232>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a54      	ldr	r2, [pc, #336]	@ (8002054 <HAL_GPIO_Init+0x33c>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d01f      	beq.n	8001f46 <HAL_GPIO_Init+0x22e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a53      	ldr	r2, [pc, #332]	@ (8002058 <HAL_GPIO_Init+0x340>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d019      	beq.n	8001f42 <HAL_GPIO_Init+0x22a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a52      	ldr	r2, [pc, #328]	@ (800205c <HAL_GPIO_Init+0x344>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d013      	beq.n	8001f3e <HAL_GPIO_Init+0x226>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a51      	ldr	r2, [pc, #324]	@ (8002060 <HAL_GPIO_Init+0x348>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d00d      	beq.n	8001f3a <HAL_GPIO_Init+0x222>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a50      	ldr	r2, [pc, #320]	@ (8002064 <HAL_GPIO_Init+0x34c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d007      	beq.n	8001f36 <HAL_GPIO_Init+0x21e>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a4f      	ldr	r2, [pc, #316]	@ (8002068 <HAL_GPIO_Init+0x350>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_GPIO_Init+0x21a>
 8001f2e:	2309      	movs	r3, #9
 8001f30:	e012      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f32:	230a      	movs	r3, #10
 8001f34:	e010      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f36:	2308      	movs	r3, #8
 8001f38:	e00e      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e00c      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f3e:	2306      	movs	r3, #6
 8001f40:	e00a      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f42:	2305      	movs	r3, #5
 8001f44:	e008      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f46:	2304      	movs	r3, #4
 8001f48:	e006      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e004      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e002      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <HAL_GPIO_Init+0x240>
 8001f56:	2300      	movs	r3, #0
 8001f58:	69fa      	ldr	r2, [r7, #28]
 8001f5a:	f002 0203 	and.w	r2, r2, #3
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	4093      	lsls	r3, r2
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001f68:	4935      	ldr	r1, [pc, #212]	@ (8002040 <HAL_GPIO_Init+0x328>)
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f76:	4b3d      	ldr	r3, [pc, #244]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f9a:	4a34      	ldr	r2, [pc, #208]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fa0:	4b32      	ldr	r3, [pc, #200]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4013      	ands	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fc4:	4a29      	ldr	r2, [pc, #164]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fee:	4a1f      	ldr	r2, [pc, #124]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <HAL_GPIO_Init+0x354>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	4313      	orrs	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002018:	4a14      	ldr	r2, [pc, #80]	@ (800206c <HAL_GPIO_Init+0x354>)
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3301      	adds	r3, #1
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	2b0f      	cmp	r3, #15
 8002028:	f67f ae86 	bls.w	8001d38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	3724      	adds	r7, #36	@ 0x24
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800
 8002040:	40013800 	.word	0x40013800
 8002044:	40020000 	.word	0x40020000
 8002048:	40020400 	.word	0x40020400
 800204c:	40020800 	.word	0x40020800
 8002050:	40020c00 	.word	0x40020c00
 8002054:	40021000 	.word	0x40021000
 8002058:	40021400 	.word	0x40021400
 800205c:	40021800 	.word	0x40021800
 8002060:	40021c00 	.word	0x40021c00
 8002064:	40022000 	.word	0x40022000
 8002068:	40022400 	.word	0x40022400
 800206c:	40013c00 	.word	0x40013c00

08002070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	460b      	mov	r3, r1
 800207a:	807b      	strh	r3, [r7, #2]
 800207c:	4613      	mov	r3, r2
 800207e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002080:	787b      	ldrb	r3, [r7, #1]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002086:	887a      	ldrh	r2, [r7, #2]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800208c:	e003      	b.n	8002096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800208e:	887b      	ldrh	r3, [r7, #2]
 8002090:	041a      	lsls	r2, r3, #16
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	619a      	str	r2, [r3, #24]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b085      	sub	sp, #20
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	460b      	mov	r3, r1
 80020ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4013      	ands	r3, r2
 80020ba:	041a      	lsls	r2, r3, #16
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	43d9      	mvns	r1, r3
 80020c0:	887b      	ldrh	r3, [r7, #2]
 80020c2:	400b      	ands	r3, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	619a      	str	r2, [r3, #24]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b23      	ldr	r3, [pc, #140]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ee:	4b20      	ldr	r3, [pc, #128]	@ (8002170 <HAL_PWREx_EnableOverDrive+0x98>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x9c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002104:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002106:	f7fe fe75 	bl	8000df4 <HAL_GetTick>
 800210a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800210c:	e009      	b.n	8002122 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800210e:	f7fe fe71 	bl	8000df4 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800211c:	d901      	bls.n	8002122 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e022      	b.n	8002168 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800212e:	d1ee      	bne.n	800210e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002130:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0f      	ldr	r2, [pc, #60]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002136:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800213c:	f7fe fe5a 	bl	8000df4 <HAL_GetTick>
 8002140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002142:	e009      	b.n	8002158 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002144:	f7fe fe56 	bl	8000df4 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002152:	d901      	bls.n	8002158 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e007      	b.n	8002168 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x9c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002160:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002164:	d1ee      	bne.n	8002144 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
}
 8002168:	4618      	mov	r0, r3
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800
 8002174:	40007000 	.word	0x40007000

08002178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e29b      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8087 	beq.w	80022aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800219c:	4b96      	ldr	r3, [pc, #600]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d00c      	beq.n	80021c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a8:	4b93      	ldr	r3, [pc, #588]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d112      	bne.n	80021da <HAL_RCC_OscConfig+0x62>
 80021b4:	4b90      	ldr	r3, [pc, #576]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c0:	d10b      	bne.n	80021da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c2:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06c      	beq.n	80022a8 <HAL_RCC_OscConfig+0x130>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d168      	bne.n	80022a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e275      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x7a>
 80021e4:	4b84      	ldr	r3, [pc, #528]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a83      	ldr	r2, [pc, #524]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e02e      	b.n	8002250 <HAL_RCC_OscConfig+0xd8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x9c>
 80021fa:	4b7f      	ldr	r3, [pc, #508]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a7e      	ldr	r2, [pc, #504]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002200:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002204:	6013      	str	r3, [r2, #0]
 8002206:	4b7c      	ldr	r3, [pc, #496]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a7b      	ldr	r2, [pc, #492]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002210:	6013      	str	r3, [r2, #0]
 8002212:	e01d      	b.n	8002250 <HAL_RCC_OscConfig+0xd8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800221c:	d10c      	bne.n	8002238 <HAL_RCC_OscConfig+0xc0>
 800221e:	4b76      	ldr	r3, [pc, #472]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a75      	ldr	r2, [pc, #468]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002224:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	4b73      	ldr	r3, [pc, #460]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a72      	ldr	r2, [pc, #456]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e00b      	b.n	8002250 <HAL_RCC_OscConfig+0xd8>
 8002238:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800223e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002242:	6013      	str	r3, [r2, #0]
 8002244:	4b6c      	ldr	r3, [pc, #432]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a6b      	ldr	r2, [pc, #428]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800224a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800224e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d013      	beq.n	8002280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002258:	f7fe fdcc 	bl	8000df4 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002260:	f7fe fdc8 	bl	8000df4 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e229      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002272:	4b61      	ldr	r3, [pc, #388]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0xe8>
 800227e:	e014      	b.n	80022aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002280:	f7fe fdb8 	bl	8000df4 <HAL_GetTick>
 8002284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002286:	e008      	b.n	800229a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002288:	f7fe fdb4 	bl	8000df4 <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2b64      	cmp	r3, #100	@ 0x64
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e215      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229a:	4b57      	ldr	r3, [pc, #348]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1f0      	bne.n	8002288 <HAL_RCC_OscConfig+0x110>
 80022a6:	e000      	b.n	80022aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d069      	beq.n	800238a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022b6:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00b      	beq.n	80022da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c2:	4b4d      	ldr	r3, [pc, #308]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d11c      	bne.n	8002308 <HAL_RCC_OscConfig+0x190>
 80022ce:	4b4a      	ldr	r3, [pc, #296]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d116      	bne.n	8002308 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d001      	beq.n	80022f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e1e9      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f2:	4b41      	ldr	r3, [pc, #260]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	493d      	ldr	r1, [pc, #244]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002306:	e040      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	4b39      	ldr	r3, [pc, #228]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a38      	ldr	r2, [pc, #224]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fd6a 	bl	8000df4 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fd66 	bl	8000df4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e1c7      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002336:	4b30      	ldr	r3, [pc, #192]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b2d      	ldr	r3, [pc, #180]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4929      	ldr	r1, [pc, #164]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
 8002356:	e018      	b.n	800238a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002358:	4b27      	ldr	r3, [pc, #156]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a26      	ldr	r2, [pc, #152]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 800235e:	f023 0301 	bic.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe fd46 	bl	8000df4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe fd42 	bl	8000df4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1a3      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	4b1e      	ldr	r3, [pc, #120]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d1f0      	bne.n	800236c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d038      	beq.n	8002408 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d019      	beq.n	80023d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239e:	4b16      	ldr	r3, [pc, #88]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a2:	4a15      	ldr	r2, [pc, #84]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023aa:	f7fe fd23 	bl	8000df4 <HAL_GetTick>
 80023ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b0:	e008      	b.n	80023c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b2:	f7fe fd1f 	bl	8000df4 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e180      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0f0      	beq.n	80023b2 <HAL_RCC_OscConfig+0x23a>
 80023d0:	e01a      	b.n	8002408 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d6:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_RCC_OscConfig+0x280>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7fe fd09 	bl	8000df4 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e4:	e00a      	b.n	80023fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e6:	f7fe fd05 	bl	8000df4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d903      	bls.n	80023fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e166      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
 80023f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b92      	ldr	r3, [pc, #584]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ee      	bne.n	80023e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a4 	beq.w	800255e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002416:	4b8c      	ldr	r3, [pc, #560]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10d      	bne.n	800243e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4b89      	ldr	r3, [pc, #548]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002426:	4a88      	ldr	r2, [pc, #544]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800242c:	6413      	str	r3, [r2, #64]	@ 0x40
 800242e:	4b86      	ldr	r3, [pc, #536]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243a:	2301      	movs	r3, #1
 800243c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243e:	4b83      	ldr	r3, [pc, #524]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d118      	bne.n	800247c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800244a:	4b80      	ldr	r3, [pc, #512]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a7f      	ldr	r2, [pc, #508]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002456:	f7fe fccd 	bl	8000df4 <HAL_GetTick>
 800245a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800245e:	f7fe fcc9 	bl	8000df4 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b64      	cmp	r3, #100	@ 0x64
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e12a      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002470:	4b76      	ldr	r3, [pc, #472]	@ (800264c <HAL_RCC_OscConfig+0x4d4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002478:	2b00      	cmp	r3, #0
 800247a:	d0f0      	beq.n	800245e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x31a>
 8002484:	4b70      	ldr	r3, [pc, #448]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002488:	4a6f      	ldr	r2, [pc, #444]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002490:	e02d      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10c      	bne.n	80024b4 <HAL_RCC_OscConfig+0x33c>
 800249a:	4b6b      	ldr	r3, [pc, #428]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800249c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249e:	4a6a      	ldr	r2, [pc, #424]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a6:	4b68      	ldr	r3, [pc, #416]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024aa:	4a67      	ldr	r2, [pc, #412]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	f023 0304 	bic.w	r3, r3, #4
 80024b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b2:	e01c      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d10c      	bne.n	80024d6 <HAL_RCC_OscConfig+0x35e>
 80024bc:	4b62      	ldr	r3, [pc, #392]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c0:	4a61      	ldr	r2, [pc, #388]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	f043 0304 	orr.w	r3, r3, #4
 80024c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d4:	e00b      	b.n	80024ee <HAL_RCC_OscConfig+0x376>
 80024d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024da:	4a5b      	ldr	r2, [pc, #364]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	f023 0301 	bic.w	r3, r3, #1
 80024e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e2:	4b59      	ldr	r3, [pc, #356]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024e6:	4a58      	ldr	r2, [pc, #352]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d015      	beq.n	8002522 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f6:	f7fe fc7d 	bl	8000df4 <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fc:	e00a      	b.n	8002514 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fe:	f7fe fc79 	bl	8000df4 <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	f241 3288 	movw	r2, #5000	@ 0x1388
 800250c:	4293      	cmp	r3, r2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e0d8      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002514:	4b4c      	ldr	r3, [pc, #304]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ee      	beq.n	80024fe <HAL_RCC_OscConfig+0x386>
 8002520:	e014      	b.n	800254c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002522:	f7fe fc67 	bl	8000df4 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002528:	e00a      	b.n	8002540 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe fc63 	bl	8000df4 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0c2      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002540:	4b41      	ldr	r3, [pc, #260]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002542:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1ee      	bne.n	800252a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800254c:	7dfb      	ldrb	r3, [r7, #23]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d105      	bne.n	800255e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002552:	4b3d      	ldr	r3, [pc, #244]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a3c      	ldr	r2, [pc, #240]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002558:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 80ae 	beq.w	80026c4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	4b37      	ldr	r3, [pc, #220]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b08      	cmp	r3, #8
 8002572:	d06d      	beq.n	8002650 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d14b      	bne.n	8002614 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800257c:	4b32      	ldr	r3, [pc, #200]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a31      	ldr	r2, [pc, #196]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002582:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fc34 	bl	8000df4 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002590:	f7fe fc30 	bl	8000df4 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e091      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a2:	4b29      	ldr	r3, [pc, #164]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69da      	ldr	r2, [r3, #28]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	019b      	lsls	r3, r3, #6
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	3b01      	subs	r3, #1
 80025c8:	041b      	lsls	r3, r3, #16
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d0:	061b      	lsls	r3, r3, #24
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	071b      	lsls	r3, r3, #28
 80025da:	491b      	ldr	r1, [pc, #108]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b19      	ldr	r3, [pc, #100]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a18      	ldr	r2, [pc, #96]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fc02 	bl	8000df4 <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f4:	f7fe fbfe 	bl	8000df4 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e05f      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x47c>
 8002612:	e057      	b.n	80026c4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800261a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fbe8 	bl	8000df4 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002628:	f7fe fbe4 	bl	8000df4 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e045      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263a:	4b03      	ldr	r3, [pc, #12]	@ (8002648 <HAL_RCC_OscConfig+0x4d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x4b0>
 8002646:	e03d      	b.n	80026c4 <HAL_RCC_OscConfig+0x54c>
 8002648:	40023800 	.word	0x40023800
 800264c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002650:	4b1f      	ldr	r3, [pc, #124]	@ (80026d0 <HAL_RCC_OscConfig+0x558>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d030      	beq.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d129      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d122      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002680:	4013      	ands	r3, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002686:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002688:	4293      	cmp	r3, r2
 800268a:	d119      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	3b01      	subs	r3, #1
 800269a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269c:	429a      	cmp	r2, r3
 800269e:	d10f      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d001      	beq.n	80026c4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0d0      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d910      	bls.n	800271c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fa:	4b67      	ldr	r3, [pc, #412]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f023 020f 	bic.w	r2, r3, #15
 8002702:	4965      	ldr	r1, [pc, #404]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b63      	ldr	r3, [pc, #396]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d001      	beq.n	800271c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0b8      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d020      	beq.n	800276a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002734:	4b59      	ldr	r3, [pc, #356]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	4a58      	ldr	r2, [pc, #352]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800273e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800274c:	4b53      	ldr	r3, [pc, #332]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a52      	ldr	r2, [pc, #328]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002756:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002758:	4b50      	ldr	r3, [pc, #320]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	494d      	ldr	r1, [pc, #308]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d040      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d107      	bne.n	800278e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800277e:	4b47      	ldr	r3, [pc, #284]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d115      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e07f      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002796:	4b41      	ldr	r3, [pc, #260]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d109      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e073      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027a6:	4b3d      	ldr	r3, [pc, #244]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e06b      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027b6:	4b39      	ldr	r3, [pc, #228]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 0203 	bic.w	r2, r3, #3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4936      	ldr	r1, [pc, #216]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7fe fb14 	bl	8000df4 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ce:	e00a      	b.n	80027e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d0:	f7fe fb10 	bl	8000df4 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e053      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2d      	ldr	r3, [pc, #180]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 020c 	and.w	r2, r3, #12
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1eb      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b27      	ldr	r3, [pc, #156]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 030f 	and.w	r3, r3, #15
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d210      	bcs.n	8002828 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b24      	ldr	r3, [pc, #144]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 020f 	bic.w	r2, r3, #15
 800280e:	4922      	ldr	r1, [pc, #136]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b20      	ldr	r3, [pc, #128]	@ (8002898 <HAL_RCC_ClockConfig+0x1c4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e032      	b.n	800288e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d009      	beq.n	8002866 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002852:	4b12      	ldr	r3, [pc, #72]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	490e      	ldr	r1, [pc, #56]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002866:	f000 f821 	bl	80028ac <HAL_RCC_GetSysClockFreq>
 800286a:	4602      	mov	r2, r0
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	490a      	ldr	r1, [pc, #40]	@ (80028a0 <HAL_RCC_ClockConfig+0x1cc>)
 8002878:	5ccb      	ldrb	r3, [r1, r3]
 800287a:	fa22 f303 	lsr.w	r3, r2, r3
 800287e:	4a09      	ldr	r2, [pc, #36]	@ (80028a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002882:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1d4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fa70 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40023c00 	.word	0x40023c00
 800289c:	40023800 	.word	0x40023800
 80028a0:	080066bc 	.word	0x080066bc
 80028a4:	20000000 	.word	0x20000000
 80028a8:	20000004 	.word	0x20000004

080028ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b0:	b094      	sub	sp, #80	@ 0x50
 80028b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b4:	2300      	movs	r3, #0
 80028b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b8:	2300      	movs	r3, #0
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028bc:	2300      	movs	r3, #0
 80028be:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80028c0:	2300      	movs	r3, #0
 80028c2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c4:	4b79      	ldr	r3, [pc, #484]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d00d      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x40>
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	f200 80e1 	bhi.w	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <HAL_RCC_GetSysClockFreq+0x34>
 80028da:	2b04      	cmp	r3, #4
 80028dc:	d003      	beq.n	80028e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028de:	e0db      	b.n	8002a98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e0:	4b73      	ldr	r3, [pc, #460]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e4:	e0db      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028e6:	4b72      	ldr	r3, [pc, #456]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ea:	e0d8      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028ec:	4b6f      	ldr	r3, [pc, #444]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028f6:	4b6d      	ldr	r3, [pc, #436]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d063      	beq.n	80029ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002902:	4b6a      	ldr	r3, [pc, #424]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	099b      	lsrs	r3, r3, #6
 8002908:	2200      	movs	r2, #0
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800290c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002914:	633b      	str	r3, [r7, #48]	@ 0x30
 8002916:	2300      	movs	r3, #0
 8002918:	637b      	str	r3, [r7, #52]	@ 0x34
 800291a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	f04f 0000 	mov.w	r0, #0
 8002926:	f04f 0100 	mov.w	r1, #0
 800292a:	0159      	lsls	r1, r3, #5
 800292c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002930:	0150      	lsls	r0, r2, #5
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4621      	mov	r1, r4
 8002938:	1a51      	subs	r1, r2, r1
 800293a:	6139      	str	r1, [r7, #16]
 800293c:	4629      	mov	r1, r5
 800293e:	eb63 0301 	sbc.w	r3, r3, r1
 8002942:	617b      	str	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	f04f 0300 	mov.w	r3, #0
 800294c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002950:	4659      	mov	r1, fp
 8002952:	018b      	lsls	r3, r1, #6
 8002954:	4651      	mov	r1, sl
 8002956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295a:	4651      	mov	r1, sl
 800295c:	018a      	lsls	r2, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ebb2 0801 	subs.w	r8, r2, r1
 8002964:	4659      	mov	r1, fp
 8002966:	eb63 0901 	sbc.w	r9, r3, r1
 800296a:	f04f 0200 	mov.w	r2, #0
 800296e:	f04f 0300 	mov.w	r3, #0
 8002972:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002976:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800297e:	4690      	mov	r8, r2
 8002980:	4699      	mov	r9, r3
 8002982:	4623      	mov	r3, r4
 8002984:	eb18 0303 	adds.w	r3, r8, r3
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	462b      	mov	r3, r5
 800298c:	eb49 0303 	adc.w	r3, r9, r3
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800299e:	4629      	mov	r1, r5
 80029a0:	028b      	lsls	r3, r1, #10
 80029a2:	4621      	mov	r1, r4
 80029a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029a8:	4621      	mov	r1, r4
 80029aa:	028a      	lsls	r2, r1, #10
 80029ac:	4610      	mov	r0, r2
 80029ae:	4619      	mov	r1, r3
 80029b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b2:	2200      	movs	r2, #0
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029bc:	f7fd fc40 	bl	8000240 <__aeabi_uldivmod>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4613      	mov	r3, r2
 80029c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c8:	e058      	b.n	8002a7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ca:	4b38      	ldr	r3, [pc, #224]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	2200      	movs	r2, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	4611      	mov	r1, r2
 80029d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029da:	623b      	str	r3, [r7, #32]
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e4:	4642      	mov	r2, r8
 80029e6:	464b      	mov	r3, r9
 80029e8:	f04f 0000 	mov.w	r0, #0
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	0159      	lsls	r1, r3, #5
 80029f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029f6:	0150      	lsls	r0, r2, #5
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4641      	mov	r1, r8
 80029fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a02:	4649      	mov	r1, r9
 8002a04:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a1c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a20:	eb63 050b 	sbc.w	r5, r3, fp
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	00eb      	lsls	r3, r5, #3
 8002a2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a32:	00e2      	lsls	r2, r4, #3
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	4643      	mov	r3, r8
 8002a3a:	18e3      	adds	r3, r4, r3
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	464b      	mov	r3, r9
 8002a40:	eb45 0303 	adc.w	r3, r5, r3
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a52:	4629      	mov	r1, r5
 8002a54:	028b      	lsls	r3, r1, #10
 8002a56:	4621      	mov	r1, r4
 8002a58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	028a      	lsls	r2, r1, #10
 8002a60:	4610      	mov	r0, r2
 8002a62:	4619      	mov	r1, r3
 8002a64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a66:	2200      	movs	r2, #0
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	61fa      	str	r2, [r7, #28]
 8002a6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a70:	f7fd fbe6 	bl	8000240 <__aeabi_uldivmod>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4613      	mov	r3, r2
 8002a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002aac <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a96:	e002      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a98:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3750      	adds	r7, #80	@ 0x50
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	00f42400 	.word	0x00f42400

08002ab4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
	...

08002ac4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aca:	f3ef 8305 	mrs	r3, IPSR
 8002ace:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ada:	607b      	str	r3, [r7, #4]
  return(result);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d105      	bne.n	8002aee <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8002ae6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <osKernelInitialize+0x3a>
 8002aee:	4b0e      	ldr	r3, [pc, #56]	@ (8002b28 <osKernelInitialize+0x64>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d103      	bne.n	8002afe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002af6:	f06f 0305 	mvn.w	r3, #5
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	e00c      	b.n	8002b18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002afe:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <osKernelInitialize+0x64>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b06:	4b08      	ldr	r3, [pc, #32]	@ (8002b28 <osKernelInitialize+0x64>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]
 8002b10:	e002      	b.n	8002b18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002b12:	f04f 33ff 	mov.w	r3, #4294967295
 8002b16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b18:	68fb      	ldr	r3, [r7, #12]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	200000f8 	.word	0x200000f8

08002b2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b32:	f3ef 8305 	mrs	r3, IPSR
 8002b36:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10f      	bne.n	8002b5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b42:	607b      	str	r3, [r7, #4]
  return(result);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b4a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d007      	beq.n	8002b66 <osKernelStart+0x3a>
 8002b56:	4b0f      	ldr	r3, [pc, #60]	@ (8002b94 <osKernelStart+0x68>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d103      	bne.n	8002b66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002b5e:	f06f 0305 	mvn.w	r3, #5
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	e010      	b.n	8002b88 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b66:	4b0b      	ldr	r3, [pc, #44]	@ (8002b94 <osKernelStart+0x68>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d109      	bne.n	8002b82 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b6e:	f7ff ffa1 	bl	8002ab4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b72:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <osKernelStart+0x68>)
 8002b74:	2202      	movs	r2, #2
 8002b76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b78:	f001 fd16 	bl	80045a8 <vTaskStartScheduler>
      stat = osOK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e002      	b.n	8002b88 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002b82:	f04f 33ff 	mov.w	r3, #4294967295
 8002b86:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b88:	68fb      	ldr	r3, [r7, #12]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	200000f8 	.word	0x200000f8

08002b98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b090      	sub	sp, #64	@ 0x40
 8002b9c:	af04      	add	r7, sp, #16
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba8:	f3ef 8305 	mrs	r3, IPSR
 8002bac:	61fb      	str	r3, [r7, #28]
  return(result);
 8002bae:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 808f 	bne.w	8002cd4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002bba:	61bb      	str	r3, [r7, #24]
  return(result);
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d105      	bne.n	8002bce <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bc2:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc6:	617b      	str	r3, [r7, #20]
  return(result);
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <osThreadNew+0x3e>
 8002bce:	4b44      	ldr	r3, [pc, #272]	@ (8002ce0 <osThreadNew+0x148>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d07e      	beq.n	8002cd4 <osThreadNew+0x13c>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d07b      	beq.n	8002cd4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002be0:	2318      	movs	r3, #24
 8002be2:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8002be8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bec:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d045      	beq.n	8002c80 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d002      	beq.n	8002c02 <osThreadNew+0x6a>
        name = attr->name;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d002      	beq.n	8002c10 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d008      	beq.n	8002c28 <osThreadNew+0x90>
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	2b38      	cmp	r3, #56	@ 0x38
 8002c1a:	d805      	bhi.n	8002c28 <osThreadNew+0x90>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <osThreadNew+0x94>
        return (NULL);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	e054      	b.n	8002cd6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00e      	beq.n	8002c62 <osThreadNew+0xca>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c4a:	d90a      	bls.n	8002c62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d006      	beq.n	8002c62 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <osThreadNew+0xca>
        mem = 1;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	e010      	b.n	8002c84 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <osThreadNew+0xec>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <osThreadNew+0xec>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <osThreadNew+0xec>
          mem = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	e001      	b.n	8002c84 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002c80:	2300      	movs	r3, #0
 8002c82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d110      	bne.n	8002cac <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c92:	9202      	str	r2, [sp, #8]
 8002c94:	9301      	str	r3, [sp, #4]
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f001 fa84 	bl	80041ae <xTaskCreateStatic>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e013      	b.n	8002cd4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d110      	bne.n	8002cd4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	f107 0310 	add.w	r3, r7, #16
 8002cba:	9301      	str	r3, [sp, #4]
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f001 fad8 	bl	800427a <xTaskCreate>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d001      	beq.n	8002cd4 <osThreadNew+0x13c>
          hTask = NULL;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cd4:	693b      	ldr	r3, [r7, #16]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3730      	adds	r7, #48	@ 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200000f8 	.word	0x200000f8

08002ce4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cec:	f3ef 8305 	mrs	r3, IPSR
 8002cf0:	613b      	str	r3, [r7, #16]
  return(result);
 8002cf2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d105      	bne.n	8002d10 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d04:	f3ef 8311 	mrs	r3, BASEPRI
 8002d08:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <osDelay+0x3c>
 8002d10:	4b0a      	ldr	r3, [pc, #40]	@ (8002d3c <osDelay+0x58>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d103      	bne.n	8002d20 <osDelay+0x3c>
    stat = osErrorISR;
 8002d18:	f06f 0305 	mvn.w	r3, #5
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	e007      	b.n	8002d30 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f001 fc04 	bl	8004538 <vTaskDelay>
    }
  }

  return (stat);
 8002d30:	697b      	ldr	r3, [r7, #20]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200000f8 	.word	0x200000f8

08002d40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <vApplicationGetIdleTaskMemory+0x2c>)
 8002d50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	4a06      	ldr	r2, [pc, #24]	@ (8002d70 <vApplicationGetIdleTaskMemory+0x30>)
 8002d56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2280      	movs	r2, #128	@ 0x80
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	200000fc 	.word	0x200000fc
 8002d70:	200001a4 	.word	0x200001a4

08002d74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4a07      	ldr	r2, [pc, #28]	@ (8002da0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002d84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	4a06      	ldr	r2, [pc, #24]	@ (8002da4 <vApplicationGetTimerTaskMemory+0x30>)
 8002d8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d92:	601a      	str	r2, [r3, #0]
}
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	200003a4 	.word	0x200003a4
 8002da4:	2000044c 	.word	0x2000044c

08002da8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f103 0208 	add.w	r2, r3, #8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f103 0208 	add.w	r2, r3, #8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f103 0208 	add.w	r2, r3, #8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
}
 8002e3e:	bf00      	nop
 8002e40:	3714      	adds	r7, #20
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr

08002e4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
 8002e52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d103      	bne.n	8002e6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e00c      	b.n	8002e84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3308      	adds	r3, #8
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e002      	b.n	8002e78 <vListInsert+0x2e>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d2f6      	bcs.n	8002e72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	601a      	str	r2, [r3, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6892      	ldr	r2, [r2, #8]
 8002ed2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6852      	ldr	r2, [r2, #4]
 8002edc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d103      	bne.n	8002ef0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	1e5a      	subs	r2, r3, #1
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10d      	bne.n	8002f40 <xQueueGenericReset+0x30>
	__asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f28:	b672      	cpsid	i
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	b662      	cpsie	i
 8002f38:	60bb      	str	r3, [r7, #8]
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	e7fd      	b.n	8002f3c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8002f40:	f002 ff7c 	bl	8005e3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	441a      	add	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f70:	3b01      	subs	r3, #1
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	441a      	add	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	22ff      	movs	r2, #255	@ 0xff
 8002f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	22ff      	movs	r2, #255	@ 0xff
 8002f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d114      	bne.n	8002fc0 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01a      	beq.n	8002fd4 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3310      	adds	r3, #16
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f001 fdac 	bl	8004b00 <xTaskRemoveFromEventList>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d012      	beq.n	8002fd4 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fae:	4b0d      	ldr	r3, [pc, #52]	@ (8002fe4 <xQueueGenericReset+0xd4>)
 8002fb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	e009      	b.n	8002fd4 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	3310      	adds	r3, #16
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff feef 	bl	8002da8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3324      	adds	r3, #36	@ 0x24
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff feea 	bl	8002da8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002fd4:	f002 ff68 	bl	8005ea8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	e000ed04 	.word	0xe000ed04

08002fe8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08e      	sub	sp, #56	@ 0x38
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10d      	bne.n	8003018 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8002ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003000:	b672      	cpsid	i
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	b662      	cpsie	i
 8003010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003012:	bf00      	nop
 8003014:	bf00      	nop
 8003016:	e7fd      	b.n	8003014 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800301e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003022:	b672      	cpsid	i
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	b662      	cpsie	i
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	e7fd      	b.n	8003036 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <xQueueGenericCreateStatic+0x5e>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <xQueueGenericCreateStatic+0x62>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <xQueueGenericCreateStatic+0x64>
 800304a:	2300      	movs	r3, #0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10d      	bne.n	800306c <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	b672      	cpsid	i
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	b662      	cpsie	i
 8003064:	623b      	str	r3, [r7, #32]
}
 8003066:	bf00      	nop
 8003068:	bf00      	nop
 800306a:	e7fd      	b.n	8003068 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d102      	bne.n	8003078 <xQueueGenericCreateStatic+0x90>
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <xQueueGenericCreateStatic+0x94>
 8003078:	2301      	movs	r3, #1
 800307a:	e000      	b.n	800307e <xQueueGenericCreateStatic+0x96>
 800307c:	2300      	movs	r3, #0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8003082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003086:	b672      	cpsid	i
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	b662      	cpsie	i
 8003096:	61fb      	str	r3, [r7, #28]
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop
 800309c:	e7fd      	b.n	800309a <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800309e:	2350      	movs	r3, #80	@ 0x50
 80030a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b50      	cmp	r3, #80	@ 0x50
 80030a6:	d00d      	beq.n	80030c4 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80030a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ac:	b672      	cpsid	i
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	b662      	cpsie	i
 80030bc:	61bb      	str	r3, [r7, #24]
}
 80030be:	bf00      	nop
 80030c0:	bf00      	nop
 80030c2:	e7fd      	b.n	80030c0 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80030dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f000 f805 	bl	80030f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80030ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3730      	adds	r7, #48	@ 0x30
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
 8003102:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d103      	bne.n	8003112 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e002      	b.n	8003118 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003124:	2101      	movs	r1, #1
 8003126:	69b8      	ldr	r0, [r7, #24]
 8003128:	f7ff fef2 	bl	8002f10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08e      	sub	sp, #56	@ 0x38
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
 8003148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <xQueueGenericSend+0x38>
	__asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315c:	b672      	cpsid	i
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	b662      	cpsie	i
 800316c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800316e:	bf00      	nop
 8003170:	bf00      	nop
 8003172:	e7fd      	b.n	8003170 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d103      	bne.n	8003182 <xQueueGenericSend+0x46>
 800317a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <xQueueGenericSend+0x4a>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <xQueueGenericSend+0x4c>
 8003186:	2300      	movs	r3, #0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <xQueueGenericSend+0x6c>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	b672      	cpsid	i
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	b662      	cpsie	i
 80031a0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d103      	bne.n	80031b6 <xQueueGenericSend+0x7a>
 80031ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <xQueueGenericSend+0x7e>
 80031b6:	2301      	movs	r3, #1
 80031b8:	e000      	b.n	80031bc <xQueueGenericSend+0x80>
 80031ba:	2300      	movs	r3, #0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10d      	bne.n	80031dc <xQueueGenericSend+0xa0>
	__asm volatile
 80031c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c4:	b672      	cpsid	i
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	b662      	cpsie	i
 80031d4:	623b      	str	r3, [r7, #32]
}
 80031d6:	bf00      	nop
 80031d8:	bf00      	nop
 80031da:	e7fd      	b.n	80031d8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031dc:	f001 fe98 	bl	8004f10 <xTaskGetSchedulerState>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <xQueueGenericSend+0xb0>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <xQueueGenericSend+0xb4>
 80031ec:	2301      	movs	r3, #1
 80031ee:	e000      	b.n	80031f2 <xQueueGenericSend+0xb6>
 80031f0:	2300      	movs	r3, #0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <xQueueGenericSend+0xd6>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	b672      	cpsid	i
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	b662      	cpsie	i
 800320a:	61fb      	str	r3, [r7, #28]
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	e7fd      	b.n	800320e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003212:	f002 fe13 	bl	8005e3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <xQueueGenericSend+0xec>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b02      	cmp	r3, #2
 8003226:	d129      	bne.n	800327c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800322e:	f000 fa1b 	bl	8003668 <prvCopyDataToQueue>
 8003232:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003238:	2b00      	cmp	r3, #0
 800323a:	d010      	beq.n	800325e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	3324      	adds	r3, #36	@ 0x24
 8003240:	4618      	mov	r0, r3
 8003242:	f001 fc5d 	bl	8004b00 <xTaskRemoveFromEventList>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d013      	beq.n	8003274 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800324c:	4b3f      	ldr	r3, [pc, #252]	@ (800334c <xQueueGenericSend+0x210>)
 800324e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	e00a      	b.n	8003274 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800325e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003260:	2b00      	cmp	r3, #0
 8003262:	d007      	beq.n	8003274 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003264:	4b39      	ldr	r3, [pc, #228]	@ (800334c <xQueueGenericSend+0x210>)
 8003266:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003274:	f002 fe18 	bl	8005ea8 <vPortExitCritical>
				return pdPASS;
 8003278:	2301      	movs	r3, #1
 800327a:	e063      	b.n	8003344 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d103      	bne.n	800328a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003282:	f002 fe11 	bl	8005ea8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003286:	2300      	movs	r3, #0
 8003288:	e05c      	b.n	8003344 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800328a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003290:	f107 0314 	add.w	r3, r7, #20
 8003294:	4618      	mov	r0, r3
 8003296:	f001 fcc3 	bl	8004c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800329a:	2301      	movs	r3, #1
 800329c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800329e:	f002 fe03 	bl	8005ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032a2:	f001 f9f5 	bl	8004690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032a6:	f002 fdc9 	bl	8005e3c <vPortEnterCritical>
 80032aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032b0:	b25b      	sxtb	r3, r3
 80032b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b6:	d103      	bne.n	80032c0 <xQueueGenericSend+0x184>
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032c6:	b25b      	sxtb	r3, r3
 80032c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032cc:	d103      	bne.n	80032d6 <xQueueGenericSend+0x19a>
 80032ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032d6:	f002 fde7 	bl	8005ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032da:	1d3a      	adds	r2, r7, #4
 80032dc:	f107 0314 	add.w	r3, r7, #20
 80032e0:	4611      	mov	r1, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fcb2 	bl	8004c4c <xTaskCheckForTimeOut>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d124      	bne.n	8003338 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80032ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032f0:	f000 fab2 	bl	8003858 <prvIsQueueFull>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d018      	beq.n	800332c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	3310      	adds	r3, #16
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fba6 	bl	8004a54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003308:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800330a:	f000 fa3d 	bl	8003788 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800330e:	f001 f9cd 	bl	80046ac <xTaskResumeAll>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	f47f af7c 	bne.w	8003212 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800331a:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <xQueueGenericSend+0x210>)
 800331c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	e772      	b.n	8003212 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800332c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800332e:	f000 fa2b 	bl	8003788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003332:	f001 f9bb 	bl	80046ac <xTaskResumeAll>
 8003336:	e76c      	b.n	8003212 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003338:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800333a:	f000 fa25 	bl	8003788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800333e:	f001 f9b5 	bl	80046ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003342:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003344:	4618      	mov	r0, r3
 8003346:	3738      	adds	r7, #56	@ 0x38
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	e000ed04 	.word	0xe000ed04

08003350 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b08e      	sub	sp, #56	@ 0x38
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8003368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336c:	b672      	cpsid	i
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	b662      	cpsie	i
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800337e:	bf00      	nop
 8003380:	bf00      	nop
 8003382:	e7fd      	b.n	8003380 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <xQueueGenericSendFromISR+0x42>
 800338a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <xQueueGenericSendFromISR+0x46>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <xQueueGenericSendFromISR+0x48>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10d      	bne.n	80033b8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a0:	b672      	cpsid	i
 80033a2:	f383 8811 	msr	BASEPRI, r3
 80033a6:	f3bf 8f6f 	isb	sy
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	b662      	cpsie	i
 80033b0:	623b      	str	r3, [r7, #32]
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d103      	bne.n	80033c6 <xQueueGenericSendFromISR+0x76>
 80033be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <xQueueGenericSendFromISR+0x7a>
 80033c6:	2301      	movs	r3, #1
 80033c8:	e000      	b.n	80033cc <xQueueGenericSendFromISR+0x7c>
 80033ca:	2300      	movs	r3, #0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80033d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d4:	b672      	cpsid	i
 80033d6:	f383 8811 	msr	BASEPRI, r3
 80033da:	f3bf 8f6f 	isb	sy
 80033de:	f3bf 8f4f 	dsb	sy
 80033e2:	b662      	cpsie	i
 80033e4:	61fb      	str	r3, [r7, #28]
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	e7fd      	b.n	80033e8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033ec:	f002 fe0e 	bl	800600c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033f0:	f3ef 8211 	mrs	r2, BASEPRI
 80033f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f8:	b672      	cpsid	i
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	b662      	cpsie	i
 8003408:	61ba      	str	r2, [r7, #24]
 800340a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800340c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800340e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <xQueueGenericSendFromISR+0xd2>
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d12c      	bne.n	800347c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003424:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003428:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003432:	f000 f919 	bl	8003668 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003436:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800343a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343e:	d112      	bne.n	8003466 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	3324      	adds	r3, #36	@ 0x24
 800344c:	4618      	mov	r0, r3
 800344e:	f001 fb57 	bl	8004b00 <xTaskRemoveFromEventList>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	e007      	b.n	8003476 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003466:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800346a:	3301      	adds	r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	b25a      	sxtb	r2, r3
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003476:	2301      	movs	r3, #1
 8003478:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800347a:	e001      	b.n	8003480 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800347c:	2300      	movs	r3, #0
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800348a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800348e:	4618      	mov	r0, r3
 8003490:	3738      	adds	r7, #56	@ 0x38
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b08c      	sub	sp, #48	@ 0x30
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <xQueueReceive+0x36>
	__asm volatile
 80034b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b6:	b672      	cpsid	i
 80034b8:	f383 8811 	msr	BASEPRI, r3
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	f3bf 8f4f 	dsb	sy
 80034c4:	b662      	cpsie	i
 80034c6:	623b      	str	r3, [r7, #32]
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop
 80034cc:	e7fd      	b.n	80034ca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <xQueueReceive+0x44>
 80034d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <xQueueReceive+0x48>
 80034dc:	2301      	movs	r3, #1
 80034de:	e000      	b.n	80034e2 <xQueueReceive+0x4a>
 80034e0:	2300      	movs	r3, #0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10d      	bne.n	8003502 <xQueueReceive+0x6a>
	__asm volatile
 80034e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ea:	b672      	cpsid	i
 80034ec:	f383 8811 	msr	BASEPRI, r3
 80034f0:	f3bf 8f6f 	isb	sy
 80034f4:	f3bf 8f4f 	dsb	sy
 80034f8:	b662      	cpsie	i
 80034fa:	61fb      	str	r3, [r7, #28]
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003502:	f001 fd05 	bl	8004f10 <xTaskGetSchedulerState>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xQueueReceive+0x7a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <xQueueReceive+0x7e>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueReceive+0x80>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10d      	bne.n	8003538 <xQueueReceive+0xa0>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	b672      	cpsid	i
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	b662      	cpsie	i
 8003530:	61bb      	str	r3, [r7, #24]
}
 8003532:	bf00      	nop
 8003534:	bf00      	nop
 8003536:	e7fd      	b.n	8003534 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003538:	f002 fc80 	bl	8005e3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800353c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d01f      	beq.n	8003588 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003548:	68b9      	ldr	r1, [r7, #8]
 800354a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800354c:	f000 f8f6 	bl	800373c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003552:	1e5a      	subs	r2, r3, #1
 8003554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00f      	beq.n	8003580 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003562:	3310      	adds	r3, #16
 8003564:	4618      	mov	r0, r3
 8003566:	f001 facb 	bl	8004b00 <xTaskRemoveFromEventList>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003570:	4b3c      	ldr	r3, [pc, #240]	@ (8003664 <xQueueReceive+0x1cc>)
 8003572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	f3bf 8f4f 	dsb	sy
 800357c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003580:	f002 fc92 	bl	8005ea8 <vPortExitCritical>
				return pdPASS;
 8003584:	2301      	movs	r3, #1
 8003586:	e069      	b.n	800365c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d103      	bne.n	8003596 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800358e:	f002 fc8b 	bl	8005ea8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003592:	2300      	movs	r3, #0
 8003594:	e062      	b.n	800365c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d106      	bne.n	80035aa <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800359c:	f107 0310 	add.w	r3, r7, #16
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fb3d 	bl	8004c20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035a6:	2301      	movs	r3, #1
 80035a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035aa:	f002 fc7d 	bl	8005ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035ae:	f001 f86f 	bl	8004690 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035b2:	f002 fc43 	bl	8005e3c <vPortEnterCritical>
 80035b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c2:	d103      	bne.n	80035cc <xQueueReceive+0x134>
 80035c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035d2:	b25b      	sxtb	r3, r3
 80035d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d8:	d103      	bne.n	80035e2 <xQueueReceive+0x14a>
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035e2:	f002 fc61 	bl	8005ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035e6:	1d3a      	adds	r2, r7, #4
 80035e8:	f107 0310 	add.w	r3, r7, #16
 80035ec:	4611      	mov	r1, r2
 80035ee:	4618      	mov	r0, r3
 80035f0:	f001 fb2c 	bl	8004c4c <xTaskCheckForTimeOut>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d123      	bne.n	8003642 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035fc:	f000 f916 	bl	800382c <prvIsQueueEmpty>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d017      	beq.n	8003636 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003608:	3324      	adds	r3, #36	@ 0x24
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f001 fa20 	bl	8004a54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003616:	f000 f8b7 	bl	8003788 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800361a:	f001 f847 	bl	80046ac <xTaskResumeAll>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d189      	bne.n	8003538 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8003624:	4b0f      	ldr	r3, [pc, #60]	@ (8003664 <xQueueReceive+0x1cc>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	e780      	b.n	8003538 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003638:	f000 f8a6 	bl	8003788 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800363c:	f001 f836 	bl	80046ac <xTaskResumeAll>
 8003640:	e77a      	b.n	8003538 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003644:	f000 f8a0 	bl	8003788 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003648:	f001 f830 	bl	80046ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800364c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800364e:	f000 f8ed 	bl	800382c <prvIsQueueEmpty>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	f43f af6f 	beq.w	8003538 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800365a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800365c:	4618      	mov	r0, r3
 800365e:	3730      	adds	r7, #48	@ 0x30
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	e000ed04 	.word	0xe000ed04

08003668 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10d      	bne.n	80036a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d14d      	bne.n	800372a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4618      	mov	r0, r3
 8003694:	f001 fc5a 	bl	8004f4c <xTaskPriorityDisinherit>
 8003698:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	e043      	b.n	800372a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d119      	bne.n	80036dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6858      	ldr	r0, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	461a      	mov	r2, r3
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	f002 ff5e 	bl	8006574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	441a      	add	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d32b      	bcc.n	800372a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	e026      	b.n	800372a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	68d8      	ldr	r0, [r3, #12]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e4:	461a      	mov	r2, r3
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	f002 ff44 	bl	8006574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68da      	ldr	r2, [r3, #12]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	425b      	negs	r3, r3
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d207      	bcs.n	8003718 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003710:	425b      	negs	r3, r3
 8003712:	441a      	add	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d105      	bne.n	800372a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	3b01      	subs	r3, #1
 8003728:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003732:	697b      	ldr	r3, [r7, #20]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	2b00      	cmp	r3, #0
 800374c:	d018      	beq.n	8003780 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	441a      	add	r2, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	d303      	bcc.n	8003770 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003778:	461a      	mov	r2, r3
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	f002 fefa 	bl	8006574 <memcpy>
	}
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003790:	f002 fb54 	bl	8005e3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800379a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800379c:	e011      	b.n	80037c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d012      	beq.n	80037cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3324      	adds	r3, #36	@ 0x24
 80037aa:	4618      	mov	r0, r3
 80037ac:	f001 f9a8 	bl	8004b00 <xTaskRemoveFromEventList>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037b6:	f001 fab1 	bl	8004d1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	3b01      	subs	r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	dce9      	bgt.n	800379e <prvUnlockQueue+0x16>
 80037ca:	e000      	b.n	80037ce <prvUnlockQueue+0x46>
					break;
 80037cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	22ff      	movs	r2, #255	@ 0xff
 80037d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037d6:	f002 fb67 	bl	8005ea8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037da:	f002 fb2f 	bl	8005e3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e6:	e011      	b.n	800380c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d012      	beq.n	8003816 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3310      	adds	r3, #16
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 f983 	bl	8004b00 <xTaskRemoveFromEventList>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003800:	f001 fa8c 	bl	8004d1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003804:	7bbb      	ldrb	r3, [r7, #14]
 8003806:	3b01      	subs	r3, #1
 8003808:	b2db      	uxtb	r3, r3
 800380a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800380c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003810:	2b00      	cmp	r3, #0
 8003812:	dce9      	bgt.n	80037e8 <prvUnlockQueue+0x60>
 8003814:	e000      	b.n	8003818 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003816:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	22ff      	movs	r2, #255	@ 0xff
 800381c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003820:	f002 fb42 	bl	8005ea8 <vPortExitCritical>
}
 8003824:	bf00      	nop
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003834:	f002 fb02 	bl	8005e3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383c:	2b00      	cmp	r3, #0
 800383e:	d102      	bne.n	8003846 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	60fb      	str	r3, [r7, #12]
 8003844:	e001      	b.n	800384a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800384a:	f002 fb2d 	bl	8005ea8 <vPortExitCritical>

	return xReturn;
 800384e:	68fb      	ldr	r3, [r7, #12]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003860:	f002 faec 	bl	8005e3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800386c:	429a      	cmp	r2, r3
 800386e:	d102      	bne.n	8003876 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e001      	b.n	800387a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800387a:	f002 fb15 	bl	8005ea8 <vPortExitCritical>

	return xReturn;
 800387e:	68fb      	ldr	r3, [r7, #12]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	e014      	b.n	80038c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003898:	4a0f      	ldr	r2, [pc, #60]	@ (80038d8 <vQueueAddToRegistry+0x50>)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10b      	bne.n	80038bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038a4:	490c      	ldr	r1, [pc, #48]	@ (80038d8 <vQueueAddToRegistry+0x50>)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038ae:	4a0a      	ldr	r2, [pc, #40]	@ (80038d8 <vQueueAddToRegistry+0x50>)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038ba:	e006      	b.n	80038ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	3301      	adds	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b07      	cmp	r3, #7
 80038c6:	d9e7      	bls.n	8003898 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038c8:	bf00      	nop
 80038ca:	bf00      	nop
 80038cc:	3714      	adds	r7, #20
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr
 80038d6:	bf00      	nop
 80038d8:	2000084c 	.word	0x2000084c

080038dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038ec:	f002 faa6 	bl	8005e3c <vPortEnterCritical>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d103      	bne.n	8003906 <vQueueWaitForMessageRestricted+0x2a>
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800390c:	b25b      	sxtb	r3, r3
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d103      	bne.n	800391c <vQueueWaitForMessageRestricted+0x40>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800391c:	f002 fac4 	bl	8005ea8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3324      	adds	r3, #36	@ 0x24
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f8b7 	bl	8004aa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff26 	bl	8003788 <prvUnlockQueue>
	}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08c      	sub	sp, #48	@ 0x30
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d113      	bne.n	800397e <xStreamBufferGenericCreate+0x3a>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b04      	cmp	r3, #4
 8003960:	d821      	bhi.n	80039a6 <xStreamBufferGenericCreate+0x62>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003966:	b672      	cpsid	i
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	b662      	cpsie	i
 8003976:	61fb      	str	r3, [r7, #28]
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	e7fd      	b.n	800397a <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10d      	bne.n	80039a6 <xStreamBufferGenericCreate+0x62>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398e:	b672      	cpsid	i
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	b662      	cpsie	i
 800399e:	61bb      	str	r3, [r7, #24]
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	e7fd      	b.n	80039a2 <xStreamBufferGenericCreate+0x5e>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d90d      	bls.n	80039ca <xStreamBufferGenericCreate+0x86>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	b672      	cpsid	i
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	b662      	cpsie	i
 80039c2:	617b      	str	r3, [r7, #20]
}
 80039c4:	bf00      	nop
 80039c6:	bf00      	nop
 80039c8:	e7fd      	b.n	80039c6 <xStreamBufferGenericCreate+0x82>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <xStreamBufferGenericCreate+0x90>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80039d0:	2301      	movs	r3, #1
 80039d2:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	3301      	adds	r3, #1
 80039d8:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	3324      	adds	r3, #36	@ 0x24
 80039de:	4618      	mov	r0, r3
 80039e0:	f002 fb5a 	bl	8006098 <pvPortMalloc>
 80039e4:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <xStreamBufferGenericCreate+0xbe>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80039f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	6a38      	ldr	r0, [r7, #32]
 80039fe:	f000 fba0 	bl	8004142 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8003a02:	6a3b      	ldr	r3, [r7, #32]
	}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10d      	bne.n	8003a3a <xStreamBufferSpacesAvailable+0x2e>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a22:	b672      	cpsid	i
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	b662      	cpsie	i
 8003a32:	60fb      	str	r3, [r7, #12]
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	e7fd      	b.n	8003a36 <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4413      	add	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	697a      	ldr	r2, [r7, #20]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d304      	bcc.n	8003a6a <xStreamBufferSpacesAvailable+0x5e>
	{
		xSpace -= pxStreamBuffer->xLength;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	697a      	ldr	r2, [r7, #20]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8003a6a:	697b      	ldr	r3, [r7, #20]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b090      	sub	sp, #64	@ 0x40
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10d      	bne.n	8003ab4 <xStreamBufferSend+0x3c>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	b672      	cpsid	i
 8003a9e:	f383 8811 	msr	BASEPRI, r3
 8003aa2:	f3bf 8f6f 	isb	sy
 8003aa6:	f3bf 8f4f 	dsb	sy
 8003aaa:	b662      	cpsie	i
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003aae:	bf00      	nop
 8003ab0:	bf00      	nop
 8003ab2:	e7fd      	b.n	8003ab0 <xStreamBufferSend+0x38>
	configASSERT( pxStreamBuffer );
 8003ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <xStreamBufferSend+0x5e>
	__asm volatile
 8003aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abe:	b672      	cpsid	i
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	b662      	cpsie	i
 8003ace:	623b      	str	r3, [r7, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <xStreamBufferSend+0x5a>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad8:	7f1b      	ldrb	r3, [r3, #28]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d014      	beq.n	8003b0c <xStreamBufferSend+0x94>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d80d      	bhi.n	8003b0c <xStreamBufferSend+0x94>
	__asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	b672      	cpsid	i
 8003af6:	f383 8811 	msr	BASEPRI, r3
 8003afa:	f3bf 8f6f 	isb	sy
 8003afe:	f3bf 8f4f 	dsb	sy
 8003b02:	b662      	cpsie	i
 8003b04:	61fb      	str	r3, [r7, #28]
}
 8003b06:	bf00      	nop
 8003b08:	bf00      	nop
 8003b0a:	e7fd      	b.n	8003b08 <xStreamBufferSend+0x90>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d041      	beq.n	8003b96 <xStreamBufferSend+0x11e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8003b12:	f107 0310 	add.w	r3, r7, #16
 8003b16:	4618      	mov	r0, r3
 8003b18:	f001 f858 	bl	8004bcc <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8003b1c:	f002 f98e 	bl	8005e3c <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003b20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b22:	f7ff ff73 	bl	8003a0c <xStreamBufferSpacesAvailable>
 8003b26:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8003b28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d21a      	bcs.n	8003b66 <xStreamBufferSend+0xee>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8003b30:	2000      	movs	r0, #0
 8003b32:	f001 fc95 	bl	8005460 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8003b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <xStreamBufferSend+0xe2>
	__asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	b672      	cpsid	i
 8003b44:	f383 8811 	msr	BASEPRI, r3
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	f3bf 8f4f 	dsb	sy
 8003b50:	b662      	cpsie	i
 8003b52:	61bb      	str	r3, [r7, #24]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xStreamBufferSend+0xde>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8003b5a:	f001 f9c9 	bl	8004ef0 <xTaskGetCurrentTaskHandle>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	615a      	str	r2, [r3, #20]
 8003b64:	e002      	b.n	8003b6c <xStreamBufferSend+0xf4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8003b66:	f002 f99f 	bl	8005ea8 <vPortExitCritical>
					break;
 8003b6a:	e014      	b.n	8003b96 <xStreamBufferSend+0x11e>
				}
			}
			taskEXIT_CRITICAL();
 8003b6c:	f002 f99c 	bl	8005ea8 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2200      	movs	r2, #0
 8003b74:	2100      	movs	r1, #0
 8003b76:	2000      	movs	r0, #0
 8003b78:	f001 fa5c 	bl	8005034 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8003b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7e:	2200      	movs	r2, #0
 8003b80:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8003b82:	463a      	mov	r2, r7
 8003b84:	f107 0310 	add.w	r3, r7, #16
 8003b88:	4611      	mov	r1, r2
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f85e 	bl	8004c4c <xTaskCheckForTimeOut>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0c2      	beq.n	8003b1c <xStreamBufferSend+0xa4>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8003b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <xStreamBufferSend+0x12c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003b9c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b9e:	f7ff ff35 	bl	8003a0c <xStreamBufferSpacesAvailable>
 8003ba2:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	9300      	str	r3, [sp, #0]
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bb0:	f000 f89c 	bl	8003cec <prvWriteMessageToBuffer>
 8003bb4:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8003bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d019      	beq.n	8003bf0 <xStreamBufferSend+0x178>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003bbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bbe:	f000 faa0 	bl	8004102 <prvBytesInBuffer>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d311      	bcc.n	8003bf0 <xStreamBufferSend+0x178>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8003bcc:	f000 fd60 	bl	8004690 <vTaskSuspendAll>
 8003bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <xStreamBufferSend+0x174>
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	6918      	ldr	r0, [r3, #16]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	2200      	movs	r2, #0
 8003be0:	2100      	movs	r1, #0
 8003be2:	f001 fa87 	bl	80050f4 <xTaskGenericNotify>
 8003be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be8:	2200      	movs	r2, #0
 8003bea:	611a      	str	r2, [r3, #16]
 8003bec:	f000 fd5e 	bl	80046ac <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3738      	adds	r7, #56	@ 0x38
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b090      	sub	sp, #64	@ 0x40
 8003bfe:	af02      	add	r7, sp, #8
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10d      	bne.n	8003c32 <xStreamBufferSendFromISR+0x38>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	b672      	cpsid	i
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	b662      	cpsie	i
 8003c2a:	623b      	str	r3, [r7, #32]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10d      	bne.n	8003c54 <xStreamBufferSendFromISR+0x5a>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	b672      	cpsid	i
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	b662      	cpsie	i
 8003c4c:	61fb      	str	r3, [r7, #28]
}
 8003c4e:	bf00      	nop
 8003c50:	bf00      	nop
 8003c52:	e7fd      	b.n	8003c50 <xStreamBufferSendFromISR+0x56>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	7f1b      	ldrb	r3, [r3, #28]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <xStreamBufferSendFromISR+0x6c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c62:	3304      	adds	r3, #4
 8003c64:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003c66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c68:	f7ff fed0 	bl	8003a0c <xStreamBufferSpacesAvailable>
 8003c6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c70:	9300      	str	r3, [sp, #0]
 8003c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	68b9      	ldr	r1, [r7, #8]
 8003c78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c7a:	f000 f837 	bl	8003cec <prvWriteMessageToBuffer>
 8003c7e:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8003c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d02d      	beq.n	8003ce2 <xStreamBufferSendFromISR+0xe8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003c86:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c88:	f000 fa3b 	bl	8004102 <prvBytesInBuffer>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d325      	bcc.n	8003ce2 <xStreamBufferSendFromISR+0xe8>
	__asm volatile
 8003c96:	f3ef 8211 	mrs	r2, BASEPRI
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	61ba      	str	r2, [r7, #24]
 8003cb0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00b      	beq.n	8003cd6 <xStreamBufferSendFromISR+0xdc>
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	6918      	ldr	r0, [r3, #16]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f001 fada 	bl	8005284 <xTaskGenericNotifyFromISR>
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	f383 8811 	msr	BASEPRI, r3
}
 8003ce0:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8003ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3738      	adds	r7, #56	@ 0x38
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d102      	bne.n	8003d06 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	e01d      	b.n	8003d42 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	7f1b      	ldrb	r3, [r3, #28]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d108      	bne.n	8003d24 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	bf28      	it	cs
 8003d1e:	4613      	movcs	r3, r2
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	e00e      	b.n	8003d42 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	6a3b      	ldr	r3, [r7, #32]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d308      	bcc.n	8003d3e <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8003d30:	1d3b      	adds	r3, r7, #4
 8003d32:	2204      	movs	r2, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	68f8      	ldr	r0, [r7, #12]
 8003d38:	f000 f8e5 	bl	8003f06 <prvWriteBytesToBuffer>
 8003d3c:	e001      	b.n	8003d42 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f8d9 	bl	8003f06 <prvWriteBytesToBuffer>
 8003d54:	6138      	str	r0, [r7, #16]
 8003d56:	e001      	b.n	8003d5c <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8003d5c:	693b      	ldr	r3, [r7, #16]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3718      	adds	r7, #24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08e      	sub	sp, #56	@ 0x38
 8003d6a:	af02      	add	r7, sp, #8
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10d      	bne.n	8003d9e <xStreamBufferReceive+0x38>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	b672      	cpsid	i
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	b662      	cpsie	i
 8003d96:	61fb      	str	r3, [r7, #28]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10d      	bne.n	8003dc0 <xStreamBufferReceive+0x5a>
	__asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	b672      	cpsid	i
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	b662      	cpsie	i
 8003db8:	61bb      	str	r3, [r7, #24]
}
 8003dba:	bf00      	nop
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <xStreamBufferReceive+0x56>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	7f1b      	ldrb	r3, [r3, #28]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <xStreamBufferReceive+0x6c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003dcc:	2304      	movs	r3, #4
 8003dce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dd0:	e001      	b.n	8003dd6 <xStreamBufferReceive+0x70>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d037      	beq.n	8003e4c <xStreamBufferReceive+0xe6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8003ddc:	f002 f82e 	bl	8005e3c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003de0:	6a38      	ldr	r0, [r7, #32]
 8003de2:	f000 f98e 	bl	8004102 <prvBytesInBuffer>
 8003de6:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8003de8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d819      	bhi.n	8003e24 <xStreamBufferReceive+0xbe>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8003df0:	2000      	movs	r0, #0
 8003df2:	f001 fb35 	bl	8005460 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00d      	beq.n	8003e1a <xStreamBufferReceive+0xb4>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	b672      	cpsid	i
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	b662      	cpsie	i
 8003e12:	617b      	str	r3, [r7, #20]
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <xStreamBufferReceive+0xb0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8003e1a:	f001 f869 	bl	8004ef0 <xTaskGetCurrentTaskHandle>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8003e24:	f002 f840 	bl	8005ea8 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8003e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d811      	bhi.n	8003e54 <xStreamBufferReceive+0xee>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2200      	movs	r2, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	2000      	movs	r0, #0
 8003e38:	f001 f8fc 	bl	8005034 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003e42:	6a38      	ldr	r0, [r7, #32]
 8003e44:	f000 f95d 	bl	8004102 <prvBytesInBuffer>
 8003e48:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003e4a:	e003      	b.n	8003e54 <xStreamBufferReceive+0xee>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8003e4c:	6a38      	ldr	r0, [r7, #32]
 8003e4e:	f000 f958 	bl	8004102 <prvBytesInBuffer>
 8003e52:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8003e54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d91d      	bls.n	8003e98 <xStreamBufferReceive+0x132>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	68b9      	ldr	r1, [r7, #8]
 8003e66:	6a38      	ldr	r0, [r7, #32]
 8003e68:	f000 f81b 	bl	8003ea2 <prvReadMessageFromBuffer>
 8003e6c:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8003e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d011      	beq.n	8003e98 <xStreamBufferReceive+0x132>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8003e74:	f000 fc0c 	bl	8004690 <vTaskSuspendAll>
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d009      	beq.n	8003e94 <xStreamBufferReceive+0x12e>
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	6958      	ldr	r0, [r3, #20]
 8003e84:	2300      	movs	r3, #0
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	f001 f933 	bl	80050f4 <xTaskGenericNotify>
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	2200      	movs	r2, #0
 8003e92:	615a      	str	r2, [r3, #20]
 8003e94:	f000 fc0a 	bl	80046ac <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3730      	adds	r7, #48	@ 0x30
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b088      	sub	sp, #32
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
 8003eae:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8003eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d019      	beq.n	8003eea <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8003ebc:	f107 0110 	add.w	r1, r7, #16
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f899 	bl	8003ffc <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d907      	bls.n	8003eee <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	61fb      	str	r3, [r7, #28]
 8003ee8:	e001      	b.n	8003eee <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	68b9      	ldr	r1, [r7, #8]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 f881 	bl	8003ffc <prvReadBytesFromBuffer>
 8003efa:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8003efc:	697b      	ldr	r3, [r7, #20]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b08a      	sub	sp, #40	@ 0x28
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10d      	bne.n	8003f34 <prvWriteBytesToBuffer+0x2e>
	__asm volatile
 8003f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1c:	b672      	cpsid	i
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	b662      	cpsie	i
 8003f2c:	61fb      	str	r3, [r7, #28]
}
 8003f2e:	bf00      	nop
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf28      	it	cs
 8003f48:	4613      	movcs	r3, r2
 8003f4a:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8003f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d90d      	bls.n	8003f76 <prvWriteBytesToBuffer+0x70>
	__asm volatile
 8003f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5e:	b672      	cpsid	i
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	b662      	cpsie	i
 8003f6e:	61bb      	str	r3, [r7, #24]
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <prvWriteBytesToBuffer+0x6c>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7c:	4413      	add	r3, r2
 8003f7e:	6a3a      	ldr	r2, [r7, #32]
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f002 faf6 	bl	8006574 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d91f      	bls.n	8003fd0 <prvWriteBytesToBuffer+0xca>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	1ad2      	subs	r2, r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d90d      	bls.n	8003fba <prvWriteBytesToBuffer+0xb4>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	b672      	cpsid	i
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	b662      	cpsie	i
 8003fb2:	617b      	str	r3, [r7, #20]
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	e7fd      	b.n	8003fb6 <prvWriteBytesToBuffer+0xb0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6998      	ldr	r0, [r3, #24]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	18d1      	adds	r1, r2, r3
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f002 fad2 	bl	8006574 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8003fd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d304      	bcc.n	8003fec <prvWriteBytesToBuffer+0xe6>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff0:	605a      	str	r2, [r3, #4]

	return xCount;
 8003ff2:	687b      	ldr	r3, [r7, #4]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3728      	adds	r7, #40	@ 0x28
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08a      	sub	sp, #40	@ 0x28
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	4293      	cmp	r3, r2
 8004010:	bf28      	it	cs
 8004012:	4613      	movcs	r3, r2
 8004014:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d06d      	beq.n	80040f8 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	6a3a      	ldr	r2, [r7, #32]
 800402c:	4293      	cmp	r3, r2
 800402e:	bf28      	it	cs
 8004030:	4613      	movcs	r3, r2
 8004032:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8004034:	69fa      	ldr	r2, [r7, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d90d      	bls.n	8004058 <prvReadBytesFromBuffer+0x5c>
	__asm volatile
 800403c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004040:	b672      	cpsid	i
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	b662      	cpsie	i
 8004050:	61bb      	str	r3, [r7, #24]
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	e7fd      	b.n	8004054 <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8004058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	441a      	add	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	429a      	cmp	r2, r3
 8004064:	d90d      	bls.n	8004082 <prvReadBytesFromBuffer+0x86>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	b672      	cpsid	i
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	b662      	cpsie	i
 800407a:	617b      	str	r3, [r7, #20]
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	e7fd      	b.n	800407e <prvReadBytesFromBuffer+0x82>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	699a      	ldr	r2, [r3, #24]
 8004086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004088:	4413      	add	r3, r2
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	4619      	mov	r1, r3
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f002 fa70 	bl	8006574 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8004094:	6a3a      	ldr	r2, [r7, #32]
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	429a      	cmp	r2, r3
 800409a:	d91c      	bls.n	80040d6 <prvReadBytesFromBuffer+0xda>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d90d      	bls.n	80040c0 <prvReadBytesFromBuffer+0xc4>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	b672      	cpsid	i
 80040aa:	f383 8811 	msr	BASEPRI, r3
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f3bf 8f4f 	dsb	sy
 80040b6:	b662      	cpsie	i
 80040b8:	613b      	str	r3, [r7, #16]
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	e7fd      	b.n	80040bc <prvReadBytesFromBuffer+0xc0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	18d0      	adds	r0, r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6999      	ldr	r1, [r3, #24]
 80040ca:	6a3a      	ldr	r2, [r7, #32]
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	461a      	mov	r2, r3
 80040d2:	f002 fa4f 	bl	8006574 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	4413      	add	r3, r2
 80040dc:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d304      	bcc.n	80040f2 <prvReadBytesFromBuffer+0xf6>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80040f8:	6a3b      	ldr	r3, [r7, #32]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3728      	adds	r7, #40	@ 0x28
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4413      	add	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	429a      	cmp	r2, r3
 8004128:	d304      	bcc.n	8004134 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004134:	68fb      	ldr	r3, [r7, #12]
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	60f8      	str	r0, [r7, #12]
 800414a:	60b9      	str	r1, [r7, #8]
 800414c:	607a      	str	r2, [r7, #4]
 800414e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8004150:	2355      	movs	r3, #85	@ 0x55
 8004152:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8004154:	687a      	ldr	r2, [r7, #4]
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	68b8      	ldr	r0, [r7, #8]
 800415a:	f002 f987 	bl	800646c <memset>
 800415e:	4602      	mov	r2, r0
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4293      	cmp	r3, r2
 8004164:	d00d      	beq.n	8004182 <prvInitialiseNewStreamBuffer+0x40>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416a:	b672      	cpsid	i
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	b662      	cpsie	i
 800417a:	613b      	str	r3, [r7, #16]
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	e7fd      	b.n	800417e <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8004182:	2224      	movs	r2, #36	@ 0x24
 8004184:	2100      	movs	r1, #0
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f002 f970 	bl	800646c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041a4:	771a      	strb	r2, [r3, #28]
}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08e      	sub	sp, #56	@ 0x38
 80041b2:	af04      	add	r7, sp, #16
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10d      	bne.n	80041de <xTaskCreateStatic+0x30>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	b672      	cpsid	i
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	b662      	cpsie	i
 80041d6:	623b      	str	r3, [r7, #32]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80041de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10d      	bne.n	8004200 <xTaskCreateStatic+0x52>
	__asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e8:	b672      	cpsid	i
 80041ea:	f383 8811 	msr	BASEPRI, r3
 80041ee:	f3bf 8f6f 	isb	sy
 80041f2:	f3bf 8f4f 	dsb	sy
 80041f6:	b662      	cpsie	i
 80041f8:	61fb      	str	r3, [r7, #28]
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004200:	23a8      	movs	r3, #168	@ 0xa8
 8004202:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	2ba8      	cmp	r3, #168	@ 0xa8
 8004208:	d00d      	beq.n	8004226 <xTaskCreateStatic+0x78>
	__asm volatile
 800420a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420e:	b672      	cpsid	i
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	b662      	cpsie	i
 800421e:	61bb      	str	r3, [r7, #24]
}
 8004220:	bf00      	nop
 8004222:	bf00      	nop
 8004224:	e7fd      	b.n	8004222 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004226:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422a:	2b00      	cmp	r3, #0
 800422c:	d01e      	beq.n	800426c <xTaskCreateStatic+0xbe>
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	2202      	movs	r2, #2
 8004242:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004246:	2300      	movs	r3, #0
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	f107 0314 	add.w	r3, r7, #20
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f000 f850 	bl	8004304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004264:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004266:	f000 f8f7 	bl	8004458 <prvAddNewTaskToReadyList>
 800426a:	e001      	b.n	8004270 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004270:	697b      	ldr	r3, [r7, #20]
	}
 8004272:	4618      	mov	r0, r3
 8004274:	3728      	adds	r7, #40	@ 0x28
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800427a:	b580      	push	{r7, lr}
 800427c:	b08c      	sub	sp, #48	@ 0x30
 800427e:	af04      	add	r7, sp, #16
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	603b      	str	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800428a:	88fb      	ldrh	r3, [r7, #6]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4618      	mov	r0, r3
 8004290:	f001 ff02 	bl	8006098 <pvPortMalloc>
 8004294:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00e      	beq.n	80042ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800429c:	20a8      	movs	r0, #168	@ 0xa8
 800429e:	f001 fefb 	bl	8006098 <pvPortMalloc>
 80042a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80042b0:	e005      	b.n	80042be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042b2:	6978      	ldr	r0, [r7, #20]
 80042b4:	f001 ffbe 	bl	8006234 <vPortFree>
 80042b8:	e001      	b.n	80042be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d017      	beq.n	80042f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80042cc:	88fa      	ldrh	r2, [r7, #6]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9303      	str	r3, [sp, #12]
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	9302      	str	r3, [sp, #8]
 80042d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68b9      	ldr	r1, [r7, #8]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 f80e 	bl	8004304 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042e8:	69f8      	ldr	r0, [r7, #28]
 80042ea:	f000 f8b5 	bl	8004458 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80042ee:	2301      	movs	r3, #1
 80042f0:	61bb      	str	r3, [r7, #24]
 80042f2:	e002      	b.n	80042fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80042f4:	f04f 33ff 	mov.w	r3, #4294967295
 80042f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80042fa:	69bb      	ldr	r3, [r7, #24]
	}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3720      	adds	r7, #32
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
 8004310:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	461a      	mov	r2, r3
 800431c:	21a5      	movs	r1, #165	@ 0xa5
 800431e:	f002 f8a5 	bl	800646c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800432c:	440b      	add	r3, r1
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4413      	add	r3, r2
 8004332:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	f023 0307 	bic.w	r3, r3, #7
 800433a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00d      	beq.n	8004362 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8004346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800434a:	b672      	cpsid	i
 800434c:	f383 8811 	msr	BASEPRI, r3
 8004350:	f3bf 8f6f 	isb	sy
 8004354:	f3bf 8f4f 	dsb	sy
 8004358:	b662      	cpsie	i
 800435a:	617b      	str	r3, [r7, #20]
}
 800435c:	bf00      	nop
 800435e:	bf00      	nop
 8004360:	e7fd      	b.n	800435e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d01f      	beq.n	80043a8 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004368:	2300      	movs	r3, #0
 800436a:	61fb      	str	r3, [r7, #28]
 800436c:	e012      	b.n	8004394 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	4413      	add	r3, r2
 8004374:	7819      	ldrb	r1, [r3, #0]
 8004376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	3334      	adds	r3, #52	@ 0x34
 800437e:	460a      	mov	r2, r1
 8004380:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d006      	beq.n	800439c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3301      	adds	r3, #1
 8004392:	61fb      	str	r3, [r7, #28]
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b0f      	cmp	r3, #15
 8004398:	d9e9      	bls.n	800436e <prvInitialiseNewTask+0x6a>
 800439a:	e000      	b.n	800439e <prvInitialiseNewTask+0x9a>
			{
				break;
 800439c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800439e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043a6:	e003      	b.n	80043b0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b2:	2b37      	cmp	r3, #55	@ 0x37
 80043b4:	d901      	bls.n	80043ba <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043b6:	2337      	movs	r3, #55	@ 0x37
 80043b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	2200      	movs	r2, #0
 80043ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ce:	3304      	adds	r3, #4
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7fe fd09 	bl	8002de8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d8:	3318      	adds	r3, #24
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd04 	bl	8002de8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	2200      	movs	r2, #0
 80043fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004400:	2200      	movs	r2, #0
 8004402:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004408:	3354      	adds	r3, #84	@ 0x54
 800440a:	224c      	movs	r2, #76	@ 0x4c
 800440c:	2100      	movs	r1, #0
 800440e:	4618      	mov	r0, r3
 8004410:	f002 f82c 	bl	800646c <memset>
 8004414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004416:	4a0d      	ldr	r2, [pc, #52]	@ (800444c <prvInitialiseNewTask+0x148>)
 8004418:	659a      	str	r2, [r3, #88]	@ 0x58
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	4a0c      	ldr	r2, [pc, #48]	@ (8004450 <prvInitialiseNewTask+0x14c>)
 800441e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004422:	4a0c      	ldr	r2, [pc, #48]	@ (8004454 <prvInitialiseNewTask+0x150>)
 8004424:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	68f9      	ldr	r1, [r7, #12]
 800442a:	69b8      	ldr	r0, [r7, #24]
 800442c:	f001 fbfa 	bl	8005c24 <pxPortInitialiseStack>
 8004430:	4602      	mov	r2, r0
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800443c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800443e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20004ad8 	.word	0x20004ad8
 8004450:	20004b40 	.word	0x20004b40
 8004454:	20004ba8 	.word	0x20004ba8

08004458 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004460:	f001 fcec 	bl	8005e3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004464:	4b2d      	ldr	r3, [pc, #180]	@ (800451c <prvAddNewTaskToReadyList+0xc4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	3301      	adds	r3, #1
 800446a:	4a2c      	ldr	r2, [pc, #176]	@ (800451c <prvAddNewTaskToReadyList+0xc4>)
 800446c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800446e:	4b2c      	ldr	r3, [pc, #176]	@ (8004520 <prvAddNewTaskToReadyList+0xc8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d109      	bne.n	800448a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004476:	4a2a      	ldr	r2, [pc, #168]	@ (8004520 <prvAddNewTaskToReadyList+0xc8>)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800447c:	4b27      	ldr	r3, [pc, #156]	@ (800451c <prvAddNewTaskToReadyList+0xc4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d110      	bne.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004484:	f000 fc6e 	bl	8004d64 <prvInitialiseTaskLists>
 8004488:	e00d      	b.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800448a:	4b26      	ldr	r3, [pc, #152]	@ (8004524 <prvAddNewTaskToReadyList+0xcc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d109      	bne.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004492:	4b23      	ldr	r3, [pc, #140]	@ (8004520 <prvAddNewTaskToReadyList+0xc8>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d802      	bhi.n	80044a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004520 <prvAddNewTaskToReadyList+0xc8>)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044a6:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <prvAddNewTaskToReadyList+0xd0>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	3301      	adds	r3, #1
 80044ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004528 <prvAddNewTaskToReadyList+0xd0>)
 80044ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004528 <prvAddNewTaskToReadyList+0xd0>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044bc:	4b1b      	ldr	r3, [pc, #108]	@ (800452c <prvAddNewTaskToReadyList+0xd4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d903      	bls.n	80044cc <prvAddNewTaskToReadyList+0x74>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	4a18      	ldr	r2, [pc, #96]	@ (800452c <prvAddNewTaskToReadyList+0xd4>)
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d0:	4613      	mov	r3, r2
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	4413      	add	r3, r2
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4a15      	ldr	r2, [pc, #84]	@ (8004530 <prvAddNewTaskToReadyList+0xd8>)
 80044da:	441a      	add	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3304      	adds	r3, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	4610      	mov	r0, r2
 80044e4:	f7fe fc8d 	bl	8002e02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80044e8:	f001 fcde 	bl	8005ea8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80044ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004524 <prvAddNewTaskToReadyList+0xcc>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00e      	beq.n	8004512 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80044f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004520 <prvAddNewTaskToReadyList+0xc8>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d207      	bcs.n	8004512 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004502:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <prvAddNewTaskToReadyList+0xdc>)
 8004504:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004512:	bf00      	nop
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000d60 	.word	0x20000d60
 8004520:	2000088c 	.word	0x2000088c
 8004524:	20000d6c 	.word	0x20000d6c
 8004528:	20000d7c 	.word	0x20000d7c
 800452c:	20000d68 	.word	0x20000d68
 8004530:	20000890 	.word	0x20000890
 8004534:	e000ed04 	.word	0xe000ed04

08004538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01a      	beq.n	8004580 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <vTaskDelay+0x68>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00d      	beq.n	800456e <vTaskDelay+0x36>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	b672      	cpsid	i
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	b662      	cpsie	i
 8004566:	60bb      	str	r3, [r7, #8]
}
 8004568:	bf00      	nop
 800456a:	bf00      	nop
 800456c:	e7fd      	b.n	800456a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800456e:	f000 f88f 	bl	8004690 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004572:	2100      	movs	r1, #0
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 ff99 	bl	80054ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800457a:	f000 f897 	bl	80046ac <xTaskResumeAll>
 800457e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d107      	bne.n	8004596 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8004586:	4b07      	ldr	r3, [pc, #28]	@ (80045a4 <vTaskDelay+0x6c>)
 8004588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004596:	bf00      	nop
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000d88 	.word	0x20000d88
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08a      	sub	sp, #40	@ 0x28
 80045ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045b6:	463a      	mov	r2, r7
 80045b8:	1d39      	adds	r1, r7, #4
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fbbe 	bl	8002d40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045c4:	6839      	ldr	r1, [r7, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	9202      	str	r2, [sp, #8]
 80045cc:	9301      	str	r3, [sp, #4]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	460a      	mov	r2, r1
 80045d6:	4926      	ldr	r1, [pc, #152]	@ (8004670 <vTaskStartScheduler+0xc8>)
 80045d8:	4826      	ldr	r0, [pc, #152]	@ (8004674 <vTaskStartScheduler+0xcc>)
 80045da:	f7ff fde8 	bl	80041ae <xTaskCreateStatic>
 80045de:	4603      	mov	r3, r0
 80045e0:	4a25      	ldr	r2, [pc, #148]	@ (8004678 <vTaskStartScheduler+0xd0>)
 80045e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80045e4:	4b24      	ldr	r3, [pc, #144]	@ (8004678 <vTaskStartScheduler+0xd0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80045ec:	2301      	movs	r3, #1
 80045ee:	617b      	str	r3, [r7, #20]
 80045f0:	e001      	b.n	80045f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d102      	bne.n	8004602 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80045fc:	f000 ffaa 	bl	8005554 <xTimerCreateTimerTask>
 8004600:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d11d      	bne.n	8004644 <vTaskStartScheduler+0x9c>
	__asm volatile
 8004608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800460c:	b672      	cpsid	i
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	b662      	cpsie	i
 800461c:	613b      	str	r3, [r7, #16]
}
 800461e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004620:	4b16      	ldr	r3, [pc, #88]	@ (800467c <vTaskStartScheduler+0xd4>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3354      	adds	r3, #84	@ 0x54
 8004626:	4a16      	ldr	r2, [pc, #88]	@ (8004680 <vTaskStartScheduler+0xd8>)
 8004628:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800462a:	4b16      	ldr	r3, [pc, #88]	@ (8004684 <vTaskStartScheduler+0xdc>)
 800462c:	f04f 32ff 	mov.w	r2, #4294967295
 8004630:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004632:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <vTaskStartScheduler+0xe0>)
 8004634:	2201      	movs	r2, #1
 8004636:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004638:	4b14      	ldr	r3, [pc, #80]	@ (800468c <vTaskStartScheduler+0xe4>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800463e:	f001 fb7f 	bl	8005d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004642:	e011      	b.n	8004668 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	d10d      	bne.n	8004668 <vTaskStartScheduler+0xc0>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004650:	b672      	cpsid	i
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	b662      	cpsie	i
 8004660:	60fb      	str	r3, [r7, #12]
}
 8004662:	bf00      	nop
 8004664:	bf00      	nop
 8004666:	e7fd      	b.n	8004664 <vTaskStartScheduler+0xbc>
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08006680 	.word	0x08006680
 8004674:	08004d35 	.word	0x08004d35
 8004678:	20000d84 	.word	0x20000d84
 800467c:	2000088c 	.word	0x2000088c
 8004680:	20000010 	.word	0x20000010
 8004684:	20000d80 	.word	0x20000d80
 8004688:	20000d6c 	.word	0x20000d6c
 800468c:	20000d64 	.word	0x20000d64

08004690 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004694:	4b04      	ldr	r3, [pc, #16]	@ (80046a8 <vTaskSuspendAll+0x18>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a03      	ldr	r2, [pc, #12]	@ (80046a8 <vTaskSuspendAll+0x18>)
 800469c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800469e:	bf00      	nop
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	20000d88 	.word	0x20000d88

080046ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046b2:	2300      	movs	r3, #0
 80046b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046b6:	2300      	movs	r3, #0
 80046b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ba:	4b43      	ldr	r3, [pc, #268]	@ (80047c8 <xTaskResumeAll+0x11c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10d      	bne.n	80046de <xTaskResumeAll+0x32>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	b672      	cpsid	i
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	b662      	cpsie	i
 80046d6:	603b      	str	r3, [r7, #0]
}
 80046d8:	bf00      	nop
 80046da:	bf00      	nop
 80046dc:	e7fd      	b.n	80046da <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80046de:	f001 fbad 	bl	8005e3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80046e2:	4b39      	ldr	r3, [pc, #228]	@ (80047c8 <xTaskResumeAll+0x11c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4a37      	ldr	r2, [pc, #220]	@ (80047c8 <xTaskResumeAll+0x11c>)
 80046ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ec:	4b36      	ldr	r3, [pc, #216]	@ (80047c8 <xTaskResumeAll+0x11c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d162      	bne.n	80047ba <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046f4:	4b35      	ldr	r3, [pc, #212]	@ (80047cc <xTaskResumeAll+0x120>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d05e      	beq.n	80047ba <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046fc:	e02f      	b.n	800475e <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fe:	4b34      	ldr	r3, [pc, #208]	@ (80047d0 <xTaskResumeAll+0x124>)
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	3318      	adds	r3, #24
 800470a:	4618      	mov	r0, r3
 800470c:	f7fe fbd6 	bl	8002ebc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3304      	adds	r3, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fbd1 	bl	8002ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471e:	4b2d      	ldr	r3, [pc, #180]	@ (80047d4 <xTaskResumeAll+0x128>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d903      	bls.n	800472e <xTaskResumeAll+0x82>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	4a2a      	ldr	r2, [pc, #168]	@ (80047d4 <xTaskResumeAll+0x128>)
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004732:	4613      	mov	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	4413      	add	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4a27      	ldr	r2, [pc, #156]	@ (80047d8 <xTaskResumeAll+0x12c>)
 800473c:	441a      	add	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3304      	adds	r3, #4
 8004742:	4619      	mov	r1, r3
 8004744:	4610      	mov	r0, r2
 8004746:	f7fe fb5c 	bl	8002e02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474e:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <xTaskResumeAll+0x130>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	429a      	cmp	r2, r3
 8004756:	d302      	bcc.n	800475e <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8004758:	4b21      	ldr	r3, [pc, #132]	@ (80047e0 <xTaskResumeAll+0x134>)
 800475a:	2201      	movs	r2, #1
 800475c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475e:	4b1c      	ldr	r3, [pc, #112]	@ (80047d0 <xTaskResumeAll+0x124>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d1cb      	bne.n	80046fe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d001      	beq.n	8004770 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800476c:	f000 fba0 	bl	8004eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004770:	4b1c      	ldr	r3, [pc, #112]	@ (80047e4 <xTaskResumeAll+0x138>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d010      	beq.n	800479e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800477c:	f000 f846 	bl	800480c <xTaskIncrementTick>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8004786:	4b16      	ldr	r3, [pc, #88]	@ (80047e0 <xTaskResumeAll+0x134>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	3b01      	subs	r3, #1
 8004790:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f1      	bne.n	800477c <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004798:	4b12      	ldr	r3, [pc, #72]	@ (80047e4 <xTaskResumeAll+0x138>)
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800479e:	4b10      	ldr	r3, [pc, #64]	@ (80047e0 <xTaskResumeAll+0x134>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d009      	beq.n	80047ba <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047a6:	2301      	movs	r3, #1
 80047a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047aa:	4b0f      	ldr	r3, [pc, #60]	@ (80047e8 <xTaskResumeAll+0x13c>)
 80047ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047ba:	f001 fb75 	bl	8005ea8 <vPortExitCritical>

	return xAlreadyYielded;
 80047be:	68bb      	ldr	r3, [r7, #8]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000d88 	.word	0x20000d88
 80047cc:	20000d60 	.word	0x20000d60
 80047d0:	20000d20 	.word	0x20000d20
 80047d4:	20000d68 	.word	0x20000d68
 80047d8:	20000890 	.word	0x20000890
 80047dc:	2000088c 	.word	0x2000088c
 80047e0:	20000d74 	.word	0x20000d74
 80047e4:	20000d70 	.word	0x20000d70
 80047e8:	e000ed04 	.word	0xe000ed04

080047ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80047f2:	4b05      	ldr	r3, [pc, #20]	@ (8004808 <xTaskGetTickCount+0x1c>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80047f8:	687b      	ldr	r3, [r7, #4]
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000d64 	.word	0x20000d64

0800480c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004816:	4b50      	ldr	r3, [pc, #320]	@ (8004958 <xTaskIncrementTick+0x14c>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 808c 	bne.w	8004938 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004820:	4b4e      	ldr	r3, [pc, #312]	@ (800495c <xTaskIncrementTick+0x150>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004828:	4a4c      	ldr	r2, [pc, #304]	@ (800495c <xTaskIncrementTick+0x150>)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d123      	bne.n	800487c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004834:	4b4a      	ldr	r3, [pc, #296]	@ (8004960 <xTaskIncrementTick+0x154>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00d      	beq.n	800485a <xTaskIncrementTick+0x4e>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	b672      	cpsid	i
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	b662      	cpsie	i
 8004852:	603b      	str	r3, [r7, #0]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <xTaskIncrementTick+0x4a>
 800485a:	4b41      	ldr	r3, [pc, #260]	@ (8004960 <xTaskIncrementTick+0x154>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	60fb      	str	r3, [r7, #12]
 8004860:	4b40      	ldr	r3, [pc, #256]	@ (8004964 <xTaskIncrementTick+0x158>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3e      	ldr	r2, [pc, #248]	@ (8004960 <xTaskIncrementTick+0x154>)
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4a3e      	ldr	r2, [pc, #248]	@ (8004964 <xTaskIncrementTick+0x158>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b3e      	ldr	r3, [pc, #248]	@ (8004968 <xTaskIncrementTick+0x15c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a3c      	ldr	r2, [pc, #240]	@ (8004968 <xTaskIncrementTick+0x15c>)
 8004876:	6013      	str	r3, [r2, #0]
 8004878:	f000 fb1a 	bl	8004eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800487c:	4b3b      	ldr	r3, [pc, #236]	@ (800496c <xTaskIncrementTick+0x160>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d349      	bcc.n	800491a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004886:	4b36      	ldr	r3, [pc, #216]	@ (8004960 <xTaskIncrementTick+0x154>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d104      	bne.n	800489a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004890:	4b36      	ldr	r3, [pc, #216]	@ (800496c <xTaskIncrementTick+0x160>)
 8004892:	f04f 32ff 	mov.w	r2, #4294967295
 8004896:	601a      	str	r2, [r3, #0]
					break;
 8004898:	e03f      	b.n	800491a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800489a:	4b31      	ldr	r3, [pc, #196]	@ (8004960 <xTaskIncrementTick+0x154>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d203      	bcs.n	80048ba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048b2:	4a2e      	ldr	r2, [pc, #184]	@ (800496c <xTaskIncrementTick+0x160>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048b8:	e02f      	b.n	800491a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	3304      	adds	r3, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fe fafc 	bl	8002ebc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d004      	beq.n	80048d6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3318      	adds	r3, #24
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fe faf3 	bl	8002ebc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048da:	4b25      	ldr	r3, [pc, #148]	@ (8004970 <xTaskIncrementTick+0x164>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	429a      	cmp	r2, r3
 80048e0:	d903      	bls.n	80048ea <xTaskIncrementTick+0xde>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	4a22      	ldr	r2, [pc, #136]	@ (8004970 <xTaskIncrementTick+0x164>)
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a1f      	ldr	r2, [pc, #124]	@ (8004974 <xTaskIncrementTick+0x168>)
 80048f8:	441a      	add	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f7fe fa7e 	bl	8002e02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490a:	4b1b      	ldr	r3, [pc, #108]	@ (8004978 <xTaskIncrementTick+0x16c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004910:	429a      	cmp	r2, r3
 8004912:	d3b8      	bcc.n	8004886 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004918:	e7b5      	b.n	8004886 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800491a:	4b17      	ldr	r3, [pc, #92]	@ (8004978 <xTaskIncrementTick+0x16c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004920:	4914      	ldr	r1, [pc, #80]	@ (8004974 <xTaskIncrementTick+0x168>)
 8004922:	4613      	mov	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d907      	bls.n	8004942 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	e004      	b.n	8004942 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004938:	4b10      	ldr	r3, [pc, #64]	@ (800497c <xTaskIncrementTick+0x170>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	4a0f      	ldr	r2, [pc, #60]	@ (800497c <xTaskIncrementTick+0x170>)
 8004940:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004942:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <xTaskIncrementTick+0x174>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800494a:	2301      	movs	r3, #1
 800494c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800494e:	697b      	ldr	r3, [r7, #20]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	20000d88 	.word	0x20000d88
 800495c:	20000d64 	.word	0x20000d64
 8004960:	20000d18 	.word	0x20000d18
 8004964:	20000d1c 	.word	0x20000d1c
 8004968:	20000d78 	.word	0x20000d78
 800496c:	20000d80 	.word	0x20000d80
 8004970:	20000d68 	.word	0x20000d68
 8004974:	20000890 	.word	0x20000890
 8004978:	2000088c 	.word	0x2000088c
 800497c:	20000d70 	.word	0x20000d70
 8004980:	20000d74 	.word	0x20000d74

08004984 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800498a:	4b2c      	ldr	r3, [pc, #176]	@ (8004a3c <vTaskSwitchContext+0xb8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004992:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <vTaskSwitchContext+0xbc>)
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004998:	e049      	b.n	8004a2e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800499a:	4b29      	ldr	r3, [pc, #164]	@ (8004a40 <vTaskSwitchContext+0xbc>)
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049a0:	4b28      	ldr	r3, [pc, #160]	@ (8004a44 <vTaskSwitchContext+0xc0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e013      	b.n	80049d0 <vTaskSwitchContext+0x4c>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d10d      	bne.n	80049ca <vTaskSwitchContext+0x46>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	607b      	str	r3, [r7, #4]
}
 80049c4:	bf00      	nop
 80049c6:	bf00      	nop
 80049c8:	e7fd      	b.n	80049c6 <vTaskSwitchContext+0x42>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	491d      	ldr	r1, [pc, #116]	@ (8004a48 <vTaskSwitchContext+0xc4>)
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	440b      	add	r3, r1
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0e1      	beq.n	80049a8 <vTaskSwitchContext+0x24>
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4a16      	ldr	r2, [pc, #88]	@ (8004a48 <vTaskSwitchContext+0xc4>)
 80049f0:	4413      	add	r3, r2
 80049f2:	60bb      	str	r3, [r7, #8]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	685a      	ldr	r2, [r3, #4]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	3308      	adds	r3, #8
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d104      	bne.n	8004a14 <vTaskSwitchContext+0x90>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	605a      	str	r2, [r3, #4]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004a4c <vTaskSwitchContext+0xc8>)
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	4a09      	ldr	r2, [pc, #36]	@ (8004a44 <vTaskSwitchContext+0xc0>)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <vTaskSwitchContext+0xc8>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3354      	adds	r3, #84	@ 0x54
 8004a2a:	4a09      	ldr	r2, [pc, #36]	@ (8004a50 <vTaskSwitchContext+0xcc>)
 8004a2c:	6013      	str	r3, [r2, #0]
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	20000d88 	.word	0x20000d88
 8004a40:	20000d74 	.word	0x20000d74
 8004a44:	20000d68 	.word	0x20000d68
 8004a48:	20000890 	.word	0x20000890
 8004a4c:	2000088c 	.word	0x2000088c
 8004a50:	20000010 	.word	0x20000010

08004a54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10d      	bne.n	8004a80 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	b672      	cpsid	i
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	b662      	cpsie	i
 8004a78:	60fb      	str	r3, [r7, #12]
}
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a80:	4b07      	ldr	r3, [pc, #28]	@ (8004aa0 <vTaskPlaceOnEventList+0x4c>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	3318      	adds	r3, #24
 8004a86:	4619      	mov	r1, r3
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7fe f9de 	bl	8002e4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a8e:	2101      	movs	r1, #1
 8004a90:	6838      	ldr	r0, [r7, #0]
 8004a92:	f000 fd0b 	bl	80054ac <prvAddCurrentTaskToDelayedList>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000088c 	.word	0x2000088c

08004aa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d10d      	bne.n	8004ad2 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aba:	b672      	cpsid	i
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	b662      	cpsie	i
 8004aca:	617b      	str	r3, [r7, #20]
}
 8004acc:	bf00      	nop
 8004ace:	bf00      	nop
 8004ad0:	e7fd      	b.n	8004ace <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <vTaskPlaceOnEventListRestricted+0x58>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3318      	adds	r3, #24
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7fe f991 	bl	8002e02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8004ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8004aea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004aec:	6879      	ldr	r1, [r7, #4]
 8004aee:	68b8      	ldr	r0, [r7, #8]
 8004af0:	f000 fcdc 	bl	80054ac <prvAddCurrentTaskToDelayedList>
	}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	2000088c 	.word	0x2000088c

08004b00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10d      	bne.n	8004b32 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1a:	b672      	cpsid	i
 8004b1c:	f383 8811 	msr	BASEPRI, r3
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	f3bf 8f4f 	dsb	sy
 8004b28:	b662      	cpsie	i
 8004b2a:	60fb      	str	r3, [r7, #12]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	3318      	adds	r3, #24
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe f9c0 	bl	8002ebc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004bb4 <xTaskRemoveFromEventList+0xb4>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d11d      	bne.n	8004b80 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	3304      	adds	r3, #4
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f7fe f9b7 	bl	8002ebc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b52:	4b19      	ldr	r3, [pc, #100]	@ (8004bb8 <xTaskRemoveFromEventList+0xb8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d903      	bls.n	8004b62 <xTaskRemoveFromEventList+0x62>
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <xTaskRemoveFromEventList+0xb8>)
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a13      	ldr	r2, [pc, #76]	@ (8004bbc <xTaskRemoveFromEventList+0xbc>)
 8004b70:	441a      	add	r2, r3
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fe f942 	bl	8002e02 <vListInsertEnd>
 8004b7e:	e005      	b.n	8004b8c <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	3318      	adds	r3, #24
 8004b84:	4619      	mov	r1, r3
 8004b86:	480e      	ldr	r0, [pc, #56]	@ (8004bc0 <xTaskRemoveFromEventList+0xc0>)
 8004b88:	f7fe f93b 	bl	8002e02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <xTaskRemoveFromEventList+0xc4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d905      	bls.n	8004ba6 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <xTaskRemoveFromEventList+0xc8>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	e001      	b.n	8004baa <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004baa:	697b      	ldr	r3, [r7, #20]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000d88 	.word	0x20000d88
 8004bb8:	20000d68 	.word	0x20000d68
 8004bbc:	20000890 	.word	0x20000890
 8004bc0:	20000d20 	.word	0x20000d20
 8004bc4:	2000088c 	.word	0x2000088c
 8004bc8:	20000d74 	.word	0x20000d74

08004bcc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8004bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bde:	b672      	cpsid	i
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	b662      	cpsie	i
 8004bee:	60fb      	str	r3, [r7, #12]
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	e7fd      	b.n	8004bf2 <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8004bf6:	f001 f921 	bl	8005e3c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bfa:	4b07      	ldr	r3, [pc, #28]	@ (8004c18 <vTaskSetTimeOutState+0x4c>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8004c02:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <vTaskSetTimeOutState+0x50>)
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8004c0a:	f001 f94d 	bl	8005ea8 <vPortExitCritical>
}
 8004c0e:	bf00      	nop
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	20000d78 	.word	0x20000d78
 8004c1c:	20000d64 	.word	0x20000d64

08004c20 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c28:	4b06      	ldr	r3, [pc, #24]	@ (8004c44 <vTaskInternalSetTimeOutState+0x24>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <vTaskInternalSetTimeOutState+0x28>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]
}
 8004c38:	bf00      	nop
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	20000d78 	.word	0x20000d78
 8004c48:	20000d64 	.word	0x20000d64

08004c4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	b672      	cpsid	i
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	b662      	cpsie	i
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c82:	b672      	cpsid	i
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	b662      	cpsie	i
 8004c92:	60fb      	str	r3, [r7, #12]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004c9a:	f001 f8cf 	bl	8005e3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c9e:	4b1d      	ldr	r3, [pc, #116]	@ (8004d14 <xTaskCheckForTimeOut+0xc8>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb6:	d102      	bne.n	8004cbe <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e023      	b.n	8004d06 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	4b15      	ldr	r3, [pc, #84]	@ (8004d18 <xTaskCheckForTimeOut+0xcc>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d007      	beq.n	8004cda <xTaskCheckForTimeOut+0x8e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	69ba      	ldr	r2, [r7, #24]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d302      	bcc.n	8004cda <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	61fb      	str	r3, [r7, #28]
 8004cd8:	e015      	b.n	8004d06 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d20b      	bcs.n	8004cfc <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad2      	subs	r2, r2, r3
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff95 	bl	8004c20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	e004      	b.n	8004d06 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d02:	2301      	movs	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d06:	f001 f8cf 	bl	8005ea8 <vPortExitCritical>

	return xReturn;
 8004d0a:	69fb      	ldr	r3, [r7, #28]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3720      	adds	r7, #32
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000d64 	.word	0x20000d64
 8004d18:	20000d78 	.word	0x20000d78

08004d1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d20:	4b03      	ldr	r3, [pc, #12]	@ (8004d30 <vTaskMissedYield+0x14>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
}
 8004d26:	bf00      	nop
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	20000d74 	.word	0x20000d74

08004d34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d3c:	f000 f852 	bl	8004de4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d40:	4b06      	ldr	r3, [pc, #24]	@ (8004d5c <prvIdleTask+0x28>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d9f9      	bls.n	8004d3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <prvIdleTask+0x2c>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d58:	e7f0      	b.n	8004d3c <prvIdleTask+0x8>
 8004d5a:	bf00      	nop
 8004d5c:	20000890 	.word	0x20000890
 8004d60:	e000ed04 	.word	0xe000ed04

08004d64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	607b      	str	r3, [r7, #4]
 8004d6e:	e00c      	b.n	8004d8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	009b      	lsls	r3, r3, #2
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <prvInitialiseTaskLists+0x60>)
 8004d7c:	4413      	add	r3, r2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7fe f812 	bl	8002da8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b37      	cmp	r3, #55	@ 0x37
 8004d8e:	d9ef      	bls.n	8004d70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d90:	480d      	ldr	r0, [pc, #52]	@ (8004dc8 <prvInitialiseTaskLists+0x64>)
 8004d92:	f7fe f809 	bl	8002da8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d96:	480d      	ldr	r0, [pc, #52]	@ (8004dcc <prvInitialiseTaskLists+0x68>)
 8004d98:	f7fe f806 	bl	8002da8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d9c:	480c      	ldr	r0, [pc, #48]	@ (8004dd0 <prvInitialiseTaskLists+0x6c>)
 8004d9e:	f7fe f803 	bl	8002da8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004da2:	480c      	ldr	r0, [pc, #48]	@ (8004dd4 <prvInitialiseTaskLists+0x70>)
 8004da4:	f7fe f800 	bl	8002da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004da8:	480b      	ldr	r0, [pc, #44]	@ (8004dd8 <prvInitialiseTaskLists+0x74>)
 8004daa:	f7fd fffd 	bl	8002da8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dae:	4b0b      	ldr	r3, [pc, #44]	@ (8004ddc <prvInitialiseTaskLists+0x78>)
 8004db0:	4a05      	ldr	r2, [pc, #20]	@ (8004dc8 <prvInitialiseTaskLists+0x64>)
 8004db2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004db4:	4b0a      	ldr	r3, [pc, #40]	@ (8004de0 <prvInitialiseTaskLists+0x7c>)
 8004db6:	4a05      	ldr	r2, [pc, #20]	@ (8004dcc <prvInitialiseTaskLists+0x68>)
 8004db8:	601a      	str	r2, [r3, #0]
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000890 	.word	0x20000890
 8004dc8:	20000cf0 	.word	0x20000cf0
 8004dcc:	20000d04 	.word	0x20000d04
 8004dd0:	20000d20 	.word	0x20000d20
 8004dd4:	20000d34 	.word	0x20000d34
 8004dd8:	20000d4c 	.word	0x20000d4c
 8004ddc:	20000d18 	.word	0x20000d18
 8004de0:	20000d1c 	.word	0x20000d1c

08004de4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dea:	e019      	b.n	8004e20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dec:	f001 f826 	bl	8005e3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004df0:	4b10      	ldr	r3, [pc, #64]	@ (8004e34 <prvCheckTasksWaitingTermination+0x50>)
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f7fe f85d 	bl	8002ebc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e02:	4b0d      	ldr	r3, [pc, #52]	@ (8004e38 <prvCheckTasksWaitingTermination+0x54>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	4a0b      	ldr	r2, [pc, #44]	@ (8004e38 <prvCheckTasksWaitingTermination+0x54>)
 8004e0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e3c <prvCheckTasksWaitingTermination+0x58>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	3b01      	subs	r3, #1
 8004e12:	4a0a      	ldr	r2, [pc, #40]	@ (8004e3c <prvCheckTasksWaitingTermination+0x58>)
 8004e14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e16:	f001 f847 	bl	8005ea8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f810 	bl	8004e40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e20:	4b06      	ldr	r3, [pc, #24]	@ (8004e3c <prvCheckTasksWaitingTermination+0x58>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1e1      	bne.n	8004dec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000d34 	.word	0x20000d34
 8004e38:	20000d60 	.word	0x20000d60
 8004e3c:	20000d48 	.word	0x20000d48

08004e40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3354      	adds	r3, #84	@ 0x54
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f001 fb15 	bl	800647c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d108      	bne.n	8004e6e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e60:	4618      	mov	r0, r3
 8004e62:	f001 f9e7 	bl	8006234 <vPortFree>
				vPortFree( pxTCB );
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f001 f9e4 	bl	8006234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e6c:	e01b      	b.n	8004ea6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d103      	bne.n	8004e80 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f001 f9db 	bl	8006234 <vPortFree>
	}
 8004e7e:	e012      	b.n	8004ea6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d00d      	beq.n	8004ea6 <prvDeleteTCB+0x66>
	__asm volatile
 8004e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8e:	b672      	cpsid	i
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	b662      	cpsie	i
 8004e9e:	60fb      	str	r3, [r7, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	bf00      	nop
 8004ea4:	e7fd      	b.n	8004ea2 <prvDeleteTCB+0x62>
	}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <prvResetNextTaskUnblockTime+0x38>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d104      	bne.n	8004eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8004eec <prvResetNextTaskUnblockTime+0x3c>)
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ec8:	e008      	b.n	8004edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004eca:	4b07      	ldr	r3, [pc, #28]	@ (8004ee8 <prvResetNextTaskUnblockTime+0x38>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <prvResetNextTaskUnblockTime+0x3c>)
 8004eda:	6013      	str	r3, [r2, #0]
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	20000d18 	.word	0x20000d18
 8004eec:	20000d80 	.word	0x20000d80

08004ef0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004ef6:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <xTaskGetCurrentTaskHandle+0x1c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004efc:	687b      	ldr	r3, [r7, #4]
	}
 8004efe:	4618      	mov	r0, r3
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	2000088c 	.word	0x2000088c

08004f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <xTaskGetSchedulerState+0x34>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d102      	bne.n	8004f24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	e008      	b.n	8004f36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f24:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <xTaskGetSchedulerState+0x38>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	607b      	str	r3, [r7, #4]
 8004f30:	e001      	b.n	8004f36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f32:	2300      	movs	r3, #0
 8004f34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f36:	687b      	ldr	r3, [r7, #4]
	}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	20000d6c 	.word	0x20000d6c
 8004f48:	20000d88 	.word	0x20000d88

08004f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05c      	beq.n	800501c <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f62:	4b31      	ldr	r3, [pc, #196]	@ (8005028 <xTaskPriorityDisinherit+0xdc>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d00d      	beq.n	8004f88 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	b672      	cpsid	i
 8004f72:	f383 8811 	msr	BASEPRI, r3
 8004f76:	f3bf 8f6f 	isb	sy
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	b662      	cpsie	i
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10d      	bne.n	8004fac <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8004f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f94:	b672      	cpsid	i
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	b662      	cpsie	i
 8004fa4:	60bb      	str	r3, [r7, #8]
}
 8004fa6:	bf00      	nop
 8004fa8:	bf00      	nop
 8004faa:	e7fd      	b.n	8004fa8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb0:	1e5a      	subs	r2, r3, #1
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d02c      	beq.n	800501c <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d128      	bne.n	800501c <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fd ff74 	bl	8002ebc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fec:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <xTaskPriorityDisinherit+0xe0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d903      	bls.n	8004ffc <xTaskPriorityDisinherit+0xb0>
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	4a0c      	ldr	r2, [pc, #48]	@ (800502c <xTaskPriorityDisinherit+0xe0>)
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a09      	ldr	r2, [pc, #36]	@ (8005030 <xTaskPriorityDisinherit+0xe4>)
 800500a:	441a      	add	r2, r3
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f7fd fef5 	bl	8002e02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005018:	2301      	movs	r3, #1
 800501a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800501c:	697b      	ldr	r3, [r7, #20]
	}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	2000088c 	.word	0x2000088c
 800502c:	20000d68 	.word	0x20000d68
 8005030:	20000890 	.word	0x20000890

08005034 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
 8005040:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005042:	f000 fefb 	bl	8005e3c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005046:	4b29      	ldr	r3, [pc, #164]	@ (80050ec <xTaskNotifyWait+0xb8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d01c      	beq.n	800508e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005054:	4b25      	ldr	r3, [pc, #148]	@ (80050ec <xTaskNotifyWait+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	43d2      	mvns	r2, r2
 8005060:	400a      	ands	r2, r1
 8005062:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005066:	4b21      	ldr	r3, [pc, #132]	@ (80050ec <xTaskNotifyWait+0xb8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00b      	beq.n	800508e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005076:	2101      	movs	r1, #1
 8005078:	6838      	ldr	r0, [r7, #0]
 800507a:	f000 fa17 	bl	80054ac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800507e:	4b1c      	ldr	r3, [pc, #112]	@ (80050f0 <xTaskNotifyWait+0xbc>)
 8005080:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f3bf 8f4f 	dsb	sy
 800508a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800508e:	f000 ff0b 	bl	8005ea8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005092:	f000 fed3 	bl	8005e3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800509c:	4b13      	ldr	r3, [pc, #76]	@ (80050ec <xTaskNotifyWait+0xb8>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80050a8:	4b10      	ldr	r3, [pc, #64]	@ (80050ec <xTaskNotifyWait+0xb8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80050b0:	b2db      	uxtb	r3, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d002      	beq.n	80050bc <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e00a      	b.n	80050d2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80050bc:	4b0b      	ldr	r3, [pc, #44]	@ (80050ec <xTaskNotifyWait+0xb8>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	43d2      	mvns	r2, r2
 80050c8:	400a      	ands	r2, r1
 80050ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 80050ce:	2301      	movs	r3, #1
 80050d0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050d2:	4b06      	ldr	r3, [pc, #24]	@ (80050ec <xTaskNotifyWait+0xb8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 80050dc:	f000 fee4 	bl	8005ea8 <vPortExitCritical>

		return xReturn;
 80050e0:	697b      	ldr	r3, [r7, #20]
	}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	2000088c 	.word	0x2000088c
 80050f0:	e000ed04 	.word	0xe000ed04

080050f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	@ 0x28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	603b      	str	r3, [r7, #0]
 8005100:	4613      	mov	r3, r2
 8005102:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005104:	2301      	movs	r3, #1
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d10d      	bne.n	800512a <xTaskGenericNotify+0x36>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005112:	b672      	cpsid	i
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	b662      	cpsie	i
 8005122:	61bb      	str	r3, [r7, #24]
}
 8005124:	bf00      	nop
 8005126:	bf00      	nop
 8005128:	e7fd      	b.n	8005126 <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800512e:	f000 fe85 	bl	8005e3c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d004      	beq.n	8005142 <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005148:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800514a:	6a3b      	ldr	r3, [r7, #32]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8005152:	79fb      	ldrb	r3, [r7, #7]
 8005154:	2b04      	cmp	r3, #4
 8005156:	d82e      	bhi.n	80051b6 <xTaskGenericNotify+0xc2>
 8005158:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <xTaskGenericNotify+0x6c>)
 800515a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515e:	bf00      	nop
 8005160:	080051df 	.word	0x080051df
 8005164:	08005175 	.word	0x08005175
 8005168:	08005187 	.word	0x08005187
 800516c:	08005197 	.word	0x08005197
 8005170:	080051a1 	.word	0x080051a1
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	431a      	orrs	r2, r3
 800517e:	6a3b      	ldr	r3, [r7, #32]
 8005180:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005184:	e02e      	b.n	80051e4 <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005194:	e026      	b.n	80051e4 <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005196:	6a3b      	ldr	r3, [r7, #32]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800519e:	e021      	b.n	80051e4 <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80051a0:	7ffb      	ldrb	r3, [r7, #31]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d004      	beq.n	80051b0 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80051ae:	e019      	b.n	80051e4 <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80051b4:	e016      	b.n	80051e4 <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80051bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c0:	d00f      	beq.n	80051e2 <xTaskGenericNotify+0xee>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	b672      	cpsid	i
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	b662      	cpsie	i
 80051d6:	617b      	str	r3, [r7, #20]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <xTaskGenericNotify+0xe6>
					break;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <xTaskGenericNotify+0xf0>

					break;
 80051e2:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80051e4:	7ffb      	ldrb	r3, [r7, #31]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d13d      	bne.n	8005266 <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	3304      	adds	r3, #4
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fd fe64 	bl	8002ebc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005274 <xTaskGenericNotify+0x180>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d903      	bls.n	8005208 <xTaskGenericNotify+0x114>
 8005200:	6a3b      	ldr	r3, [r7, #32]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	4a1b      	ldr	r2, [pc, #108]	@ (8005274 <xTaskGenericNotify+0x180>)
 8005206:	6013      	str	r3, [r2, #0]
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520c:	4613      	mov	r3, r2
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	4413      	add	r3, r2
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4a18      	ldr	r2, [pc, #96]	@ (8005278 <xTaskGenericNotify+0x184>)
 8005216:	441a      	add	r2, r3
 8005218:	6a3b      	ldr	r3, [r7, #32]
 800521a:	3304      	adds	r3, #4
 800521c:	4619      	mov	r1, r3
 800521e:	4610      	mov	r0, r2
 8005220:	f7fd fdef 	bl	8002e02 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00d      	beq.n	8005248 <xTaskGenericNotify+0x154>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005230:	b672      	cpsid	i
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	b662      	cpsie	i
 8005240:	613b      	str	r3, [r7, #16]
}
 8005242:	bf00      	nop
 8005244:	bf00      	nop
 8005246:	e7fd      	b.n	8005244 <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800524c:	4b0b      	ldr	r3, [pc, #44]	@ (800527c <xTaskGenericNotify+0x188>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	429a      	cmp	r2, r3
 8005254:	d907      	bls.n	8005266 <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005256:	4b0a      	ldr	r3, [pc, #40]	@ (8005280 <xTaskGenericNotify+0x18c>)
 8005258:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005266:	f000 fe1f 	bl	8005ea8 <vPortExitCritical>

		return xReturn;
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800526c:	4618      	mov	r0, r3
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20000d68 	.word	0x20000d68
 8005278:	20000890 	.word	0x20000890
 800527c:	2000088c 	.word	0x2000088c
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	@ 0x38
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	603b      	str	r3, [r7, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005294:	2301      	movs	r3, #1
 8005296:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d10d      	bne.n	80052ba <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 800529e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a2:	b672      	cpsid	i
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	b662      	cpsie	i
 80052b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	e7fd      	b.n	80052b6 <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052ba:	f000 fea7 	bl	800600c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80052c2:	f3ef 8211 	mrs	r2, BASEPRI
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	b672      	cpsid	i
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	b662      	cpsie	i
 80052da:	623a      	str	r2, [r7, #32]
 80052dc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80052de:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d004      	beq.n	80052f2 <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80052e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ea:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80052f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8005304:	79fb      	ldrb	r3, [r7, #7]
 8005306:	2b04      	cmp	r3, #4
 8005308:	d82e      	bhi.n	8005368 <xTaskGenericNotifyFromISR+0xe4>
 800530a:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <xTaskGenericNotifyFromISR+0x8c>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005391 	.word	0x08005391
 8005314:	08005325 	.word	0x08005325
 8005318:	08005337 	.word	0x08005337
 800531c:	08005347 	.word	0x08005347
 8005320:	08005351 	.word	0x08005351
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	431a      	orrs	r2, r3
 800532e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005330:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005334:	e02f      	b.n	8005396 <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005344:	e027      	b.n	8005396 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800534e:	e022      	b.n	8005396 <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005350:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005354:	2b02      	cmp	r3, #2
 8005356:	d004      	beq.n	8005362 <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005360:	e019      	b.n	8005396 <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 8005362:	2300      	movs	r3, #0
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8005366:	e016      	b.n	8005396 <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005372:	d00f      	beq.n	8005394 <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	b672      	cpsid	i
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	b662      	cpsie	i
 8005388:	61bb      	str	r3, [r7, #24]
}
 800538a:	bf00      	nop
 800538c:	bf00      	nop
 800538e:	e7fd      	b.n	800538c <xTaskGenericNotifyFromISR+0x108>
					break;
 8005390:	bf00      	nop
 8005392:	e000      	b.n	8005396 <xTaskGenericNotifyFromISR+0x112>
					break;
 8005394:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005396:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800539a:	2b01      	cmp	r3, #1
 800539c:	d149      	bne.n	8005432 <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800539e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00d      	beq.n	80053c2 <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053aa:	b672      	cpsid	i
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	b662      	cpsie	i
 80053ba:	617b      	str	r3, [r7, #20]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053c2:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <xTaskGenericNotifyFromISR+0x1c4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d11d      	bne.n	8005406 <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	3304      	adds	r3, #4
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fd fd74 	bl	8002ebc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d8:	4b1c      	ldr	r3, [pc, #112]	@ (800544c <xTaskGenericNotifyFromISR+0x1c8>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d903      	bls.n	80053e8 <xTaskGenericNotifyFromISR+0x164>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	4a19      	ldr	r2, [pc, #100]	@ (800544c <xTaskGenericNotifyFromISR+0x1c8>)
 80053e6:	6013      	str	r3, [r2, #0]
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4a16      	ldr	r2, [pc, #88]	@ (8005450 <xTaskGenericNotifyFromISR+0x1cc>)
 80053f6:	441a      	add	r2, r3
 80053f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f7fd fcff 	bl	8002e02 <vListInsertEnd>
 8005404:	e005      	b.n	8005412 <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005408:	3318      	adds	r3, #24
 800540a:	4619      	mov	r1, r3
 800540c:	4811      	ldr	r0, [pc, #68]	@ (8005454 <xTaskGenericNotifyFromISR+0x1d0>)
 800540e:	f7fd fcf8 	bl	8002e02 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005416:	4b10      	ldr	r3, [pc, #64]	@ (8005458 <xTaskGenericNotifyFromISR+0x1d4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800541c:	429a      	cmp	r2, r3
 800541e:	d908      	bls.n	8005432 <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005426:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005428:	2201      	movs	r2, #1
 800542a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800542c:	4b0b      	ldr	r3, [pc, #44]	@ (800545c <xTaskGenericNotifyFromISR+0x1d8>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005434:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f383 8811 	msr	BASEPRI, r3
}
 800543c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800543e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8005440:	4618      	mov	r0, r3
 8005442:	3738      	adds	r7, #56	@ 0x38
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000d88 	.word	0x20000d88
 800544c:	20000d68 	.word	0x20000d68
 8005450:	20000890 	.word	0x20000890
 8005454:	20000d20 	.word	0x20000d20
 8005458:	2000088c 	.word	0x2000088c
 800545c:	20000d74 	.word	0x20000d74

08005460 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d102      	bne.n	8005474 <xTaskNotifyStateClear+0x14>
 800546e:	4b0e      	ldr	r3, [pc, #56]	@ (80054a8 <xTaskNotifyStateClear+0x48>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	e000      	b.n	8005476 <xTaskNotifyStateClear+0x16>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8005478:	f000 fce0 	bl	8005e3c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d106      	bne.n	8005496 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8005490:	2301      	movs	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e001      	b.n	800549a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800549a:	f000 fd05 	bl	8005ea8 <vPortExitCritical>

		return xReturn;
 800549e:	68fb      	ldr	r3, [r7, #12]
	}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	2000088c 	.word	0x2000088c

080054ac <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
 80054b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80054b6:	4b21      	ldr	r3, [pc, #132]	@ (800553c <prvAddCurrentTaskToDelayedList+0x90>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054bc:	4b20      	ldr	r3, [pc, #128]	@ (8005540 <prvAddCurrentTaskToDelayedList+0x94>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fd fcfa 	bl	8002ebc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ce:	d10a      	bne.n	80054e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005540 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	3304      	adds	r3, #4
 80054dc:	4619      	mov	r1, r3
 80054de:	4819      	ldr	r0, [pc, #100]	@ (8005544 <prvAddCurrentTaskToDelayedList+0x98>)
 80054e0:	f7fd fc8f 	bl	8002e02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054e4:	e026      	b.n	8005534 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054ee:	4b14      	ldr	r3, [pc, #80]	@ (8005540 <prvAddCurrentTaskToDelayedList+0x94>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054f6:	68ba      	ldr	r2, [r7, #8]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d209      	bcs.n	8005512 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054fe:	4b12      	ldr	r3, [pc, #72]	@ (8005548 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005500:	681a      	ldr	r2, [r3, #0]
 8005502:	4b0f      	ldr	r3, [pc, #60]	@ (8005540 <prvAddCurrentTaskToDelayedList+0x94>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3304      	adds	r3, #4
 8005508:	4619      	mov	r1, r3
 800550a:	4610      	mov	r0, r2
 800550c:	f7fd fc9d 	bl	8002e4a <vListInsert>
}
 8005510:	e010      	b.n	8005534 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005512:	4b0e      	ldr	r3, [pc, #56]	@ (800554c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <prvAddCurrentTaskToDelayedList+0x94>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	3304      	adds	r3, #4
 800551c:	4619      	mov	r1, r3
 800551e:	4610      	mov	r0, r2
 8005520:	f7fd fc93 	bl	8002e4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	429a      	cmp	r2, r3
 800552c:	d202      	bcs.n	8005534 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800552e:	4a08      	ldr	r2, [pc, #32]	@ (8005550 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	6013      	str	r3, [r2, #0]
}
 8005534:	bf00      	nop
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20000d64 	.word	0x20000d64
 8005540:	2000088c 	.word	0x2000088c
 8005544:	20000d4c 	.word	0x20000d4c
 8005548:	20000d1c 	.word	0x20000d1c
 800554c:	20000d18 	.word	0x20000d18
 8005550:	20000d80 	.word	0x20000d80

08005554 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08a      	sub	sp, #40	@ 0x28
 8005558:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800555a:	2300      	movs	r3, #0
 800555c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800555e:	f000 fb21 	bl	8005ba4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005562:	4b1e      	ldr	r3, [pc, #120]	@ (80055dc <xTimerCreateTimerTask+0x88>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d021      	beq.n	80055ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800556e:	2300      	movs	r3, #0
 8005570:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005572:	1d3a      	adds	r2, r7, #4
 8005574:	f107 0108 	add.w	r1, r7, #8
 8005578:	f107 030c 	add.w	r3, r7, #12
 800557c:	4618      	mov	r0, r3
 800557e:	f7fd fbf9 	bl	8002d74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	9202      	str	r2, [sp, #8]
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	2302      	movs	r3, #2
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	2300      	movs	r3, #0
 8005592:	460a      	mov	r2, r1
 8005594:	4912      	ldr	r1, [pc, #72]	@ (80055e0 <xTimerCreateTimerTask+0x8c>)
 8005596:	4813      	ldr	r0, [pc, #76]	@ (80055e4 <xTimerCreateTimerTask+0x90>)
 8005598:	f7fe fe09 	bl	80041ae <xTaskCreateStatic>
 800559c:	4603      	mov	r3, r0
 800559e:	4a12      	ldr	r2, [pc, #72]	@ (80055e8 <xTimerCreateTimerTask+0x94>)
 80055a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80055a2:	4b11      	ldr	r3, [pc, #68]	@ (80055e8 <xTimerCreateTimerTask+0x94>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10d      	bne.n	80055d0 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 80055b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055b8:	b672      	cpsid	i
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	b662      	cpsie	i
 80055c8:	613b      	str	r3, [r7, #16]
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xTimerCreateTimerTask+0x78>
	return xReturn;
 80055d0:	697b      	ldr	r3, [r7, #20]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000dbc 	.word	0x20000dbc
 80055e0:	08006688 	.word	0x08006688
 80055e4:	0800572d 	.word	0x0800572d
 80055e8:	20000dc0 	.word	0x20000dc0

080055ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b08a      	sub	sp, #40	@ 0x28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <xTimerGenericCommand+0x34>
	__asm volatile
 8005604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005608:	b672      	cpsid	i
 800560a:	f383 8811 	msr	BASEPRI, r3
 800560e:	f3bf 8f6f 	isb	sy
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	b662      	cpsie	i
 8005618:	623b      	str	r3, [r7, #32]
}
 800561a:	bf00      	nop
 800561c:	bf00      	nop
 800561e:	e7fd      	b.n	800561c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005620:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <xTimerGenericCommand+0x9c>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d02a      	beq.n	800567e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b05      	cmp	r3, #5
 8005638:	dc18      	bgt.n	800566c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800563a:	f7ff fc69 	bl	8004f10 <xTaskGetSchedulerState>
 800563e:	4603      	mov	r3, r0
 8005640:	2b02      	cmp	r3, #2
 8005642:	d109      	bne.n	8005658 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005644:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <xTimerGenericCommand+0x9c>)
 8005646:	6818      	ldr	r0, [r3, #0]
 8005648:	f107 0110 	add.w	r1, r7, #16
 800564c:	2300      	movs	r3, #0
 800564e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005650:	f7fd fd74 	bl	800313c <xQueueGenericSend>
 8005654:	6278      	str	r0, [r7, #36]	@ 0x24
 8005656:	e012      	b.n	800567e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005658:	4b0b      	ldr	r3, [pc, #44]	@ (8005688 <xTimerGenericCommand+0x9c>)
 800565a:	6818      	ldr	r0, [r3, #0]
 800565c:	f107 0110 	add.w	r1, r7, #16
 8005660:	2300      	movs	r3, #0
 8005662:	2200      	movs	r2, #0
 8005664:	f7fd fd6a 	bl	800313c <xQueueGenericSend>
 8005668:	6278      	str	r0, [r7, #36]	@ 0x24
 800566a:	e008      	b.n	800567e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800566c:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <xTimerGenericCommand+0x9c>)
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	f107 0110 	add.w	r1, r7, #16
 8005674:	2300      	movs	r3, #0
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	f7fd fe6a 	bl	8003350 <xQueueGenericSendFromISR>
 800567c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005680:	4618      	mov	r0, r3
 8005682:	3728      	adds	r7, #40	@ 0x28
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000dbc 	.word	0x20000dbc

0800568c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b088      	sub	sp, #32
 8005690:	af02      	add	r7, sp, #8
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005696:	4b24      	ldr	r3, [pc, #144]	@ (8005728 <prvProcessExpiredTimer+0x9c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fd fc09 	bl	8002ebc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d025      	beq.n	8005704 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	699a      	ldr	r2, [r3, #24]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	18d1      	adds	r1, r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	6978      	ldr	r0, [r7, #20]
 80056c6:	f000 f8d7 	bl	8005878 <prvInsertTimerInActiveList>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d022      	beq.n	8005716 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056d0:	2300      	movs	r3, #0
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	2100      	movs	r1, #0
 80056da:	6978      	ldr	r0, [r7, #20]
 80056dc:	f7ff ff86 	bl	80055ec <xTimerGenericCommand>
 80056e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d116      	bne.n	8005716 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	b672      	cpsid	i
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	b662      	cpsie	i
 80056fc:	60fb      	str	r3, [r7, #12]
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	e7fd      	b.n	8005700 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800570a:	f023 0301 	bic.w	r3, r3, #1
 800570e:	b2da      	uxtb	r2, r3
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	6a1b      	ldr	r3, [r3, #32]
 800571a:	6978      	ldr	r0, [r7, #20]
 800571c:	4798      	blx	r3
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000db4 	.word	0x20000db4

0800572c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4618      	mov	r0, r3
 800573a:	f000 f859 	bl	80057f0 <prvGetNextExpireTime>
 800573e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4619      	mov	r1, r3
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f000 f805 	bl	8005754 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800574a:	f000 f8d7 	bl	80058fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800574e:	bf00      	nop
 8005750:	e7f0      	b.n	8005734 <prvTimerTask+0x8>
	...

08005754 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800575e:	f7fe ff97 	bl	8004690 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f000 f866 	bl	8005838 <prvSampleTimeNow>
 800576c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d130      	bne.n	80057d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10a      	bne.n	8005790 <prvProcessTimerOrBlockTask+0x3c>
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	429a      	cmp	r2, r3
 8005780:	d806      	bhi.n	8005790 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005782:	f7fe ff93 	bl	80046ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005786:	68f9      	ldr	r1, [r7, #12]
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f7ff ff7f 	bl	800568c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800578e:	e024      	b.n	80057da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d008      	beq.n	80057a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005796:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <prvProcessTimerOrBlockTask+0x90>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <prvProcessTimerOrBlockTask+0x50>
 80057a0:	2301      	movs	r3, #1
 80057a2:	e000      	b.n	80057a6 <prvProcessTimerOrBlockTask+0x52>
 80057a4:	2300      	movs	r3, #0
 80057a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80057a8:	4b0f      	ldr	r3, [pc, #60]	@ (80057e8 <prvProcessTimerOrBlockTask+0x94>)
 80057aa:	6818      	ldr	r0, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	4619      	mov	r1, r3
 80057b6:	f7fe f891 	bl	80038dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80057ba:	f7fe ff77 	bl	80046ac <xTaskResumeAll>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d10a      	bne.n	80057da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80057c4:	4b09      	ldr	r3, [pc, #36]	@ (80057ec <prvProcessTimerOrBlockTask+0x98>)
 80057c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	f3bf 8f4f 	dsb	sy
 80057d0:	f3bf 8f6f 	isb	sy
}
 80057d4:	e001      	b.n	80057da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80057d6:	f7fe ff69 	bl	80046ac <xTaskResumeAll>
}
 80057da:	bf00      	nop
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	20000db8 	.word	0x20000db8
 80057e8:	20000dbc 	.word	0x20000dbc
 80057ec:	e000ed04 	.word	0xe000ed04

080057f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <prvGetNextExpireTime+0x44>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <prvGetNextExpireTime+0x16>
 8005802:	2201      	movs	r2, #1
 8005804:	e000      	b.n	8005808 <prvGetNextExpireTime+0x18>
 8005806:	2200      	movs	r2, #0
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d105      	bne.n	8005820 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005814:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <prvGetNextExpireTime+0x44>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e001      	b.n	8005824 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000db4 	.word	0x20000db4

08005838 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005840:	f7fe ffd4 	bl	80047ec <xTaskGetTickCount>
 8005844:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005846:	4b0b      	ldr	r3, [pc, #44]	@ (8005874 <prvSampleTimeNow+0x3c>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	429a      	cmp	r2, r3
 800584e:	d205      	bcs.n	800585c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005850:	f000 f940 	bl	8005ad4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	e002      	b.n	8005862 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005862:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <prvSampleTimeNow+0x3c>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005868:	68fb      	ldr	r3, [r7, #12]
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20000dc4 	.word	0x20000dc4

08005878 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	429a      	cmp	r2, r3
 800589c:	d812      	bhi.n	80058c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	1ad2      	subs	r2, r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d302      	bcc.n	80058b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80058ac:	2301      	movs	r3, #1
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	e01b      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80058b2:	4b10      	ldr	r3, [pc, #64]	@ (80058f4 <prvInsertTimerInActiveList+0x7c>)
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3304      	adds	r3, #4
 80058ba:	4619      	mov	r1, r3
 80058bc:	4610      	mov	r0, r2
 80058be:	f7fd fac4 	bl	8002e4a <vListInsert>
 80058c2:	e012      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d206      	bcs.n	80058da <prvInsertTimerInActiveList+0x62>
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d302      	bcc.n	80058da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e007      	b.n	80058ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058da:	4b07      	ldr	r3, [pc, #28]	@ (80058f8 <prvInsertTimerInActiveList+0x80>)
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7fd fab0 	bl	8002e4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058ea:	697b      	ldr	r3, [r7, #20]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}
 80058f4:	20000db8 	.word	0x20000db8
 80058f8:	20000db4 	.word	0x20000db4

080058fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	@ 0x38
 8005900:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005902:	e0d4      	b.n	8005aae <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	da1b      	bge.n	8005942 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800590a:	1d3b      	adds	r3, r7, #4
 800590c:	3304      	adds	r3, #4
 800590e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10d      	bne.n	8005932 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	b672      	cpsid	i
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	b662      	cpsie	i
 800592a:	61fb      	str	r3, [r7, #28]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005938:	6850      	ldr	r0, [r2, #4]
 800593a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593c:	6892      	ldr	r2, [r2, #8]
 800593e:	4611      	mov	r1, r2
 8005940:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f2c0 80b2 	blt.w	8005aae <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800594e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	3304      	adds	r3, #4
 800595a:	4618      	mov	r0, r3
 800595c:	f7fd faae 	bl	8002ebc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005960:	463b      	mov	r3, r7
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff68 	bl	8005838 <prvSampleTimeNow>
 8005968:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b09      	cmp	r3, #9
 800596e:	f200 809b 	bhi.w	8005aa8 <prvProcessReceivedCommands+0x1ac>
 8005972:	a201      	add	r2, pc, #4	@ (adr r2, 8005978 <prvProcessReceivedCommands+0x7c>)
 8005974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a1 	.word	0x080059a1
 8005984:	08005a1b 	.word	0x08005a1b
 8005988:	08005a2f 	.word	0x08005a2f
 800598c:	08005a7f 	.word	0x08005a7f
 8005990:	080059a1 	.word	0x080059a1
 8005994:	080059a1 	.word	0x080059a1
 8005998:	08005a1b 	.word	0x08005a1b
 800599c:	08005a2f 	.word	0x08005a2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80059b2:	68ba      	ldr	r2, [r7, #8]
 80059b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	18d1      	adds	r1, r2, r3
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059c0:	f7ff ff5a 	bl	8005878 <prvInsertTimerInActiveList>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d070      	beq.n	8005aac <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059d8:	f003 0304 	and.w	r3, r3, #4
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d065      	beq.n	8005aac <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	441a      	add	r2, r3
 80059e8:	2300      	movs	r3, #0
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	2100      	movs	r1, #0
 80059f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f2:	f7ff fdfb 	bl	80055ec <xTimerGenericCommand>
 80059f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d156      	bne.n	8005aac <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a02:	b672      	cpsid	i
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	b662      	cpsie	i
 8005a12:	61bb      	str	r3, [r7, #24]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a20:	f023 0301 	bic.w	r3, r3, #1
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a2c:	e03f      	b.n	8005aae <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a34:	f043 0301 	orr.w	r3, r3, #1
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10d      	bne.n	8005a6a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	b672      	cpsid	i
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	b662      	cpsie	i
 8005a62:	617b      	str	r3, [r7, #20]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	18d1      	adds	r1, r2, r3
 8005a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a78:	f7ff fefe 	bl	8005878 <prvInsertTimerInActiveList>
					break;
 8005a7c:	e017      	b.n	8005aae <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d103      	bne.n	8005a94 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8005a8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a8e:	f000 fbd1 	bl	8006234 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a92:	e00c      	b.n	8005aae <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a9a:	f023 0301 	bic.w	r3, r3, #1
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005aa6:	e002      	b.n	8005aae <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8005aa8:	bf00      	nop
 8005aaa:	e000      	b.n	8005aae <prvProcessReceivedCommands+0x1b2>
					break;
 8005aac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005aae:	4b08      	ldr	r3, [pc, #32]	@ (8005ad0 <prvProcessReceivedCommands+0x1d4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	1d39      	adds	r1, r7, #4
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7fd fcee 	bl	8003498 <xQueueReceive>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f47f af20 	bne.w	8005904 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005ac4:	bf00      	nop
 8005ac6:	bf00      	nop
 8005ac8:	3730      	adds	r7, #48	@ 0x30
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000dbc 	.word	0x20000dbc

08005ad4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ada:	e04b      	b.n	8005b74 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005adc:	4b2f      	ldr	r3, [pc, #188]	@ (8005b9c <prvSwitchTimerLists+0xc8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8005b9c <prvSwitchTimerLists+0xc8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3304      	adds	r3, #4
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd f9e1 	bl	8002ebc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d031      	beq.n	8005b74 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	693a      	ldr	r2, [r7, #16]
 8005b16:	4413      	add	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d90e      	bls.n	8005b40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <prvSwitchTimerLists+0xc8>)
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4619      	mov	r1, r3
 8005b38:	4610      	mov	r0, r2
 8005b3a:	f7fd f986 	bl	8002e4a <vListInsert>
 8005b3e:	e019      	b.n	8005b74 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b40:	2300      	movs	r3, #0
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	2300      	movs	r3, #0
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f7ff fd4e 	bl	80055ec <xTimerGenericCommand>
 8005b50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5c:	b672      	cpsid	i
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	b662      	cpsie	i
 8005b6c:	603b      	str	r3, [r7, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	bf00      	nop
 8005b72:	e7fd      	b.n	8005b70 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <prvSwitchTimerLists+0xc8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1ae      	bne.n	8005adc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b7e:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <prvSwitchTimerLists+0xc8>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b84:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <prvSwitchTimerLists+0xcc>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a04      	ldr	r2, [pc, #16]	@ (8005b9c <prvSwitchTimerLists+0xc8>)
 8005b8a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b8c:	4a04      	ldr	r2, [pc, #16]	@ (8005ba0 <prvSwitchTimerLists+0xcc>)
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	6013      	str	r3, [r2, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3718      	adds	r7, #24
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000db4 	.word	0x20000db4
 8005ba0:	20000db8 	.word	0x20000db8

08005ba4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005baa:	f000 f947 	bl	8005e3c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005bae:	4b15      	ldr	r3, [pc, #84]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d120      	bne.n	8005bf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005bb6:	4814      	ldr	r0, [pc, #80]	@ (8005c08 <prvCheckForValidListAndQueue+0x64>)
 8005bb8:	f7fd f8f6 	bl	8002da8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005bbc:	4813      	ldr	r0, [pc, #76]	@ (8005c0c <prvCheckForValidListAndQueue+0x68>)
 8005bbe:	f7fd f8f3 	bl	8002da8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005bc2:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <prvCheckForValidListAndQueue+0x6c>)
 8005bc4:	4a10      	ldr	r2, [pc, #64]	@ (8005c08 <prvCheckForValidListAndQueue+0x64>)
 8005bc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005bc8:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <prvCheckForValidListAndQueue+0x70>)
 8005bca:	4a10      	ldr	r2, [pc, #64]	@ (8005c0c <prvCheckForValidListAndQueue+0x68>)
 8005bcc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	4b11      	ldr	r3, [pc, #68]	@ (8005c18 <prvCheckForValidListAndQueue+0x74>)
 8005bd4:	4a11      	ldr	r2, [pc, #68]	@ (8005c1c <prvCheckForValidListAndQueue+0x78>)
 8005bd6:	2110      	movs	r1, #16
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f7fd fa05 	bl	8002fe8 <xQueueGenericCreateStatic>
 8005bde:	4603      	mov	r3, r0
 8005be0:	4a08      	ldr	r2, [pc, #32]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005be2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005be4:	4b07      	ldr	r3, [pc, #28]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d005      	beq.n	8005bf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <prvCheckForValidListAndQueue+0x60>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	490b      	ldr	r1, [pc, #44]	@ (8005c20 <prvCheckForValidListAndQueue+0x7c>)
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fd fe48 	bl	8003888 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005bf8:	f000 f956 	bl	8005ea8 <vPortExitCritical>
}
 8005bfc:	bf00      	nop
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000dbc 	.word	0x20000dbc
 8005c08:	20000d8c 	.word	0x20000d8c
 8005c0c:	20000da0 	.word	0x20000da0
 8005c10:	20000db4 	.word	0x20000db4
 8005c14:	20000db8 	.word	0x20000db8
 8005c18:	20000e68 	.word	0x20000e68
 8005c1c:	20000dc8 	.word	0x20000dc8
 8005c20:	08006690 	.word	0x08006690

08005c24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3b04      	subs	r3, #4
 8005c34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005c3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	3b04      	subs	r3, #4
 8005c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f023 0201 	bic.w	r2, r3, #1
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	3b04      	subs	r3, #4
 8005c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c54:	4a0c      	ldr	r2, [pc, #48]	@ (8005c88 <pxPortInitialiseStack+0x64>)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	3b14      	subs	r3, #20
 8005c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f06f 0202 	mvn.w	r2, #2
 8005c72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3b20      	subs	r3, #32
 8005c78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	08005c8d 	.word	0x08005c8d

08005c8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c92:	2300      	movs	r3, #0
 8005c94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c96:	4b15      	ldr	r3, [pc, #84]	@ (8005cec <prvTaskExitError+0x60>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9e:	d00d      	beq.n	8005cbc <prvTaskExitError+0x30>
	__asm volatile
 8005ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca4:	b672      	cpsid	i
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	b662      	cpsie	i
 8005cb4:	60fb      	str	r3, [r7, #12]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <prvTaskExitError+0x2c>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc0:	b672      	cpsid	i
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	b662      	cpsie	i
 8005cd0:	60bb      	str	r3, [r7, #8]
}
 8005cd2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cd4:	bf00      	nop
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d0fc      	beq.n	8005cd6 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cdc:	bf00      	nop
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	2000000c 	.word	0x2000000c

08005cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005cf0:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <pxCurrentTCBConst2>)
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	6808      	ldr	r0, [r1, #0]
 8005cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cfa:	f380 8809 	msr	PSP, r0
 8005cfe:	f3bf 8f6f 	isb	sy
 8005d02:	f04f 0000 	mov.w	r0, #0
 8005d06:	f380 8811 	msr	BASEPRI, r0
 8005d0a:	4770      	bx	lr
 8005d0c:	f3af 8000 	nop.w

08005d10 <pxCurrentTCBConst2>:
 8005d10:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d18:	4808      	ldr	r0, [pc, #32]	@ (8005d3c <prvPortStartFirstTask+0x24>)
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	6800      	ldr	r0, [r0, #0]
 8005d1e:	f380 8808 	msr	MSP, r0
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8814 	msr	CONTROL, r0
 8005d2a:	b662      	cpsie	i
 8005d2c:	b661      	cpsie	f
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	df00      	svc	0
 8005d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d3a:	bf00      	nop
 8005d3c:	e000ed08 	.word	0xe000ed08

08005d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d46:	4b37      	ldr	r3, [pc, #220]	@ (8005e24 <xPortStartScheduler+0xe4>)
 8005d48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	22ff      	movs	r2, #255	@ 0xff
 8005d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005e28 <xPortStartScheduler+0xe8>)
 8005d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005d70:	2207      	movs	r2, #7
 8005d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d74:	e009      	b.n	8005d8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005d76:	4b2d      	ldr	r3, [pc, #180]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d92:	2b80      	cmp	r3, #128	@ 0x80
 8005d94:	d0ef      	beq.n	8005d76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d96:	4b25      	ldr	r3, [pc, #148]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f1c3 0307 	rsb	r3, r3, #7
 8005d9e:	2b04      	cmp	r3, #4
 8005da0:	d00d      	beq.n	8005dbe <xPortStartScheduler+0x7e>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	b672      	cpsid	i
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	b662      	cpsie	i
 8005db6:	60bb      	str	r3, [r7, #8]
}
 8005db8:	bf00      	nop
 8005dba:	bf00      	nop
 8005dbc:	e7fd      	b.n	8005dba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	021b      	lsls	r3, r3, #8
 8005dc4:	4a19      	ldr	r2, [pc, #100]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005dc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005dc8:	4b18      	ldr	r3, [pc, #96]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005dd0:	4a16      	ldr	r2, [pc, #88]	@ (8005e2c <xPortStartScheduler+0xec>)
 8005dd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ddc:	4b14      	ldr	r3, [pc, #80]	@ (8005e30 <xPortStartScheduler+0xf0>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a13      	ldr	r2, [pc, #76]	@ (8005e30 <xPortStartScheduler+0xf0>)
 8005de2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005de6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005de8:	4b11      	ldr	r3, [pc, #68]	@ (8005e30 <xPortStartScheduler+0xf0>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a10      	ldr	r2, [pc, #64]	@ (8005e30 <xPortStartScheduler+0xf0>)
 8005dee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005df2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005df4:	f000 f8dc 	bl	8005fb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <xPortStartScheduler+0xf4>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dfe:	f000 f8fb 	bl	8005ff8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e02:	4b0d      	ldr	r3, [pc, #52]	@ (8005e38 <xPortStartScheduler+0xf8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a0c      	ldr	r2, [pc, #48]	@ (8005e38 <xPortStartScheduler+0xf8>)
 8005e08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005e0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e0e:	f7ff ff83 	bl	8005d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e12:	f7fe fdb7 	bl	8004984 <vTaskSwitchContext>
	prvTaskExitError();
 8005e16:	f7ff ff39 	bl	8005c8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e1a:	2300      	movs	r3, #0
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	e000e400 	.word	0xe000e400
 8005e28:	20000eb8 	.word	0x20000eb8
 8005e2c:	20000ebc 	.word	0x20000ebc
 8005e30:	e000ed20 	.word	0xe000ed20
 8005e34:	2000000c 	.word	0x2000000c
 8005e38:	e000ef34 	.word	0xe000ef34

08005e3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	b672      	cpsid	i
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	b662      	cpsie	i
 8005e56:	607b      	str	r3, [r7, #4]
}
 8005e58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e5a:	4b11      	ldr	r3, [pc, #68]	@ (8005ea0 <vPortEnterCritical+0x64>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a0f      	ldr	r2, [pc, #60]	@ (8005ea0 <vPortEnterCritical+0x64>)
 8005e62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e64:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea0 <vPortEnterCritical+0x64>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d112      	bne.n	8005e92 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ea4 <vPortEnterCritical+0x68>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00d      	beq.n	8005e92 <vPortEnterCritical+0x56>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	b672      	cpsid	i
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	b662      	cpsie	i
 8005e8a:	603b      	str	r3, [r7, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <vPortEnterCritical+0x52>
	}
}
 8005e92:	bf00      	nop
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	2000000c 	.word	0x2000000c
 8005ea4:	e000ed04 	.word	0xe000ed04

08005ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005eae:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <vPortExitCritical+0x54>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <vPortExitCritical+0x2a>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	b672      	cpsid	i
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	b662      	cpsie	i
 8005eca:	607b      	str	r3, [r7, #4]
}
 8005ecc:	bf00      	nop
 8005ece:	bf00      	nop
 8005ed0:	e7fd      	b.n	8005ece <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8005efc <vPortExitCritical+0x54>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	4a08      	ldr	r2, [pc, #32]	@ (8005efc <vPortExitCritical+0x54>)
 8005eda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005edc:	4b07      	ldr	r3, [pc, #28]	@ (8005efc <vPortExitCritical+0x54>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <vPortExitCritical+0x48>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	f383 8811 	msr	BASEPRI, r3
}
 8005eee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr
 8005efc:	2000000c 	.word	0x2000000c

08005f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f00:	f3ef 8009 	mrs	r0, PSP
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	4b15      	ldr	r3, [pc, #84]	@ (8005f60 <pxCurrentTCBConst>)
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	f01e 0f10 	tst.w	lr, #16
 8005f10:	bf08      	it	eq
 8005f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f1a:	6010      	str	r0, [r2, #0]
 8005f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005f24:	b672      	cpsid	i
 8005f26:	f380 8811 	msr	BASEPRI, r0
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	b662      	cpsie	i
 8005f34:	f7fe fd26 	bl	8004984 <vTaskSwitchContext>
 8005f38:	f04f 0000 	mov.w	r0, #0
 8005f3c:	f380 8811 	msr	BASEPRI, r0
 8005f40:	bc09      	pop	{r0, r3}
 8005f42:	6819      	ldr	r1, [r3, #0]
 8005f44:	6808      	ldr	r0, [r1, #0]
 8005f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f4a:	f01e 0f10 	tst.w	lr, #16
 8005f4e:	bf08      	it	eq
 8005f50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f54:	f380 8809 	msr	PSP, r0
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop

08005f60 <pxCurrentTCBConst>:
 8005f60:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop

08005f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f72:	b672      	cpsid	i
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	b662      	cpsie	i
 8005f82:	607b      	str	r3, [r7, #4]
}
 8005f84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f86:	f7fe fc41 	bl	800480c <xTaskIncrementTick>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f90:	4b06      	ldr	r3, [pc, #24]	@ (8005fac <xPortSysTickHandler+0x44>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	2300      	movs	r3, #0
 8005f9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	f383 8811 	msr	BASEPRI, r3
}
 8005fa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	e000ed04 	.word	0xe000ed04

08005fb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe4 <vPortSetupTimerInterrupt+0x34>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005fba:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe8 <vPortSetupTimerInterrupt+0x38>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005fec <vPortSetupTimerInterrupt+0x3c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8005ff0 <vPortSetupTimerInterrupt+0x40>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	099b      	lsrs	r3, r3, #6
 8005fcc:	4a09      	ldr	r2, [pc, #36]	@ (8005ff4 <vPortSetupTimerInterrupt+0x44>)
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fd2:	4b04      	ldr	r3, [pc, #16]	@ (8005fe4 <vPortSetupTimerInterrupt+0x34>)
 8005fd4:	2207      	movs	r2, #7
 8005fd6:	601a      	str	r2, [r3, #0]
}
 8005fd8:	bf00      	nop
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr
 8005fe2:	bf00      	nop
 8005fe4:	e000e010 	.word	0xe000e010
 8005fe8:	e000e018 	.word	0xe000e018
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	10624dd3 	.word	0x10624dd3
 8005ff4:	e000e014 	.word	0xe000e014

08005ff8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005ff8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006008 <vPortEnableVFP+0x10>
 8005ffc:	6801      	ldr	r1, [r0, #0]
 8005ffe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006002:	6001      	str	r1, [r0, #0]
 8006004:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006006:	bf00      	nop
 8006008:	e000ed88 	.word	0xe000ed88

0800600c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800600c:	b480      	push	{r7}
 800600e:	b085      	sub	sp, #20
 8006010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006012:	f3ef 8305 	mrs	r3, IPSR
 8006016:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b0f      	cmp	r3, #15
 800601c:	d917      	bls.n	800604e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800601e:	4a1a      	ldr	r2, [pc, #104]	@ (8006088 <vPortValidateInterruptPriority+0x7c>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006028:	4b18      	ldr	r3, [pc, #96]	@ (800608c <vPortValidateInterruptPriority+0x80>)
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	7afa      	ldrb	r2, [r7, #11]
 800602e:	429a      	cmp	r2, r3
 8006030:	d20d      	bcs.n	800604e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	b672      	cpsid	i
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	b662      	cpsie	i
 8006046:	607b      	str	r3, [r7, #4]
}
 8006048:	bf00      	nop
 800604a:	bf00      	nop
 800604c:	e7fd      	b.n	800604a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800604e:	4b10      	ldr	r3, [pc, #64]	@ (8006090 <vPortValidateInterruptPriority+0x84>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006056:	4b0f      	ldr	r3, [pc, #60]	@ (8006094 <vPortValidateInterruptPriority+0x88>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d90d      	bls.n	800607a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	b672      	cpsid	i
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	b662      	cpsie	i
 8006072:	603b      	str	r3, [r7, #0]
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	e7fd      	b.n	8006076 <vPortValidateInterruptPriority+0x6a>
	}
 800607a:	bf00      	nop
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	e000e3f0 	.word	0xe000e3f0
 800608c:	20000eb8 	.word	0x20000eb8
 8006090:	e000ed0c 	.word	0xe000ed0c
 8006094:	20000ebc 	.word	0x20000ebc

08006098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	@ 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80060a4:	f7fe faf4 	bl	8004690 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80060a8:	4b5d      	ldr	r3, [pc, #372]	@ (8006220 <pvPortMalloc+0x188>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d101      	bne.n	80060b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80060b0:	f000 f920 	bl	80062f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80060b4:	4b5b      	ldr	r3, [pc, #364]	@ (8006224 <pvPortMalloc+0x18c>)
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 8094 	bne.w	80061ea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d020      	beq.n	800610a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80060c8:	2208      	movs	r2, #8
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d017      	beq.n	800610a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f023 0307 	bic.w	r3, r3, #7
 80060e0:	3308      	adds	r3, #8
 80060e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f003 0307 	and.w	r3, r3, #7
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00d      	beq.n	800610a <pvPortMalloc+0x72>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	b672      	cpsid	i
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	b662      	cpsie	i
 8006102:	617b      	str	r3, [r7, #20]
}
 8006104:	bf00      	nop
 8006106:	bf00      	nop
 8006108:	e7fd      	b.n	8006106 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d06c      	beq.n	80061ea <pvPortMalloc+0x152>
 8006110:	4b45      	ldr	r3, [pc, #276]	@ (8006228 <pvPortMalloc+0x190>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	429a      	cmp	r2, r3
 8006118:	d867      	bhi.n	80061ea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800611a:	4b44      	ldr	r3, [pc, #272]	@ (800622c <pvPortMalloc+0x194>)
 800611c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800611e:	4b43      	ldr	r3, [pc, #268]	@ (800622c <pvPortMalloc+0x194>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006124:	e004      	b.n	8006130 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006128:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	429a      	cmp	r2, r3
 8006138:	d903      	bls.n	8006142 <pvPortMalloc+0xaa>
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1f1      	bne.n	8006126 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006142:	4b37      	ldr	r3, [pc, #220]	@ (8006220 <pvPortMalloc+0x188>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006148:	429a      	cmp	r2, r3
 800614a:	d04e      	beq.n	80061ea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2208      	movs	r2, #8
 8006152:	4413      	add	r3, r2
 8006154:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800615e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	2308      	movs	r3, #8
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	429a      	cmp	r2, r3
 800616c:	d922      	bls.n	80061b4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800616e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	f003 0307 	and.w	r3, r3, #7
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00d      	beq.n	800619c <pvPortMalloc+0x104>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	b672      	cpsid	i
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	b662      	cpsie	i
 8006194:	613b      	str	r3, [r7, #16]
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	e7fd      	b.n	8006198 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800619c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1ad2      	subs	r2, r2, r3
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80061ae:	69b8      	ldr	r0, [r7, #24]
 80061b0:	f000 f902 	bl	80063b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80061b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006228 <pvPortMalloc+0x190>)
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	4a1a      	ldr	r2, [pc, #104]	@ (8006228 <pvPortMalloc+0x190>)
 80061c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80061c2:	4b19      	ldr	r3, [pc, #100]	@ (8006228 <pvPortMalloc+0x190>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006230 <pvPortMalloc+0x198>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d203      	bcs.n	80061d6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80061ce:	4b16      	ldr	r3, [pc, #88]	@ (8006228 <pvPortMalloc+0x190>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a17      	ldr	r2, [pc, #92]	@ (8006230 <pvPortMalloc+0x198>)
 80061d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <pvPortMalloc+0x18c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	431a      	orrs	r2, r3
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061ea:	f7fe fa5f 	bl	80046ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0307 	and.w	r3, r3, #7
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00d      	beq.n	8006214 <pvPortMalloc+0x17c>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	b672      	cpsid	i
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	b662      	cpsie	i
 800620c:	60fb      	str	r3, [r7, #12]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <pvPortMalloc+0x178>
	return pvReturn;
 8006214:	69fb      	ldr	r3, [r7, #28]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3728      	adds	r7, #40	@ 0x28
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20004ac8 	.word	0x20004ac8
 8006224:	20004ad4 	.word	0x20004ad4
 8006228:	20004acc 	.word	0x20004acc
 800622c:	20004ac0 	.word	0x20004ac0
 8006230:	20004ad0 	.word	0x20004ad0

08006234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d04e      	beq.n	80062e4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006246:	2308      	movs	r3, #8
 8006248:	425b      	negs	r3, r3
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4413      	add	r3, r2
 800624e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	4b24      	ldr	r3, [pc, #144]	@ (80062ec <vPortFree+0xb8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4013      	ands	r3, r2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <vPortFree+0x4a>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	b672      	cpsid	i
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	b662      	cpsie	i
 8006276:	60fb      	str	r3, [r7, #12]
}
 8006278:	bf00      	nop
 800627a:	bf00      	nop
 800627c:	e7fd      	b.n	800627a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00d      	beq.n	80062a2 <vPortFree+0x6e>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	b672      	cpsid	i
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	b662      	cpsie	i
 800629a:	60bb      	str	r3, [r7, #8]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	4b11      	ldr	r3, [pc, #68]	@ (80062ec <vPortFree+0xb8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4013      	ands	r3, r2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d019      	beq.n	80062e4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d115      	bne.n	80062e4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	4b0b      	ldr	r3, [pc, #44]	@ (80062ec <vPortFree+0xb8>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	401a      	ands	r2, r3
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80062c8:	f7fe f9e2 	bl	8004690 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	685a      	ldr	r2, [r3, #4]
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <vPortFree+0xbc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4413      	add	r3, r2
 80062d6:	4a06      	ldr	r2, [pc, #24]	@ (80062f0 <vPortFree+0xbc>)
 80062d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80062da:	6938      	ldr	r0, [r7, #16]
 80062dc:	f000 f86c 	bl	80063b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80062e0:	f7fe f9e4 	bl	80046ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062e4:	bf00      	nop
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	20004ad4 	.word	0x20004ad4
 80062f0:	20004acc 	.word	0x20004acc

080062f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062fa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80062fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006300:	4b27      	ldr	r3, [pc, #156]	@ (80063a0 <prvHeapInit+0xac>)
 8006302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f003 0307 	and.w	r3, r3, #7
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3307      	adds	r3, #7
 8006312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0307 	bic.w	r3, r3, #7
 800631a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	4a1f      	ldr	r2, [pc, #124]	@ (80063a0 <prvHeapInit+0xac>)
 8006324:	4413      	add	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800632c:	4a1d      	ldr	r2, [pc, #116]	@ (80063a4 <prvHeapInit+0xb0>)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006332:	4b1c      	ldr	r3, [pc, #112]	@ (80063a4 <prvHeapInit+0xb0>)
 8006334:	2200      	movs	r2, #0
 8006336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006340:	2208      	movs	r2, #8
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1a9b      	subs	r3, r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0307 	bic.w	r3, r3, #7
 800634e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	4a15      	ldr	r2, [pc, #84]	@ (80063a8 <prvHeapInit+0xb4>)
 8006354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006356:	4b14      	ldr	r3, [pc, #80]	@ (80063a8 <prvHeapInit+0xb4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800635e:	4b12      	ldr	r3, [pc, #72]	@ (80063a8 <prvHeapInit+0xb4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	1ad2      	subs	r2, r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006374:	4b0c      	ldr	r3, [pc, #48]	@ (80063a8 <prvHeapInit+0xb4>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	4a0a      	ldr	r2, [pc, #40]	@ (80063ac <prvHeapInit+0xb8>)
 8006382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a09      	ldr	r2, [pc, #36]	@ (80063b0 <prvHeapInit+0xbc>)
 800638a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800638c:	4b09      	ldr	r3, [pc, #36]	@ (80063b4 <prvHeapInit+0xc0>)
 800638e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006392:	601a      	str	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	20000ec0 	.word	0x20000ec0
 80063a4:	20004ac0 	.word	0x20004ac0
 80063a8:	20004ac8 	.word	0x20004ac8
 80063ac:	20004ad0 	.word	0x20004ad0
 80063b0:	20004acc 	.word	0x20004acc
 80063b4:	20004ad4 	.word	0x20004ad4

080063b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80063c0:	4b28      	ldr	r3, [pc, #160]	@ (8006464 <prvInsertBlockIntoFreeList+0xac>)
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	e002      	b.n	80063cc <prvInsertBlockIntoFreeList+0x14>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	60fb      	str	r3, [r7, #12]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d8f7      	bhi.n	80063c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	4413      	add	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d108      	bne.n	80063fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	441a      	add	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	429a      	cmp	r2, r3
 800640c:	d118      	bne.n	8006440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	4b15      	ldr	r3, [pc, #84]	@ (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	429a      	cmp	r2, r3
 8006418:	d00d      	beq.n	8006436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	441a      	add	r2, r3
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	e008      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006436:	4b0c      	ldr	r3, [pc, #48]	@ (8006468 <prvInsertBlockIntoFreeList+0xb0>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e003      	b.n	8006448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	429a      	cmp	r2, r3
 800644e:	d002      	beq.n	8006456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20004ac0 	.word	0x20004ac0
 8006468:	20004ac8 	.word	0x20004ac8

0800646c <memset>:
 800646c:	4402      	add	r2, r0
 800646e:	4603      	mov	r3, r0
 8006470:	4293      	cmp	r3, r2
 8006472:	d100      	bne.n	8006476 <memset+0xa>
 8006474:	4770      	bx	lr
 8006476:	f803 1b01 	strb.w	r1, [r3], #1
 800647a:	e7f9      	b.n	8006470 <memset+0x4>

0800647c <_reclaim_reent>:
 800647c:	4b29      	ldr	r3, [pc, #164]	@ (8006524 <_reclaim_reent+0xa8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4283      	cmp	r3, r0
 8006482:	b570      	push	{r4, r5, r6, lr}
 8006484:	4604      	mov	r4, r0
 8006486:	d04b      	beq.n	8006520 <_reclaim_reent+0xa4>
 8006488:	69c3      	ldr	r3, [r0, #28]
 800648a:	b1ab      	cbz	r3, 80064b8 <_reclaim_reent+0x3c>
 800648c:	68db      	ldr	r3, [r3, #12]
 800648e:	b16b      	cbz	r3, 80064ac <_reclaim_reent+0x30>
 8006490:	2500      	movs	r5, #0
 8006492:	69e3      	ldr	r3, [r4, #28]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	5959      	ldr	r1, [r3, r5]
 8006498:	2900      	cmp	r1, #0
 800649a:	d13b      	bne.n	8006514 <_reclaim_reent+0x98>
 800649c:	3504      	adds	r5, #4
 800649e:	2d80      	cmp	r5, #128	@ 0x80
 80064a0:	d1f7      	bne.n	8006492 <_reclaim_reent+0x16>
 80064a2:	69e3      	ldr	r3, [r4, #28]
 80064a4:	4620      	mov	r0, r4
 80064a6:	68d9      	ldr	r1, [r3, #12]
 80064a8:	f000 f872 	bl	8006590 <_free_r>
 80064ac:	69e3      	ldr	r3, [r4, #28]
 80064ae:	6819      	ldr	r1, [r3, #0]
 80064b0:	b111      	cbz	r1, 80064b8 <_reclaim_reent+0x3c>
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f86c 	bl	8006590 <_free_r>
 80064b8:	6961      	ldr	r1, [r4, #20]
 80064ba:	b111      	cbz	r1, 80064c2 <_reclaim_reent+0x46>
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f867 	bl	8006590 <_free_r>
 80064c2:	69e1      	ldr	r1, [r4, #28]
 80064c4:	b111      	cbz	r1, 80064cc <_reclaim_reent+0x50>
 80064c6:	4620      	mov	r0, r4
 80064c8:	f000 f862 	bl	8006590 <_free_r>
 80064cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80064ce:	b111      	cbz	r1, 80064d6 <_reclaim_reent+0x5a>
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 f85d 	bl	8006590 <_free_r>
 80064d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064d8:	b111      	cbz	r1, 80064e0 <_reclaim_reent+0x64>
 80064da:	4620      	mov	r0, r4
 80064dc:	f000 f858 	bl	8006590 <_free_r>
 80064e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80064e2:	b111      	cbz	r1, 80064ea <_reclaim_reent+0x6e>
 80064e4:	4620      	mov	r0, r4
 80064e6:	f000 f853 	bl	8006590 <_free_r>
 80064ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80064ec:	b111      	cbz	r1, 80064f4 <_reclaim_reent+0x78>
 80064ee:	4620      	mov	r0, r4
 80064f0:	f000 f84e 	bl	8006590 <_free_r>
 80064f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80064f6:	b111      	cbz	r1, 80064fe <_reclaim_reent+0x82>
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 f849 	bl	8006590 <_free_r>
 80064fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006500:	b111      	cbz	r1, 8006508 <_reclaim_reent+0x8c>
 8006502:	4620      	mov	r0, r4
 8006504:	f000 f844 	bl	8006590 <_free_r>
 8006508:	6a23      	ldr	r3, [r4, #32]
 800650a:	b14b      	cbz	r3, 8006520 <_reclaim_reent+0xa4>
 800650c:	4620      	mov	r0, r4
 800650e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006512:	4718      	bx	r3
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f83a 	bl	8006590 <_free_r>
 800651c:	4631      	mov	r1, r6
 800651e:	e7bb      	b.n	8006498 <_reclaim_reent+0x1c>
 8006520:	bd70      	pop	{r4, r5, r6, pc}
 8006522:	bf00      	nop
 8006524:	20000010 	.word	0x20000010

08006528 <__libc_init_array>:
 8006528:	b570      	push	{r4, r5, r6, lr}
 800652a:	4d0d      	ldr	r5, [pc, #52]	@ (8006560 <__libc_init_array+0x38>)
 800652c:	4c0d      	ldr	r4, [pc, #52]	@ (8006564 <__libc_init_array+0x3c>)
 800652e:	1b64      	subs	r4, r4, r5
 8006530:	10a4      	asrs	r4, r4, #2
 8006532:	2600      	movs	r6, #0
 8006534:	42a6      	cmp	r6, r4
 8006536:	d109      	bne.n	800654c <__libc_init_array+0x24>
 8006538:	4d0b      	ldr	r5, [pc, #44]	@ (8006568 <__libc_init_array+0x40>)
 800653a:	4c0c      	ldr	r4, [pc, #48]	@ (800656c <__libc_init_array+0x44>)
 800653c:	f000 f87e 	bl	800663c <_init>
 8006540:	1b64      	subs	r4, r4, r5
 8006542:	10a4      	asrs	r4, r4, #2
 8006544:	2600      	movs	r6, #0
 8006546:	42a6      	cmp	r6, r4
 8006548:	d105      	bne.n	8006556 <__libc_init_array+0x2e>
 800654a:	bd70      	pop	{r4, r5, r6, pc}
 800654c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006550:	4798      	blx	r3
 8006552:	3601      	adds	r6, #1
 8006554:	e7ee      	b.n	8006534 <__libc_init_array+0xc>
 8006556:	f855 3b04 	ldr.w	r3, [r5], #4
 800655a:	4798      	blx	r3
 800655c:	3601      	adds	r6, #1
 800655e:	e7f2      	b.n	8006546 <__libc_init_array+0x1e>
 8006560:	080066d4 	.word	0x080066d4
 8006564:	080066d4 	.word	0x080066d4
 8006568:	080066d4 	.word	0x080066d4
 800656c:	080066d8 	.word	0x080066d8

08006570 <__retarget_lock_acquire_recursive>:
 8006570:	4770      	bx	lr

08006572 <__retarget_lock_release_recursive>:
 8006572:	4770      	bx	lr

08006574 <memcpy>:
 8006574:	440a      	add	r2, r1
 8006576:	4291      	cmp	r1, r2
 8006578:	f100 33ff 	add.w	r3, r0, #4294967295
 800657c:	d100      	bne.n	8006580 <memcpy+0xc>
 800657e:	4770      	bx	lr
 8006580:	b510      	push	{r4, lr}
 8006582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800658a:	4291      	cmp	r1, r2
 800658c:	d1f9      	bne.n	8006582 <memcpy+0xe>
 800658e:	bd10      	pop	{r4, pc}

08006590 <_free_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4605      	mov	r5, r0
 8006594:	2900      	cmp	r1, #0
 8006596:	d041      	beq.n	800661c <_free_r+0x8c>
 8006598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800659c:	1f0c      	subs	r4, r1, #4
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bfb8      	it	lt
 80065a2:	18e4      	addlt	r4, r4, r3
 80065a4:	f000 f83e 	bl	8006624 <__malloc_lock>
 80065a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006620 <_free_r+0x90>)
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	b933      	cbnz	r3, 80065bc <_free_r+0x2c>
 80065ae:	6063      	str	r3, [r4, #4]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	4628      	mov	r0, r5
 80065b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065b8:	f000 b83a 	b.w	8006630 <__malloc_unlock>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d908      	bls.n	80065d2 <_free_r+0x42>
 80065c0:	6820      	ldr	r0, [r4, #0]
 80065c2:	1821      	adds	r1, r4, r0
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf01      	itttt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	1809      	addeq	r1, r1, r0
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	e7ed      	b.n	80065ae <_free_r+0x1e>
 80065d2:	461a      	mov	r2, r3
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	b10b      	cbz	r3, 80065dc <_free_r+0x4c>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d9fa      	bls.n	80065d2 <_free_r+0x42>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1850      	adds	r0, r2, r1
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d10b      	bne.n	80065fc <_free_r+0x6c>
 80065e4:	6820      	ldr	r0, [r4, #0]
 80065e6:	4401      	add	r1, r0
 80065e8:	1850      	adds	r0, r2, r1
 80065ea:	4283      	cmp	r3, r0
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	d1e0      	bne.n	80065b2 <_free_r+0x22>
 80065f0:	6818      	ldr	r0, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	6053      	str	r3, [r2, #4]
 80065f6:	4408      	add	r0, r1
 80065f8:	6010      	str	r0, [r2, #0]
 80065fa:	e7da      	b.n	80065b2 <_free_r+0x22>
 80065fc:	d902      	bls.n	8006604 <_free_r+0x74>
 80065fe:	230c      	movs	r3, #12
 8006600:	602b      	str	r3, [r5, #0]
 8006602:	e7d6      	b.n	80065b2 <_free_r+0x22>
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	1821      	adds	r1, r4, r0
 8006608:	428b      	cmp	r3, r1
 800660a:	bf04      	itt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	bf04      	itt	eq
 8006614:	1809      	addeq	r1, r1, r0
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	6054      	str	r4, [r2, #4]
 800661a:	e7ca      	b.n	80065b2 <_free_r+0x22>
 800661c:	bd38      	pop	{r3, r4, r5, pc}
 800661e:	bf00      	nop
 8006620:	20004c14 	.word	0x20004c14

08006624 <__malloc_lock>:
 8006624:	4801      	ldr	r0, [pc, #4]	@ (800662c <__malloc_lock+0x8>)
 8006626:	f7ff bfa3 	b.w	8006570 <__retarget_lock_acquire_recursive>
 800662a:	bf00      	nop
 800662c:	20004c10 	.word	0x20004c10

08006630 <__malloc_unlock>:
 8006630:	4801      	ldr	r0, [pc, #4]	@ (8006638 <__malloc_unlock+0x8>)
 8006632:	f7ff bf9e 	b.w	8006572 <__retarget_lock_release_recursive>
 8006636:	bf00      	nop
 8006638:	20004c10 	.word	0x20004c10

0800663c <_init>:
 800663c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663e:	bf00      	nop
 8006640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006642:	bc08      	pop	{r3}
 8006644:	469e      	mov	lr, r3
 8006646:	4770      	bx	lr

08006648 <_fini>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr
