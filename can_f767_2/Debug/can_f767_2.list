
can_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080068c4  080068c4  000078c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800693c  0800693c  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  0800693c  0800693c  0000793c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006944  08006944  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006948  08006948  00007948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800694c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bb4  20000060  080069ac  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c14  080069ac  00008c14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130ad  00000000  00000000  0000808e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f63  00000000  00000000  0001b13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001e0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afd  00000000  00000000  0001ef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fed  00000000  00000000  0001fa15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109cb  00000000  00000000  00022a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f909d  00000000  00000000  000333cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c46a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e0c  00000000  00000000  0012c4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001302bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000060 	.word	0x20000060
 800021c:	00000000 	.word	0x00000000
 8000220:	080068ac 	.word	0x080068ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000064 	.word	0x20000064
 800023c:	080068ac 	.word	0x080068ac

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b96a 	b.w	800052c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	460c      	mov	r4, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14e      	bne.n	800031a <__udivmoddi4+0xaa>
 800027c:	4694      	mov	ip, r2
 800027e:	458c      	cmp	ip, r1
 8000280:	4686      	mov	lr, r0
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	d962      	bls.n	800034e <__udivmoddi4+0xde>
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0320 	rsb	r3, r2, #32
 800028e:	4091      	lsls	r1, r2
 8000290:	fa20 f303 	lsr.w	r3, r0, r3
 8000294:	fa0c fc02 	lsl.w	ip, ip, r2
 8000298:	4319      	orrs	r1, r3
 800029a:	fa00 fe02 	lsl.w	lr, r0, r2
 800029e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a2:	fa1f f68c 	uxth.w	r6, ip
 80002a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	fb07 1114 	mls	r1, r7, r4, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb04 f106 	mul.w	r1, r4, r6
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002c6:	f080 8112 	bcs.w	80004ee <__udivmoddi4+0x27e>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 810f 	bls.w	80004ee <__udivmoddi4+0x27e>
 80002d0:	3c02      	subs	r4, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a59      	subs	r1, r3, r1
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	fbb1 f0f7 	udiv	r0, r1, r7
 80002de:	fb07 1110 	mls	r1, r7, r0, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb00 f606 	mul.w	r6, r0, r6
 80002ea:	429e      	cmp	r6, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x94>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002f6:	f080 80fc 	bcs.w	80004f2 <__udivmoddi4+0x282>
 80002fa:	429e      	cmp	r6, r3
 80002fc:	f240 80f9 	bls.w	80004f2 <__udivmoddi4+0x282>
 8000300:	4463      	add	r3, ip
 8000302:	3802      	subs	r0, #2
 8000304:	1b9b      	subs	r3, r3, r6
 8000306:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800030a:	2100      	movs	r1, #0
 800030c:	b11d      	cbz	r5, 8000316 <__udivmoddi4+0xa6>
 800030e:	40d3      	lsrs	r3, r2
 8000310:	2200      	movs	r2, #0
 8000312:	e9c5 3200 	strd	r3, r2, [r5]
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d905      	bls.n	800032a <__udivmoddi4+0xba>
 800031e:	b10d      	cbz	r5, 8000324 <__udivmoddi4+0xb4>
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	2100      	movs	r1, #0
 8000326:	4608      	mov	r0, r1
 8000328:	e7f5      	b.n	8000316 <__udivmoddi4+0xa6>
 800032a:	fab3 f183 	clz	r1, r3
 800032e:	2900      	cmp	r1, #0
 8000330:	d146      	bne.n	80003c0 <__udivmoddi4+0x150>
 8000332:	42a3      	cmp	r3, r4
 8000334:	d302      	bcc.n	800033c <__udivmoddi4+0xcc>
 8000336:	4290      	cmp	r0, r2
 8000338:	f0c0 80f0 	bcc.w	800051c <__udivmoddi4+0x2ac>
 800033c:	1a86      	subs	r6, r0, r2
 800033e:	eb64 0303 	sbc.w	r3, r4, r3
 8000342:	2001      	movs	r0, #1
 8000344:	2d00      	cmp	r5, #0
 8000346:	d0e6      	beq.n	8000316 <__udivmoddi4+0xa6>
 8000348:	e9c5 6300 	strd	r6, r3, [r5]
 800034c:	e7e3      	b.n	8000316 <__udivmoddi4+0xa6>
 800034e:	2a00      	cmp	r2, #0
 8000350:	f040 8090 	bne.w	8000474 <__udivmoddi4+0x204>
 8000354:	eba1 040c 	sub.w	r4, r1, ip
 8000358:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800035c:	fa1f f78c 	uxth.w	r7, ip
 8000360:	2101      	movs	r1, #1
 8000362:	fbb4 f6f8 	udiv	r6, r4, r8
 8000366:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800036a:	fb08 4416 	mls	r4, r8, r6, r4
 800036e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000372:	fb07 f006 	mul.w	r0, r7, r6
 8000376:	4298      	cmp	r0, r3
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x11c>
 800037a:	eb1c 0303 	adds.w	r3, ip, r3
 800037e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x11a>
 8000384:	4298      	cmp	r0, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2b4>
 800038a:	4626      	mov	r6, r4
 800038c:	1a1c      	subs	r4, r3, r0
 800038e:	fa1f f38e 	uxth.w	r3, lr
 8000392:	fbb4 f0f8 	udiv	r0, r4, r8
 8000396:	fb08 4410 	mls	r4, r8, r0, r4
 800039a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800039e:	fb00 f707 	mul.w	r7, r0, r7
 80003a2:	429f      	cmp	r7, r3
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x148>
 80003a6:	eb1c 0303 	adds.w	r3, ip, r3
 80003aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x146>
 80003b0:	429f      	cmp	r7, r3
 80003b2:	f200 80b0 	bhi.w	8000516 <__udivmoddi4+0x2a6>
 80003b6:	4620      	mov	r0, r4
 80003b8:	1bdb      	subs	r3, r3, r7
 80003ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003be:	e7a5      	b.n	800030c <__udivmoddi4+0x9c>
 80003c0:	f1c1 0620 	rsb	r6, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ca:	431f      	orrs	r7, r3
 80003cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003d0:	fa04 f301 	lsl.w	r3, r4, r1
 80003d4:	ea43 030c 	orr.w	r3, r3, ip
 80003d8:	40f4      	lsrs	r4, r6
 80003da:	fa00 f801 	lsl.w	r8, r0, r1
 80003de:	0c38      	lsrs	r0, r7, #16
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb4 fef0 	udiv	lr, r4, r0
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	fb00 441e 	mls	r4, r0, lr, r4
 80003f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003f4:	fb0e f90c 	mul.w	r9, lr, ip
 80003f8:	45a1      	cmp	r9, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90a      	bls.n	8000416 <__udivmoddi4+0x1a6>
 8000400:	193c      	adds	r4, r7, r4
 8000402:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000406:	f080 8084 	bcs.w	8000512 <__udivmoddi4+0x2a2>
 800040a:	45a1      	cmp	r9, r4
 800040c:	f240 8081 	bls.w	8000512 <__udivmoddi4+0x2a2>
 8000410:	f1ae 0e02 	sub.w	lr, lr, #2
 8000414:	443c      	add	r4, r7
 8000416:	eba4 0409 	sub.w	r4, r4, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000422:	fb00 4413 	mls	r4, r0, r3, r4
 8000426:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800042a:	fb03 fc0c 	mul.w	ip, r3, ip
 800042e:	45a4      	cmp	ip, r4
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x1d2>
 8000432:	193c      	adds	r4, r7, r4
 8000434:	f103 30ff 	add.w	r0, r3, #4294967295
 8000438:	d267      	bcs.n	800050a <__udivmoddi4+0x29a>
 800043a:	45a4      	cmp	ip, r4
 800043c:	d965      	bls.n	800050a <__udivmoddi4+0x29a>
 800043e:	3b02      	subs	r3, #2
 8000440:	443c      	add	r4, r7
 8000442:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000446:	fba0 9302 	umull	r9, r3, r0, r2
 800044a:	eba4 040c 	sub.w	r4, r4, ip
 800044e:	429c      	cmp	r4, r3
 8000450:	46ce      	mov	lr, r9
 8000452:	469c      	mov	ip, r3
 8000454:	d351      	bcc.n	80004fa <__udivmoddi4+0x28a>
 8000456:	d04e      	beq.n	80004f6 <__udivmoddi4+0x286>
 8000458:	b155      	cbz	r5, 8000470 <__udivmoddi4+0x200>
 800045a:	ebb8 030e 	subs.w	r3, r8, lr
 800045e:	eb64 040c 	sbc.w	r4, r4, ip
 8000462:	fa04 f606 	lsl.w	r6, r4, r6
 8000466:	40cb      	lsrs	r3, r1
 8000468:	431e      	orrs	r6, r3
 800046a:	40cc      	lsrs	r4, r1
 800046c:	e9c5 6400 	strd	r6, r4, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	e750      	b.n	8000316 <__udivmoddi4+0xa6>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f103 	lsr.w	r1, r0, r3
 800047c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000480:	fa24 f303 	lsr.w	r3, r4, r3
 8000484:	4094      	lsls	r4, r2
 8000486:	430c      	orrs	r4, r1
 8000488:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800048c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000490:	fa1f f78c 	uxth.w	r7, ip
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3110 	mls	r1, r8, r0, r3
 800049c:	0c23      	lsrs	r3, r4, #16
 800049e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004a2:	fb00 f107 	mul.w	r1, r0, r7
 80004a6:	4299      	cmp	r1, r3
 80004a8:	d908      	bls.n	80004bc <__udivmoddi4+0x24c>
 80004aa:	eb1c 0303 	adds.w	r3, ip, r3
 80004ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80004b2:	d22c      	bcs.n	800050e <__udivmoddi4+0x29e>
 80004b4:	4299      	cmp	r1, r3
 80004b6:	d92a      	bls.n	800050e <__udivmoddi4+0x29e>
 80004b8:	3802      	subs	r0, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004c4:	fb08 3311 	mls	r3, r8, r1, r3
 80004c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004cc:	fb01 f307 	mul.w	r3, r1, r7
 80004d0:	42a3      	cmp	r3, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x276>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004dc:	d213      	bcs.n	8000506 <__udivmoddi4+0x296>
 80004de:	42a3      	cmp	r3, r4
 80004e0:	d911      	bls.n	8000506 <__udivmoddi4+0x296>
 80004e2:	3902      	subs	r1, #2
 80004e4:	4464      	add	r4, ip
 80004e6:	1ae4      	subs	r4, r4, r3
 80004e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ec:	e739      	b.n	8000362 <__udivmoddi4+0xf2>
 80004ee:	4604      	mov	r4, r0
 80004f0:	e6f0      	b.n	80002d4 <__udivmoddi4+0x64>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e706      	b.n	8000304 <__udivmoddi4+0x94>
 80004f6:	45c8      	cmp	r8, r9
 80004f8:	d2ae      	bcs.n	8000458 <__udivmoddi4+0x1e8>
 80004fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80004fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000502:	3801      	subs	r0, #1
 8000504:	e7a8      	b.n	8000458 <__udivmoddi4+0x1e8>
 8000506:	4631      	mov	r1, r6
 8000508:	e7ed      	b.n	80004e6 <__udivmoddi4+0x276>
 800050a:	4603      	mov	r3, r0
 800050c:	e799      	b.n	8000442 <__udivmoddi4+0x1d2>
 800050e:	4630      	mov	r0, r6
 8000510:	e7d4      	b.n	80004bc <__udivmoddi4+0x24c>
 8000512:	46d6      	mov	lr, sl
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1a6>
 8000516:	4463      	add	r3, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74d      	b.n	80003b8 <__udivmoddi4+0x148>
 800051c:	4606      	mov	r6, r0
 800051e:	4623      	mov	r3, r4
 8000520:	4608      	mov	r0, r1
 8000522:	e70f      	b.n	8000344 <__udivmoddi4+0xd4>
 8000524:	3e02      	subs	r6, #2
 8000526:	4463      	add	r3, ip
 8000528:	e730      	b.n	800038c <__udivmoddi4+0x11c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <HAL_CAN_RxFifo0MsgPendingCallback>:
volatile uint32_t TxComplete = 0;


//9.2.7 Rx FIFO 0 message pending callback.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b08c      	sub	sp, #48	@ 0x30
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000538:	f107 0308 	add.w	r3, r7, #8
 800053c:	f107 0210 	add.w	r2, r7, #16
 8000540:	2100      	movs	r1, #0
 8000542:	6878      	ldr	r0, [r7, #4]
 8000544:	f001 f88e 	bl	8001664 <HAL_CAN_GetRxMessage>
	size_t sent = xStreamBufferSendFromISR(xStreamBuffer0, RxData, 8, NULL);
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800054a:	6818      	ldr	r0, [r3, #0]
 800054c:	f107 0108 	add.w	r1, r7, #8
 8000550:	2300      	movs	r3, #0
 8000552:	2208      	movs	r2, #8
 8000554:	f003 fc85 	bl	8003e62 <xStreamBufferSendFromISR>
 8000558:	62f8      	str	r0, [r7, #44]	@ 0x2c
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800055a:	2101      	movs	r1, #1
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800055e:	f001 fed4 	bl	800230a <HAL_GPIO_TogglePin>
}
 8000562:	bf00      	nop
 8000564:	3730      	adds	r7, #48	@ 0x30
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000e4 	.word	0x200000e4
 8000570:	40020400 	.word	0x40020400

08000574 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	TxComplete = 1;
 800057c:	4b04      	ldr	r3, [pc, #16]	@ (8000590 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800057e:	2201      	movs	r2, #1
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	200000ec 	.word	0x200000ec

08000594 <CanReceiverTask>:


static void CanReceiverTask() {
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	@ 0x50
 8000598:	af00      	add	r7, sp, #0
	uint8_t RxDataToProcess[64];
	uint32_t received = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t sent = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	647b      	str	r3, [r7, #68]	@ 0x44
	for (;;) {
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 80005a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000618 <CanReceiverTask+0x84>)
 80005a4:	6818      	ldr	r0, [r3, #0]
 80005a6:	1d3a      	adds	r2, r7, #4
 80005a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005aa:	18d1      	adds	r1, r2, r3
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	2208      	movs	r2, #8
 80005b2:	f003 fd0c 	bl	8003fce <xStreamBufferReceive>
 80005b6:	4602      	mov	r2, r0
 80005b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005ba:	4413      	add	r3, r2
 80005bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (received == 64) {
 80005be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80005c0:	2b40      	cmp	r3, #64	@ 0x40
 80005c2:	d1ee      	bne.n	80005a2 <CanReceiverTask+0xe>
			for(uint32_t i = 0; i < 64; i++){
 80005c4:	2300      	movs	r3, #0
 80005c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80005c8:	e00d      	b.n	80005e6 <CanReceiverTask+0x52>
				RxDataToProcess[i] += 1;
 80005ca:	1d3a      	adds	r2, r7, #4
 80005cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005ce:	4413      	add	r3, r2
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	b2d9      	uxtb	r1, r3
 80005d6:	1d3a      	adds	r2, r7, #4
 80005d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005da:	4413      	add	r3, r2
 80005dc:	460a      	mov	r2, r1
 80005de:	701a      	strb	r2, [r3, #0]
			for(uint32_t i = 0; i < 64; i++){
 80005e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005e2:	3301      	adds	r3, #1
 80005e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80005e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80005e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80005ea:	d9ee      	bls.n	80005ca <CanReceiverTask+0x36>
			}
			sent = xStreamBufferSend(xStreamBuffer1, RxDataToProcess, 64, 0);
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <CanReceiverTask+0x88>)
 80005ee:	6818      	ldr	r0, [r3, #0]
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	2300      	movs	r3, #0
 80005f4:	2240      	movs	r2, #64	@ 0x40
 80005f6:	f003 fb73 	bl	8003ce0 <xStreamBufferSend>
 80005fa:	6478      	str	r0, [r7, #68]	@ 0x44
			memset(RxDataToProcess, 0, 64);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2240      	movs	r2, #64	@ 0x40
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f006 f86a 	bl	80066dc <memset>
			received = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	64fb      	str	r3, [r7, #76]	@ 0x4c
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800060c:	2180      	movs	r1, #128	@ 0x80
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <CanReceiverTask+0x8c>)
 8000610:	f001 fe7b 	bl	800230a <HAL_GPIO_TogglePin>
		received += xStreamBufferReceive(xStreamBuffer0, &RxDataToProcess[received], 8, portMAX_DELAY);
 8000614:	e7c5      	b.n	80005a2 <CanReceiverTask+0xe>
 8000616:	bf00      	nop
 8000618:	200000e4 	.word	0x200000e4
 800061c:	200000e8 	.word	0x200000e8
 8000620:	40020400 	.word	0x40020400

08000624 <CanSenderTask>:

		}
	}
}

static void CanSenderTask() {
 8000624:	b580      	push	{r7, lr}
 8000626:	b08c      	sub	sp, #48	@ 0x30
 8000628:	af00      	add	r7, sp, #0
	uint8_t DataToSend[8];
	uint32_t received = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	CAN_RxHeaderTypeDef TxHeader;
	uint32_t TxMailbox;


	TxHeader.DLC = 8;
 800062e:	2308      	movs	r3, #8
 8000630:	61bb      	str	r3, [r7, #24]
	TxHeader.IDE = CAN_ID_STD;		// use 11 bit identifier
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	TxHeader.StdId = 0x321;			// ID
 800063a:	f240 3321 	movw	r3, #801	@ 0x321
 800063e:	60bb      	str	r3, [r7, #8]
	while(1) {
		received = xStreamBufferReceive(xStreamBuffer1, DataToSend, 8, portMAX_DELAY);
 8000640:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <CanSenderTask+0x54>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	2208      	movs	r2, #8
 800064e:	f003 fcbe 	bl	8003fce <xStreamBufferReceive>
 8000652:	62f8      	str	r0, [r7, #44]	@ 0x2c
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, DataToSend, &TxMailbox);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800065a:	f107 0108 	add.w	r1, r7, #8
 800065e:	4807      	ldr	r0, [pc, #28]	@ (800067c <CanSenderTask+0x58>)
 8000660:	f000 ff30 	bl	80014c4 <HAL_CAN_AddTxMessage>
		while(!TxComplete) {
 8000664:	bf00      	nop
 8000666:	4b06      	ldr	r3, [pc, #24]	@ (8000680 <CanSenderTask+0x5c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0fb      	beq.n	8000666 <CanSenderTask+0x42>

		};
		TxComplete = 0;
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <CanSenderTask+0x5c>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
		received = xStreamBufferReceive(xStreamBuffer1, DataToSend, 8, portMAX_DELAY);
 8000674:	e7e4      	b.n	8000640 <CanSenderTask+0x1c>
 8000676:	bf00      	nop
 8000678:	200000e8 	.word	0x200000e8
 800067c:	2000007c 	.word	0x2000007c
 8000680:	200000ec 	.word	0x200000ec

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fb98 	bl	8000dbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f8a7 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f969 	bl	8000968 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000696:	f000 f913 	bl	80008c0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret = HAL_CAN_RegisterCallback(&hcan1, HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID, HAL_CAN_TxMailbox0CompleteCallback);
 800069a:	4a46      	ldr	r2, [pc, #280]	@ (80007b4 <main+0x130>)
 800069c:	2100      	movs	r1, #0
 800069e:	4846      	ldr	r0, [pc, #280]	@ (80007b8 <main+0x134>)
 80006a0:	f000 fd30 	bl	8001104 <HAL_CAN_RegisterCallback>
 80006a4:	4603      	mov	r3, r0
 80006a6:	75fb      	strb	r3, [r7, #23]

  HAL_CAN_Start(&hcan1);
 80006a8:	4843      	ldr	r0, [pc, #268]	@ (80007b8 <main+0x134>)
 80006aa:	f000 fec7 	bl	800143c <HAL_CAN_Start>
  //from HAL SDK docs 9.2.1, argument from 9.3.1

  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80006ae:	2102      	movs	r1, #2
 80006b0:	4841      	ldr	r0, [pc, #260]	@ (80007b8 <main+0x134>)
 80006b2:	f001 f8f9 	bl	80018a8 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 80006b6:	2101      	movs	r1, #1
 80006b8:	483f      	ldr	r0, [pc, #252]	@ (80007b8 <main+0x134>)
 80006ba:	f001 f8f5 	bl	80018a8 <HAL_CAN_ActivateNotification>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006be:	f002 fb35 	bl	8002d2c <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	xStreamBuffer0 = xStreamBufferCreate(RECEIVE_BUFFER_LENGTH, 1);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2101      	movs	r1, #1
 80006c6:	200a      	movs	r0, #10
 80006c8:	f003 fa70 	bl	8003bac <xStreamBufferGenericCreate>
 80006cc:	4603      	mov	r3, r0
 80006ce:	4a3b      	ldr	r2, [pc, #236]	@ (80007bc <main+0x138>)
 80006d0:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer0);
 80006d2:	4b3a      	ldr	r3, [pc, #232]	@ (80007bc <main+0x138>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d10d      	bne.n	80006f6 <main+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006de:	b672      	cpsid	i
 80006e0:	f383 8811 	msr	BASEPRI, r3
 80006e4:	f3bf 8f6f 	isb	sy
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	b662      	cpsie	i
 80006ee:	613b      	str	r3, [r7, #16]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006f0:	bf00      	nop
 80006f2:	bf00      	nop
 80006f4:	e7fd      	b.n	80006f2 <main+0x6e>
	xStreamBuffer1 = xStreamBufferCreate(SEND_BUFFER_LENGTH, 1);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	2040      	movs	r0, #64	@ 0x40
 80006fc:	f003 fa56 	bl	8003bac <xStreamBufferGenericCreate>
 8000700:	4603      	mov	r3, r0
 8000702:	4a2f      	ldr	r2, [pc, #188]	@ (80007c0 <main+0x13c>)
 8000704:	6013      	str	r3, [r2, #0]
	configASSERT(NULL != xStreamBuffer1);
 8000706:	4b2e      	ldr	r3, [pc, #184]	@ (80007c0 <main+0x13c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d10d      	bne.n	800072a <main+0xa6>
	__asm volatile
 800070e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000712:	b672      	cpsid	i
 8000714:	f383 8811 	msr	BASEPRI, r3
 8000718:	f3bf 8f6f 	isb	sy
 800071c:	f3bf 8f4f 	dsb	sy
 8000720:	b662      	cpsie	i
 8000722:	60fb      	str	r3, [r7, #12]
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	e7fd      	b.n	8000726 <main+0xa2>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800072a:	4a26      	ldr	r2, [pc, #152]	@ (80007c4 <main+0x140>)
 800072c:	2100      	movs	r1, #0
 800072e:	4826      	ldr	r0, [pc, #152]	@ (80007c8 <main+0x144>)
 8000730:	f002 fb66 	bl	8002e00 <osThreadNew>
 8000734:	4603      	mov	r3, r0
 8000736:	4a25      	ldr	r2, [pc, #148]	@ (80007cc <main+0x148>)
 8000738:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */

	configASSERT(pdPASS == xTaskCreate(CanReceiverTask, "CanReceiverTask", 128 * 4, NULL,
 800073a:	2300      	movs	r3, #0
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2301      	movs	r3, #1
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000748:	4921      	ldr	r1, [pc, #132]	@ (80007d0 <main+0x14c>)
 800074a:	4822      	ldr	r0, [pc, #136]	@ (80007d4 <main+0x150>)
 800074c:	f003 fec9 	bl	80044e2 <xTaskCreate>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d00d      	beq.n	8000772 <main+0xee>
	__asm volatile
 8000756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800075a:	b672      	cpsid	i
 800075c:	f383 8811 	msr	BASEPRI, r3
 8000760:	f3bf 8f6f 	isb	sy
 8000764:	f3bf 8f4f 	dsb	sy
 8000768:	b662      	cpsie	i
 800076a:	60bb      	str	r3, [r7, #8]
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	e7fd      	b.n	800076e <main+0xea>
			tskIDLE_PRIORITY + 1, NULL));

	configASSERT(pdPASS == xTaskCreate(CanSenderTask, "CanSenderTask", 128 * 4, NULL,
 8000772:	2300      	movs	r3, #0
 8000774:	9301      	str	r3, [sp, #4]
 8000776:	2302      	movs	r3, #2
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2300      	movs	r3, #0
 800077c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000780:	4915      	ldr	r1, [pc, #84]	@ (80007d8 <main+0x154>)
 8000782:	4816      	ldr	r0, [pc, #88]	@ (80007dc <main+0x158>)
 8000784:	f003 fead 	bl	80044e2 <xTaskCreate>
 8000788:	4603      	mov	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d00d      	beq.n	80007aa <main+0x126>
	__asm volatile
 800078e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000792:	b672      	cpsid	i
 8000794:	f383 8811 	msr	BASEPRI, r3
 8000798:	f3bf 8f6f 	isb	sy
 800079c:	f3bf 8f4f 	dsb	sy
 80007a0:	b662      	cpsie	i
 80007a2:	607b      	str	r3, [r7, #4]
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	e7fd      	b.n	80007a6 <main+0x122>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80007aa:	f002 faf3 	bl	8002d94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80007ae:	bf00      	nop
 80007b0:	e7fd      	b.n	80007ae <main+0x12a>
 80007b2:	bf00      	nop
 80007b4:	08000575 	.word	0x08000575
 80007b8:	2000007c 	.word	0x2000007c
 80007bc:	200000e4 	.word	0x200000e4
 80007c0:	200000e8 	.word	0x200000e8
 80007c4:	08006908 	.word	0x08006908
 80007c8:	08000bbd 	.word	0x08000bbd
 80007cc:	200000e0 	.word	0x200000e0
 80007d0:	080068d0 	.word	0x080068d0
 80007d4:	08000595 	.word	0x08000595
 80007d8:	080068e0 	.word	0x080068e0
 80007dc:	08000625 	.word	0x08000625

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b094      	sub	sp, #80	@ 0x50
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	2234      	movs	r2, #52	@ 0x34
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 ff74 	bl	80066dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000804:	4b2c      	ldr	r3, [pc, #176]	@ (80008b8 <SystemClock_Config+0xd8>)
 8000806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000808:	4a2b      	ldr	r2, [pc, #172]	@ (80008b8 <SystemClock_Config+0xd8>)
 800080a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000810:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <SystemClock_Config+0xd8>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800081c:	4b27      	ldr	r3, [pc, #156]	@ (80008bc <SystemClock_Config+0xdc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000824:	4a25      	ldr	r2, [pc, #148]	@ (80008bc <SystemClock_Config+0xdc>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800082a:	6013      	str	r3, [r2, #0]
 800082c:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <SystemClock_Config+0xdc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000834:	603b      	str	r3, [r7, #0]
 8000836:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800083c:	2301      	movs	r3, #1
 800083e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000840:	2310      	movs	r3, #16
 8000842:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000844:	2302      	movs	r3, #2
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800084c:	2308      	movs	r3, #8
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000850:	23c0      	movs	r3, #192	@ 0xc0
 8000852:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000854:	2304      	movs	r3, #4
 8000856:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000858:	2302      	movs	r3, #2
 800085a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fdbb 	bl	80023e0 <HAL_RCC_OscConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000870:	f000 f9ac 	bl	8000bcc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000874:	f001 fd64 	bl	8002340 <HAL_PWREx_EnableOverDrive>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800087e:	f000 f9a5 	bl	8000bcc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000882:	230f      	movs	r3, #15
 8000884:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000886:	2302      	movs	r3, #2
 8000888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	2103      	movs	r1, #3
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 f84c 	bl	800293c <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xce>
  {
    Error_Handler();
 80008aa:	f000 f98f 	bl	8000bcc <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	@ 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	@ 0x28
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008c8:	4a26      	ldr	r2, [pc, #152]	@ (8000964 <MX_CAN1_Init+0xa4>)
 80008ca:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 80008cc:	4b24      	ldr	r3, [pc, #144]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008ce:	2220      	movs	r2, #32
 80008d0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008d8:	4b21      	ldr	r3, [pc, #132]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80008de:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008e0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80008e4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 80008e6:	4b1e      	ldr	r3, [pc, #120]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008e8:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80008ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <MX_CAN1_Init+0xa0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <MX_CAN1_Init+0xa0>)
 8000902:	2200      	movs	r2, #0
 8000904:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <MX_CAN1_Init+0xa0>)
 8000908:	2200      	movs	r2, #0
 800090a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <MX_CAN1_Init+0xa0>)
 800090e:	2200      	movs	r2, #0
 8000910:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_CAN1_Init+0xa0>)
 8000914:	f000 fab0 	bl	8000e78 <HAL_CAN_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800091e:	f000 f955 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

	//Filter for KW45's 0x123 messages
	CAN_FilterTypeDef CanFilter0;
	CanFilter0.FilterActivation = CAN_FILTER_ENABLE;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
	CanFilter0.FilterBank = 18;
 8000926:	2312      	movs	r3, #18
 8000928:	617b      	str	r3, [r7, #20]
	CanFilter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
	CanFilter0.FilterIdHigh = 0x123 << 5;
 800092e:	f242 4360 	movw	r3, #9312	@ 0x2460
 8000932:	603b      	str	r3, [r7, #0]
	CanFilter0.FilterIdLow = 0x0;
 8000934:	2300      	movs	r3, #0
 8000936:	607b      	str	r3, [r7, #4]
	CanFilter0.FilterMaskIdHigh = 0x123 << 5;
 8000938:	f242 4360 	movw	r3, #9312	@ 0x2460
 800093c:	60bb      	str	r3, [r7, #8]
	CanFilter0.FilterMaskIdLow = 0x0;
 800093e:	2300      	movs	r3, #0
 8000940:	60fb      	str	r3, [r7, #12]
	CanFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
	CanFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 8000946:	2301      	movs	r3, #1
 8000948:	61fb      	str	r3, [r7, #28]
	CanFilter0.SlaveStartFilterBank = 20;
 800094a:	2314      	movs	r3, #20
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_CAN_ConfigFilter(&hcan1, &CanFilter0);
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4803      	ldr	r0, [pc, #12]	@ (8000960 <MX_CAN1_Init+0xa0>)
 8000954:	f000 fc86 	bl	8001264 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	3728      	adds	r7, #40	@ 0x28
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000007c 	.word	0x2000007c
 8000964:	40006400 	.word	0x40006400

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08c      	sub	sp, #48	@ 0x30
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	4b89      	ldr	r3, [pc, #548]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a88      	ldr	r2, [pc, #544]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b86      	ldr	r3, [pc, #536]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	61bb      	str	r3, [r7, #24]
 8000994:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	4b83      	ldr	r3, [pc, #524]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a82      	ldr	r2, [pc, #520]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b80      	ldr	r3, [pc, #512]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b7d      	ldr	r3, [pc, #500]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a7c      	ldr	r2, [pc, #496]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b7a      	ldr	r3, [pc, #488]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c6:	4b77      	ldr	r3, [pc, #476]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a76      	ldr	r2, [pc, #472]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b74      	ldr	r3, [pc, #464]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60fb      	str	r3, [r7, #12]
 80009dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	4b71      	ldr	r3, [pc, #452]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a70      	ldr	r2, [pc, #448]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009e4:	f043 0308 	orr.w	r3, r3, #8
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b6e      	ldr	r3, [pc, #440]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0308 	and.w	r3, r3, #8
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f6:	4b6b      	ldr	r3, [pc, #428]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	4a6a      	ldr	r2, [pc, #424]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 80009fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a02:	4b68      	ldr	r3, [pc, #416]	@ (8000ba4 <MX_GPIO_Init+0x23c>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a14:	4864      	ldr	r0, [pc, #400]	@ (8000ba8 <MX_GPIO_Init+0x240>)
 8000a16:	f001 fc5f 	bl	80022d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2140      	movs	r1, #64	@ 0x40
 8000a1e:	4863      	ldr	r0, [pc, #396]	@ (8000bac <MX_GPIO_Init+0x244>)
 8000a20:	f001 fc5a 	bl	80022d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a24:	2200      	movs	r2, #0
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	4861      	ldr	r0, [pc, #388]	@ (8000bb0 <MX_GPIO_Init+0x248>)
 8000a2a:	f001 fc55 	bl	80022d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 031c 	add.w	r3, r7, #28
 8000a42:	4619      	mov	r1, r3
 8000a44:	485b      	ldr	r0, [pc, #364]	@ (8000bb4 <MX_GPIO_Init+0x24c>)
 8000a46:	f001 fa9b 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a4a:	2332      	movs	r3, #50	@ 0x32
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5a:	230b      	movs	r3, #11
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4853      	ldr	r0, [pc, #332]	@ (8000bb4 <MX_GPIO_Init+0x24c>)
 8000a66:	f001 fa8b 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a6a:	2386      	movs	r3, #134	@ 0x86
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	484c      	ldr	r0, [pc, #304]	@ (8000bb8 <MX_GPIO_Init+0x250>)
 8000a86:	f001 fa7b 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a8a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4841      	ldr	r0, [pc, #260]	@ (8000ba8 <MX_GPIO_Init+0x240>)
 8000aa4:	f001 fa6c 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000aa8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aba:	230b      	movs	r3, #11
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4838      	ldr	r0, [pc, #224]	@ (8000ba8 <MX_GPIO_Init+0x240>)
 8000ac6:	f001 fa5b 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000adc:	2307      	movs	r3, #7
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4832      	ldr	r0, [pc, #200]	@ (8000bb0 <MX_GPIO_Init+0x248>)
 8000ae8:	f001 fa4a 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000aec:	2340      	movs	r3, #64	@ 0x40
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000afc:	f107 031c 	add.w	r3, r7, #28
 8000b00:	4619      	mov	r1, r3
 8000b02:	482a      	ldr	r0, [pc, #168]	@ (8000bac <MX_GPIO_Init+0x244>)
 8000b04:	f001 fa3c 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4824      	ldr	r0, [pc, #144]	@ (8000bac <MX_GPIO_Init+0x244>)
 8000b1c:	f001 fa30 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000b20:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b32:	230a      	movs	r3, #10
 8000b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481e      	ldr	r0, [pc, #120]	@ (8000bb8 <MX_GPIO_Init+0x250>)
 8000b3e:	f001 fa1f 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	4619      	mov	r1, r3
 8000b56:	4818      	ldr	r0, [pc, #96]	@ (8000bb8 <MX_GPIO_Init+0x250>)
 8000b58:	f001 fa12 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	480f      	ldr	r0, [pc, #60]	@ (8000bb0 <MX_GPIO_Init+0x248>)
 8000b74:	f001 fa04 	bl	8001f80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b78:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	4805      	ldr	r0, [pc, #20]	@ (8000bac <MX_GPIO_Init+0x244>)
 8000b96:	f001 f9f3 	bl	8001f80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	@ 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020400 	.word	0x40020400
 8000bac:	40021800 	.word	0x40021800
 8000bb0:	40020c00 	.word	0x40020c00
 8000bb4:	40020800 	.word	0x40020800
 8000bb8:	40020000 	.word	0x40020000

08000bbc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f002 f9c1 	bl	8002f4c <osDelay>
 8000bca:	e7fb      	b.n	8000bc4 <StartDefaultTask+0x8>

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd0:	b672      	cpsid	i
}
 8000bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <Error_Handler+0x8>

08000bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	4b11      	ldr	r3, [pc, #68]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a10      	ldr	r2, [pc, #64]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	210f      	movs	r1, #15
 8000c12:	f06f 0001 	mvn.w	r0, #1
 8000c16:	f001 f97c 	bl	8001f12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	@ 0x28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
 8000c3c:	60da      	str	r2, [r3, #12]
 8000c3e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc4 <HAL_CAN_MspInit+0x9c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d137      	bne.n	8000cba <HAL_CAN_MspInit+0x92>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc8 <HAL_CAN_MspInit+0xa0>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000cc8 <HAL_CAN_MspInit+0xa0>)
 8000c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c56:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <HAL_CAN_MspInit+0xa0>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_CAN_MspInit+0xa0>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <HAL_CAN_MspInit+0xa0>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <HAL_CAN_MspInit+0xa0>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <HAL_CAN_MspInit+0xa4>)
 8000c96:	f001 f973 	bl	8001f80 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	2013      	movs	r0, #19
 8000ca0:	f001 f937 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ca4:	2013      	movs	r0, #19
 8000ca6:	f001 f950 	bl	8001f4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	2014      	movs	r0, #20
 8000cb0:	f001 f92f 	bl	8001f12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f001 f948 	bl	8001f4a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40006400 	.word	0x40006400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <HardFault_Handler+0x4>

08000ce0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <MemManage_Handler+0x4>

08000ce8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <BusFault_Handler+0x4>

08000cf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <UsageFault_Handler+0x4>

08000cf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d0a:	f000 f895 	bl	8000e38 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d0e:	f004 fa33 	bl	8005178 <xTaskGetSchedulerState>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d001      	beq.n	8000d1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d18:	f005 fa5e 	bl	80061d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <CAN1_TX_IRQHandler+0x10>)
 8000d26:	f000 fde5 	bl	80018f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000007c 	.word	0x2000007c

08000d34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <CAN1_RX0_IRQHandler+0x10>)
 8000d3a:	f000 fddb 	bl	80018f4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	2000007c 	.word	0x2000007c

08000d48 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SystemInit+0x20>)
 8000d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <SystemInit+0x20>)
 8000d54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d70:	f7ff ffea 	bl	8000d48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	@ (8000da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	@ (8000dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f005 fcfd 	bl	8006798 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fc71 	bl	8000684 <main>
  bx  lr    
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000db0:	0800694c 	.word	0x0800694c
  ldr r2, =_sbss
 8000db4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000db8:	20004c14 	.word	0x20004c14

08000dbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC_IRQHandler>

08000dbe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc2:	2003      	movs	r0, #3
 8000dc4:	f001 f89a 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc8:	200f      	movs	r0, #15
 8000dca:	f000 f805 	bl	8000dd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dce:	f7ff ff03 	bl	8000bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de0:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <HAL_InitTick+0x54>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_InitTick+0x58>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4619      	mov	r1, r3
 8000dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f001 f8b5 	bl	8001f66 <HAL_SYSTICK_Config>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00e      	b.n	8000e24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d80a      	bhi.n	8000e22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f001 f87d 	bl	8001f12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e18:	4a06      	ldr	r2, [pc, #24]	@ (8000e34 <HAL_InitTick+0x5c>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e000      	b.n	8000e24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000000 	.word	0x20000000
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_IncTick+0x20>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a04      	ldr	r2, [pc, #16]	@ (8000e5c <HAL_IncTick+0x24>)
 8000e4a:	6013      	str	r3, [r2, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008
 8000e5c:	200000f0 	.word	0x200000f0

08000e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetTick+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	200000f0 	.word	0x200000f0

08000e78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e11c      	b.n	80010c4 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d131      	bne.n	8000efa <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a8c      	ldr	r2, [pc, #560]	@ (80010cc <HAL_CAN_Init+0x254>)
 8000e9a:	641a      	str	r2, [r3, #64]	@ 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4a8c      	ldr	r2, [pc, #560]	@ (80010d0 <HAL_CAN_Init+0x258>)
 8000ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a8b      	ldr	r2, [pc, #556]	@ (80010d4 <HAL_CAN_Init+0x25c>)
 8000ea6:	649a      	str	r2, [r3, #72]	@ 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4a8b      	ldr	r2, [pc, #556]	@ (80010d8 <HAL_CAN_Init+0x260>)
 8000eac:	64da      	str	r2, [r3, #76]	@ 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a8a      	ldr	r2, [pc, #552]	@ (80010dc <HAL_CAN_Init+0x264>)
 8000eb2:	629a      	str	r2, [r3, #40]	@ 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a8a      	ldr	r2, [pc, #552]	@ (80010e0 <HAL_CAN_Init+0x268>)
 8000eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a89      	ldr	r2, [pc, #548]	@ (80010e4 <HAL_CAN_Init+0x26c>)
 8000ebe:	631a      	str	r2, [r3, #48]	@ 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a89      	ldr	r2, [pc, #548]	@ (80010e8 <HAL_CAN_Init+0x270>)
 8000ec4:	635a      	str	r2, [r3, #52]	@ 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a88      	ldr	r2, [pc, #544]	@ (80010ec <HAL_CAN_Init+0x274>)
 8000eca:	639a      	str	r2, [r3, #56]	@ 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a88      	ldr	r2, [pc, #544]	@ (80010f0 <HAL_CAN_Init+0x278>)
 8000ed0:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a87      	ldr	r2, [pc, #540]	@ (80010f4 <HAL_CAN_Init+0x27c>)
 8000ed6:	651a      	str	r2, [r3, #80]	@ 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a87      	ldr	r2, [pc, #540]	@ (80010f8 <HAL_CAN_Init+0x280>)
 8000edc:	655a      	str	r2, [r3, #84]	@ 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a86      	ldr	r2, [pc, #536]	@ (80010fc <HAL_CAN_Init+0x284>)
 8000ee2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (hcan->MspInitCallback == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	4a84      	ldr	r2, [pc, #528]	@ (8001100 <HAL_CAN_Init+0x288>)
 8000ef0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f042 0201 	orr.w	r2, r2, #1
 8000f08:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f0a:	f7ff ffa9 	bl	8000e60 <HAL_GetTick>
 8000f0e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f10:	e012      	b.n	8000f38 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f12:	f7ff ffa5 	bl	8000e60 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b0a      	cmp	r3, #10
 8000f1e:	d90b      	bls.n	8000f38 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f24:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2205      	movs	r2, #5
 8000f30:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0c5      	b.n	80010c4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0e5      	beq.n	8000f12 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0202 	bic.w	r2, r2, #2
 8000f54:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f56:	f7ff ff83 	bl	8000e60 <HAL_GetTick>
 8000f5a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f5c:	e012      	b.n	8000f84 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f5e:	f7ff ff7f 	bl	8000e60 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b0a      	cmp	r3, #10
 8000f6a:	d90b      	bls.n	8000f84 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f70:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e09f      	b.n	80010c4 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1e5      	bne.n	8000f5e <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7e1b      	ldrb	r3, [r3, #24]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	e007      	b.n	8000fbc <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000fba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	7e5b      	ldrb	r3, [r3, #25]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d108      	bne.n	8000fd6 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e9b      	ldrb	r3, [r3, #26]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d108      	bne.n	8001000 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f042 0220 	orr.w	r2, r2, #32
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e007      	b.n	8001010 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f022 0220 	bic.w	r2, r2, #32
 800100e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	7edb      	ldrb	r3, [r3, #27]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d108      	bne.n	800102a <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f022 0210 	bic.w	r2, r2, #16
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	e007      	b.n	800103a <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0210 	orr.w	r2, r2, #16
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7f1b      	ldrb	r3, [r3, #28]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d108      	bne.n	8001054 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f042 0208 	orr.w	r2, r2, #8
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e007      	b.n	8001064 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 0208 	bic.w	r2, r2, #8
 8001062:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7f5b      	ldrb	r3, [r3, #29]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d108      	bne.n	800107e <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f042 0204 	orr.w	r2, r2, #4
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	e007      	b.n	800108e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0204 	bic.w	r2, r2, #4
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	ea42 0103 	orr.w	r1, r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	430a      	orrs	r2, r1
 80010b2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	08000531 	.word	0x08000531
 80010d0:	08001ce3 	.word	0x08001ce3
 80010d4:	08001cf7 	.word	0x08001cf7
 80010d8:	08001d0b 	.word	0x08001d0b
 80010dc:	08000575 	.word	0x08000575
 80010e0:	08001c7f 	.word	0x08001c7f
 80010e4:	08001c93 	.word	0x08001c93
 80010e8:	08001ca7 	.word	0x08001ca7
 80010ec:	08001cbb 	.word	0x08001cbb
 80010f0:	08001ccf 	.word	0x08001ccf
 80010f4:	08001d1f 	.word	0x08001d1f
 80010f8:	08001d33 	.word	0x08001d33
 80010fc:	08001d47 	.word	0x08001d47
 8001100:	08000c29 	.word	0x08000c29

08001104 <HAL_CAN_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_RegisterCallback(CAN_HandleTypeDef *hcan, HAL_CAN_CallbackIDTypeDef CallbackID,
                                           void (* pCallback)(CAN_HandleTypeDef *_hcan))
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	460b      	mov	r3, r1
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d107      	bne.n	800112c <HAL_CAN_RegisterCallback+0x28>
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001120:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e094      	b.n	8001256 <HAL_CAN_RegisterCallback+0x152>
  }

  if (hcan->State == HAL_CAN_STATE_READY)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d168      	bne.n	800120a <HAL_CAN_RegisterCallback+0x106>
  {
    switch (CallbackID)
 8001138:	7afb      	ldrb	r3, [r7, #11]
 800113a:	2b0e      	cmp	r3, #14
 800113c:	d85c      	bhi.n	80011f8 <HAL_CAN_RegisterCallback+0xf4>
 800113e:	a201      	add	r2, pc, #4	@ (adr r2, 8001144 <HAL_CAN_RegisterCallback+0x40>)
 8001140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001144:	08001181 	.word	0x08001181
 8001148:	08001189 	.word	0x08001189
 800114c:	08001191 	.word	0x08001191
 8001150:	08001199 	.word	0x08001199
 8001154:	080011a1 	.word	0x080011a1
 8001158:	080011a9 	.word	0x080011a9
 800115c:	080011b1 	.word	0x080011b1
 8001160:	080011b9 	.word	0x080011b9
 8001164:	080011c1 	.word	0x080011c1
 8001168:	080011c9 	.word	0x080011c9
 800116c:	080011d1 	.word	0x080011d1
 8001170:	080011d9 	.word	0x080011d9
 8001174:	080011e1 	.word	0x080011e1
 8001178:	080011e9 	.word	0x080011e9
 800117c:	080011f1 	.word	0x080011f1
    {
      case HAL_CAN_TX_MAILBOX0_COMPLETE_CB_ID :
        hcan->TxMailbox0CompleteCallback = pCallback;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	629a      	str	r2, [r3, #40]	@ 0x28
        break;
 8001186:	e065      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_COMPLETE_CB_ID :
        hcan->TxMailbox1CompleteCallback = pCallback;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	62da      	str	r2, [r3, #44]	@ 0x2c
        break;
 800118e:	e061      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_COMPLETE_CB_ID :
        hcan->TxMailbox2CompleteCallback = pCallback;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	631a      	str	r2, [r3, #48]	@ 0x30
        break;
 8001196:	e05d      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX0_ABORT_CB_ID :
        hcan->TxMailbox0AbortCallback = pCallback;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	635a      	str	r2, [r3, #52]	@ 0x34
        break;
 800119e:	e059      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX1_ABORT_CB_ID :
        hcan->TxMailbox1AbortCallback = pCallback;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	639a      	str	r2, [r3, #56]	@ 0x38
        break;
 80011a6:	e055      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_TX_MAILBOX2_ABORT_CB_ID :
        hcan->TxMailbox2AbortCallback = pCallback;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	63da      	str	r2, [r3, #60]	@ 0x3c
        break;
 80011ae:	e051      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_MSG_PENDING_CB_ID :
        hcan->RxFifo0MsgPendingCallback = pCallback;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	641a      	str	r2, [r3, #64]	@ 0x40
        break;
 80011b6:	e04d      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO0_FULL_CB_ID :
        hcan->RxFifo0FullCallback = pCallback;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	645a      	str	r2, [r3, #68]	@ 0x44
        break;
 80011be:	e049      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_MSG_PENDING_CB_ID :
        hcan->RxFifo1MsgPendingCallback = pCallback;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	649a      	str	r2, [r3, #72]	@ 0x48
        break;
 80011c6:	e045      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_RX_FIFO1_FULL_CB_ID :
        hcan->RxFifo1FullCallback = pCallback;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80011ce:	e041      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_SLEEP_CB_ID :
        hcan->SleepCallback = pCallback;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80011d6:	e03d      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_WAKEUP_FROM_RX_MSG_CB_ID :
        hcan->WakeUpFromRxMsgCallback = pCallback;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80011de:	e039      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_ERROR_CB_ID :
        hcan->ErrorCallback = pCallback;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80011e6:	e035      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80011ee:	e031      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80011f6:	e02d      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	75fb      	strb	r3, [r7, #23]
        break;
 8001208:	e024      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else if (hcan->State == HAL_CAN_STATE_RESET)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d116      	bne.n	8001244 <HAL_CAN_RegisterCallback+0x140>
  {
    switch (CallbackID)
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	2b0d      	cmp	r3, #13
 800121a:	d002      	beq.n	8001222 <HAL_CAN_RegisterCallback+0x11e>
 800121c:	2b0e      	cmp	r3, #14
 800121e:	d004      	beq.n	800122a <HAL_CAN_RegisterCallback+0x126>
 8001220:	e007      	b.n	8001232 <HAL_CAN_RegisterCallback+0x12e>
    {
      case HAL_CAN_MSPINIT_CB_ID :
        hcan->MspInitCallback = pCallback;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8001228:	e014      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      case HAL_CAN_MSPDEINIT_CB_ID :
        hcan->MspDeInitCallback = pCallback;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8001230:	e010      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>

      default :
        /* Update the error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001236:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Return error status */
        status =  HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	75fb      	strb	r3, [r7, #23]
        break;
 8001242:	e007      	b.n	8001254 <HAL_CAN_RegisterCallback+0x150>
    }
  }
  else
  {
    /* Update the error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_INVALID_CALLBACK;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status =  HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001254:	7dfb      	ldrb	r3, [r7, #23]
}
 8001256:	4618      	mov	r0, r3
 8001258:	371c      	adds	r7, #28
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800127c:	7cfb      	ldrb	r3, [r7, #19]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d003      	beq.n	800128a <HAL_CAN_ConfigFilter+0x26>
 8001282:	7cfb      	ldrb	r3, [r7, #19]
 8001284:	2b02      	cmp	r3, #2
 8001286:	f040 80c7 	bne.w	8001418 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a69      	ldr	r2, [pc, #420]	@ (8001434 <HAL_CAN_ConfigFilter+0x1d0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d001      	beq.n	8001298 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8001294:	4b68      	ldr	r3, [pc, #416]	@ (8001438 <HAL_CAN_ConfigFilter+0x1d4>)
 8001296:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4a63      	ldr	r2, [pc, #396]	@ (8001438 <HAL_CAN_ConfigFilter+0x1d4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d111      	bne.n	80012d4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012b6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ca:	021b      	lsls	r3, r3, #8
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	f003 031f 	and.w	r3, r3, #31
 80012dc:	2201      	movs	r2, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	401a      	ands	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d123      	bne.n	8001346 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	401a      	ands	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001320:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3248      	adds	r2, #72	@ 0x48
 8001326:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800133a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800133c:	6979      	ldr	r1, [r7, #20]
 800133e:	3348      	adds	r3, #72	@ 0x48
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	440b      	add	r3, r1
 8001344:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d122      	bne.n	8001394 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	431a      	orrs	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800136e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	3248      	adds	r2, #72	@ 0x48
 8001374:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001388:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800138a:	6979      	ldr	r1, [r7, #20]
 800138c:	3348      	adds	r3, #72	@ 0x48
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	440b      	add	r3, r1
 8001392:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	699b      	ldr	r3, [r3, #24]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d109      	bne.n	80013b0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80013ae:	e007      	b.n	80013c0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	431a      	orrs	r2, r3
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d109      	bne.n	80013dc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013da:	e007      	b.n	80013ec <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	431a      	orrs	r2, r3
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6a1b      	ldr	r3, [r3, #32]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d107      	bne.n	8001404 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800140a:	f023 0201 	bic.w	r2, r3, #1
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e006      	b.n	8001426 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
  }
}
 8001426:	4618      	mov	r0, r3
 8001428:	371c      	adds	r7, #28
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40003400 	.word	0x40003400
 8001438:	40006400 	.word	0x40006400

0800143c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3020 	ldrb.w	r3, [r3, #32]
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d12e      	bne.n	80014ae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2202      	movs	r2, #2
 8001454:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0201 	bic.w	r2, r2, #1
 8001466:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fcfa 	bl	8000e60 <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800146e:	e012      	b.n	8001496 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001470:	f7ff fcf6 	bl	8000e60 <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b0a      	cmp	r3, #10
 800147c:	d90b      	bls.n	8001496 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e012      	b.n	80014bc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1e5      	bne.n	8001470 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e006      	b.n	80014bc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
  }
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	@ 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80014e2:	7ffb      	ldrb	r3, [r7, #31]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d003      	beq.n	80014f0 <HAL_CAN_AddTxMessage+0x2c>
 80014e8:	7ffb      	ldrb	r3, [r7, #31]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	f040 80ad 	bne.w	800164a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d10a      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 8095 	beq.w	800163a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	0e1b      	lsrs	r3, r3, #24
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800151a:	2201      	movs	r2, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10d      	bne.n	8001548 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	6809      	ldr	r1, [r1, #0]
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	3318      	adds	r3, #24
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	440b      	add	r3, r1
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e00f      	b.n	8001568 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001552:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001558:	68f9      	ldr	r1, [r7, #12]
 800155a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800155c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	3318      	adds	r3, #24
 8001562:	011b      	lsls	r3, r3, #4
 8001564:	440b      	add	r3, r1
 8001566:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	6819      	ldr	r1, [r3, #0]
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	691a      	ldr	r2, [r3, #16]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3318      	adds	r3, #24
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	440b      	add	r3, r1
 8001578:	3304      	adds	r3, #4
 800157a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	7d1b      	ldrb	r3, [r3, #20]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d111      	bne.n	80015a8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	3318      	adds	r3, #24
 800158c:	011b      	lsls	r3, r3, #4
 800158e:	4413      	add	r3, r2
 8001590:	3304      	adds	r3, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	6811      	ldr	r1, [r2, #0]
 8001598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3318      	adds	r3, #24
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	440b      	add	r3, r1
 80015a4:	3304      	adds	r3, #4
 80015a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3307      	adds	r3, #7
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	061a      	lsls	r2, r3, #24
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3306      	adds	r3, #6
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	041b      	lsls	r3, r3, #16
 80015b8:	431a      	orrs	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3305      	adds	r3, #5
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	4313      	orrs	r3, r2
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	3204      	adds	r2, #4
 80015c8:	7812      	ldrb	r2, [r2, #0]
 80015ca:	4610      	mov	r0, r2
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6811      	ldr	r1, [r2, #0]
 80015d0:	ea43 0200 	orr.w	r2, r3, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	011b      	lsls	r3, r3, #4
 80015d8:	440b      	add	r3, r1
 80015da:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80015de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	3303      	adds	r3, #3
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	061a      	lsls	r2, r3, #24
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3302      	adds	r3, #2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	041b      	lsls	r3, r3, #16
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	3301      	adds	r3, #1
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	4313      	orrs	r3, r2
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	4610      	mov	r0, r2
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	6811      	ldr	r1, [r2, #0]
 8001606:	ea43 0200 	orr.w	r2, r3, r0
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	440b      	add	r3, r1
 8001610:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001614:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	3318      	adds	r3, #24
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	6811      	ldr	r1, [r2, #0]
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	3318      	adds	r3, #24
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	440b      	add	r3, r1
 8001634:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e00e      	b.n	8001658 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e006      	b.n	8001658 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
  }
}
 8001658:	4618      	mov	r0, r3
 800165a:	3724      	adds	r7, #36	@ 0x24
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001664:	b480      	push	{r7}
 8001666:	b087      	sub	sp, #28
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001678:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d003      	beq.n	8001688 <HAL_CAN_GetRxMessage+0x24>
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b02      	cmp	r3, #2
 8001684:	f040 8103 	bne.w	800188e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10e      	bne.n	80016ac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b00      	cmp	r3, #0
 800169a:	d116      	bne.n	80016ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0f7      	b.n	800189c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d107      	bne.n	80016ca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0e8      	b.n	800189c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	331b      	adds	r3, #27
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4413      	add	r3, r2
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0204 	and.w	r2, r3, #4
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10c      	bne.n	8001702 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	331b      	adds	r3, #27
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	4413      	add	r3, r2
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0d5b      	lsrs	r3, r3, #21
 80016f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e00b      	b.n	800171a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	331b      	adds	r3, #27
 800170a:	011b      	lsls	r3, r3, #4
 800170c:	4413      	add	r3, r2
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	331b      	adds	r3, #27
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0202 	and.w	r2, r3, #2
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	331b      	adds	r3, #27
 8001738:	011b      	lsls	r3, r3, #4
 800173a:	4413      	add	r3, r2
 800173c:	3304      	adds	r3, #4
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0308 	and.w	r3, r3, #8
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2208      	movs	r2, #8
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	e00b      	b.n	8001768 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	331b      	adds	r3, #27
 8001758:	011b      	lsls	r3, r3, #4
 800175a:	4413      	add	r3, r2
 800175c:	3304      	adds	r3, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 020f 	and.w	r2, r3, #15
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	331b      	adds	r3, #27
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4413      	add	r3, r2
 8001774:	3304      	adds	r3, #4
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	b2da      	uxtb	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	331b      	adds	r3, #27
 8001788:	011b      	lsls	r3, r3, #4
 800178a:	4413      	add	r3, r2
 800178c:	3304      	adds	r3, #4
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	b29a      	uxth	r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	011b      	lsls	r3, r3, #4
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	0a1a      	lsrs	r2, r3, #8
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2d2      	uxtb	r2, r2
 80017c6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	011b      	lsls	r3, r3, #4
 80017d0:	4413      	add	r3, r2
 80017d2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0c1a      	lsrs	r2, r3, #16
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	3302      	adds	r3, #2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	011b      	lsls	r3, r3, #4
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	0e1a      	lsrs	r2, r3, #24
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	3303      	adds	r3, #3
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	4413      	add	r3, r2
 8001806:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	3304      	adds	r3, #4
 8001810:	b2d2      	uxtb	r2, r2
 8001812:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	4413      	add	r3, r2
 800181e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0a1a      	lsrs	r2, r3, #8
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	3305      	adds	r3, #5
 800182a:	b2d2      	uxtb	r2, r2
 800182c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	4413      	add	r3, r2
 8001838:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	0c1a      	lsrs	r2, r3, #16
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	3306      	adds	r3, #6
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	4413      	add	r3, r2
 8001852:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	0e1a      	lsrs	r2, r3, #24
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	3307      	adds	r3, #7
 800185e:	b2d2      	uxtb	r2, r2
 8001860:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d108      	bne.n	800187a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f042 0220 	orr.w	r2, r2, #32
 8001876:	60da      	str	r2, [r3, #12]
 8001878:	e007      	b.n	800188a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0220 	orr.w	r2, r2, #32
 8001888:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e006      	b.n	800189c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
  }
}
 800189c:	4618      	mov	r0, r3
 800189e:	371c      	adds	r7, #28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d002      	beq.n	80018c6 <HAL_CAN_ActivateNotification+0x1e>
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d109      	bne.n	80018da <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6959      	ldr	r1, [r3, #20]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	430a      	orrs	r2, r1
 80018d4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e006      	b.n	80018e8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018de:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
  }
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	@ 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8083 	beq.w	8001a42 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d025      	beq.n	8001992 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	4798      	blx	r3
 8001960:	e017      	b.n	8001992 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d004      	beq.n	8001976 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800196c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001972:	627b      	str	r3, [r7, #36]	@ 0x24
 8001974:	e00d      	b.n	8001992 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f003 0308 	and.w	r3, r3, #8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d004      	beq.n	800198a <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001982:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
 8001988:	e003      	b.n	8001992 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001998:	2b00      	cmp	r3, #0
 800199a:	d026      	beq.n	80019ea <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	4798      	blx	r3
 80019b8:	e017      	b.n	80019ea <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d004      	beq.n	80019ce <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80019cc:	e00d      	b.n	80019ea <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d004      	beq.n	80019e2 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e0:	e003      	b.n	80019ea <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d026      	beq.n	8001a42 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4798      	blx	r3
 8001a10:	e017      	b.n	8001a42 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a24:	e00d      	b.n	8001a42 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a38:	e003      	b.n	8001a42 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d00c      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a58:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2210      	movs	r2, #16
 8001a64:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00c      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2208      	movs	r2, #8
 8001a80:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d00a      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00c      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	f003 0310 	and.w	r3, r3, #16
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d007      	beq.n	8001ace <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2210      	movs	r2, #16
 8001acc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00c      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2208      	movs	r2, #8
 8001ae8:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001af2:	6a3b      	ldr	r3, [r7, #32]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d00c      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d007      	beq.n	8001b36 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2210      	movs	r2, #16
 8001b2c:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b36:	6a3b      	ldr	r3, [r7, #32]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00c      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2208      	movs	r2, #8
 8001b50:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d07b      	beq.n	8001c5c <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d072      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bc2:	6a3b      	ldr	r3, [r7, #32]
 8001bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d043      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d03e      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bdc:	2b60      	cmp	r3, #96	@ 0x60
 8001bde:	d02b      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x344>
 8001be0:	2b60      	cmp	r3, #96	@ 0x60
 8001be2:	d82e      	bhi.n	8001c42 <HAL_CAN_IRQHandler+0x34e>
 8001be4:	2b50      	cmp	r3, #80	@ 0x50
 8001be6:	d022      	beq.n	8001c2e <HAL_CAN_IRQHandler+0x33a>
 8001be8:	2b50      	cmp	r3, #80	@ 0x50
 8001bea:	d82a      	bhi.n	8001c42 <HAL_CAN_IRQHandler+0x34e>
 8001bec:	2b40      	cmp	r3, #64	@ 0x40
 8001bee:	d019      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x330>
 8001bf0:	2b40      	cmp	r3, #64	@ 0x40
 8001bf2:	d826      	bhi.n	8001c42 <HAL_CAN_IRQHandler+0x34e>
 8001bf4:	2b30      	cmp	r3, #48	@ 0x30
 8001bf6:	d010      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x326>
 8001bf8:	2b30      	cmp	r3, #48	@ 0x30
 8001bfa:	d822      	bhi.n	8001c42 <HAL_CAN_IRQHandler+0x34e>
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	d002      	beq.n	8001c06 <HAL_CAN_IRQHandler+0x312>
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d005      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c04:	e01d      	b.n	8001c42 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c0e:	e019      	b.n	8001c44 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c18:	e014      	b.n	8001c44 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f043 0320 	orr.w	r3, r3, #32
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c22:	e00f      	b.n	8001c44 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c2c:	e00a      	b.n	8001c44 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c36:	e005      	b.n	8001c44 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c3e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c40:	e000      	b.n	8001c44 <HAL_CAN_IRQHandler+0x350>
            break;
 8001c42:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699a      	ldr	r2, [r3, #24]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c52:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2204      	movs	r2, #4
 8001c5a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d009      	beq.n	8001c76 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f003 0307 	and.w	r3, r3, #7
 8001d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x40>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d78:	4013      	ands	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d84:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d8a:	4a04      	ldr	r2, [pc, #16]	@ (8001d9c <__NVIC_SetPriorityGrouping+0x40>)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	60d3      	str	r3, [r2, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00
 8001da0:	05fa0000 	.word	0x05fa0000

08001da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001da8:	4b04      	ldr	r3, [pc, #16]	@ (8001dbc <__NVIC_GetPriorityGrouping+0x18>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	f003 0307 	and.w	r3, r3, #7
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	db0b      	blt.n	8001dea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	f003 021f 	and.w	r2, r3, #31
 8001dd8:	4907      	ldr	r1, [pc, #28]	@ (8001df8 <__NVIC_EnableIRQ+0x38>)
 8001dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	2001      	movs	r0, #1
 8001de2:	fa00 f202 	lsl.w	r2, r0, r2
 8001de6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	e000e100 	.word	0xe000e100

08001dfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	6039      	str	r1, [r7, #0]
 8001e06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	db0a      	blt.n	8001e26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	490c      	ldr	r1, [pc, #48]	@ (8001e48 <__NVIC_SetPriority+0x4c>)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	0112      	lsls	r2, r2, #4
 8001e1c:	b2d2      	uxtb	r2, r2
 8001e1e:	440b      	add	r3, r1
 8001e20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e24:	e00a      	b.n	8001e3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4908      	ldr	r1, [pc, #32]	@ (8001e4c <__NVIC_SetPriority+0x50>)
 8001e2c:	79fb      	ldrb	r3, [r7, #7]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	3b04      	subs	r3, #4
 8001e34:	0112      	lsls	r2, r2, #4
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	440b      	add	r3, r1
 8001e3a:	761a      	strb	r2, [r3, #24]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b089      	sub	sp, #36	@ 0x24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f1c3 0307 	rsb	r3, r3, #7
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	bf28      	it	cs
 8001e6e:	2304      	movcs	r3, #4
 8001e70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	3304      	adds	r3, #4
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d902      	bls.n	8001e80 <NVIC_EncodePriority+0x30>
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3b03      	subs	r3, #3
 8001e7e:	e000      	b.n	8001e82 <NVIC_EncodePriority+0x32>
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	f04f 32ff 	mov.w	r2, #4294967295
 8001e88:	69bb      	ldr	r3, [r7, #24]
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43da      	mvns	r2, r3
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e98:	f04f 31ff 	mov.w	r1, #4294967295
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43d9      	mvns	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	4313      	orrs	r3, r2
         );
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ec8:	d301      	bcc.n	8001ece <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00f      	b.n	8001eee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ece:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ed6:	210f      	movs	r1, #15
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f7ff ff8e 	bl	8001dfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ee6:	4b04      	ldr	r3, [pc, #16]	@ (8001ef8 <SysTick_Config+0x40>)
 8001ee8:	2207      	movs	r2, #7
 8001eea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	e000e010 	.word	0xe000e010

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff29 	bl	8001d5c <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff3e 	bl	8001da4 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ff8e 	bl	8001e50 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff5d 	bl	8001dfc <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff31 	bl	8001dc0 <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff ffa2 	bl	8001eb8 <SysTick_Config>
 8001f74:	4603      	mov	r3, r0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e175      	b.n	800228c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8164 	bne.w	8002286 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x56>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80be 	beq.w	8002286 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	4b66      	ldr	r3, [pc, #408]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a65      	ldr	r2, [pc, #404]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b63      	ldr	r3, [pc, #396]	@ (80022a4 <HAL_GPIO_Init+0x324>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002122:	4a61      	ldr	r2, [pc, #388]	@ (80022a8 <HAL_GPIO_Init+0x328>)
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	089b      	lsrs	r3, r3, #2
 8002128:	3302      	adds	r3, #2
 800212a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	220f      	movs	r2, #15
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <HAL_GPIO_Init+0x32c>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d037      	beq.n	80021be <HAL_GPIO_Init+0x23e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a57      	ldr	r2, [pc, #348]	@ (80022b0 <HAL_GPIO_Init+0x330>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d031      	beq.n	80021ba <HAL_GPIO_Init+0x23a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a56      	ldr	r2, [pc, #344]	@ (80022b4 <HAL_GPIO_Init+0x334>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d02b      	beq.n	80021b6 <HAL_GPIO_Init+0x236>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a55      	ldr	r2, [pc, #340]	@ (80022b8 <HAL_GPIO_Init+0x338>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x232>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a54      	ldr	r2, [pc, #336]	@ (80022bc <HAL_GPIO_Init+0x33c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x22e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a53      	ldr	r2, [pc, #332]	@ (80022c0 <HAL_GPIO_Init+0x340>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x22a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a52      	ldr	r2, [pc, #328]	@ (80022c4 <HAL_GPIO_Init+0x344>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x226>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a51      	ldr	r2, [pc, #324]	@ (80022c8 <HAL_GPIO_Init+0x348>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x222>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a50      	ldr	r2, [pc, #320]	@ (80022cc <HAL_GPIO_Init+0x34c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x21e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4f      	ldr	r2, [pc, #316]	@ (80022d0 <HAL_GPIO_Init+0x350>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x21a>
 8002196:	2309      	movs	r3, #9
 8002198:	e012      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 800219a:	230a      	movs	r3, #10
 800219c:	e010      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 800219e:	2308      	movs	r3, #8
 80021a0:	e00e      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00c      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021a6:	2306      	movs	r3, #6
 80021a8:	e00a      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_Init+0x240>
 80021be:	2300      	movs	r3, #0
 80021c0:	69fa      	ldr	r2, [r7, #28]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021d0:	4935      	ldr	r1, [pc, #212]	@ (80022a8 <HAL_GPIO_Init+0x328>)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	089b      	lsrs	r3, r3, #2
 80021d6:	3302      	adds	r3, #2
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021de:	4b3d      	ldr	r3, [pc, #244]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002202:	4a34      	ldr	r2, [pc, #208]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002208:	4b32      	ldr	r3, [pc, #200]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800222c:	4a29      	ldr	r2, [pc, #164]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002232:	4b28      	ldr	r3, [pc, #160]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002256:	4a1f      	ldr	r2, [pc, #124]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800225c:	4b1d      	ldr	r3, [pc, #116]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002280:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <HAL_GPIO_Init+0x354>)
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3301      	adds	r3, #1
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	2b0f      	cmp	r3, #15
 8002290:	f67f ae86 	bls.w	8001fa0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002294:	bf00      	nop
 8002296:	bf00      	nop
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40013800 	.word	0x40013800
 80022ac:	40020000 	.word	0x40020000
 80022b0:	40020400 	.word	0x40020400
 80022b4:	40020800 	.word	0x40020800
 80022b8:	40020c00 	.word	0x40020c00
 80022bc:	40021000 	.word	0x40021000
 80022c0:	40021400 	.word	0x40021400
 80022c4:	40021800 	.word	0x40021800
 80022c8:	40021c00 	.word	0x40021c00
 80022cc:	40022000 	.word	0x40022000
 80022d0:	40022400 	.word	0x40022400
 80022d4:	40013c00 	.word	0x40013c00

080022d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	807b      	strh	r3, [r7, #2]
 80022e4:	4613      	mov	r3, r2
 80022e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022e8:	787b      	ldrb	r3, [r7, #1]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d003      	beq.n	80022f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ee:	887a      	ldrh	r2, [r7, #2]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80022f4:	e003      	b.n	80022fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80022f6:	887b      	ldrh	r3, [r7, #2]
 80022f8:	041a      	lsls	r2, r3, #16
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	619a      	str	r2, [r3, #24]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800231c:	887a      	ldrh	r2, [r7, #2]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4013      	ands	r3, r2
 8002322:	041a      	lsls	r2, r3, #16
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43d9      	mvns	r1, r3
 8002328:	887b      	ldrh	r3, [r7, #2]
 800232a:	400b      	ands	r3, r1
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	619a      	str	r2, [r3, #24]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	@ 0x40
 8002356:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002362:	4b1e      	ldr	r3, [pc, #120]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a1d      	ldr	r2, [pc, #116]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800236e:	f7fe fd77 	bl	8000e60 <HAL_GetTick>
 8002372:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002374:	e009      	b.n	800238a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002376:	f7fe fd73 	bl	8000e60 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002384:	d901      	bls.n	800238a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e022      	b.n	80023d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800238a:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002396:	d1ee      	bne.n	8002376 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002398:	4b10      	ldr	r3, [pc, #64]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a0f      	ldr	r2, [pc, #60]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800239e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a4:	f7fe fd5c 	bl	8000e60 <HAL_GetTick>
 80023a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023aa:	e009      	b.n	80023c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023ac:	f7fe fd58 	bl	8000e60 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ba:	d901      	bls.n	80023c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e007      	b.n	80023d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c0:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023cc:	d1ee      	bne.n	80023ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40007000 	.word	0x40007000

080023e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e29b      	b.n	800292e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002404:	4b96      	ldr	r3, [pc, #600]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b04      	cmp	r3, #4
 800240e:	d00c      	beq.n	800242a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002410:	4b93      	ldr	r3, [pc, #588]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f003 030c 	and.w	r3, r3, #12
 8002418:	2b08      	cmp	r3, #8
 800241a:	d112      	bne.n	8002442 <HAL_RCC_OscConfig+0x62>
 800241c:	4b90      	ldr	r3, [pc, #576]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002428:	d10b      	bne.n	8002442 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242a:	4b8d      	ldr	r3, [pc, #564]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d06c      	beq.n	8002510 <HAL_RCC_OscConfig+0x130>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d168      	bne.n	8002510 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e275      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x7a>
 800244c:	4b84      	ldr	r3, [pc, #528]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a83      	ldr	r2, [pc, #524]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002452:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002456:	6013      	str	r3, [r2, #0]
 8002458:	e02e      	b.n	80024b8 <HAL_RCC_OscConfig+0xd8>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0x9c>
 8002462:	4b7f      	ldr	r3, [pc, #508]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7e      	ldr	r2, [pc, #504]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002468:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b7c      	ldr	r3, [pc, #496]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7b      	ldr	r2, [pc, #492]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002474:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xd8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xc0>
 8002486:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b73      	ldr	r3, [pc, #460]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a72      	ldr	r2, [pc, #456]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xd8>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fcce 	bl	8000e60 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fcca 	bl	8000e60 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	@ 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e229      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xe8>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fcba 	bl	8000e60 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fcb6 	bl	8000e60 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e215      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b57      	ldr	r3, [pc, #348]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x110>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d069      	beq.n	80025f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800251e:	4b50      	ldr	r3, [pc, #320]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00b      	beq.n	8002542 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b4d      	ldr	r3, [pc, #308]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
 8002532:	2b08      	cmp	r3, #8
 8002534:	d11c      	bne.n	8002570 <HAL_RCC_OscConfig+0x190>
 8002536:	4b4a      	ldr	r3, [pc, #296]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d116      	bne.n	8002570 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_RCC_OscConfig+0x17a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d001      	beq.n	800255a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e1e9      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255a:	4b41      	ldr	r3, [pc, #260]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	493d      	ldr	r1, [pc, #244]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800256a:	4313      	orrs	r3, r2
 800256c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800256e:	e040      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d023      	beq.n	80025c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002578:	4b39      	ldr	r3, [pc, #228]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a38      	ldr	r2, [pc, #224]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002584:	f7fe fc6c 	bl	8000e60 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800258c:	f7fe fc68 	bl	8000e60 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1c7      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b30      	ldr	r3, [pc, #192]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4929      	ldr	r1, [pc, #164]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
 80025be:	e018      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025c0:	4b27      	ldr	r3, [pc, #156]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a26      	ldr	r2, [pc, #152]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fc48 	bl	8000e60 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025d4:	f7fe fc44 	bl	8000e60 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1a3      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d038      	beq.n	8002670 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d019      	beq.n	800263a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002606:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260a:	4a15      	ldr	r2, [pc, #84]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002612:	f7fe fc25 	bl	8000e60 <HAL_GetTick>
 8002616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800261a:	f7fe fc21 	bl	8000e60 <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e180      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262c:	4b0c      	ldr	r3, [pc, #48]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800262e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0f0      	beq.n	800261a <HAL_RCC_OscConfig+0x23a>
 8002638:	e01a      	b.n	8002670 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800263a:	4b09      	ldr	r3, [pc, #36]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 800263c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800263e:	4a08      	ldr	r2, [pc, #32]	@ (8002660 <HAL_RCC_OscConfig+0x280>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fc0b 	bl	8000e60 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e00a      	b.n	8002664 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fc07 	bl	8000e60 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d903      	bls.n	8002664 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e166      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
 8002660:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b92      	ldr	r3, [pc, #584]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ee      	bne.n	800264e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80a4 	beq.w	80027c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267e:	4b8c      	ldr	r3, [pc, #560]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d10d      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b89      	ldr	r3, [pc, #548]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	4a88      	ldr	r2, [pc, #544]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002694:	6413      	str	r3, [r2, #64]	@ 0x40
 8002696:	4b86      	ldr	r3, [pc, #536]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269e:	60bb      	str	r3, [r7, #8]
 80026a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a6:	4b83      	ldr	r3, [pc, #524]	@ (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80026b2:	4b80      	ldr	r3, [pc, #512]	@ (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a7f      	ldr	r2, [pc, #508]	@ (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7fe fbcf 	bl	8000e60 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7fe fbcb 	bl	8000e60 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b64      	cmp	r3, #100	@ 0x64
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e12a      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	4b76      	ldr	r3, [pc, #472]	@ (80028b4 <HAL_RCC_OscConfig+0x4d4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d106      	bne.n	80026fa <HAL_RCC_OscConfig+0x31a>
 80026ec:	4b70      	ldr	r3, [pc, #448]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80026ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f0:	4a6f      	ldr	r2, [pc, #444]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f8:	e02d      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x33c>
 8002702:	4b6b      	ldr	r3, [pc, #428]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002706:	4a6a      	ldr	r2, [pc, #424]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6713      	str	r3, [r2, #112]	@ 0x70
 800270e:	4b68      	ldr	r3, [pc, #416]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002712:	4a67      	ldr	r2, [pc, #412]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002714:	f023 0304 	bic.w	r3, r3, #4
 8002718:	6713      	str	r3, [r2, #112]	@ 0x70
 800271a:	e01c      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b05      	cmp	r3, #5
 8002722:	d10c      	bne.n	800273e <HAL_RCC_OscConfig+0x35e>
 8002724:	4b62      	ldr	r3, [pc, #392]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002728:	4a61      	ldr	r2, [pc, #388]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800272a:	f043 0304 	orr.w	r3, r3, #4
 800272e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002730:	4b5f      	ldr	r3, [pc, #380]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002734:	4a5e      	ldr	r2, [pc, #376]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	f043 0301 	orr.w	r3, r3, #1
 800273a:	6713      	str	r3, [r2, #112]	@ 0x70
 800273c:	e00b      	b.n	8002756 <HAL_RCC_OscConfig+0x376>
 800273e:	4b5c      	ldr	r3, [pc, #368]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002742:	4a5b      	ldr	r2, [pc, #364]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6713      	str	r3, [r2, #112]	@ 0x70
 800274a:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800274c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800274e:	4a58      	ldr	r2, [pc, #352]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002750:	f023 0304 	bic.w	r3, r3, #4
 8002754:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d015      	beq.n	800278a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800275e:	f7fe fb7f 	bl	8000e60 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	e00a      	b.n	800277c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002766:	f7fe fb7b 	bl	8000e60 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002774:	4293      	cmp	r3, r2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0d8      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	4b4c      	ldr	r3, [pc, #304]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ee      	beq.n	8002766 <HAL_RCC_OscConfig+0x386>
 8002788:	e014      	b.n	80027b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800278a:	f7fe fb69 	bl	8000e60 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002792:	f7fe fb65 	bl	8000e60 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0c2      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a8:	4b41      	ldr	r3, [pc, #260]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1ee      	bne.n	8002792 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027b4:	7dfb      	ldrb	r3, [r7, #23]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d105      	bne.n	80027c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ba:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027be:	4a3c      	ldr	r2, [pc, #240]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80027c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027c4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80ae 	beq.w	800292c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027d0:	4b37      	ldr	r3, [pc, #220]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 030c 	and.w	r3, r3, #12
 80027d8:	2b08      	cmp	r3, #8
 80027da:	d06d      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d14b      	bne.n	800287c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e4:	4b32      	ldr	r3, [pc, #200]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a31      	ldr	r2, [pc, #196]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80027ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f0:	f7fe fb36 	bl	8000e60 <HAL_GetTick>
 80027f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f8:	f7fe fb32 	bl	8000e60 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e091      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800280a:	4b29      	ldr	r3, [pc, #164]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69da      	ldr	r2, [r3, #28]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002824:	019b      	lsls	r3, r3, #6
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800282c:	085b      	lsrs	r3, r3, #1
 800282e:	3b01      	subs	r3, #1
 8002830:	041b      	lsls	r3, r3, #16
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	061b      	lsls	r3, r3, #24
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002840:	071b      	lsls	r3, r3, #28
 8002842:	491b      	ldr	r1, [pc, #108]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002848:	4b19      	ldr	r3, [pc, #100]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a18      	ldr	r2, [pc, #96]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800284e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002854:	f7fe fb04 	bl	8000e60 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe fb00 	bl	8000e60 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e05f      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286e:	4b10      	ldr	r3, [pc, #64]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d0f0      	beq.n	800285c <HAL_RCC_OscConfig+0x47c>
 800287a:	e057      	b.n	800292c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b0c      	ldr	r3, [pc, #48]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0b      	ldr	r2, [pc, #44]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 8002882:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe faea 	bl	8000e60 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe fae6 	bl	8000e60 <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e045      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a2:	4b03      	ldr	r3, [pc, #12]	@ (80028b0 <HAL_RCC_OscConfig+0x4d0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x4b0>
 80028ae:	e03d      	b.n	800292c <HAL_RCC_OscConfig+0x54c>
 80028b0:	40023800 	.word	0x40023800
 80028b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80028b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002938 <HAL_RCC_OscConfig+0x558>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d030      	beq.n	8002928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d129      	bne.n	8002928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028de:	429a      	cmp	r2, r3
 80028e0:	d122      	bne.n	8002928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028e8:	4013      	ands	r3, r2
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d119      	bne.n	8002928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fe:	085b      	lsrs	r3, r3, #1
 8002900:	3b01      	subs	r3, #1
 8002902:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002904:	429a      	cmp	r2, r3
 8002906:	d10f      	bne.n	8002928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002912:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002914:	429a      	cmp	r2, r3
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e000      	b.n	800292e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0d0      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d910      	bls.n	8002984 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b67      	ldr	r3, [pc, #412]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 020f 	bic.w	r2, r3, #15
 800296a:	4965      	ldr	r1, [pc, #404]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b63      	ldr	r3, [pc, #396]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e0b8      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800299c:	4b59      	ldr	r3, [pc, #356]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a58      	ldr	r2, [pc, #352]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 80029a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b4:	4b53      	ldr	r3, [pc, #332]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 80029ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b50      	ldr	r3, [pc, #320]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	494d      	ldr	r1, [pc, #308]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d040      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b47      	ldr	r3, [pc, #284]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d115      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e07f      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029fe:	4b41      	ldr	r3, [pc, #260]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d109      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e073      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e06b      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a1e:	4b39      	ldr	r3, [pc, #228]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f023 0203 	bic.w	r2, r3, #3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4936      	ldr	r1, [pc, #216]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe fa16 	bl	8000e60 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a36:	e00a      	b.n	8002a4e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a38:	f7fe fa12 	bl	8000e60 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e053      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 020c 	and.w	r2, r3, #12
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d1eb      	bne.n	8002a38 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a60:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d210      	bcs.n	8002a90 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b24      	ldr	r3, [pc, #144]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 020f 	bic.w	r2, r3, #15
 8002a76:	4922      	ldr	r1, [pc, #136]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCC_ClockConfig+0x1c4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e032      	b.n	8002af6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	4916      	ldr	r1, [pc, #88]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d009      	beq.n	8002ace <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002aba:	4b12      	ldr	r3, [pc, #72]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	490e      	ldr	r1, [pc, #56]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ace:	f000 f821 	bl	8002b14 <HAL_RCC_GetSysClockFreq>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	091b      	lsrs	r3, r3, #4
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	490a      	ldr	r1, [pc, #40]	@ (8002b08 <HAL_RCC_ClockConfig+0x1cc>)
 8002ae0:	5ccb      	ldrb	r3, [r1, r3]
 8002ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae6:	4a09      	ldr	r2, [pc, #36]	@ (8002b0c <HAL_RCC_ClockConfig+0x1d0>)
 8002ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aea:	4b09      	ldr	r3, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1d4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe f972 	bl	8000dd8 <HAL_InitTick>

  return HAL_OK;
 8002af4:	2300      	movs	r3, #0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00
 8002b04:	40023800 	.word	0x40023800
 8002b08:	0800692c 	.word	0x0800692c
 8002b0c:	20000000 	.word	0x20000000
 8002b10:	20000004 	.word	0x20000004

08002b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b18:	b094      	sub	sp, #80	@ 0x50
 8002b1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b20:	2300      	movs	r3, #0
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b24:	2300      	movs	r3, #0
 8002b26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b2c:	4b79      	ldr	r3, [pc, #484]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030c 	and.w	r3, r3, #12
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d00d      	beq.n	8002b54 <HAL_RCC_GetSysClockFreq+0x40>
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	f200 80e1 	bhi.w	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x34>
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b46:	e0db      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b48:	4b73      	ldr	r3, [pc, #460]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b4c:	e0db      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b4e:	4b72      	ldr	r3, [pc, #456]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b52:	e0d8      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b54:	4b6f      	ldr	r3, [pc, #444]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d063      	beq.n	8002c32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	2200      	movs	r2, #0
 8002b72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b7e:	2300      	movs	r3, #0
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b86:	4622      	mov	r2, r4
 8002b88:	462b      	mov	r3, r5
 8002b8a:	f04f 0000 	mov.w	r0, #0
 8002b8e:	f04f 0100 	mov.w	r1, #0
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b98:	0150      	lsls	r0, r2, #5
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	1a51      	subs	r1, r2, r1
 8002ba2:	6139      	str	r1, [r7, #16]
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	eb63 0301 	sbc.w	r3, r3, r1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	f04f 0200 	mov.w	r2, #0
 8002bb0:	f04f 0300 	mov.w	r3, #0
 8002bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bb8:	4659      	mov	r1, fp
 8002bba:	018b      	lsls	r3, r1, #6
 8002bbc:	4651      	mov	r1, sl
 8002bbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bc2:	4651      	mov	r1, sl
 8002bc4:	018a      	lsls	r2, r1, #6
 8002bc6:	4651      	mov	r1, sl
 8002bc8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bcc:	4659      	mov	r1, fp
 8002bce:	eb63 0901 	sbc.w	r9, r3, r1
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002be2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002be6:	4690      	mov	r8, r2
 8002be8:	4699      	mov	r9, r3
 8002bea:	4623      	mov	r3, r4
 8002bec:	eb18 0303 	adds.w	r3, r8, r3
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	eb49 0303 	adc.w	r3, r9, r3
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c24:	f7fd fb0c 	bl	8000240 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c30:	e058      	b.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c32:	4b38      	ldr	r3, [pc, #224]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	099b      	lsrs	r3, r3, #6
 8002c38:	2200      	movs	r2, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	2300      	movs	r3, #0
 8002c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	464b      	mov	r3, r9
 8002c50:	f04f 0000 	mov.w	r0, #0
 8002c54:	f04f 0100 	mov.w	r1, #0
 8002c58:	0159      	lsls	r1, r3, #5
 8002c5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c5e:	0150      	lsls	r0, r2, #5
 8002c60:	4602      	mov	r2, r0
 8002c62:	460b      	mov	r3, r1
 8002c64:	4641      	mov	r1, r8
 8002c66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c6a:	4649      	mov	r1, r9
 8002c6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c84:	ebb2 040a 	subs.w	r4, r2, sl
 8002c88:	eb63 050b 	sbc.w	r5, r3, fp
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	00eb      	lsls	r3, r5, #3
 8002c96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c9a:	00e2      	lsls	r2, r4, #3
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	4643      	mov	r3, r8
 8002ca2:	18e3      	adds	r3, r4, r3
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	464b      	mov	r3, r9
 8002ca8:	eb45 0303 	adc.w	r3, r5, r3
 8002cac:	607b      	str	r3, [r7, #4]
 8002cae:	f04f 0200 	mov.w	r2, #0
 8002cb2:	f04f 0300 	mov.w	r3, #0
 8002cb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cba:	4629      	mov	r1, r5
 8002cbc:	028b      	lsls	r3, r1, #10
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc4:	4621      	mov	r1, r4
 8002cc6:	028a      	lsls	r2, r1, #10
 8002cc8:	4610      	mov	r0, r2
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cce:	2200      	movs	r2, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
 8002cd2:	61fa      	str	r2, [r7, #28]
 8002cd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cd8:	f7fd fab2 	bl	8000240 <__aeabi_uldivmod>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002cfe:	e002      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d00:	4b05      	ldr	r3, [pc, #20]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3750      	adds	r7, #80	@ 0x50
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d12:	bf00      	nop
 8002d14:	40023800 	.word	0x40023800
 8002d18:	00f42400 	.word	0x00f42400

08002d1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002d20:	bf00      	nop
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d32:	f3ef 8305 	mrs	r3, IPSR
 8002d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d42:	607b      	str	r3, [r7, #4]
  return(result);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d105      	bne.n	8002d56 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d4a:	f3ef 8311 	mrs	r3, BASEPRI
 8002d4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d007      	beq.n	8002d66 <osKernelInitialize+0x3a>
 8002d56:	4b0e      	ldr	r3, [pc, #56]	@ (8002d90 <osKernelInitialize+0x64>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d103      	bne.n	8002d66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002d5e:	f06f 0305 	mvn.w	r3, #5
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	e00c      	b.n	8002d80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <osKernelInitialize+0x64>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d105      	bne.n	8002d7a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <osKernelInitialize+0x64>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e002      	b.n	8002d80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	200000f4 	.word	0x200000f4

08002d94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d9a:	f3ef 8305 	mrs	r3, IPSR
 8002d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8002da0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da6:	f3ef 8310 	mrs	r3, PRIMASK
 8002daa:	607b      	str	r3, [r7, #4]
  return(result);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d105      	bne.n	8002dbe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002db2:	f3ef 8311 	mrs	r3, BASEPRI
 8002db6:	603b      	str	r3, [r7, #0]
  return(result);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d007      	beq.n	8002dce <osKernelStart+0x3a>
 8002dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8002dfc <osKernelStart+0x68>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d103      	bne.n	8002dce <osKernelStart+0x3a>
    stat = osErrorISR;
 8002dc6:	f06f 0305 	mvn.w	r3, #5
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e010      	b.n	8002df0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002dce:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <osKernelStart+0x68>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d109      	bne.n	8002dea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002dd6:	f7ff ffa1 	bl	8002d1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002dda:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <osKernelStart+0x68>)
 8002ddc:	2202      	movs	r2, #2
 8002dde:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002de0:	f001 fd16 	bl	8004810 <vTaskStartScheduler>
      stat = osOK;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e002      	b.n	8002df0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002dea:	f04f 33ff 	mov.w	r3, #4294967295
 8002dee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002df0:	68fb      	ldr	r3, [r7, #12]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200000f4 	.word	0x200000f4

08002e00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b090      	sub	sp, #64	@ 0x40
 8002e04:	af04      	add	r7, sp, #16
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e10:	f3ef 8305 	mrs	r3, IPSR
 8002e14:	61fb      	str	r3, [r7, #28]
  return(result);
 8002e16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f040 808f 	bne.w	8002f3c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e22:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d105      	bne.n	8002e36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002e2e:	617b      	str	r3, [r7, #20]
  return(result);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <osThreadNew+0x3e>
 8002e36:	4b44      	ldr	r3, [pc, #272]	@ (8002f48 <osThreadNew+0x148>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d07e      	beq.n	8002f3c <osThreadNew+0x13c>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d07b      	beq.n	8002f3c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002e44:	2380      	movs	r3, #128	@ 0x80
 8002e46:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002e48:	2318      	movs	r3, #24
 8002e4a:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
 8002e54:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d045      	beq.n	8002ee8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <osThreadNew+0x6a>
        name = attr->name;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <osThreadNew+0x90>
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	2b38      	cmp	r3, #56	@ 0x38
 8002e82:	d805      	bhi.n	8002e90 <osThreadNew+0x90>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <osThreadNew+0x94>
        return (NULL);
 8002e90:	2300      	movs	r3, #0
 8002e92:	e054      	b.n	8002f3e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	089b      	lsrs	r3, r3, #2
 8002ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00e      	beq.n	8002eca <osThreadNew+0xca>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	2ba7      	cmp	r3, #167	@ 0xa7
 8002eb2:	d90a      	bls.n	8002eca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <osThreadNew+0xca>
        mem = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	e010      	b.n	8002eec <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10c      	bne.n	8002eec <osThreadNew+0xec>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <osThreadNew+0xec>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <osThreadNew+0xec>
          mem = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	623b      	str	r3, [r7, #32]
 8002ee6:	e001      	b.n	8002eec <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d110      	bne.n	8002f14 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002efa:	9202      	str	r2, [sp, #8]
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f001 fa84 	bl	8004416 <xTaskCreateStatic>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	e013      	b.n	8002f3c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d110      	bne.n	8002f3c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f001 fad8 	bl	80044e2 <xTaskCreate>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d001      	beq.n	8002f3c <osThreadNew+0x13c>
          hTask = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002f3c:	693b      	ldr	r3, [r7, #16]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3730      	adds	r7, #48	@ 0x30
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200000f4 	.word	0x200000f4

08002f4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f54:	f3ef 8305 	mrs	r3, IPSR
 8002f58:	613b      	str	r3, [r7, #16]
  return(result);
 8002f5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f60:	f3ef 8310 	mrs	r3, PRIMASK
 8002f64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d105      	bne.n	8002f78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002f6c:	f3ef 8311 	mrs	r3, BASEPRI
 8002f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <osDelay+0x3c>
 8002f78:	4b0a      	ldr	r3, [pc, #40]	@ (8002fa4 <osDelay+0x58>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d103      	bne.n	8002f88 <osDelay+0x3c>
    stat = osErrorISR;
 8002f80:	f06f 0305 	mvn.w	r3, #5
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e007      	b.n	8002f98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d002      	beq.n	8002f98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f001 fc04 	bl	80047a0 <vTaskDelay>
    }
  }

  return (stat);
 8002f98:	697b      	ldr	r3, [r7, #20]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	200000f4 	.word	0x200000f4

08002fa8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4a07      	ldr	r2, [pc, #28]	@ (8002fd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002fb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a06      	ldr	r2, [pc, #24]	@ (8002fd8 <vApplicationGetIdleTaskMemory+0x30>)
 8002fbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2280      	movs	r2, #128	@ 0x80
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	200000f8 	.word	0x200000f8
 8002fd8:	200001a0 	.word	0x200001a0

08002fdc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	4a07      	ldr	r2, [pc, #28]	@ (8003008 <vApplicationGetTimerTaskMemory+0x2c>)
 8002fec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4a06      	ldr	r2, [pc, #24]	@ (800300c <vApplicationGetTimerTaskMemory+0x30>)
 8002ff2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ffa:	601a      	str	r2, [r3, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	200003a0 	.word	0x200003a0
 800300c:	20000448 	.word	0x20000448

08003010 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f103 0208 	add.w	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f103 0208 	add.w	r2, r3, #8
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 0208 	add.w	r2, r3, #8
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800306a:	b480      	push	{r7}
 800306c:	b085      	sub	sp, #20
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
 80030ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c8:	d103      	bne.n	80030d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e00c      	b.n	80030ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3308      	adds	r3, #8
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e002      	b.n	80030e0 <vListInsert+0x2e>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d2f6      	bcs.n	80030da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	601a      	str	r2, [r3, #0]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6852      	ldr	r2, [r2, #4]
 8003144:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	d103      	bne.n	8003158 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1e5a      	subs	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d10d      	bne.n	80031a8 <xQueueGenericReset+0x30>
	__asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003190:	b672      	cpsid	i
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	b662      	cpsie	i
 80031a0:	60bb      	str	r3, [r7, #8]
}
 80031a2:	bf00      	nop
 80031a4:	bf00      	nop
 80031a6:	e7fd      	b.n	80031a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80031a8:	f002 ff80 	bl	80060ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031b4:	68f9      	ldr	r1, [r7, #12]
 80031b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031b8:	fb01 f303 	mul.w	r3, r1, r3
 80031bc:	441a      	add	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d8:	3b01      	subs	r3, #1
 80031da:	68f9      	ldr	r1, [r7, #12]
 80031dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80031de:	fb01 f303 	mul.w	r3, r1, r3
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	22ff      	movs	r2, #255	@ 0xff
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	22ff      	movs	r2, #255	@ 0xff
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01a      	beq.n	800323c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	3310      	adds	r3, #16
 800320a:	4618      	mov	r0, r3
 800320c:	f001 fdac 	bl	8004d68 <xTaskRemoveFromEventList>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d012      	beq.n	800323c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <xQueueGenericReset+0xd4>)
 8003218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800321c:	601a      	str	r2, [r3, #0]
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	e009      	b.n	800323c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	3310      	adds	r3, #16
 800322c:	4618      	mov	r0, r3
 800322e:	f7ff feef 	bl	8003010 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	3324      	adds	r3, #36	@ 0x24
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff feea 	bl	8003010 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800323c:	f002 ff6c 	bl	8006118 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003240:	2301      	movs	r3, #1
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	e000ed04 	.word	0xe000ed04

08003250 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08e      	sub	sp, #56	@ 0x38
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10d      	bne.n	8003280 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003268:	b672      	cpsid	i
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	b662      	cpsie	i
 8003278:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800327a:	bf00      	nop
 800327c:	bf00      	nop
 800327e:	e7fd      	b.n	800327c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10d      	bne.n	80032a2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328a:	b672      	cpsid	i
 800328c:	f383 8811 	msr	BASEPRI, r3
 8003290:	f3bf 8f6f 	isb	sy
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	b662      	cpsie	i
 800329a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	e7fd      	b.n	800329e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <xQueueGenericCreateStatic+0x5e>
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <xQueueGenericCreateStatic+0x62>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <xQueueGenericCreateStatic+0x64>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032bc:	b672      	cpsid	i
 80032be:	f383 8811 	msr	BASEPRI, r3
 80032c2:	f3bf 8f6f 	isb	sy
 80032c6:	f3bf 8f4f 	dsb	sy
 80032ca:	b662      	cpsie	i
 80032cc:	623b      	str	r3, [r7, #32]
}
 80032ce:	bf00      	nop
 80032d0:	bf00      	nop
 80032d2:	e7fd      	b.n	80032d0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d102      	bne.n	80032e0 <xQueueGenericCreateStatic+0x90>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <xQueueGenericCreateStatic+0x94>
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <xQueueGenericCreateStatic+0x96>
 80032e4:	2300      	movs	r3, #0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10d      	bne.n	8003306 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80032ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ee:	b672      	cpsid	i
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	b662      	cpsie	i
 80032fe:	61fb      	str	r3, [r7, #28]
}
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003306:	2350      	movs	r3, #80	@ 0x50
 8003308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b50      	cmp	r3, #80	@ 0x50
 800330e:	d00d      	beq.n	800332c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8003310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003314:	b672      	cpsid	i
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	b662      	cpsie	i
 8003324:	61bb      	str	r3, [r7, #24]
}
 8003326:	bf00      	nop
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800332c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003340:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f805 	bl	800335e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003356:	4618      	mov	r0, r3
 8003358:	3730      	adds	r7, #48	@ 0x30
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b084      	sub	sp, #16
 8003362:	af00      	add	r7, sp, #0
 8003364:	60f8      	str	r0, [r7, #12]
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d103      	bne.n	800337a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e002      	b.n	8003380 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800338c:	2101      	movs	r1, #1
 800338e:	69b8      	ldr	r0, [r7, #24]
 8003390:	f7ff fef2 	bl	8003178 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08e      	sub	sp, #56	@ 0x38
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10d      	bne.n	80033dc <xQueueGenericSend+0x38>
	__asm volatile
 80033c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c4:	b672      	cpsid	i
 80033c6:	f383 8811 	msr	BASEPRI, r3
 80033ca:	f3bf 8f6f 	isb	sy
 80033ce:	f3bf 8f4f 	dsb	sy
 80033d2:	b662      	cpsie	i
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d103      	bne.n	80033ea <xQueueGenericSend+0x46>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <xQueueGenericSend+0x4a>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <xQueueGenericSend+0x4c>
 80033ee:	2300      	movs	r3, #0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10d      	bne.n	8003410 <xQueueGenericSend+0x6c>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f8:	b672      	cpsid	i
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
 8003406:	b662      	cpsie	i
 8003408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800340a:	bf00      	nop
 800340c:	bf00      	nop
 800340e:	e7fd      	b.n	800340c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d103      	bne.n	800341e <xQueueGenericSend+0x7a>
 8003416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <xQueueGenericSend+0x7e>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <xQueueGenericSend+0x80>
 8003422:	2300      	movs	r3, #0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10d      	bne.n	8003444 <xQueueGenericSend+0xa0>
	__asm volatile
 8003428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800342c:	b672      	cpsid	i
 800342e:	f383 8811 	msr	BASEPRI, r3
 8003432:	f3bf 8f6f 	isb	sy
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	b662      	cpsie	i
 800343c:	623b      	str	r3, [r7, #32]
}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003444:	f001 fe98 	bl	8005178 <xTaskGetSchedulerState>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d102      	bne.n	8003454 <xQueueGenericSend+0xb0>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d101      	bne.n	8003458 <xQueueGenericSend+0xb4>
 8003454:	2301      	movs	r3, #1
 8003456:	e000      	b.n	800345a <xQueueGenericSend+0xb6>
 8003458:	2300      	movs	r3, #0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <xQueueGenericSend+0xd6>
	__asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	b672      	cpsid	i
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	b662      	cpsie	i
 8003472:	61fb      	str	r3, [r7, #28]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800347a:	f002 fe17 	bl	80060ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800347e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003480:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <xQueueGenericSend+0xec>
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d129      	bne.n	80034e4 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003496:	f000 fa1b 	bl	80038d0 <prvCopyDataToQueue>
 800349a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800349c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d010      	beq.n	80034c6 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a6:	3324      	adds	r3, #36	@ 0x24
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fc5d 	bl	8004d68 <xTaskRemoveFromEventList>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d013      	beq.n	80034dc <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034b4:	4b3f      	ldr	r3, [pc, #252]	@ (80035b4 <xQueueGenericSend+0x210>)
 80034b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	f3bf 8f6f 	isb	sy
 80034c4:	e00a      	b.n	80034dc <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034cc:	4b39      	ldr	r3, [pc, #228]	@ (80035b4 <xQueueGenericSend+0x210>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034dc:	f002 fe1c 	bl	8006118 <vPortExitCritical>
				return pdPASS;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e063      	b.n	80035ac <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d103      	bne.n	80034f2 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80034ea:	f002 fe15 	bl	8006118 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80034ee:	2300      	movs	r3, #0
 80034f0:	e05c      	b.n	80035ac <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d106      	bne.n	8003506 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fcc3 	bl	8004e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003502:	2301      	movs	r3, #1
 8003504:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003506:	f002 fe07 	bl	8006118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800350a:	f001 f9f5 	bl	80048f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800350e:	f002 fdcd 	bl	80060ac <vPortEnterCritical>
 8003512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003514:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003518:	b25b      	sxtb	r3, r3
 800351a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800351e:	d103      	bne.n	8003528 <xQueueGenericSend+0x184>
 8003520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800352e:	b25b      	sxtb	r3, r3
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d103      	bne.n	800353e <xQueueGenericSend+0x19a>
 8003536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003538:	2200      	movs	r2, #0
 800353a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800353e:	f002 fdeb 	bl	8006118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003542:	1d3a      	adds	r2, r7, #4
 8003544:	f107 0314 	add.w	r3, r7, #20
 8003548:	4611      	mov	r1, r2
 800354a:	4618      	mov	r0, r3
 800354c:	f001 fcb2 	bl	8004eb4 <xTaskCheckForTimeOut>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d124      	bne.n	80035a0 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003556:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003558:	f000 fab2 	bl	8003ac0 <prvIsQueueFull>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d018      	beq.n	8003594 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003564:	3310      	adds	r3, #16
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fba6 	bl	8004cbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003570:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003572:	f000 fa3d 	bl	80039f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003576:	f001 f9cd 	bl	8004914 <xTaskResumeAll>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	f47f af7c 	bne.w	800347a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8003582:	4b0c      	ldr	r3, [pc, #48]	@ (80035b4 <xQueueGenericSend+0x210>)
 8003584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	f3bf 8f6f 	isb	sy
 8003592:	e772      	b.n	800347a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003594:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003596:	f000 fa2b 	bl	80039f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800359a:	f001 f9bb 	bl	8004914 <xTaskResumeAll>
 800359e:	e76c      	b.n	800347a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035a2:	f000 fa25 	bl	80039f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035a6:	f001 f9b5 	bl	8004914 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3738      	adds	r7, #56	@ 0x38
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	e000ed04 	.word	0xe000ed04

080035b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08e      	sub	sp, #56	@ 0x38
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10d      	bne.n	80035ec <xQueueGenericSendFromISR+0x34>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d4:	b672      	cpsid	i
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	b662      	cpsie	i
 80035e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <xQueueGenericSendFromISR+0x42>
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <xQueueGenericSendFromISR+0x46>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <xQueueGenericSendFromISR+0x48>
 80035fe:	2300      	movs	r3, #0
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10d      	bne.n	8003620 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8003604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003608:	b672      	cpsid	i
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	b662      	cpsie	i
 8003618:	623b      	str	r3, [r7, #32]
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	e7fd      	b.n	800361c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d103      	bne.n	800362e <xQueueGenericSendFromISR+0x76>
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <xQueueGenericSendFromISR+0x7a>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <xQueueGenericSendFromISR+0x7c>
 8003632:	2300      	movs	r3, #0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10d      	bne.n	8003654 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363c:	b672      	cpsid	i
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	b662      	cpsie	i
 800364c:	61fb      	str	r3, [r7, #28]
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003654:	f002 fe12 	bl	800627c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003658:	f3ef 8211 	mrs	r2, BASEPRI
 800365c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003660:	b672      	cpsid	i
 8003662:	f383 8811 	msr	BASEPRI, r3
 8003666:	f3bf 8f6f 	isb	sy
 800366a:	f3bf 8f4f 	dsb	sy
 800366e:	b662      	cpsie	i
 8003670:	61ba      	str	r2, [r7, #24]
 8003672:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003674:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003676:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800367c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003680:	429a      	cmp	r2, r3
 8003682:	d302      	bcc.n	800368a <xQueueGenericSendFromISR+0xd2>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	d12c      	bne.n	80036e4 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003690:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800369a:	f000 f919 	bl	80038d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800369e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80036a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a6:	d112      	bne.n	80036ce <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d016      	beq.n	80036de <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b2:	3324      	adds	r3, #36	@ 0x24
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fb57 	bl	8004d68 <xTaskRemoveFromEventList>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00b      	beq.n	80036de <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	e007      	b.n	80036de <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80036d2:	3301      	adds	r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	b25a      	sxtb	r2, r3
 80036d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80036de:	2301      	movs	r3, #1
 80036e0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80036e2:	e001      	b.n	80036e8 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ea:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80036f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3738      	adds	r7, #56	@ 0x38
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08c      	sub	sp, #48	@ 0x30
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10d      	bne.n	8003736 <xQueueReceive+0x36>
	__asm volatile
 800371a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800371e:	b672      	cpsid	i
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	b662      	cpsie	i
 800372e:	623b      	str	r3, [r7, #32]
}
 8003730:	bf00      	nop
 8003732:	bf00      	nop
 8003734:	e7fd      	b.n	8003732 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d103      	bne.n	8003744 <xQueueReceive+0x44>
 800373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <xQueueReceive+0x48>
 8003744:	2301      	movs	r3, #1
 8003746:	e000      	b.n	800374a <xQueueReceive+0x4a>
 8003748:	2300      	movs	r3, #0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <xQueueReceive+0x6a>
	__asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	b672      	cpsid	i
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	b662      	cpsie	i
 8003762:	61fb      	str	r3, [r7, #28]
}
 8003764:	bf00      	nop
 8003766:	bf00      	nop
 8003768:	e7fd      	b.n	8003766 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800376a:	f001 fd05 	bl	8005178 <xTaskGetSchedulerState>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d102      	bne.n	800377a <xQueueReceive+0x7a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <xQueueReceive+0x7e>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <xQueueReceive+0x80>
 800377e:	2300      	movs	r3, #0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <xQueueReceive+0xa0>
	__asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	b672      	cpsid	i
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	b662      	cpsie	i
 8003798:	61bb      	str	r3, [r7, #24]
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037a0:	f002 fc84 	bl	80060ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01f      	beq.n	80037f0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80037b4:	f000 f8f6 	bl	80039a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	1e5a      	subs	r2, r3, #1
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00f      	beq.n	80037e8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	3310      	adds	r3, #16
 80037cc:	4618      	mov	r0, r3
 80037ce:	f001 facb 	bl	8004d68 <xTaskRemoveFromEventList>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d007      	beq.n	80037e8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80037d8:	4b3c      	ldr	r3, [pc, #240]	@ (80038cc <xQueueReceive+0x1cc>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80037e8:	f002 fc96 	bl	8006118 <vPortExitCritical>
				return pdPASS;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e069      	b.n	80038c4 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80037f6:	f002 fc8f 	bl	8006118 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e062      	b.n	80038c4 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80037fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	4618      	mov	r0, r3
 800380a:	f001 fb3d 	bl	8004e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800380e:	2301      	movs	r3, #1
 8003810:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003812:	f002 fc81 	bl	8006118 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003816:	f001 f86f 	bl	80048f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800381a:	f002 fc47 	bl	80060ac <vPortEnterCritical>
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003824:	b25b      	sxtb	r3, r3
 8003826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382a:	d103      	bne.n	8003834 <xQueueReceive+0x134>
 800382c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800383a:	b25b      	sxtb	r3, r3
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d103      	bne.n	800384a <xQueueReceive+0x14a>
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800384a:	f002 fc65 	bl	8006118 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800384e:	1d3a      	adds	r2, r7, #4
 8003850:	f107 0310 	add.w	r3, r7, #16
 8003854:	4611      	mov	r1, r2
 8003856:	4618      	mov	r0, r3
 8003858:	f001 fb2c 	bl	8004eb4 <xTaskCheckForTimeOut>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d123      	bne.n	80038aa <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003864:	f000 f916 	bl	8003a94 <prvIsQueueEmpty>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	3324      	adds	r3, #36	@ 0x24
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f001 fa20 	bl	8004cbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800387c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800387e:	f000 f8b7 	bl	80039f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003882:	f001 f847 	bl	8004914 <xTaskResumeAll>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d189      	bne.n	80037a0 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800388c:	4b0f      	ldr	r3, [pc, #60]	@ (80038cc <xQueueReceive+0x1cc>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	e780      	b.n	80037a0 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800389e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038a0:	f000 f8a6 	bl	80039f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038a4:	f001 f836 	bl	8004914 <xTaskResumeAll>
 80038a8:	e77a      	b.n	80037a0 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ac:	f000 f8a0 	bl	80039f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038b0:	f001 f830 	bl	8004914 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b6:	f000 f8ed 	bl	8003a94 <prvIsQueueEmpty>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	f43f af6f 	beq.w	80037a0 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3730      	adds	r7, #48	@ 0x30
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d14d      	bne.n	8003992 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fc5a 	bl	80051b4 <xTaskPriorityDisinherit>
 8003900:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	e043      	b.n	8003992 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d119      	bne.n	8003944 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6858      	ldr	r0, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	461a      	mov	r2, r3
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	f002 ff62 	bl	80067e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685a      	ldr	r2, [r3, #4]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	d32b      	bcc.n	8003992 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e026      	b.n	8003992 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	68d8      	ldr	r0, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	461a      	mov	r2, r3
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	f002 ff48 	bl	80067e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395c:	425b      	negs	r3, r3
 800395e:	441a      	add	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d207      	bcs.n	8003980 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	425b      	negs	r3, r3
 800397a:	441a      	add	r2, r3
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d105      	bne.n	8003992 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	3b01      	subs	r3, #1
 8003990:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1c5a      	adds	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800399a:	697b      	ldr	r3, [r7, #20]
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d018      	beq.n	80039e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	68da      	ldr	r2, [r3, #12]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039be:	441a      	add	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d303      	bcc.n	80039d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68d9      	ldr	r1, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e0:	461a      	mov	r2, r3
 80039e2:	6838      	ldr	r0, [r7, #0]
 80039e4:	f002 fefe 	bl	80067e4 <memcpy>
	}
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80039f8:	f002 fb58 	bl	80060ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a04:	e011      	b.n	8003a2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d012      	beq.n	8003a34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3324      	adds	r3, #36	@ 0x24
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 f9a8 	bl	8004d68 <xTaskRemoveFromEventList>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a1e:	f001 fab1 	bl	8004f84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	dce9      	bgt.n	8003a06 <prvUnlockQueue+0x16>
 8003a32:	e000      	b.n	8003a36 <prvUnlockQueue+0x46>
					break;
 8003a34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	22ff      	movs	r2, #255	@ 0xff
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a3e:	f002 fb6b 	bl	8006118 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a42:	f002 fb33 	bl	80060ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a4e:	e011      	b.n	8003a74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d012      	beq.n	8003a7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f001 f983 	bl	8004d68 <xTaskRemoveFromEventList>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d001      	beq.n	8003a6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a68:	f001 fa8c 	bl	8004f84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a6c:	7bbb      	ldrb	r3, [r7, #14]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dce9      	bgt.n	8003a50 <prvUnlockQueue+0x60>
 8003a7c:	e000      	b.n	8003a80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003a7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	22ff      	movs	r2, #255	@ 0xff
 8003a84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003a88:	f002 fb46 	bl	8006118 <vPortExitCritical>
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a9c:	f002 fb06 	bl	80060ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d102      	bne.n	8003aae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e001      	b.n	8003ab2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ab2:	f002 fb31 	bl	8006118 <vPortExitCritical>

	return xReturn;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ac8:	f002 faf0 	bl	80060ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d102      	bne.n	8003ade <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	e001      	b.n	8003ae2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ae2:	f002 fb19 	bl	8006118 <vPortExitCritical>

	return xReturn;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	e014      	b.n	8003b2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b00:	4a0f      	ldr	r2, [pc, #60]	@ (8003b40 <vQueueAddToRegistry+0x50>)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10b      	bne.n	8003b24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b0c:	490c      	ldr	r1, [pc, #48]	@ (8003b40 <vQueueAddToRegistry+0x50>)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b16:	4a0a      	ldr	r2, [pc, #40]	@ (8003b40 <vQueueAddToRegistry+0x50>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b22:	e006      	b.n	8003b32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	3301      	adds	r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b07      	cmp	r3, #7
 8003b2e:	d9e7      	bls.n	8003b00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	20000848 	.word	0x20000848

08003b44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b54:	f002 faaa 	bl	80060ac <vPortEnterCritical>
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b5e:	b25b      	sxtb	r3, r3
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d103      	bne.n	8003b6e <vQueueWaitForMessageRestricted+0x2a>
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b74:	b25b      	sxtb	r3, r3
 8003b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7a:	d103      	bne.n	8003b84 <vQueueWaitForMessageRestricted+0x40>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b84:	f002 fac8 	bl	8006118 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3324      	adds	r3, #36	@ 0x24
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68b9      	ldr	r1, [r7, #8]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f001 f8b7 	bl	8004d0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b9e:	6978      	ldr	r0, [r7, #20]
 8003ba0:	f7ff ff26 	bl	80039f0 <prvUnlockQueue>
	}
 8003ba4:	bf00      	nop
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08c      	sub	sp, #48	@ 0x30
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d113      	bne.n	8003be6 <xStreamBufferGenericCreate+0x3a>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d821      	bhi.n	8003c0e <xStreamBufferGenericCreate+0x62>
	__asm volatile
 8003bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bce:	b672      	cpsid	i
 8003bd0:	f383 8811 	msr	BASEPRI, r3
 8003bd4:	f3bf 8f6f 	isb	sy
 8003bd8:	f3bf 8f4f 	dsb	sy
 8003bdc:	b662      	cpsie	i
 8003bde:	61fb      	str	r3, [r7, #28]
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	e7fd      	b.n	8003be2 <xStreamBufferGenericCreate+0x36>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10d      	bne.n	8003c0e <xStreamBufferGenericCreate+0x62>
	__asm volatile
 8003bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf6:	b672      	cpsid	i
 8003bf8:	f383 8811 	msr	BASEPRI, r3
 8003bfc:	f3bf 8f6f 	isb	sy
 8003c00:	f3bf 8f4f 	dsb	sy
 8003c04:	b662      	cpsie	i
 8003c06:	61bb      	str	r3, [r7, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	e7fd      	b.n	8003c0a <xStreamBufferGenericCreate+0x5e>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90d      	bls.n	8003c32 <xStreamBufferGenericCreate+0x86>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	b672      	cpsid	i
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	b662      	cpsie	i
 8003c2a:	617b      	str	r3, [r7, #20]
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	e7fd      	b.n	8003c2e <xStreamBufferGenericCreate+0x82>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <xStreamBufferGenericCreate+0x90>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3324      	adds	r3, #36	@ 0x24
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 fb5e 	bl	8006308 <pvPortMalloc>
 8003c4c:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <xStreamBufferGenericCreate+0xbe>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8003c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	6a38      	ldr	r0, [r7, #32]
 8003c66:	f000 fba0 	bl	80043aa <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
	}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3728      	adds	r7, #40	@ 0x28
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10d      	bne.n	8003ca2 <xStreamBufferSpacesAvailable+0x2e>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8a:	b672      	cpsid	i
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	b662      	cpsie	i
 8003c9a:	60fb      	str	r3, [r7, #12]
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	e7fd      	b.n	8003c9e <xStreamBufferSpacesAvailable+0x2a>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4413      	add	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	697a      	ldr	r2, [r7, #20]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d304      	bcc.n	8003cd2 <xStreamBufferSpacesAvailable+0x5e>
	{
		xSpace -= pxStreamBuffer->xLength;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b090      	sub	sp, #64	@ 0x40
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
size_t xReturn, xSpace = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	633b      	str	r3, [r7, #48]	@ 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10d      	bne.n	8003d1c <xStreamBufferSend+0x3c>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	b672      	cpsid	i
 8003d06:	f383 8811 	msr	BASEPRI, r3
 8003d0a:	f3bf 8f6f 	isb	sy
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	b662      	cpsie	i
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d16:	bf00      	nop
 8003d18:	bf00      	nop
 8003d1a:	e7fd      	b.n	8003d18 <xStreamBufferSend+0x38>
	configASSERT( pxStreamBuffer );
 8003d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10d      	bne.n	8003d3e <xStreamBufferSend+0x5e>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	b672      	cpsid	i
 8003d28:	f383 8811 	msr	BASEPRI, r3
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	f3bf 8f4f 	dsb	sy
 8003d34:	b662      	cpsie	i
 8003d36:	623b      	str	r3, [r7, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <xStreamBufferSend+0x5a>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	7f1b      	ldrb	r3, [r3, #28]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d014      	beq.n	8003d74 <xStreamBufferSend+0x94>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	3304      	adds	r3, #4
 8003d4e:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8003d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d80d      	bhi.n	8003d74 <xStreamBufferSend+0x94>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5c:	b672      	cpsid	i
 8003d5e:	f383 8811 	msr	BASEPRI, r3
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	f3bf 8f4f 	dsb	sy
 8003d6a:	b662      	cpsie	i
 8003d6c:	61fb      	str	r3, [r7, #28]
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <xStreamBufferSend+0x90>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d041      	beq.n	8003dfe <xStreamBufferSend+0x11e>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8003d7a:	f107 0310 	add.w	r3, r7, #16
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 f858 	bl	8004e34 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8003d84:	f002 f992 	bl	80060ac <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003d88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003d8a:	f7ff ff73 	bl	8003c74 <xStreamBufferSpacesAvailable>
 8003d8e:	6378      	str	r0, [r7, #52]	@ 0x34

				if( xSpace < xRequiredSpace )
 8003d90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d21a      	bcs.n	8003dce <xStreamBufferSend+0xee>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8003d98:	2000      	movs	r0, #0
 8003d9a:	f001 fc95 	bl	80056c8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8003d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00d      	beq.n	8003dc2 <xStreamBufferSend+0xe2>
	__asm volatile
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	b672      	cpsid	i
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	b662      	cpsie	i
 8003dba:	61bb      	str	r3, [r7, #24]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <xStreamBufferSend+0xde>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8003dc2:	f001 f9c9 	bl	8005158 <xTaskGetCurrentTaskHandle>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dca:	615a      	str	r2, [r3, #20]
 8003dcc:	e002      	b.n	8003dd4 <xStreamBufferSend+0xf4>
				}
				else
				{
					taskEXIT_CRITICAL();
 8003dce:	f002 f9a3 	bl	8006118 <vPortExitCritical>
					break;
 8003dd2:	e014      	b.n	8003dfe <xStreamBufferSend+0x11e>
				}
			}
			taskEXIT_CRITICAL();
 8003dd4:	f002 f9a0 	bl	8006118 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2100      	movs	r1, #0
 8003dde:	2000      	movs	r0, #0
 8003de0:	f001 fa5c 	bl	800529c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	2200      	movs	r2, #0
 8003de8:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8003dea:	463a      	mov	r2, r7
 8003dec:	f107 0310 	add.w	r3, r7, #16
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f85e 	bl	8004eb4 <xTaskCheckForTimeOut>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0c2      	beq.n	8003d84 <xStreamBufferSend+0xa4>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8003dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <xStreamBufferSend+0x12c>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003e04:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e06:	f7ff ff35 	bl	8003c74 <xStreamBufferSpacesAvailable>
 8003e0a:	6378      	str	r0, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e18:	f000 f89c 	bl	8003f54 <prvWriteMessageToBuffer>
 8003e1c:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d019      	beq.n	8003e58 <xStreamBufferSend+0x178>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003e24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003e26:	f000 faa0 	bl	800436a <prvBytesInBuffer>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d311      	bcc.n	8003e58 <xStreamBufferSend+0x178>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8003e34:	f000 fd60 	bl	80048f8 <vTaskSuspendAll>
 8003e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <xStreamBufferSend+0x174>
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e42:	6918      	ldr	r0, [r3, #16]
 8003e44:	2300      	movs	r3, #0
 8003e46:	2200      	movs	r2, #0
 8003e48:	2100      	movs	r1, #0
 8003e4a:	f001 fa87 	bl	800535c <xTaskGenericNotify>
 8003e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e50:	2200      	movs	r2, #0
 8003e52:	611a      	str	r2, [r3, #16]
 8003e54:	f000 fd5e 	bl	8004914 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8003e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3738      	adds	r7, #56	@ 0x38
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b090      	sub	sp, #64	@ 0x40
 8003e66:	af02      	add	r7, sp, #8
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10d      	bne.n	8003e9a <xStreamBufferSendFromISR+0x38>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e82:	b672      	cpsid	i
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	b662      	cpsie	i
 8003e92:	623b      	str	r3, [r7, #32]
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <xStreamBufferSendFromISR+0x34>
	configASSERT( pxStreamBuffer );
 8003e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d10d      	bne.n	8003ebc <xStreamBufferSendFromISR+0x5a>
	__asm volatile
 8003ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea4:	b672      	cpsid	i
 8003ea6:	f383 8811 	msr	BASEPRI, r3
 8003eaa:	f3bf 8f6f 	isb	sy
 8003eae:	f3bf 8f4f 	dsb	sy
 8003eb2:	b662      	cpsie	i
 8003eb4:	61fb      	str	r3, [r7, #28]
}
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xStreamBufferSendFromISR+0x56>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8003ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ebe:	7f1b      	ldrb	r3, [r3, #28]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <xStreamBufferSendFromISR+0x6c>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	3304      	adds	r3, #4
 8003ecc:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8003ece:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ed0:	f7ff fed0 	bl	8003c74 <xStreamBufferSpacesAvailable>
 8003ed4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ee2:	f000 f837 	bl	8003f54 <prvWriteMessageToBuffer>
 8003ee6:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8003ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d02d      	beq.n	8003f4a <xStreamBufferSendFromISR+0xe8>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8003eee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ef0:	f000 fa3b 	bl	800436a <prvBytesInBuffer>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d325      	bcc.n	8003f4a <xStreamBufferSendFromISR+0xe8>
	__asm volatile
 8003efe:	f3ef 8211 	mrs	r2, BASEPRI
 8003f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f06:	b672      	cpsid	i
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	b662      	cpsie	i
 8003f16:	61ba      	str	r2, [r7, #24]
 8003f18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00b      	beq.n	8003f3e <xStreamBufferSendFromISR+0xdc>
 8003f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f28:	6918      	ldr	r0, [r3, #16]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	2300      	movs	r3, #0
 8003f30:	2200      	movs	r2, #0
 8003f32:	2100      	movs	r1, #0
 8003f34:	f001 fada 	bl	80054ec <xTaskGenericNotifyFromISR>
 8003f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	611a      	str	r2, [r3, #16]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f383 8811 	msr	BASEPRI, r3
}
 8003f48:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8003f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3738      	adds	r7, #56	@ 0x38
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d102      	bne.n	8003f6e <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
 8003f6c:	e01d      	b.n	8003faa <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	7f1b      	ldrb	r3, [r3, #28]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d108      	bne.n	8003f8c <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4293      	cmp	r3, r2
 8003f84:	bf28      	it	cs
 8003f86:	4613      	movcs	r3, r2
 8003f88:	607b      	str	r3, [r7, #4]
 8003f8a:	e00e      	b.n	8003faa <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d308      	bcc.n	8003fa6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	68f8      	ldr	r0, [r7, #12]
 8003fa0:	f000 f8e5 	bl	800416e <prvWriteBytesToBuffer>
 8003fa4:	e001      	b.n	8003faa <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f8d9 	bl	800416e <prvWriteBytesToBuffer>
 8003fbc:	6138      	str	r0, [r7, #16]
 8003fbe:	e001      	b.n	8003fc4 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8003fc4:	693b      	ldr	r3, [r7, #16]
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b08e      	sub	sp, #56	@ 0x38
 8003fd2:	af02      	add	r7, sp, #8
 8003fd4:	60f8      	str	r0, [r7, #12]
 8003fd6:	60b9      	str	r1, [r7, #8]
 8003fd8:	607a      	str	r2, [r7, #4]
 8003fda:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10d      	bne.n	8004006 <xStreamBufferReceive+0x38>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fee:	b672      	cpsid	i
 8003ff0:	f383 8811 	msr	BASEPRI, r3
 8003ff4:	f3bf 8f6f 	isb	sy
 8003ff8:	f3bf 8f4f 	dsb	sy
 8003ffc:	b662      	cpsie	i
 8003ffe:	61fb      	str	r3, [r7, #28]
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <xStreamBufferReceive+0x34>
	configASSERT( pxStreamBuffer );
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10d      	bne.n	8004028 <xStreamBufferReceive+0x5a>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004010:	b672      	cpsid	i
 8004012:	f383 8811 	msr	BASEPRI, r3
 8004016:	f3bf 8f6f 	isb	sy
 800401a:	f3bf 8f4f 	dsb	sy
 800401e:	b662      	cpsie	i
 8004020:	61bb      	str	r3, [r7, #24]
}
 8004022:	bf00      	nop
 8004024:	bf00      	nop
 8004026:	e7fd      	b.n	8004024 <xStreamBufferReceive+0x56>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	7f1b      	ldrb	r3, [r3, #28]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <xStreamBufferReceive+0x6c>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004034:	2304      	movs	r3, #4
 8004036:	627b      	str	r3, [r7, #36]	@ 0x24
 8004038:	e001      	b.n	800403e <xStreamBufferReceive+0x70>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d037      	beq.n	80040b4 <xStreamBufferReceive+0xe6>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8004044:	f002 f832 	bl	80060ac <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8004048:	6a38      	ldr	r0, [r7, #32]
 800404a:	f000 f98e 	bl	800436a <prvBytesInBuffer>
 800404e:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004050:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	429a      	cmp	r2, r3
 8004056:	d819      	bhi.n	800408c <xStreamBufferReceive+0xbe>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8004058:	2000      	movs	r0, #0
 800405a:	f001 fb35 	bl	80056c8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800405e:	6a3b      	ldr	r3, [r7, #32]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <xStreamBufferReceive+0xb4>
	__asm volatile
 8004066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800406a:	b672      	cpsid	i
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	b662      	cpsie	i
 800407a:	617b      	str	r3, [r7, #20]
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	e7fd      	b.n	800407e <xStreamBufferReceive+0xb0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8004082:	f001 f869 	bl	8005158 <xTaskGetCurrentTaskHandle>
 8004086:	4602      	mov	r2, r0
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800408c:	f002 f844 	bl	8006118 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8004090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004094:	429a      	cmp	r2, r3
 8004096:	d811      	bhi.n	80040bc <xStreamBufferReceive+0xee>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	2000      	movs	r0, #0
 80040a0:	f001 f8fc 	bl	800529c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	2200      	movs	r2, #0
 80040a8:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80040aa:	6a38      	ldr	r0, [r7, #32]
 80040ac:	f000 f95d 	bl	800436a <prvBytesInBuffer>
 80040b0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80040b2:	e003      	b.n	80040bc <xStreamBufferReceive+0xee>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80040b4:	6a38      	ldr	r0, [r7, #32]
 80040b6:	f000 f958 	bl	800436a <prvBytesInBuffer>
 80040ba:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80040bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d91d      	bls.n	8004100 <xStreamBufferReceive+0x132>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	68b9      	ldr	r1, [r7, #8]
 80040ce:	6a38      	ldr	r0, [r7, #32]
 80040d0:	f000 f81b 	bl	800410a <prvReadMessageFromBuffer>
 80040d4:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80040d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d011      	beq.n	8004100 <xStreamBufferReceive+0x132>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80040dc:	f000 fc0c 	bl	80048f8 <vTaskSuspendAll>
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <xStreamBufferReceive+0x12e>
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	6958      	ldr	r0, [r3, #20]
 80040ec:	2300      	movs	r3, #0
 80040ee:	2200      	movs	r2, #0
 80040f0:	2100      	movs	r1, #0
 80040f2:	f001 f933 	bl	800535c <xTaskGenericNotify>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2200      	movs	r2, #0
 80040fa:	615a      	str	r2, [r3, #20]
 80040fc:	f000 fc0a 	bl	8004914 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8004100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004102:	4618      	mov	r0, r3
 8004104:	3730      	adds	r7, #48	@ 0x30
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b088      	sub	sp, #32
 800410e:	af00      	add	r7, sp, #0
 8004110:	60f8      	str	r0, [r7, #12]
 8004112:	60b9      	str	r1, [r7, #8]
 8004114:	607a      	str	r2, [r7, #4]
 8004116:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2b00      	cmp	r3, #0
 800411c:	d019      	beq.n	8004152 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8004124:	f107 0110 	add.w	r1, r7, #16
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 f899 	bl	8004264 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	429a      	cmp	r2, r3
 8004144:	d907      	bls.n	8004156 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	e001      	b.n	8004156 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f881 	bl	8004264 <prvReadBytesFromBuffer>
 8004162:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8004164:	697b      	ldr	r3, [r7, #20]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3720      	adds	r7, #32
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b08a      	sub	sp, #40	@ 0x28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d10d      	bne.n	800419c <prvWriteBytesToBuffer+0x2e>
	__asm volatile
 8004180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004184:	b672      	cpsid	i
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	b662      	cpsie	i
 8004194:	61fb      	str	r3, [r7, #28]
}
 8004196:	bf00      	nop
 8004198:	bf00      	nop
 800419a:	e7fd      	b.n	8004198 <prvWriteBytesToBuffer+0x2a>

	xNextHead = pxStreamBuffer->xHead;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	4293      	cmp	r3, r2
 80041ae:	bf28      	it	cs
 80041b0:	4613      	movcs	r3, r2
 80041b2:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80041b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b6:	6a3b      	ldr	r3, [r7, #32]
 80041b8:	441a      	add	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d90d      	bls.n	80041de <prvWriteBytesToBuffer+0x70>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	b672      	cpsid	i
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	b662      	cpsie	i
 80041d6:	61bb      	str	r3, [r7, #24]
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	e7fd      	b.n	80041da <prvWriteBytesToBuffer+0x6c>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	4413      	add	r3, r2
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f002 fafa 	bl	80067e4 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d91f      	bls.n	8004238 <prvWriteBytesToBuffer+0xca>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	1ad2      	subs	r2, r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	429a      	cmp	r2, r3
 8004204:	d90d      	bls.n	8004222 <prvWriteBytesToBuffer+0xb4>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	b672      	cpsid	i
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	b662      	cpsie	i
 800421a:	617b      	str	r3, [r7, #20]
}
 800421c:	bf00      	nop
 800421e:	bf00      	nop
 8004220:	e7fd      	b.n	800421e <prvWriteBytesToBuffer+0xb0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6998      	ldr	r0, [r3, #24]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	18d1      	adds	r1, r2, r3
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	461a      	mov	r2, r3
 8004234:	f002 fad6 	bl	80067e4 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8004238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4413      	add	r3, r2
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004246:	429a      	cmp	r2, r3
 8004248:	d304      	bcc.n	8004254 <prvWriteBytesToBuffer+0xe6>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	605a      	str	r2, [r3, #4]

	return xCount;
 800425a:	687b      	ldr	r3, [r7, #4]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3728      	adds	r7, #40	@ 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	@ 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	4293      	cmp	r3, r2
 8004278:	bf28      	it	cs
 800427a:	4613      	movcs	r3, r2
 800427c:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d06d      	beq.n	8004360 <prvReadBytesFromBuffer+0xfc>
	{
		xNextTail = pxStreamBuffer->xTail;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	6a3a      	ldr	r2, [r7, #32]
 8004294:	4293      	cmp	r3, r2
 8004296:	bf28      	it	cs
 8004298:	4613      	movcs	r3, r2
 800429a:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800429c:	69fa      	ldr	r2, [r7, #28]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d90d      	bls.n	80042c0 <prvReadBytesFromBuffer+0x5c>
	__asm volatile
 80042a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a8:	b672      	cpsid	i
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	b662      	cpsie	i
 80042b8:	61bb      	str	r3, [r7, #24]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <prvReadBytesFromBuffer+0x58>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80042c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	441a      	add	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d90d      	bls.n	80042ea <prvReadBytesFromBuffer+0x86>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	b672      	cpsid	i
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	b662      	cpsie	i
 80042e2:	617b      	str	r3, [r7, #20]
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop
 80042e8:	e7fd      	b.n	80042e6 <prvReadBytesFromBuffer+0x82>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	4413      	add	r3, r2
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	4619      	mov	r1, r3
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	f002 fa74 	bl	80067e4 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	429a      	cmp	r2, r3
 8004302:	d91c      	bls.n	800433e <prvReadBytesFromBuffer+0xda>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	429a      	cmp	r2, r3
 800430a:	d90d      	bls.n	8004328 <prvReadBytesFromBuffer+0xc4>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	b672      	cpsid	i
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	b662      	cpsie	i
 8004320:	613b      	str	r3, [r7, #16]
}
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <prvReadBytesFromBuffer+0xc0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	18d0      	adds	r0, r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6999      	ldr	r1, [r3, #24]
 8004332:	6a3a      	ldr	r2, [r7, #32]
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	461a      	mov	r2, r3
 800433a:	f002 fa53 	bl	80067e4 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800433e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	4413      	add	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434c:	429a      	cmp	r2, r3
 800434e:	d304      	bcc.n	800435a <prvReadBytesFromBuffer+0xf6>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800435e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8004360:	6a3b      	ldr	r3, [r7, #32]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3728      	adds	r7, #40	@ 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689a      	ldr	r2, [r3, #8]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4413      	add	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	429a      	cmp	r2, r3
 8004390:	d304      	bcc.n	800439c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800439c:	68fb      	ldr	r3, [r7, #12]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b086      	sub	sp, #24
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80043b8:	2355      	movs	r3, #85	@ 0x55
 80043ba:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6979      	ldr	r1, [r7, #20]
 80043c0:	68b8      	ldr	r0, [r7, #8]
 80043c2:	f002 f98b 	bl	80066dc <memset>
 80043c6:	4602      	mov	r2, r0
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d00d      	beq.n	80043ea <prvInitialiseNewStreamBuffer+0x40>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	b672      	cpsid	i
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	b662      	cpsie	i
 80043e2:	613b      	str	r3, [r7, #16]
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <prvInitialiseNewStreamBuffer+0x3c>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80043ea:	2224      	movs	r2, #36	@ 0x24
 80043ec:	2100      	movs	r1, #0
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f002 f974 	bl	80066dc <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f897 2020 	ldrb.w	r2, [r7, #32]
 800440c:	771a      	strb	r2, [r3, #28]
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004416:	b580      	push	{r7, lr}
 8004418:	b08e      	sub	sp, #56	@ 0x38
 800441a:	af04      	add	r7, sp, #16
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10d      	bne.n	8004446 <xTaskCreateStatic+0x30>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	b672      	cpsid	i
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	b662      	cpsie	i
 800443e:	623b      	str	r3, [r7, #32]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10d      	bne.n	8004468 <xTaskCreateStatic+0x52>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004450:	b672      	cpsid	i
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	b662      	cpsie	i
 8004460:	61fb      	str	r3, [r7, #28]
}
 8004462:	bf00      	nop
 8004464:	bf00      	nop
 8004466:	e7fd      	b.n	8004464 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004468:	23a8      	movs	r3, #168	@ 0xa8
 800446a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2ba8      	cmp	r3, #168	@ 0xa8
 8004470:	d00d      	beq.n	800448e <xTaskCreateStatic+0x78>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004476:	b672      	cpsid	i
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	b662      	cpsie	i
 8004486:	61bb      	str	r3, [r7, #24]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800448e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01e      	beq.n	80044d4 <xTaskCreateStatic+0xbe>
 8004496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800449c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044a4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	2202      	movs	r2, #2
 80044aa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044ae:	2300      	movs	r3, #0
 80044b0:	9303      	str	r3, [sp, #12]
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	9302      	str	r3, [sp, #8]
 80044b6:	f107 0314 	add.w	r3, r7, #20
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f850 	bl	800456c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044ce:	f000 f8f7 	bl	80046c0 <prvAddNewTaskToReadyList>
 80044d2:	e001      	b.n	80044d8 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044d8:	697b      	ldr	r3, [r7, #20]
	}
 80044da:	4618      	mov	r0, r3
 80044dc:	3728      	adds	r7, #40	@ 0x28
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08c      	sub	sp, #48	@ 0x30
 80044e6:	af04      	add	r7, sp, #16
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 ff06 	bl	8006308 <pvPortMalloc>
 80044fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00e      	beq.n	8004522 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004504:	20a8      	movs	r0, #168	@ 0xa8
 8004506:	f001 feff 	bl	8006308 <pvPortMalloc>
 800450a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d003      	beq.n	800451a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	631a      	str	r2, [r3, #48]	@ 0x30
 8004518:	e005      	b.n	8004526 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800451a:	6978      	ldr	r0, [r7, #20]
 800451c:	f001 ffc2 	bl	80064a4 <vPortFree>
 8004520:	e001      	b.n	8004526 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d017      	beq.n	800455c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004534:	88fa      	ldrh	r2, [r7, #6]
 8004536:	2300      	movs	r3, #0
 8004538:	9303      	str	r3, [sp, #12]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	9302      	str	r3, [sp, #8]
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68b9      	ldr	r1, [r7, #8]
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f80e 	bl	800456c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004550:	69f8      	ldr	r0, [r7, #28]
 8004552:	f000 f8b5 	bl	80046c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004556:	2301      	movs	r3, #1
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e002      	b.n	8004562 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800455c:	f04f 33ff 	mov.w	r3, #4294967295
 8004560:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004562:	69bb      	ldr	r3, [r7, #24]
	}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	461a      	mov	r2, r3
 8004584:	21a5      	movs	r1, #165	@ 0xa5
 8004586:	f002 f8a9 	bl	80066dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004594:	440b      	add	r3, r1
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00d      	beq.n	80045ca <prvInitialiseNewTask+0x5e>
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	b672      	cpsid	i
 80045b4:	f383 8811 	msr	BASEPRI, r3
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	b662      	cpsie	i
 80045c2:	617b      	str	r3, [r7, #20]
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	e7fd      	b.n	80045c6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01f      	beq.n	8004610 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045d0:	2300      	movs	r3, #0
 80045d2:	61fb      	str	r3, [r7, #28]
 80045d4:	e012      	b.n	80045fc <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	7819      	ldrb	r1, [r3, #0]
 80045de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	4413      	add	r3, r2
 80045e4:	3334      	adds	r3, #52	@ 0x34
 80045e6:	460a      	mov	r2, r1
 80045e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	69fb      	ldr	r3, [r7, #28]
 80045ee:	4413      	add	r3, r2
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d006      	beq.n	8004604 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3301      	adds	r3, #1
 80045fa:	61fb      	str	r3, [r7, #28]
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	2b0f      	cmp	r3, #15
 8004600:	d9e9      	bls.n	80045d6 <prvInitialiseNewTask+0x6a>
 8004602:	e000      	b.n	8004606 <prvInitialiseNewTask+0x9a>
			{
				break;
 8004604:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800460e:	e003      	b.n	8004618 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	2b37      	cmp	r3, #55	@ 0x37
 800461c:	d901      	bls.n	8004622 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800461e:	2337      	movs	r3, #55	@ 0x37
 8004620:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004626:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800462c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800462e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004630:	2200      	movs	r2, #0
 8004632:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004636:	3304      	adds	r3, #4
 8004638:	4618      	mov	r0, r3
 800463a:	f7fe fd09 	bl	8003050 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	3318      	adds	r3, #24
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fd04 	bl	8003050 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800464c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	2200      	movs	r2, #0
 800466a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	3354      	adds	r3, #84	@ 0x54
 8004672:	224c      	movs	r2, #76	@ 0x4c
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f002 f830 	bl	80066dc <memset>
 800467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467e:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <prvInitialiseNewTask+0x148>)
 8004680:	659a      	str	r2, [r3, #88]	@ 0x58
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	4a0c      	ldr	r2, [pc, #48]	@ (80046b8 <prvInitialiseNewTask+0x14c>)
 8004686:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468a:	4a0c      	ldr	r2, [pc, #48]	@ (80046bc <prvInitialiseNewTask+0x150>)
 800468c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	69b8      	ldr	r0, [r7, #24]
 8004694:	f001 fbfa 	bl	8005e8c <pxPortInitialiseStack>
 8004698:	4602      	mov	r2, r0
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800469e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046aa:	bf00      	nop
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	20004ad4 	.word	0x20004ad4
 80046b8:	20004b3c 	.word	0x20004b3c
 80046bc:	20004ba4 	.word	0x20004ba4

080046c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046c8:	f001 fcf0 	bl	80060ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e4:	4b27      	ldr	r3, [pc, #156]	@ (8004784 <prvAddNewTaskToReadyList+0xc4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d110      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046ec:	f000 fc6e 	bl	8004fcc <prvInitialiseTaskLists>
 80046f0:	e00d      	b.n	800470e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046f2:	4b26      	ldr	r3, [pc, #152]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d109      	bne.n	800470e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046fa:	4b23      	ldr	r3, [pc, #140]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004704:	429a      	cmp	r2, r3
 8004706:	d802      	bhi.n	800470e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004708:	4a1f      	ldr	r2, [pc, #124]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800470e:	4b20      	ldr	r3, [pc, #128]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3301      	adds	r3, #1
 8004714:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 8004716:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004718:	4b1d      	ldr	r3, [pc, #116]	@ (8004790 <prvAddNewTaskToReadyList+0xd0>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004724:	4b1b      	ldr	r3, [pc, #108]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d903      	bls.n	8004734 <prvAddNewTaskToReadyList+0x74>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <prvAddNewTaskToReadyList+0xd4>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	4613      	mov	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <prvAddNewTaskToReadyList+0xd8>)
 8004742:	441a      	add	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	3304      	adds	r3, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4610      	mov	r0, r2
 800474c:	f7fe fc8d 	bl	800306a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004750:	f001 fce2 	bl	8006118 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004754:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <prvAddNewTaskToReadyList+0xcc>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00e      	beq.n	800477a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800475c:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvAddNewTaskToReadyList+0xc8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	429a      	cmp	r2, r3
 8004768:	d207      	bcs.n	800477a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800476a:	4b0c      	ldr	r3, [pc, #48]	@ (800479c <prvAddNewTaskToReadyList+0xdc>)
 800476c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004770:	601a      	str	r2, [r3, #0]
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800477a:	bf00      	nop
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	20000d5c 	.word	0x20000d5c
 8004788:	20000888 	.word	0x20000888
 800478c:	20000d68 	.word	0x20000d68
 8004790:	20000d78 	.word	0x20000d78
 8004794:	20000d64 	.word	0x20000d64
 8004798:	2000088c 	.word	0x2000088c
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d01a      	beq.n	80047e8 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047b2:	4b15      	ldr	r3, [pc, #84]	@ (8004808 <vTaskDelay+0x68>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00d      	beq.n	80047d6 <vTaskDelay+0x36>
	__asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047be:	b672      	cpsid	i
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	b662      	cpsie	i
 80047ce:	60bb      	str	r3, [r7, #8]
}
 80047d0:	bf00      	nop
 80047d2:	bf00      	nop
 80047d4:	e7fd      	b.n	80047d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80047d6:	f000 f88f 	bl	80048f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047da:	2100      	movs	r1, #0
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 ff99 	bl	8005714 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047e2:	f000 f897 	bl	8004914 <xTaskResumeAll>
 80047e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d107      	bne.n	80047fe <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80047ee:	4b07      	ldr	r3, [pc, #28]	@ (800480c <vTaskDelay+0x6c>)
 80047f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	20000d84 	.word	0x20000d84
 800480c:	e000ed04 	.word	0xe000ed04

08004810 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b08a      	sub	sp, #40	@ 0x28
 8004814:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800481e:	463a      	mov	r2, r7
 8004820:	1d39      	adds	r1, r7, #4
 8004822:	f107 0308 	add.w	r3, r7, #8
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fbbe 	bl	8002fa8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	9202      	str	r2, [sp, #8]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2300      	movs	r3, #0
 800483c:	460a      	mov	r2, r1
 800483e:	4926      	ldr	r1, [pc, #152]	@ (80048d8 <vTaskStartScheduler+0xc8>)
 8004840:	4826      	ldr	r0, [pc, #152]	@ (80048dc <vTaskStartScheduler+0xcc>)
 8004842:	f7ff fde8 	bl	8004416 <xTaskCreateStatic>
 8004846:	4603      	mov	r3, r0
 8004848:	4a25      	ldr	r2, [pc, #148]	@ (80048e0 <vTaskStartScheduler+0xd0>)
 800484a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800484c:	4b24      	ldr	r3, [pc, #144]	@ (80048e0 <vTaskStartScheduler+0xd0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004854:	2301      	movs	r3, #1
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e001      	b.n	800485e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d102      	bne.n	800486a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004864:	f000 ffaa 	bl	80057bc <xTimerCreateTimerTask>
 8004868:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d11d      	bne.n	80048ac <vTaskStartScheduler+0x9c>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	b672      	cpsid	i
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	b662      	cpsie	i
 8004884:	613b      	str	r3, [r7, #16]
}
 8004886:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004888:	4b16      	ldr	r3, [pc, #88]	@ (80048e4 <vTaskStartScheduler+0xd4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3354      	adds	r3, #84	@ 0x54
 800488e:	4a16      	ldr	r2, [pc, #88]	@ (80048e8 <vTaskStartScheduler+0xd8>)
 8004890:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004892:	4b16      	ldr	r3, [pc, #88]	@ (80048ec <vTaskStartScheduler+0xdc>)
 8004894:	f04f 32ff 	mov.w	r2, #4294967295
 8004898:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800489a:	4b15      	ldr	r3, [pc, #84]	@ (80048f0 <vTaskStartScheduler+0xe0>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80048a0:	4b14      	ldr	r3, [pc, #80]	@ (80048f4 <vTaskStartScheduler+0xe4>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048a6:	f001 fb83 	bl	8005fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048aa:	e011      	b.n	80048d0 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d10d      	bne.n	80048d0 <vTaskStartScheduler+0xc0>
	__asm volatile
 80048b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b8:	b672      	cpsid	i
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	b662      	cpsie	i
 80048c8:	60fb      	str	r3, [r7, #12]
}
 80048ca:	bf00      	nop
 80048cc:	bf00      	nop
 80048ce:	e7fd      	b.n	80048cc <vTaskStartScheduler+0xbc>
}
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	080068f0 	.word	0x080068f0
 80048dc:	08004f9d 	.word	0x08004f9d
 80048e0:	20000d80 	.word	0x20000d80
 80048e4:	20000888 	.word	0x20000888
 80048e8:	20000010 	.word	0x20000010
 80048ec:	20000d7c 	.word	0x20000d7c
 80048f0:	20000d68 	.word	0x20000d68
 80048f4:	20000d60 	.word	0x20000d60

080048f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048fc:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <vTaskSuspendAll+0x18>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a03      	ldr	r2, [pc, #12]	@ (8004910 <vTaskSuspendAll+0x18>)
 8004904:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004906:	bf00      	nop
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	20000d84 	.word	0x20000d84

08004914 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800491e:	2300      	movs	r3, #0
 8004920:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004922:	4b43      	ldr	r3, [pc, #268]	@ (8004a30 <xTaskResumeAll+0x11c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10d      	bne.n	8004946 <xTaskResumeAll+0x32>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	b672      	cpsid	i
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	b662      	cpsie	i
 800493e:	603b      	str	r3, [r7, #0]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004946:	f001 fbb1 	bl	80060ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800494a:	4b39      	ldr	r3, [pc, #228]	@ (8004a30 <xTaskResumeAll+0x11c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3b01      	subs	r3, #1
 8004950:	4a37      	ldr	r2, [pc, #220]	@ (8004a30 <xTaskResumeAll+0x11c>)
 8004952:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004954:	4b36      	ldr	r3, [pc, #216]	@ (8004a30 <xTaskResumeAll+0x11c>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d162      	bne.n	8004a22 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800495c:	4b35      	ldr	r3, [pc, #212]	@ (8004a34 <xTaskResumeAll+0x120>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d05e      	beq.n	8004a22 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004964:	e02f      	b.n	80049c6 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004966:	4b34      	ldr	r3, [pc, #208]	@ (8004a38 <xTaskResumeAll+0x124>)
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3318      	adds	r3, #24
 8004972:	4618      	mov	r0, r3
 8004974:	f7fe fbd6 	bl	8003124 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3304      	adds	r3, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fbd1 	bl	8003124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004986:	4b2d      	ldr	r3, [pc, #180]	@ (8004a3c <xTaskResumeAll+0x128>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	429a      	cmp	r2, r3
 800498c:	d903      	bls.n	8004996 <xTaskResumeAll+0x82>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	4a2a      	ldr	r2, [pc, #168]	@ (8004a3c <xTaskResumeAll+0x128>)
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4a27      	ldr	r2, [pc, #156]	@ (8004a40 <xTaskResumeAll+0x12c>)
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3304      	adds	r3, #4
 80049aa:	4619      	mov	r1, r3
 80049ac:	4610      	mov	r0, r2
 80049ae:	f7fe fb5c 	bl	800306a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049b6:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <xTaskResumeAll+0x130>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80049c0:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <xTaskResumeAll+0x134>)
 80049c2:	2201      	movs	r2, #1
 80049c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c6:	4b1c      	ldr	r3, [pc, #112]	@ (8004a38 <xTaskResumeAll+0x124>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cb      	bne.n	8004966 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049d4:	f000 fba0 	bl	8005118 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80049d8:	4b1c      	ldr	r3, [pc, #112]	@ (8004a4c <xTaskResumeAll+0x138>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d010      	beq.n	8004a06 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049e4:	f000 f846 	bl	8004a74 <xTaskIncrementTick>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80049ee:	4b16      	ldr	r3, [pc, #88]	@ (8004a48 <xTaskResumeAll+0x134>)
 80049f0:	2201      	movs	r2, #1
 80049f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f1      	bne.n	80049e4 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8004a00:	4b12      	ldr	r3, [pc, #72]	@ (8004a4c <xTaskResumeAll+0x138>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a06:	4b10      	ldr	r3, [pc, #64]	@ (8004a48 <xTaskResumeAll+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d009      	beq.n	8004a22 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a12:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <xTaskResumeAll+0x13c>)
 8004a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a22:	f001 fb79 	bl	8006118 <vPortExitCritical>

	return xAlreadyYielded;
 8004a26:	68bb      	ldr	r3, [r7, #8]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000d84 	.word	0x20000d84
 8004a34:	20000d5c 	.word	0x20000d5c
 8004a38:	20000d1c 	.word	0x20000d1c
 8004a3c:	20000d64 	.word	0x20000d64
 8004a40:	2000088c 	.word	0x2000088c
 8004a44:	20000888 	.word	0x20000888
 8004a48:	20000d70 	.word	0x20000d70
 8004a4c:	20000d6c 	.word	0x20000d6c
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a5a:	4b05      	ldr	r3, [pc, #20]	@ (8004a70 <xTaskGetTickCount+0x1c>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a60:	687b      	ldr	r3, [r7, #4]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	20000d60 	.word	0x20000d60

08004a74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a7e:	4b50      	ldr	r3, [pc, #320]	@ (8004bc0 <xTaskIncrementTick+0x14c>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f040 808c 	bne.w	8004ba0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a88:	4b4e      	ldr	r3, [pc, #312]	@ (8004bc4 <xTaskIncrementTick+0x150>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a90:	4a4c      	ldr	r2, [pc, #304]	@ (8004bc4 <xTaskIncrementTick+0x150>)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d123      	bne.n	8004ae4 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a9c:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc8 <xTaskIncrementTick+0x154>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d00d      	beq.n	8004ac2 <xTaskIncrementTick+0x4e>
	__asm volatile
 8004aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aaa:	b672      	cpsid	i
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	b662      	cpsie	i
 8004aba:	603b      	str	r3, [r7, #0]
}
 8004abc:	bf00      	nop
 8004abe:	bf00      	nop
 8004ac0:	e7fd      	b.n	8004abe <xTaskIncrementTick+0x4a>
 8004ac2:	4b41      	ldr	r3, [pc, #260]	@ (8004bc8 <xTaskIncrementTick+0x154>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	4b40      	ldr	r3, [pc, #256]	@ (8004bcc <xTaskIncrementTick+0x158>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3e      	ldr	r2, [pc, #248]	@ (8004bc8 <xTaskIncrementTick+0x154>)
 8004ace:	6013      	str	r3, [r2, #0]
 8004ad0:	4a3e      	ldr	r2, [pc, #248]	@ (8004bcc <xTaskIncrementTick+0x158>)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	3301      	adds	r3, #1
 8004adc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd0 <xTaskIncrementTick+0x15c>)
 8004ade:	6013      	str	r3, [r2, #0]
 8004ae0:	f000 fb1a 	bl	8005118 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd4 <xTaskIncrementTick+0x160>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d349      	bcc.n	8004b82 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aee:	4b36      	ldr	r3, [pc, #216]	@ (8004bc8 <xTaskIncrementTick+0x154>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af8:	4b36      	ldr	r3, [pc, #216]	@ (8004bd4 <xTaskIncrementTick+0x160>)
 8004afa:	f04f 32ff 	mov.w	r2, #4294967295
 8004afe:	601a      	str	r2, [r3, #0]
					break;
 8004b00:	e03f      	b.n	8004b82 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b02:	4b31      	ldr	r3, [pc, #196]	@ (8004bc8 <xTaskIncrementTick+0x154>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d203      	bcs.n	8004b22 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b1a:	4a2e      	ldr	r2, [pc, #184]	@ (8004bd4 <xTaskIncrementTick+0x160>)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b20:	e02f      	b.n	8004b82 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	3304      	adds	r3, #4
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fafc 	bl	8003124 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d004      	beq.n	8004b3e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3318      	adds	r3, #24
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe faf3 	bl	8003124 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b42:	4b25      	ldr	r3, [pc, #148]	@ (8004bd8 <xTaskIncrementTick+0x164>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d903      	bls.n	8004b52 <xTaskIncrementTick+0xde>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	4a22      	ldr	r2, [pc, #136]	@ (8004bd8 <xTaskIncrementTick+0x164>)
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b56:	4613      	mov	r3, r2
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	4413      	add	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8004bdc <xTaskIncrementTick+0x168>)
 8004b60:	441a      	add	r2, r3
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f7fe fa7e 	bl	800306a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b72:	4b1b      	ldr	r3, [pc, #108]	@ (8004be0 <xTaskIncrementTick+0x16c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d3b8      	bcc.n	8004aee <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b80:	e7b5      	b.n	8004aee <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b82:	4b17      	ldr	r3, [pc, #92]	@ (8004be0 <xTaskIncrementTick+0x16c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b88:	4914      	ldr	r1, [pc, #80]	@ (8004bdc <xTaskIncrementTick+0x168>)
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	440b      	add	r3, r1
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d907      	bls.n	8004baa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e004      	b.n	8004baa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ba0:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <xTaskIncrementTick+0x170>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8004be4 <xTaskIncrementTick+0x170>)
 8004ba8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004baa:	4b0f      	ldr	r3, [pc, #60]	@ (8004be8 <xTaskIncrementTick+0x174>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004bb6:	697b      	ldr	r3, [r7, #20]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20000d84 	.word	0x20000d84
 8004bc4:	20000d60 	.word	0x20000d60
 8004bc8:	20000d14 	.word	0x20000d14
 8004bcc:	20000d18 	.word	0x20000d18
 8004bd0:	20000d74 	.word	0x20000d74
 8004bd4:	20000d7c 	.word	0x20000d7c
 8004bd8:	20000d64 	.word	0x20000d64
 8004bdc:	2000088c 	.word	0x2000088c
 8004be0:	20000888 	.word	0x20000888
 8004be4:	20000d6c 	.word	0x20000d6c
 8004be8:	20000d70 	.word	0x20000d70

08004bec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca4 <vTaskSwitchContext+0xb8>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <vTaskSwitchContext+0xbc>)
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c00:	e049      	b.n	8004c96 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8004c02:	4b29      	ldr	r3, [pc, #164]	@ (8004ca8 <vTaskSwitchContext+0xbc>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c08:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <vTaskSwitchContext+0xc0>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	60fb      	str	r3, [r7, #12]
 8004c0e:	e013      	b.n	8004c38 <vTaskSwitchContext+0x4c>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <vTaskSwitchContext+0x46>
	__asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c1a:	b672      	cpsid	i
 8004c1c:	f383 8811 	msr	BASEPRI, r3
 8004c20:	f3bf 8f6f 	isb	sy
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	b662      	cpsie	i
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
 8004c2e:	bf00      	nop
 8004c30:	e7fd      	b.n	8004c2e <vTaskSwitchContext+0x42>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	3b01      	subs	r3, #1
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	491d      	ldr	r1, [pc, #116]	@ (8004cb0 <vTaskSwitchContext+0xc4>)
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0e1      	beq.n	8004c10 <vTaskSwitchContext+0x24>
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	4613      	mov	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4a16      	ldr	r2, [pc, #88]	@ (8004cb0 <vTaskSwitchContext+0xc4>)
 8004c58:	4413      	add	r3, r2
 8004c5a:	60bb      	str	r3, [r7, #8]
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	685a      	ldr	r2, [r3, #4]
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	605a      	str	r2, [r3, #4]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d104      	bne.n	8004c7c <vTaskSwitchContext+0x90>
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	605a      	str	r2, [r3, #4]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb4 <vTaskSwitchContext+0xc8>)
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	4a09      	ldr	r2, [pc, #36]	@ (8004cac <vTaskSwitchContext+0xc0>)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c8c:	4b09      	ldr	r3, [pc, #36]	@ (8004cb4 <vTaskSwitchContext+0xc8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3354      	adds	r3, #84	@ 0x54
 8004c92:	4a09      	ldr	r2, [pc, #36]	@ (8004cb8 <vTaskSwitchContext+0xcc>)
 8004c94:	6013      	str	r3, [r2, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000d84 	.word	0x20000d84
 8004ca8:	20000d70 	.word	0x20000d70
 8004cac:	20000d64 	.word	0x20000d64
 8004cb0:	2000088c 	.word	0x2000088c
 8004cb4:	20000888 	.word	0x20000888
 8004cb8:	20000010 	.word	0x20000010

08004cbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d10d      	bne.n	8004ce8 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd0:	b672      	cpsid	i
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	b662      	cpsie	i
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ce8:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <vTaskPlaceOnEventList+0x4c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3318      	adds	r3, #24
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fe f9de 	bl	80030b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f000 fd0b 	bl	8005714 <prvAddCurrentTaskToDelayedList>
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000888 	.word	0x20000888

08004d0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10d      	bne.n	8004d3a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	b672      	cpsid	i
 8004d24:	f383 8811 	msr	BASEPRI, r3
 8004d28:	f3bf 8f6f 	isb	sy
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	b662      	cpsie	i
 8004d32:	617b      	str	r3, [r7, #20]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d64 <vTaskPlaceOnEventListRestricted+0x58>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3318      	adds	r3, #24
 8004d40:	4619      	mov	r1, r3
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7fe f991 	bl	800306a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	68b8      	ldr	r0, [r7, #8]
 8004d58:	f000 fcdc 	bl	8005714 <prvAddCurrentTaskToDelayedList>
	}
 8004d5c:	bf00      	nop
 8004d5e:	3718      	adds	r7, #24
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000888 	.word	0x20000888

08004d68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10d      	bne.n	8004d9a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	b672      	cpsid	i
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	b662      	cpsie	i
 8004d92:	60fb      	str	r3, [r7, #12]
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop
 8004d98:	e7fd      	b.n	8004d96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	3318      	adds	r3, #24
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe f9c0 	bl	8003124 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004da4:	4b1d      	ldr	r3, [pc, #116]	@ (8004e1c <xTaskRemoveFromEventList+0xb4>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d11d      	bne.n	8004de8 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fe f9b7 	bl	8003124 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <xTaskRemoveFromEventList+0xb8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d903      	bls.n	8004dca <xTaskRemoveFromEventList+0x62>
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc6:	4a16      	ldr	r2, [pc, #88]	@ (8004e20 <xTaskRemoveFromEventList+0xb8>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a13      	ldr	r2, [pc, #76]	@ (8004e24 <xTaskRemoveFromEventList+0xbc>)
 8004dd8:	441a      	add	r2, r3
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7fe f942 	bl	800306a <vListInsertEnd>
 8004de6:	e005      	b.n	8004df4 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	3318      	adds	r3, #24
 8004dec:	4619      	mov	r1, r3
 8004dee:	480e      	ldr	r0, [pc, #56]	@ (8004e28 <xTaskRemoveFromEventList+0xc0>)
 8004df0:	f7fe f93b 	bl	800306a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <xTaskRemoveFromEventList+0xc4>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d905      	bls.n	8004e0e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004e06:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <xTaskRemoveFromEventList+0xc8>)
 8004e08:	2201      	movs	r2, #1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e001      	b.n	8004e12 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e12:	697b      	ldr	r3, [r7, #20]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	20000d84 	.word	0x20000d84
 8004e20:	20000d64 	.word	0x20000d64
 8004e24:	2000088c 	.word	0x2000088c
 8004e28:	20000d1c 	.word	0x20000d1c
 8004e2c:	20000888 	.word	0x20000888
 8004e30:	20000d70 	.word	0x20000d70

08004e34 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10d      	bne.n	8004e5e <vTaskSetTimeOutState+0x2a>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	b672      	cpsid	i
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	b662      	cpsie	i
 8004e56:	60fb      	str	r3, [r7, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 8004e5e:	f001 f925 	bl	80060ac <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e62:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <vTaskSetTimeOutState+0x4c>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8004e6a:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <vTaskSetTimeOutState+0x50>)
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8004e72:	f001 f951 	bl	8006118 <vPortExitCritical>
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000d74 	.word	0x20000d74
 8004e84:	20000d60 	.word	0x20000d60

08004e88 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e90:	4b06      	ldr	r3, [pc, #24]	@ (8004eac <vTaskInternalSetTimeOutState+0x24>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e98:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <vTaskInternalSetTimeOutState+0x28>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	605a      	str	r2, [r3, #4]
}
 8004ea0:	bf00      	nop
 8004ea2:	370c      	adds	r7, #12
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	20000d74 	.word	0x20000d74
 8004eb0:	20000d60 	.word	0x20000d60

08004eb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d10d      	bne.n	8004ee0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec8:	b672      	cpsid	i
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	b662      	cpsie	i
 8004ed8:	613b      	str	r3, [r7, #16]
}
 8004eda:	bf00      	nop
 8004edc:	bf00      	nop
 8004ede:	e7fd      	b.n	8004edc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10d      	bne.n	8004f02 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eea:	b672      	cpsid	i
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	b662      	cpsie	i
 8004efa:	60fb      	str	r3, [r7, #12]
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	e7fd      	b.n	8004efe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8004f02:	f001 f8d3 	bl	80060ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f06:	4b1d      	ldr	r3, [pc, #116]	@ (8004f7c <xTaskCheckForTimeOut+0xc8>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	69ba      	ldr	r2, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1e:	d102      	bne.n	8004f26 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f20:	2300      	movs	r3, #0
 8004f22:	61fb      	str	r3, [r7, #28]
 8004f24:	e023      	b.n	8004f6e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <xTaskCheckForTimeOut+0xcc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d007      	beq.n	8004f42 <xTaskCheckForTimeOut+0x8e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d302      	bcc.n	8004f42 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e015      	b.n	8004f6e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d20b      	bcs.n	8004f64 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff ff95 	bl	8004e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61fb      	str	r3, [r7, #28]
 8004f62:	e004      	b.n	8004f6e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2200      	movs	r2, #0
 8004f68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f6e:	f001 f8d3 	bl	8006118 <vPortExitCritical>

	return xReturn;
 8004f72:	69fb      	ldr	r3, [r7, #28]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000d60 	.word	0x20000d60
 8004f80:	20000d74 	.word	0x20000d74

08004f84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f88:	4b03      	ldr	r3, [pc, #12]	@ (8004f98 <vTaskMissedYield+0x14>)
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	20000d70 	.word	0x20000d70

08004f9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004fa4:	f000 f852 	bl	800504c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004fa8:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <prvIdleTask+0x28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d9f9      	bls.n	8004fa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <prvIdleTask+0x2c>)
 8004fb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004fc0:	e7f0      	b.n	8004fa4 <prvIdleTask+0x8>
 8004fc2:	bf00      	nop
 8004fc4:	2000088c 	.word	0x2000088c
 8004fc8:	e000ed04 	.word	0xe000ed04

08004fcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e00c      	b.n	8004ff2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4413      	add	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4a12      	ldr	r2, [pc, #72]	@ (800502c <prvInitialiseTaskLists+0x60>)
 8004fe4:	4413      	add	r3, r2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe f812 	bl	8003010 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b37      	cmp	r3, #55	@ 0x37
 8004ff6:	d9ef      	bls.n	8004fd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ff8:	480d      	ldr	r0, [pc, #52]	@ (8005030 <prvInitialiseTaskLists+0x64>)
 8004ffa:	f7fe f809 	bl	8003010 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004ffe:	480d      	ldr	r0, [pc, #52]	@ (8005034 <prvInitialiseTaskLists+0x68>)
 8005000:	f7fe f806 	bl	8003010 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005004:	480c      	ldr	r0, [pc, #48]	@ (8005038 <prvInitialiseTaskLists+0x6c>)
 8005006:	f7fe f803 	bl	8003010 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800500a:	480c      	ldr	r0, [pc, #48]	@ (800503c <prvInitialiseTaskLists+0x70>)
 800500c:	f7fe f800 	bl	8003010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005010:	480b      	ldr	r0, [pc, #44]	@ (8005040 <prvInitialiseTaskLists+0x74>)
 8005012:	f7fd fffd 	bl	8003010 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005016:	4b0b      	ldr	r3, [pc, #44]	@ (8005044 <prvInitialiseTaskLists+0x78>)
 8005018:	4a05      	ldr	r2, [pc, #20]	@ (8005030 <prvInitialiseTaskLists+0x64>)
 800501a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800501c:	4b0a      	ldr	r3, [pc, #40]	@ (8005048 <prvInitialiseTaskLists+0x7c>)
 800501e:	4a05      	ldr	r2, [pc, #20]	@ (8005034 <prvInitialiseTaskLists+0x68>)
 8005020:	601a      	str	r2, [r3, #0]
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	2000088c 	.word	0x2000088c
 8005030:	20000cec 	.word	0x20000cec
 8005034:	20000d00 	.word	0x20000d00
 8005038:	20000d1c 	.word	0x20000d1c
 800503c:	20000d30 	.word	0x20000d30
 8005040:	20000d48 	.word	0x20000d48
 8005044:	20000d14 	.word	0x20000d14
 8005048:	20000d18 	.word	0x20000d18

0800504c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005052:	e019      	b.n	8005088 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005054:	f001 f82a 	bl	80060ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005058:	4b10      	ldr	r3, [pc, #64]	@ (800509c <prvCheckTasksWaitingTermination+0x50>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4618      	mov	r0, r3
 8005066:	f7fe f85d 	bl	8003124 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800506a:	4b0d      	ldr	r3, [pc, #52]	@ (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a0b      	ldr	r2, [pc, #44]	@ (80050a0 <prvCheckTasksWaitingTermination+0x54>)
 8005072:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005074:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	4a0a      	ldr	r2, [pc, #40]	@ (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800507c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800507e:	f001 f84b 	bl	8006118 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f810 	bl	80050a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <prvCheckTasksWaitingTermination+0x58>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e1      	bne.n	8005054 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005090:	bf00      	nop
 8005092:	bf00      	nop
 8005094:	3708      	adds	r7, #8
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	20000d30 	.word	0x20000d30
 80050a0:	20000d5c 	.word	0x20000d5c
 80050a4:	20000d44 	.word	0x20000d44

080050a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3354      	adds	r3, #84	@ 0x54
 80050b4:	4618      	mov	r0, r3
 80050b6:	f001 fb19 	bl	80066ec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d108      	bne.n	80050d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	4618      	mov	r0, r3
 80050ca:	f001 f9eb 	bl	80064a4 <vPortFree>
				vPortFree( pxTCB );
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f001 f9e8 	bl	80064a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80050d4:	e01b      	b.n	800510e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d103      	bne.n	80050e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f001 f9df 	bl	80064a4 <vPortFree>
	}
 80050e6:	e012      	b.n	800510e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d00d      	beq.n	800510e <prvDeleteTCB+0x66>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	b672      	cpsid	i
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	b662      	cpsie	i
 8005106:	60fb      	str	r3, [r7, #12]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <prvDeleteTCB+0x62>
	}
 800510e:	bf00      	nop
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800511e:	4b0c      	ldr	r3, [pc, #48]	@ (8005150 <prvResetNextTaskUnblockTime+0x38>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d104      	bne.n	8005132 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <prvResetNextTaskUnblockTime+0x3c>)
 800512a:	f04f 32ff 	mov.w	r2, #4294967295
 800512e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005130:	e008      	b.n	8005144 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005132:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <prvResetNextTaskUnblockTime+0x38>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a04      	ldr	r2, [pc, #16]	@ (8005154 <prvResetNextTaskUnblockTime+0x3c>)
 8005142:	6013      	str	r3, [r2, #0]
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr
 8005150:	20000d14 	.word	0x20000d14
 8005154:	20000d7c 	.word	0x20000d7c

08005158 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800515e:	4b05      	ldr	r3, [pc, #20]	@ (8005174 <xTaskGetCurrentTaskHandle+0x1c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005164:	687b      	ldr	r3, [r7, #4]
	}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000888 	.word	0x20000888

08005178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800517e:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <xTaskGetSchedulerState+0x34>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d102      	bne.n	800518c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005186:	2301      	movs	r3, #1
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e008      	b.n	800519e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800518c:	4b08      	ldr	r3, [pc, #32]	@ (80051b0 <xTaskGetSchedulerState+0x38>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d102      	bne.n	800519a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005194:	2302      	movs	r3, #2
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	e001      	b.n	800519e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800519e:	687b      	ldr	r3, [r7, #4]
	}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr
 80051ac:	20000d68 	.word	0x20000d68
 80051b0:	20000d84 	.word	0x20000d84

080051b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d05c      	beq.n	8005284 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80051ca:	4b31      	ldr	r3, [pc, #196]	@ (8005290 <xTaskPriorityDisinherit+0xdc>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d00d      	beq.n	80051f0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	b672      	cpsid	i
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	b662      	cpsie	i
 80051e8:	60fb      	str	r3, [r7, #12]
}
 80051ea:	bf00      	nop
 80051ec:	bf00      	nop
 80051ee:	e7fd      	b.n	80051ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10d      	bne.n	8005214 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	b672      	cpsid	i
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	b662      	cpsie	i
 800520c:	60bb      	str	r3, [r7, #8]
}
 800520e:	bf00      	nop
 8005210:	bf00      	nop
 8005212:	e7fd      	b.n	8005210 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005218:	1e5a      	subs	r2, r3, #1
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005226:	429a      	cmp	r2, r3
 8005228:	d02c      	beq.n	8005284 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800522e:	2b00      	cmp	r3, #0
 8005230:	d128      	bne.n	8005284 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	3304      	adds	r3, #4
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd ff74 	bl	8003124 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005248:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005254:	4b0f      	ldr	r3, [pc, #60]	@ (8005294 <xTaskPriorityDisinherit+0xe0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d903      	bls.n	8005264 <xTaskPriorityDisinherit+0xb0>
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <xTaskPriorityDisinherit+0xe0>)
 8005262:	6013      	str	r3, [r2, #0]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005268:	4613      	mov	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4a09      	ldr	r2, [pc, #36]	@ (8005298 <xTaskPriorityDisinherit+0xe4>)
 8005272:	441a      	add	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	3304      	adds	r3, #4
 8005278:	4619      	mov	r1, r3
 800527a:	4610      	mov	r0, r2
 800527c:	f7fd fef5 	bl	800306a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005284:	697b      	ldr	r3, [r7, #20]
	}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000888 	.word	0x20000888
 8005294:	20000d64 	.word	0x20000d64
 8005298:	2000088c 	.word	0x2000088c

0800529c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80052aa:	f000 feff 	bl	80060ac <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80052ae:	4b29      	ldr	r3, [pc, #164]	@ (8005354 <xTaskNotifyWait+0xb8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d01c      	beq.n	80052f6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <xTaskNotifyWait+0xb8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	43d2      	mvns	r2, r2
 80052c8:	400a      	ands	r2, r1
 80052ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80052ce:	4b21      	ldr	r3, [pc, #132]	@ (8005354 <xTaskNotifyWait+0xb8>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052de:	2101      	movs	r1, #1
 80052e0:	6838      	ldr	r0, [r7, #0]
 80052e2:	f000 fa17 	bl	8005714 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80052e6:	4b1c      	ldr	r3, [pc, #112]	@ (8005358 <xTaskNotifyWait+0xbc>)
 80052e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	f3bf 8f4f 	dsb	sy
 80052f2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80052f6:	f000 ff0f 	bl	8006118 <vPortExitCritical>

		taskENTER_CRITICAL();
 80052fa:	f000 fed7 	bl	80060ac <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d005      	beq.n	8005310 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005304:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <xTaskNotifyWait+0xb8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005310:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <xTaskNotifyWait+0xb8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d002      	beq.n	8005324 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]
 8005322:	e00a      	b.n	800533a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005324:	4b0b      	ldr	r3, [pc, #44]	@ (8005354 <xTaskNotifyWait+0xb8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	43d2      	mvns	r2, r2
 8005330:	400a      	ands	r2, r1
 8005332:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800533a:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <xTaskNotifyWait+0xb8>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8005344:	f000 fee8 	bl	8006118 <vPortExitCritical>

		return xReturn;
 8005348:	697b      	ldr	r3, [r7, #20]
	}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20000888 	.word	0x20000888
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b08a      	sub	sp, #40	@ 0x28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	4613      	mov	r3, r2
 800536a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800536c:	2301      	movs	r3, #1
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10d      	bne.n	8005392 <xTaskGenericNotify+0x36>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	61bb      	str	r3, [r7, #24]
}
 800538c:	bf00      	nop
 800538e:	bf00      	nop
 8005390:	e7fd      	b.n	800538e <xTaskGenericNotify+0x32>
		pxTCB = xTaskToNotify;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005396:	f000 fe89 	bl	80060ac <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <xTaskGenericNotify+0x4e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80053b0:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d82e      	bhi.n	800541e <xTaskGenericNotify+0xc2>
 80053c0:	a201      	add	r2, pc, #4	@ (adr r2, 80053c8 <xTaskGenericNotify+0x6c>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	08005447 	.word	0x08005447
 80053cc:	080053dd 	.word	0x080053dd
 80053d0:	080053ef 	.word	0x080053ef
 80053d4:	080053ff 	.word	0x080053ff
 80053d8:	08005409 	.word	0x08005409
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80053ec:	e02e      	b.n	800544c <xTaskGenericNotify+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80053fc:	e026      	b.n	800544c <xTaskGenericNotify+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8005406:	e021      	b.n	800544c <xTaskGenericNotify+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005408:	7ffb      	ldrb	r3, [r7, #31]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d004      	beq.n	8005418 <xTaskGenericNotify+0xbc>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005416:	e019      	b.n	800544c <xTaskGenericNotify+0xf0>
						xReturn = pdFAIL;
 8005418:	2300      	movs	r3, #0
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800541c:	e016      	b.n	800544c <xTaskGenericNotify+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d00f      	beq.n	800544a <xTaskGenericNotify+0xee>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542e:	b672      	cpsid	i
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	b662      	cpsie	i
 800543e:	617b      	str	r3, [r7, #20]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <xTaskGenericNotify+0xe6>
					break;
 8005446:	bf00      	nop
 8005448:	e000      	b.n	800544c <xTaskGenericNotify+0xf0>

					break;
 800544a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800544c:	7ffb      	ldrb	r3, [r7, #31]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d13d      	bne.n	80054ce <xTaskGenericNotify+0x172>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005452:	6a3b      	ldr	r3, [r7, #32]
 8005454:	3304      	adds	r3, #4
 8005456:	4618      	mov	r0, r3
 8005458:	f7fd fe64 	bl	8003124 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005460:	4b1e      	ldr	r3, [pc, #120]	@ (80054dc <xTaskGenericNotify+0x180>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d903      	bls.n	8005470 <xTaskGenericNotify+0x114>
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800546c:	4a1b      	ldr	r2, [pc, #108]	@ (80054dc <xTaskGenericNotify+0x180>)
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005474:	4613      	mov	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	4413      	add	r3, r2
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	4a18      	ldr	r2, [pc, #96]	@ (80054e0 <xTaskGenericNotify+0x184>)
 800547e:	441a      	add	r2, r3
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f7fd fdef 	bl	800306a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800548c:	6a3b      	ldr	r3, [r7, #32]
 800548e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00d      	beq.n	80054b0 <xTaskGenericNotify+0x154>
	__asm volatile
 8005494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005498:	b672      	cpsid	i
 800549a:	f383 8811 	msr	BASEPRI, r3
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f3bf 8f4f 	dsb	sy
 80054a6:	b662      	cpsie	i
 80054a8:	613b      	str	r3, [r7, #16]
}
 80054aa:	bf00      	nop
 80054ac:	bf00      	nop
 80054ae:	e7fd      	b.n	80054ac <xTaskGenericNotify+0x150>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <xTaskGenericNotify+0x188>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d907      	bls.n	80054ce <xTaskGenericNotify+0x172>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <xTaskGenericNotify+0x18c>)
 80054c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80054ce:	f000 fe23 	bl	8006118 <vPortExitCritical>

		return xReturn;
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3728      	adds	r7, #40	@ 0x28
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	20000d64 	.word	0x20000d64
 80054e0:	2000088c 	.word	0x2000088c
 80054e4:	20000888 	.word	0x20000888
 80054e8:	e000ed04 	.word	0xe000ed04

080054ec <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08e      	sub	sp, #56	@ 0x38
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80054fc:	2301      	movs	r3, #1
 80054fe:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <xTaskGenericNotifyFromISR+0x36>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	b672      	cpsid	i
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	b662      	cpsie	i
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800551c:	bf00      	nop
 800551e:	bf00      	nop
 8005520:	e7fd      	b.n	800551e <xTaskGenericNotifyFromISR+0x32>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005522:	f000 feab 	bl	800627c <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800552a:	f3ef 8211 	mrs	r2, BASEPRI
 800552e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005532:	b672      	cpsid	i
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	b662      	cpsie	i
 8005542:	623a      	str	r2, [r7, #32]
 8005544:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005546:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005548:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d004      	beq.n	800555a <xTaskGenericNotifyFromISR+0x6e>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005552:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8005560:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	2202      	movs	r2, #2
 8005568:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 800556c:	79fb      	ldrb	r3, [r7, #7]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d82e      	bhi.n	80055d0 <xTaskGenericNotifyFromISR+0xe4>
 8005572:	a201      	add	r2, pc, #4	@ (adr r2, 8005578 <xTaskGenericNotifyFromISR+0x8c>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055f9 	.word	0x080055f9
 800557c:	0800558d 	.word	0x0800558d
 8005580:	0800559f 	.word	0x0800559f
 8005584:	080055af 	.word	0x080055af
 8005588:	080055b9 	.word	0x080055b9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800558c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	431a      	orrs	r2, r3
 8005596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005598:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 800559c:	e02f      	b.n	80055fe <xTaskGenericNotifyFromISR+0x112>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800559e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80055ac:	e027      	b.n	80055fe <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80055ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 80055b6:	e022      	b.n	80055fe <xTaskGenericNotifyFromISR+0x112>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80055b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d004      	beq.n	80055ca <xTaskGenericNotifyFromISR+0xde>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c2:	68ba      	ldr	r2, [r7, #8]
 80055c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80055c8:	e019      	b.n	80055fe <xTaskGenericNotifyFromISR+0x112>
						xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80055ce:	e016      	b.n	80055fe <xTaskGenericNotifyFromISR+0x112>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80055d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80055d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055da:	d00f      	beq.n	80055fc <xTaskGenericNotifyFromISR+0x110>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	b672      	cpsid	i
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	b662      	cpsie	i
 80055f0:	61bb      	str	r3, [r7, #24]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <xTaskGenericNotifyFromISR+0x108>
					break;
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <xTaskGenericNotifyFromISR+0x112>
					break;
 80055fc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80055fe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005602:	2b01      	cmp	r3, #1
 8005604:	d149      	bne.n	800569a <xTaskGenericNotifyFromISR+0x1ae>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00d      	beq.n	800562a <xTaskGenericNotifyFromISR+0x13e>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	b672      	cpsid	i
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	b662      	cpsie	i
 8005622:	617b      	str	r3, [r7, #20]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <xTaskGenericNotifyFromISR+0x13a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800562a:	4b21      	ldr	r3, [pc, #132]	@ (80056b0 <xTaskGenericNotifyFromISR+0x1c4>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11d      	bne.n	800566e <xTaskGenericNotifyFromISR+0x182>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005634:	3304      	adds	r3, #4
 8005636:	4618      	mov	r0, r3
 8005638:	f7fd fd74 	bl	8003124 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800563c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005640:	4b1c      	ldr	r3, [pc, #112]	@ (80056b4 <xTaskGenericNotifyFromISR+0x1c8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	429a      	cmp	r2, r3
 8005646:	d903      	bls.n	8005650 <xTaskGenericNotifyFromISR+0x164>
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564c:	4a19      	ldr	r2, [pc, #100]	@ (80056b4 <xTaskGenericNotifyFromISR+0x1c8>)
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	4a16      	ldr	r2, [pc, #88]	@ (80056b8 <xTaskGenericNotifyFromISR+0x1cc>)
 800565e:	441a      	add	r2, r3
 8005660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005662:	3304      	adds	r3, #4
 8005664:	4619      	mov	r1, r3
 8005666:	4610      	mov	r0, r2
 8005668:	f7fd fcff 	bl	800306a <vListInsertEnd>
 800566c:	e005      	b.n	800567a <xTaskGenericNotifyFromISR+0x18e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800566e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005670:	3318      	adds	r3, #24
 8005672:	4619      	mov	r1, r3
 8005674:	4811      	ldr	r0, [pc, #68]	@ (80056bc <xTaskGenericNotifyFromISR+0x1d0>)
 8005676:	f7fd fcf8 	bl	800306a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567e:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <xTaskGenericNotifyFromISR+0x1d4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	429a      	cmp	r2, r3
 8005686:	d908      	bls.n	800569a <xTaskGenericNotifyFromISR+0x1ae>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <xTaskGenericNotifyFromISR+0x1a8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800568e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005694:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <xTaskGenericNotifyFromISR+0x1d8>)
 8005696:	2201      	movs	r2, #1
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800569c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	f383 8811 	msr	BASEPRI, r3
}
 80056a4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3738      	adds	r7, #56	@ 0x38
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	20000d84 	.word	0x20000d84
 80056b4:	20000d64 	.word	0x20000d64
 80056b8:	2000088c 	.word	0x2000088c
 80056bc:	20000d1c 	.word	0x20000d1c
 80056c0:	20000888 	.word	0x20000888
 80056c4:	20000d70 	.word	0x20000d70

080056c8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <xTaskNotifyStateClear+0x14>
 80056d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <xTaskNotifyStateClear+0x48>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	e000      	b.n	80056de <xTaskNotifyStateClear+0x16>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80056e0:	f000 fce4 	bl	80060ac <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80056ea:	b2db      	uxtb	r3, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d106      	bne.n	80056fe <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 80056f8:	2301      	movs	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	e001      	b.n	8005702 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8005702:	f000 fd09 	bl	8006118 <vPortExitCritical>

		return xReturn;
 8005706:	68fb      	ldr	r3, [r7, #12]
	}
 8005708:	4618      	mov	r0, r3
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000888 	.word	0x20000888

08005714 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800571e:	4b21      	ldr	r3, [pc, #132]	@ (80057a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005724:	4b20      	ldr	r3, [pc, #128]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	3304      	adds	r3, #4
 800572a:	4618      	mov	r0, r3
 800572c:	f7fd fcfa 	bl	8003124 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005736:	d10a      	bne.n	800574e <prvAddCurrentTaskToDelayedList+0x3a>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800573e:	4b1a      	ldr	r3, [pc, #104]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3304      	adds	r3, #4
 8005744:	4619      	mov	r1, r3
 8005746:	4819      	ldr	r0, [pc, #100]	@ (80057ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005748:	f7fd fc8f 	bl	800306a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800574c:	e026      	b.n	800579c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4413      	add	r3, r2
 8005754:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005756:	4b14      	ldr	r3, [pc, #80]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	429a      	cmp	r2, r3
 8005764:	d209      	bcs.n	800577a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005766:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	4b0f      	ldr	r3, [pc, #60]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3304      	adds	r3, #4
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fd fc9d 	bl	80030b2 <vListInsert>
}
 8005778:	e010      	b.n	800579c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800577a:	4b0e      	ldr	r3, [pc, #56]	@ (80057b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	4b0a      	ldr	r3, [pc, #40]	@ (80057a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3304      	adds	r3, #4
 8005784:	4619      	mov	r1, r3
 8005786:	4610      	mov	r0, r2
 8005788:	f7fd fc93 	bl	80030b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800578c:	4b0a      	ldr	r3, [pc, #40]	@ (80057b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	429a      	cmp	r2, r3
 8005794:	d202      	bcs.n	800579c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005796:	4a08      	ldr	r2, [pc, #32]	@ (80057b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6013      	str	r3, [r2, #0]
}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000d60 	.word	0x20000d60
 80057a8:	20000888 	.word	0x20000888
 80057ac:	20000d48 	.word	0x20000d48
 80057b0:	20000d18 	.word	0x20000d18
 80057b4:	20000d14 	.word	0x20000d14
 80057b8:	20000d7c 	.word	0x20000d7c

080057bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	@ 0x28
 80057c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80057c6:	f000 fb21 	bl	8005e0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80057ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005844 <xTimerCreateTimerTask+0x88>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d021      	beq.n	8005816 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80057da:	1d3a      	adds	r2, r7, #4
 80057dc:	f107 0108 	add.w	r1, r7, #8
 80057e0:	f107 030c 	add.w	r3, r7, #12
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fd fbf9 	bl	8002fdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	9202      	str	r2, [sp, #8]
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	2302      	movs	r3, #2
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	460a      	mov	r2, r1
 80057fc:	4912      	ldr	r1, [pc, #72]	@ (8005848 <xTimerCreateTimerTask+0x8c>)
 80057fe:	4813      	ldr	r0, [pc, #76]	@ (800584c <xTimerCreateTimerTask+0x90>)
 8005800:	f7fe fe09 	bl	8004416 <xTaskCreateStatic>
 8005804:	4603      	mov	r3, r0
 8005806:	4a12      	ldr	r2, [pc, #72]	@ (8005850 <xTimerCreateTimerTask+0x94>)
 8005808:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800580a:	4b11      	ldr	r3, [pc, #68]	@ (8005850 <xTimerCreateTimerTask+0x94>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005812:	2301      	movs	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800581c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005820:	b672      	cpsid	i
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	b662      	cpsie	i
 8005830:	613b      	str	r3, [r7, #16]
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8005838:	697b      	ldr	r3, [r7, #20]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3718      	adds	r7, #24
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	20000db8 	.word	0x20000db8
 8005848:	080068f8 	.word	0x080068f8
 800584c:	08005995 	.word	0x08005995
 8005850:	20000dbc 	.word	0x20000dbc

08005854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	@ 0x28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005862:	2300      	movs	r3, #0
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10d      	bne.n	8005888 <xTimerGenericCommand+0x34>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	b672      	cpsid	i
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	b662      	cpsie	i
 8005880:	623b      	str	r3, [r7, #32]
}
 8005882:	bf00      	nop
 8005884:	bf00      	nop
 8005886:	e7fd      	b.n	8005884 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005888:	4b19      	ldr	r3, [pc, #100]	@ (80058f0 <xTimerGenericCommand+0x9c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d02a      	beq.n	80058e6 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b05      	cmp	r3, #5
 80058a0:	dc18      	bgt.n	80058d4 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80058a2:	f7ff fc69 	bl	8005178 <xTaskGetSchedulerState>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d109      	bne.n	80058c0 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80058ac:	4b10      	ldr	r3, [pc, #64]	@ (80058f0 <xTimerGenericCommand+0x9c>)
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	f107 0110 	add.w	r1, r7, #16
 80058b4:	2300      	movs	r3, #0
 80058b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058b8:	f7fd fd74 	bl	80033a4 <xQueueGenericSend>
 80058bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80058be:	e012      	b.n	80058e6 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80058c0:	4b0b      	ldr	r3, [pc, #44]	@ (80058f0 <xTimerGenericCommand+0x9c>)
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	f107 0110 	add.w	r1, r7, #16
 80058c8:	2300      	movs	r3, #0
 80058ca:	2200      	movs	r2, #0
 80058cc:	f7fd fd6a 	bl	80033a4 <xQueueGenericSend>
 80058d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80058d2:	e008      	b.n	80058e6 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80058d4:	4b06      	ldr	r3, [pc, #24]	@ (80058f0 <xTimerGenericCommand+0x9c>)
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	f107 0110 	add.w	r1, r7, #16
 80058dc:	2300      	movs	r3, #0
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	f7fd fe6a 	bl	80035b8 <xQueueGenericSendFromISR>
 80058e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3728      	adds	r7, #40	@ 0x28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20000db8 	.word	0x20000db8

080058f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058fe:	4b24      	ldr	r3, [pc, #144]	@ (8005990 <prvProcessExpiredTimer+0x9c>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	3304      	adds	r3, #4
 800590c:	4618      	mov	r0, r3
 800590e:	f7fd fc09 	bl	8003124 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d025      	beq.n	800596c <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	18d1      	adds	r1, r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	6978      	ldr	r0, [r7, #20]
 800592e:	f000 f8d7 	bl	8005ae0 <prvInsertTimerInActiveList>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d022      	beq.n	800597e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	2100      	movs	r1, #0
 8005942:	6978      	ldr	r0, [r7, #20]
 8005944:	f7ff ff86 	bl	8005854 <xTimerGenericCommand>
 8005948:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d116      	bne.n	800597e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	b672      	cpsid	i
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	b662      	cpsie	i
 8005964:	60fb      	str	r3, [r7, #12]
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	e7fd      	b.n	8005968 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	b2da      	uxtb	r2, r3
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	6a1b      	ldr	r3, [r3, #32]
 8005982:	6978      	ldr	r0, [r7, #20]
 8005984:	4798      	blx	r3
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20000db0 	.word	0x20000db0

08005994 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	4618      	mov	r0, r3
 80059a2:	f000 f859 	bl	8005a58 <prvGetNextExpireTime>
 80059a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f805 	bl	80059bc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80059b2:	f000 f8d7 	bl	8005b64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80059b6:	bf00      	nop
 80059b8:	e7f0      	b.n	800599c <prvTimerTask+0x8>
	...

080059bc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80059c6:	f7fe ff97 	bl	80048f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80059ca:	f107 0308 	add.w	r3, r7, #8
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 f866 	bl	8005aa0 <prvSampleTimeNow>
 80059d4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d130      	bne.n	8005a3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10a      	bne.n	80059f8 <prvProcessTimerOrBlockTask+0x3c>
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d806      	bhi.n	80059f8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80059ea:	f7fe ff93 	bl	8004914 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80059ee:	68f9      	ldr	r1, [r7, #12]
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f7ff ff7f 	bl	80058f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80059f6:	e024      	b.n	8005a42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80059fe:	4b13      	ldr	r3, [pc, #76]	@ (8005a4c <prvProcessTimerOrBlockTask+0x90>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <prvProcessTimerOrBlockTask+0x50>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e000      	b.n	8005a0e <prvProcessTimerOrBlockTask+0x52>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005a10:	4b0f      	ldr	r3, [pc, #60]	@ (8005a50 <prvProcessTimerOrBlockTask+0x94>)
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	f7fe f891 	bl	8003b44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005a22:	f7fe ff77 	bl	8004914 <xTaskResumeAll>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005a2c:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <prvProcessTimerOrBlockTask+0x98>)
 8005a2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a32:	601a      	str	r2, [r3, #0]
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	f3bf 8f6f 	isb	sy
}
 8005a3c:	e001      	b.n	8005a42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005a3e:	f7fe ff69 	bl	8004914 <xTaskResumeAll>
}
 8005a42:	bf00      	nop
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000db4 	.word	0x20000db4
 8005a50:	20000db8 	.word	0x20000db8
 8005a54:	e000ed04 	.word	0xe000ed04

08005a58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005a60:	4b0e      	ldr	r3, [pc, #56]	@ (8005a9c <prvGetNextExpireTime+0x44>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <prvGetNextExpireTime+0x16>
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	e000      	b.n	8005a70 <prvGetNextExpireTime+0x18>
 8005a6e:	2200      	movs	r2, #0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d105      	bne.n	8005a88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <prvGetNextExpireTime+0x44>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
 8005a86:	e001      	b.n	8005a8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3714      	adds	r7, #20
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000db0 	.word	0x20000db0

08005aa0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005aa8:	f7fe ffd4 	bl	8004a54 <xTaskGetTickCount>
 8005aac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005aae:	4b0b      	ldr	r3, [pc, #44]	@ (8005adc <prvSampleTimeNow+0x3c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d205      	bcs.n	8005ac4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005ab8:	f000 f940 	bl	8005d3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005aca:	4a04      	ldr	r2, [pc, #16]	@ (8005adc <prvSampleTimeNow+0x3c>)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000dc0 	.word	0x20000dc0

08005ae0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	607a      	str	r2, [r7, #4]
 8005aec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005aee:	2300      	movs	r3, #0
 8005af0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d812      	bhi.n	8005b2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d302      	bcc.n	8005b1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e01b      	b.n	8005b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005b1a:	4b10      	ldr	r3, [pc, #64]	@ (8005b5c <prvInsertTimerInActiveList+0x7c>)
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	4610      	mov	r0, r2
 8005b26:	f7fd fac4 	bl	80030b2 <vListInsert>
 8005b2a:	e012      	b.n	8005b52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d206      	bcs.n	8005b42 <prvInsertTimerInActiveList+0x62>
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d302      	bcc.n	8005b42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	617b      	str	r3, [r7, #20]
 8005b40:	e007      	b.n	8005b52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005b42:	4b07      	ldr	r3, [pc, #28]	@ (8005b60 <prvInsertTimerInActiveList+0x80>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f7fd fab0 	bl	80030b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005b52:	697b      	ldr	r3, [r7, #20]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3718      	adds	r7, #24
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000db4 	.word	0x20000db4
 8005b60:	20000db0 	.word	0x20000db0

08005b64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08e      	sub	sp, #56	@ 0x38
 8005b68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b6a:	e0d4      	b.n	8005d16 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da1b      	bge.n	8005baa <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005b72:	1d3b      	adds	r3, r7, #4
 8005b74:	3304      	adds	r3, #4
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10d      	bne.n	8005b9a <prvProcessReceivedCommands+0x36>
	__asm volatile
 8005b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b82:	b672      	cpsid	i
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	b662      	cpsie	i
 8005b92:	61fb      	str	r3, [r7, #28]
}
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba0:	6850      	ldr	r0, [r2, #4]
 8005ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ba4:	6892      	ldr	r2, [r2, #8]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f2c0 80b2 	blt.w	8005d16 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d004      	beq.n	8005bc8 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc0:	3304      	adds	r3, #4
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f7fd faae 	bl	8003124 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005bc8:	463b      	mov	r3, r7
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ff68 	bl	8005aa0 <prvSampleTimeNow>
 8005bd0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	f200 809b 	bhi.w	8005d10 <prvProcessReceivedCommands+0x1ac>
 8005bda:	a201      	add	r2, pc, #4	@ (adr r2, 8005be0 <prvProcessReceivedCommands+0x7c>)
 8005bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be0:	08005c09 	.word	0x08005c09
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c09 	.word	0x08005c09
 8005bec:	08005c83 	.word	0x08005c83
 8005bf0:	08005c97 	.word	0x08005c97
 8005bf4:	08005ce7 	.word	0x08005ce7
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c09 	.word	0x08005c09
 8005c00:	08005c83 	.word	0x08005c83
 8005c04:	08005c97 	.word	0x08005c97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c0e:	f043 0301 	orr.w	r3, r3, #1
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	18d1      	adds	r1, r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c28:	f7ff ff5a 	bl	8005ae0 <prvInsertTimerInActiveList>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d070      	beq.n	8005d14 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d065      	beq.n	8005d14 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	441a      	add	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	2300      	movs	r3, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c5a:	f7ff fdfb 	bl	8005854 <xTimerGenericCommand>
 8005c5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d156      	bne.n	8005d14 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c6a:	b672      	cpsid	i
 8005c6c:	f383 8811 	msr	BASEPRI, r3
 8005c70:	f3bf 8f6f 	isb	sy
 8005c74:	f3bf 8f4f 	dsb	sy
 8005c78:	b662      	cpsie	i
 8005c7a:	61bb      	str	r3, [r7, #24]
}
 8005c7c:	bf00      	nop
 8005c7e:	bf00      	nop
 8005c80:	e7fd      	b.n	8005c7e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005c94:	e03f      	b.n	8005d16 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10d      	bne.n	8005cd2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	b672      	cpsid	i
 8005cbc:	f383 8811 	msr	BASEPRI, r3
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	f3bf 8f4f 	dsb	sy
 8005cc8:	b662      	cpsie	i
 8005cca:	617b      	str	r3, [r7, #20]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	18d1      	adds	r1, r2, r3
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ce0:	f7ff fefe 	bl	8005ae0 <prvInsertTimerInActiveList>
					break;
 8005ce4:	e017      	b.n	8005d16 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d103      	bne.n	8005cfc <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8005cf4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cf6:	f000 fbd5 	bl	80064a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005cfa:	e00c      	b.n	8005d16 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005d0e:	e002      	b.n	8005d16 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8005d10:	bf00      	nop
 8005d12:	e000      	b.n	8005d16 <prvProcessReceivedCommands+0x1b2>
					break;
 8005d14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d16:	4b08      	ldr	r3, [pc, #32]	@ (8005d38 <prvProcessReceivedCommands+0x1d4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	1d39      	adds	r1, r7, #4
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fcee 	bl	8003700 <xQueueReceive>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f47f af20 	bne.w	8005b6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005d2c:	bf00      	nop
 8005d2e:	bf00      	nop
 8005d30:	3730      	adds	r7, #48	@ 0x30
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000db8 	.word	0x20000db8

08005d3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b088      	sub	sp, #32
 8005d40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d42:	e04b      	b.n	8005ddc <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d44:	4b2f      	ldr	r3, [pc, #188]	@ (8005e04 <prvSwitchTimerLists+0xc8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4e:	4b2d      	ldr	r3, [pc, #180]	@ (8005e04 <prvSwitchTimerLists+0xc8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fd f9e1 	bl	8003124 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d031      	beq.n	8005ddc <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005d82:	68ba      	ldr	r2, [r7, #8]
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d90e      	bls.n	8005da8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68ba      	ldr	r2, [r7, #8]
 8005d8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d96:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <prvSwitchTimerLists+0xc8>)
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4619      	mov	r1, r3
 8005da0:	4610      	mov	r0, r2
 8005da2:	f7fd f986 	bl	80030b2 <vListInsert>
 8005da6:	e019      	b.n	8005ddc <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005da8:	2300      	movs	r3, #0
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	2300      	movs	r3, #0
 8005dae:	693a      	ldr	r2, [r7, #16]
 8005db0:	2100      	movs	r1, #0
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f7ff fd4e 	bl	8005854 <xTimerGenericCommand>
 8005db8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10d      	bne.n	8005ddc <prvSwitchTimerLists+0xa0>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc4:	b672      	cpsid	i
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	b662      	cpsie	i
 8005dd4:	603b      	str	r3, [r7, #0]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <prvSwitchTimerLists+0xc8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1ae      	bne.n	8005d44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005de6:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <prvSwitchTimerLists+0xc8>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005dec:	4b06      	ldr	r3, [pc, #24]	@ (8005e08 <prvSwitchTimerLists+0xcc>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a04      	ldr	r2, [pc, #16]	@ (8005e04 <prvSwitchTimerLists+0xc8>)
 8005df2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005df4:	4a04      	ldr	r2, [pc, #16]	@ (8005e08 <prvSwitchTimerLists+0xcc>)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	6013      	str	r3, [r2, #0]
}
 8005dfa:	bf00      	nop
 8005dfc:	3718      	adds	r7, #24
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	20000db0 	.word	0x20000db0
 8005e08:	20000db4 	.word	0x20000db4

08005e0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005e12:	f000 f94b 	bl	80060ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005e16:	4b15      	ldr	r3, [pc, #84]	@ (8005e6c <prvCheckForValidListAndQueue+0x60>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d120      	bne.n	8005e60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005e1e:	4814      	ldr	r0, [pc, #80]	@ (8005e70 <prvCheckForValidListAndQueue+0x64>)
 8005e20:	f7fd f8f6 	bl	8003010 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005e24:	4813      	ldr	r0, [pc, #76]	@ (8005e74 <prvCheckForValidListAndQueue+0x68>)
 8005e26:	f7fd f8f3 	bl	8003010 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005e2a:	4b13      	ldr	r3, [pc, #76]	@ (8005e78 <prvCheckForValidListAndQueue+0x6c>)
 8005e2c:	4a10      	ldr	r2, [pc, #64]	@ (8005e70 <prvCheckForValidListAndQueue+0x64>)
 8005e2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005e30:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <prvCheckForValidListAndQueue+0x70>)
 8005e32:	4a10      	ldr	r2, [pc, #64]	@ (8005e74 <prvCheckForValidListAndQueue+0x68>)
 8005e34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005e36:	2300      	movs	r3, #0
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	4b11      	ldr	r3, [pc, #68]	@ (8005e80 <prvCheckForValidListAndQueue+0x74>)
 8005e3c:	4a11      	ldr	r2, [pc, #68]	@ (8005e84 <prvCheckForValidListAndQueue+0x78>)
 8005e3e:	2110      	movs	r1, #16
 8005e40:	200a      	movs	r0, #10
 8005e42:	f7fd fa05 	bl	8003250 <xQueueGenericCreateStatic>
 8005e46:	4603      	mov	r3, r0
 8005e48:	4a08      	ldr	r2, [pc, #32]	@ (8005e6c <prvCheckForValidListAndQueue+0x60>)
 8005e4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005e4c:	4b07      	ldr	r3, [pc, #28]	@ (8005e6c <prvCheckForValidListAndQueue+0x60>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005e54:	4b05      	ldr	r3, [pc, #20]	@ (8005e6c <prvCheckForValidListAndQueue+0x60>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	490b      	ldr	r1, [pc, #44]	@ (8005e88 <prvCheckForValidListAndQueue+0x7c>)
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fd fe48 	bl	8003af0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e60:	f000 f95a 	bl	8006118 <vPortExitCritical>
}
 8005e64:	bf00      	nop
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000db8 	.word	0x20000db8
 8005e70:	20000d88 	.word	0x20000d88
 8005e74:	20000d9c 	.word	0x20000d9c
 8005e78:	20000db0 	.word	0x20000db0
 8005e7c:	20000db4 	.word	0x20000db4
 8005e80:	20000e64 	.word	0x20000e64
 8005e84:	20000dc4 	.word	0x20000dc4
 8005e88:	08006900 	.word	0x08006900

08005e8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	3b04      	subs	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	3b04      	subs	r3, #4
 8005eaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3b04      	subs	r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8005ef0 <pxPortInitialiseStack+0x64>)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	3b14      	subs	r3, #20
 8005ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3b04      	subs	r3, #4
 8005ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f06f 0202 	mvn.w	r2, #2
 8005eda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b20      	subs	r3, #32
 8005ee0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	08005ef5 	.word	0x08005ef5

08005ef4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005efa:	2300      	movs	r3, #0
 8005efc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005efe:	4b15      	ldr	r3, [pc, #84]	@ (8005f54 <prvTaskExitError+0x60>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f06:	d00d      	beq.n	8005f24 <prvTaskExitError+0x30>
	__asm volatile
 8005f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0c:	b672      	cpsid	i
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	b662      	cpsie	i
 8005f1c:	60fb      	str	r3, [r7, #12]
}
 8005f1e:	bf00      	nop
 8005f20:	bf00      	nop
 8005f22:	e7fd      	b.n	8005f20 <prvTaskExitError+0x2c>
	__asm volatile
 8005f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f28:	b672      	cpsid	i
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	b662      	cpsie	i
 8005f38:	60bb      	str	r3, [r7, #8]
}
 8005f3a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005f3c:	bf00      	nop
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d0fc      	beq.n	8005f3e <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	2000000c 	.word	0x2000000c
	...

08005f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005f60:	4b07      	ldr	r3, [pc, #28]	@ (8005f80 <pxCurrentTCBConst2>)
 8005f62:	6819      	ldr	r1, [r3, #0]
 8005f64:	6808      	ldr	r0, [r1, #0]
 8005f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	f380 8809 	msr	PSP, r0
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f04f 0000 	mov.w	r0, #0
 8005f76:	f380 8811 	msr	BASEPRI, r0
 8005f7a:	4770      	bx	lr
 8005f7c:	f3af 8000 	nop.w

08005f80 <pxCurrentTCBConst2>:
 8005f80:	20000888 	.word	0x20000888
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop

08005f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005f88:	4808      	ldr	r0, [pc, #32]	@ (8005fac <prvPortStartFirstTask+0x24>)
 8005f8a:	6800      	ldr	r0, [r0, #0]
 8005f8c:	6800      	ldr	r0, [r0, #0]
 8005f8e:	f380 8808 	msr	MSP, r0
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8814 	msr	CONTROL, r0
 8005f9a:	b662      	cpsie	i
 8005f9c:	b661      	cpsie	f
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	df00      	svc	0
 8005fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005faa:	bf00      	nop
 8005fac:	e000ed08 	.word	0xe000ed08

08005fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005fb6:	4b37      	ldr	r3, [pc, #220]	@ (8006094 <xPortStartScheduler+0xe4>)
 8005fb8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	22ff      	movs	r2, #255	@ 0xff
 8005fc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005fd8:	b2da      	uxtb	r2, r3
 8005fda:	4b2f      	ldr	r3, [pc, #188]	@ (8006098 <xPortStartScheduler+0xe8>)
 8005fdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005fde:	4b2f      	ldr	r3, [pc, #188]	@ (800609c <xPortStartScheduler+0xec>)
 8005fe0:	2207      	movs	r2, #7
 8005fe2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005fe4:	e009      	b.n	8005ffa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800609c <xPortStartScheduler+0xec>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	4a2b      	ldr	r2, [pc, #172]	@ (800609c <xPortStartScheduler+0xec>)
 8005fee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006002:	2b80      	cmp	r3, #128	@ 0x80
 8006004:	d0ef      	beq.n	8005fe6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006006:	4b25      	ldr	r3, [pc, #148]	@ (800609c <xPortStartScheduler+0xec>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f1c3 0307 	rsb	r3, r3, #7
 800600e:	2b04      	cmp	r3, #4
 8006010:	d00d      	beq.n	800602e <xPortStartScheduler+0x7e>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	b672      	cpsid	i
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	b662      	cpsie	i
 8006026:	60bb      	str	r3, [r7, #8]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <xPortStartScheduler+0xec>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	4a19      	ldr	r2, [pc, #100]	@ (800609c <xPortStartScheduler+0xec>)
 8006036:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006038:	4b18      	ldr	r3, [pc, #96]	@ (800609c <xPortStartScheduler+0xec>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006040:	4a16      	ldr	r2, [pc, #88]	@ (800609c <xPortStartScheduler+0xec>)
 8006042:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800604c:	4b14      	ldr	r3, [pc, #80]	@ (80060a0 <xPortStartScheduler+0xf0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a13      	ldr	r2, [pc, #76]	@ (80060a0 <xPortStartScheduler+0xf0>)
 8006052:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006056:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006058:	4b11      	ldr	r3, [pc, #68]	@ (80060a0 <xPortStartScheduler+0xf0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a10      	ldr	r2, [pc, #64]	@ (80060a0 <xPortStartScheduler+0xf0>)
 800605e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006062:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006064:	f000 f8dc 	bl	8006220 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006068:	4b0e      	ldr	r3, [pc, #56]	@ (80060a4 <xPortStartScheduler+0xf4>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800606e:	f000 f8fb 	bl	8006268 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006072:	4b0d      	ldr	r3, [pc, #52]	@ (80060a8 <xPortStartScheduler+0xf8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a0c      	ldr	r2, [pc, #48]	@ (80060a8 <xPortStartScheduler+0xf8>)
 8006078:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800607c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800607e:	f7ff ff83 	bl	8005f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006082:	f7fe fdb3 	bl	8004bec <vTaskSwitchContext>
	prvTaskExitError();
 8006086:	f7ff ff35 	bl	8005ef4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000e400 	.word	0xe000e400
 8006098:	20000eb4 	.word	0x20000eb4
 800609c:	20000eb8 	.word	0x20000eb8
 80060a0:	e000ed20 	.word	0xe000ed20
 80060a4:	2000000c 	.word	0x2000000c
 80060a8:	e000ef34 	.word	0xe000ef34

080060ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
	__asm volatile
 80060b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b6:	b672      	cpsid	i
 80060b8:	f383 8811 	msr	BASEPRI, r3
 80060bc:	f3bf 8f6f 	isb	sy
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	b662      	cpsie	i
 80060c6:	607b      	str	r3, [r7, #4]
}
 80060c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80060ca:	4b11      	ldr	r3, [pc, #68]	@ (8006110 <vPortEnterCritical+0x64>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3301      	adds	r3, #1
 80060d0:	4a0f      	ldr	r2, [pc, #60]	@ (8006110 <vPortEnterCritical+0x64>)
 80060d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80060d4:	4b0e      	ldr	r3, [pc, #56]	@ (8006110 <vPortEnterCritical+0x64>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d112      	bne.n	8006102 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80060dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006114 <vPortEnterCritical+0x68>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <vPortEnterCritical+0x56>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ea:	b672      	cpsid	i
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	b662      	cpsie	i
 80060fa:	603b      	str	r3, [r7, #0]
}
 80060fc:	bf00      	nop
 80060fe:	bf00      	nop
 8006100:	e7fd      	b.n	80060fe <vPortEnterCritical+0x52>
	}
}
 8006102:	bf00      	nop
 8006104:	370c      	adds	r7, #12
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	2000000c 	.word	0x2000000c
 8006114:	e000ed04 	.word	0xe000ed04

08006118 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <vPortExitCritical+0x54>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <vPortExitCritical+0x2a>
	__asm volatile
 8006126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612a:	b672      	cpsid	i
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	b662      	cpsie	i
 800613a:	607b      	str	r3, [r7, #4]
}
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	e7fd      	b.n	800613e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006142:	4b0a      	ldr	r3, [pc, #40]	@ (800616c <vPortExitCritical+0x54>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	3b01      	subs	r3, #1
 8006148:	4a08      	ldr	r2, [pc, #32]	@ (800616c <vPortExitCritical+0x54>)
 800614a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800614c:	4b07      	ldr	r3, [pc, #28]	@ (800616c <vPortExitCritical+0x54>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <vPortExitCritical+0x48>
 8006154:	2300      	movs	r3, #0
 8006156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f383 8811 	msr	BASEPRI, r3
}
 800615e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	2000000c 	.word	0x2000000c

08006170 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006170:	f3ef 8009 	mrs	r0, PSP
 8006174:	f3bf 8f6f 	isb	sy
 8006178:	4b15      	ldr	r3, [pc, #84]	@ (80061d0 <pxCurrentTCBConst>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	f01e 0f10 	tst.w	lr, #16
 8006180:	bf08      	it	eq
 8006182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618a:	6010      	str	r0, [r2, #0]
 800618c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006190:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006194:	b672      	cpsid	i
 8006196:	f380 8811 	msr	BASEPRI, r0
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	f3bf 8f6f 	isb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	f7fe fd22 	bl	8004bec <vTaskSwitchContext>
 80061a8:	f04f 0000 	mov.w	r0, #0
 80061ac:	f380 8811 	msr	BASEPRI, r0
 80061b0:	bc09      	pop	{r0, r3}
 80061b2:	6819      	ldr	r1, [r3, #0]
 80061b4:	6808      	ldr	r0, [r1, #0]
 80061b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ba:	f01e 0f10 	tst.w	lr, #16
 80061be:	bf08      	it	eq
 80061c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80061c4:	f380 8809 	msr	PSP, r0
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop

080061d0 <pxCurrentTCBConst>:
 80061d0:	20000888 	.word	0x20000888
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80061d4:	bf00      	nop
 80061d6:	bf00      	nop

080061d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	b672      	cpsid	i
 80061e4:	f383 8811 	msr	BASEPRI, r3
 80061e8:	f3bf 8f6f 	isb	sy
 80061ec:	f3bf 8f4f 	dsb	sy
 80061f0:	b662      	cpsie	i
 80061f2:	607b      	str	r3, [r7, #4]
}
 80061f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80061f6:	f7fe fc3d 	bl	8004a74 <xTaskIncrementTick>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006200:	4b06      	ldr	r3, [pc, #24]	@ (800621c <xPortSysTickHandler+0x44>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	2300      	movs	r3, #0
 800620a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	f383 8811 	msr	BASEPRI, r3
}
 8006212:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006214:	bf00      	nop
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	e000ed04 	.word	0xe000ed04

08006220 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006220:	b480      	push	{r7}
 8006222:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006224:	4b0b      	ldr	r3, [pc, #44]	@ (8006254 <vPortSetupTimerInterrupt+0x34>)
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800622a:	4b0b      	ldr	r3, [pc, #44]	@ (8006258 <vPortSetupTimerInterrupt+0x38>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006230:	4b0a      	ldr	r3, [pc, #40]	@ (800625c <vPortSetupTimerInterrupt+0x3c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a0a      	ldr	r2, [pc, #40]	@ (8006260 <vPortSetupTimerInterrupt+0x40>)
 8006236:	fba2 2303 	umull	r2, r3, r2, r3
 800623a:	099b      	lsrs	r3, r3, #6
 800623c:	4a09      	ldr	r2, [pc, #36]	@ (8006264 <vPortSetupTimerInterrupt+0x44>)
 800623e:	3b01      	subs	r3, #1
 8006240:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006242:	4b04      	ldr	r3, [pc, #16]	@ (8006254 <vPortSetupTimerInterrupt+0x34>)
 8006244:	2207      	movs	r2, #7
 8006246:	601a      	str	r2, [r3, #0]
}
 8006248:	bf00      	nop
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	e000e010 	.word	0xe000e010
 8006258:	e000e018 	.word	0xe000e018
 800625c:	20000000 	.word	0x20000000
 8006260:	10624dd3 	.word	0x10624dd3
 8006264:	e000e014 	.word	0xe000e014

08006268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006268:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006278 <vPortEnableVFP+0x10>
 800626c:	6801      	ldr	r1, [r0, #0]
 800626e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006272:	6001      	str	r1, [r0, #0]
 8006274:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006276:	bf00      	nop
 8006278:	e000ed88 	.word	0xe000ed88

0800627c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006282:	f3ef 8305 	mrs	r3, IPSR
 8006286:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	d917      	bls.n	80062be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800628e:	4a1a      	ldr	r2, [pc, #104]	@ (80062f8 <vPortValidateInterruptPriority+0x7c>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006298:	4b18      	ldr	r3, [pc, #96]	@ (80062fc <vPortValidateInterruptPriority+0x80>)
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	7afa      	ldrb	r2, [r7, #11]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d20d      	bcs.n	80062be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	b672      	cpsid	i
 80062a8:	f383 8811 	msr	BASEPRI, r3
 80062ac:	f3bf 8f6f 	isb	sy
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	b662      	cpsie	i
 80062b6:	607b      	str	r3, [r7, #4]
}
 80062b8:	bf00      	nop
 80062ba:	bf00      	nop
 80062bc:	e7fd      	b.n	80062ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062be:	4b10      	ldr	r3, [pc, #64]	@ (8006300 <vPortValidateInterruptPriority+0x84>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80062c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006304 <vPortValidateInterruptPriority+0x88>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d90d      	bls.n	80062ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	b672      	cpsid	i
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	b662      	cpsie	i
 80062e2:	603b      	str	r3, [r7, #0]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <vPortValidateInterruptPriority+0x6a>
	}
 80062ea:	bf00      	nop
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	e000e3f0 	.word	0xe000e3f0
 80062fc:	20000eb4 	.word	0x20000eb4
 8006300:	e000ed0c 	.word	0xe000ed0c
 8006304:	20000eb8 	.word	0x20000eb8

08006308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b08a      	sub	sp, #40	@ 0x28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006310:	2300      	movs	r3, #0
 8006312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006314:	f7fe faf0 	bl	80048f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006318:	4b5d      	ldr	r3, [pc, #372]	@ (8006490 <pvPortMalloc+0x188>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006320:	f000 f920 	bl	8006564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006324:	4b5b      	ldr	r3, [pc, #364]	@ (8006494 <pvPortMalloc+0x18c>)
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4013      	ands	r3, r2
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 8094 	bne.w	800645a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d020      	beq.n	800637a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8006338:	2208      	movs	r2, #8
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	2b00      	cmp	r3, #0
 8006348:	d017      	beq.n	800637a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f023 0307 	bic.w	r3, r3, #7
 8006350:	3308      	adds	r3, #8
 8006352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00d      	beq.n	800637a <pvPortMalloc+0x72>
	__asm volatile
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	b672      	cpsid	i
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	b662      	cpsie	i
 8006372:	617b      	str	r3, [r7, #20]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d06c      	beq.n	800645a <pvPortMalloc+0x152>
 8006380:	4b45      	ldr	r3, [pc, #276]	@ (8006498 <pvPortMalloc+0x190>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	429a      	cmp	r2, r3
 8006388:	d867      	bhi.n	800645a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800638a:	4b44      	ldr	r3, [pc, #272]	@ (800649c <pvPortMalloc+0x194>)
 800638c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800638e:	4b43      	ldr	r3, [pc, #268]	@ (800649c <pvPortMalloc+0x194>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006394:	e004      	b.n	80063a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d903      	bls.n	80063b2 <pvPortMalloc+0xaa>
 80063aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1f1      	bne.n	8006396 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80063b2:	4b37      	ldr	r3, [pc, #220]	@ (8006490 <pvPortMalloc+0x188>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d04e      	beq.n	800645a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2208      	movs	r2, #8
 80063c2:	4413      	add	r3, r2
 80063c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80063ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	1ad2      	subs	r2, r2, r3
 80063d6:	2308      	movs	r3, #8
 80063d8:	005b      	lsls	r3, r3, #1
 80063da:	429a      	cmp	r2, r3
 80063dc:	d922      	bls.n	8006424 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80063de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4413      	add	r3, r2
 80063e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00d      	beq.n	800640c <pvPortMalloc+0x104>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	b672      	cpsid	i
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	b662      	cpsie	i
 8006404:	613b      	str	r3, [r7, #16]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800641e:	69b8      	ldr	r0, [r7, #24]
 8006420:	f000 f902 	bl	8006628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006424:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <pvPortMalloc+0x190>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	4a1a      	ldr	r2, [pc, #104]	@ (8006498 <pvPortMalloc+0x190>)
 8006430:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006432:	4b19      	ldr	r3, [pc, #100]	@ (8006498 <pvPortMalloc+0x190>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	4b1a      	ldr	r3, [pc, #104]	@ (80064a0 <pvPortMalloc+0x198>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d203      	bcs.n	8006446 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800643e:	4b16      	ldr	r3, [pc, #88]	@ (8006498 <pvPortMalloc+0x190>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a17      	ldr	r2, [pc, #92]	@ (80064a0 <pvPortMalloc+0x198>)
 8006444:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	4b12      	ldr	r3, [pc, #72]	@ (8006494 <pvPortMalloc+0x18c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	431a      	orrs	r2, r3
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800645a:	f7fe fa5b 	bl	8004914 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00d      	beq.n	8006484 <pvPortMalloc+0x17c>
	__asm volatile
 8006468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800646c:	b672      	cpsid	i
 800646e:	f383 8811 	msr	BASEPRI, r3
 8006472:	f3bf 8f6f 	isb	sy
 8006476:	f3bf 8f4f 	dsb	sy
 800647a:	b662      	cpsie	i
 800647c:	60fb      	str	r3, [r7, #12]
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <pvPortMalloc+0x178>
	return pvReturn;
 8006484:	69fb      	ldr	r3, [r7, #28]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3728      	adds	r7, #40	@ 0x28
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20004ac4 	.word	0x20004ac4
 8006494:	20004ad0 	.word	0x20004ad0
 8006498:	20004ac8 	.word	0x20004ac8
 800649c:	20004abc 	.word	0x20004abc
 80064a0:	20004acc 	.word	0x20004acc

080064a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d04e      	beq.n	8006554 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80064b6:	2308      	movs	r3, #8
 80064b8:	425b      	negs	r3, r3
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4413      	add	r3, r2
 80064be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	685a      	ldr	r2, [r3, #4]
 80064c8:	4b24      	ldr	r3, [pc, #144]	@ (800655c <vPortFree+0xb8>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4013      	ands	r3, r2
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <vPortFree+0x4a>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	b672      	cpsid	i
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	b662      	cpsie	i
 80064e6:	60fb      	str	r3, [r7, #12]
}
 80064e8:	bf00      	nop
 80064ea:	bf00      	nop
 80064ec:	e7fd      	b.n	80064ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00d      	beq.n	8006512 <vPortFree+0x6e>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	b672      	cpsid	i
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	b662      	cpsie	i
 800650a:	60bb      	str	r3, [r7, #8]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	4b11      	ldr	r3, [pc, #68]	@ (800655c <vPortFree+0xb8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4013      	ands	r3, r2
 800651c:	2b00      	cmp	r3, #0
 800651e:	d019      	beq.n	8006554 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d115      	bne.n	8006554 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	4b0b      	ldr	r3, [pc, #44]	@ (800655c <vPortFree+0xb8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	43db      	mvns	r3, r3
 8006532:	401a      	ands	r2, r3
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006538:	f7fe f9de 	bl	80048f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	4b07      	ldr	r3, [pc, #28]	@ (8006560 <vPortFree+0xbc>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4413      	add	r3, r2
 8006546:	4a06      	ldr	r2, [pc, #24]	@ (8006560 <vPortFree+0xbc>)
 8006548:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800654a:	6938      	ldr	r0, [r7, #16]
 800654c:	f000 f86c 	bl	8006628 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006550:	f7fe f9e0 	bl	8004914 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006554:	bf00      	nop
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	20004ad0 	.word	0x20004ad0
 8006560:	20004ac8 	.word	0x20004ac8

08006564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b085      	sub	sp, #20
 8006568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800656a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800656e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006570:	4b27      	ldr	r3, [pc, #156]	@ (8006610 <prvHeapInit+0xac>)
 8006572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00c      	beq.n	8006598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3307      	adds	r3, #7
 8006582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0307 	bic.w	r3, r3, #7
 800658a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	4a1f      	ldr	r2, [pc, #124]	@ (8006610 <prvHeapInit+0xac>)
 8006594:	4413      	add	r3, r2
 8006596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800659c:	4a1d      	ldr	r2, [pc, #116]	@ (8006614 <prvHeapInit+0xb0>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80065a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006614 <prvHeapInit+0xb0>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	4413      	add	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80065b0:	2208      	movs	r2, #8
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1a9b      	subs	r3, r3, r2
 80065b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 0307 	bic.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	4a15      	ldr	r2, [pc, #84]	@ (8006618 <prvHeapInit+0xb4>)
 80065c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80065c6:	4b14      	ldr	r3, [pc, #80]	@ (8006618 <prvHeapInit+0xb4>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2200      	movs	r2, #0
 80065cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80065ce:	4b12      	ldr	r3, [pc, #72]	@ (8006618 <prvHeapInit+0xb4>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2200      	movs	r2, #0
 80065d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	1ad2      	subs	r2, r2, r3
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80065e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006618 <prvHeapInit+0xb4>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a0a      	ldr	r2, [pc, #40]	@ (800661c <prvHeapInit+0xb8>)
 80065f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	4a09      	ldr	r2, [pc, #36]	@ (8006620 <prvHeapInit+0xbc>)
 80065fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80065fc:	4b09      	ldr	r3, [pc, #36]	@ (8006624 <prvHeapInit+0xc0>)
 80065fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	20000ebc 	.word	0x20000ebc
 8006614:	20004abc 	.word	0x20004abc
 8006618:	20004ac4 	.word	0x20004ac4
 800661c:	20004acc 	.word	0x20004acc
 8006620:	20004ac8 	.word	0x20004ac8
 8006624:	20004ad0 	.word	0x20004ad0

08006628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006630:	4b28      	ldr	r3, [pc, #160]	@ (80066d4 <prvInsertBlockIntoFreeList+0xac>)
 8006632:	60fb      	str	r3, [r7, #12]
 8006634:	e002      	b.n	800663c <prvInsertBlockIntoFreeList+0x14>
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	429a      	cmp	r2, r3
 8006644:	d8f7      	bhi.n	8006636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	68ba      	ldr	r2, [r7, #8]
 8006650:	4413      	add	r3, r2
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d108      	bne.n	800666a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	441a      	add	r2, r3
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	429a      	cmp	r2, r3
 800667c:	d118      	bne.n	80066b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	4b15      	ldr	r3, [pc, #84]	@ (80066d8 <prvInsertBlockIntoFreeList+0xb0>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	429a      	cmp	r2, r3
 8006688:	d00d      	beq.n	80066a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	441a      	add	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e008      	b.n	80066b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80066a6:	4b0c      	ldr	r3, [pc, #48]	@ (80066d8 <prvInsertBlockIntoFreeList+0xb0>)
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	601a      	str	r2, [r3, #0]
 80066ae:	e003      	b.n	80066b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80066b8:	68fa      	ldr	r2, [r7, #12]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d002      	beq.n	80066c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	20004abc 	.word	0x20004abc
 80066d8:	20004ac4 	.word	0x20004ac4

080066dc <memset>:
 80066dc:	4402      	add	r2, r0
 80066de:	4603      	mov	r3, r0
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d100      	bne.n	80066e6 <memset+0xa>
 80066e4:	4770      	bx	lr
 80066e6:	f803 1b01 	strb.w	r1, [r3], #1
 80066ea:	e7f9      	b.n	80066e0 <memset+0x4>

080066ec <_reclaim_reent>:
 80066ec:	4b29      	ldr	r3, [pc, #164]	@ (8006794 <_reclaim_reent+0xa8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4283      	cmp	r3, r0
 80066f2:	b570      	push	{r4, r5, r6, lr}
 80066f4:	4604      	mov	r4, r0
 80066f6:	d04b      	beq.n	8006790 <_reclaim_reent+0xa4>
 80066f8:	69c3      	ldr	r3, [r0, #28]
 80066fa:	b1ab      	cbz	r3, 8006728 <_reclaim_reent+0x3c>
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	b16b      	cbz	r3, 800671c <_reclaim_reent+0x30>
 8006700:	2500      	movs	r5, #0
 8006702:	69e3      	ldr	r3, [r4, #28]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	5959      	ldr	r1, [r3, r5]
 8006708:	2900      	cmp	r1, #0
 800670a:	d13b      	bne.n	8006784 <_reclaim_reent+0x98>
 800670c:	3504      	adds	r5, #4
 800670e:	2d80      	cmp	r5, #128	@ 0x80
 8006710:	d1f7      	bne.n	8006702 <_reclaim_reent+0x16>
 8006712:	69e3      	ldr	r3, [r4, #28]
 8006714:	4620      	mov	r0, r4
 8006716:	68d9      	ldr	r1, [r3, #12]
 8006718:	f000 f872 	bl	8006800 <_free_r>
 800671c:	69e3      	ldr	r3, [r4, #28]
 800671e:	6819      	ldr	r1, [r3, #0]
 8006720:	b111      	cbz	r1, 8006728 <_reclaim_reent+0x3c>
 8006722:	4620      	mov	r0, r4
 8006724:	f000 f86c 	bl	8006800 <_free_r>
 8006728:	6961      	ldr	r1, [r4, #20]
 800672a:	b111      	cbz	r1, 8006732 <_reclaim_reent+0x46>
 800672c:	4620      	mov	r0, r4
 800672e:	f000 f867 	bl	8006800 <_free_r>
 8006732:	69e1      	ldr	r1, [r4, #28]
 8006734:	b111      	cbz	r1, 800673c <_reclaim_reent+0x50>
 8006736:	4620      	mov	r0, r4
 8006738:	f000 f862 	bl	8006800 <_free_r>
 800673c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800673e:	b111      	cbz	r1, 8006746 <_reclaim_reent+0x5a>
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f85d 	bl	8006800 <_free_r>
 8006746:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006748:	b111      	cbz	r1, 8006750 <_reclaim_reent+0x64>
 800674a:	4620      	mov	r0, r4
 800674c:	f000 f858 	bl	8006800 <_free_r>
 8006750:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006752:	b111      	cbz	r1, 800675a <_reclaim_reent+0x6e>
 8006754:	4620      	mov	r0, r4
 8006756:	f000 f853 	bl	8006800 <_free_r>
 800675a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800675c:	b111      	cbz	r1, 8006764 <_reclaim_reent+0x78>
 800675e:	4620      	mov	r0, r4
 8006760:	f000 f84e 	bl	8006800 <_free_r>
 8006764:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006766:	b111      	cbz	r1, 800676e <_reclaim_reent+0x82>
 8006768:	4620      	mov	r0, r4
 800676a:	f000 f849 	bl	8006800 <_free_r>
 800676e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006770:	b111      	cbz	r1, 8006778 <_reclaim_reent+0x8c>
 8006772:	4620      	mov	r0, r4
 8006774:	f000 f844 	bl	8006800 <_free_r>
 8006778:	6a23      	ldr	r3, [r4, #32]
 800677a:	b14b      	cbz	r3, 8006790 <_reclaim_reent+0xa4>
 800677c:	4620      	mov	r0, r4
 800677e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006782:	4718      	bx	r3
 8006784:	680e      	ldr	r6, [r1, #0]
 8006786:	4620      	mov	r0, r4
 8006788:	f000 f83a 	bl	8006800 <_free_r>
 800678c:	4631      	mov	r1, r6
 800678e:	e7bb      	b.n	8006708 <_reclaim_reent+0x1c>
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	bf00      	nop
 8006794:	20000010 	.word	0x20000010

08006798 <__libc_init_array>:
 8006798:	b570      	push	{r4, r5, r6, lr}
 800679a:	4d0d      	ldr	r5, [pc, #52]	@ (80067d0 <__libc_init_array+0x38>)
 800679c:	4c0d      	ldr	r4, [pc, #52]	@ (80067d4 <__libc_init_array+0x3c>)
 800679e:	1b64      	subs	r4, r4, r5
 80067a0:	10a4      	asrs	r4, r4, #2
 80067a2:	2600      	movs	r6, #0
 80067a4:	42a6      	cmp	r6, r4
 80067a6:	d109      	bne.n	80067bc <__libc_init_array+0x24>
 80067a8:	4d0b      	ldr	r5, [pc, #44]	@ (80067d8 <__libc_init_array+0x40>)
 80067aa:	4c0c      	ldr	r4, [pc, #48]	@ (80067dc <__libc_init_array+0x44>)
 80067ac:	f000 f87e 	bl	80068ac <_init>
 80067b0:	1b64      	subs	r4, r4, r5
 80067b2:	10a4      	asrs	r4, r4, #2
 80067b4:	2600      	movs	r6, #0
 80067b6:	42a6      	cmp	r6, r4
 80067b8:	d105      	bne.n	80067c6 <__libc_init_array+0x2e>
 80067ba:	bd70      	pop	{r4, r5, r6, pc}
 80067bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c0:	4798      	blx	r3
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7ee      	b.n	80067a4 <__libc_init_array+0xc>
 80067c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ca:	4798      	blx	r3
 80067cc:	3601      	adds	r6, #1
 80067ce:	e7f2      	b.n	80067b6 <__libc_init_array+0x1e>
 80067d0:	08006944 	.word	0x08006944
 80067d4:	08006944 	.word	0x08006944
 80067d8:	08006944 	.word	0x08006944
 80067dc:	08006948 	.word	0x08006948

080067e0 <__retarget_lock_acquire_recursive>:
 80067e0:	4770      	bx	lr

080067e2 <__retarget_lock_release_recursive>:
 80067e2:	4770      	bx	lr

080067e4 <memcpy>:
 80067e4:	440a      	add	r2, r1
 80067e6:	4291      	cmp	r1, r2
 80067e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067ec:	d100      	bne.n	80067f0 <memcpy+0xc>
 80067ee:	4770      	bx	lr
 80067f0:	b510      	push	{r4, lr}
 80067f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067fa:	4291      	cmp	r1, r2
 80067fc:	d1f9      	bne.n	80067f2 <memcpy+0xe>
 80067fe:	bd10      	pop	{r4, pc}

08006800 <_free_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4605      	mov	r5, r0
 8006804:	2900      	cmp	r1, #0
 8006806:	d041      	beq.n	800688c <_free_r+0x8c>
 8006808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680c:	1f0c      	subs	r4, r1, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfb8      	it	lt
 8006812:	18e4      	addlt	r4, r4, r3
 8006814:	f000 f83e 	bl	8006894 <__malloc_lock>
 8006818:	4a1d      	ldr	r2, [pc, #116]	@ (8006890 <_free_r+0x90>)
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	b933      	cbnz	r3, 800682c <_free_r+0x2c>
 800681e:	6063      	str	r3, [r4, #4]
 8006820:	6014      	str	r4, [r2, #0]
 8006822:	4628      	mov	r0, r5
 8006824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006828:	f000 b83a 	b.w	80068a0 <__malloc_unlock>
 800682c:	42a3      	cmp	r3, r4
 800682e:	d908      	bls.n	8006842 <_free_r+0x42>
 8006830:	6820      	ldr	r0, [r4, #0]
 8006832:	1821      	adds	r1, r4, r0
 8006834:	428b      	cmp	r3, r1
 8006836:	bf01      	itttt	eq
 8006838:	6819      	ldreq	r1, [r3, #0]
 800683a:	685b      	ldreq	r3, [r3, #4]
 800683c:	1809      	addeq	r1, r1, r0
 800683e:	6021      	streq	r1, [r4, #0]
 8006840:	e7ed      	b.n	800681e <_free_r+0x1e>
 8006842:	461a      	mov	r2, r3
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b10b      	cbz	r3, 800684c <_free_r+0x4c>
 8006848:	42a3      	cmp	r3, r4
 800684a:	d9fa      	bls.n	8006842 <_free_r+0x42>
 800684c:	6811      	ldr	r1, [r2, #0]
 800684e:	1850      	adds	r0, r2, r1
 8006850:	42a0      	cmp	r0, r4
 8006852:	d10b      	bne.n	800686c <_free_r+0x6c>
 8006854:	6820      	ldr	r0, [r4, #0]
 8006856:	4401      	add	r1, r0
 8006858:	1850      	adds	r0, r2, r1
 800685a:	4283      	cmp	r3, r0
 800685c:	6011      	str	r1, [r2, #0]
 800685e:	d1e0      	bne.n	8006822 <_free_r+0x22>
 8006860:	6818      	ldr	r0, [r3, #0]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	6053      	str	r3, [r2, #4]
 8006866:	4408      	add	r0, r1
 8006868:	6010      	str	r0, [r2, #0]
 800686a:	e7da      	b.n	8006822 <_free_r+0x22>
 800686c:	d902      	bls.n	8006874 <_free_r+0x74>
 800686e:	230c      	movs	r3, #12
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	e7d6      	b.n	8006822 <_free_r+0x22>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	1821      	adds	r1, r4, r0
 8006878:	428b      	cmp	r3, r1
 800687a:	bf04      	itt	eq
 800687c:	6819      	ldreq	r1, [r3, #0]
 800687e:	685b      	ldreq	r3, [r3, #4]
 8006880:	6063      	str	r3, [r4, #4]
 8006882:	bf04      	itt	eq
 8006884:	1809      	addeq	r1, r1, r0
 8006886:	6021      	streq	r1, [r4, #0]
 8006888:	6054      	str	r4, [r2, #4]
 800688a:	e7ca      	b.n	8006822 <_free_r+0x22>
 800688c:	bd38      	pop	{r3, r4, r5, pc}
 800688e:	bf00      	nop
 8006890:	20004c10 	.word	0x20004c10

08006894 <__malloc_lock>:
 8006894:	4801      	ldr	r0, [pc, #4]	@ (800689c <__malloc_lock+0x8>)
 8006896:	f7ff bfa3 	b.w	80067e0 <__retarget_lock_acquire_recursive>
 800689a:	bf00      	nop
 800689c:	20004c0c 	.word	0x20004c0c

080068a0 <__malloc_unlock>:
 80068a0:	4801      	ldr	r0, [pc, #4]	@ (80068a8 <__malloc_unlock+0x8>)
 80068a2:	f7ff bf9e 	b.w	80067e2 <__retarget_lock_release_recursive>
 80068a6:	bf00      	nop
 80068a8:	20004c0c 	.word	0x20004c0c

080068ac <_init>:
 80068ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ae:	bf00      	nop
 80068b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b2:	bc08      	pop	{r3}
 80068b4:	469e      	mov	lr, r3
 80068b6:	4770      	bx	lr

080068b8 <_fini>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	bf00      	nop
 80068bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068be:	bc08      	pop	{r3}
 80068c0:	469e      	mov	lr, r3
 80068c2:	4770      	bx	lr
