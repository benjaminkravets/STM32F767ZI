
can_f767_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025cc  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080027c4  080027c4  000037c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d4  080027d4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027dc  080027dc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027dc  080027dc  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027e0  080027e0  000037e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080027e4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  080027f0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  080027f0  00004078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000066e8  00000000  00000000  0000403a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001522  00000000  00000000  0000a722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000600  00000000  00000000  0000bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000464  00000000  00000000  0000c248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b8a  00000000  00000000  0000c6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006de9  00000000  00000000  00032236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea832  00000000  00000000  0003901f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123851  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001704  00000000  00000000  00123894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00124f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	080027ac 	.word	0x080027ac

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	080027ac 	.word	0x080027ac

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96a 	b.w	8000524 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	460c      	mov	r4, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14e      	bne.n	8000312 <__udivmoddi4+0xaa>
 8000274:	4694      	mov	ip, r2
 8000276:	458c      	cmp	ip, r1
 8000278:	4686      	mov	lr, r0
 800027a:	fab2 f282 	clz	r2, r2
 800027e:	d962      	bls.n	8000346 <__udivmoddi4+0xde>
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0320 	rsb	r3, r2, #32
 8000286:	4091      	lsls	r1, r2
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000290:	4319      	orrs	r1, r3
 8000292:	fa00 fe02 	lsl.w	lr, r0, r2
 8000296:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800029a:	fa1f f68c 	uxth.w	r6, ip
 800029e:	fbb1 f4f7 	udiv	r4, r1, r7
 80002a2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002a6:	fb07 1114 	mls	r1, r7, r4, r1
 80002aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ae:	fb04 f106 	mul.w	r1, r4, r6
 80002b2:	4299      	cmp	r1, r3
 80002b4:	d90a      	bls.n	80002cc <__udivmoddi4+0x64>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f104 30ff 	add.w	r0, r4, #4294967295
 80002be:	f080 8112 	bcs.w	80004e6 <__udivmoddi4+0x27e>
 80002c2:	4299      	cmp	r1, r3
 80002c4:	f240 810f 	bls.w	80004e6 <__udivmoddi4+0x27e>
 80002c8:	3c02      	subs	r4, #2
 80002ca:	4463      	add	r3, ip
 80002cc:	1a59      	subs	r1, r3, r1
 80002ce:	fa1f f38e 	uxth.w	r3, lr
 80002d2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002d6:	fb07 1110 	mls	r1, r7, r0, r1
 80002da:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002de:	fb00 f606 	mul.w	r6, r0, r6
 80002e2:	429e      	cmp	r6, r3
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x94>
 80002e6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ea:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ee:	f080 80fc 	bcs.w	80004ea <__udivmoddi4+0x282>
 80002f2:	429e      	cmp	r6, r3
 80002f4:	f240 80f9 	bls.w	80004ea <__udivmoddi4+0x282>
 80002f8:	4463      	add	r3, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	1b9b      	subs	r3, r3, r6
 80002fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000302:	2100      	movs	r1, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0xa6>
 8000306:	40d3      	lsrs	r3, r2
 8000308:	2200      	movs	r2, #0
 800030a:	e9c5 3200 	strd	r3, r2, [r5]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d905      	bls.n	8000322 <__udivmoddi4+0xba>
 8000316:	b10d      	cbz	r5, 800031c <__udivmoddi4+0xb4>
 8000318:	e9c5 0100 	strd	r0, r1, [r5]
 800031c:	2100      	movs	r1, #0
 800031e:	4608      	mov	r0, r1
 8000320:	e7f5      	b.n	800030e <__udivmoddi4+0xa6>
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d146      	bne.n	80003b8 <__udivmoddi4+0x150>
 800032a:	42a3      	cmp	r3, r4
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xcc>
 800032e:	4290      	cmp	r0, r2
 8000330:	f0c0 80f0 	bcc.w	8000514 <__udivmoddi4+0x2ac>
 8000334:	1a86      	subs	r6, r0, r2
 8000336:	eb64 0303 	sbc.w	r3, r4, r3
 800033a:	2001      	movs	r0, #1
 800033c:	2d00      	cmp	r5, #0
 800033e:	d0e6      	beq.n	800030e <__udivmoddi4+0xa6>
 8000340:	e9c5 6300 	strd	r6, r3, [r5]
 8000344:	e7e3      	b.n	800030e <__udivmoddi4+0xa6>
 8000346:	2a00      	cmp	r2, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x204>
 800034c:	eba1 040c 	sub.w	r4, r1, ip
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	fa1f f78c 	uxth.w	r7, ip
 8000358:	2101      	movs	r1, #1
 800035a:	fbb4 f6f8 	udiv	r6, r4, r8
 800035e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000362:	fb08 4416 	mls	r4, r8, r6, r4
 8000366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036a:	fb07 f006 	mul.w	r0, r7, r6
 800036e:	4298      	cmp	r0, r3
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x11c>
 8000372:	eb1c 0303 	adds.w	r3, ip, r3
 8000376:	f106 34ff 	add.w	r4, r6, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x11a>
 800037c:	4298      	cmp	r0, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2b4>
 8000382:	4626      	mov	r6, r4
 8000384:	1a1c      	subs	r4, r3, r0
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb4 f0f8 	udiv	r0, r4, r8
 800038e:	fb08 4410 	mls	r4, r8, r0, r4
 8000392:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000396:	fb00 f707 	mul.w	r7, r0, r7
 800039a:	429f      	cmp	r7, r3
 800039c:	d908      	bls.n	80003b0 <__udivmoddi4+0x148>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 34ff 	add.w	r4, r0, #4294967295
 80003a6:	d202      	bcs.n	80003ae <__udivmoddi4+0x146>
 80003a8:	429f      	cmp	r7, r3
 80003aa:	f200 80b0 	bhi.w	800050e <__udivmoddi4+0x2a6>
 80003ae:	4620      	mov	r0, r4
 80003b0:	1bdb      	subs	r3, r3, r7
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	e7a5      	b.n	8000304 <__udivmoddi4+0x9c>
 80003b8:	f1c1 0620 	rsb	r6, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 f706 	lsr.w	r7, r2, r6
 80003c2:	431f      	orrs	r7, r3
 80003c4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c8:	fa04 f301 	lsl.w	r3, r4, r1
 80003cc:	ea43 030c 	orr.w	r3, r3, ip
 80003d0:	40f4      	lsrs	r4, r6
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	0c38      	lsrs	r0, r7, #16
 80003d8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003dc:	fbb4 fef0 	udiv	lr, r4, r0
 80003e0:	fa1f fc87 	uxth.w	ip, r7
 80003e4:	fb00 441e 	mls	r4, r0, lr, r4
 80003e8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ec:	fb0e f90c 	mul.w	r9, lr, ip
 80003f0:	45a1      	cmp	r9, r4
 80003f2:	fa02 f201 	lsl.w	r2, r2, r1
 80003f6:	d90a      	bls.n	800040e <__udivmoddi4+0x1a6>
 80003f8:	193c      	adds	r4, r7, r4
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003fe:	f080 8084 	bcs.w	800050a <__udivmoddi4+0x2a2>
 8000402:	45a1      	cmp	r9, r4
 8000404:	f240 8081 	bls.w	800050a <__udivmoddi4+0x2a2>
 8000408:	f1ae 0e02 	sub.w	lr, lr, #2
 800040c:	443c      	add	r4, r7
 800040e:	eba4 0409 	sub.w	r4, r4, r9
 8000412:	fa1f f983 	uxth.w	r9, r3
 8000416:	fbb4 f3f0 	udiv	r3, r4, r0
 800041a:	fb00 4413 	mls	r4, r0, r3, r4
 800041e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000422:	fb03 fc0c 	mul.w	ip, r3, ip
 8000426:	45a4      	cmp	ip, r4
 8000428:	d907      	bls.n	800043a <__udivmoddi4+0x1d2>
 800042a:	193c      	adds	r4, r7, r4
 800042c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000430:	d267      	bcs.n	8000502 <__udivmoddi4+0x29a>
 8000432:	45a4      	cmp	ip, r4
 8000434:	d965      	bls.n	8000502 <__udivmoddi4+0x29a>
 8000436:	3b02      	subs	r3, #2
 8000438:	443c      	add	r4, r7
 800043a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800043e:	fba0 9302 	umull	r9, r3, r0, r2
 8000442:	eba4 040c 	sub.w	r4, r4, ip
 8000446:	429c      	cmp	r4, r3
 8000448:	46ce      	mov	lr, r9
 800044a:	469c      	mov	ip, r3
 800044c:	d351      	bcc.n	80004f2 <__udivmoddi4+0x28a>
 800044e:	d04e      	beq.n	80004ee <__udivmoddi4+0x286>
 8000450:	b155      	cbz	r5, 8000468 <__udivmoddi4+0x200>
 8000452:	ebb8 030e 	subs.w	r3, r8, lr
 8000456:	eb64 040c 	sbc.w	r4, r4, ip
 800045a:	fa04 f606 	lsl.w	r6, r4, r6
 800045e:	40cb      	lsrs	r3, r1
 8000460:	431e      	orrs	r6, r3
 8000462:	40cc      	lsrs	r4, r1
 8000464:	e9c5 6400 	strd	r6, r4, [r5]
 8000468:	2100      	movs	r1, #0
 800046a:	e750      	b.n	800030e <__udivmoddi4+0xa6>
 800046c:	f1c2 0320 	rsb	r3, r2, #32
 8000470:	fa20 f103 	lsr.w	r1, r0, r3
 8000474:	fa0c fc02 	lsl.w	ip, ip, r2
 8000478:	fa24 f303 	lsr.w	r3, r4, r3
 800047c:	4094      	lsls	r4, r2
 800047e:	430c      	orrs	r4, r1
 8000480:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000484:	fa00 fe02 	lsl.w	lr, r0, r2
 8000488:	fa1f f78c 	uxth.w	r7, ip
 800048c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000490:	fb08 3110 	mls	r1, r8, r0, r3
 8000494:	0c23      	lsrs	r3, r4, #16
 8000496:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049a:	fb00 f107 	mul.w	r1, r0, r7
 800049e:	4299      	cmp	r1, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x24c>
 80004a2:	eb1c 0303 	adds.w	r3, ip, r3
 80004a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80004aa:	d22c      	bcs.n	8000506 <__udivmoddi4+0x29e>
 80004ac:	4299      	cmp	r1, r3
 80004ae:	d92a      	bls.n	8000506 <__udivmoddi4+0x29e>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4463      	add	r3, ip
 80004b4:	1a5b      	subs	r3, r3, r1
 80004b6:	b2a4      	uxth	r4, r4
 80004b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80004bc:	fb08 3311 	mls	r3, r8, r1, r3
 80004c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004c4:	fb01 f307 	mul.w	r3, r1, r7
 80004c8:	42a3      	cmp	r3, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x276>
 80004cc:	eb1c 0404 	adds.w	r4, ip, r4
 80004d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004d4:	d213      	bcs.n	80004fe <__udivmoddi4+0x296>
 80004d6:	42a3      	cmp	r3, r4
 80004d8:	d911      	bls.n	80004fe <__udivmoddi4+0x296>
 80004da:	3902      	subs	r1, #2
 80004dc:	4464      	add	r4, ip
 80004de:	1ae4      	subs	r4, r4, r3
 80004e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004e4:	e739      	b.n	800035a <__udivmoddi4+0xf2>
 80004e6:	4604      	mov	r4, r0
 80004e8:	e6f0      	b.n	80002cc <__udivmoddi4+0x64>
 80004ea:	4608      	mov	r0, r1
 80004ec:	e706      	b.n	80002fc <__udivmoddi4+0x94>
 80004ee:	45c8      	cmp	r8, r9
 80004f0:	d2ae      	bcs.n	8000450 <__udivmoddi4+0x1e8>
 80004f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7a8      	b.n	8000450 <__udivmoddi4+0x1e8>
 80004fe:	4631      	mov	r1, r6
 8000500:	e7ed      	b.n	80004de <__udivmoddi4+0x276>
 8000502:	4603      	mov	r3, r0
 8000504:	e799      	b.n	800043a <__udivmoddi4+0x1d2>
 8000506:	4630      	mov	r0, r6
 8000508:	e7d4      	b.n	80004b4 <__udivmoddi4+0x24c>
 800050a:	46d6      	mov	lr, sl
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1a6>
 800050e:	4463      	add	r3, ip
 8000510:	3802      	subs	r0, #2
 8000512:	e74d      	b.n	80003b0 <__udivmoddi4+0x148>
 8000514:	4606      	mov	r6, r0
 8000516:	4623      	mov	r3, r4
 8000518:	4608      	mov	r0, r1
 800051a:	e70f      	b.n	800033c <__udivmoddi4+0xd4>
 800051c:	3e02      	subs	r6, #2
 800051e:	4463      	add	r3, ip
 8000520:	e730      	b.n	8000384 <__udivmoddi4+0x11c>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];
//9.2.7 Rx FIFO 0 message pending callback.

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000530:	4b06      	ldr	r3, [pc, #24]	@ (800054c <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 8000532:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000534:	2100      	movs	r1, #0
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f000 fdb4 	bl	80010a4 <HAL_CAN_GetRxMessage>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800053c:	2101      	movs	r1, #1
 800053e:	4805      	ldr	r0, [pc, #20]	@ (8000554 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000540:	f001 fbff 	bl	8001d42 <HAL_GPIO_TogglePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
}
 8000544:	bf00      	nop
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	2000006c 	.word	0x2000006c
 8000550:	20000050 	.word	0x20000050
 8000554:	40020400 	.word	0x40020400

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055c:	f000 faf5 	bl	8000b4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000560:	f000 f81a 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000564:	f000 f8dc 	bl	8000720 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000568:	f000 f886 	bl	8000678 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800056c:	4808      	ldr	r0, [pc, #32]	@ (8000590 <main+0x38>)
 800056e:	f000 fd55 	bl	800101c <HAL_CAN_Start>
  //from HAL SDK docs 9.2.1, argument from 9.3.1
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000572:	2102      	movs	r1, #2
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <main+0x38>)
 8000576:	f000 feb7 	bl	80012e8 <HAL_CAN_ActivateNotification>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800057a:	2180      	movs	r1, #128	@ 0x80
 800057c:	4805      	ldr	r0, [pc, #20]	@ (8000594 <main+0x3c>)
 800057e:	f001 fbe0 	bl	8001d42 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 8000582:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000586:	f000 fb3d 	bl	8000c04 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800058a:	bf00      	nop
 800058c:	e7f5      	b.n	800057a <main+0x22>
 800058e:	bf00      	nop
 8000590:	20000028 	.word	0x20000028
 8000594:	40020400 	.word	0x40020400

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	@ 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2234      	movs	r2, #52	@ 0x34
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f002 f8d4 	bl	8002754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <SystemClock_Config+0xd8>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a2b      	ldr	r2, [pc, #172]	@ (8000670 <SystemClock_Config+0xd8>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005c8:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <SystemClock_Config+0xd8>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d4:	4b27      	ldr	r3, [pc, #156]	@ (8000674 <SystemClock_Config+0xdc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005dc:	4a25      	ldr	r2, [pc, #148]	@ (8000674 <SystemClock_Config+0xdc>)
 80005de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <SystemClock_Config+0xdc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f0:	2302      	movs	r3, #2
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f8:	2310      	movs	r3, #16
 80005fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fc:	2302      	movs	r3, #2
 80005fe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000600:	2300      	movs	r3, #0
 8000602:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000604:	2308      	movs	r3, #8
 8000606:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000608:	23c0      	movs	r3, #192	@ 0xc0
 800060a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800060c:	2304      	movs	r3, #4
 800060e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000610:	2302      	movs	r3, #2
 8000612:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fbfb 	bl	8001e18 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000628:	f000 f9a4 	bl	8000974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800062c:	f001 fba4 	bl	8001d78 <HAL_PWREx_EnableOverDrive>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000636:	f000 f99d 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2103      	movs	r1, #3
 8000656:	4618      	mov	r0, r3
 8000658:	f001 fe8c 	bl	8002374 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000662:	f000 f987 	bl	8000974 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b08a      	sub	sp, #40	@ 0x28
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000680:	4a26      	ldr	r2, [pc, #152]	@ (800071c <MX_CAN1_Init+0xa4>)
 8000682:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 32;
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000686:	2220      	movs	r2, #32
 8000688:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <MX_CAN1_Init+0xa0>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000690:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <MX_CAN1_Init+0xa0>)
 8000698:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800069c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
 800069e:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006a0:	f44f 02a0 	mov.w	r2, #5242880	@ 0x500000
 80006a4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80006a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80006ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80006b2:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80006b8:	4b17      	ldr	r3, [pc, #92]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006c4:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006ca:	4813      	ldr	r0, [pc, #76]	@ (8000718 <MX_CAN1_Init+0xa0>)
 80006cc:	f000 fabe 	bl	8000c4c <HAL_CAN_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80006d6:	f000 f94d 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  //Filter for KW45's 0x123 messages
  CAN_FilterTypeDef CanFilter0;
  CanFilter0.FilterActivation = CAN_FILTER_ENABLE;
 80006da:	2301      	movs	r3, #1
 80006dc:	623b      	str	r3, [r7, #32]
  CanFilter0.FilterBank = 18;
 80006de:	2312      	movs	r3, #18
 80006e0:	617b      	str	r3, [r7, #20]
  CanFilter0.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  CanFilter0.FilterIdHigh = 0x123<<5;
 80006e6:	f242 4360 	movw	r3, #9312	@ 0x2460
 80006ea:	603b      	str	r3, [r7, #0]
  CanFilter0.FilterIdLow = 0x0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	607b      	str	r3, [r7, #4]
  CanFilter0.FilterMaskIdHigh = 0x123<<5;
 80006f0:	f242 4360 	movw	r3, #9312	@ 0x2460
 80006f4:	60bb      	str	r3, [r7, #8]
  CanFilter0.FilterMaskIdLow = 0x0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  CanFilter0.FilterMode = CAN_FILTERMODE_IDMASK;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61bb      	str	r3, [r7, #24]
  CanFilter0.FilterScale = CAN_FILTERSCALE_32BIT;
 80006fe:	2301      	movs	r3, #1
 8000700:	61fb      	str	r3, [r7, #28]
  CanFilter0.SlaveStartFilterBank = 20;
 8000702:	2314      	movs	r3, #20
 8000704:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_CAN_ConfigFilter(&hcan1, &CanFilter0);
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <MX_CAN1_Init+0xa0>)
 800070c:	f000 fb9a 	bl	8000e44 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN1_Init 2 */

}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000028 	.word	0x20000028
 800071c:	40006400 	.word	0x40006400

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b89      	ldr	r3, [pc, #548]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a88      	ldr	r2, [pc, #544]	@ (800095c <MX_GPIO_Init+0x23c>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b86      	ldr	r3, [pc, #536]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b83      	ldr	r3, [pc, #524]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a82      	ldr	r2, [pc, #520]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b80      	ldr	r3, [pc, #512]	@ (800095c <MX_GPIO_Init+0x23c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b7d      	ldr	r3, [pc, #500]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a7c      	ldr	r2, [pc, #496]	@ (800095c <MX_GPIO_Init+0x23c>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b7a      	ldr	r3, [pc, #488]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b77      	ldr	r3, [pc, #476]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a76      	ldr	r2, [pc, #472]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b74      	ldr	r3, [pc, #464]	@ (800095c <MX_GPIO_Init+0x23c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b71      	ldr	r3, [pc, #452]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a70      	ldr	r2, [pc, #448]	@ (800095c <MX_GPIO_Init+0x23c>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b6e      	ldr	r3, [pc, #440]	@ (800095c <MX_GPIO_Init+0x23c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	4b6b      	ldr	r3, [pc, #428]	@ (800095c <MX_GPIO_Init+0x23c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a6a      	ldr	r2, [pc, #424]	@ (800095c <MX_GPIO_Init+0x23c>)
 80007b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b68      	ldr	r3, [pc, #416]	@ (800095c <MX_GPIO_Init+0x23c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007cc:	4864      	ldr	r0, [pc, #400]	@ (8000960 <MX_GPIO_Init+0x240>)
 80007ce:	f001 fa9f 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	@ 0x40
 80007d6:	4863      	ldr	r0, [pc, #396]	@ (8000964 <MX_GPIO_Init+0x244>)
 80007d8:	f001 fa9a 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2180      	movs	r1, #128	@ 0x80
 80007e0:	4861      	ldr	r0, [pc, #388]	@ (8000968 <MX_GPIO_Init+0x248>)
 80007e2:	f001 fa95 	bl	8001d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	4619      	mov	r1, r3
 80007fc:	485b      	ldr	r0, [pc, #364]	@ (800096c <MX_GPIO_Init+0x24c>)
 80007fe:	f001 f8db 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000802:	2332      	movs	r3, #50	@ 0x32
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000812:	230b      	movs	r3, #11
 8000814:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4853      	ldr	r0, [pc, #332]	@ (800096c <MX_GPIO_Init+0x24c>)
 800081e:	f001 f8cb 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000822:	2386      	movs	r3, #134	@ 0x86
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000832:	230b      	movs	r3, #11
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	484c      	ldr	r0, [pc, #304]	@ (8000970 <MX_GPIO_Init+0x250>)
 800083e:	f001 f8bb 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000842:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000848:	2301      	movs	r3, #1
 800084a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	4841      	ldr	r0, [pc, #260]	@ (8000960 <MX_GPIO_Init+0x240>)
 800085c:	f001 f8ac 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	2300      	movs	r3, #0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800086e:	2303      	movs	r3, #3
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000872:	230b      	movs	r3, #11
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4838      	ldr	r0, [pc, #224]	@ (8000960 <MX_GPIO_Init+0x240>)
 800087e:	f001 f89b 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000882:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000894:	2307      	movs	r3, #7
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4832      	ldr	r0, [pc, #200]	@ (8000968 <MX_GPIO_Init+0x248>)
 80008a0:	f001 f88a 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	482a      	ldr	r0, [pc, #168]	@ (8000964 <MX_GPIO_Init+0x244>)
 80008bc:	f001 f87c 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4824      	ldr	r0, [pc, #144]	@ (8000964 <MX_GPIO_Init+0x244>)
 80008d4:	f001 f870 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ea:	230a      	movs	r3, #10
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	481e      	ldr	r0, [pc, #120]	@ (8000970 <MX_GPIO_Init+0x250>)
 80008f6:	f001 f85f 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4818      	ldr	r0, [pc, #96]	@ (8000970 <MX_GPIO_Init+0x250>)
 8000910:	f001 f852 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000914:	2380      	movs	r3, #128	@ 0x80
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	480f      	ldr	r0, [pc, #60]	@ (8000968 <MX_GPIO_Init+0x248>)
 800092c:	f001 f844 	bl	80019b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000930:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000942:	230b      	movs	r3, #11
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_GPIO_Init+0x244>)
 800094e:	f001 f833 	bl	80019b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	@ 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40021800 	.word	0x40021800
 8000968:	40020c00 	.word	0x40020c00
 800096c:	40020800 	.word	0x40020800
 8000970:	40020000 	.word	0x40020000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <HAL_MspInit+0x44>)
 8000988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098a:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000990:	6413      	str	r3, [r2, #64]	@ 0x40
 8000992:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <HAL_MspInit+0x44>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	@ (80009c4 <HAL_MspInit+0x44>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a2:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x44>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800

080009c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	@ 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a54 <HAL_CAN_MspInit+0x8c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d12f      	bne.n	8000a4a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <HAL_CAN_MspInit+0x90>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ee:	4a1a      	ldr	r2, [pc, #104]	@ (8000a58 <HAL_CAN_MspInit+0x90>)
 80009f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <HAL_CAN_MspInit+0x90>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <HAL_CAN_MspInit+0x90>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a14      	ldr	r2, [pc, #80]	@ (8000a58 <HAL_CAN_MspInit+0x90>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <HAL_CAN_MspInit+0x90>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a26:	2303      	movs	r3, #3
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a2a:	2309      	movs	r3, #9
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <HAL_CAN_MspInit+0x94>)
 8000a36:	f000 ffbf 	bl	80019b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f000 ff83 	bl	800194a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a44:	2014      	movs	r0, #20
 8000a46:	f000 ff9c 	bl	8001982 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40006400 	.word	0x40006400
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40020c00 	.word	0x40020c00

08000a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <NMI_Handler+0x4>

08000a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6c:	bf00      	nop
 8000a6e:	e7fd      	b.n	8000a6c <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	bf00      	nop
 8000a76:	e7fd      	b.n	8000a74 <MemManage_Handler+0x4>

08000a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7c:	bf00      	nop
 8000a7e:	e7fd      	b.n	8000a7c <BusFault_Handler+0x4>

08000a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <UsageFault_Handler+0x4>

08000a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr

08000ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab6:	f000 f885 	bl	8000bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ac4:	4802      	ldr	r0, [pc, #8]	@ (8000ad0 <CAN1_RX0_IRQHandler+0x10>)
 8000ac6:	f000 fc35 	bl	8001334 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000028 	.word	0x20000028

08000ad4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000afc:	f7ff ffea 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 fe1d 	bl	8002764 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd15 	bl	8000558 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b3c:	080027e4 	.word	0x080027e4
  ldr r2, =_sbss
 8000b40:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b44:	20000078 	.word	0x20000078

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>

08000b4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4e:	2003      	movs	r0, #3
 8000b50:	f000 fef0 	bl	8001934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f000 f805 	bl	8000b64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b5a:	f7ff ff11 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x54>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_InitTick+0x58>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 ff0b 	bl	800199e <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00e      	b.n	8000bb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b0f      	cmp	r3, #15
 8000b96:	d80a      	bhi.n	8000bae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f000 fed3 	bl	800194a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba4:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <HAL_InitTick+0x5c>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000baa:	2300      	movs	r3, #0
 8000bac:	e000      	b.n	8000bb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000000 	.word	0x20000000
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x20>)
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	4a04      	ldr	r2, [pc, #16]	@ (8000be8 <HAL_IncTick+0x24>)
 8000bd6:	6013      	str	r3, [r2, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008
 8000be8:	20000074 	.word	0x20000074

08000bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf0:	4b03      	ldr	r3, [pc, #12]	@ (8000c00 <HAL_GetTick+0x14>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	20000074 	.word	0x20000074

08000c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c0c:	f7ff ffee 	bl	8000bec <HAL_GetTick>
 8000c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1c:	d005      	beq.n	8000c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_Delay+0x44>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	461a      	mov	r2, r3
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4413      	add	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c2a:	bf00      	nop
 8000c2c:	f7ff ffde 	bl	8000bec <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	68fa      	ldr	r2, [r7, #12]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d8f7      	bhi.n	8000c2c <HAL_Delay+0x28>
  {
  }
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d101      	bne.n	8000c5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e0ed      	b.n	8000e3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d102      	bne.n	8000c70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff feac 	bl	80009c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f042 0201 	orr.w	r2, r2, #1
 8000c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c80:	f7ff ffb4 	bl	8000bec <HAL_GetTick>
 8000c84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c86:	e012      	b.n	8000cae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c88:	f7ff ffb0 	bl	8000bec <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b0a      	cmp	r3, #10
 8000c94:	d90b      	bls.n	8000cae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2205      	movs	r2, #5
 8000ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e0c5      	b.n	8000e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0301 	and.w	r3, r3, #1
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0e5      	beq.n	8000c88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f022 0202 	bic.w	r2, r2, #2
 8000cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ccc:	f7ff ff8e 	bl	8000bec <HAL_GetTick>
 8000cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cd2:	e012      	b.n	8000cfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cd4:	f7ff ff8a 	bl	8000bec <HAL_GetTick>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	1ad3      	subs	r3, r2, r3
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d90b      	bls.n	8000cfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2205      	movs	r2, #5
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e09f      	b.n	8000e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d1e5      	bne.n	8000cd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7e1b      	ldrb	r3, [r3, #24]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d108      	bne.n	8000d22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e007      	b.n	8000d32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	7e5b      	ldrb	r3, [r3, #25]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d108      	bne.n	8000d4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	e007      	b.n	8000d5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7e9b      	ldrb	r3, [r3, #26]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d108      	bne.n	8000d76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0220 	orr.w	r2, r2, #32
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0220 	bic.w	r2, r2, #32
 8000d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7edb      	ldrb	r3, [r3, #27]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0210 	bic.w	r2, r2, #16
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f042 0210 	orr.w	r2, r2, #16
 8000dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7f1b      	ldrb	r3, [r3, #28]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d108      	bne.n	8000dca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f042 0208 	orr.w	r2, r2, #8
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	e007      	b.n	8000dda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f022 0208 	bic.w	r2, r2, #8
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7f5b      	ldrb	r3, [r3, #29]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d108      	bne.n	8000df4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0204 	orr.w	r2, r2, #4
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	e007      	b.n	8000e04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f022 0204 	bic.w	r2, r2, #4
 8000e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689a      	ldr	r2, [r3, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	431a      	orrs	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	ea42 0103 	orr.w	r1, r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	1e5a      	subs	r2, r3, #1
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	430a      	orrs	r2, r1
 8000e28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e38:	2300      	movs	r3, #0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b087      	sub	sp, #28
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e5a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e5c:	7cfb      	ldrb	r3, [r7, #19]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d003      	beq.n	8000e6a <HAL_CAN_ConfigFilter+0x26>
 8000e62:	7cfb      	ldrb	r3, [r7, #19]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	f040 80c7 	bne.w	8000ff8 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a69      	ldr	r2, [pc, #420]	@ (8001014 <HAL_CAN_ConfigFilter+0x1d0>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d001      	beq.n	8000e78 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8000e74:	4b68      	ldr	r3, [pc, #416]	@ (8001018 <HAL_CAN_ConfigFilter+0x1d4>)
 8000e76:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e7e:	f043 0201 	orr.w	r2, r3, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	4a63      	ldr	r2, [pc, #396]	@ (8001018 <HAL_CAN_ConfigFilter+0x1d4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d111      	bne.n	8000eb4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000e96:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	431a      	orrs	r2, r3
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	f003 031f 	and.w	r3, r3, #31
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d123      	bne.n	8000f26 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000efc:	683a      	ldr	r2, [r7, #0]
 8000efe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	3248      	adds	r2, #72	@ 0x48
 8000f06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f1c:	6979      	ldr	r1, [r7, #20]
 8000f1e:	3348      	adds	r3, #72	@ 0x48
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d122      	bne.n	8000f74 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	431a      	orrs	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3248      	adds	r2, #72	@ 0x48
 8000f54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f6a:	6979      	ldr	r1, [r7, #20]
 8000f6c:	3348      	adds	r3, #72	@ 0x48
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	440b      	add	r3, r1
 8000f72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	401a      	ands	r2, r3
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f8e:	e007      	b.n	8000fa0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d109      	bne.n	8000fbc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	401a      	ands	r2, r3
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000fba:	e007      	b.n	8000fcc <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d107      	bne.n	8000fe4 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fea:	f023 0201 	bic.w	r2, r3, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e006      	b.n	8001006 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ffc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
  }
}
 8001006:	4618      	mov	r0, r3
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40003400 	.word	0x40003400
 8001018:	40006400 	.word	0x40006400

0800101c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b01      	cmp	r3, #1
 800102e:	d12e      	bne.n	800108e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2202      	movs	r2, #2
 8001034:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001048:	f7ff fdd0 	bl	8000bec <HAL_GetTick>
 800104c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800104e:	e012      	b.n	8001076 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001050:	f7ff fdcc 	bl	8000bec <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b0a      	cmp	r3, #10
 800105c:	d90b      	bls.n	8001076 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001062:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2205      	movs	r2, #5
 800106e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e012      	b.n	800109c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1e5      	bne.n	8001050 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e006      	b.n	800109c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001092:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
  }
}
 800109c:	4618      	mov	r0, r3
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80010a4:	b480      	push	{r7}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
 80010b0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010b8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80010ba:	7dfb      	ldrb	r3, [r7, #23]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d003      	beq.n	80010c8 <HAL_CAN_GetRxMessage+0x24>
 80010c0:	7dfb      	ldrb	r3, [r7, #23]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	f040 8103 	bne.w	80012ce <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d10e      	bne.n	80010ec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d116      	bne.n	800110a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0f7      	b.n	80012dc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d107      	bne.n	800110a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e0e8      	b.n	80012dc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	331b      	adds	r3, #27
 8001112:	011b      	lsls	r3, r3, #4
 8001114:	4413      	add	r3, r2
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0204 	and.w	r2, r3, #4
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	331b      	adds	r3, #27
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4413      	add	r3, r2
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	0d5b      	lsrs	r3, r3, #21
 8001138:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e00b      	b.n	800115a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	331b      	adds	r3, #27
 800114a:	011b      	lsls	r3, r3, #4
 800114c:	4413      	add	r3, r2
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	331b      	adds	r3, #27
 8001162:	011b      	lsls	r3, r3, #4
 8001164:	4413      	add	r3, r2
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0202 	and.w	r2, r3, #2
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	331b      	adds	r3, #27
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	4413      	add	r3, r2
 800117c:	3304      	adds	r3, #4
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0308 	and.w	r3, r3, #8
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2208      	movs	r2, #8
 800118c:	611a      	str	r2, [r3, #16]
 800118e:	e00b      	b.n	80011a8 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	331b      	adds	r3, #27
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	4413      	add	r3, r2
 800119c:	3304      	adds	r3, #4
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 020f 	and.w	r2, r3, #15
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	331b      	adds	r3, #27
 80011b0:	011b      	lsls	r3, r3, #4
 80011b2:	4413      	add	r3, r2
 80011b4:	3304      	adds	r3, #4
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	331b      	adds	r3, #27
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	4413      	add	r3, r2
 80011cc:	3304      	adds	r3, #4
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	0c1b      	lsrs	r3, r3, #16
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4413      	add	r3, r2
 80011f8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	0a1a      	lsrs	r2, r3, #8
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	4413      	add	r3, r2
 8001212:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	0c1a      	lsrs	r2, r3, #16
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	3302      	adds	r3, #2
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	4413      	add	r3, r2
 800122c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0e1a      	lsrs	r2, r3, #24
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	3303      	adds	r3, #3
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	011b      	lsls	r3, r3, #4
 8001244:	4413      	add	r3, r2
 8001246:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3304      	adds	r3, #4
 8001250:	b2d2      	uxtb	r2, r2
 8001252:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	011b      	lsls	r3, r3, #4
 800125c:	4413      	add	r3, r2
 800125e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	0a1a      	lsrs	r2, r3, #8
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	3305      	adds	r3, #5
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	011b      	lsls	r3, r3, #4
 8001276:	4413      	add	r3, r2
 8001278:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0c1a      	lsrs	r2, r3, #16
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3306      	adds	r3, #6
 8001284:	b2d2      	uxtb	r2, r2
 8001286:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	011b      	lsls	r3, r3, #4
 8001290:	4413      	add	r3, r2
 8001292:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0e1a      	lsrs	r2, r3, #24
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	3307      	adds	r3, #7
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d108      	bne.n	80012ba <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0220 	orr.w	r2, r2, #32
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	e007      	b.n	80012ca <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0220 	orr.w	r2, r2, #32
 80012c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e006      	b.n	80012dc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
  }
}
 80012dc:	4618      	mov	r0, r3
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012f8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d002      	beq.n	8001306 <HAL_CAN_ActivateNotification+0x1e>
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d109      	bne.n	800131a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6959      	ldr	r1, [r3, #20]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e006      	b.n	8001328 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
  }
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	@ 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d07c      	beq.n	8001474 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d023      	beq.n	80013cc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2201      	movs	r2, #1
 800138a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 f983 	bl	80016a2 <HAL_CAN_TxMailbox0CompleteCallback>
 800139c:	e016      	b.n	80013cc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d004      	beq.n	80013b2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80013b0:	e00c      	b.n	80013cc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80013bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80013c4:	e002      	b.n	80013cc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f989 	bl	80016de <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d024      	beq.n	8001420 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f963 	bl	80016b6 <HAL_CAN_TxMailbox1CompleteCallback>
 80013f0:	e016      	b.n	8001420 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d004      	beq.n	8001406 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
 8001404:	e00c      	b.n	8001420 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001406:	69bb      	ldr	r3, [r7, #24]
 8001408:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800140c:	2b00      	cmp	r3, #0
 800140e:	d004      	beq.n	800141a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001412:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001416:	627b      	str	r3, [r7, #36]	@ 0x24
 8001418:	e002      	b.n	8001420 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f000 f969 	bl	80016f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d024      	beq.n	8001474 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001432:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f943 	bl	80016ca <HAL_CAN_TxMailbox2CompleteCallback>
 8001444:	e016      	b.n	8001474 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d004      	beq.n	800145a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
 8001458:	e00c      	b.n	8001474 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
 800146c:	e002      	b.n	8001474 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 f949 	bl	8001706 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f003 0308 	and.w	r3, r3, #8
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00c      	beq.n	8001498 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2210      	movs	r2, #16
 8001496:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	f003 0304 	and.w	r3, r3, #4
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2208      	movs	r2, #8
 80014b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 f930 	bl	800171a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d009      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68db      	ldr	r3, [r3, #12]
 80014ca:	f003 0303 	and.w	r3, r3, #3
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d002      	beq.n	80014d8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff f828 	bl	8000528 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80014d8:	6a3b      	ldr	r3, [r7, #32]
 80014da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00c      	beq.n	80014fc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d007      	beq.n	80014fc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2210      	movs	r2, #16
 80014fa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014fc:	6a3b      	ldr	r3, [r7, #32]
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	f003 0308 	and.w	r3, r3, #8
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2208      	movs	r2, #8
 8001516:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f000 f912 	bl	8001742 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	d009      	beq.n	800153c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d002      	beq.n	800153c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 f8f9 	bl	800172e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800153c:	6a3b      	ldr	r3, [r7, #32]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00b      	beq.n	800155e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	d006      	beq.n	800155e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f000 f8fc 	bl	8001756 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2208      	movs	r2, #8
 8001578:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f8f5 	bl	800176a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d07b      	beq.n	8001682 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d072      	beq.n	800167a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80015a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80015c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c6:	f043 0302 	orr.w	r3, r3, #2
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80015e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d043      	beq.n	800167a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d03e      	beq.n	800167a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001602:	2b60      	cmp	r3, #96	@ 0x60
 8001604:	d02b      	beq.n	800165e <HAL_CAN_IRQHandler+0x32a>
 8001606:	2b60      	cmp	r3, #96	@ 0x60
 8001608:	d82e      	bhi.n	8001668 <HAL_CAN_IRQHandler+0x334>
 800160a:	2b50      	cmp	r3, #80	@ 0x50
 800160c:	d022      	beq.n	8001654 <HAL_CAN_IRQHandler+0x320>
 800160e:	2b50      	cmp	r3, #80	@ 0x50
 8001610:	d82a      	bhi.n	8001668 <HAL_CAN_IRQHandler+0x334>
 8001612:	2b40      	cmp	r3, #64	@ 0x40
 8001614:	d019      	beq.n	800164a <HAL_CAN_IRQHandler+0x316>
 8001616:	2b40      	cmp	r3, #64	@ 0x40
 8001618:	d826      	bhi.n	8001668 <HAL_CAN_IRQHandler+0x334>
 800161a:	2b30      	cmp	r3, #48	@ 0x30
 800161c:	d010      	beq.n	8001640 <HAL_CAN_IRQHandler+0x30c>
 800161e:	2b30      	cmp	r3, #48	@ 0x30
 8001620:	d822      	bhi.n	8001668 <HAL_CAN_IRQHandler+0x334>
 8001622:	2b10      	cmp	r3, #16
 8001624:	d002      	beq.n	800162c <HAL_CAN_IRQHandler+0x2f8>
 8001626:	2b20      	cmp	r3, #32
 8001628:	d005      	beq.n	8001636 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800162a:	e01d      	b.n	8001668 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162e:	f043 0308 	orr.w	r3, r3, #8
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001634:	e019      	b.n	800166a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800163e:	e014      	b.n	800166a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001648:	e00f      	b.n	800166a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001650:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001652:	e00a      	b.n	800166a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800165a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800165c:	e005      	b.n	800166a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800165e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001666:	e000      	b.n	800166a <HAL_CAN_IRQHandler+0x336>
            break;
 8001668:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001678:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2204      	movs	r2, #4
 8001680:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	2b00      	cmp	r3, #0
 8001686:	d008      	beq.n	800169a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800168c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f000 f872 	bl	800177e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b083      	sub	sp, #12
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016b6:	b480      	push	{r7}
 80016b8:	b083      	sub	sp, #12
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800171a:	b480      	push	{r7}
 800171c:	b083      	sub	sp, #12
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017bc:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <__NVIC_SetPriorityGrouping+0x40>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00
 80017d8:	05fa0000 	.word	0x05fa0000

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
	...

080018f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001900:	d301      	bcc.n	8001906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001902:	2301      	movs	r3, #1
 8001904:	e00f      	b.n	8001926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001906:	4a0a      	ldr	r2, [pc, #40]	@ (8001930 <SysTick_Config+0x40>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3b01      	subs	r3, #1
 800190c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190e:	210f      	movs	r1, #15
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f7ff ff8e 	bl	8001834 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001918:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <SysTick_Config+0x40>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <SysTick_Config+0x40>)
 8001920:	2207      	movs	r2, #7
 8001922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	e000e010 	.word	0xe000e010

08001934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ff29 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800195c:	f7ff ff3e 	bl	80017dc <__NVIC_GetPriorityGrouping>
 8001960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	68b9      	ldr	r1, [r7, #8]
 8001966:	6978      	ldr	r0, [r7, #20]
 8001968:	f7ff ff8e 	bl	8001888 <NVIC_EncodePriority>
 800196c:	4602      	mov	r2, r0
 800196e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff5d 	bl	8001834 <__NVIC_SetPriority>
}
 800197a:	bf00      	nop
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	4618      	mov	r0, r3
 8001992:	f7ff ff31 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b082      	sub	sp, #8
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ffa2 	bl	80018f0 <SysTick_Config>
 80019ac:	4603      	mov	r3, r0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b089      	sub	sp, #36	@ 0x24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e175      	b.n	8001cc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 8164 	bne.w	8001cbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x56>
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80be 	beq.w	8001cbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	4b66      	ldr	r3, [pc, #408]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a65      	ldr	r2, [pc, #404]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b63      	ldr	r3, [pc, #396]	@ (8001cdc <HAL_GPIO_Init+0x324>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b5a:	4a61      	ldr	r2, [pc, #388]	@ (8001ce0 <HAL_GPIO_Init+0x328>)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	089b      	lsrs	r3, r3, #2
 8001b60:	3302      	adds	r3, #2
 8001b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	220f      	movs	r2, #15
 8001b72:	fa02 f303 	lsl.w	r3, r2, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a58      	ldr	r2, [pc, #352]	@ (8001ce4 <HAL_GPIO_Init+0x32c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d037      	beq.n	8001bf6 <HAL_GPIO_Init+0x23e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a57      	ldr	r2, [pc, #348]	@ (8001ce8 <HAL_GPIO_Init+0x330>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d031      	beq.n	8001bf2 <HAL_GPIO_Init+0x23a>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_GPIO_Init+0x334>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d02b      	beq.n	8001bee <HAL_GPIO_Init+0x236>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a55      	ldr	r2, [pc, #340]	@ (8001cf0 <HAL_GPIO_Init+0x338>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x232>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a54      	ldr	r2, [pc, #336]	@ (8001cf4 <HAL_GPIO_Init+0x33c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x22e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a53      	ldr	r2, [pc, #332]	@ (8001cf8 <HAL_GPIO_Init+0x340>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x22a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a52      	ldr	r2, [pc, #328]	@ (8001cfc <HAL_GPIO_Init+0x344>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x226>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a51      	ldr	r2, [pc, #324]	@ (8001d00 <HAL_GPIO_Init+0x348>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x222>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a50      	ldr	r2, [pc, #320]	@ (8001d04 <HAL_GPIO_Init+0x34c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x21e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d08 <HAL_GPIO_Init+0x350>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x21a>
 8001bce:	2309      	movs	r3, #9
 8001bd0:	e012      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bd2:	230a      	movs	r3, #10
 8001bd4:	e010      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bd6:	2308      	movs	r3, #8
 8001bd8:	e00e      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bda:	2307      	movs	r3, #7
 8001bdc:	e00c      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bde:	2306      	movs	r3, #6
 8001be0:	e00a      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001be2:	2305      	movs	r3, #5
 8001be4:	e008      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e004      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e002      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e000      	b.n	8001bf8 <HAL_GPIO_Init+0x240>
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	69fa      	ldr	r2, [r7, #28]
 8001bfa:	f002 0203 	and.w	r2, r2, #3
 8001bfe:	0092      	lsls	r2, r2, #2
 8001c00:	4093      	lsls	r3, r2
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c08:	4935      	ldr	r1, [pc, #212]	@ (8001ce0 <HAL_GPIO_Init+0x328>)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	089b      	lsrs	r3, r3, #2
 8001c0e:	3302      	adds	r3, #2
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c16:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4013      	ands	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3a:	4a34      	ldr	r2, [pc, #208]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c40:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c64:	4a29      	ldr	r2, [pc, #164]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6a:	4b28      	ldr	r3, [pc, #160]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <HAL_GPIO_Init+0x354>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	f67f ae86 	bls.w	80019d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3724      	adds	r7, #36	@ 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40020000 	.word	0x40020000
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40020800 	.word	0x40020800
 8001cf0:	40020c00 	.word	0x40020c00
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40021800 	.word	0x40021800
 8001d00:	40021c00 	.word	0x40021c00
 8001d04:	40022000 	.word	0x40022000
 8001d08:	40022400 	.word	0x40022400
 8001d0c:	40013c00 	.word	0x40013c00

08001d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	807b      	strh	r3, [r7, #2]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d20:	787b      	ldrb	r3, [r7, #1]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d003      	beq.n	8001d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001d2c:	e003      	b.n	8001d36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001d2e:	887b      	ldrh	r3, [r7, #2]
 8001d30:	041a      	lsls	r2, r3, #16
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	619a      	str	r2, [r3, #24]
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b085      	sub	sp, #20
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d54:	887a      	ldrh	r2, [r7, #2]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	400b      	ands	r3, r1
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d82:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d86:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8e:	4b20      	ldr	r3, [pc, #128]	@ (8001e10 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da6:	f7fe ff21 	bl	8000bec <HAL_GetTick>
 8001daa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dac:	e009      	b.n	8001dc2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001dae:	f7fe ff1d 	bl	8000bec <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dbc:	d901      	bls.n	8001dc2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e022      	b.n	8001e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dce:	d1ee      	bne.n	8001dae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dda:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ddc:	f7fe ff06 	bl	8000bec <HAL_GetTick>
 8001de0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001de2:	e009      	b.n	8001df8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001de4:	f7fe ff02 	bl	8000bec <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001df2:	d901      	bls.n	8001df8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e007      	b.n	8001e08 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001e04:	d1ee      	bne.n	8001de4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40007000 	.word	0x40007000

08001e18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e29b      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8087 	beq.w	8001f4a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e3c:	4b96      	ldr	r3, [pc, #600]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d00c      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e48:	4b93      	ldr	r3, [pc, #588]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 030c 	and.w	r3, r3, #12
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d112      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62>
 8001e54:	4b90      	ldr	r3, [pc, #576]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e60:	d10b      	bne.n	8001e7a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e62:	4b8d      	ldr	r3, [pc, #564]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d06c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x130>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d168      	bne.n	8001f48 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e275      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e82:	d106      	bne.n	8001e92 <HAL_RCC_OscConfig+0x7a>
 8001e84:	4b84      	ldr	r3, [pc, #528]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a83      	ldr	r2, [pc, #524]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	e02e      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd8>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x9c>
 8001e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	4b7c      	ldr	r3, [pc, #496]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a7b      	ldr	r2, [pc, #492]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001eac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb0:	6013      	str	r3, [r2, #0]
 8001eb2:	e01d      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0xc0>
 8001ebe:	4b76      	ldr	r3, [pc, #472]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a75      	ldr	r2, [pc, #468]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b73      	ldr	r3, [pc, #460]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a72      	ldr	r2, [pc, #456]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0xd8>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a6e      	ldr	r2, [pc, #440]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a6b      	ldr	r2, [pc, #428]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7fe fe78 	bl	8000bec <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7fe fe74 	bl	8000bec <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	@ 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e229      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f12:	4b61      	ldr	r3, [pc, #388]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d0f0      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe8>
 8001f1e:	e014      	b.n	8001f4a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe fe64 	bl	8000bec <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7fe fe60 	bl	8000bec <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	@ 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e215      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3a:	4b57      	ldr	r3, [pc, #348]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0x110>
 8001f46:	e000      	b.n	8001f4a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d069      	beq.n	800202a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f56:	4b50      	ldr	r3, [pc, #320]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00b      	beq.n	8001f7a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f62:	4b4d      	ldr	r3, [pc, #308]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d11c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x190>
 8001f6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d116      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f7a:	4b47      	ldr	r3, [pc, #284]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d005      	beq.n	8001f92 <HAL_RCC_OscConfig+0x17a>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e1e9      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b41      	ldr	r3, [pc, #260]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	493d      	ldr	r1, [pc, #244]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa6:	e040      	b.n	800202a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d023      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fb0:	4b39      	ldr	r3, [pc, #228]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a38      	ldr	r2, [pc, #224]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fe16 	bl	8000bec <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7fe fe12 	bl	8000bec <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e1c7      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd6:	4b30      	ldr	r3, [pc, #192]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4929      	ldr	r1, [pc, #164]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
 8001ff6:	e018      	b.n	800202a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ff8:	4b27      	ldr	r3, [pc, #156]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a26      	ldr	r2, [pc, #152]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002004:	f7fe fdf2 	bl	8000bec <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800200c:	f7fe fdee 	bl	8000bec <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1a3      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1f0      	bne.n	800200c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d038      	beq.n	80020a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d019      	beq.n	8002072 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800203e:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8002040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002042:	4a15      	ldr	r2, [pc, #84]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204a:	f7fe fdcf 	bl	8000bec <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002052:	f7fe fdcb 	bl	8000bec <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e180      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002064:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8002066:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x23a>
 8002070:	e01a      	b.n	80020a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8002074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002076:	4a08      	ldr	r2, [pc, #32]	@ (8002098 <HAL_RCC_OscConfig+0x280>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7fe fdb5 	bl	8000bec <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002086:	f7fe fdb1 	bl	8000bec <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d903      	bls.n	800209c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e166      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
 8002098:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209c:	4b92      	ldr	r3, [pc, #584]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800209e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a4 	beq.w	80021fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4b8c      	ldr	r3, [pc, #560]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10d      	bne.n	80020de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	4b89      	ldr	r3, [pc, #548]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	4a88      	ldr	r2, [pc, #544]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80020c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ce:	4b86      	ldr	r3, [pc, #536]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020de:	4b83      	ldr	r3, [pc, #524]	@ (80022ec <HAL_RCC_OscConfig+0x4d4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d118      	bne.n	800211c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80020ea:	4b80      	ldr	r3, [pc, #512]	@ (80022ec <HAL_RCC_OscConfig+0x4d4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7f      	ldr	r2, [pc, #508]	@ (80022ec <HAL_RCC_OscConfig+0x4d4>)
 80020f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020f6:	f7fe fd79 	bl	8000bec <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020fe:	f7fe fd75 	bl	8000bec <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b64      	cmp	r3, #100	@ 0x64
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e12a      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002110:	4b76      	ldr	r3, [pc, #472]	@ (80022ec <HAL_RCC_OscConfig+0x4d4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d0f0      	beq.n	80020fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d106      	bne.n	8002132 <HAL_RCC_OscConfig+0x31a>
 8002124:	4b70      	ldr	r3, [pc, #448]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	4a6f      	ldr	r2, [pc, #444]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800212a:	f043 0301 	orr.w	r3, r3, #1
 800212e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002130:	e02d      	b.n	800218e <HAL_RCC_OscConfig+0x376>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x33c>
 800213a:	4b6b      	ldr	r3, [pc, #428]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	4a6a      	ldr	r2, [pc, #424]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6713      	str	r3, [r2, #112]	@ 0x70
 8002146:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	4a67      	ldr	r2, [pc, #412]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800214c:	f023 0304 	bic.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	@ 0x70
 8002152:	e01c      	b.n	800218e <HAL_RCC_OscConfig+0x376>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b05      	cmp	r3, #5
 800215a:	d10c      	bne.n	8002176 <HAL_RCC_OscConfig+0x35e>
 800215c:	4b62      	ldr	r3, [pc, #392]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800215e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002160:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6713      	str	r3, [r2, #112]	@ 0x70
 8002168:	4b5f      	ldr	r3, [pc, #380]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a5e      	ldr	r2, [pc, #376]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	e00b      	b.n	800218e <HAL_RCC_OscConfig+0x376>
 8002176:	4b5c      	ldr	r3, [pc, #368]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800217a:	4a5b      	ldr	r2, [pc, #364]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	6713      	str	r3, [r2, #112]	@ 0x70
 8002182:	4b59      	ldr	r3, [pc, #356]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002188:	f023 0304 	bic.w	r3, r3, #4
 800218c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d015      	beq.n	80021c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002196:	f7fe fd29 	bl	8000bec <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219c:	e00a      	b.n	80021b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219e:	f7fe fd25 	bl	8000bec <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e0d8      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	4b4c      	ldr	r3, [pc, #304]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0ee      	beq.n	800219e <HAL_RCC_OscConfig+0x386>
 80021c0:	e014      	b.n	80021ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c2:	f7fe fd13 	bl	8000bec <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fd0f 	bl	8000bec <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0c2      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	4b41      	ldr	r3, [pc, #260]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80021e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ec:	7dfb      	ldrb	r3, [r7, #23]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b3d      	ldr	r3, [pc, #244]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	4a3c      	ldr	r2, [pc, #240]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021fc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80ae 	beq.w	8002364 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002208:	4b37      	ldr	r3, [pc, #220]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f003 030c 	and.w	r3, r3, #12
 8002210:	2b08      	cmp	r3, #8
 8002212:	d06d      	beq.n	80022f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d14b      	bne.n	80022b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221c:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a31      	ldr	r2, [pc, #196]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002222:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002228:	f7fe fce0 	bl	8000bec <HAL_GetTick>
 800222c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002230:	f7fe fcdc 	bl	8000bec <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e091      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002242:	4b29      	ldr	r3, [pc, #164]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f0      	bne.n	8002230 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	69da      	ldr	r2, [r3, #28]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225c:	019b      	lsls	r3, r3, #6
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	3b01      	subs	r3, #1
 8002268:	041b      	lsls	r3, r3, #16
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	061b      	lsls	r3, r3, #24
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	071b      	lsls	r3, r3, #28
 800227a:	491b      	ldr	r1, [pc, #108]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002280:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a18      	ldr	r2, [pc, #96]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fcae 	bl	8000bec <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7fe fcaa 	bl	8000bec <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e05f      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d0f0      	beq.n	8002294 <HAL_RCC_OscConfig+0x47c>
 80022b2:	e057      	b.n	8002364 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b0c      	ldr	r3, [pc, #48]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0b      	ldr	r2, [pc, #44]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fc94 	bl	8000bec <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c8:	f7fe fc90 	bl	8000bec <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e045      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022da:	4b03      	ldr	r3, [pc, #12]	@ (80022e8 <HAL_RCC_OscConfig+0x4d0>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x4b0>
 80022e6:	e03d      	b.n	8002364 <HAL_RCC_OscConfig+0x54c>
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <HAL_RCC_OscConfig+0x558>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	699b      	ldr	r3, [r3, #24]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d030      	beq.n	8002360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002308:	429a      	cmp	r2, r3
 800230a:	d129      	bne.n	8002360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	429a      	cmp	r2, r3
 8002318:	d122      	bne.n	8002360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002320:	4013      	ands	r3, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002326:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002328:	4293      	cmp	r3, r2
 800232a:	d119      	bne.n	8002360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002336:	085b      	lsrs	r3, r3, #1
 8002338:	3b01      	subs	r3, #1
 800233a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d10f      	bne.n	8002360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800234a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800234c:	429a      	cmp	r2, r3
 800234e:	d107      	bne.n	8002360 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0d0      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800238c:	4b6a      	ldr	r3, [pc, #424]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	429a      	cmp	r2, r3
 8002398:	d910      	bls.n	80023bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239a:	4b67      	ldr	r3, [pc, #412]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	4965      	ldr	r1, [pc, #404]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023aa:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 030f 	and.w	r3, r3, #15
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0b8      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d020      	beq.n	800240a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d005      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023d4:	4b59      	ldr	r3, [pc, #356]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a58      	ldr	r2, [pc, #352]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80023de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023ec:	4b53      	ldr	r3, [pc, #332]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	4a52      	ldr	r2, [pc, #328]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80023f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80023f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b50      	ldr	r3, [pc, #320]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	494d      	ldr	r1, [pc, #308]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d040      	beq.n	8002498 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800241e:	4b47      	ldr	r3, [pc, #284]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d115      	bne.n	8002456 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e07f      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	4b41      	ldr	r3, [pc, #260]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d109      	bne.n	8002456 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e073      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002446:	4b3d      	ldr	r3, [pc, #244]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e06b      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	4b39      	ldr	r3, [pc, #228]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f023 0203 	bic.w	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	4936      	ldr	r1, [pc, #216]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	4313      	orrs	r3, r2
 8002466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002468:	f7fe fbc0 	bl	8000bec <HAL_GetTick>
 800246c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	e00a      	b.n	8002486 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002470:	f7fe fbbc 	bl	8000bec <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800247e:	4293      	cmp	r3, r2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e053      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002486:	4b2d      	ldr	r3, [pc, #180]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 020c 	and.w	r2, r3, #12
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	429a      	cmp	r2, r3
 8002496:	d1eb      	bne.n	8002470 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002498:	4b27      	ldr	r3, [pc, #156]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d210      	bcs.n	80024c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b24      	ldr	r3, [pc, #144]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	4922      	ldr	r1, [pc, #136]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_RCC_ClockConfig+0x1c4>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e032      	b.n	800252e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024d4:	4b19      	ldr	r3, [pc, #100]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4916      	ldr	r1, [pc, #88]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	490e      	ldr	r1, [pc, #56]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002506:	f000 f821 	bl	800254c <HAL_RCC_GetSysClockFreq>
 800250a:	4602      	mov	r2, r0
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <HAL_RCC_ClockConfig+0x1c8>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 030f 	and.w	r3, r3, #15
 8002516:	490a      	ldr	r1, [pc, #40]	@ (8002540 <HAL_RCC_ClockConfig+0x1cc>)
 8002518:	5ccb      	ldrb	r3, [r1, r3]
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	4a09      	ldr	r2, [pc, #36]	@ (8002544 <HAL_RCC_ClockConfig+0x1d0>)
 8002520:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002522:	4b09      	ldr	r3, [pc, #36]	@ (8002548 <HAL_RCC_ClockConfig+0x1d4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe fb1c 	bl	8000b64 <HAL_InitTick>

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40023c00 	.word	0x40023c00
 800253c:	40023800 	.word	0x40023800
 8002540:	080027c4 	.word	0x080027c4
 8002544:	20000000 	.word	0x20000000
 8002548:	20000004 	.word	0x20000004

0800254c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800254c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002550:	b094      	sub	sp, #80	@ 0x50
 8002552:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	647b      	str	r3, [r7, #68]	@ 0x44
 8002558:	2300      	movs	r3, #0
 800255a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800255c:	2300      	movs	r3, #0
 800255e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002564:	4b79      	ldr	r3, [pc, #484]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b08      	cmp	r3, #8
 800256e:	d00d      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x40>
 8002570:	2b08      	cmp	r3, #8
 8002572:	f200 80e1 	bhi.w	8002738 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x34>
 800257a:	2b04      	cmp	r3, #4
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0x3a>
 800257e:	e0db      	b.n	8002738 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b73      	ldr	r3, [pc, #460]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002584:	e0db      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002586:	4b72      	ldr	r3, [pc, #456]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 8002588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800258a:	e0d8      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800258c:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002594:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002596:	4b6d      	ldr	r3, [pc, #436]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d063      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025a2:	4b6a      	ldr	r3, [pc, #424]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	099b      	lsrs	r3, r3, #6
 80025a8:	2200      	movs	r2, #0
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80025ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80025ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80025be:	4622      	mov	r2, r4
 80025c0:	462b      	mov	r3, r5
 80025c2:	f04f 0000 	mov.w	r0, #0
 80025c6:	f04f 0100 	mov.w	r1, #0
 80025ca:	0159      	lsls	r1, r3, #5
 80025cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025d0:	0150      	lsls	r0, r2, #5
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4621      	mov	r1, r4
 80025d8:	1a51      	subs	r1, r2, r1
 80025da:	6139      	str	r1, [r7, #16]
 80025dc:	4629      	mov	r1, r5
 80025de:	eb63 0301 	sbc.w	r3, r3, r1
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025f0:	4659      	mov	r1, fp
 80025f2:	018b      	lsls	r3, r1, #6
 80025f4:	4651      	mov	r1, sl
 80025f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025fa:	4651      	mov	r1, sl
 80025fc:	018a      	lsls	r2, r1, #6
 80025fe:	4651      	mov	r1, sl
 8002600:	ebb2 0801 	subs.w	r8, r2, r1
 8002604:	4659      	mov	r1, fp
 8002606:	eb63 0901 	sbc.w	r9, r3, r1
 800260a:	f04f 0200 	mov.w	r2, #0
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002616:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800261a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800261e:	4690      	mov	r8, r2
 8002620:	4699      	mov	r9, r3
 8002622:	4623      	mov	r3, r4
 8002624:	eb18 0303 	adds.w	r3, r8, r3
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	462b      	mov	r3, r5
 800262c:	eb49 0303 	adc.w	r3, r9, r3
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800263e:	4629      	mov	r1, r5
 8002640:	028b      	lsls	r3, r1, #10
 8002642:	4621      	mov	r1, r4
 8002644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002648:	4621      	mov	r1, r4
 800264a:	028a      	lsls	r2, r1, #10
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002652:	2200      	movs	r2, #0
 8002654:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002658:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800265c:	f7fd fdec 	bl	8000238 <__aeabi_uldivmod>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4613      	mov	r3, r2
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002668:	e058      	b.n	800271c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b38      	ldr	r3, [pc, #224]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	2200      	movs	r2, #0
 8002672:	4618      	mov	r0, r3
 8002674:	4611      	mov	r1, r2
 8002676:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800267a:	623b      	str	r3, [r7, #32]
 800267c:	2300      	movs	r3, #0
 800267e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002680:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002684:	4642      	mov	r2, r8
 8002686:	464b      	mov	r3, r9
 8002688:	f04f 0000 	mov.w	r0, #0
 800268c:	f04f 0100 	mov.w	r1, #0
 8002690:	0159      	lsls	r1, r3, #5
 8002692:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002696:	0150      	lsls	r0, r2, #5
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4641      	mov	r1, r8
 800269e:	ebb2 0a01 	subs.w	sl, r2, r1
 80026a2:	4649      	mov	r1, r9
 80026a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026bc:	ebb2 040a 	subs.w	r4, r2, sl
 80026c0:	eb63 050b 	sbc.w	r5, r3, fp
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	00eb      	lsls	r3, r5, #3
 80026ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026d2:	00e2      	lsls	r2, r4, #3
 80026d4:	4614      	mov	r4, r2
 80026d6:	461d      	mov	r5, r3
 80026d8:	4643      	mov	r3, r8
 80026da:	18e3      	adds	r3, r4, r3
 80026dc:	603b      	str	r3, [r7, #0]
 80026de:	464b      	mov	r3, r9
 80026e0:	eb45 0303 	adc.w	r3, r5, r3
 80026e4:	607b      	str	r3, [r7, #4]
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026f2:	4629      	mov	r1, r5
 80026f4:	028b      	lsls	r3, r1, #10
 80026f6:	4621      	mov	r1, r4
 80026f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026fc:	4621      	mov	r1, r4
 80026fe:	028a      	lsls	r2, r1, #10
 8002700:	4610      	mov	r0, r2
 8002702:	4619      	mov	r1, r3
 8002704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002706:	2200      	movs	r2, #0
 8002708:	61bb      	str	r3, [r7, #24]
 800270a:	61fa      	str	r2, [r7, #28]
 800270c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002710:	f7fd fd92 	bl	8000238 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800271c:	4b0b      	ldr	r3, [pc, #44]	@ (800274c <HAL_RCC_GetSysClockFreq+0x200>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	0c1b      	lsrs	r3, r3, #16
 8002722:	f003 0303 	and.w	r3, r3, #3
 8002726:	3301      	adds	r3, #1
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800272c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800272e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002730:	fbb2 f3f3 	udiv	r3, r2, r3
 8002734:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002736:	e002      	b.n	800273e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_RCC_GetSysClockFreq+0x204>)
 800273a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800273c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800273e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002740:	4618      	mov	r0, r3
 8002742:	3750      	adds	r7, #80	@ 0x50
 8002744:	46bd      	mov	sp, r7
 8002746:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	00f42400 	.word	0x00f42400

08002754 <memset>:
 8002754:	4402      	add	r2, r0
 8002756:	4603      	mov	r3, r0
 8002758:	4293      	cmp	r3, r2
 800275a:	d100      	bne.n	800275e <memset+0xa>
 800275c:	4770      	bx	lr
 800275e:	f803 1b01 	strb.w	r1, [r3], #1
 8002762:	e7f9      	b.n	8002758 <memset+0x4>

08002764 <__libc_init_array>:
 8002764:	b570      	push	{r4, r5, r6, lr}
 8002766:	4d0d      	ldr	r5, [pc, #52]	@ (800279c <__libc_init_array+0x38>)
 8002768:	4c0d      	ldr	r4, [pc, #52]	@ (80027a0 <__libc_init_array+0x3c>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	2600      	movs	r6, #0
 8002770:	42a6      	cmp	r6, r4
 8002772:	d109      	bne.n	8002788 <__libc_init_array+0x24>
 8002774:	4d0b      	ldr	r5, [pc, #44]	@ (80027a4 <__libc_init_array+0x40>)
 8002776:	4c0c      	ldr	r4, [pc, #48]	@ (80027a8 <__libc_init_array+0x44>)
 8002778:	f000 f818 	bl	80027ac <_init>
 800277c:	1b64      	subs	r4, r4, r5
 800277e:	10a4      	asrs	r4, r4, #2
 8002780:	2600      	movs	r6, #0
 8002782:	42a6      	cmp	r6, r4
 8002784:	d105      	bne.n	8002792 <__libc_init_array+0x2e>
 8002786:	bd70      	pop	{r4, r5, r6, pc}
 8002788:	f855 3b04 	ldr.w	r3, [r5], #4
 800278c:	4798      	blx	r3
 800278e:	3601      	adds	r6, #1
 8002790:	e7ee      	b.n	8002770 <__libc_init_array+0xc>
 8002792:	f855 3b04 	ldr.w	r3, [r5], #4
 8002796:	4798      	blx	r3
 8002798:	3601      	adds	r6, #1
 800279a:	e7f2      	b.n	8002782 <__libc_init_array+0x1e>
 800279c:	080027dc 	.word	0x080027dc
 80027a0:	080027dc 	.word	0x080027dc
 80027a4:	080027dc 	.word	0x080027dc
 80027a8:	080027e0 	.word	0x080027e0

080027ac <_init>:
 80027ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ae:	bf00      	nop
 80027b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027b2:	bc08      	pop	{r3}
 80027b4:	469e      	mov	lr, r3
 80027b6:	4770      	bx	lr

080027b8 <_fini>:
 80027b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ba:	bf00      	nop
 80027bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027be:	bc08      	pop	{r3}
 80027c0:	469e      	mov	lr, r3
 80027c2:	4770      	bx	lr
