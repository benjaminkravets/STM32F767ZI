
uart_isr_dma_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007670  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007980  08007980  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007988  08007988  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08007a04  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  08007aa4  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000522c  200001b4  08007b44  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200053e0  08007b44  000253e0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ec87  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003b48  00000000  00000000  0003ee69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001538  00000000  00000000  000429b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000013e0  00000000  00000000  00043ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00003ed3  00000000  00000000  000452d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018b54  00000000  00000000  000491a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103d13  00000000  00000000  00061cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00165a0a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005be8  00000000  00000000  00165a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08007858 	.word	0x08007858

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08007858 	.word	0x08007858

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fdc5 	bl	80010d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f840 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f9da 	bl	8000908 <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f9ba 	bl	80008cc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000558:	f000 f95a 	bl	8000810 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800055c:	f000 f988 	bl	8000870 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8000560:	f000 f8f6 	bl	8000750 <MX_UART4_Init>
  MX_ETH_Init();
 8000564:	f000 f8a6 	bl	80006b4 <MX_ETH_Init>
  MX_USART2_UART_Init();
 8000568:	f000 f922 	bl	80007b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800056c:	f004 f924 	bl	80047b8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of startUart2Traffic */
  startUart2TrafficHandle = osTimerNew(startUart2TrafficEntry, osTimerOnce, NULL, &startUart2Traffic_attributes);
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <main+0x68>)
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	480e      	ldr	r0, [pc, #56]	; (80005b0 <main+0x6c>)
 8000578:	f004 fa72 	bl	8004a60 <osTimerNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <main+0x70>)
 8000580:	6013      	str	r3, [r2, #0]

  /* creation of sendUart2Traffic */
  sendUart2TrafficHandle = osTimerNew(sendUart2TrafficEntry, osTimerPeriodic, NULL, &sendUart2Traffic_attributes);
 8000582:	4b0d      	ldr	r3, [pc, #52]	; (80005b8 <main+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	2101      	movs	r1, #1
 8000588:	480c      	ldr	r0, [pc, #48]	; (80005bc <main+0x78>)
 800058a:	f004 fa69 	bl	8004a60 <osTimerNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a0b      	ldr	r2, [pc, #44]	; (80005c0 <main+0x7c>)
 8000592:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000594:	4a0b      	ldr	r2, [pc, #44]	; (80005c4 <main+0x80>)
 8000596:	2100      	movs	r1, #0
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <main+0x84>)
 800059a:	f004 f977 	bl	800488c <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0x88>)
 80005a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a4:	f004 f93c 	bl	8004820 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x64>
 80005aa:	bf00      	nop
 80005ac:	080078e0 	.word	0x080078e0
 80005b0:	08000a5d 	.word	0x08000a5d
 80005b4:	200009bc 	.word	0x200009bc
 80005b8:	080078f0 	.word	0x080078f0
 80005bc:	08000a71 	.word	0x08000a71
 80005c0:	200009c0 	.word	0x200009c0
 80005c4:	080078bc 	.word	0x080078bc
 80005c8:	08000a4d 	.word	0x08000a4d
 80005cc:	200009b8 	.word	0x200009b8

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 f870 	bl	80076c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f4:	f002 f820 	bl	8002638 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	4b2c      	ldr	r3, [pc, #176]	; (80006ac <SystemClock_Config+0xdc>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a2b      	ldr	r2, [pc, #172]	; (80006ac <SystemClock_Config+0xdc>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b29      	ldr	r3, [pc, #164]	; (80006ac <SystemClock_Config+0xdc>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000610:	4b27      	ldr	r3, [pc, #156]	; (80006b0 <SystemClock_Config+0xe0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000618:	4a25      	ldr	r2, [pc, #148]	; (80006b0 <SystemClock_Config+0xe0>)
 800061a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b23      	ldr	r3, [pc, #140]	; (80006b0 <SystemClock_Config+0xe0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000630:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000644:	2360      	movs	r3, #96	; 0x60
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800064c:	2304      	movs	r3, #4
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f002 f84d 	bl	80026f8 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 fa0e 	bl	8000a84 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000668:	f001 fff6 	bl	8002658 <HAL_PWREx_EnableOverDrive>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000672:	f000 fa07 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000676:	230f      	movs	r3, #15
 8000678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067a:	2302      	movs	r3, #2
 800067c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2103      	movs	r1, #3
 8000692:	4618      	mov	r0, r3
 8000694:	f002 fade 	bl	8002c54 <HAL_RCC_ClockConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800069e:	f000 f9f1 	bl	8000a84 <Error_Handler>
  }
}
 80006a2:	bf00      	nop
 80006a4:	3750      	adds	r7, #80	; 0x50
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40007000 	.word	0x40007000

080006b4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_ETH_Init+0x84>)
 80006ba:	4a20      	ldr	r2, [pc, #128]	; (800073c <MX_ETH_Init+0x88>)
 80006bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006be:	4b20      	ldr	r3, [pc, #128]	; (8000740 <MX_ETH_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	; (8000740 <MX_ETH_Init+0x8c>)
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_ETH_Init+0x8c>)
 80006cc:	22e1      	movs	r2, #225	; 0xe1
 80006ce:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MX_ETH_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_ETH_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <MX_ETH_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006e2:	4b15      	ldr	r3, [pc, #84]	; (8000738 <MX_ETH_Init+0x84>)
 80006e4:	4a16      	ldr	r2, [pc, #88]	; (8000740 <MX_ETH_Init+0x8c>)
 80006e6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006e8:	4b13      	ldr	r3, [pc, #76]	; (8000738 <MX_ETH_Init+0x84>)
 80006ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006ee:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <MX_ETH_Init+0x84>)
 80006f2:	4a14      	ldr	r2, [pc, #80]	; (8000744 <MX_ETH_Init+0x90>)
 80006f4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <MX_ETH_Init+0x84>)
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_ETH_Init+0x94>)
 80006fa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006fc:	4b0e      	ldr	r3, [pc, #56]	; (8000738 <MX_ETH_Init+0x84>)
 80006fe:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000702:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <MX_ETH_Init+0x84>)
 8000706:	f001 f963 	bl	80019d0 <HAL_ETH_Init>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000710:	f000 f9b8 	bl	8000a84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000714:	2238      	movs	r2, #56	; 0x38
 8000716:	2100      	movs	r1, #0
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ETH_Init+0x98>)
 800071a:	f006 ffd3 	bl	80076c4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_ETH_Init+0x98>)
 8000720:	2221      	movs	r2, #33	; 0x21
 8000722:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_ETH_Init+0x98>)
 8000726:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800072a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_ETH_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000208 	.word	0x20000208
 800073c:	40028000 	.word	0x40028000
 8000740:	200009c4 	.word	0x200009c4
 8000744:	20000114 	.word	0x20000114
 8000748:	20000074 	.word	0x20000074
 800074c:	200001d0 	.word	0x200001d0

08000750 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_UART4_Init+0x58>)
 8000756:	4a15      	ldr	r2, [pc, #84]	; (80007ac <MX_UART4_Init+0x5c>)
 8000758:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <MX_UART4_Init+0x58>)
 800075c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000760:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_UART4_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_UART4_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_UART4_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_UART4_Init+0x58>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_UART4_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_UART4_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_UART4_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_UART4_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_UART4_Init+0x58>)
 8000794:	f003 f8ac 	bl	80038f0 <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f971 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200002b8 	.word	0x200002b8
 80007ac:	40004c00 	.word	0x40004c00

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007b6:	4a15      	ldr	r2, [pc, #84]	; (800080c <MX_USART2_UART_Init+0x5c>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ba:	4b13      	ldr	r3, [pc, #76]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b0b      	ldr	r3, [pc, #44]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_USART2_UART_Init+0x58>)
 80007f4:	f003 f87c 	bl	80038f0 <HAL_UART_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007fe:	f000 f941 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000340 	.word	0x20000340
 800080c:	40004400 	.word	0x40004400

08000810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000814:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000816:	4a15      	ldr	r2, [pc, #84]	; (800086c <MX_USART3_UART_Init+0x5c>)
 8000818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800081c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800082a:	2200      	movs	r2, #0
 800082c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800084c:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_USART3_UART_Init+0x58>)
 8000854:	f003 f84c 	bl	80038f0 <HAL_UART_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800085e:	f000 f911 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200003c8 	.word	0x200003c8
 800086c:	40004800 	.word	0x40004800

08000870 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800087a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087e:	2206      	movs	r2, #6
 8000880:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000884:	2202      	movs	r2, #2
 8000886:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000890:	2202      	movs	r2, #2
 8000892:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000896:	2201      	movs	r2, #1
 8000898:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800089a:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008b2:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	f001 fd77 	bl	80023a6 <HAL_PCD_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008be:	f000 f8e1 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	200004b0 	.word	0x200004b0

080008cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008d2:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_DMA_Init+0x38>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <MX_DMA_Init+0x38>)
 80008d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_DMA_Init+0x38>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2105      	movs	r1, #5
 80008ee:	200d      	movs	r0, #13
 80008f0:	f000 fd4d 	bl	800138e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80008f4:	200d      	movs	r0, #13
 80008f6:	f000 fd66 	bl	80013c6 <HAL_NVIC_EnableIRQ>

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4b47      	ldr	r3, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b44      	ldr	r3, [pc, #272]	; (8000a3c <MX_GPIO_Init+0x134>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x134>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b3b      	ldr	r3, [pc, #236]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b38      	ldr	r3, [pc, #224]	; (8000a3c <MX_GPIO_Init+0x134>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	4b35      	ldr	r3, [pc, #212]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a34      	ldr	r2, [pc, #208]	; (8000a3c <MX_GPIO_Init+0x134>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b32      	ldr	r3, [pc, #200]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800097e:	4b2f      	ldr	r3, [pc, #188]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000984:	f043 0308 	orr.w	r3, r3, #8
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0x134>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0308 	and.w	r3, r3, #8
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x134>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a28      	ldr	r2, [pc, #160]	; (8000a3c <MX_GPIO_Init+0x134>)
 800099c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_GPIO_Init+0x134>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009b4:	4822      	ldr	r0, [pc, #136]	; (8000a40 <MX_GPIO_Init+0x138>)
 80009b6:	f001 fcdd 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2140      	movs	r1, #64	; 0x40
 80009be:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_GPIO_Init+0x13c>)
 80009c0:	f001 fcd8 	bl	8002374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	481b      	ldr	r0, [pc, #108]	; (8000a48 <MX_GPIO_Init+0x140>)
 80009dc:	f001 fb1e 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80009e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_GPIO_Init+0x138>)
 80009fa:	f001 fb0f 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a02:	2301      	movs	r3, #1
 8000a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4619      	mov	r1, r3
 8000a14:	480b      	ldr	r0, [pc, #44]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000a16:	f001 fb01 	bl	800201c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a1a:	2380      	movs	r3, #128	; 0x80
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_GPIO_Init+0x13c>)
 8000a2e:	f001 faf5 	bl	800201c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020400 	.word	0x40020400
 8000a44:	40021800 	.word	0x40021800
 8000a48:	40020800 	.word	0x40020800

08000a4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f003 ffbf 	bl	80049d8 <osDelay>
 8000a5a:	e7fb      	b.n	8000a54 <StartDefaultTask+0x8>

08000a5c <startUart2TrafficEntry>:
  /* USER CODE END 5 */
}

/* startUart2TrafficEntry function */
void startUart2TrafficEntry(void *argument)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUart2TrafficEntry */

  /* USER CODE END startUart2TrafficEntry */
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <sendUart2TrafficEntry>:

/* sendUart2TrafficEntry function */
void sendUart2TrafficEntry(void *argument)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sendUart2TrafficEntry */

  /* USER CODE END sendUart2TrafficEntry */
}
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a10      	ldr	r2, [pc, #64]	; (8000adc <HAL_MspInit+0x4c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_MspInit+0x4c>)
 8000ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fc5e 	bl	800138e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08e      	sub	sp, #56	; 0x38
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a4e      	ldr	r2, [pc, #312]	; (8000c38 <HAL_ETH_MspInit+0x158>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	f040 8096 	bne.w	8000c30 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b04:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b08:	4a4c      	ldr	r2, [pc, #304]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b18:	623b      	str	r3, [r7, #32]
 8000b1a:	6a3b      	ldr	r3, [r7, #32]
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b20:	4a46      	ldr	r2, [pc, #280]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000b26:	6313      	str	r3, [r2, #48]	; 0x30
 8000b28:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	4b41      	ldr	r3, [pc, #260]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b38:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b40:	4b3e      	ldr	r3, [pc, #248]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b48:	61bb      	str	r3, [r7, #24]
 8000b4a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4c:	4b3b      	ldr	r3, [pc, #236]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a3a      	ldr	r2, [pc, #232]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b52:	f043 0304 	orr.w	r3, r3, #4
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30
 8000b58:	4b38      	ldr	r3, [pc, #224]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	617b      	str	r3, [r7, #20]
 8000b62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b35      	ldr	r3, [pc, #212]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b68:	4a34      	ldr	r2, [pc, #208]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000b70:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	613b      	str	r3, [r7, #16]
 8000b7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7c:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b80:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b82:	f043 0302 	orr.w	r3, r3, #2
 8000b86:	6313      	str	r3, [r2, #48]	; 0x30
 8000b88:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	60fb      	str	r3, [r7, #12]
 8000b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_ETH_MspInit+0x15c>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000bac:	2332      	movs	r3, #50	; 0x32
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	481e      	ldr	r0, [pc, #120]	; (8000c40 <HAL_ETH_MspInit+0x160>)
 8000bc8:	f001 fa28 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000bcc:	2386      	movs	r3, #134	; 0x86
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bdc:	230b      	movs	r3, #11
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000be4:	4619      	mov	r1, r3
 8000be6:	4817      	ldr	r0, [pc, #92]	; (8000c44 <HAL_ETH_MspInit+0x164>)
 8000be8:	f001 fa18 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfe:	230b      	movs	r3, #11
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	480f      	ldr	r0, [pc, #60]	; (8000c48 <HAL_ETH_MspInit+0x168>)
 8000c0a:	f001 fa07 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c20:	230b      	movs	r3, #11
 8000c22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4808      	ldr	r0, [pc, #32]	; (8000c4c <HAL_ETH_MspInit+0x16c>)
 8000c2c:	f001 f9f6 	bl	800201c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c30:	bf00      	nop
 8000c32:	3738      	adds	r7, #56	; 0x38
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40028000 	.word	0x40028000
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40021800 	.word	0x40021800

08000c50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0b4      	sub	sp, #208	; 0xd0
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c6c:	2290      	movs	r2, #144	; 0x90
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f006 fd27 	bl	80076c4 <memset>
  if(huart->Instance==UART4)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a9c      	ldr	r2, [pc, #624]	; (8000eec <HAL_UART_MspInit+0x29c>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	f040 808d 	bne.w	8000d9c <HAL_UART_MspInit+0x14c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c90:	4618      	mov	r0, r3
 8000c92:	f002 fa05 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000c9c:	f7ff fef2 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ca0:	4b93      	ldr	r3, [pc, #588]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	4a92      	ldr	r2, [pc, #584]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000ca6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000caa:	6413      	str	r3, [r2, #64]	; 0x40
 8000cac:	4b90      	ldr	r3, [pc, #576]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b8d      	ldr	r3, [pc, #564]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbc:	4a8c      	ldr	r2, [pc, #560]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cbe:	f043 0301 	orr.w	r3, r3, #1
 8000cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc4:	4b8a      	ldr	r3, [pc, #552]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc8:	f003 0301 	and.w	r3, r3, #1
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd0:	4b87      	ldr	r3, [pc, #540]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	4a86      	ldr	r2, [pc, #536]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	6313      	str	r3, [r2, #48]	; 0x30
 8000cdc:	4b84      	ldr	r3, [pc, #528]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce0:	f003 0304 	and.w	r3, r3, #4
 8000ce4:	623b      	str	r3, [r7, #32]
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d00:	2308      	movs	r3, #8
 8000d02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4879      	ldr	r0, [pc, #484]	; (8000ef4 <HAL_UART_MspInit+0x2a4>)
 8000d0e:	f001 f985 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000d2c:	2308      	movs	r3, #8
 8000d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d32:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000d36:	4619      	mov	r1, r3
 8000d38:	486f      	ldr	r0, [pc, #444]	; (8000ef8 <HAL_UART_MspInit+0x2a8>)
 8000d3a:	f001 f96f 	bl	800201c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000d3e:	4b6f      	ldr	r3, [pc, #444]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d40:	4a6f      	ldr	r2, [pc, #444]	; (8000f00 <HAL_UART_MspInit+0x2b0>)
 8000d42:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000d44:	4b6d      	ldr	r3, [pc, #436]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d4a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d4c:	4b6b      	ldr	r3, [pc, #428]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d52:	4b6a      	ldr	r3, [pc, #424]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d58:	4b68      	ldr	r3, [pc, #416]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d60:	4b66      	ldr	r3, [pc, #408]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d66:	4b65      	ldr	r3, [pc, #404]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000d6c:	4b63      	ldr	r3, [pc, #396]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d72:	4b62      	ldr	r3, [pc, #392]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000d7e:	485f      	ldr	r0, [pc, #380]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d80:	f000 fb3c 	bl	80013fc <HAL_DMA_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8000d8a:	f7ff fe7b 	bl	8000a84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a5a      	ldr	r2, [pc, #360]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d92:	675a      	str	r2, [r3, #116]	; 0x74
 8000d94:	4a59      	ldr	r2, [pc, #356]	; (8000efc <HAL_UART_MspInit+0x2ac>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9a:	e0a3      	b.n	8000ee4 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART2)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a58      	ldr	r2, [pc, #352]	; (8000f04 <HAL_UART_MspInit+0x2b4>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d15c      	bne.n	8000e60 <HAL_UART_MspInit+0x210>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000db2:	4618      	mov	r0, r3
 8000db4:	f002 f974 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8000dbe:	f7ff fe61 	bl	8000a84 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dc2:	4b4b      	ldr	r3, [pc, #300]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b48      	ldr	r3, [pc, #288]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b45      	ldr	r3, [pc, #276]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a44      	ldr	r2, [pc, #272]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b42      	ldr	r3, [pc, #264]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	61bb      	str	r3, [r7, #24]
 8000df0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	4b3f      	ldr	r3, [pc, #252]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a3e      	ldr	r2, [pc, #248]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000df8:	f043 0308 	orr.w	r3, r3, #8
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e22:	2307      	movs	r3, #7
 8000e24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4831      	ldr	r0, [pc, #196]	; (8000ef4 <HAL_UART_MspInit+0x2a4>)
 8000e30:	f001 f8f4 	bl	800201c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e34:	2320      	movs	r3, #32
 8000e36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e52:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000e56:	4619      	mov	r1, r3
 8000e58:	482b      	ldr	r0, [pc, #172]	; (8000f08 <HAL_UART_MspInit+0x2b8>)
 8000e5a:	f001 f8df 	bl	800201c <HAL_GPIO_Init>
}
 8000e5e:	e041      	b.n	8000ee4 <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART3)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a29      	ldr	r2, [pc, #164]	; (8000f0c <HAL_UART_MspInit+0x2bc>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d13c      	bne.n	8000ee4 <HAL_UART_MspInit+0x294>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e70:	2300      	movs	r3, #0
 8000e72:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f002 f911 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_UART_MspInit+0x238>
      Error_Handler();
 8000e84:	f7ff fdfe 	bl	8000a84 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e88:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a18      	ldr	r2, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_UART_MspInit+0x2a0>)
 8000eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb0:	f003 0308 	and.w	r3, r3, #8
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000eb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ebc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ed2:	2307      	movs	r3, #7
 8000ed4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ed8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000edc:	4619      	mov	r1, r3
 8000ede:	480a      	ldr	r0, [pc, #40]	; (8000f08 <HAL_UART_MspInit+0x2b8>)
 8000ee0:	f001 f89c 	bl	800201c <HAL_GPIO_Init>
}
 8000ee4:	bf00      	nop
 8000ee6:	37d0      	adds	r7, #208	; 0xd0
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40004c00 	.word	0x40004c00
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	20000450 	.word	0x20000450
 8000f00:	40026040 	.word	0x40026040
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40020c00 	.word	0x40020c00
 8000f0c:	40004800 	.word	0x40004800

08000f10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b0ae      	sub	sp, #184	; 0xb8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 0314 	add.w	r3, r7, #20
 8000f2c:	2290      	movs	r2, #144	; 0x90
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f006 fbc7 	bl	80076c4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3e:	d159      	bne.n	8000ff4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f44:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f4c:	f107 0314 	add.w	r3, r7, #20
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 f8a5 	bl	80030a0 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000f5c:	f7ff fd92 	bl	8000a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000f78:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000f7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f80:	2302      	movs	r3, #2
 8000f82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000f92:	230a      	movs	r3, #10
 8000f94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fa0:	f001 f83c 	bl	800201c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000fa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <HAL_PCD_MspInit+0xf0>)
 8000fc0:	f001 f82c 	bl	800201c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fc4:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fce:	6353      	str	r3, [r2, #52]	; 0x34
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fe6:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_PCD_MspInit+0xec>)
 8000fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	37b8      	adds	r7, #184	; 0xb8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000

08001004 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <NMI_Handler+0x4>

0800100a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <MemManage_Handler+0x4>

08001016 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <BusFault_Handler+0x4>

0800101c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <UsageFault_Handler+0x4>

08001022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001034:	f000 f88c 	bl	8001150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001038:	f005 f9f0 	bl	800641c <xTaskGetSchedulerState>
 800103c:	4603      	mov	r3, r0
 800103e:	2b01      	cmp	r3, #1
 8001040:	d001      	beq.n	8001046 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001042:	f006 f891 	bl	8007168 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <DMA1_Stream2_IRQHandler+0x10>)
 8001052:	f000 fa81 	bl	8001558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000450 	.word	0x20000450

08001060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <SystemInit+0x20>)
 8001066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <SystemInit+0x20>)
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001084:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001088:	480d      	ldr	r0, [pc, #52]	; (80010c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800108a:	490e      	ldr	r1, [pc, #56]	; (80010c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800108c:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0b      	ldr	r2, [pc, #44]	; (80010cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010a0:	4c0b      	ldr	r4, [pc, #44]	; (80010d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ae:	f7ff ffd7 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b2:	f006 fad3 	bl	800765c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010b6:	f7ff fa45 	bl	8000544 <main>
  bx  lr    
 80010ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010bc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80010c8:	08007990 	.word	0x08007990
  ldr r2, =_sbss
 80010cc:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80010d0:	200053e0 	.word	0x200053e0

080010d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC_IRQHandler>

080010d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f94c 	bl	8001378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e0:	200f      	movs	r0, #15
 80010e2:	f000 f805 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e6:	f7ff fcd3 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f967 	bl	80013e2 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f92f 	bl	800138e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008
 800114c:	20000004 	.word	0x20000004

08001150 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_IncTick+0x20>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b06      	ldr	r3, [pc, #24]	; (8001174 <HAL_IncTick+0x24>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_IncTick+0x24>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	200009cc 	.word	0x200009cc

08001178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return uwTick;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <HAL_GetTick+0x14>)
 800117e:	681b      	ldr	r3, [r3, #0]
}
 8001180:	4618      	mov	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	200009cc 	.word	0x200009cc

08001190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001198:	f7ff ffee 	bl	8001178 <HAL_GetTick>
 800119c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d005      	beq.n	80011b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <HAL_Delay+0x44>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4413      	add	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b6:	bf00      	nop
 80011b8:	f7ff ffde 	bl	8001178 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d8f7      	bhi.n	80011b8 <HAL_Delay+0x28>
  {
  }
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	4313      	orrs	r3, r2
 8001204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001206:	4a04      	ldr	r2, [pc, #16]	; (8001218 <__NVIC_SetPriorityGrouping+0x40>)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	60d3      	str	r3, [r2, #12]
}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000ed00 	.word	0xe000ed00
 800121c:	05fa0000 	.word	0x05fa0000

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	; (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <__NVIC_EnableIRQ+0x38>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	2b00      	cmp	r3, #0
 800128a:	db0a      	blt.n	80012a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	490c      	ldr	r1, [pc, #48]	; (80012c4 <__NVIC_SetPriority+0x4c>)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	440b      	add	r3, r1
 800129c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a0:	e00a      	b.n	80012b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <__NVIC_SetPriority+0x50>)
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	f003 030f 	and.w	r3, r3, #15
 80012ae:	3b04      	subs	r3, #4
 80012b0:	0112      	lsls	r2, r2, #4
 80012b2:	b2d2      	uxtb	r2, r2
 80012b4:	440b      	add	r3, r1
 80012b6:	761a      	strb	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000e100 	.word	0xe000e100
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f003 0307 	and.w	r3, r3, #7
 80012de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f1c3 0307 	rsb	r3, r3, #7
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	bf28      	it	cs
 80012ea:	2304      	movcs	r3, #4
 80012ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3304      	adds	r3, #4
 80012f2:	2b06      	cmp	r3, #6
 80012f4:	d902      	bls.n	80012fc <NVIC_EncodePriority+0x30>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3b03      	subs	r3, #3
 80012fa:	e000      	b.n	80012fe <NVIC_EncodePriority+0x32>
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	f04f 32ff 	mov.w	r2, #4294967295
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43da      	mvns	r2, r3
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001314:	f04f 31ff 	mov.w	r1, #4294967295
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	fa01 f303 	lsl.w	r3, r1, r3
 800131e:	43d9      	mvns	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	4313      	orrs	r3, r2
         );
}
 8001326:	4618      	mov	r0, r3
 8001328:	3724      	adds	r7, #36	; 0x24
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
	...

08001334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3b01      	subs	r3, #1
 8001340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001344:	d301      	bcc.n	800134a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001346:	2301      	movs	r3, #1
 8001348:	e00f      	b.n	800136a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800134a:	4a0a      	ldr	r2, [pc, #40]	; (8001374 <SysTick_Config+0x40>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3b01      	subs	r3, #1
 8001350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001352:	210f      	movs	r1, #15
 8001354:	f04f 30ff 	mov.w	r0, #4294967295
 8001358:	f7ff ff8e 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <SysTick_Config+0x40>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <SysTick_Config+0x40>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff29 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	4603      	mov	r3, r0
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
 800139a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a0:	f7ff ff3e 	bl	8001220 <__NVIC_GetPriorityGrouping>
 80013a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	6978      	ldr	r0, [r7, #20]
 80013ac:	f7ff ff8e 	bl	80012cc <NVIC_EncodePriority>
 80013b0:	4602      	mov	r2, r0
 80013b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	bf00      	nop
 80013c0:	3718      	adds	r7, #24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff ff31 	bl	800123c <__NVIC_EnableIRQ>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff ffa2 	bl	8001334 <SysTick_Config>
 80013f0:	4603      	mov	r3, r0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001408:	f7ff feb6 	bl	8001178 <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d101      	bne.n	8001418 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e099      	b.n	800154c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2202      	movs	r2, #2
 800141c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0201 	bic.w	r2, r2, #1
 8001436:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001438:	e00f      	b.n	800145a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800143a:	f7ff fe9d 	bl	8001178 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b05      	cmp	r3, #5
 8001446:	d908      	bls.n	800145a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2220      	movs	r2, #32
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e078      	b.n	800154c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e8      	bne.n	800143a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <HAL_DMA_Init+0x158>)
 8001474:	4013      	ands	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001486:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001492:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800149e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d107      	bne.n	80014c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4313      	orrs	r3, r2
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	f023 0307 	bic.w	r3, r3, #7
 80014da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d117      	bne.n	800151e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00e      	beq.n	800151e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f000 f9e9 	bl	80018d8 <DMA_CheckFifoParam>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d008      	beq.n	800151e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800151a:	2301      	movs	r3, #1
 800151c:	e016      	b.n	800154c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	f000 f9a0 	bl	800186c <DMA_CalcBaseAndBitshift>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001534:	223f      	movs	r2, #63	; 0x3f
 8001536:	409a      	lsls	r2, r3
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	e010803f 	.word	0xe010803f

08001558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001564:	4b8e      	ldr	r3, [pc, #568]	; (80017a0 <HAL_DMA_IRQHandler+0x248>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a8e      	ldr	r2, [pc, #568]	; (80017a4 <HAL_DMA_IRQHandler+0x24c>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0a9b      	lsrs	r3, r3, #10
 8001570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001582:	2208      	movs	r2, #8
 8001584:	409a      	lsls	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01a      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d013      	beq.n	80015c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 0204 	bic.w	r2, r2, #4
 80015aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b0:	2208      	movs	r2, #8
 80015b2:	409a      	lsls	r2, r3
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2201      	movs	r2, #1
 80015ca:	409a      	lsls	r2, r3
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d012      	beq.n	80015fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00b      	beq.n	80015fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e6:	2201      	movs	r2, #1
 80015e8:	409a      	lsls	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f2:	f043 0202 	orr.w	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2204      	movs	r2, #4
 8001600:	409a      	lsls	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d012      	beq.n	8001630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00b      	beq.n	8001630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161c:	2204      	movs	r2, #4
 800161e:	409a      	lsls	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f043 0204 	orr.w	r2, r3, #4
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2210      	movs	r2, #16
 8001636:	409a      	lsls	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d043      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	2b00      	cmp	r3, #0
 800164c:	d03c      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001652:	2210      	movs	r2, #16
 8001654:	409a      	lsls	r2, r3
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d018      	beq.n	800169a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d024      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
 8001686:	e01f      	b.n	80016c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168c:	2b00      	cmp	r3, #0
 800168e:	d01b      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4798      	blx	r3
 8001698:	e016      	b.n	80016c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d107      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0208 	bic.w	r2, r2, #8
 80016b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016cc:	2220      	movs	r2, #32
 80016ce:	409a      	lsls	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 808f 	beq.w	80017f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8087 	beq.w	80017f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ee:	2220      	movs	r2, #32
 80016f0:	409a      	lsls	r2, r3
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b05      	cmp	r3, #5
 8001700:	d136      	bne.n	8001770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0216 	bic.w	r2, r2, #22
 8001710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	2b00      	cmp	r3, #0
 8001728:	d103      	bne.n	8001732 <HAL_DMA_IRQHandler+0x1da>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0208 	bic.w	r2, r2, #8
 8001740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	223f      	movs	r2, #63	; 0x3f
 8001748:	409a      	lsls	r2, r3
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	2b00      	cmp	r3, #0
 8001764:	d07e      	beq.n	8001864 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	4798      	blx	r3
        }
        return;
 800176e:	e079      	b.n	8001864 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01d      	beq.n	80017ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d10d      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	2b00      	cmp	r3, #0
 8001792:	d031      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	4798      	blx	r3
 800179c:	e02c      	b.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
 800179e:	bf00      	nop
 80017a0:	20000000 	.word	0x20000000
 80017a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
 80017b8:	e01e      	b.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10f      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0210 	bic.w	r2, r2, #16
 80017d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d032      	beq.n	8001866 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	2b00      	cmp	r3, #0
 800180a:	d022      	beq.n	8001852 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2205      	movs	r2, #5
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f022 0201 	bic.w	r2, r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	3301      	adds	r3, #1
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	697a      	ldr	r2, [r7, #20]
 800182c:	429a      	cmp	r2, r3
 800182e:	d307      	bcc.n	8001840 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f2      	bne.n	8001824 <HAL_DMA_IRQHandler+0x2cc>
 800183e:	e000      	b.n	8001842 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001840:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
 8001862:	e000      	b.n	8001866 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001864:	bf00      	nop
    }
  }
}
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	b2db      	uxtb	r3, r3
 800187a:	3b10      	subs	r3, #16
 800187c:	4a13      	ldr	r2, [pc, #76]	; (80018cc <DMA_CalcBaseAndBitshift+0x60>)
 800187e:	fba2 2303 	umull	r2, r3, r2, r3
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <DMA_CalcBaseAndBitshift+0x64>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4413      	add	r3, r2
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b03      	cmp	r3, #3
 8001898:	d908      	bls.n	80018ac <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <DMA_CalcBaseAndBitshift+0x68>)
 80018a2:	4013      	ands	r3, r2
 80018a4:	1d1a      	adds	r2, r3, #4
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	659a      	str	r2, [r3, #88]	; 0x58
 80018aa:	e006      	b.n	80018ba <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <DMA_CalcBaseAndBitshift+0x68>)
 80018b4:	4013      	ands	r3, r2
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	aaaaaaab 	.word	0xaaaaaaab
 80018d0:	08007918 	.word	0x08007918
 80018d4:	fffffc00 	.word	0xfffffc00

080018d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d11f      	bne.n	8001932 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d856      	bhi.n	80019a6 <DMA_CheckFifoParam+0xce>
 80018f8:	a201      	add	r2, pc, #4	; (adr r2, 8001900 <DMA_CheckFifoParam+0x28>)
 80018fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fe:	bf00      	nop
 8001900:	08001911 	.word	0x08001911
 8001904:	08001923 	.word	0x08001923
 8001908:	08001911 	.word	0x08001911
 800190c:	080019a7 	.word	0x080019a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001914:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d046      	beq.n	80019aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001920:	e043      	b.n	80019aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800192a:	d140      	bne.n	80019ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001930:	e03d      	b.n	80019ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800193a:	d121      	bne.n	8001980 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d837      	bhi.n	80019b2 <DMA_CheckFifoParam+0xda>
 8001942:	a201      	add	r2, pc, #4	; (adr r2, 8001948 <DMA_CheckFifoParam+0x70>)
 8001944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001948:	08001959 	.word	0x08001959
 800194c:	0800195f 	.word	0x0800195f
 8001950:	08001959 	.word	0x08001959
 8001954:	08001971 	.word	0x08001971
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
      break;
 800195c:	e030      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d025      	beq.n	80019b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800196e:	e022      	b.n	80019b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001978:	d11f      	bne.n	80019ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800197e:	e01c      	b.n	80019ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d903      	bls.n	800198e <DMA_CheckFifoParam+0xb6>
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d003      	beq.n	8001994 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800198c:	e018      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	73fb      	strb	r3, [r7, #15]
      break;
 8001992:	e015      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      break;
 80019a4:	e00b      	b.n	80019be <DMA_CheckFifoParam+0xe6>
      break;
 80019a6:	bf00      	nop
 80019a8:	e00a      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019aa:	bf00      	nop
 80019ac:	e008      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019ae:	bf00      	nop
 80019b0:	e006      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019b2:	bf00      	nop
 80019b4:	e004      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019b6:	bf00      	nop
 80019b8:	e002      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80019ba:	bf00      	nop
 80019bc:	e000      	b.n	80019c0 <DMA_CheckFifoParam+0xe8>
      break;
 80019be:	bf00      	nop
    }
  } 
  
  return status; 
 80019c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop

080019d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06a      	b.n	8001ab8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d106      	bne.n	80019fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2223      	movs	r2, #35	; 0x23
 80019f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff f873 	bl	8000ae0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	4b31      	ldr	r3, [pc, #196]	; (8001ac0 <HAL_ETH_Init+0xf0>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	4a30      	ldr	r2, [pc, #192]	; (8001ac0 <HAL_ETH_Init+0xf0>)
 8001a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a04:	6453      	str	r3, [r2, #68]	; 0x44
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_ETH_Init+0xf0>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a12:	4b2c      	ldr	r3, [pc, #176]	; (8001ac4 <HAL_ETH_Init+0xf4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4a2b      	ldr	r2, [pc, #172]	; (8001ac4 <HAL_ETH_Init+0xf4>)
 8001a18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a1c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a1e:	4b29      	ldr	r3, [pc, #164]	; (8001ac4 <HAL_ETH_Init+0xf4>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	4927      	ldr	r1, [pc, #156]	; (8001ac4 <HAL_ETH_Init+0xf4>)
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001a2c:	4b25      	ldr	r3, [pc, #148]	; (8001ac4 <HAL_ETH_Init+0xf4>)
 8001a2e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a48:	f7ff fb96 	bl	8001178 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a4e:	e011      	b.n	8001a74 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001a50:	f7ff fb92 	bl	8001178 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a5e:	d909      	bls.n	8001a74 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2204      	movs	r2, #4
 8001a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	22e0      	movs	r2, #224	; 0xe0
 8001a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e021      	b.n	8001ab8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1e4      	bne.n	8001a50 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 f958 	bl	8001d3c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f9ff 	bl	8001e90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 fa55 	bl	8001f42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f000 f9bd 	bl	8001e20 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40013800 	.word	0x40013800

08001ac8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4b51      	ldr	r3, [pc, #324]	; (8001c24 <ETH_SetMACConfig+0x15c>)
 8001ade:	4013      	ands	r3, r2
 8001ae0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	7c1b      	ldrb	r3, [r3, #16]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <ETH_SetMACConfig+0x28>
 8001aea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001aee:	e000      	b.n	8001af2 <ETH_SetMACConfig+0x2a>
 8001af0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	7c5b      	ldrb	r3, [r3, #17]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d102      	bne.n	8001b00 <ETH_SetMACConfig+0x38>
 8001afa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001afe:	e000      	b.n	8001b02 <ETH_SetMACConfig+0x3a>
 8001b00:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b02:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001b08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	7fdb      	ldrb	r3, [r3, #31]
 8001b0e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001b10:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001b16:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	7f92      	ldrb	r2, [r2, #30]
 8001b1c:	2a00      	cmp	r2, #0
 8001b1e:	d102      	bne.n	8001b26 <ETH_SetMACConfig+0x5e>
 8001b20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b24:	e000      	b.n	8001b28 <ETH_SetMACConfig+0x60>
 8001b26:	2200      	movs	r2, #0
                        macconf->Speed |
 8001b28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	7f1b      	ldrb	r3, [r3, #28]
 8001b2e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001b30:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001b36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001b3e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001b46:	2a00      	cmp	r2, #0
 8001b48:	d102      	bne.n	8001b50 <ETH_SetMACConfig+0x88>
 8001b4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b4e:	e000      	b.n	8001b52 <ETH_SetMACConfig+0x8a>
 8001b50:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001b52:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	7bdb      	ldrb	r3, [r3, #15]
 8001b58:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001b5a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001b60:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b68:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b82:	2001      	movs	r0, #1
 8001b84:	f7ff fb04 	bl	8001190 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001bae:	2a00      	cmp	r2, #0
 8001bb0:	d101      	bne.n	8001bb6 <ETH_SetMACConfig+0xee>
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	e000      	b.n	8001bb8 <ETH_SetMACConfig+0xf0>
 8001bb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bb8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001bbe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001bc6:	2a01      	cmp	r2, #1
 8001bc8:	d101      	bne.n	8001bce <ETH_SetMACConfig+0x106>
 8001bca:	2208      	movs	r2, #8
 8001bcc:	e000      	b.n	8001bd0 <ETH_SetMACConfig+0x108>
 8001bce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001bd0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001bd8:	2a01      	cmp	r2, #1
 8001bda:	d101      	bne.n	8001be0 <ETH_SetMACConfig+0x118>
 8001bdc:	2204      	movs	r2, #4
 8001bde:	e000      	b.n	8001be2 <ETH_SetMACConfig+0x11a>
 8001be0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001be2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001bea:	2a01      	cmp	r2, #1
 8001bec:	d101      	bne.n	8001bf2 <ETH_SetMACConfig+0x12a>
 8001bee:	2202      	movs	r2, #2
 8001bf0:	e000      	b.n	8001bf4 <ETH_SetMACConfig+0x12c>
 8001bf2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fabf 	bl	8001190 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	ff20810f 	.word	0xff20810f

08001c28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <ETH_SetDMAConfig+0x110>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	7b1b      	ldrb	r3, [r3, #12]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d102      	bne.n	8001c54 <ETH_SetDMAConfig+0x2c>
 8001c4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001c52:	e000      	b.n	8001c56 <ETH_SetDMAConfig+0x2e>
 8001c54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	7b5b      	ldrb	r3, [r3, #13]
 8001c5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c5e:	683a      	ldr	r2, [r7, #0]
 8001c60:	7f52      	ldrb	r2, [r2, #29]
 8001c62:	2a00      	cmp	r2, #0
 8001c64:	d102      	bne.n	8001c6c <ETH_SetDMAConfig+0x44>
 8001c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c6a:	e000      	b.n	8001c6e <ETH_SetDMAConfig+0x46>
 8001c6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001c6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	7b9b      	ldrb	r3, [r3, #14]
 8001c74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001c76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001c7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	7f1b      	ldrb	r3, [r3, #28]
 8001c82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001c84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	7f9b      	ldrb	r3, [r3, #30]
 8001c8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001c8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001c92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cac:	461a      	mov	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff fa66 	bl	8001190 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ccc:	461a      	mov	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	791b      	ldrb	r3, [r3, #4]
 8001cd6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001cdc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001ce2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001ce8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cf0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001cf2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001cfa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001d00:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d0e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff fa37 	bl	8001190 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	6013      	str	r3, [r2, #0]
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	f8de3f23 	.word	0xf8de3f23

08001d3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b0a6      	sub	sp, #152	; 0x98
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001d50:	2300      	movs	r3, #0
 8001d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001d66:	2301      	movs	r3, #1
 8001d68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001da2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001da8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db4:	4619      	mov	r1, r3
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fe86 	bl	8001ac8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001de8:	2301      	movs	r3, #1
 8001dea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001df0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001df2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001df6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dfc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001e04:	2300      	movs	r3, #0
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	4619      	mov	r1, r3
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7ff ff08 	bl	8001c28 <ETH_SetDMAConfig>
}
 8001e18:	bf00      	nop
 8001e1a:	3798      	adds	r7, #152	; 0x98
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	60b9      	str	r1, [r7, #8]
 8001e2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3305      	adds	r3, #5
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	021b      	lsls	r3, r3, #8
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	3204      	adds	r2, #4
 8001e38:	7812      	ldrb	r2, [r2, #0]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <ETH_MACAddressConfig+0x68>)
 8001e42:	4413      	add	r3, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	3303      	adds	r3, #3
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	061a      	lsls	r2, r3, #24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	3302      	adds	r3, #2
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	041b      	lsls	r3, r3, #16
 8001e5a:	431a      	orrs	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	021b      	lsls	r3, r3, #8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	7812      	ldrb	r2, [r2, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <ETH_MACAddressConfig+0x6c>)
 8001e72:	4413      	add	r3, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	6013      	str	r3, [r2, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40028040 	.word	0x40028040
 8001e8c:	40028044 	.word	0x40028044

08001e90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	e03e      	b.n	8001f1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	3206      	adds	r2, #6
 8001ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d80c      	bhi.n	8001f00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68d9      	ldr	r1, [r3, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	e004      	b.n	8001f0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d9bd      	bls.n	8001e9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	611a      	str	r2, [r3, #16]
}
 8001f36:	bf00      	nop
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b085      	sub	sp, #20
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e046      	b.n	8001fde <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6919      	ldr	r1, [r3, #16]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2200      	movs	r2, #0
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001f8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001f94:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001fa2:	68b9      	ldr	r1, [r7, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	3212      	adds	r2, #18
 8001faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d80c      	bhi.n	8001fce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	1c5a      	adds	r2, r3, #1
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	4413      	add	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	440b      	add	r3, r1
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	e004      	b.n	8001fd8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d9b5      	bls.n	8001f50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800200e:	60da      	str	r2, [r3, #12]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e175      	b.n	8002328 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800203c:	2201      	movs	r2, #1
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	4013      	ands	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	429a      	cmp	r2, r3
 8002056:	f040 8164 	bne.w	8002322 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 0303 	and.w	r3, r3, #3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d005      	beq.n	8002072 <HAL_GPIO_Init+0x56>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d130      	bne.n	80020d4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	2203      	movs	r2, #3
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020a8:	2201      	movs	r2, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	091b      	lsrs	r3, r3, #4
 80020be:	f003 0201 	and.w	r2, r3, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d017      	beq.n	8002110 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d123      	bne.n	8002164 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	08da      	lsrs	r2, r3, #3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3208      	adds	r2, #8
 8002124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	08da      	lsrs	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3208      	adds	r2, #8
 800215e:	69b9      	ldr	r1, [r7, #24]
 8002160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	2203      	movs	r2, #3
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0203 	and.w	r2, r3, #3
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80be 	beq.w	8002322 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b66      	ldr	r3, [pc, #408]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	4a65      	ldr	r2, [pc, #404]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	6453      	str	r3, [r2, #68]	; 0x44
 80021b2:	4b63      	ldr	r3, [pc, #396]	; (8002340 <HAL_GPIO_Init+0x324>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80021be:	4a61      	ldr	r2, [pc, #388]	; (8002344 <HAL_GPIO_Init+0x328>)
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	089b      	lsrs	r3, r3, #2
 80021c4:	3302      	adds	r3, #2
 80021c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_GPIO_Init+0x32c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d037      	beq.n	800225a <HAL_GPIO_Init+0x23e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_GPIO_Init+0x330>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d031      	beq.n	8002256 <HAL_GPIO_Init+0x23a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_GPIO_Init+0x334>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d02b      	beq.n	8002252 <HAL_GPIO_Init+0x236>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a55      	ldr	r2, [pc, #340]	; (8002354 <HAL_GPIO_Init+0x338>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d025      	beq.n	800224e <HAL_GPIO_Init+0x232>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a54      	ldr	r2, [pc, #336]	; (8002358 <HAL_GPIO_Init+0x33c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <HAL_GPIO_Init+0x22e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a53      	ldr	r2, [pc, #332]	; (800235c <HAL_GPIO_Init+0x340>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d019      	beq.n	8002246 <HAL_GPIO_Init+0x22a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_GPIO_Init+0x344>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d013      	beq.n	8002242 <HAL_GPIO_Init+0x226>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a51      	ldr	r2, [pc, #324]	; (8002364 <HAL_GPIO_Init+0x348>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d00d      	beq.n	800223e <HAL_GPIO_Init+0x222>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a50      	ldr	r2, [pc, #320]	; (8002368 <HAL_GPIO_Init+0x34c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d007      	beq.n	800223a <HAL_GPIO_Init+0x21e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a4f      	ldr	r2, [pc, #316]	; (800236c <HAL_GPIO_Init+0x350>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_GPIO_Init+0x21a>
 8002232:	2309      	movs	r3, #9
 8002234:	e012      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002236:	230a      	movs	r3, #10
 8002238:	e010      	b.n	800225c <HAL_GPIO_Init+0x240>
 800223a:	2308      	movs	r3, #8
 800223c:	e00e      	b.n	800225c <HAL_GPIO_Init+0x240>
 800223e:	2307      	movs	r3, #7
 8002240:	e00c      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002242:	2306      	movs	r3, #6
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002246:	2305      	movs	r3, #5
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x240>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x240>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x240>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x240>
 800225a:	2300      	movs	r3, #0
 800225c:	69fa      	ldr	r2, [r7, #28]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800226c:	4935      	ldr	r1, [pc, #212]	; (8002344 <HAL_GPIO_Init+0x328>)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_GPIO_Init+0x354>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a34      	ldr	r2, [pc, #208]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ce:	4b28      	ldr	r3, [pc, #160]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022f2:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022f8:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_GPIO_Init+0x354>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800231c:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_GPIO_Init+0x354>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b0f      	cmp	r3, #15
 800232c:	f67f ae86 	bls.w	800203c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3724      	adds	r7, #36	; 0x24
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	40013800 	.word	0x40013800
 8002348:	40020000 	.word	0x40020000
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020c00 	.word	0x40020c00
 8002358:	40021000 	.word	0x40021000
 800235c:	40021400 	.word	0x40021400
 8002360:	40021800 	.word	0x40021800
 8002364:	40021c00 	.word	0x40021c00
 8002368:	40022000 	.word	0x40022000
 800236c:	40022400 	.word	0x40022400
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	807b      	strh	r3, [r7, #2]
 8002380:	4613      	mov	r3, r2
 8002382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002384:	787b      	ldrb	r3, [r7, #1]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800238a:	887a      	ldrh	r2, [r7, #2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002390:	e003      	b.n	800239a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002392:	887b      	ldrh	r3, [r7, #2]
 8002394:	041a      	lsls	r2, r3, #16
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	619a      	str	r2, [r3, #24]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80023a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023a8:	b08f      	sub	sp, #60	; 0x3c
 80023aa:	af0a      	add	r7, sp, #40	; 0x28
 80023ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e116      	b.n	80025e6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7fe fd9c 	bl	8000f10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2203      	movs	r2, #3
 80023dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 ff3a 	bl	8004270 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	687e      	ldr	r6, [r7, #4]
 8002404:	466d      	mov	r5, sp
 8002406:	f106 0410 	add.w	r4, r6, #16
 800240a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800240c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800240e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002410:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002412:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002416:	e885 0003 	stmia.w	r5, {r0, r1}
 800241a:	1d33      	adds	r3, r6, #4
 800241c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800241e:	6838      	ldr	r0, [r7, #0]
 8002420:	f001 fece 	bl	80041c0 <USB_CoreInit>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2202      	movs	r2, #2
 800242e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0d7      	b.n	80025e6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f001 ff28 	bl	8004292 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e04a      	b.n	80024de <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002448:	7bfa      	ldrb	r2, [r7, #15]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	00db      	lsls	r3, r3, #3
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	333d      	adds	r3, #61	; 0x3d
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800245c:	7bfa      	ldrb	r2, [r7, #15]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	333c      	adds	r3, #60	; 0x3c
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	b298      	uxth	r0, r3
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3344      	adds	r3, #68	; 0x44
 8002484:	4602      	mov	r2, r0
 8002486:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002488:	7bfa      	ldrb	r2, [r7, #15]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3340      	adds	r3, #64	; 0x40
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	3348      	adds	r3, #72	; 0x48
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024b0:	7bfa      	ldrb	r2, [r7, #15]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334c      	adds	r3, #76	; 0x4c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	3354      	adds	r3, #84	; 0x54
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	3301      	adds	r3, #1
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	7bfa      	ldrb	r2, [r7, #15]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d3af      	bcc.n	8002448 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e044      	b.n	8002578 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	4613      	mov	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002516:	7bfa      	ldrb	r2, [r7, #15]
 8002518:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	6879      	ldr	r1, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	440b      	add	r3, r1
 8002528:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002530:	7bfa      	ldrb	r2, [r7, #15]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800255c:	7bfa      	ldrb	r2, [r7, #15]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	3301      	adds	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d3b5      	bcc.n	80024ee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	687e      	ldr	r6, [r7, #4]
 800258a:	466d      	mov	r5, sp
 800258c:	f106 0410 	add.w	r4, r6, #16
 8002590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002598:	e894 0003 	ldmia.w	r4, {r0, r1}
 800259c:	e885 0003 	stmia.w	r5, {r0, r1}
 80025a0:	1d33      	adds	r3, r6, #4
 80025a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025a4:	6838      	ldr	r0, [r7, #0]
 80025a6:	f001 fec1 	bl	800432c <USB_DevInit>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e014      	b.n	80025e6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d102      	bne.n	80025da <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f80b 	bl	80025f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 f87f 	bl	80046e2 <USB_DevDisconnect>

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080025f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_PCDEx_ActivateLPM+0x44>)
 8002620:	4313      	orrs	r3, r2
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	10000003 	.word	0x10000003

08002638 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263c:	4b05      	ldr	r3, [pc, #20]	; (8002654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a04      	ldr	r2, [pc, #16]	; (8002654 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	40007000 	.word	0x40007000

08002658 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	6413      	str	r3, [r2, #64]	; 0x40
 800266e:	4b20      	ldr	r3, [pc, #128]	; (80026f0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800267a:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002686:	f7fe fd77 	bl	8001178 <HAL_GetTick>
 800268a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800268c:	e009      	b.n	80026a2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800268e:	f7fe fd73 	bl	8001178 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800269c:	d901      	bls.n	80026a2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e022      	b.n	80026e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ae:	d1ee      	bne.n	800268e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026bc:	f7fe fd5c 	bl	8001178 <HAL_GetTick>
 80026c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026c2:	e009      	b.n	80026d8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026c4:	f7fe fd58 	bl	8001178 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d2:	d901      	bls.n	80026d8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e007      	b.n	80026e8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026d8:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e4:	d1ee      	bne.n	80026c4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	40007000 	.word	0x40007000

080026f8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002700:	2300      	movs	r3, #0
 8002702:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e29b      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8087 	beq.w	800282a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800271c:	4b96      	ldr	r3, [pc, #600]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 030c 	and.w	r3, r3, #12
 8002724:	2b04      	cmp	r3, #4
 8002726:	d00c      	beq.n	8002742 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002728:	4b93      	ldr	r3, [pc, #588]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 030c 	and.w	r3, r3, #12
 8002730:	2b08      	cmp	r3, #8
 8002732:	d112      	bne.n	800275a <HAL_RCC_OscConfig+0x62>
 8002734:	4b90      	ldr	r3, [pc, #576]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800273c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002740:	d10b      	bne.n	800275a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002742:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d06c      	beq.n	8002828 <HAL_RCC_OscConfig+0x130>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d168      	bne.n	8002828 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e275      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002762:	d106      	bne.n	8002772 <HAL_RCC_OscConfig+0x7a>
 8002764:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a83      	ldr	r2, [pc, #524]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800276a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	e02e      	b.n	80027d0 <HAL_RCC_OscConfig+0xd8>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <HAL_RCC_OscConfig+0x9c>
 800277a:	4b7f      	ldr	r3, [pc, #508]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7e      	ldr	r2, [pc, #504]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a7b      	ldr	r2, [pc, #492]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800278c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xd8>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0xc0>
 800279e:	4b76      	ldr	r3, [pc, #472]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a75      	ldr	r2, [pc, #468]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b73      	ldr	r3, [pc, #460]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a72      	ldr	r2, [pc, #456]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xd8>
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a6e      	ldr	r2, [pc, #440]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b6c      	ldr	r3, [pc, #432]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a6b      	ldr	r2, [pc, #428]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fcce 	bl	8001178 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7fe fcca 	bl	8001178 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e229      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b61      	ldr	r3, [pc, #388]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xe8>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fcba 	bl	8001178 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7fe fcb6 	bl	8001178 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e215      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b57      	ldr	r3, [pc, #348]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x110>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d069      	beq.n	800290a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002836:	4b50      	ldr	r3, [pc, #320]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b4d      	ldr	r3, [pc, #308]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x190>
 800284e:	4b4a      	ldr	r3, [pc, #296]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b47      	ldr	r3, [pc, #284]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x17a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1e9      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	493d      	ldr	r1, [pc, #244]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e040      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d023      	beq.n	80028d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b39      	ldr	r3, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a38      	ldr	r2, [pc, #224]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fc6c 	bl	8001178 <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a4:	f7fe fc68 	bl	8001178 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e1c7      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b2d      	ldr	r3, [pc, #180]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4929      	ldr	r1, [pc, #164]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
 80028d6:	e018      	b.n	800290a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a26      	ldr	r2, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc48 	bl	8001178 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7fe fc44 	bl	8001178 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e1a3      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028fe:	4b1e      	ldr	r3, [pc, #120]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d038      	beq.n	8002988 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d019      	beq.n	8002952 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292a:	f7fe fc25 	bl	8001178 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002932:	f7fe fc21 	bl	8001178 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e180      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x23a>
 8002950:	e01a      	b.n	8002988 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002952:	4b09      	ldr	r3, [pc, #36]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <HAL_RCC_OscConfig+0x280>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295e:	f7fe fc0b 	bl	8001178 <HAL_GetTick>
 8002962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002964:	e00a      	b.n	800297c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002966:	f7fe fc07 	bl	8001178 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	2b02      	cmp	r3, #2
 8002972:	d903      	bls.n	800297c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e166      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
 8002978:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800297c:	4b92      	ldr	r3, [pc, #584]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 800297e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ee      	bne.n	8002966 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a4 	beq.w	8002ade <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002996:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d10d      	bne.n	80029be <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4b89      	ldr	r3, [pc, #548]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a88      	ldr	r2, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b86      	ldr	r3, [pc, #536]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ba:	2301      	movs	r3, #1
 80029bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029be:	4b83      	ldr	r3, [pc, #524]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d118      	bne.n	80029fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80029ca:	4b80      	ldr	r3, [pc, #512]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a7f      	ldr	r2, [pc, #508]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d6:	f7fe fbcf 	bl	8001178 <HAL_GetTick>
 80029da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029de:	f7fe fbcb 	bl	8001178 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b64      	cmp	r3, #100	; 0x64
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e12a      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_RCC_OscConfig+0x4d4>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0f0      	beq.n	80029de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d106      	bne.n	8002a12 <HAL_RCC_OscConfig+0x31a>
 8002a04:	4b70      	ldr	r3, [pc, #448]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a08:	4a6f      	ldr	r2, [pc, #444]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a10:	e02d      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x33c>
 8002a1a:	4b6b      	ldr	r3, [pc, #428]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	4a6a      	ldr	r2, [pc, #424]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a20:	f023 0301 	bic.w	r3, r3, #1
 8002a24:	6713      	str	r3, [r2, #112]	; 0x70
 8002a26:	4b68      	ldr	r3, [pc, #416]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2a:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a2c:	f023 0304 	bic.w	r3, r3, #4
 8002a30:	6713      	str	r3, [r2, #112]	; 0x70
 8002a32:	e01c      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	2b05      	cmp	r3, #5
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCC_OscConfig+0x35e>
 8002a3c:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	4a61      	ldr	r2, [pc, #388]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6713      	str	r3, [r2, #112]	; 0x70
 8002a48:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a4c:	4a5e      	ldr	r2, [pc, #376]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	6713      	str	r3, [r2, #112]	; 0x70
 8002a54:	e00b      	b.n	8002a6e <HAL_RCC_OscConfig+0x376>
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5b      	ldr	r2, [pc, #364]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a5c:	f023 0301 	bic.w	r3, r3, #1
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a58      	ldr	r2, [pc, #352]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a68:	f023 0304 	bic.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d015      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a76:	f7fe fb7f 	bl	8001178 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe fb7b 	bl	8001178 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0d8      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a94:	4b4c      	ldr	r3, [pc, #304]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0ee      	beq.n	8002a7e <HAL_RCC_OscConfig+0x386>
 8002aa0:	e014      	b.n	8002acc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa2:	f7fe fb69 	bl	8001178 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aa8:	e00a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe fb65 	bl	8001178 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0c2      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac0:	4b41      	ldr	r3, [pc, #260]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ee      	bne.n	8002aaa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002acc:	7dfb      	ldrb	r3, [r7, #23]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b3d      	ldr	r3, [pc, #244]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80ae 	beq.w	8002c44 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae8:	4b37      	ldr	r3, [pc, #220]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 030c 	and.w	r3, r3, #12
 8002af0:	2b08      	cmp	r3, #8
 8002af2:	d06d      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d14b      	bne.n	8002b94 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afc:	4b32      	ldr	r3, [pc, #200]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a31      	ldr	r2, [pc, #196]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b08:	f7fe fb36 	bl	8001178 <HAL_GetTick>
 8002b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b10:	f7fe fb32 	bl	8001178 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e091      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	4b29      	ldr	r3, [pc, #164]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69da      	ldr	r2, [r3, #28]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3c:	019b      	lsls	r3, r3, #6
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	3b01      	subs	r3, #1
 8002b48:	041b      	lsls	r3, r3, #16
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b50:	061b      	lsls	r3, r3, #24
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	071b      	lsls	r3, r3, #28
 8002b5a:	491b      	ldr	r1, [pc, #108]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe fb04 	bl	8001178 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b72:	e008      	b.n	8002b86 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b74:	f7fe fb00 	bl	8001178 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d901      	bls.n	8002b86 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e05f      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f0      	beq.n	8002b74 <HAL_RCC_OscConfig+0x47c>
 8002b92:	e057      	b.n	8002c44 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002b9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe faea 	bl	8001178 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fae6 	bl	8001178 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e045      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_RCC_OscConfig+0x4d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x4b0>
 8002bc6:	e03d      	b.n	8002c44 <HAL_RCC_OscConfig+0x54c>
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <HAL_RCC_OscConfig+0x558>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d030      	beq.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d129      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d122      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c06:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d119      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	3b01      	subs	r3, #1
 8002c1a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d10f      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0d0      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d910      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b67      	ldr	r3, [pc, #412]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 020f 	bic.w	r2, r3, #15
 8002c82:	4965      	ldr	r1, [pc, #404]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d040      	beq.n	8002d78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d115      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d107      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d16:	4b41      	ldr	r3, [pc, #260]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d109      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e073      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d26:	4b3d      	ldr	r3, [pc, #244]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e06b      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f023 0203 	bic.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	4936      	ldr	r1, [pc, #216]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fa16 	bl	8001178 <HAL_GetTick>
 8002d4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4e:	e00a      	b.n	8002d66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d50:	f7fe fa12 	bl	8001178 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e053      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 020c 	and.w	r2, r3, #12
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d1eb      	bne.n	8002d50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d78:	4b27      	ldr	r3, [pc, #156]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d210      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d86:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 020f 	bic.w	r2, r3, #15
 8002d8e:	4922      	ldr	r1, [pc, #136]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	; (8002e20 <HAL_RCC_ClockConfig+0x1cc>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	; (8002e24 <HAL_RCC_ClockConfig+0x1d0>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_ClockConfig+0x1d4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fe f972 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	08007900 	.word	0x08007900
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b094      	sub	sp, #80	; 0x50
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002e34:	2300      	movs	r3, #0
 8002e36:	647b      	str	r3, [r7, #68]	; 0x44
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80e1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e64:	e0db      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b73      	ldr	r3, [pc, #460]	; (8003034 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e6a:	e0d8      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	633b      	str	r3, [r7, #48]	; 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	; 0x34
 8002e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6139      	str	r1, [r7, #16]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4651      	mov	r1, sl
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb49 0303 	adc.w	r3, r9, r3
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	024b      	lsls	r3, r1, #9
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f28:	4621      	mov	r1, r4
 8002f2a:	024a      	lsls	r2, r1, #9
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f3c:	f7fd f980 	bl	8000240 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	2200      	movs	r2, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	4611      	mov	r1, r2
 8002f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb45 0303 	adc.w	r3, r5, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	f7fd f926 	bl	8000240 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800300c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800300e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	; 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	; (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	08007910 	.word	0x08007910

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffdc 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	; (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	08007910 	.word	0x08007910

080030a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80030b4:	2300      	movs	r3, #0
 80030b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80030b8:	2300      	movs	r3, #0
 80030ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d012      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80030c8:	4b69      	ldr	r3, [pc, #420]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a68      	ldr	r2, [pc, #416]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80030d2:	6093      	str	r3, [r2, #8]
 80030d4:	4b66      	ldr	r3, [pc, #408]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030dc:	4964      	ldr	r1, [pc, #400]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80030ea:	2301      	movs	r3, #1
 80030ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d017      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030fa:	4b5d      	ldr	r3, [pc, #372]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003108:	4959      	ldr	r1, [pc, #356]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800310a:	4313      	orrs	r3, r2
 800310c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003118:	d101      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800311a:	2301      	movs	r3, #1
 800311c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d017      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003136:	4b4e      	ldr	r3, [pc, #312]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003138:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800313c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	494a      	ldr	r1, [pc, #296]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003154:	d101      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003156:	2301      	movs	r3, #1
 8003158:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003162:	2301      	movs	r3, #1
 8003164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003172:	2301      	movs	r3, #1
 8003174:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 808b 	beq.w	800329a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	4a39      	ldr	r2, [pc, #228]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800318a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318e:	6413      	str	r3, [r2, #64]	; 0x40
 8003190:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800319c:	4b35      	ldr	r3, [pc, #212]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a34      	ldr	r2, [pc, #208]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a8:	f7fd ffe6 	bl	8001178 <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b0:	f7fd ffe2 	bl	8001178 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e38f      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80031c2:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d0f0      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d035      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d02e      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fa:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	4a1a      	ldr	r2, [pc, #104]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800320c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800320e:	4a18      	ldr	r2, [pc, #96]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003214:	4b16      	ldr	r3, [pc, #88]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b01      	cmp	r3, #1
 800321e:	d114      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd ffaa 	bl	8001178 <HAL_GetTick>
 8003224:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7fd ffa6 	bl	8001178 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	; 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e351      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0ee      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003256:	d111      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003264:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003266:	400b      	ands	r3, r1
 8003268:	4901      	ldr	r1, [pc, #4]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
 800326e:	e00b      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003270:	40023800 	.word	0x40023800
 8003274:	40007000 	.word	0x40007000
 8003278:	0ffffcff 	.word	0x0ffffcff
 800327c:	4bac      	ldr	r3, [pc, #688]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	4aab      	ldr	r2, [pc, #684]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	4ba9      	ldr	r3, [pc, #676]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800328a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	49a6      	ldr	r1, [pc, #664]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003296:	4313      	orrs	r3, r2
 8003298:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d010      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032a6:	4ba2      	ldr	r3, [pc, #648]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032ac:	4aa0      	ldr	r2, [pc, #640]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032b6:	4b9e      	ldr	r3, [pc, #632]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c0:	499b      	ldr	r1, [pc, #620]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032d4:	4b96      	ldr	r3, [pc, #600]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032e2:	4993      	ldr	r1, [pc, #588]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032f6:	4b8e      	ldr	r3, [pc, #568]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003304:	498a      	ldr	r1, [pc, #552]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003318:	4b85      	ldr	r3, [pc, #532]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003326:	4982      	ldr	r1, [pc, #520]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800333a:	4b7d      	ldr	r3, [pc, #500]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003348:	4979      	ldr	r1, [pc, #484]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00a      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800335c:	4b74      	ldr	r3, [pc, #464]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f023 0203 	bic.w	r2, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	4971      	ldr	r1, [pc, #452]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336c:	4313      	orrs	r3, r2
 800336e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800337e:	4b6c      	ldr	r3, [pc, #432]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003384:	f023 020c 	bic.w	r2, r3, #12
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338c:	4968      	ldr	r1, [pc, #416]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800338e:	4313      	orrs	r3, r2
 8003390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00a      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033a0:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ae:	4960      	ldr	r1, [pc, #384]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033c2:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d0:	4957      	ldr	r1, [pc, #348]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00a      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033e4:	4b52      	ldr	r3, [pc, #328]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	494f      	ldr	r1, [pc, #316]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003406:	4b4a      	ldr	r3, [pc, #296]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800340c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	4946      	ldr	r1, [pc, #280]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003416:	4313      	orrs	r3, r2
 8003418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00a      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003428:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	493e      	ldr	r1, [pc, #248]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003438:	4313      	orrs	r3, r2
 800343a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00a      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800344a:	4b39      	ldr	r3, [pc, #228]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003458:	4935      	ldr	r1, [pc, #212]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800346c:	4b30      	ldr	r3, [pc, #192]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800347a:	492d      	ldr	r1, [pc, #180]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800348e:	4b28      	ldr	r3, [pc, #160]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800349c:	4924      	ldr	r1, [pc, #144]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034ac:	d101      	bne.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0308 	and.w	r3, r3, #8
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80034be:	2301      	movs	r3, #1
 80034c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	4914      	ldr	r1, [pc, #80]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00b      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80034f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003500:	490b      	ldr	r1, [pc, #44]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003502:	4313      	orrs	r3, r2
 8003504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00f      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003524:	4902      	ldr	r1, [pc, #8]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800352c:	e002      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003540:	4b8a      	ldr	r3, [pc, #552]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003546:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003550:	4986      	ldr	r1, [pc, #536]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00b      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003564:	4b81      	ldr	r3, [pc, #516]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003566:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800356a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003574:	497d      	ldr	r1, [pc, #500]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d006      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	f000 80d6 	beq.w	800373c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003590:	4b76      	ldr	r3, [pc, #472]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a75      	ldr	r2, [pc, #468]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003596:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800359a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd fdec 	bl	8001178 <HAL_GetTick>
 80035a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80035a4:	f7fd fde8 	bl	8001178 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b64      	cmp	r3, #100	; 0x64
 80035b0:	d901      	bls.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e195      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80035b6:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d021      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d11d      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80035d6:	4b65      	ldr	r3, [pc, #404]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80035e4:	4b61      	ldr	r3, [pc, #388]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ea:	0e1b      	lsrs	r3, r3, #24
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	019a      	lsls	r2, r3, #6
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	061b      	lsls	r3, r3, #24
 8003602:	431a      	orrs	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	071b      	lsls	r3, r3, #28
 800360a:	4958      	ldr	r1, [pc, #352]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800360c:	4313      	orrs	r3, r2
 800360e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d004      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003630:	2b00      	cmp	r3, #0
 8003632:	d02e      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363c:	d129      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	0f1b      	lsrs	r3, r3, #28
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	019a      	lsls	r2, r3, #6
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	071b      	lsls	r3, r3, #28
 8003672:	493e      	ldr	r1, [pc, #248]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800367a:	4b3c      	ldr	r3, [pc, #240]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800367c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003680:	f023 021f 	bic.w	r2, r3, #31
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	3b01      	subs	r3, #1
 800368a:	4938      	ldr	r1, [pc, #224]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d01d      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800369e:	4b33      	ldr	r3, [pc, #204]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036a4:	0e1b      	lsrs	r3, r3, #24
 80036a6:	f003 030f 	and.w	r3, r3, #15
 80036aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80036ac:	4b2f      	ldr	r3, [pc, #188]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036b2:	0f1b      	lsrs	r3, r3, #28
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	019a      	lsls	r2, r3, #6
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	061b      	lsls	r3, r3, #24
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	071b      	lsls	r3, r3, #28
 80036d2:	4926      	ldr	r1, [pc, #152]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d011      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	019a      	lsls	r2, r3, #6
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	041b      	lsls	r3, r3, #16
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	061b      	lsls	r3, r3, #24
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	071b      	lsls	r3, r3, #28
 8003702:	491a      	ldr	r1, [pc, #104]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003704:	4313      	orrs	r3, r2
 8003706:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003710:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003716:	f7fd fd2f 	bl	8001178 <HAL_GetTick>
 800371a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800371e:	f7fd fd2b 	bl	8001178 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b64      	cmp	r3, #100	; 0x64
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0d8      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003730:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	2b01      	cmp	r3, #1
 8003740:	f040 80ce 	bne.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003744:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a08      	ldr	r2, [pc, #32]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800374e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003750:	f7fd fd12 	bl	8001178 <HAL_GetTick>
 8003754:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003756:	e00b      	b.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003758:	f7fd fd0e 	bl	8001178 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d904      	bls.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e0bb      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800376a:	bf00      	nop
 800376c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003770:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800377c:	d0ec      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800379a:	2b00      	cmp	r3, #0
 800379c:	d02e      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d12a      	bne.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80037a6:	4b51      	ldr	r3, [pc, #324]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ac:	0c1b      	lsrs	r3, r3, #16
 80037ae:	f003 0303 	and.w	r3, r3, #3
 80037b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80037b4:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	0f1b      	lsrs	r3, r3, #28
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	019a      	lsls	r2, r3, #6
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	061b      	lsls	r3, r3, #24
 80037d4:	431a      	orrs	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	071b      	lsls	r3, r3, #28
 80037da:	4944      	ldr	r1, [pc, #272]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80037e2:	4b42      	ldr	r3, [pc, #264]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f0:	3b01      	subs	r3, #1
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	493d      	ldr	r1, [pc, #244]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d022      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003810:	d11d      	bne.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003818:	0e1b      	lsrs	r3, r3, #24
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003820:	4b32      	ldr	r3, [pc, #200]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	0f1b      	lsrs	r3, r3, #28
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	019a      	lsls	r2, r3, #6
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	041b      	lsls	r3, r3, #16
 800383a:	431a      	orrs	r2, r3
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	061b      	lsls	r3, r3, #24
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	071b      	lsls	r3, r3, #28
 8003846:	4929      	ldr	r1, [pc, #164]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d028      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800385a:	4b24      	ldr	r3, [pc, #144]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800385c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003860:	0e1b      	lsrs	r3, r3, #24
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003868:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800386a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800386e:	0c1b      	lsrs	r3, r3, #16
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	019a      	lsls	r2, r3, #6
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	041b      	lsls	r3, r3, #16
 8003880:	431a      	orrs	r2, r3
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	061b      	lsls	r3, r3, #24
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	071b      	lsls	r3, r3, #28
 800388e:	4917      	ldr	r1, [pc, #92]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003896:	4b15      	ldr	r3, [pc, #84]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800389c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	4911      	ldr	r1, [pc, #68]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80038ac:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a0e      	ldr	r2, [pc, #56]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd fc5e 	bl	8001178 <HAL_GetTick>
 80038bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80038c0:	f7fd fc5a 	bl	8001178 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e007      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80038d2:	4b06      	ldr	r3, [pc, #24]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038de:	d1ef      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e040      	b.n	8003984 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7fd f99c 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0201 	bic.w	r2, r2, #1
 800392c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f82c 	bl	800398c <UART_SetConfig>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e022      	b.n	8003984 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fa84 	bl	8003e54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800395a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 fb0b 	bl	8003f98 <UART_CheckIdleState>
 8003982:	4603      	mov	r3, r0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}

0800398c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003994:	2300      	movs	r3, #0
 8003996:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	69db      	ldr	r3, [r3, #28]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	4ba6      	ldr	r3, [pc, #664]	; (8003c50 <UART_SetConfig+0x2c4>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	6979      	ldr	r1, [r7, #20]
 80039c0:	430b      	orrs	r3, r1
 80039c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a94      	ldr	r2, [pc, #592]	; (8003c54 <UART_SetConfig+0x2c8>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d120      	bne.n	8003a4a <UART_SetConfig+0xbe>
 8003a08:	4b93      	ldr	r3, [pc, #588]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d816      	bhi.n	8003a44 <UART_SetConfig+0xb8>
 8003a16:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x90>)
 8003a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1c:	08003a2d 	.word	0x08003a2d
 8003a20:	08003a39 	.word	0x08003a39
 8003a24:	08003a33 	.word	0x08003a33
 8003a28:	08003a3f 	.word	0x08003a3f
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	77fb      	strb	r3, [r7, #31]
 8003a30:	e150      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003a32:	2302      	movs	r3, #2
 8003a34:	77fb      	strb	r3, [r7, #31]
 8003a36:	e14d      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	77fb      	strb	r3, [r7, #31]
 8003a3c:	e14a      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003a3e:	2308      	movs	r3, #8
 8003a40:	77fb      	strb	r3, [r7, #31]
 8003a42:	e147      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003a44:	2310      	movs	r3, #16
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e144      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a83      	ldr	r2, [pc, #524]	; (8003c5c <UART_SetConfig+0x2d0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d132      	bne.n	8003aba <UART_SetConfig+0x12e>
 8003a54:	4b80      	ldr	r3, [pc, #512]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b0c      	cmp	r3, #12
 8003a60:	d828      	bhi.n	8003ab4 <UART_SetConfig+0x128>
 8003a62:	a201      	add	r2, pc, #4	; (adr r2, 8003a68 <UART_SetConfig+0xdc>)
 8003a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003ab5 	.word	0x08003ab5
 8003a70:	08003ab5 	.word	0x08003ab5
 8003a74:	08003ab5 	.word	0x08003ab5
 8003a78:	08003aa9 	.word	0x08003aa9
 8003a7c:	08003ab5 	.word	0x08003ab5
 8003a80:	08003ab5 	.word	0x08003ab5
 8003a84:	08003ab5 	.word	0x08003ab5
 8003a88:	08003aa3 	.word	0x08003aa3
 8003a8c:	08003ab5 	.word	0x08003ab5
 8003a90:	08003ab5 	.word	0x08003ab5
 8003a94:	08003ab5 	.word	0x08003ab5
 8003a98:	08003aaf 	.word	0x08003aaf
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e118      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e115      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	e112      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003aae:	2308      	movs	r3, #8
 8003ab0:	77fb      	strb	r3, [r7, #31]
 8003ab2:	e10f      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e10c      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a68      	ldr	r2, [pc, #416]	; (8003c60 <UART_SetConfig+0x2d4>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d120      	bne.n	8003b06 <UART_SetConfig+0x17a>
 8003ac4:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ace:	2b30      	cmp	r3, #48	; 0x30
 8003ad0:	d013      	beq.n	8003afa <UART_SetConfig+0x16e>
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d814      	bhi.n	8003b00 <UART_SetConfig+0x174>
 8003ad6:	2b20      	cmp	r3, #32
 8003ad8:	d009      	beq.n	8003aee <UART_SetConfig+0x162>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d810      	bhi.n	8003b00 <UART_SetConfig+0x174>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <UART_SetConfig+0x15c>
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d006      	beq.n	8003af4 <UART_SetConfig+0x168>
 8003ae6:	e00b      	b.n	8003b00 <UART_SetConfig+0x174>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0f2      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003aee:	2302      	movs	r3, #2
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e0ef      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003af4:	2304      	movs	r3, #4
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	e0ec      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003afa:	2308      	movs	r3, #8
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e0e9      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b00:	2310      	movs	r3, #16
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e0e6      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a56      	ldr	r2, [pc, #344]	; (8003c64 <UART_SetConfig+0x2d8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d120      	bne.n	8003b52 <UART_SetConfig+0x1c6>
 8003b10:	4b51      	ldr	r3, [pc, #324]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8003b1c:	d013      	beq.n	8003b46 <UART_SetConfig+0x1ba>
 8003b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8003b20:	d814      	bhi.n	8003b4c <UART_SetConfig+0x1c0>
 8003b22:	2b80      	cmp	r3, #128	; 0x80
 8003b24:	d009      	beq.n	8003b3a <UART_SetConfig+0x1ae>
 8003b26:	2b80      	cmp	r3, #128	; 0x80
 8003b28:	d810      	bhi.n	8003b4c <UART_SetConfig+0x1c0>
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <UART_SetConfig+0x1a8>
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d006      	beq.n	8003b40 <UART_SetConfig+0x1b4>
 8003b32:	e00b      	b.n	8003b4c <UART_SetConfig+0x1c0>
 8003b34:	2300      	movs	r3, #0
 8003b36:	77fb      	strb	r3, [r7, #31]
 8003b38:	e0cc      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	77fb      	strb	r3, [r7, #31]
 8003b3e:	e0c9      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b40:	2304      	movs	r3, #4
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e0c6      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b46:	2308      	movs	r3, #8
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e0c3      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e0c0      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <UART_SetConfig+0x2dc>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d125      	bne.n	8003ba8 <UART_SetConfig+0x21c>
 8003b5c:	4b3e      	ldr	r3, [pc, #248]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b6a:	d017      	beq.n	8003b9c <UART_SetConfig+0x210>
 8003b6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b70:	d817      	bhi.n	8003ba2 <UART_SetConfig+0x216>
 8003b72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b76:	d00b      	beq.n	8003b90 <UART_SetConfig+0x204>
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b7c:	d811      	bhi.n	8003ba2 <UART_SetConfig+0x216>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <UART_SetConfig+0x1fe>
 8003b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b86:	d006      	beq.n	8003b96 <UART_SetConfig+0x20a>
 8003b88:	e00b      	b.n	8003ba2 <UART_SetConfig+0x216>
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e0a1      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b90:	2302      	movs	r3, #2
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e09e      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b96:	2304      	movs	r3, #4
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e09b      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003b9c:	2308      	movs	r3, #8
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e098      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003ba2:	2310      	movs	r3, #16
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e095      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <UART_SetConfig+0x2e0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d125      	bne.n	8003bfe <UART_SetConfig+0x272>
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc0:	d017      	beq.n	8003bf2 <UART_SetConfig+0x266>
 8003bc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc6:	d817      	bhi.n	8003bf8 <UART_SetConfig+0x26c>
 8003bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bcc:	d00b      	beq.n	8003be6 <UART_SetConfig+0x25a>
 8003bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd2:	d811      	bhi.n	8003bf8 <UART_SetConfig+0x26c>
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <UART_SetConfig+0x254>
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bdc:	d006      	beq.n	8003bec <UART_SetConfig+0x260>
 8003bde:	e00b      	b.n	8003bf8 <UART_SetConfig+0x26c>
 8003be0:	2301      	movs	r3, #1
 8003be2:	77fb      	strb	r3, [r7, #31]
 8003be4:	e076      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003be6:	2302      	movs	r3, #2
 8003be8:	77fb      	strb	r3, [r7, #31]
 8003bea:	e073      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003bec:	2304      	movs	r3, #4
 8003bee:	77fb      	strb	r3, [r7, #31]
 8003bf0:	e070      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003bf2:	2308      	movs	r3, #8
 8003bf4:	77fb      	strb	r3, [r7, #31]
 8003bf6:	e06d      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003bf8:	2310      	movs	r3, #16
 8003bfa:	77fb      	strb	r3, [r7, #31]
 8003bfc:	e06a      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1b      	ldr	r2, [pc, #108]	; (8003c70 <UART_SetConfig+0x2e4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d138      	bne.n	8003c7a <UART_SetConfig+0x2ee>
 8003c08:	4b13      	ldr	r3, [pc, #76]	; (8003c58 <UART_SetConfig+0x2cc>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c16:	d017      	beq.n	8003c48 <UART_SetConfig+0x2bc>
 8003c18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003c1c:	d82a      	bhi.n	8003c74 <UART_SetConfig+0x2e8>
 8003c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c22:	d00b      	beq.n	8003c3c <UART_SetConfig+0x2b0>
 8003c24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c28:	d824      	bhi.n	8003c74 <UART_SetConfig+0x2e8>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <UART_SetConfig+0x2aa>
 8003c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c32:	d006      	beq.n	8003c42 <UART_SetConfig+0x2b6>
 8003c34:	e01e      	b.n	8003c74 <UART_SetConfig+0x2e8>
 8003c36:	2300      	movs	r3, #0
 8003c38:	77fb      	strb	r3, [r7, #31]
 8003c3a:	e04b      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	77fb      	strb	r3, [r7, #31]
 8003c40:	e048      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003c42:	2304      	movs	r3, #4
 8003c44:	77fb      	strb	r3, [r7, #31]
 8003c46:	e045      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003c48:	2308      	movs	r3, #8
 8003c4a:	77fb      	strb	r3, [r7, #31]
 8003c4c:	e042      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003c4e:	bf00      	nop
 8003c50:	efff69f3 	.word	0xefff69f3
 8003c54:	40011000 	.word	0x40011000
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40004400 	.word	0x40004400
 8003c60:	40004800 	.word	0x40004800
 8003c64:	40004c00 	.word	0x40004c00
 8003c68:	40005000 	.word	0x40005000
 8003c6c:	40011400 	.word	0x40011400
 8003c70:	40007800 	.word	0x40007800
 8003c74:	2310      	movs	r3, #16
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e02c      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a72      	ldr	r2, [pc, #456]	; (8003e48 <UART_SetConfig+0x4bc>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d125      	bne.n	8003cd0 <UART_SetConfig+0x344>
 8003c84:	4b71      	ldr	r3, [pc, #452]	; (8003e4c <UART_SetConfig+0x4c0>)
 8003c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c92:	d017      	beq.n	8003cc4 <UART_SetConfig+0x338>
 8003c94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c98:	d817      	bhi.n	8003cca <UART_SetConfig+0x33e>
 8003c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9e:	d00b      	beq.n	8003cb8 <UART_SetConfig+0x32c>
 8003ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ca4:	d811      	bhi.n	8003cca <UART_SetConfig+0x33e>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d003      	beq.n	8003cb2 <UART_SetConfig+0x326>
 8003caa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cae:	d006      	beq.n	8003cbe <UART_SetConfig+0x332>
 8003cb0:	e00b      	b.n	8003cca <UART_SetConfig+0x33e>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	77fb      	strb	r3, [r7, #31]
 8003cb6:	e00d      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	77fb      	strb	r3, [r7, #31]
 8003cbc:	e00a      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003cbe:	2304      	movs	r3, #4
 8003cc0:	77fb      	strb	r3, [r7, #31]
 8003cc2:	e007      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	77fb      	strb	r3, [r7, #31]
 8003cc8:	e004      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003cca:	2310      	movs	r3, #16
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e001      	b.n	8003cd4 <UART_SetConfig+0x348>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cdc:	d15b      	bne.n	8003d96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003cde:	7ffb      	ldrb	r3, [r7, #31]
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d828      	bhi.n	8003d36 <UART_SetConfig+0x3aa>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <UART_SetConfig+0x360>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d11 	.word	0x08003d11
 8003cf0:	08003d19 	.word	0x08003d19
 8003cf4:	08003d21 	.word	0x08003d21
 8003cf8:	08003d37 	.word	0x08003d37
 8003cfc:	08003d27 	.word	0x08003d27
 8003d00:	08003d37 	.word	0x08003d37
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d37 	.word	0x08003d37
 8003d0c:	08003d2f 	.word	0x08003d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d10:	f7ff f99e 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8003d14:	61b8      	str	r0, [r7, #24]
        break;
 8003d16:	e013      	b.n	8003d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d18:	f7ff f9ae 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8003d1c:	61b8      	str	r0, [r7, #24]
        break;
 8003d1e:	e00f      	b.n	8003d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d20:	4b4b      	ldr	r3, [pc, #300]	; (8003e50 <UART_SetConfig+0x4c4>)
 8003d22:	61bb      	str	r3, [r7, #24]
        break;
 8003d24:	e00c      	b.n	8003d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d26:	f7ff f881 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003d2a:	61b8      	str	r0, [r7, #24]
        break;
 8003d2c:	e008      	b.n	8003d40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d32:	61bb      	str	r3, [r7, #24]
        break;
 8003d34:	e004      	b.n	8003d40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d074      	beq.n	8003e30 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	005a      	lsls	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	441a      	add	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	2b0f      	cmp	r3, #15
 8003d60:	d916      	bls.n	8003d90 <UART_SetConfig+0x404>
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d68:	d212      	bcs.n	8003d90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f023 030f 	bic.w	r3, r3, #15
 8003d72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	085b      	lsrs	r3, r3, #1
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	89fa      	ldrh	r2, [r7, #14]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	e04f      	b.n	8003e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77bb      	strb	r3, [r7, #30]
 8003d94:	e04c      	b.n	8003e30 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d828      	bhi.n	8003dee <UART_SetConfig+0x462>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <UART_SetConfig+0x418>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dc9 	.word	0x08003dc9
 8003da8:	08003dd1 	.word	0x08003dd1
 8003dac:	08003dd9 	.word	0x08003dd9
 8003db0:	08003def 	.word	0x08003def
 8003db4:	08003ddf 	.word	0x08003ddf
 8003db8:	08003def 	.word	0x08003def
 8003dbc:	08003def 	.word	0x08003def
 8003dc0:	08003def 	.word	0x08003def
 8003dc4:	08003de7 	.word	0x08003de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc8:	f7ff f942 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 8003dcc:	61b8      	str	r0, [r7, #24]
        break;
 8003dce:	e013      	b.n	8003df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7ff f952 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8003dd4:	61b8      	str	r0, [r7, #24]
        break;
 8003dd6:	e00f      	b.n	8003df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd8:	4b1d      	ldr	r3, [pc, #116]	; (8003e50 <UART_SetConfig+0x4c4>)
 8003dda:	61bb      	str	r3, [r7, #24]
        break;
 8003ddc:	e00c      	b.n	8003df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dde:	f7ff f825 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8003de2:	61b8      	str	r0, [r7, #24]
        break;
 8003de4:	e008      	b.n	8003df8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dea:	61bb      	str	r3, [r7, #24]
        break;
 8003dec:	e004      	b.n	8003df8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	77bb      	strb	r3, [r7, #30]
        break;
 8003df6:	bf00      	nop
    }

    if (pclk != 0U)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d018      	beq.n	8003e30 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	085a      	lsrs	r2, r3, #1
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	441a      	add	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b0f      	cmp	r3, #15
 8003e16:	d909      	bls.n	8003e2c <UART_SetConfig+0x4a0>
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1e:	d205      	bcs.n	8003e2c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	60da      	str	r2, [r3, #12]
 8003e2a:	e001      	b.n	8003e30 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40007c00 	.word	0x40007c00
 8003e4c:	40023800 	.word	0x40023800
 8003e50:	00f42400 	.word	0x00f42400

08003e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	f003 0301 	and.w	r3, r3, #1
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f52:	d10a      	bne.n	8003f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b086      	sub	sp, #24
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa8:	f7fd f8e6 	bl	8001178 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d10e      	bne.n	8003fda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f831 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e027      	b.n	800402a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d10e      	bne.n	8004006 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f81b 	bl	8004032 <UART_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e011      	b.n	800402a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2220      	movs	r2, #32
 800400a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b09c      	sub	sp, #112	; 0x70
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	603b      	str	r3, [r7, #0]
 800403e:	4613      	mov	r3, r2
 8004040:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004042:	e0a7      	b.n	8004194 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	f000 80a3 	beq.w	8004194 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fd f893 	bl	8001178 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <UART_WaitOnFlagUntilTimeout+0x32>
 800405e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004060:	2b00      	cmp	r3, #0
 8004062:	d13f      	bne.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800406c:	e853 3f00 	ldrex	r3, [r3]
 8004070:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004074:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004078:	667b      	str	r3, [r7, #100]	; 0x64
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	461a      	mov	r2, r3
 8004080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004084:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004086:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004088:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800408a:	e841 2300 	strex	r3, r2, [r1]
 800408e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1e6      	bne.n	8004064 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	3308      	adds	r3, #8
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	663b      	str	r3, [r7, #96]	; 0x60
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3308      	adds	r3, #8
 80040b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80040b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e068      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0304 	and.w	r3, r3, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d050      	beq.n	8004194 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004100:	d148      	bne.n	8004194 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800410a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
 800412c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004130:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e6      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	3308      	adds	r3, #8
 8004144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	e853 3f00 	ldrex	r3, [r3]
 800414c:	613b      	str	r3, [r7, #16]
   return(result);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	66bb      	str	r3, [r7, #104]	; 0x68
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800415e:	623a      	str	r2, [r7, #32]
 8004160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004162:	69f9      	ldr	r1, [r7, #28]
 8004164:	6a3a      	ldr	r2, [r7, #32]
 8004166:	e841 2300 	strex	r3, r2, [r1]
 800416a:	61bb      	str	r3, [r7, #24]
   return(result);
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1e5      	bne.n	800413e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2220      	movs	r2, #32
 800417c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e010      	b.n	80041b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	69da      	ldr	r2, [r3, #28]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	4013      	ands	r3, r2
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	bf0c      	ite	eq
 80041a4:	2301      	moveq	r3, #1
 80041a6:	2300      	movne	r3, #0
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	461a      	mov	r2, r3
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	f43f af48 	beq.w	8004044 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3770      	adds	r7, #112	; 0x70
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
	...

080041c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 001c 	add.w	r0, r7, #28
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d120      	bne.n	800421a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	4b20      	ldr	r3, [pc, #128]	; (800426c <USB_CoreInit+0xac>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d105      	bne.n	800420e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 fa96 	bl	8004740 <USB_CoreReset>
 8004214:	4603      	mov	r3, r0
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e010      	b.n	800423c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 fa8a 	bl	8004740 <USB_CoreReset>
 800422c:	4603      	mov	r3, r0
 800422e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	2b01      	cmp	r3, #1
 8004240:	d10b      	bne.n	800425a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	f043 0206 	orr.w	r2, r3, #6
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800425a:	7bfb      	ldrb	r3, [r7, #15]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004266:	b004      	add	sp, #16
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	ffbdffbf 	.word	0xffbdffbf

08004270 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 0201 	bic.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d115      	bne.n	80042e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042c0:	2001      	movs	r0, #1
 80042c2:	f7fc ff65 	bl	8001190 <HAL_Delay>
      ms++;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa29 	bl	8004724 <USB_GetMode>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d01e      	beq.n	8004316 <USB_SetCurrentMode+0x84>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2b31      	cmp	r3, #49	; 0x31
 80042dc:	d9f0      	bls.n	80042c0 <USB_SetCurrentMode+0x2e>
 80042de:	e01a      	b.n	8004316 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d115      	bne.n	8004312 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80042f2:	2001      	movs	r0, #1
 80042f4:	f7fc ff4c 	bl	8001190 <HAL_Delay>
      ms++;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3301      	adds	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa10 	bl	8004724 <USB_GetMode>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <USB_SetCurrentMode+0x84>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b31      	cmp	r3, #49	; 0x31
 800430e:	d9f0      	bls.n	80042f2 <USB_SetCurrentMode+0x60>
 8004310:	e001      	b.n	8004316 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e005      	b.n	8004322 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2b32      	cmp	r3, #50	; 0x32
 800431a:	d101      	bne.n	8004320 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800432c:	b084      	sub	sp, #16
 800432e:	b580      	push	{r7, lr}
 8004330:	b086      	sub	sp, #24
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800433a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800433e:	2300      	movs	r3, #0
 8004340:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004346:	2300      	movs	r3, #0
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	e009      	b.n	8004360 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	3340      	adds	r3, #64	; 0x40
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b0e      	cmp	r3, #14
 8004364:	d9f2      	bls.n	800434c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d11c      	bne.n	80043a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437a:	f043 0302 	orr.w	r3, r3, #2
 800437e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004384:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e005      	b.n	80043b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043b8:	461a      	mov	r2, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c4:	4619      	mov	r1, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043cc:	461a      	mov	r2, r3
 80043ce:	680b      	ldr	r3, [r1, #0]
 80043d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d10c      	bne.n	80043f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d104      	bne.n	80043e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80043de:	2100      	movs	r1, #0
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f965 	bl	80046b0 <USB_SetDevSpeed>
 80043e6:	e008      	b.n	80043fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80043e8:	2101      	movs	r1, #1
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f960 	bl	80046b0 <USB_SetDevSpeed>
 80043f0:	e003      	b.n	80043fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80043f2:	2103      	movs	r1, #3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f95b 	bl	80046b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80043fa:	2110      	movs	r1, #16
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8f3 	bl	80045e8 <USB_FlushTxFifo>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 f91f 	bl	8004650 <USB_FlushRxFifo>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004422:	461a      	mov	r2, r3
 8004424:	2300      	movs	r3, #0
 8004426:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	461a      	mov	r2, r3
 8004430:	2300      	movs	r3, #0
 8004432:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	461a      	mov	r2, r3
 800443c:	2300      	movs	r3, #0
 800443e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004440:	2300      	movs	r3, #0
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	e043      	b.n	80044ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	015a      	lsls	r2, r3, #5
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4413      	add	r3, r2
 800444e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800445c:	d118      	bne.n	8004490 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004470:	461a      	mov	r2, r3
 8004472:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	e013      	b.n	80044a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	461a      	mov	r2, r3
 8004488:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800448c:	6013      	str	r3, [r2, #0]
 800448e:	e008      	b.n	80044a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449c:	461a      	mov	r2, r3
 800449e:	2300      	movs	r3, #0
 80044a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	461a      	mov	r2, r3
 80044b0:	2300      	movs	r3, #0
 80044b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	461a      	mov	r2, r3
 80044c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80044c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	3301      	adds	r3, #1
 80044cc:	613b      	str	r3, [r7, #16]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d3b7      	bcc.n	8004446 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044d6:	2300      	movs	r3, #0
 80044d8:	613b      	str	r3, [r7, #16]
 80044da:	e043      	b.n	8004564 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	015a      	lsls	r2, r3, #5
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044f2:	d118      	bne.n	8004526 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10a      	bne.n	8004510 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	461a      	mov	r2, r3
 8004508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800450c:	6013      	str	r3, [r2, #0]
 800450e:	e013      	b.n	8004538 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e008      	b.n	8004538 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	461a      	mov	r2, r3
 8004534:	2300      	movs	r3, #0
 8004536:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004544:	461a      	mov	r2, r3
 8004546:	2300      	movs	r3, #0
 8004548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	461a      	mov	r2, r3
 8004558:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800455c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	3301      	adds	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
 8004564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	429a      	cmp	r2, r3
 800456a:	d3b7      	bcc.n	80044dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800457a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800457e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800458c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b00      	cmp	r3, #0
 8004592:	d105      	bne.n	80045a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f043 0210 	orr.w	r2, r3, #16
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699a      	ldr	r2, [r3, #24]
 80045a4:	4b0e      	ldr	r3, [pc, #56]	; (80045e0 <USB_DevInit+0x2b4>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80045ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	f043 0208 	orr.w	r2, r3, #8
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80045be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d105      	bne.n	80045d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	4b06      	ldr	r3, [pc, #24]	; (80045e4 <USB_DevInit+0x2b8>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80045d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045dc:	b004      	add	sp, #16
 80045de:	4770      	bx	lr
 80045e0:	803c3800 	.word	0x803c3800
 80045e4:	40000004 	.word	0x40000004

080045e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a13      	ldr	r2, [pc, #76]	; (800464c <USB_FlushTxFifo+0x64>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d901      	bls.n	8004608 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e01b      	b.n	8004640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	daf2      	bge.n	80045f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004610:	2300      	movs	r3, #0
 8004612:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	019b      	lsls	r3, r3, #6
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3301      	adds	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a08      	ldr	r2, [pc, #32]	; (800464c <USB_FlushTxFifo+0x64>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d901      	bls.n	8004632 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e006      	b.n	8004640 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	d0f0      	beq.n	8004620 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	00030d40 	.word	0x00030d40

08004650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <USB_FlushRxFifo+0x5c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e018      	b.n	80046a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	daf2      	bge.n	800465c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2210      	movs	r2, #16
 800467e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	3301      	adds	r3, #1
 8004684:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	4a08      	ldr	r2, [pc, #32]	; (80046ac <USB_FlushRxFifo+0x5c>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d901      	bls.n	8004692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e006      	b.n	80046a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0310 	and.w	r3, r3, #16
 800469a:	2b10      	cmp	r3, #16
 800469c:	d0f0      	beq.n	8004680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	00030d40 	.word	0x00030d40

080046b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	68f9      	ldr	r1, [r7, #12]
 80046cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b085      	sub	sp, #20
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80046fc:	f023 0303 	bic.w	r3, r3, #3
 8004700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004710:	f043 0302 	orr.w	r3, r3, #2
 8004714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	f003 0301 	and.w	r3, r3, #1
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	3301      	adds	r3, #1
 8004750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <USB_CoreReset+0x64>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d901      	bls.n	800475e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e01b      	b.n	8004796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	2b00      	cmp	r3, #0
 8004764:	daf2      	bge.n	800474c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f043 0201 	orr.w	r2, r3, #1
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	3301      	adds	r3, #1
 800477a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a09      	ldr	r2, [pc, #36]	; (80047a4 <USB_CoreReset+0x64>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e006      	b.n	8004796 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b01      	cmp	r3, #1
 8004792:	d0f0      	beq.n	8004776 <USB_CoreReset+0x36>

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	4618      	mov	r0, r3
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr
 80047a2:	bf00      	nop
 80047a4:	00030d40 	.word	0x00030d40

080047a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80047ac:	bf00      	nop
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
	...

080047b8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047be:	f3ef 8305 	mrs	r3, IPSR
 80047c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80047c4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10f      	bne.n	80047ea <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ca:	f3ef 8310 	mrs	r3, PRIMASK
 80047ce:	607b      	str	r3, [r7, #4]
  return(result);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d105      	bne.n	80047e2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80047d6:	f3ef 8311 	mrs	r3, BASEPRI
 80047da:	603b      	str	r3, [r7, #0]
  return(result);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d007      	beq.n	80047f2 <osKernelInitialize+0x3a>
 80047e2:	4b0e      	ldr	r3, [pc, #56]	; (800481c <osKernelInitialize+0x64>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d103      	bne.n	80047f2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80047ea:	f06f 0305 	mvn.w	r3, #5
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e00c      	b.n	800480c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80047f2:	4b0a      	ldr	r3, [pc, #40]	; (800481c <osKernelInitialize+0x64>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d105      	bne.n	8004806 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <osKernelInitialize+0x64>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e002      	b.n	800480c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004806:	f04f 33ff 	mov.w	r3, #4294967295
 800480a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800480c:	68fb      	ldr	r3, [r7, #12]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	200009d0 	.word	0x200009d0

08004820 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004826:	f3ef 8305 	mrs	r3, IPSR
 800482a:	60bb      	str	r3, [r7, #8]
  return(result);
 800482c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004832:	f3ef 8310 	mrs	r3, PRIMASK
 8004836:	607b      	str	r3, [r7, #4]
  return(result);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d105      	bne.n	800484a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800483e:	f3ef 8311 	mrs	r3, BASEPRI
 8004842:	603b      	str	r3, [r7, #0]
  return(result);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <osKernelStart+0x3a>
 800484a:	4b0f      	ldr	r3, [pc, #60]	; (8004888 <osKernelStart+0x68>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b02      	cmp	r3, #2
 8004850:	d103      	bne.n	800485a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004852:	f06f 0305 	mvn.w	r3, #5
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	e010      	b.n	800487c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <osKernelStart+0x68>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d109      	bne.n	8004876 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004862:	f7ff ffa1 	bl	80047a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004866:	4b08      	ldr	r3, [pc, #32]	; (8004888 <osKernelStart+0x68>)
 8004868:	2202      	movs	r2, #2
 800486a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800486c:	f001 f964 	bl	8005b38 <vTaskStartScheduler>
      stat = osOK;
 8004870:	2300      	movs	r3, #0
 8004872:	60fb      	str	r3, [r7, #12]
 8004874:	e002      	b.n	800487c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8004876:	f04f 33ff 	mov.w	r3, #4294967295
 800487a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800487c:	68fb      	ldr	r3, [r7, #12]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200009d0 	.word	0x200009d0

0800488c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800488c:	b580      	push	{r7, lr}
 800488e:	b090      	sub	sp, #64	; 0x40
 8004890:	af04      	add	r7, sp, #16
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800489c:	f3ef 8305 	mrs	r3, IPSR
 80048a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80048a2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f040 808f 	bne.w	80049c8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048aa:	f3ef 8310 	mrs	r3, PRIMASK
 80048ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d105      	bne.n	80048c2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80048b6:	f3ef 8311 	mrs	r3, BASEPRI
 80048ba:	617b      	str	r3, [r7, #20]
  return(result);
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <osThreadNew+0x3e>
 80048c2:	4b44      	ldr	r3, [pc, #272]	; (80049d4 <osThreadNew+0x148>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d07e      	beq.n	80049c8 <osThreadNew+0x13c>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d07b      	beq.n	80049c8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80048d0:	2380      	movs	r3, #128	; 0x80
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80048d4:	2318      	movs	r3, #24
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80048d8:	2300      	movs	r3, #0
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80048dc:	f04f 33ff 	mov.w	r3, #4294967295
 80048e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d045      	beq.n	8004974 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <osThreadNew+0x6a>
        name = attr->name;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004906:	2b00      	cmp	r3, #0
 8004908:	d008      	beq.n	800491c <osThreadNew+0x90>
 800490a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490c:	2b38      	cmp	r3, #56	; 0x38
 800490e:	d805      	bhi.n	800491c <osThreadNew+0x90>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <osThreadNew+0x94>
        return (NULL);
 800491c:	2300      	movs	r3, #0
 800491e:	e054      	b.n	80049ca <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d003      	beq.n	8004930 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	089b      	lsrs	r3, r3, #2
 800492e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00e      	beq.n	8004956 <osThreadNew+0xca>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	2bbb      	cmp	r3, #187	; 0xbb
 800493e:	d90a      	bls.n	8004956 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004944:	2b00      	cmp	r3, #0
 8004946:	d006      	beq.n	8004956 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <osThreadNew+0xca>
        mem = 1;
 8004950:	2301      	movs	r3, #1
 8004952:	623b      	str	r3, [r7, #32]
 8004954:	e010      	b.n	8004978 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10c      	bne.n	8004978 <osThreadNew+0xec>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d108      	bne.n	8004978 <osThreadNew+0xec>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d104      	bne.n	8004978 <osThreadNew+0xec>
          mem = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	623b      	str	r3, [r7, #32]
 8004972:	e001      	b.n	8004978 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d110      	bne.n	80049a0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004986:	9202      	str	r2, [sp, #8]
 8004988:	9301      	str	r3, [sp, #4]
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fed9 	bl	800574c <xTaskCreateStatic>
 800499a:	4603      	mov	r3, r0
 800499c:	613b      	str	r3, [r7, #16]
 800499e:	e013      	b.n	80049c8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d110      	bne.n	80049c8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	f107 0310 	add.w	r3, r7, #16
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	9300      	str	r3, [sp, #0]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 ff2a 	bl	8005812 <xTaskCreate>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d001      	beq.n	80049c8 <osThreadNew+0x13c>
          hTask = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80049c8:	693b      	ldr	r3, [r7, #16]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3730      	adds	r7, #48	; 0x30
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	200009d0 	.word	0x200009d0

080049d8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	b086      	sub	sp, #24
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049e0:	f3ef 8305 	mrs	r3, IPSR
 80049e4:	613b      	str	r3, [r7, #16]
  return(result);
 80049e6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10f      	bne.n	8004a0c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ec:	f3ef 8310 	mrs	r3, PRIMASK
 80049f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80049f8:	f3ef 8311 	mrs	r3, BASEPRI
 80049fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <osDelay+0x3c>
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <osDelay+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d103      	bne.n	8004a14 <osDelay+0x3c>
    stat = osErrorISR;
 8004a0c:	f06f 0305 	mvn.w	r3, #5
 8004a10:	617b      	str	r3, [r7, #20]
 8004a12:	e007      	b.n	8004a24 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f001 f854 	bl	8005acc <vTaskDelay>
    }
  }

  return (stat);
 8004a24:	697b      	ldr	r3, [r7, #20]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200009d0 	.word	0x200009d0

08004a34 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f002 f9cd 	bl	8006ddc <pvTimerGetTimerID>
 8004a42:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	6852      	ldr	r2, [r2, #4]
 8004a52:	4610      	mov	r0, r2
 8004a54:	4798      	blx	r3
  }
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	; 0x38
 8004a64:	af02      	add	r7, sp, #8
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	607a      	str	r2, [r7, #4]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a74:	f3ef 8305 	mrs	r3, IPSR
 8004a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d16a      	bne.n	8004b56 <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a80:	f3ef 8310 	mrs	r3, PRIMASK
 8004a84:	617b      	str	r3, [r7, #20]
  return(result);
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <osTimerNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8004a90:	613b      	str	r3, [r7, #16]
  return(result);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <osTimerNew+0x40>
 8004a98:	4b31      	ldr	r3, [pc, #196]	; (8004b60 <osTimerNew+0x100>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d05a      	beq.n	8004b56 <osTimerNew+0xf6>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d057      	beq.n	8004b56 <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004aa6:	2008      	movs	r0, #8
 8004aa8:	f002 fbf4 	bl	8007294 <pvPortMalloc>
 8004aac:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d050      	beq.n	8004b56 <osTimerNew+0xf6>
      callb->func = func;
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004ac0:	7afb      	ldrb	r3, [r7, #11]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <osTimerNew+0x6c>
        reload = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	e001      	b.n	8004ad0 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 8004acc:	2301      	movs	r3, #1
 8004ace:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 8004ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad4:	623b      	str	r3, [r7, #32]
      name = NULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01c      	beq.n	8004b1a <osTimerNew+0xba>
        if (attr->name != NULL) {
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d002      	beq.n	8004aee <osTimerNew+0x8e>
          name = attr->name;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d006      	beq.n	8004b04 <osTimerNew+0xa4>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b2b      	cmp	r3, #43	; 0x2b
 8004afc:	d902      	bls.n	8004b04 <osTimerNew+0xa4>
          mem = 1;
 8004afe:	2301      	movs	r3, #1
 8004b00:	623b      	str	r3, [r7, #32]
 8004b02:	e00c      	b.n	8004b1e <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d108      	bne.n	8004b1e <osTimerNew+0xbe>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d104      	bne.n	8004b1e <osTimerNew+0xbe>
            mem = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	623b      	str	r3, [r7, #32]
 8004b18:	e001      	b.n	8004b1e <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8004b1e:	6a3b      	ldr	r3, [r7, #32]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d10c      	bne.n	8004b3e <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	9301      	str	r3, [sp, #4]
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <osTimerNew+0x104>)
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b32:	2101      	movs	r1, #1
 8004b34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b36:	f001 fdc0 	bl	80066ba <xTimerCreateStatic>
 8004b3a:	62b8      	str	r0, [r7, #40]	; 0x28
 8004b3c:	e00b      	b.n	8004b56 <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d108      	bne.n	8004b56 <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004b44:	4b07      	ldr	r3, [pc, #28]	; (8004b64 <osTimerNew+0x104>)
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b50:	f001 fd92 	bl	8006678 <xTimerCreate>
 8004b54:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3730      	adds	r7, #48	; 0x30
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	200009d0 	.word	0x200009d0
 8004b64:	08004a35 	.word	0x08004a35

08004b68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a07      	ldr	r2, [pc, #28]	; (8004b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a06      	ldr	r2, [pc, #24]	; (8004b98 <vApplicationGetIdleTaskMemory+0x30>)
 8004b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	; 0x80
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	200009d4 	.word	0x200009d4
 8004b98:	20000a90 	.word	0x20000a90

08004b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a06      	ldr	r2, [pc, #24]	; (8004bcc <vApplicationGetTimerTaskMemory+0x30>)
 8004bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000c90 	.word	0x20000c90
 8004bcc:	20000d4c 	.word	0x20000d4c

08004bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f103 0208 	add.w	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0208 	add.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c88:	d103      	bne.n	8004c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e00c      	b.n	8004cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3308      	adds	r3, #8
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <vListInsert+0x2e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d2f6      	bcs.n	8004c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6852      	ldr	r2, [r2, #4]
 8004d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10c      	bne.n	8004d66 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d50:	b672      	cpsid	i
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	b662      	cpsie	i
 8004d60:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8004d66:	f002 f969 	bl	800703c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	441a      	add	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	3b01      	subs	r3, #1
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d114      	bne.n	8004de6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01a      	beq.n	8004dfa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 f95d 	bl	8006088 <xTaskRemoveFromEventList>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d012      	beq.n	8004dfa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <xQueueGenericReset+0xd0>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e009      	b.n	8004dfa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3310      	adds	r3, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fef0 	bl	8004bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff feeb 	bl	8004bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f002 f953 	bl	80070a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08e      	sub	sp, #56	; 0x38
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10c      	bne.n	8004e3a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	b672      	cpsid	i
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	b662      	cpsie	i
 8004e34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10c      	bne.n	8004e5a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	b672      	cpsid	i
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	b662      	cpsie	i
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d002      	beq.n	8004e66 <xQueueGenericCreateStatic+0x5a>
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <xQueueGenericCreateStatic+0x5e>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e000      	b.n	8004e6c <xQueueGenericCreateStatic+0x60>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10c      	bne.n	8004e8a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	b672      	cpsid	i
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	b662      	cpsie	i
 8004e84:	623b      	str	r3, [r7, #32]
}
 8004e86:	bf00      	nop
 8004e88:	e7fe      	b.n	8004e88 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d102      	bne.n	8004e96 <xQueueGenericCreateStatic+0x8a>
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <xQueueGenericCreateStatic+0x8e>
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <xQueueGenericCreateStatic+0x90>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10c      	bne.n	8004eba <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8004ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea4:	b672      	cpsid	i
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	b662      	cpsie	i
 8004eb4:	61fb      	str	r3, [r7, #28]
}
 8004eb6:	bf00      	nop
 8004eb8:	e7fe      	b.n	8004eb8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eba:	2350      	movs	r3, #80	; 0x50
 8004ebc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b50      	cmp	r3, #80	; 0x50
 8004ec2:	d00c      	beq.n	8004ede <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8004ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec8:	b672      	cpsid	i
 8004eca:	f383 8811 	msr	BASEPRI, r3
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	b662      	cpsie	i
 8004ed8:	61bb      	str	r3, [r7, #24]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ede:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00d      	beq.n	8004f06 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ef2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef8:	9300      	str	r3, [sp, #0]
 8004efa:	4613      	mov	r3, r2
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	68b9      	ldr	r1, [r7, #8]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 f805 	bl	8004f10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3730      	adds	r7, #48	; 0x30
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e002      	b.n	8004f32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f3e:	2101      	movs	r1, #1
 8004f40:	69b8      	ldr	r0, [r7, #24]
 8004f42:	f7ff fef9 	bl	8004d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	78fa      	ldrb	r2, [r7, #3]
 8004f4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08e      	sub	sp, #56	; 0x38
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f66:	2300      	movs	r3, #0
 8004f68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10c      	bne.n	8004f8e <xQueueGenericSend+0x36>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	b672      	cpsid	i
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	b662      	cpsie	i
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d103      	bne.n	8004f9c <xQueueGenericSend+0x44>
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <xQueueGenericSend+0x48>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e000      	b.n	8004fa2 <xQueueGenericSend+0x4a>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10c      	bne.n	8004fc0 <xQueueGenericSend+0x68>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004faa:	b672      	cpsid	i
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	b662      	cpsie	i
 8004fba:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d103      	bne.n	8004fce <xQueueGenericSend+0x76>
 8004fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d101      	bne.n	8004fd2 <xQueueGenericSend+0x7a>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <xQueueGenericSend+0x7c>
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10c      	bne.n	8004ff2 <xQueueGenericSend+0x9a>
	__asm volatile
 8004fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fdc:	b672      	cpsid	i
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	b662      	cpsie	i
 8004fec:	623b      	str	r3, [r7, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	e7fe      	b.n	8004ff0 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ff2:	f001 fa13 	bl	800641c <xTaskGetSchedulerState>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d102      	bne.n	8005002 <xQueueGenericSend+0xaa>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d101      	bne.n	8005006 <xQueueGenericSend+0xae>
 8005002:	2301      	movs	r3, #1
 8005004:	e000      	b.n	8005008 <xQueueGenericSend+0xb0>
 8005006:	2300      	movs	r3, #0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10c      	bne.n	8005026 <xQueueGenericSend+0xce>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	b672      	cpsid	i
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	b662      	cpsie	i
 8005020:	61fb      	str	r3, [r7, #28]
}
 8005022:	bf00      	nop
 8005024:	e7fe      	b.n	8005024 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005026:	f002 f809 	bl	800703c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <xQueueGenericSend+0xe4>
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b02      	cmp	r3, #2
 800503a:	d129      	bne.n	8005090 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005042:	f000 fa15 	bl	8005470 <prvCopyDataToQueue>
 8005046:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	2b00      	cmp	r3, #0
 800504e:	d010      	beq.n	8005072 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005052:	3324      	adds	r3, #36	; 0x24
 8005054:	4618      	mov	r0, r3
 8005056:	f001 f817 	bl	8006088 <xTaskRemoveFromEventList>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d013      	beq.n	8005088 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005060:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <xQueueGenericSend+0x208>)
 8005062:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	e00a      	b.n	8005088 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d007      	beq.n	8005088 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005078:	4b39      	ldr	r3, [pc, #228]	; (8005160 <xQueueGenericSend+0x208>)
 800507a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	f3bf 8f4f 	dsb	sy
 8005084:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005088:	f002 f80c 	bl	80070a4 <vPortExitCritical>
				return pdPASS;
 800508c:	2301      	movs	r3, #1
 800508e:	e063      	b.n	8005158 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d103      	bne.n	800509e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005096:	f002 f805 	bl	80070a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800509a:	2300      	movs	r3, #0
 800509c:	e05c      	b.n	8005158 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050a4:	f107 0314 	add.w	r3, r7, #20
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 f853 	bl	8006154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050b2:	f001 fff7 	bl	80070a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050b6:	f000 fdb3 	bl	8005c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050ba:	f001 ffbf 	bl	800703c <vPortEnterCritical>
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050c4:	b25b      	sxtb	r3, r3
 80050c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ca:	d103      	bne.n	80050d4 <xQueueGenericSend+0x17c>
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050da:	b25b      	sxtb	r3, r3
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e0:	d103      	bne.n	80050ea <xQueueGenericSend+0x192>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050ea:	f001 ffdb 	bl	80070a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050ee:	1d3a      	adds	r2, r7, #4
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	4611      	mov	r1, r2
 80050f6:	4618      	mov	r0, r3
 80050f8:	f001 f842 	bl	8006180 <xTaskCheckForTimeOut>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d124      	bne.n	800514c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005104:	f000 faac 	bl	8005660 <prvIsQueueFull>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800510e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005110:	3310      	adds	r3, #16
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	4611      	mov	r1, r2
 8005116:	4618      	mov	r0, r3
 8005118:	f000 ff62 	bl	8005fe0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800511c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800511e:	f000 fa37 	bl	8005590 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005122:	f000 fd8b 	bl	8005c3c <xTaskResumeAll>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	f47f af7c 	bne.w	8005026 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800512e:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <xQueueGenericSend+0x208>)
 8005130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	e772      	b.n	8005026 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005140:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005142:	f000 fa25 	bl	8005590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005146:	f000 fd79 	bl	8005c3c <xTaskResumeAll>
 800514a:	e76c      	b.n	8005026 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800514c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800514e:	f000 fa1f 	bl	8005590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005152:	f000 fd73 	bl	8005c3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005156:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005158:	4618      	mov	r0, r3
 800515a:	3738      	adds	r7, #56	; 0x38
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	e000ed04 	.word	0xe000ed04

08005164 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08e      	sub	sp, #56	; 0x38
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	2b00      	cmp	r3, #0
 800517a:	d10c      	bne.n	8005196 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	b672      	cpsid	i
 8005182:	f383 8811 	msr	BASEPRI, r3
 8005186:	f3bf 8f6f 	isb	sy
 800518a:	f3bf 8f4f 	dsb	sy
 800518e:	b662      	cpsie	i
 8005190:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005192:	bf00      	nop
 8005194:	e7fe      	b.n	8005194 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d103      	bne.n	80051a4 <xQueueGenericSendFromISR+0x40>
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <xQueueGenericSendFromISR+0x44>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <xQueueGenericSendFromISR+0x46>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	b672      	cpsid	i
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	b662      	cpsie	i
 80051c2:	623b      	str	r3, [r7, #32]
}
 80051c4:	bf00      	nop
 80051c6:	e7fe      	b.n	80051c6 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d103      	bne.n	80051d6 <xQueueGenericSendFromISR+0x72>
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <xQueueGenericSendFromISR+0x76>
 80051d6:	2301      	movs	r3, #1
 80051d8:	e000      	b.n	80051dc <xQueueGenericSendFromISR+0x78>
 80051da:	2300      	movs	r3, #0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10c      	bne.n	80051fa <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	b672      	cpsid	i
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	b662      	cpsie	i
 80051f4:	61fb      	str	r3, [r7, #28]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051fa:	f002 f807 	bl	800720c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80051fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	b672      	cpsid	i
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	b662      	cpsie	i
 8005216:	61ba      	str	r2, [r7, #24]
 8005218:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800521a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800521c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <xQueueGenericSendFromISR+0xcc>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d12c      	bne.n	800528a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	68b9      	ldr	r1, [r7, #8]
 800523e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005240:	f000 f916 	bl	8005470 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005244:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d112      	bne.n	8005274 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b00      	cmp	r3, #0
 8005254:	d016      	beq.n	8005284 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	3324      	adds	r3, #36	; 0x24
 800525a:	4618      	mov	r0, r3
 800525c:	f000 ff14 	bl	8006088 <xTaskRemoveFromEventList>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00e      	beq.n	8005284 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00b      	beq.n	8005284 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e007      	b.n	8005284 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005278:	3301      	adds	r3, #1
 800527a:	b2db      	uxtb	r3, r3
 800527c:	b25a      	sxtb	r2, r3
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005284:	2301      	movs	r3, #1
 8005286:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005288:	e001      	b.n	800528e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800528a:	2300      	movs	r3, #0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
 800528e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005290:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005298:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800529a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800529c:	4618      	mov	r0, r3
 800529e:	3738      	adds	r7, #56	; 0x38
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08c      	sub	sp, #48	; 0x30
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052b0:	2300      	movs	r3, #0
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10c      	bne.n	80052d8 <xQueueReceive+0x34>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	b672      	cpsid	i
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	b662      	cpsie	i
 80052d2:	623b      	str	r3, [r7, #32]
}
 80052d4:	bf00      	nop
 80052d6:	e7fe      	b.n	80052d6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d103      	bne.n	80052e6 <xQueueReceive+0x42>
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <xQueueReceive+0x46>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueReceive+0x48>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10c      	bne.n	800530a <xQueueReceive+0x66>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f4:	b672      	cpsid	i
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	b662      	cpsie	i
 8005304:	61fb      	str	r3, [r7, #28]
}
 8005306:	bf00      	nop
 8005308:	e7fe      	b.n	8005308 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800530a:	f001 f887 	bl	800641c <xTaskGetSchedulerState>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <xQueueReceive+0x76>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <xQueueReceive+0x7a>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <xQueueReceive+0x7c>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10c      	bne.n	800533e <xQueueReceive+0x9a>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005328:	b672      	cpsid	i
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	b662      	cpsie	i
 8005338:	61bb      	str	r3, [r7, #24]
}
 800533a:	bf00      	nop
 800533c:	e7fe      	b.n	800533c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800533e:	f001 fe7d 	bl	800703c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534a:	2b00      	cmp	r3, #0
 800534c:	d01f      	beq.n	800538e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800534e:	68b9      	ldr	r1, [r7, #8]
 8005350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005352:	f000 f8f7 	bl	8005544 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	1e5a      	subs	r2, r3, #1
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00f      	beq.n	8005386 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	3310      	adds	r3, #16
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fe8c 	bl	8006088 <xTaskRemoveFromEventList>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d007      	beq.n	8005386 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005376:	4b3d      	ldr	r3, [pc, #244]	; (800546c <xQueueReceive+0x1c8>)
 8005378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005386:	f001 fe8d 	bl	80070a4 <vPortExitCritical>
				return pdPASS;
 800538a:	2301      	movs	r3, #1
 800538c:	e069      	b.n	8005462 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d103      	bne.n	800539c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005394:	f001 fe86 	bl	80070a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005398:	2300      	movs	r3, #0
 800539a:	e062      	b.n	8005462 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053a2:	f107 0310 	add.w	r3, r7, #16
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fed4 	bl	8006154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ac:	2301      	movs	r3, #1
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053b0:	f001 fe78 	bl	80070a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053b4:	f000 fc34 	bl	8005c20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053b8:	f001 fe40 	bl	800703c <vPortEnterCritical>
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053c2:	b25b      	sxtb	r3, r3
 80053c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c8:	d103      	bne.n	80053d2 <xQueueReceive+0x12e>
 80053ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d8:	b25b      	sxtb	r3, r3
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053de:	d103      	bne.n	80053e8 <xQueueReceive+0x144>
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e8:	f001 fe5c 	bl	80070a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053ec:	1d3a      	adds	r2, r7, #4
 80053ee:	f107 0310 	add.w	r3, r7, #16
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fec3 	bl	8006180 <xTaskCheckForTimeOut>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d123      	bne.n	8005448 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005402:	f000 f917 	bl	8005634 <prvIsQueueEmpty>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	3324      	adds	r3, #36	; 0x24
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	4611      	mov	r1, r2
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fde3 	bl	8005fe0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800541a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541c:	f000 f8b8 	bl	8005590 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005420:	f000 fc0c 	bl	8005c3c <xTaskResumeAll>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d189      	bne.n	800533e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800542a:	4b10      	ldr	r3, [pc, #64]	; (800546c <xQueueReceive+0x1c8>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	e780      	b.n	800533e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800543c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800543e:	f000 f8a7 	bl	8005590 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005442:	f000 fbfb 	bl	8005c3c <xTaskResumeAll>
 8005446:	e77a      	b.n	800533e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800544a:	f000 f8a1 	bl	8005590 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800544e:	f000 fbf5 	bl	8005c3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005454:	f000 f8ee 	bl	8005634 <prvIsQueueEmpty>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	f43f af6f 	beq.w	800533e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005460:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005462:	4618      	mov	r0, r3
 8005464:	3730      	adds	r7, #48	; 0x30
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b086      	sub	sp, #24
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d14d      	bne.n	8005532 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 ffdc 	bl	8006458 <xTaskPriorityDisinherit>
 80054a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	e043      	b.n	8005532 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d119      	bne.n	80054e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6858      	ldr	r0, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	461a      	mov	r2, r3
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	f002 f8f4 	bl	80076a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d32b      	bcc.n	8005532 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	605a      	str	r2, [r3, #4]
 80054e2:	e026      	b.n	8005532 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	68d8      	ldr	r0, [r3, #12]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ec:	461a      	mov	r2, r3
 80054ee:	68b9      	ldr	r1, [r7, #8]
 80054f0:	f002 f8da 	bl	80076a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	68da      	ldr	r2, [r3, #12]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fc:	425b      	negs	r3, r3
 80054fe:	441a      	add	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	68da      	ldr	r2, [r3, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d207      	bcs.n	8005520 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005518:	425b      	negs	r3, r3
 800551a:	441a      	add	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d105      	bne.n	8005532 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	3b01      	subs	r3, #1
 8005530:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1c5a      	adds	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800553a:	697b      	ldr	r3, [r7, #20]
}
 800553c:	4618      	mov	r0, r3
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d018      	beq.n	8005588 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	441a      	add	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	429a      	cmp	r2, r3
 800556e:	d303      	bcc.n	8005578 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68d9      	ldr	r1, [r3, #12]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	461a      	mov	r2, r3
 8005582:	6838      	ldr	r0, [r7, #0]
 8005584:	f002 f890 	bl	80076a8 <memcpy>
	}
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005598:	f001 fd50 	bl	800703c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055a4:	e011      	b.n	80055ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d012      	beq.n	80055d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3324      	adds	r3, #36	; 0x24
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 fd68 	bl	8006088 <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80055be:	f000 fe45 	bl	800624c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dce9      	bgt.n	80055a6 <prvUnlockQueue+0x16>
 80055d2:	e000      	b.n	80055d6 <prvUnlockQueue+0x46>
					break;
 80055d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	22ff      	movs	r2, #255	; 0xff
 80055da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80055de:	f001 fd61 	bl	80070a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80055e2:	f001 fd2b 	bl	800703c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055ee:	e011      	b.n	8005614 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d012      	beq.n	800561e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3310      	adds	r3, #16
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 fd43 	bl	8006088 <xTaskRemoveFromEventList>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005608:	f000 fe20 	bl	800624c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	3b01      	subs	r3, #1
 8005610:	b2db      	uxtb	r3, r3
 8005612:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005614:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005618:	2b00      	cmp	r3, #0
 800561a:	dce9      	bgt.n	80055f0 <prvUnlockQueue+0x60>
 800561c:	e000      	b.n	8005620 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800561e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	22ff      	movs	r2, #255	; 0xff
 8005624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005628:	f001 fd3c 	bl	80070a4 <vPortExitCritical>
}
 800562c:	bf00      	nop
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800563c:	f001 fcfe 	bl	800703c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005644:	2b00      	cmp	r3, #0
 8005646:	d102      	bne.n	800564e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005648:	2301      	movs	r3, #1
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e001      	b.n	8005652 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005652:	f001 fd27 	bl	80070a4 <vPortExitCritical>

	return xReturn;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005668:	f001 fce8 	bl	800703c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005674:	429a      	cmp	r2, r3
 8005676:	d102      	bne.n	800567e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005678:	2301      	movs	r3, #1
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e001      	b.n	8005682 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005682:	f001 fd0f 	bl	80070a4 <vPortExitCritical>

	return xReturn;
 8005686:	68fb      	ldr	r3, [r7, #12]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800569a:	2300      	movs	r3, #0
 800569c:	60fb      	str	r3, [r7, #12]
 800569e:	e014      	b.n	80056ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <vQueueAddToRegistry+0x50>)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10b      	bne.n	80056c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80056ac:	490c      	ldr	r1, [pc, #48]	; (80056e0 <vQueueAddToRegistry+0x50>)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <vQueueAddToRegistry+0x50>)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	4413      	add	r3, r2
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80056c2:	e006      	b.n	80056d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3301      	adds	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2b07      	cmp	r3, #7
 80056ce:	d9e7      	bls.n	80056a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	2000114c 	.word	0x2000114c

080056e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056f4:	f001 fca2 	bl	800703c <vPortEnterCritical>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056fe:	b25b      	sxtb	r3, r3
 8005700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005704:	d103      	bne.n	800570e <vQueueWaitForMessageRestricted+0x2a>
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005714:	b25b      	sxtb	r3, r3
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d103      	bne.n	8005724 <vQueueWaitForMessageRestricted+0x40>
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005724:	f001 fcbe 	bl	80070a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d106      	bne.n	800573e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	3324      	adds	r3, #36	; 0x24
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fc77 	bl	800602c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800573e:	6978      	ldr	r0, [r7, #20]
 8005740:	f7ff ff26 	bl	8005590 <prvUnlockQueue>
	}
 8005744:	bf00      	nop
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800574c:	b580      	push	{r7, lr}
 800574e:	b08e      	sub	sp, #56	; 0x38
 8005750:	af04      	add	r7, sp, #16
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800575a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10c      	bne.n	800577a <xTaskCreateStatic+0x2e>
	__asm volatile
 8005760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005764:	b672      	cpsid	i
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	b662      	cpsie	i
 8005774:	623b      	str	r3, [r7, #32]
}
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10c      	bne.n	800579a <xTaskCreateStatic+0x4e>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	b672      	cpsid	i
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	b662      	cpsie	i
 8005794:	61fb      	str	r3, [r7, #28]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800579a:	23bc      	movs	r3, #188	; 0xbc
 800579c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2bbc      	cmp	r3, #188	; 0xbc
 80057a2:	d00c      	beq.n	80057be <xTaskCreateStatic+0x72>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a8:	b672      	cpsid	i
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	b662      	cpsie	i
 80057b8:	61bb      	str	r3, [r7, #24]
}
 80057ba:	bf00      	nop
 80057bc:	e7fe      	b.n	80057bc <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80057be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d01e      	beq.n	8005804 <xTaskCreateStatic+0xb8>
 80057c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01b      	beq.n	8005804 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80057d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80057de:	2300      	movs	r3, #0
 80057e0:	9303      	str	r3, [sp, #12]
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	9302      	str	r3, [sp, #8]
 80057e6:	f107 0314 	add.w	r3, r7, #20
 80057ea:	9301      	str	r3, [sp, #4]
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	9300      	str	r3, [sp, #0]
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 f850 	bl	800589c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057fe:	f000 f8f5 	bl	80059ec <prvAddNewTaskToReadyList>
 8005802:	e001      	b.n	8005808 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005808:	697b      	ldr	r3, [r7, #20]
	}
 800580a:	4618      	mov	r0, r3
 800580c:	3728      	adds	r7, #40	; 0x28
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005812:	b580      	push	{r7, lr}
 8005814:	b08c      	sub	sp, #48	; 0x30
 8005816:	af04      	add	r7, sp, #16
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	603b      	str	r3, [r7, #0]
 800581e:	4613      	mov	r3, r2
 8005820:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fd34 	bl	8007294 <pvPortMalloc>
 800582c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00e      	beq.n	8005852 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005834:	20bc      	movs	r0, #188	; 0xbc
 8005836:	f001 fd2d 	bl	8007294 <pvPortMalloc>
 800583a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
 8005848:	e005      	b.n	8005856 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800584a:	6978      	ldr	r0, [r7, #20]
 800584c:	f001 fdec 	bl	8007428 <vPortFree>
 8005850:	e001      	b.n	8005856 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d017      	beq.n	800588c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005864:	88fa      	ldrh	r2, [r7, #6]
 8005866:	2300      	movs	r3, #0
 8005868:	9303      	str	r3, [sp, #12]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	9301      	str	r3, [sp, #4]
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68b9      	ldr	r1, [r7, #8]
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f000 f80e 	bl	800589c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005880:	69f8      	ldr	r0, [r7, #28]
 8005882:	f000 f8b3 	bl	80059ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005886:	2301      	movs	r3, #1
 8005888:	61bb      	str	r3, [r7, #24]
 800588a:	e002      	b.n	8005892 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800588c:	f04f 33ff 	mov.w	r3, #4294967295
 8005890:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005892:	69bb      	ldr	r3, [r7, #24]
	}
 8005894:	4618      	mov	r0, r3
 8005896:	3720      	adds	r7, #32
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60f8      	str	r0, [r7, #12]
 80058a4:	60b9      	str	r1, [r7, #8]
 80058a6:	607a      	str	r2, [r7, #4]
 80058a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	461a      	mov	r2, r3
 80058b4:	21a5      	movs	r1, #165	; 0xa5
 80058b6:	f001 ff05 	bl	80076c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058c4:	440b      	add	r3, r1
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4413      	add	r3, r2
 80058ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	f023 0307 	bic.w	r3, r3, #7
 80058d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0307 	and.w	r3, r3, #7
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	b672      	cpsid	i
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	b662      	cpsie	i
 80058f2:	617b      	str	r3, [r7, #20]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01f      	beq.n	800593e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
 8005902:	e012      	b.n	800592a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	4413      	add	r3, r2
 800590a:	7819      	ldrb	r1, [r3, #0]
 800590c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	4413      	add	r3, r2
 8005912:	3334      	adds	r3, #52	; 0x34
 8005914:	460a      	mov	r2, r1
 8005916:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	4413      	add	r3, r2
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d006      	beq.n	8005932 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	3301      	adds	r3, #1
 8005928:	61fb      	str	r3, [r7, #28]
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	2b0f      	cmp	r3, #15
 800592e:	d9e9      	bls.n	8005904 <prvInitialiseNewTask+0x68>
 8005930:	e000      	b.n	8005934 <prvInitialiseNewTask+0x98>
			{
				break;
 8005932:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2200      	movs	r2, #0
 8005938:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800593c:	e003      	b.n	8005946 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2200      	movs	r2, #0
 8005942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005948:	2b37      	cmp	r3, #55	; 0x37
 800594a:	d901      	bls.n	8005950 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800594c:	2337      	movs	r3, #55	; 0x37
 800594e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005952:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800595a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	2200      	movs	r2, #0
 8005960:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff f952 	bl	8004c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800596c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800596e:	3318      	adds	r3, #24
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff f94d 	bl	8004c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800597a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800597c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005996:	2200      	movs	r2, #0
 8005998:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	3354      	adds	r3, #84	; 0x54
 80059a0:	2260      	movs	r2, #96	; 0x60
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fe8d 	bl	80076c4 <memset>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ac:	4a0c      	ldr	r2, [pc, #48]	; (80059e0 <prvInitialiseNewTask+0x144>)
 80059ae:	659a      	str	r2, [r3, #88]	; 0x58
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	4a0c      	ldr	r2, [pc, #48]	; (80059e4 <prvInitialiseNewTask+0x148>)
 80059b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	4a0b      	ldr	r2, [pc, #44]	; (80059e8 <prvInitialiseNewTask+0x14c>)
 80059ba:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	69b8      	ldr	r0, [r7, #24]
 80059c2:	f001 fa2d 	bl	8006e20 <pxPortInitialiseStack>
 80059c6:	4602      	mov	r2, r0
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059d8:	bf00      	nop
 80059da:	3720      	adds	r7, #32
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	08007940 	.word	0x08007940
 80059e4:	08007960 	.word	0x08007960
 80059e8:	08007920 	.word	0x08007920

080059ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80059f4:	f001 fb22 	bl	800703c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80059f8:	4b2d      	ldr	r3, [pc, #180]	; (8005ab0 <prvAddNewTaskToReadyList+0xc4>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	3301      	adds	r3, #1
 80059fe:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <prvAddNewTaskToReadyList+0xc4>)
 8005a00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a02:	4b2c      	ldr	r3, [pc, #176]	; (8005ab4 <prvAddNewTaskToReadyList+0xc8>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d109      	bne.n	8005a1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <prvAddNewTaskToReadyList+0xc8>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a10:	4b27      	ldr	r3, [pc, #156]	; (8005ab0 <prvAddNewTaskToReadyList+0xc4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d110      	bne.n	8005a3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a18:	f000 fc3c 	bl	8006294 <prvInitialiseTaskLists>
 8005a1c:	e00d      	b.n	8005a3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <prvAddNewTaskToReadyList+0xcc>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d109      	bne.n	8005a3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a26:	4b23      	ldr	r3, [pc, #140]	; (8005ab4 <prvAddNewTaskToReadyList+0xc8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d802      	bhi.n	8005a3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a34:	4a1f      	ldr	r2, [pc, #124]	; (8005ab4 <prvAddNewTaskToReadyList+0xc8>)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a3a:	4b20      	ldr	r3, [pc, #128]	; (8005abc <prvAddNewTaskToReadyList+0xd0>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	4a1e      	ldr	r2, [pc, #120]	; (8005abc <prvAddNewTaskToReadyList+0xd0>)
 8005a42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a44:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <prvAddNewTaskToReadyList+0xd0>)
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <prvAddNewTaskToReadyList+0xd4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d903      	bls.n	8005a60 <prvAddNewTaskToReadyList+0x74>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <prvAddNewTaskToReadyList+0xd4>)
 8005a5e:	6013      	str	r3, [r2, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <prvAddNewTaskToReadyList+0xd8>)
 8005a6e:	441a      	add	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4619      	mov	r1, r3
 8005a76:	4610      	mov	r0, r2
 8005a78:	f7ff f8d7 	bl	8004c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a7c:	f001 fb12 	bl	80070a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a80:	4b0d      	ldr	r3, [pc, #52]	; (8005ab8 <prvAddNewTaskToReadyList+0xcc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00e      	beq.n	8005aa6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a88:	4b0a      	ldr	r3, [pc, #40]	; (8005ab4 <prvAddNewTaskToReadyList+0xc8>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d207      	bcs.n	8005aa6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a96:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvAddNewTaskToReadyList+0xdc>)
 8005a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	f3bf 8f4f 	dsb	sy
 8005aa2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aa6:	bf00      	nop
 8005aa8:	3708      	adds	r7, #8
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	20001660 	.word	0x20001660
 8005ab4:	2000118c 	.word	0x2000118c
 8005ab8:	2000166c 	.word	0x2000166c
 8005abc:	2000167c 	.word	0x2000167c
 8005ac0:	20001668 	.word	0x20001668
 8005ac4:	20001190 	.word	0x20001190
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d019      	beq.n	8005b12 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <vTaskDelay+0x64>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00c      	beq.n	8005b00 <vTaskDelay+0x34>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	b672      	cpsid	i
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	b662      	cpsie	i
 8005afa:	60bb      	str	r3, [r7, #8]
}
 8005afc:	bf00      	nop
 8005afe:	e7fe      	b.n	8005afe <vTaskDelay+0x32>
			vTaskSuspendAll();
 8005b00:	f000 f88e 	bl	8005c20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b04:	2100      	movs	r1, #0
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fd18 	bl	800653c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b0c:	f000 f896 	bl	8005c3c <xTaskResumeAll>
 8005b10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d107      	bne.n	8005b28 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <vTaskDelay+0x68>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b28:	bf00      	nop
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	20001688 	.word	0x20001688
 8005b34:	e000ed04 	.word	0xe000ed04

08005b38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	; 0x28
 8005b3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b42:	2300      	movs	r3, #0
 8005b44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b46:	463a      	mov	r2, r7
 8005b48:	1d39      	adds	r1, r7, #4
 8005b4a:	f107 0308 	add.w	r3, r7, #8
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f7ff f80a 	bl	8004b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	9202      	str	r2, [sp, #8]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	2300      	movs	r3, #0
 8005b64:	460a      	mov	r2, r1
 8005b66:	4926      	ldr	r1, [pc, #152]	; (8005c00 <vTaskStartScheduler+0xc8>)
 8005b68:	4826      	ldr	r0, [pc, #152]	; (8005c04 <vTaskStartScheduler+0xcc>)
 8005b6a:	f7ff fdef 	bl	800574c <xTaskCreateStatic>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <vTaskStartScheduler+0xd0>)
 8005b72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b74:	4b24      	ldr	r3, [pc, #144]	; (8005c08 <vTaskStartScheduler+0xd0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	e001      	b.n	8005b86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d102      	bne.n	8005b92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b8c:	f000 fd2a 	bl	80065e4 <xTimerCreateTimerTask>
 8005b90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d11d      	bne.n	8005bd4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	b672      	cpsid	i
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	b662      	cpsie	i
 8005bac:	613b      	str	r3, [r7, #16]
}
 8005bae:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bb0:	4b16      	ldr	r3, [pc, #88]	; (8005c0c <vTaskStartScheduler+0xd4>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3354      	adds	r3, #84	; 0x54
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <vTaskStartScheduler+0xd8>)
 8005bb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bba:	4b16      	ldr	r3, [pc, #88]	; (8005c14 <vTaskStartScheduler+0xdc>)
 8005bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bc2:	4b15      	ldr	r3, [pc, #84]	; (8005c18 <vTaskStartScheduler+0xe0>)
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bc8:	4b14      	ldr	r3, [pc, #80]	; (8005c1c <vTaskStartScheduler+0xe4>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005bce:	f001 f9b7 	bl	8006f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005bd2:	e010      	b.n	8005bf6 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bda:	d10c      	bne.n	8005bf6 <vTaskStartScheduler+0xbe>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be0:	b672      	cpsid	i
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	b662      	cpsie	i
 8005bf0:	60fb      	str	r3, [r7, #12]
}
 8005bf2:	bf00      	nop
 8005bf4:	e7fe      	b.n	8005bf4 <vTaskStartScheduler+0xbc>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	080078a4 	.word	0x080078a4
 8005c04:	08006265 	.word	0x08006265
 8005c08:	20001684 	.word	0x20001684
 8005c0c:	2000118c 	.word	0x2000118c
 8005c10:	20000010 	.word	0x20000010
 8005c14:	20001680 	.word	0x20001680
 8005c18:	2000166c 	.word	0x2000166c
 8005c1c:	20001664 	.word	0x20001664

08005c20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005c24:	4b04      	ldr	r3, [pc, #16]	; (8005c38 <vTaskSuspendAll+0x18>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	4a03      	ldr	r2, [pc, #12]	; (8005c38 <vTaskSuspendAll+0x18>)
 8005c2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005c2e:	bf00      	nop
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	20001688 	.word	0x20001688

08005c3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c4a:	4b43      	ldr	r3, [pc, #268]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10c      	bne.n	8005c6c <xTaskResumeAll+0x30>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	b672      	cpsid	i
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	b662      	cpsie	i
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c6c:	f001 f9e6 	bl	800703c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c70:	4b39      	ldr	r3, [pc, #228]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	4a38      	ldr	r2, [pc, #224]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c7a:	4b37      	ldr	r3, [pc, #220]	; (8005d58 <xTaskResumeAll+0x11c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d162      	bne.n	8005d48 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <xTaskResumeAll+0x120>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d05e      	beq.n	8005d48 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c8a:	e02f      	b.n	8005cec <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c8c:	4b34      	ldr	r3, [pc, #208]	; (8005d60 <xTaskResumeAll+0x124>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3318      	adds	r3, #24
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7ff f823 	bl	8004ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f81e 	bl	8004ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cac:	4b2d      	ldr	r3, [pc, #180]	; (8005d64 <xTaskResumeAll+0x128>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d903      	bls.n	8005cbc <xTaskResumeAll+0x80>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	4a2a      	ldr	r2, [pc, #168]	; (8005d64 <xTaskResumeAll+0x128>)
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4a27      	ldr	r2, [pc, #156]	; (8005d68 <xTaskResumeAll+0x12c>)
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe ffa9 	bl	8004c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cdc:	4b23      	ldr	r3, [pc, #140]	; (8005d6c <xTaskResumeAll+0x130>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8005ce6:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <xTaskResumeAll+0x134>)
 8005ce8:	2201      	movs	r2, #1
 8005cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cec:	4b1c      	ldr	r3, [pc, #112]	; (8005d60 <xTaskResumeAll+0x124>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1cb      	bne.n	8005c8c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005cfa:	f000 fb6f 	bl	80063dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005cfe:	4b1d      	ldr	r3, [pc, #116]	; (8005d74 <xTaskResumeAll+0x138>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d0a:	f000 f847 	bl	8005d9c <xTaskIncrementTick>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <xTaskResumeAll+0x134>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f1      	bne.n	8005d0a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8005d26:	4b13      	ldr	r3, [pc, #76]	; (8005d74 <xTaskResumeAll+0x138>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d2c:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <xTaskResumeAll+0x134>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d34:	2301      	movs	r3, #1
 8005d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d38:	4b0f      	ldr	r3, [pc, #60]	; (8005d78 <xTaskResumeAll+0x13c>)
 8005d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d3e:	601a      	str	r2, [r3, #0]
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d48:	f001 f9ac 	bl	80070a4 <vPortExitCritical>

	return xAlreadyYielded;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20001688 	.word	0x20001688
 8005d5c:	20001660 	.word	0x20001660
 8005d60:	20001620 	.word	0x20001620
 8005d64:	20001668 	.word	0x20001668
 8005d68:	20001190 	.word	0x20001190
 8005d6c:	2000118c 	.word	0x2000118c
 8005d70:	20001674 	.word	0x20001674
 8005d74:	20001670 	.word	0x20001670
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <xTaskGetTickCount+0x1c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d88:	687b      	ldr	r3, [r7, #4]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	370c      	adds	r7, #12
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20001664 	.word	0x20001664

08005d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005da2:	2300      	movs	r3, #0
 8005da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005da6:	4b50      	ldr	r3, [pc, #320]	; (8005ee8 <xTaskIncrementTick+0x14c>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f040 808b 	bne.w	8005ec6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db0:	4b4e      	ldr	r3, [pc, #312]	; (8005eec <xTaskIncrementTick+0x150>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3301      	adds	r3, #1
 8005db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005db8:	4a4c      	ldr	r2, [pc, #304]	; (8005eec <xTaskIncrementTick+0x150>)
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d122      	bne.n	8005e0a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dc4:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00c      	beq.n	8005de8 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	b672      	cpsid	i
 8005dd4:	f383 8811 	msr	BASEPRI, r3
 8005dd8:	f3bf 8f6f 	isb	sy
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	b662      	cpsie	i
 8005de2:	603b      	str	r3, [r7, #0]
}
 8005de4:	bf00      	nop
 8005de6:	e7fe      	b.n	8005de6 <xTaskIncrementTick+0x4a>
 8005de8:	4b41      	ldr	r3, [pc, #260]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	4b41      	ldr	r3, [pc, #260]	; (8005ef4 <xTaskIncrementTick+0x158>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a3f      	ldr	r2, [pc, #252]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005df4:	6013      	str	r3, [r2, #0]
 8005df6:	4a3f      	ldr	r2, [pc, #252]	; (8005ef4 <xTaskIncrementTick+0x158>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	3301      	adds	r3, #1
 8005e02:	4a3d      	ldr	r2, [pc, #244]	; (8005ef8 <xTaskIncrementTick+0x15c>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f000 fae9 	bl	80063dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e0a:	4b3c      	ldr	r3, [pc, #240]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	693a      	ldr	r2, [r7, #16]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d349      	bcc.n	8005ea8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e14:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1e:	4b37      	ldr	r3, [pc, #220]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	601a      	str	r2, [r3, #0]
					break;
 8005e26:	e03f      	b.n	8005ea8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e28:	4b31      	ldr	r3, [pc, #196]	; (8005ef0 <xTaskIncrementTick+0x154>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d203      	bcs.n	8005e48 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e40:	4a2e      	ldr	r2, [pc, #184]	; (8005efc <xTaskIncrementTick+0x160>)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e46:	e02f      	b.n	8005ea8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7fe ff49 	bl	8004ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d004      	beq.n	8005e64 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	3318      	adds	r3, #24
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fe ff40 	bl	8004ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4b25      	ldr	r3, [pc, #148]	; (8005f00 <xTaskIncrementTick+0x164>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d903      	bls.n	8005e78 <xTaskIncrementTick+0xdc>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <xTaskIncrementTick+0x164>)
 8005e76:	6013      	str	r3, [r2, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4a1f      	ldr	r2, [pc, #124]	; (8005f04 <xTaskIncrementTick+0x168>)
 8005e86:	441a      	add	r2, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	4619      	mov	r1, r3
 8005e8e:	4610      	mov	r0, r2
 8005e90:	f7fe fecb 	bl	8004c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <xTaskIncrementTick+0x16c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d3b8      	bcc.n	8005e14 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ea6:	e7b5      	b.n	8005e14 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ea8:	4b17      	ldr	r3, [pc, #92]	; (8005f08 <xTaskIncrementTick+0x16c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eae:	4915      	ldr	r1, [pc, #84]	; (8005f04 <xTaskIncrementTick+0x168>)
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	440b      	add	r3, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d907      	bls.n	8005ed0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e004      	b.n	8005ed0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <xTaskIncrementTick+0x170>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	4a0f      	ldr	r2, [pc, #60]	; (8005f0c <xTaskIncrementTick+0x170>)
 8005ece:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005ed0:	4b0f      	ldr	r3, [pc, #60]	; (8005f10 <xTaskIncrementTick+0x174>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005edc:	697b      	ldr	r3, [r7, #20]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	20001688 	.word	0x20001688
 8005eec:	20001664 	.word	0x20001664
 8005ef0:	20001618 	.word	0x20001618
 8005ef4:	2000161c 	.word	0x2000161c
 8005ef8:	20001678 	.word	0x20001678
 8005efc:	20001680 	.word	0x20001680
 8005f00:	20001668 	.word	0x20001668
 8005f04:	20001190 	.word	0x20001190
 8005f08:	2000118c 	.word	0x2000118c
 8005f0c:	20001670 	.word	0x20001670
 8005f10:	20001674 	.word	0x20001674

08005f14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f1a:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <vTaskSwitchContext+0xb4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f22:	4b2a      	ldr	r3, [pc, #168]	; (8005fcc <vTaskSwitchContext+0xb8>)
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f28:	e048      	b.n	8005fbc <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8005f2a:	4b28      	ldr	r3, [pc, #160]	; (8005fcc <vTaskSwitchContext+0xb8>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f30:	4b27      	ldr	r3, [pc, #156]	; (8005fd0 <vTaskSwitchContext+0xbc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e012      	b.n	8005f5e <vTaskSwitchContext+0x4a>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d10c      	bne.n	8005f58 <vTaskSwitchContext+0x44>
	__asm volatile
 8005f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f42:	b672      	cpsid	i
 8005f44:	f383 8811 	msr	BASEPRI, r3
 8005f48:	f3bf 8f6f 	isb	sy
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	b662      	cpsie	i
 8005f52:	607b      	str	r3, [r7, #4]
}
 8005f54:	bf00      	nop
 8005f56:	e7fe      	b.n	8005f56 <vTaskSwitchContext+0x42>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
 8005f5e:	491d      	ldr	r1, [pc, #116]	; (8005fd4 <vTaskSwitchContext+0xc0>)
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0e2      	beq.n	8005f38 <vTaskSwitchContext+0x24>
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	4613      	mov	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	4a15      	ldr	r2, [pc, #84]	; (8005fd4 <vTaskSwitchContext+0xc0>)
 8005f7e:	4413      	add	r3, r2
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	605a      	str	r2, [r3, #4]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	685a      	ldr	r2, [r3, #4]
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	3308      	adds	r3, #8
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d104      	bne.n	8005fa2 <vTaskSwitchContext+0x8e>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	685a      	ldr	r2, [r3, #4]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a0b      	ldr	r2, [pc, #44]	; (8005fd8 <vTaskSwitchContext+0xc4>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <vTaskSwitchContext+0xbc>)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005fb2:	4b09      	ldr	r3, [pc, #36]	; (8005fd8 <vTaskSwitchContext+0xc4>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3354      	adds	r3, #84	; 0x54
 8005fb8:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <vTaskSwitchContext+0xc8>)
 8005fba:	6013      	str	r3, [r2, #0]
}
 8005fbc:	bf00      	nop
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr
 8005fc8:	20001688 	.word	0x20001688
 8005fcc:	20001674 	.word	0x20001674
 8005fd0:	20001668 	.word	0x20001668
 8005fd4:	20001190 	.word	0x20001190
 8005fd8:	2000118c 	.word	0x2000118c
 8005fdc:	20000010 	.word	0x20000010

08005fe0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10c      	bne.n	800600a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff4:	b672      	cpsid	i
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	b662      	cpsie	i
 8006004:	60fb      	str	r3, [r7, #12]
}
 8006006:	bf00      	nop
 8006008:	e7fe      	b.n	8006008 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800600a:	4b07      	ldr	r3, [pc, #28]	; (8006028 <vTaskPlaceOnEventList+0x48>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	3318      	adds	r3, #24
 8006010:	4619      	mov	r1, r3
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fe fe2d 	bl	8004c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006018:	2101      	movs	r1, #1
 800601a:	6838      	ldr	r0, [r7, #0]
 800601c:	f000 fa8e 	bl	800653c <prvAddCurrentTaskToDelayedList>
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	2000118c 	.word	0x2000118c

0800602c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10c      	bne.n	8006058 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	b672      	cpsid	i
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	b662      	cpsie	i
 8006052:	617b      	str	r3, [r7, #20]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <vTaskPlaceOnEventListRestricted+0x58>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3318      	adds	r3, #24
 800605e:	4619      	mov	r1, r3
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7fe fde2 	bl	8004c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800606c:	f04f 33ff 	mov.w	r3, #4294967295
 8006070:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	68b8      	ldr	r0, [r7, #8]
 8006076:	f000 fa61 	bl	800653c <prvAddCurrentTaskToDelayedList>
	}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	2000118c 	.word	0x2000118c

08006088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10c      	bne.n	80060b8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	b672      	cpsid	i
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	b662      	cpsie	i
 80060b2:	60fb      	str	r3, [r7, #12]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3318      	adds	r3, #24
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe fe11 	bl	8004ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060c2:	4b1e      	ldr	r3, [pc, #120]	; (800613c <xTaskRemoveFromEventList+0xb4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11d      	bne.n	8006106 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fe08 	bl	8004ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	4b19      	ldr	r3, [pc, #100]	; (8006140 <xTaskRemoveFromEventList+0xb8>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d903      	bls.n	80060e8 <xTaskRemoveFromEventList+0x60>
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	4a16      	ldr	r2, [pc, #88]	; (8006140 <xTaskRemoveFromEventList+0xb8>)
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4613      	mov	r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4a13      	ldr	r2, [pc, #76]	; (8006144 <xTaskRemoveFromEventList+0xbc>)
 80060f6:	441a      	add	r2, r3
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	4610      	mov	r0, r2
 8006100:	f7fe fd93 	bl	8004c2a <vListInsertEnd>
 8006104:	e005      	b.n	8006112 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3318      	adds	r3, #24
 800610a:	4619      	mov	r1, r3
 800610c:	480e      	ldr	r0, [pc, #56]	; (8006148 <xTaskRemoveFromEventList+0xc0>)
 800610e:	f7fe fd8c 	bl	8004c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006116:	4b0d      	ldr	r3, [pc, #52]	; (800614c <xTaskRemoveFromEventList+0xc4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	429a      	cmp	r2, r3
 800611e:	d905      	bls.n	800612c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006124:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <xTaskRemoveFromEventList+0xc8>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]
 800612a:	e001      	b.n	8006130 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006130:	697b      	ldr	r3, [r7, #20]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	20001688 	.word	0x20001688
 8006140:	20001668 	.word	0x20001668
 8006144:	20001190 	.word	0x20001190
 8006148:	20001620 	.word	0x20001620
 800614c:	2000118c 	.word	0x2000118c
 8006150:	20001674 	.word	0x20001674

08006154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <vTaskInternalSetTimeOutState+0x24>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <vTaskInternalSetTimeOutState+0x28>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	605a      	str	r2, [r3, #4]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20001678 	.word	0x20001678
 800617c:	20001664 	.word	0x20001664

08006180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10c      	bne.n	80061aa <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	b672      	cpsid	i
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	b662      	cpsie	i
 80061a4:	613b      	str	r3, [r7, #16]
}
 80061a6:	bf00      	nop
 80061a8:	e7fe      	b.n	80061a8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10c      	bne.n	80061ca <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80061b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b4:	b672      	cpsid	i
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	b662      	cpsie	i
 80061c4:	60fb      	str	r3, [r7, #12]
}
 80061c6:	bf00      	nop
 80061c8:	e7fe      	b.n	80061c8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80061ca:	f000 ff37 	bl	800703c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061ce:	4b1d      	ldr	r3, [pc, #116]	; (8006244 <xTaskCheckForTimeOut+0xc4>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d102      	bne.n	80061ee <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e023      	b.n	8006236 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b15      	ldr	r3, [pc, #84]	; (8006248 <xTaskCheckForTimeOut+0xc8>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d007      	beq.n	800620a <xTaskCheckForTimeOut+0x8a>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	429a      	cmp	r2, r3
 8006202:	d302      	bcc.n	800620a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	61fb      	str	r3, [r7, #28]
 8006208:	e015      	b.n	8006236 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	d20b      	bcs.n	800622c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad2      	subs	r2, r2, r3
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7ff ff97 	bl	8006154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
 800622a:	e004      	b.n	8006236 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006232:	2301      	movs	r3, #1
 8006234:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006236:	f000 ff35 	bl	80070a4 <vPortExitCritical>

	return xReturn;
 800623a:	69fb      	ldr	r3, [r7, #28]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20001664 	.word	0x20001664
 8006248:	20001678 	.word	0x20001678

0800624c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006250:	4b03      	ldr	r3, [pc, #12]	; (8006260 <vTaskMissedYield+0x14>)
 8006252:	2201      	movs	r2, #1
 8006254:	601a      	str	r2, [r3, #0]
}
 8006256:	bf00      	nop
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	20001674 	.word	0x20001674

08006264 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800626c:	f000 f852 	bl	8006314 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006270:	4b06      	ldr	r3, [pc, #24]	; (800628c <prvIdleTask+0x28>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d9f9      	bls.n	800626c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006278:	4b05      	ldr	r3, [pc, #20]	; (8006290 <prvIdleTask+0x2c>)
 800627a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	f3bf 8f4f 	dsb	sy
 8006284:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006288:	e7f0      	b.n	800626c <prvIdleTask+0x8>
 800628a:	bf00      	nop
 800628c:	20001190 	.word	0x20001190
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
 800629e:	e00c      	b.n	80062ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a12      	ldr	r2, [pc, #72]	; (80062f4 <prvInitialiseTaskLists+0x60>)
 80062ac:	4413      	add	r3, r2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fc8e 	bl	8004bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3301      	adds	r3, #1
 80062b8:	607b      	str	r3, [r7, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2b37      	cmp	r3, #55	; 0x37
 80062be:	d9ef      	bls.n	80062a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062c0:	480d      	ldr	r0, [pc, #52]	; (80062f8 <prvInitialiseTaskLists+0x64>)
 80062c2:	f7fe fc85 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062c6:	480d      	ldr	r0, [pc, #52]	; (80062fc <prvInitialiseTaskLists+0x68>)
 80062c8:	f7fe fc82 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062cc:	480c      	ldr	r0, [pc, #48]	; (8006300 <prvInitialiseTaskLists+0x6c>)
 80062ce:	f7fe fc7f 	bl	8004bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062d2:	480c      	ldr	r0, [pc, #48]	; (8006304 <prvInitialiseTaskLists+0x70>)
 80062d4:	f7fe fc7c 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062d8:	480b      	ldr	r0, [pc, #44]	; (8006308 <prvInitialiseTaskLists+0x74>)
 80062da:	f7fe fc79 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <prvInitialiseTaskLists+0x78>)
 80062e0:	4a05      	ldr	r2, [pc, #20]	; (80062f8 <prvInitialiseTaskLists+0x64>)
 80062e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062e4:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <prvInitialiseTaskLists+0x7c>)
 80062e6:	4a05      	ldr	r2, [pc, #20]	; (80062fc <prvInitialiseTaskLists+0x68>)
 80062e8:	601a      	str	r2, [r3, #0]
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20001190 	.word	0x20001190
 80062f8:	200015f0 	.word	0x200015f0
 80062fc:	20001604 	.word	0x20001604
 8006300:	20001620 	.word	0x20001620
 8006304:	20001634 	.word	0x20001634
 8006308:	2000164c 	.word	0x2000164c
 800630c:	20001618 	.word	0x20001618
 8006310:	2000161c 	.word	0x2000161c

08006314 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800631a:	e019      	b.n	8006350 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800631c:	f000 fe8e 	bl	800703c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006320:	4b10      	ldr	r3, [pc, #64]	; (8006364 <prvCheckTasksWaitingTermination+0x50>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fcd9 	bl	8004ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006332:	4b0d      	ldr	r3, [pc, #52]	; (8006368 <prvCheckTasksWaitingTermination+0x54>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3b01      	subs	r3, #1
 8006338:	4a0b      	ldr	r2, [pc, #44]	; (8006368 <prvCheckTasksWaitingTermination+0x54>)
 800633a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800633c:	4b0b      	ldr	r3, [pc, #44]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3b01      	subs	r3, #1
 8006342:	4a0a      	ldr	r2, [pc, #40]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 8006344:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006346:	f000 fead 	bl	80070a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f810 	bl	8006370 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006350:	4b06      	ldr	r3, [pc, #24]	; (800636c <prvCheckTasksWaitingTermination+0x58>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e1      	bne.n	800631c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	20001634 	.word	0x20001634
 8006368:	20001660 	.word	0x20001660
 800636c:	20001648 	.word	0x20001648

08006370 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	3354      	adds	r3, #84	; 0x54
 800637c:	4618      	mov	r0, r3
 800637e:	f001 f9b7 	bl	80076f0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006388:	2b00      	cmp	r3, #0
 800638a:	d108      	bne.n	800639e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	4618      	mov	r0, r3
 8006392:	f001 f849 	bl	8007428 <vPortFree>
				vPortFree( pxTCB );
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 f846 	bl	8007428 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800639c:	e01a      	b.n	80063d4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d103      	bne.n	80063b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 f83d 	bl	8007428 <vPortFree>
	}
 80063ae:	e011      	b.n	80063d4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d00c      	beq.n	80063d4 <prvDeleteTCB+0x64>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	b672      	cpsid	i
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	b662      	cpsie	i
 80063ce:	60fb      	str	r3, [r7, #12]
}
 80063d0:	bf00      	nop
 80063d2:	e7fe      	b.n	80063d2 <prvDeleteTCB+0x62>
	}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e2:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <prvResetNextTaskUnblockTime+0x38>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <prvResetNextTaskUnblockTime+0x3c>)
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063f4:	e008      	b.n	8006408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b07      	ldr	r3, [pc, #28]	; (8006414 <prvResetNextTaskUnblockTime+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a04      	ldr	r2, [pc, #16]	; (8006418 <prvResetNextTaskUnblockTime+0x3c>)
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20001618 	.word	0x20001618
 8006418:	20001680 	.word	0x20001680

0800641c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <xTaskGetSchedulerState+0x34>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800642a:	2301      	movs	r3, #1
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	e008      	b.n	8006442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <xTaskGetSchedulerState+0x38>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006438:	2302      	movs	r3, #2
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	e001      	b.n	8006442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006442:	687b      	ldr	r3, [r7, #4]
	}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	2000166c 	.word	0x2000166c
 8006454:	20001688 	.word	0x20001688

08006458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d05a      	beq.n	8006524 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800646e:	4b30      	ldr	r3, [pc, #192]	; (8006530 <xTaskPriorityDisinherit+0xd8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d00c      	beq.n	8006492 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	b672      	cpsid	i
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	b662      	cpsie	i
 800648c:	60fb      	str	r3, [r7, #12]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006496:	2b00      	cmp	r3, #0
 8006498:	d10c      	bne.n	80064b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	b672      	cpsid	i
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	b662      	cpsie	i
 80064ae:	60bb      	str	r3, [r7, #8]
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b8:	1e5a      	subs	r2, r3, #1
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d02c      	beq.n	8006524 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d128      	bne.n	8006524 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	3304      	adds	r3, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7fe fc04 	bl	8004ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f4:	4b0f      	ldr	r3, [pc, #60]	; (8006534 <xTaskPriorityDisinherit+0xdc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d903      	bls.n	8006504 <xTaskPriorityDisinherit+0xac>
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006500:	4a0c      	ldr	r2, [pc, #48]	; (8006534 <xTaskPriorityDisinherit+0xdc>)
 8006502:	6013      	str	r3, [r2, #0]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006508:	4613      	mov	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	4413      	add	r3, r2
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4a09      	ldr	r2, [pc, #36]	; (8006538 <xTaskPriorityDisinherit+0xe0>)
 8006512:	441a      	add	r2, r3
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	3304      	adds	r3, #4
 8006518:	4619      	mov	r1, r3
 800651a:	4610      	mov	r0, r2
 800651c:	f7fe fb85 	bl	8004c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006524:	697b      	ldr	r3, [r7, #20]
	}
 8006526:	4618      	mov	r0, r3
 8006528:	3718      	adds	r7, #24
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	2000118c 	.word	0x2000118c
 8006534:	20001668 	.word	0x20001668
 8006538:	20001190 	.word	0x20001190

0800653c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006546:	4b21      	ldr	r3, [pc, #132]	; (80065cc <prvAddCurrentTaskToDelayedList+0x90>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800654c:	4b20      	ldr	r3, [pc, #128]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	3304      	adds	r3, #4
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe fbc6 	bl	8004ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655e:	d10a      	bne.n	8006576 <prvAddCurrentTaskToDelayedList+0x3a>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d007      	beq.n	8006576 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	3304      	adds	r3, #4
 800656c:	4619      	mov	r1, r3
 800656e:	4819      	ldr	r0, [pc, #100]	; (80065d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006570:	f7fe fb5b 	bl	8004c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006574:	e026      	b.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800657e:	4b14      	ldr	r3, [pc, #80]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	429a      	cmp	r2, r3
 800658c:	d209      	bcs.n	80065a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658e:	4b12      	ldr	r3, [pc, #72]	; (80065d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f7fe fb69 	bl	8004c72 <vListInsert>
}
 80065a0:	e010      	b.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065a2:	4b0e      	ldr	r3, [pc, #56]	; (80065dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3304      	adds	r3, #4
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f7fe fb5f 	bl	8004c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065b4:	4b0a      	ldr	r3, [pc, #40]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d202      	bcs.n	80065c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065be:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20001664 	.word	0x20001664
 80065d0:	2000118c 	.word	0x2000118c
 80065d4:	2000164c 	.word	0x2000164c
 80065d8:	2000161c 	.word	0x2000161c
 80065dc:	20001618 	.word	0x20001618
 80065e0:	20001680 	.word	0x20001680

080065e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	; 0x28
 80065e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065ee:	f000 fbb5 	bl	8006d5c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065f2:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <xTimerCreateTimerTask+0x84>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d021      	beq.n	800663e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065fe:	2300      	movs	r3, #0
 8006600:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006602:	1d3a      	adds	r2, r7, #4
 8006604:	f107 0108 	add.w	r1, r7, #8
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	4618      	mov	r0, r3
 800660e:	f7fe fac5 	bl	8004b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	9202      	str	r2, [sp, #8]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	2302      	movs	r3, #2
 800661e:	9300      	str	r3, [sp, #0]
 8006620:	2300      	movs	r3, #0
 8006622:	460a      	mov	r2, r1
 8006624:	4911      	ldr	r1, [pc, #68]	; (800666c <xTimerCreateTimerTask+0x88>)
 8006626:	4812      	ldr	r0, [pc, #72]	; (8006670 <xTimerCreateTimerTask+0x8c>)
 8006628:	f7ff f890 	bl	800574c <xTaskCreateStatic>
 800662c:	4603      	mov	r3, r0
 800662e:	4a11      	ldr	r2, [pc, #68]	; (8006674 <xTimerCreateTimerTask+0x90>)
 8006630:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006632:	4b10      	ldr	r3, [pc, #64]	; (8006674 <xTimerCreateTimerTask+0x90>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800663a:	2301      	movs	r3, #1
 800663c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10c      	bne.n	800665e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	b672      	cpsid	i
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	b662      	cpsie	i
 8006658:	613b      	str	r3, [r7, #16]
}
 800665a:	bf00      	nop
 800665c:	e7fe      	b.n	800665c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800665e:	697b      	ldr	r3, [r7, #20]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	200016bc 	.word	0x200016bc
 800666c:	080078ac 	.word	0x080078ac
 8006670:	080068f5 	.word	0x080068f5
 8006674:	200016c0 	.word	0x200016c0

08006678 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006686:	202c      	movs	r0, #44	; 0x2c
 8006688:	f000 fe04 	bl	8007294 <pvPortMalloc>
 800668c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	6a3b      	ldr	r3, [r7, #32]
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	687a      	ldr	r2, [r7, #4]
 80066a8:	68b9      	ldr	r1, [r7, #8]
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f847 	bl	800673e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80066b0:	697b      	ldr	r3, [r7, #20]
	}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b08a      	sub	sp, #40	; 0x28
 80066be:	af02      	add	r7, sp, #8
 80066c0:	60f8      	str	r0, [r7, #12]
 80066c2:	60b9      	str	r1, [r7, #8]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80066c8:	232c      	movs	r3, #44	; 0x2c
 80066ca:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	2b2c      	cmp	r3, #44	; 0x2c
 80066d0:	d00c      	beq.n	80066ec <xTimerCreateStatic+0x32>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	b672      	cpsid	i
 80066d8:	f383 8811 	msr	BASEPRI, r3
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f3bf 8f4f 	dsb	sy
 80066e4:	b662      	cpsie	i
 80066e6:	61bb      	str	r3, [r7, #24]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <xTimerCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80066ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80066ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10c      	bne.n	800670e <xTimerCreateStatic+0x54>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f8:	b672      	cpsid	i
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	b662      	cpsie	i
 8006708:	617b      	str	r3, [r7, #20]
}
 800670a:	bf00      	nop
 800670c:	e7fe      	b.n	800670c <xTimerCreateStatic+0x52>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800670e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006710:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00d      	beq.n	8006734 <xTimerCreateStatic+0x7a>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			autoreload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	9301      	str	r3, [sp, #4]
 8006724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68b9      	ldr	r1, [r7, #8]
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f805 	bl	800673e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006734:	69fb      	ldr	r3, [r7, #28]
	}
 8006736:	4618      	mov	r0, r3
 8006738:	3720      	adds	r7, #32
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
 800674a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10c      	bne.n	800676c <prvInitialiseNewTimer+0x2e>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006756:	b672      	cpsid	i
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	b662      	cpsie	i
 8006766:	617b      	str	r3, [r7, #20]
}
 8006768:	bf00      	nop
 800676a:	e7fe      	b.n	800676a <prvInitialiseNewTimer+0x2c>

	if( pxNewTimer != NULL )
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d01e      	beq.n	80067b0 <prvInitialiseNewTimer+0x72>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006772:	f000 faf3 	bl	8006d5c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006784:	683a      	ldr	r2, [r7, #0]
 8006786:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	6a3a      	ldr	r2, [r7, #32]
 800678c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	3304      	adds	r3, #4
 8006792:	4618      	mov	r0, r3
 8006794:	f7fe fa3c 	bl	8004c10 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <prvInitialiseNewTimer+0x72>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a4:	f043 0304 	orr.w	r3, r3, #4
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80067b0:	bf00      	nop
 80067b2:	3718      	adds	r7, #24
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08a      	sub	sp, #40	; 0x28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <xTimerGenericCommand+0x32>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	b672      	cpsid	i
 80067d6:	f383 8811 	msr	BASEPRI, r3
 80067da:	f3bf 8f6f 	isb	sy
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	b662      	cpsie	i
 80067e4:	623b      	str	r3, [r7, #32]
}
 80067e6:	bf00      	nop
 80067e8:	e7fe      	b.n	80067e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <xTimerGenericCommand+0x9c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d02a      	beq.n	8006848 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b05      	cmp	r3, #5
 8006802:	dc18      	bgt.n	8006836 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006804:	f7ff fe0a 	bl	800641c <xTaskGetSchedulerState>
 8006808:	4603      	mov	r3, r0
 800680a:	2b02      	cmp	r3, #2
 800680c:	d109      	bne.n	8006822 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <xTimerGenericCommand+0x9c>)
 8006810:	6818      	ldr	r0, [r3, #0]
 8006812:	f107 0110 	add.w	r1, r7, #16
 8006816:	2300      	movs	r3, #0
 8006818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681a:	f7fe fb9d 	bl	8004f58 <xQueueGenericSend>
 800681e:	6278      	str	r0, [r7, #36]	; 0x24
 8006820:	e012      	b.n	8006848 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006822:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <xTimerGenericCommand+0x9c>)
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	f107 0110 	add.w	r1, r7, #16
 800682a:	2300      	movs	r3, #0
 800682c:	2200      	movs	r2, #0
 800682e:	f7fe fb93 	bl	8004f58 <xQueueGenericSend>
 8006832:	6278      	str	r0, [r7, #36]	; 0x24
 8006834:	e008      	b.n	8006848 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006836:	4b07      	ldr	r3, [pc, #28]	; (8006854 <xTimerGenericCommand+0x9c>)
 8006838:	6818      	ldr	r0, [r3, #0]
 800683a:	f107 0110 	add.w	r1, r7, #16
 800683e:	2300      	movs	r3, #0
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	f7fe fc8f 	bl	8005164 <xQueueGenericSendFromISR>
 8006846:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800684a:	4618      	mov	r0, r3
 800684c:	3728      	adds	r7, #40	; 0x28
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	200016bc 	.word	0x200016bc

08006858 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b088      	sub	sp, #32
 800685c:	af02      	add	r7, sp, #8
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006862:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <prvProcessExpiredTimer+0x98>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fa37 	bl	8004ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800687c:	f003 0304 	and.w	r3, r3, #4
 8006880:	2b00      	cmp	r3, #0
 8006882:	d024      	beq.n	80068ce <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	18d1      	adds	r1, r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	6978      	ldr	r0, [r7, #20]
 8006892:	f000 f8d3 	bl	8006a3c <prvInsertTimerInActiveList>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d021      	beq.n	80068e0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800689c:	2300      	movs	r3, #0
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	2300      	movs	r3, #0
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	2100      	movs	r1, #0
 80068a6:	6978      	ldr	r0, [r7, #20]
 80068a8:	f7ff ff86 	bl	80067b8 <xTimerGenericCommand>
 80068ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d115      	bne.n	80068e0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	b672      	cpsid	i
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	b662      	cpsie	i
 80068c8:	60fb      	str	r3, [r7, #12]
}
 80068ca:	bf00      	nop
 80068cc:	e7fe      	b.n	80068cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068d4:	f023 0301 	bic.w	r3, r3, #1
 80068d8:	b2da      	uxtb	r2, r3
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	6978      	ldr	r0, [r7, #20]
 80068e6:	4798      	blx	r3
}
 80068e8:	bf00      	nop
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	200016b4 	.word	0x200016b4

080068f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068fc:	f107 0308 	add.w	r3, r7, #8
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f857 	bl	80069b4 <prvGetNextExpireTime>
 8006906:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4619      	mov	r1, r3
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 f803 	bl	8006918 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006912:	f000 f8d5 	bl	8006ac0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006916:	e7f1      	b.n	80068fc <prvTimerTask+0x8>

08006918 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006922:	f7ff f97d 	bl	8005c20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006926:	f107 0308 	add.w	r3, r7, #8
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f866 	bl	80069fc <prvSampleTimeNow>
 8006930:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d130      	bne.n	800699a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <prvProcessTimerOrBlockTask+0x3c>
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	429a      	cmp	r2, r3
 8006944:	d806      	bhi.n	8006954 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006946:	f7ff f979 	bl	8005c3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800694a:	68f9      	ldr	r1, [r7, #12]
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff ff83 	bl	8006858 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006952:	e024      	b.n	800699e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d008      	beq.n	800696c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800695a:	4b13      	ldr	r3, [pc, #76]	; (80069a8 <prvProcessTimerOrBlockTask+0x90>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <prvProcessTimerOrBlockTask+0x50>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <prvProcessTimerOrBlockTask+0x52>
 8006968:	2300      	movs	r3, #0
 800696a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800696c:	4b0f      	ldr	r3, [pc, #60]	; (80069ac <prvProcessTimerOrBlockTask+0x94>)
 800696e:	6818      	ldr	r0, [r3, #0]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	4619      	mov	r1, r3
 800697a:	f7fe feb3 	bl	80056e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800697e:	f7ff f95d 	bl	8005c3c <xTaskResumeAll>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <prvProcessTimerOrBlockTask+0x98>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
}
 8006998:	e001      	b.n	800699e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800699a:	f7ff f94f 	bl	8005c3c <xTaskResumeAll>
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200016b8 	.word	0x200016b8
 80069ac:	200016bc 	.word	0x200016bc
 80069b0:	e000ed04 	.word	0xe000ed04

080069b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80069bc:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <prvGetNextExpireTime+0x44>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <prvGetNextExpireTime+0x16>
 80069c6:	2201      	movs	r2, #1
 80069c8:	e000      	b.n	80069cc <prvGetNextExpireTime+0x18>
 80069ca:	2200      	movs	r2, #0
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d105      	bne.n	80069e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <prvGetNextExpireTime+0x44>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
 80069e2:	e001      	b.n	80069e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069e8:	68fb      	ldr	r3, [r7, #12]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	200016b4 	.word	0x200016b4

080069fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006a04:	f7ff f9ba 	bl	8005d7c <xTaskGetTickCount>
 8006a08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <prvSampleTimeNow+0x3c>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d205      	bcs.n	8006a20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006a14:	f000 f93c 	bl	8006c90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e002      	b.n	8006a26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a26:	4a04      	ldr	r2, [pc, #16]	; (8006a38 <prvSampleTimeNow+0x3c>)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	200016c4 	.word	0x200016c4

08006a3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a5a:	68ba      	ldr	r2, [r7, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d812      	bhi.n	8006a88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	1ad2      	subs	r2, r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	699b      	ldr	r3, [r3, #24]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d302      	bcc.n	8006a76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a70:	2301      	movs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	e01b      	b.n	8006aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a76:	4b10      	ldr	r3, [pc, #64]	; (8006ab8 <prvInsertTimerInActiveList+0x7c>)
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	3304      	adds	r3, #4
 8006a7e:	4619      	mov	r1, r3
 8006a80:	4610      	mov	r0, r2
 8006a82:	f7fe f8f6 	bl	8004c72 <vListInsert>
 8006a86:	e012      	b.n	8006aae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d206      	bcs.n	8006a9e <prvInsertTimerInActiveList+0x62>
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d302      	bcc.n	8006a9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	617b      	str	r3, [r7, #20]
 8006a9c:	e007      	b.n	8006aae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a9e:	4b07      	ldr	r3, [pc, #28]	; (8006abc <prvInsertTimerInActiveList+0x80>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f7fe f8e2 	bl	8004c72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006aae:	697b      	ldr	r3, [r7, #20]
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	200016b8 	.word	0x200016b8
 8006abc:	200016b4 	.word	0x200016b4

08006ac0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b08e      	sub	sp, #56	; 0x38
 8006ac4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ac6:	e0d0      	b.n	8006c6a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	da1a      	bge.n	8006b04 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ace:	1d3b      	adds	r3, r7, #4
 8006ad0:	3304      	adds	r3, #4
 8006ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10c      	bne.n	8006af4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	b672      	cpsid	i
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	b662      	cpsie	i
 8006aee:	61fb      	str	r3, [r7, #28]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afa:	6850      	ldr	r0, [r2, #4]
 8006afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afe:	6892      	ldr	r2, [r2, #8]
 8006b00:	4611      	mov	r1, r2
 8006b02:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f2c0 80ae 	blt.w	8006c68 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	695b      	ldr	r3, [r3, #20]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d004      	beq.n	8006b22 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fe f8e1 	bl	8004ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b22:	463b      	mov	r3, r7
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff ff69 	bl	80069fc <prvSampleTimeNow>
 8006b2a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b09      	cmp	r3, #9
 8006b30:	f200 809b 	bhi.w	8006c6a <prvProcessReceivedCommands+0x1aa>
 8006b34:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <prvProcessReceivedCommands+0x7c>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b65 	.word	0x08006b65
 8006b40:	08006b65 	.word	0x08006b65
 8006b44:	08006b65 	.word	0x08006b65
 8006b48:	08006bdd 	.word	0x08006bdd
 8006b4c:	08006bf1 	.word	0x08006bf1
 8006b50:	08006c3f 	.word	0x08006c3f
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b65 	.word	0x08006b65
 8006b5c:	08006bdd 	.word	0x08006bdd
 8006b60:	08006bf1 	.word	0x08006bf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b6a:	f043 0301 	orr.w	r3, r3, #1
 8006b6e:	b2da      	uxtb	r2, r3
 8006b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	18d1      	adds	r1, r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b84:	f7ff ff5a 	bl	8006a3c <prvInsertTimerInActiveList>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d06d      	beq.n	8006c6a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b9c:	f003 0304 	and.w	r3, r3, #4
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d062      	beq.n	8006c6a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	441a      	add	r2, r3
 8006bac:	2300      	movs	r3, #0
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bb6:	f7ff fdff 	bl	80067b8 <xTimerGenericCommand>
 8006bba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006bbc:	6a3b      	ldr	r3, [r7, #32]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d153      	bne.n	8006c6a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	b672      	cpsid	i
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	b662      	cpsie	i
 8006bd6:	61bb      	str	r3, [r7, #24]
}
 8006bd8:	bf00      	nop
 8006bda:	e7fe      	b.n	8006bda <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006bee:	e03c      	b.n	8006c6a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	b2da      	uxtb	r2, r3
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10c      	bne.n	8006c2a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	b672      	cpsid	i
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	b662      	cpsie	i
 8006c24:	617b      	str	r3, [r7, #20]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2c:	699a      	ldr	r2, [r3, #24]
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	18d1      	adds	r1, r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c38:	f7ff ff00 	bl	8006a3c <prvInsertTimerInActiveList>
					break;
 8006c3c:	e015      	b.n	8006c6a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c44:	f003 0302 	and.w	r3, r3, #2
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d103      	bne.n	8006c54 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8006c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4e:	f000 fbeb 	bl	8007428 <vPortFree>
 8006c52:	e00a      	b.n	8006c6a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c5a:	f023 0301 	bic.w	r3, r3, #1
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c66:	e000      	b.n	8006c6a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c6a:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <prvProcessReceivedCommands+0x1cc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	1d39      	adds	r1, r7, #4
 8006c70:	2200      	movs	r2, #0
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fb16 	bl	80052a4 <xQueueReceive>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f47f af24 	bne.w	8006ac8 <prvProcessReceivedCommands+0x8>
	}
}
 8006c80:	bf00      	nop
 8006c82:	bf00      	nop
 8006c84:	3730      	adds	r7, #48	; 0x30
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	200016bc 	.word	0x200016bc

08006c90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c96:	e04a      	b.n	8006d2e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c98:	4b2e      	ldr	r3, [pc, #184]	; (8006d54 <prvSwitchTimerLists+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca2:	4b2c      	ldr	r3, [pc, #176]	; (8006d54 <prvSwitchTimerLists+0xc4>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3304      	adds	r3, #4
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fe f817 	bl	8004ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d030      	beq.n	8006d2e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d90e      	bls.n	8006cfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cea:	4b1a      	ldr	r3, [pc, #104]	; (8006d54 <prvSwitchTimerLists+0xc4>)
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4610      	mov	r0, r2
 8006cf6:	f7fd ffbc 	bl	8004c72 <vListInsert>
 8006cfa:	e018      	b.n	8006d2e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2300      	movs	r3, #0
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	2100      	movs	r1, #0
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fd56 	bl	80067b8 <xTimerGenericCommand>
 8006d0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10c      	bne.n	8006d2e <prvSwitchTimerLists+0x9e>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	b672      	cpsid	i
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	b662      	cpsie	i
 8006d28:	603b      	str	r3, [r7, #0]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d2e:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <prvSwitchTimerLists+0xc4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d1af      	bne.n	8006c98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d38:	4b06      	ldr	r3, [pc, #24]	; (8006d54 <prvSwitchTimerLists+0xc4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d3e:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <prvSwitchTimerLists+0xc8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a04      	ldr	r2, [pc, #16]	; (8006d54 <prvSwitchTimerLists+0xc4>)
 8006d44:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d46:	4a04      	ldr	r2, [pc, #16]	; (8006d58 <prvSwitchTimerLists+0xc8>)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	3718      	adds	r7, #24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	200016b4 	.word	0x200016b4
 8006d58:	200016b8 	.word	0x200016b8

08006d5c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d62:	f000 f96b 	bl	800703c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d66:	4b15      	ldr	r3, [pc, #84]	; (8006dbc <prvCheckForValidListAndQueue+0x60>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d120      	bne.n	8006db0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d6e:	4814      	ldr	r0, [pc, #80]	; (8006dc0 <prvCheckForValidListAndQueue+0x64>)
 8006d70:	f7fd ff2e 	bl	8004bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d74:	4813      	ldr	r0, [pc, #76]	; (8006dc4 <prvCheckForValidListAndQueue+0x68>)
 8006d76:	f7fd ff2b 	bl	8004bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d7a:	4b13      	ldr	r3, [pc, #76]	; (8006dc8 <prvCheckForValidListAndQueue+0x6c>)
 8006d7c:	4a10      	ldr	r2, [pc, #64]	; (8006dc0 <prvCheckForValidListAndQueue+0x64>)
 8006d7e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d80:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <prvCheckForValidListAndQueue+0x70>)
 8006d82:	4a10      	ldr	r2, [pc, #64]	; (8006dc4 <prvCheckForValidListAndQueue+0x68>)
 8006d84:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d86:	2300      	movs	r3, #0
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <prvCheckForValidListAndQueue+0x74>)
 8006d8c:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <prvCheckForValidListAndQueue+0x78>)
 8006d8e:	2110      	movs	r1, #16
 8006d90:	200a      	movs	r0, #10
 8006d92:	f7fe f83b 	bl	8004e0c <xQueueGenericCreateStatic>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a08      	ldr	r2, [pc, #32]	; (8006dbc <prvCheckForValidListAndQueue+0x60>)
 8006d9a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d9c:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <prvCheckForValidListAndQueue+0x60>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006da4:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <prvCheckForValidListAndQueue+0x60>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	490b      	ldr	r1, [pc, #44]	; (8006dd8 <prvCheckForValidListAndQueue+0x7c>)
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fc70 	bl	8005690 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006db0:	f000 f978 	bl	80070a4 <vPortExitCritical>
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200016bc 	.word	0x200016bc
 8006dc0:	2000168c 	.word	0x2000168c
 8006dc4:	200016a0 	.word	0x200016a0
 8006dc8:	200016b4 	.word	0x200016b4
 8006dcc:	200016b8 	.word	0x200016b8
 8006dd0:	20001768 	.word	0x20001768
 8006dd4:	200016c8 	.word	0x200016c8
 8006dd8:	080078b4 	.word	0x080078b4

08006ddc <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b086      	sub	sp, #24
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10c      	bne.n	8006e08 <pvTimerGetTimerID+0x2c>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	b672      	cpsid	i
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	b662      	cpsie	i
 8006e02:	60fb      	str	r3, [r7, #12]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <pvTimerGetTimerID+0x2a>

	taskENTER_CRITICAL();
 8006e08:	f000 f918 	bl	800703c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006e12:	f000 f947 	bl	80070a4 <vPortExitCritical>

	return pvReturn;
 8006e16:	693b      	ldr	r3, [r7, #16]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e20:	b480      	push	{r7}
 8006e22:	b085      	sub	sp, #20
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	60f8      	str	r0, [r7, #12]
 8006e28:	60b9      	str	r1, [r7, #8]
 8006e2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	3b04      	subs	r3, #4
 8006e30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	3b04      	subs	r3, #4
 8006e3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	f023 0201 	bic.w	r2, r3, #1
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3b04      	subs	r3, #4
 8006e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e50:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <pxPortInitialiseStack+0x64>)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	3b14      	subs	r3, #20
 8006e5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3b04      	subs	r3, #4
 8006e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f06f 0202 	mvn.w	r2, #2
 8006e6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3b20      	subs	r3, #32
 8006e74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e76:	68fb      	ldr	r3, [r7, #12]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	08006e89 	.word	0x08006e89

08006e88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e92:	4b14      	ldr	r3, [pc, #80]	; (8006ee4 <prvTaskExitError+0x5c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9a:	d00c      	beq.n	8006eb6 <prvTaskExitError+0x2e>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	b672      	cpsid	i
 8006ea2:	f383 8811 	msr	BASEPRI, r3
 8006ea6:	f3bf 8f6f 	isb	sy
 8006eaa:	f3bf 8f4f 	dsb	sy
 8006eae:	b662      	cpsie	i
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <prvTaskExitError+0x2c>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	b672      	cpsid	i
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	b662      	cpsie	i
 8006eca:	60bb      	str	r3, [r7, #8]
}
 8006ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ece:	bf00      	nop
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0fc      	beq.n	8006ed0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ed6:	bf00      	nop
 8006ed8:	bf00      	nop
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	2000000c 	.word	0x2000000c
	...

08006ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pxCurrentTCBConst2>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	6808      	ldr	r0, [r1, #0]
 8006ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	f380 8809 	msr	PSP, r0
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8811 	msr	BASEPRI, r0
 8006f0a:	4770      	bx	lr
 8006f0c:	f3af 8000 	nop.w

08006f10 <pxCurrentTCBConst2>:
 8006f10:	2000118c 	.word	0x2000118c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f18:	4808      	ldr	r0, [pc, #32]	; (8006f3c <prvPortStartFirstTask+0x24>)
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f380 8808 	msr	MSP, r0
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8814 	msr	CONTROL, r0
 8006f2a:	b662      	cpsie	i
 8006f2c:	b661      	cpsie	f
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	df00      	svc	0
 8006f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f3a:	bf00      	nop
 8006f3c:	e000ed08 	.word	0xe000ed08

08006f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f46:	4b37      	ldr	r3, [pc, #220]	; (8007024 <xPortStartScheduler+0xe4>)
 8006f48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	22ff      	movs	r2, #255	; 0xff
 8006f56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f60:	78fb      	ldrb	r3, [r7, #3]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	4b2f      	ldr	r3, [pc, #188]	; (8007028 <xPortStartScheduler+0xe8>)
 8006f6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f6e:	4b2f      	ldr	r3, [pc, #188]	; (800702c <xPortStartScheduler+0xec>)
 8006f70:	2207      	movs	r2, #7
 8006f72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f74:	e009      	b.n	8006f8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <xPortStartScheduler+0xec>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	4a2b      	ldr	r2, [pc, #172]	; (800702c <xPortStartScheduler+0xec>)
 8006f7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f8a:	78fb      	ldrb	r3, [r7, #3]
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f92:	2b80      	cmp	r3, #128	; 0x80
 8006f94:	d0ef      	beq.n	8006f76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f96:	4b25      	ldr	r3, [pc, #148]	; (800702c <xPortStartScheduler+0xec>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1c3 0307 	rsb	r3, r3, #7
 8006f9e:	2b04      	cmp	r3, #4
 8006fa0:	d00c      	beq.n	8006fbc <xPortStartScheduler+0x7c>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa6:	b672      	cpsid	i
 8006fa8:	f383 8811 	msr	BASEPRI, r3
 8006fac:	f3bf 8f6f 	isb	sy
 8006fb0:	f3bf 8f4f 	dsb	sy
 8006fb4:	b662      	cpsie	i
 8006fb6:	60bb      	str	r3, [r7, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	e7fe      	b.n	8006fba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006fbc:	4b1b      	ldr	r3, [pc, #108]	; (800702c <xPortStartScheduler+0xec>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	4a1a      	ldr	r2, [pc, #104]	; (800702c <xPortStartScheduler+0xec>)
 8006fc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006fc6:	4b19      	ldr	r3, [pc, #100]	; (800702c <xPortStartScheduler+0xec>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <xPortStartScheduler+0xec>)
 8006fd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006fda:	4b15      	ldr	r3, [pc, #84]	; (8007030 <xPortStartScheduler+0xf0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a14      	ldr	r2, [pc, #80]	; (8007030 <xPortStartScheduler+0xf0>)
 8006fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fe4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <xPortStartScheduler+0xf0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a11      	ldr	r2, [pc, #68]	; (8007030 <xPortStartScheduler+0xf0>)
 8006fec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ff0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ff2:	f000 f8dd 	bl	80071b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ff6:	4b0f      	ldr	r3, [pc, #60]	; (8007034 <xPortStartScheduler+0xf4>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006ffc:	f000 f8fc 	bl	80071f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007000:	4b0d      	ldr	r3, [pc, #52]	; (8007038 <xPortStartScheduler+0xf8>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a0c      	ldr	r2, [pc, #48]	; (8007038 <xPortStartScheduler+0xf8>)
 8007006:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800700a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800700c:	f7ff ff84 	bl	8006f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007010:	f7fe ff80 	bl	8005f14 <vTaskSwitchContext>
	prvTaskExitError();
 8007014:	f7ff ff38 	bl	8006e88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	e000e400 	.word	0xe000e400
 8007028:	200017b8 	.word	0x200017b8
 800702c:	200017bc 	.word	0x200017bc
 8007030:	e000ed20 	.word	0xe000ed20
 8007034:	2000000c 	.word	0x2000000c
 8007038:	e000ef34 	.word	0xe000ef34

0800703c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
	__asm volatile
 8007042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007046:	b672      	cpsid	i
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	b662      	cpsie	i
 8007056:	607b      	str	r3, [r7, #4]
}
 8007058:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800705a:	4b10      	ldr	r3, [pc, #64]	; (800709c <vPortEnterCritical+0x60>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3301      	adds	r3, #1
 8007060:	4a0e      	ldr	r2, [pc, #56]	; (800709c <vPortEnterCritical+0x60>)
 8007062:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007064:	4b0d      	ldr	r3, [pc, #52]	; (800709c <vPortEnterCritical+0x60>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d111      	bne.n	8007090 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800706c:	4b0c      	ldr	r3, [pc, #48]	; (80070a0 <vPortEnterCritical+0x64>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <vPortEnterCritical+0x54>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	b672      	cpsid	i
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	b662      	cpsie	i
 800708a:	603b      	str	r3, [r7, #0]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <vPortEnterCritical+0x52>
	}
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	2000000c 	.word	0x2000000c
 80070a0:	e000ed04 	.word	0xe000ed04

080070a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070aa:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <vPortExitCritical+0x54>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10c      	bne.n	80070cc <vPortExitCritical+0x28>
	__asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b6:	b672      	cpsid	i
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	b662      	cpsie	i
 80070c6:	607b      	str	r3, [r7, #4]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <vPortExitCritical+0x54>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <vPortExitCritical+0x54>)
 80070d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80070d6:	4b08      	ldr	r3, [pc, #32]	; (80070f8 <vPortExitCritical+0x54>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d105      	bne.n	80070ea <vPortExitCritical+0x46>
 80070de:	2300      	movs	r3, #0
 80070e0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	f383 8811 	msr	BASEPRI, r3
}
 80070e8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop
 80070f8:	2000000c 	.word	0x2000000c
 80070fc:	00000000 	.word	0x00000000

08007100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007100:	f3ef 8009 	mrs	r0, PSP
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	4b15      	ldr	r3, [pc, #84]	; (8007160 <pxCurrentTCBConst>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	f01e 0f10 	tst.w	lr, #16
 8007110:	bf08      	it	eq
 8007112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711a:	6010      	str	r0, [r2, #0]
 800711c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007120:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007124:	b672      	cpsid	i
 8007126:	f380 8811 	msr	BASEPRI, r0
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	f3bf 8f6f 	isb	sy
 8007132:	b662      	cpsie	i
 8007134:	f7fe feee 	bl	8005f14 <vTaskSwitchContext>
 8007138:	f04f 0000 	mov.w	r0, #0
 800713c:	f380 8811 	msr	BASEPRI, r0
 8007140:	bc09      	pop	{r0, r3}
 8007142:	6819      	ldr	r1, [r3, #0]
 8007144:	6808      	ldr	r0, [r1, #0]
 8007146:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714a:	f01e 0f10 	tst.w	lr, #16
 800714e:	bf08      	it	eq
 8007150:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007154:	f380 8809 	msr	PSP, r0
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop

08007160 <pxCurrentTCBConst>:
 8007160:	2000118c 	.word	0x2000118c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007164:	bf00      	nop
 8007166:	bf00      	nop

08007168 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	b672      	cpsid	i
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	b662      	cpsie	i
 8007182:	607b      	str	r3, [r7, #4]
}
 8007184:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007186:	f7fe fe09 	bl	8005d9c <xTaskIncrementTick>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <xPortSysTickHandler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <xPortSysTickHandler+0x44>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	2300      	movs	r3, #0
 800719a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	f383 8811 	msr	BASEPRI, r3
}
 80071a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071a4:	bf00      	nop
 80071a6:	3708      	adds	r7, #8
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	e000ed04 	.word	0xe000ed04

080071b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071b4:	4b0b      	ldr	r3, [pc, #44]	; (80071e4 <vPortSetupTimerInterrupt+0x34>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <vPortSetupTimerInterrupt+0x38>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <vPortSetupTimerInterrupt+0x3c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <vPortSetupTimerInterrupt+0x40>)
 80071c6:	fba2 2303 	umull	r2, r3, r2, r3
 80071ca:	099b      	lsrs	r3, r3, #6
 80071cc:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <vPortSetupTimerInterrupt+0x44>)
 80071ce:	3b01      	subs	r3, #1
 80071d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071d2:	4b04      	ldr	r3, [pc, #16]	; (80071e4 <vPortSetupTimerInterrupt+0x34>)
 80071d4:	2207      	movs	r2, #7
 80071d6:	601a      	str	r2, [r3, #0]
}
 80071d8:	bf00      	nop
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	e000e010 	.word	0xe000e010
 80071e8:	e000e018 	.word	0xe000e018
 80071ec:	20000000 	.word	0x20000000
 80071f0:	10624dd3 	.word	0x10624dd3
 80071f4:	e000e014 	.word	0xe000e014

080071f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007208 <vPortEnableVFP+0x10>
 80071fc:	6801      	ldr	r1, [r0, #0]
 80071fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007202:	6001      	str	r1, [r0, #0]
 8007204:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007206:	bf00      	nop
 8007208:	e000ed88 	.word	0xe000ed88

0800720c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007212:	f3ef 8305 	mrs	r3, IPSR
 8007216:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b0f      	cmp	r3, #15
 800721c:	d916      	bls.n	800724c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800721e:	4a19      	ldr	r2, [pc, #100]	; (8007284 <vPortValidateInterruptPriority+0x78>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4413      	add	r3, r2
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007228:	4b17      	ldr	r3, [pc, #92]	; (8007288 <vPortValidateInterruptPriority+0x7c>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	7afa      	ldrb	r2, [r7, #11]
 800722e:	429a      	cmp	r2, r3
 8007230:	d20c      	bcs.n	800724c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	b672      	cpsid	i
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	b662      	cpsie	i
 8007246:	607b      	str	r3, [r7, #4]
}
 8007248:	bf00      	nop
 800724a:	e7fe      	b.n	800724a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800724c:	4b0f      	ldr	r3, [pc, #60]	; (800728c <vPortValidateInterruptPriority+0x80>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007254:	4b0e      	ldr	r3, [pc, #56]	; (8007290 <vPortValidateInterruptPriority+0x84>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	429a      	cmp	r2, r3
 800725a:	d90c      	bls.n	8007276 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	b672      	cpsid	i
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	b662      	cpsie	i
 8007270:	603b      	str	r3, [r7, #0]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <vPortValidateInterruptPriority+0x68>
	}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	e000e3f0 	.word	0xe000e3f0
 8007288:	200017b8 	.word	0x200017b8
 800728c:	e000ed0c 	.word	0xe000ed0c
 8007290:	200017bc 	.word	0x200017bc

08007294 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b08a      	sub	sp, #40	; 0x28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800729c:	2300      	movs	r3, #0
 800729e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072a0:	f7fe fcbe 	bl	8005c20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072a4:	4b5b      	ldr	r3, [pc, #364]	; (8007414 <pvPortMalloc+0x180>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d101      	bne.n	80072b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072ac:	f000 f91a 	bl	80074e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072b0:	4b59      	ldr	r3, [pc, #356]	; (8007418 <pvPortMalloc+0x184>)
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	4013      	ands	r3, r2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 8092 	bne.w	80073e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d01f      	beq.n	8007304 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80072c4:	2208      	movs	r2, #8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d016      	beq.n	8007304 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f023 0307 	bic.w	r3, r3, #7
 80072dc:	3308      	adds	r3, #8
 80072de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00c      	beq.n	8007304 <pvPortMalloc+0x70>
	__asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ee:	b672      	cpsid	i
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	b662      	cpsie	i
 80072fe:	617b      	str	r3, [r7, #20]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d06b      	beq.n	80073e2 <pvPortMalloc+0x14e>
 800730a:	4b44      	ldr	r3, [pc, #272]	; (800741c <pvPortMalloc+0x188>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	429a      	cmp	r2, r3
 8007312:	d866      	bhi.n	80073e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007314:	4b42      	ldr	r3, [pc, #264]	; (8007420 <pvPortMalloc+0x18c>)
 8007316:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007318:	4b41      	ldr	r3, [pc, #260]	; (8007420 <pvPortMalloc+0x18c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800731e:	e004      	b.n	800732a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800732a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d903      	bls.n	800733c <pvPortMalloc+0xa8>
 8007334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1f1      	bne.n	8007320 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800733c:	4b35      	ldr	r3, [pc, #212]	; (8007414 <pvPortMalloc+0x180>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007342:	429a      	cmp	r2, r3
 8007344:	d04d      	beq.n	80073e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2208      	movs	r2, #8
 800734c:	4413      	add	r3, r2
 800734e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	685a      	ldr	r2, [r3, #4]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	1ad2      	subs	r2, r2, r3
 8007360:	2308      	movs	r3, #8
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	429a      	cmp	r2, r3
 8007366:	d921      	bls.n	80073ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	f003 0307 	and.w	r3, r3, #7
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00c      	beq.n	8007394 <pvPortMalloc+0x100>
	__asm volatile
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	b672      	cpsid	i
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	b662      	cpsie	i
 800738e:	613b      	str	r3, [r7, #16]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007396:	685a      	ldr	r2, [r3, #4]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073a6:	69b8      	ldr	r0, [r7, #24]
 80073a8:	f000 f8fe 	bl	80075a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073ac:	4b1b      	ldr	r3, [pc, #108]	; (800741c <pvPortMalloc+0x188>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	4a19      	ldr	r2, [pc, #100]	; (800741c <pvPortMalloc+0x188>)
 80073b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073ba:	4b18      	ldr	r3, [pc, #96]	; (800741c <pvPortMalloc+0x188>)
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	4b19      	ldr	r3, [pc, #100]	; (8007424 <pvPortMalloc+0x190>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d203      	bcs.n	80073ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <pvPortMalloc+0x188>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a16      	ldr	r2, [pc, #88]	; (8007424 <pvPortMalloc+0x190>)
 80073cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	685a      	ldr	r2, [r3, #4]
 80073d2:	4b11      	ldr	r3, [pc, #68]	; (8007418 <pvPortMalloc+0x184>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	431a      	orrs	r2, r3
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073e2:	f7fe fc2b 	bl	8005c3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f003 0307 	and.w	r3, r3, #7
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00c      	beq.n	800740a <pvPortMalloc+0x176>
	__asm volatile
 80073f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f4:	b672      	cpsid	i
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	b662      	cpsie	i
 8007404:	60fb      	str	r3, [r7, #12]
}
 8007406:	bf00      	nop
 8007408:	e7fe      	b.n	8007408 <pvPortMalloc+0x174>
	return pvReturn;
 800740a:	69fb      	ldr	r3, [r7, #28]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3728      	adds	r7, #40	; 0x28
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	200053c8 	.word	0x200053c8
 8007418:	200053d4 	.word	0x200053d4
 800741c:	200053cc 	.word	0x200053cc
 8007420:	200053c0 	.word	0x200053c0
 8007424:	200053d0 	.word	0x200053d0

08007428 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d04c      	beq.n	80074d4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800743a:	2308      	movs	r3, #8
 800743c:	425b      	negs	r3, r3
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4413      	add	r3, r2
 8007442:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	4b23      	ldr	r3, [pc, #140]	; (80074dc <vPortFree+0xb4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10c      	bne.n	8007470 <vPortFree+0x48>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	60fb      	str	r3, [r7, #12]
}
 800746c:	bf00      	nop
 800746e:	e7fe      	b.n	800746e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00c      	beq.n	8007492 <vPortFree+0x6a>
	__asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747c:	b672      	cpsid	i
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	b662      	cpsie	i
 800748c:	60bb      	str	r3, [r7, #8]
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <vPortFree+0xb4>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4013      	ands	r3, r2
 800749c:	2b00      	cmp	r3, #0
 800749e:	d019      	beq.n	80074d4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d115      	bne.n	80074d4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	4b0b      	ldr	r3, [pc, #44]	; (80074dc <vPortFree+0xb4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	401a      	ands	r2, r3
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074b8:	f7fe fbb2 	bl	8005c20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	4b07      	ldr	r3, [pc, #28]	; (80074e0 <vPortFree+0xb8>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4413      	add	r3, r2
 80074c6:	4a06      	ldr	r2, [pc, #24]	; (80074e0 <vPortFree+0xb8>)
 80074c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074ca:	6938      	ldr	r0, [r7, #16]
 80074cc:	f000 f86c 	bl	80075a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80074d0:	f7fe fbb4 	bl	8005c3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074d4:	bf00      	nop
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	200053d4 	.word	0x200053d4
 80074e0:	200053cc 	.word	0x200053cc

080074e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80074ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074f0:	4b27      	ldr	r3, [pc, #156]	; (8007590 <prvHeapInit+0xac>)
 80074f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00c      	beq.n	8007518 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3307      	adds	r3, #7
 8007502:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	4a1f      	ldr	r2, [pc, #124]	; (8007590 <prvHeapInit+0xac>)
 8007514:	4413      	add	r3, r2
 8007516:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800751c:	4a1d      	ldr	r2, [pc, #116]	; (8007594 <prvHeapInit+0xb0>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007522:	4b1c      	ldr	r3, [pc, #112]	; (8007594 <prvHeapInit+0xb0>)
 8007524:	2200      	movs	r2, #0
 8007526:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68ba      	ldr	r2, [r7, #8]
 800752c:	4413      	add	r3, r2
 800752e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007530:	2208      	movs	r2, #8
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1a9b      	subs	r3, r3, r2
 8007536:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f023 0307 	bic.w	r3, r3, #7
 800753e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	4a15      	ldr	r2, [pc, #84]	; (8007598 <prvHeapInit+0xb4>)
 8007544:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <prvHeapInit+0xb4>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2200      	movs	r2, #0
 800754c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800754e:	4b12      	ldr	r3, [pc, #72]	; (8007598 <prvHeapInit+0xb4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	1ad2      	subs	r2, r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007564:	4b0c      	ldr	r3, [pc, #48]	; (8007598 <prvHeapInit+0xb4>)
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	4a0a      	ldr	r2, [pc, #40]	; (800759c <prvHeapInit+0xb8>)
 8007572:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	4a09      	ldr	r2, [pc, #36]	; (80075a0 <prvHeapInit+0xbc>)
 800757a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800757c:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <prvHeapInit+0xc0>)
 800757e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007582:	601a      	str	r2, [r3, #0]
}
 8007584:	bf00      	nop
 8007586:	3714      	adds	r7, #20
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr
 8007590:	200017c0 	.word	0x200017c0
 8007594:	200053c0 	.word	0x200053c0
 8007598:	200053c8 	.word	0x200053c8
 800759c:	200053d0 	.word	0x200053d0
 80075a0:	200053cc 	.word	0x200053cc
 80075a4:	200053d4 	.word	0x200053d4

080075a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075b0:	4b28      	ldr	r3, [pc, #160]	; (8007654 <prvInsertBlockIntoFreeList+0xac>)
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	e002      	b.n	80075bc <prvInsertBlockIntoFreeList+0x14>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	60fb      	str	r3, [r7, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d8f7      	bhi.n	80075b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	68ba      	ldr	r2, [r7, #8]
 80075d0:	4413      	add	r3, r2
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d108      	bne.n	80075ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	441a      	add	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d118      	bne.n	8007630 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	4b15      	ldr	r3, [pc, #84]	; (8007658 <prvInsertBlockIntoFreeList+0xb0>)
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	429a      	cmp	r2, r3
 8007608:	d00d      	beq.n	8007626 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685a      	ldr	r2, [r3, #4]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	441a      	add	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	e008      	b.n	8007638 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007626:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvInsertBlockIntoFreeList+0xb0>)
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	601a      	str	r2, [r3, #0]
 800762e:	e003      	b.n	8007638 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d002      	beq.n	8007646 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	200053c0 	.word	0x200053c0
 8007658:	200053c8 	.word	0x200053c8

0800765c <__libc_init_array>:
 800765c:	b570      	push	{r4, r5, r6, lr}
 800765e:	4d0d      	ldr	r5, [pc, #52]	; (8007694 <__libc_init_array+0x38>)
 8007660:	4c0d      	ldr	r4, [pc, #52]	; (8007698 <__libc_init_array+0x3c>)
 8007662:	1b64      	subs	r4, r4, r5
 8007664:	10a4      	asrs	r4, r4, #2
 8007666:	2600      	movs	r6, #0
 8007668:	42a6      	cmp	r6, r4
 800766a:	d109      	bne.n	8007680 <__libc_init_array+0x24>
 800766c:	4d0b      	ldr	r5, [pc, #44]	; (800769c <__libc_init_array+0x40>)
 800766e:	4c0c      	ldr	r4, [pc, #48]	; (80076a0 <__libc_init_array+0x44>)
 8007670:	f000 f8f2 	bl	8007858 <_init>
 8007674:	1b64      	subs	r4, r4, r5
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	2600      	movs	r6, #0
 800767a:	42a6      	cmp	r6, r4
 800767c:	d105      	bne.n	800768a <__libc_init_array+0x2e>
 800767e:	bd70      	pop	{r4, r5, r6, pc}
 8007680:	f855 3b04 	ldr.w	r3, [r5], #4
 8007684:	4798      	blx	r3
 8007686:	3601      	adds	r6, #1
 8007688:	e7ee      	b.n	8007668 <__libc_init_array+0xc>
 800768a:	f855 3b04 	ldr.w	r3, [r5], #4
 800768e:	4798      	blx	r3
 8007690:	3601      	adds	r6, #1
 8007692:	e7f2      	b.n	800767a <__libc_init_array+0x1e>
 8007694:	08007988 	.word	0x08007988
 8007698:	08007988 	.word	0x08007988
 800769c:	08007988 	.word	0x08007988
 80076a0:	0800798c 	.word	0x0800798c

080076a4 <__retarget_lock_acquire_recursive>:
 80076a4:	4770      	bx	lr

080076a6 <__retarget_lock_release_recursive>:
 80076a6:	4770      	bx	lr

080076a8 <memcpy>:
 80076a8:	440a      	add	r2, r1
 80076aa:	4291      	cmp	r1, r2
 80076ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b0:	d100      	bne.n	80076b4 <memcpy+0xc>
 80076b2:	4770      	bx	lr
 80076b4:	b510      	push	{r4, lr}
 80076b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076be:	4291      	cmp	r1, r2
 80076c0:	d1f9      	bne.n	80076b6 <memcpy+0xe>
 80076c2:	bd10      	pop	{r4, pc}

080076c4 <memset>:
 80076c4:	4402      	add	r2, r0
 80076c6:	4603      	mov	r3, r0
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d100      	bne.n	80076ce <memset+0xa>
 80076cc:	4770      	bx	lr
 80076ce:	f803 1b01 	strb.w	r1, [r3], #1
 80076d2:	e7f9      	b.n	80076c8 <memset+0x4>

080076d4 <cleanup_glue>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	460c      	mov	r4, r1
 80076d8:	6809      	ldr	r1, [r1, #0]
 80076da:	4605      	mov	r5, r0
 80076dc:	b109      	cbz	r1, 80076e2 <cleanup_glue+0xe>
 80076de:	f7ff fff9 	bl	80076d4 <cleanup_glue>
 80076e2:	4621      	mov	r1, r4
 80076e4:	4628      	mov	r0, r5
 80076e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ea:	f000 b869 	b.w	80077c0 <_free_r>
	...

080076f0 <_reclaim_reent>:
 80076f0:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <_reclaim_reent+0xb4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4283      	cmp	r3, r0
 80076f6:	b570      	push	{r4, r5, r6, lr}
 80076f8:	4604      	mov	r4, r0
 80076fa:	d051      	beq.n	80077a0 <_reclaim_reent+0xb0>
 80076fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80076fe:	b143      	cbz	r3, 8007712 <_reclaim_reent+0x22>
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d14a      	bne.n	800779c <_reclaim_reent+0xac>
 8007706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007708:	6819      	ldr	r1, [r3, #0]
 800770a:	b111      	cbz	r1, 8007712 <_reclaim_reent+0x22>
 800770c:	4620      	mov	r0, r4
 800770e:	f000 f857 	bl	80077c0 <_free_r>
 8007712:	6961      	ldr	r1, [r4, #20]
 8007714:	b111      	cbz	r1, 800771c <_reclaim_reent+0x2c>
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f852 	bl	80077c0 <_free_r>
 800771c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800771e:	b111      	cbz	r1, 8007726 <_reclaim_reent+0x36>
 8007720:	4620      	mov	r0, r4
 8007722:	f000 f84d 	bl	80077c0 <_free_r>
 8007726:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007728:	b111      	cbz	r1, 8007730 <_reclaim_reent+0x40>
 800772a:	4620      	mov	r0, r4
 800772c:	f000 f848 	bl	80077c0 <_free_r>
 8007730:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007732:	b111      	cbz	r1, 800773a <_reclaim_reent+0x4a>
 8007734:	4620      	mov	r0, r4
 8007736:	f000 f843 	bl	80077c0 <_free_r>
 800773a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800773c:	b111      	cbz	r1, 8007744 <_reclaim_reent+0x54>
 800773e:	4620      	mov	r0, r4
 8007740:	f000 f83e 	bl	80077c0 <_free_r>
 8007744:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007746:	b111      	cbz	r1, 800774e <_reclaim_reent+0x5e>
 8007748:	4620      	mov	r0, r4
 800774a:	f000 f839 	bl	80077c0 <_free_r>
 800774e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007750:	b111      	cbz	r1, 8007758 <_reclaim_reent+0x68>
 8007752:	4620      	mov	r0, r4
 8007754:	f000 f834 	bl	80077c0 <_free_r>
 8007758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775a:	b111      	cbz	r1, 8007762 <_reclaim_reent+0x72>
 800775c:	4620      	mov	r0, r4
 800775e:	f000 f82f 	bl	80077c0 <_free_r>
 8007762:	69a3      	ldr	r3, [r4, #24]
 8007764:	b1e3      	cbz	r3, 80077a0 <_reclaim_reent+0xb0>
 8007766:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007768:	4620      	mov	r0, r4
 800776a:	4798      	blx	r3
 800776c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800776e:	b1b9      	cbz	r1, 80077a0 <_reclaim_reent+0xb0>
 8007770:	4620      	mov	r0, r4
 8007772:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007776:	f7ff bfad 	b.w	80076d4 <cleanup_glue>
 800777a:	5949      	ldr	r1, [r1, r5]
 800777c:	b941      	cbnz	r1, 8007790 <_reclaim_reent+0xa0>
 800777e:	3504      	adds	r5, #4
 8007780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007782:	2d80      	cmp	r5, #128	; 0x80
 8007784:	68d9      	ldr	r1, [r3, #12]
 8007786:	d1f8      	bne.n	800777a <_reclaim_reent+0x8a>
 8007788:	4620      	mov	r0, r4
 800778a:	f000 f819 	bl	80077c0 <_free_r>
 800778e:	e7ba      	b.n	8007706 <_reclaim_reent+0x16>
 8007790:	680e      	ldr	r6, [r1, #0]
 8007792:	4620      	mov	r0, r4
 8007794:	f000 f814 	bl	80077c0 <_free_r>
 8007798:	4631      	mov	r1, r6
 800779a:	e7ef      	b.n	800777c <_reclaim_reent+0x8c>
 800779c:	2500      	movs	r5, #0
 800779e:	e7ef      	b.n	8007780 <_reclaim_reent+0x90>
 80077a0:	bd70      	pop	{r4, r5, r6, pc}
 80077a2:	bf00      	nop
 80077a4:	20000010 	.word	0x20000010

080077a8 <__malloc_lock>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__malloc_lock+0x8>)
 80077aa:	f7ff bf7b 	b.w	80076a4 <__retarget_lock_acquire_recursive>
 80077ae:	bf00      	nop
 80077b0:	200053d8 	.word	0x200053d8

080077b4 <__malloc_unlock>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__malloc_unlock+0x8>)
 80077b6:	f7ff bf76 	b.w	80076a6 <__retarget_lock_release_recursive>
 80077ba:	bf00      	nop
 80077bc:	200053d8 	.word	0x200053d8

080077c0 <_free_r>:
 80077c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077c2:	2900      	cmp	r1, #0
 80077c4:	d044      	beq.n	8007850 <_free_r+0x90>
 80077c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ca:	9001      	str	r0, [sp, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f1a1 0404 	sub.w	r4, r1, #4
 80077d2:	bfb8      	it	lt
 80077d4:	18e4      	addlt	r4, r4, r3
 80077d6:	f7ff ffe7 	bl	80077a8 <__malloc_lock>
 80077da:	4a1e      	ldr	r2, [pc, #120]	; (8007854 <_free_r+0x94>)
 80077dc:	9801      	ldr	r0, [sp, #4]
 80077de:	6813      	ldr	r3, [r2, #0]
 80077e0:	b933      	cbnz	r3, 80077f0 <_free_r+0x30>
 80077e2:	6063      	str	r3, [r4, #4]
 80077e4:	6014      	str	r4, [r2, #0]
 80077e6:	b003      	add	sp, #12
 80077e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077ec:	f7ff bfe2 	b.w	80077b4 <__malloc_unlock>
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	d908      	bls.n	8007806 <_free_r+0x46>
 80077f4:	6825      	ldr	r5, [r4, #0]
 80077f6:	1961      	adds	r1, r4, r5
 80077f8:	428b      	cmp	r3, r1
 80077fa:	bf01      	itttt	eq
 80077fc:	6819      	ldreq	r1, [r3, #0]
 80077fe:	685b      	ldreq	r3, [r3, #4]
 8007800:	1949      	addeq	r1, r1, r5
 8007802:	6021      	streq	r1, [r4, #0]
 8007804:	e7ed      	b.n	80077e2 <_free_r+0x22>
 8007806:	461a      	mov	r2, r3
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	b10b      	cbz	r3, 8007810 <_free_r+0x50>
 800780c:	42a3      	cmp	r3, r4
 800780e:	d9fa      	bls.n	8007806 <_free_r+0x46>
 8007810:	6811      	ldr	r1, [r2, #0]
 8007812:	1855      	adds	r5, r2, r1
 8007814:	42a5      	cmp	r5, r4
 8007816:	d10b      	bne.n	8007830 <_free_r+0x70>
 8007818:	6824      	ldr	r4, [r4, #0]
 800781a:	4421      	add	r1, r4
 800781c:	1854      	adds	r4, r2, r1
 800781e:	42a3      	cmp	r3, r4
 8007820:	6011      	str	r1, [r2, #0]
 8007822:	d1e0      	bne.n	80077e6 <_free_r+0x26>
 8007824:	681c      	ldr	r4, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	6053      	str	r3, [r2, #4]
 800782a:	4421      	add	r1, r4
 800782c:	6011      	str	r1, [r2, #0]
 800782e:	e7da      	b.n	80077e6 <_free_r+0x26>
 8007830:	d902      	bls.n	8007838 <_free_r+0x78>
 8007832:	230c      	movs	r3, #12
 8007834:	6003      	str	r3, [r0, #0]
 8007836:	e7d6      	b.n	80077e6 <_free_r+0x26>
 8007838:	6825      	ldr	r5, [r4, #0]
 800783a:	1961      	adds	r1, r4, r5
 800783c:	428b      	cmp	r3, r1
 800783e:	bf04      	itt	eq
 8007840:	6819      	ldreq	r1, [r3, #0]
 8007842:	685b      	ldreq	r3, [r3, #4]
 8007844:	6063      	str	r3, [r4, #4]
 8007846:	bf04      	itt	eq
 8007848:	1949      	addeq	r1, r1, r5
 800784a:	6021      	streq	r1, [r4, #0]
 800784c:	6054      	str	r4, [r2, #4]
 800784e:	e7ca      	b.n	80077e6 <_free_r+0x26>
 8007850:	b003      	add	sp, #12
 8007852:	bd30      	pop	{r4, r5, pc}
 8007854:	200053dc 	.word	0x200053dc

08007858 <_init>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr

08007864 <_fini>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr
