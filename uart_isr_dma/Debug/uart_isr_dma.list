
uart_isr_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a4  080093a4  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093ac  080093ac  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093b0  080093b0  000193b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080093b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000074  08009428  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000114  080094c8  00020114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005ce8  200001b4  08009568  000201b4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20005e9c  08009568  00025e9c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002a0c3  00000000  00000000  000201e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000049fe  00000000  00000000  0004a2a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f68  00000000  00000000  0004eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001d80  00000000  00000000  00050c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007a5b  00000000  00000000  00052990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00022e0d  00000000  00000000  0005a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00114abb  00000000  00000000  0007d1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00191cb3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000088ec  00000000  00000000  00191d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001b4 	.word	0x200001b4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009238 	.word	0x08009238

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001b8 	.word	0x200001b8
 800023c:	08009238 	.word	0x08009238

08000240 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000240:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000242:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000246:	f8df 0088 	ldr.w	r0, [pc, #136]	; 80002d0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800024a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800024e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000252:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000254:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000256:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000258:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800025a:	d332      	bcc.n	80002c2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800025c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800025e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000260:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000262:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000264:	d314      	bcc.n	8000290 <_CheckCase2>

08000266 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000266:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000268:	19d0      	adds	r0, r2, r7
 800026a:	bf00      	nop

0800026c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800026c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000270:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000274:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000276:	d005      	beq.n	8000284 <_CSDone>
        LDRB     R3,[R1], #+1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000280:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000282:	d1f3      	bne.n	800026c <_LoopCopyStraight>

08000284 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000284:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000288:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800028a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800028e:	4770      	bx	lr

08000290 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000290:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000292:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000294:	d319      	bcc.n	80002ca <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000296:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000298:	1b12      	subs	r2, r2, r4

0800029a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800029a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800029e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80002a2:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80002a4:	d1f9      	bne.n	800029a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80002a6:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80002a8:	d005      	beq.n	80002b6 <_No2ChunkNeeded>

080002aa <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80002aa:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80002ae:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80002b2:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80002b4:	d1f9      	bne.n	80002aa <_LoopCopyAfterWrapAround>

080002b6 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 80002b6:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80002ba:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80002bc:	2001      	movs	r0, #1
        POP      {R4-R7}
 80002be:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002c0:	4770      	bx	lr

080002c2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002c2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002c4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002c6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002c8:	d2cd      	bcs.n	8000266 <_Case4>

080002ca <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002ca:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002cc:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ce:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002d0:	200001d0 	.word	0x200001d0

080002d4 <__aeabi_uldivmod>:
 80002d4:	b953      	cbnz	r3, 80002ec <__aeabi_uldivmod+0x18>
 80002d6:	b94a      	cbnz	r2, 80002ec <__aeabi_uldivmod+0x18>
 80002d8:	2900      	cmp	r1, #0
 80002da:	bf08      	it	eq
 80002dc:	2800      	cmpeq	r0, #0
 80002de:	bf1c      	itt	ne
 80002e0:	f04f 31ff 	movne.w	r1, #4294967295
 80002e4:	f04f 30ff 	movne.w	r0, #4294967295
 80002e8:	f000 b974 	b.w	80005d4 <__aeabi_idiv0>
 80002ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f4:	f000 f806 	bl	8000304 <__udivmoddi4>
 80002f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000300:	b004      	add	sp, #16
 8000302:	4770      	bx	lr

08000304 <__udivmoddi4>:
 8000304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000308:	9d08      	ldr	r5, [sp, #32]
 800030a:	4604      	mov	r4, r0
 800030c:	468e      	mov	lr, r1
 800030e:	2b00      	cmp	r3, #0
 8000310:	d14d      	bne.n	80003ae <__udivmoddi4+0xaa>
 8000312:	428a      	cmp	r2, r1
 8000314:	4694      	mov	ip, r2
 8000316:	d969      	bls.n	80003ec <__udivmoddi4+0xe8>
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	b152      	cbz	r2, 8000334 <__udivmoddi4+0x30>
 800031e:	fa01 f302 	lsl.w	r3, r1, r2
 8000322:	f1c2 0120 	rsb	r1, r2, #32
 8000326:	fa20 f101 	lsr.w	r1, r0, r1
 800032a:	fa0c fc02 	lsl.w	ip, ip, r2
 800032e:	ea41 0e03 	orr.w	lr, r1, r3
 8000332:	4094      	lsls	r4, r2
 8000334:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000338:	0c21      	lsrs	r1, r4, #16
 800033a:	fbbe f6f8 	udiv	r6, lr, r8
 800033e:	fa1f f78c 	uxth.w	r7, ip
 8000342:	fb08 e316 	mls	r3, r8, r6, lr
 8000346:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034a:	fb06 f107 	mul.w	r1, r6, r7
 800034e:	4299      	cmp	r1, r3
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x64>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 811f 	bcs.w	800059c <__udivmoddi4+0x298>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 811c 	bls.w	800059c <__udivmoddi4+0x298>
 8000364:	3e02      	subs	r6, #2
 8000366:	4463      	add	r3, ip
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 f707 	mul.w	r7, r0, r7
 800037c:	42a7      	cmp	r7, r4
 800037e:	d90a      	bls.n	8000396 <__udivmoddi4+0x92>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 33ff 	add.w	r3, r0, #4294967295
 8000388:	f080 810a 	bcs.w	80005a0 <__udivmoddi4+0x29c>
 800038c:	42a7      	cmp	r7, r4
 800038e:	f240 8107 	bls.w	80005a0 <__udivmoddi4+0x29c>
 8000392:	4464      	add	r4, ip
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039a:	1be4      	subs	r4, r4, r7
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa4>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xc2>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	f000 80ef 	beq.w	8000596 <__udivmoddi4+0x292>
 80003b8:	2600      	movs	r6, #0
 80003ba:	e9c5 0100 	strd	r0, r1, [r5]
 80003be:	4630      	mov	r0, r6
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f683 	clz	r6, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d14a      	bne.n	8000464 <__udivmoddi4+0x160>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd4>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80f9 	bhi.w	80005ca <__udivmoddi4+0x2c6>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	469e      	mov	lr, r3
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa4>
 80003e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa4>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xec>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 8092 	bne.w	800051e <__udivmoddi4+0x21a>
 80003fa:	eba1 010c 	sub.w	r1, r1, ip
 80003fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000402:	fa1f fe8c 	uxth.w	lr, ip
 8000406:	2601      	movs	r6, #1
 8000408:	0c20      	lsrs	r0, r4, #16
 800040a:	fbb1 f3f7 	udiv	r3, r1, r7
 800040e:	fb07 1113 	mls	r1, r7, r3, r1
 8000412:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000416:	fb0e f003 	mul.w	r0, lr, r3
 800041a:	4288      	cmp	r0, r1
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x12c>
 800041e:	eb1c 0101 	adds.w	r1, ip, r1
 8000422:	f103 38ff 	add.w	r8, r3, #4294967295
 8000426:	d202      	bcs.n	800042e <__udivmoddi4+0x12a>
 8000428:	4288      	cmp	r0, r1
 800042a:	f200 80cb 	bhi.w	80005c4 <__udivmoddi4+0x2c0>
 800042e:	4643      	mov	r3, r8
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1110 	mls	r1, r7, r0, r1
 800043c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000440:	fb0e fe00 	mul.w	lr, lr, r0
 8000444:	45a6      	cmp	lr, r4
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x156>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000450:	d202      	bcs.n	8000458 <__udivmoddi4+0x154>
 8000452:	45a6      	cmp	lr, r4
 8000454:	f200 80bb 	bhi.w	80005ce <__udivmoddi4+0x2ca>
 8000458:	4608      	mov	r0, r1
 800045a:	eba4 040e 	sub.w	r4, r4, lr
 800045e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000462:	e79c      	b.n	800039e <__udivmoddi4+0x9a>
 8000464:	f1c6 0720 	rsb	r7, r6, #32
 8000468:	40b3      	lsls	r3, r6
 800046a:	fa22 fc07 	lsr.w	ip, r2, r7
 800046e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000472:	fa20 f407 	lsr.w	r4, r0, r7
 8000476:	fa01 f306 	lsl.w	r3, r1, r6
 800047a:	431c      	orrs	r4, r3
 800047c:	40f9      	lsrs	r1, r7
 800047e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000482:	fa00 f306 	lsl.w	r3, r0, r6
 8000486:	fbb1 f8f9 	udiv	r8, r1, r9
 800048a:	0c20      	lsrs	r0, r4, #16
 800048c:	fa1f fe8c 	uxth.w	lr, ip
 8000490:	fb09 1118 	mls	r1, r9, r8, r1
 8000494:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000498:	fb08 f00e 	mul.w	r0, r8, lr
 800049c:	4288      	cmp	r0, r1
 800049e:	fa02 f206 	lsl.w	r2, r2, r6
 80004a2:	d90b      	bls.n	80004bc <__udivmoddi4+0x1b8>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004ac:	f080 8088 	bcs.w	80005c0 <__udivmoddi4+0x2bc>
 80004b0:	4288      	cmp	r0, r1
 80004b2:	f240 8085 	bls.w	80005c0 <__udivmoddi4+0x2bc>
 80004b6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	1a09      	subs	r1, r1, r0
 80004be:	b2a4      	uxth	r4, r4
 80004c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c4:	fb09 1110 	mls	r1, r9, r0, r1
 80004c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d0:	458e      	cmp	lr, r1
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1e2>
 80004d4:	eb1c 0101 	adds.w	r1, ip, r1
 80004d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80004dc:	d26c      	bcs.n	80005b8 <__udivmoddi4+0x2b4>
 80004de:	458e      	cmp	lr, r1
 80004e0:	d96a      	bls.n	80005b8 <__udivmoddi4+0x2b4>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4461      	add	r1, ip
 80004e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ea:	fba0 9402 	umull	r9, r4, r0, r2
 80004ee:	eba1 010e 	sub.w	r1, r1, lr
 80004f2:	42a1      	cmp	r1, r4
 80004f4:	46c8      	mov	r8, r9
 80004f6:	46a6      	mov	lr, r4
 80004f8:	d356      	bcc.n	80005a8 <__udivmoddi4+0x2a4>
 80004fa:	d053      	beq.n	80005a4 <__udivmoddi4+0x2a0>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x212>
 80004fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000502:	eb61 010e 	sbc.w	r1, r1, lr
 8000506:	fa01 f707 	lsl.w	r7, r1, r7
 800050a:	fa22 f306 	lsr.w	r3, r2, r6
 800050e:	40f1      	lsrs	r1, r6
 8000510:	431f      	orrs	r7, r3
 8000512:	e9c5 7100 	strd	r7, r1, [r5]
 8000516:	2600      	movs	r6, #0
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	f1c2 0320 	rsb	r3, r2, #32
 8000522:	40d8      	lsrs	r0, r3
 8000524:	fa0c fc02 	lsl.w	ip, ip, r2
 8000528:	fa21 f303 	lsr.w	r3, r1, r3
 800052c:	4091      	lsls	r1, r2
 800052e:	4301      	orrs	r1, r0
 8000530:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000534:	fa1f fe8c 	uxth.w	lr, ip
 8000538:	fbb3 f0f7 	udiv	r0, r3, r7
 800053c:	fb07 3610 	mls	r6, r7, r0, r3
 8000540:	0c0b      	lsrs	r3, r1, #16
 8000542:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000546:	fb00 f60e 	mul.w	r6, r0, lr
 800054a:	429e      	cmp	r6, r3
 800054c:	fa04 f402 	lsl.w	r4, r4, r2
 8000550:	d908      	bls.n	8000564 <__udivmoddi4+0x260>
 8000552:	eb1c 0303 	adds.w	r3, ip, r3
 8000556:	f100 38ff 	add.w	r8, r0, #4294967295
 800055a:	d22f      	bcs.n	80005bc <__udivmoddi4+0x2b8>
 800055c:	429e      	cmp	r6, r3
 800055e:	d92d      	bls.n	80005bc <__udivmoddi4+0x2b8>
 8000560:	3802      	subs	r0, #2
 8000562:	4463      	add	r3, ip
 8000564:	1b9b      	subs	r3, r3, r6
 8000566:	b289      	uxth	r1, r1
 8000568:	fbb3 f6f7 	udiv	r6, r3, r7
 800056c:	fb07 3316 	mls	r3, r7, r6, r3
 8000570:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000574:	fb06 f30e 	mul.w	r3, r6, lr
 8000578:	428b      	cmp	r3, r1
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x28a>
 800057c:	eb1c 0101 	adds.w	r1, ip, r1
 8000580:	f106 38ff 	add.w	r8, r6, #4294967295
 8000584:	d216      	bcs.n	80005b4 <__udivmoddi4+0x2b0>
 8000586:	428b      	cmp	r3, r1
 8000588:	d914      	bls.n	80005b4 <__udivmoddi4+0x2b0>
 800058a:	3e02      	subs	r6, #2
 800058c:	4461      	add	r1, ip
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000594:	e738      	b.n	8000408 <__udivmoddi4+0x104>
 8000596:	462e      	mov	r6, r5
 8000598:	4628      	mov	r0, r5
 800059a:	e705      	b.n	80003a8 <__udivmoddi4+0xa4>
 800059c:	4606      	mov	r6, r0
 800059e:	e6e3      	b.n	8000368 <__udivmoddi4+0x64>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6f8      	b.n	8000396 <__udivmoddi4+0x92>
 80005a4:	454b      	cmp	r3, r9
 80005a6:	d2a9      	bcs.n	80004fc <__udivmoddi4+0x1f8>
 80005a8:	ebb9 0802 	subs.w	r8, r9, r2
 80005ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b0:	3801      	subs	r0, #1
 80005b2:	e7a3      	b.n	80004fc <__udivmoddi4+0x1f8>
 80005b4:	4646      	mov	r6, r8
 80005b6:	e7ea      	b.n	800058e <__udivmoddi4+0x28a>
 80005b8:	4620      	mov	r0, r4
 80005ba:	e794      	b.n	80004e6 <__udivmoddi4+0x1e2>
 80005bc:	4640      	mov	r0, r8
 80005be:	e7d1      	b.n	8000564 <__udivmoddi4+0x260>
 80005c0:	46d0      	mov	r8, sl
 80005c2:	e77b      	b.n	80004bc <__udivmoddi4+0x1b8>
 80005c4:	3b02      	subs	r3, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	e732      	b.n	8000430 <__udivmoddi4+0x12c>
 80005ca:	4630      	mov	r0, r6
 80005cc:	e709      	b.n	80003e2 <__udivmoddi4+0xde>
 80005ce:	4464      	add	r4, ip
 80005d0:	3802      	subs	r0, #2
 80005d2:	e742      	b.n	800045a <__udivmoddi4+0x156>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <_DoInit+0xa0>)
 80005e0:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80005e2:	22a8      	movs	r2, #168	; 0xa8
 80005e4:	2100      	movs	r1, #0
 80005e6:	6838      	ldr	r0, [r7, #0]
 80005e8:	f008 fd5c 	bl	80090a4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2203      	movs	r2, #3
 80005f0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	2203      	movs	r2, #3
 80005f6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <_DoInit+0xa4>)
 80005fc:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <_DoInit+0xa8>)
 8000602:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800060a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	2200      	movs	r2, #0
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	4a16      	ldr	r2, [pc, #88]	; (800067c <_DoInit+0xa4>)
 8000622:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	4a17      	ldr	r2, [pc, #92]	; (8000684 <_DoInit+0xac>)
 8000628:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	2210      	movs	r2, #16
 800062e:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	2200      	movs	r2, #0
 8000640:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8000642:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000646:	2300      	movs	r3, #0
 8000648:	607b      	str	r3, [r7, #4]
 800064a:	e00c      	b.n	8000666 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f1c3 030f 	rsb	r3, r3, #15
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <_DoInit+0xb0>)
 8000654:	5cd1      	ldrb	r1, [r2, r3]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4413      	add	r3, r2
 800065c:	460a      	mov	r2, r1
 800065e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3301      	adds	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b0f      	cmp	r3, #15
 800066a:	d9ef      	bls.n	800064c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800066c:	f3bf 8f5f 	dmb	sy
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001d0 	.word	0x200001d0
 800067c:	08009250 	.word	0x08009250
 8000680:	20000278 	.word	0x20000278
 8000684:	20000678 	.word	0x20000678
 8000688:	080092d8 	.word	0x080092d8

0800068c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b08c      	sub	sp, #48	; 0x30
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000698:	4b3e      	ldr	r3, [pc, #248]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 800069a:	623b      	str	r3, [r7, #32]
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d101      	bne.n	80006aa <SEGGER_RTT_ReadNoLock+0x1e>
 80006a6:	f7ff ff97 	bl	80005d8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80006aa:	68fa      	ldr	r2, [r7, #12]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	3360      	adds	r3, #96	; 0x60
 80006b6:	4a37      	ldr	r2, [pc, #220]	; (8000794 <SEGGER_RTT_ReadNoLock+0x108>)
 80006b8:	4413      	add	r3, r2
 80006ba:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80006cc:	2300      	movs	r3, #0
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80006d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d92b      	bls.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80006d8:	69fb      	ldr	r3, [r7, #28]
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006de:	1ad3      	subs	r3, r2, r3
 80006e0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80006e2:	697a      	ldr	r2, [r7, #20]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	4293      	cmp	r3, r2
 80006e8:	bf28      	it	cs
 80006ea:	4613      	movcs	r3, r2
 80006ec:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006f4:	4413      	add	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	6939      	ldr	r1, [r7, #16]
 80006fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006fe:	f008 fcc3 	bl	8009088 <memcpy>
    NumBytesRead += NumBytesRem;
 8000702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	4413      	add	r3, r2
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800070a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	4413      	add	r3, r2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	689b      	ldr	r3, [r3, #8]
 8000726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000728:	429a      	cmp	r2, r3
 800072a:	d101      	bne.n	8000730 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000730:	69ba      	ldr	r2, [r7, #24]
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4293      	cmp	r3, r2
 800073e:	bf28      	it	cs
 8000740:	4613      	movcs	r3, r2
 8000742:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d019      	beq.n	800077e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000750:	4413      	add	r3, r2
 8000752:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	6939      	ldr	r1, [r7, #16]
 8000758:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800075a:	f008 fc95 	bl	8009088 <memcpy>
    NumBytesRead += NumBytesRem;
 800075e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	4413      	add	r3, r2
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8000766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	4413      	add	r3, r2
 800076c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	1ad3      	subs	r3, r2, r3
 8000774:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000776:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	4413      	add	r3, r2
 800077c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800077e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000780:	2b00      	cmp	r3, #0
 8000782:	d002      	beq.n	800078a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000788:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800078a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800078c:	4618      	mov	r0, r3
 800078e:	3730      	adds	r7, #48	; 0x30
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200001d0 	.word	0x200001d0

08000798 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	607a      	str	r2, [r7, #4]
 80007a4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80007a6:	4b3d      	ldr	r3, [pc, #244]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007a8:	61bb      	str	r3, [r7, #24]
 80007aa:	69bb      	ldr	r3, [r7, #24]
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80007b4:	f7ff ff10 	bl	80005d8 <_DoInit>
  SEGGER_RTT_LOCK();
 80007b8:	f3ef 8311 	mrs	r3, BASEPRI
 80007bc:	f04f 0120 	mov.w	r1, #32
 80007c0:	f381 8811 	msr	BASEPRI, r1
 80007c4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80007c6:	4b35      	ldr	r3, [pc, #212]	; (800089c <SEGGER_RTT_AllocUpBuffer+0x104>)
 80007c8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80007ce:	6939      	ldr	r1, [r7, #16]
 80007d0:	69fb      	ldr	r3, [r7, #28]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3304      	adds	r3, #4
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d008      	beq.n	80007f8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	3301      	adds	r3, #1
 80007ea:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80007ec:	693b      	ldr	r3, [r7, #16]
 80007ee:	691b      	ldr	r3, [r3, #16]
 80007f0:	69fa      	ldr	r2, [r7, #28]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	dbeb      	blt.n	80007ce <SEGGER_RTT_AllocUpBuffer+0x36>
 80007f6:	e000      	b.n	80007fa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80007f8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	691b      	ldr	r3, [r3, #16]
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	429a      	cmp	r2, r3
 8000802:	da3f      	bge.n	8000884 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000804:	6939      	ldr	r1, [r7, #16]
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	1c5a      	adds	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	00db      	lsls	r3, r3, #3
 8000812:	440b      	add	r3, r1
 8000814:	68fa      	ldr	r2, [r7, #12]
 8000816:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000818:	6939      	ldr	r1, [r7, #16]
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	1c5a      	adds	r2, r3, #1
 800081e:	4613      	mov	r3, r2
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	4413      	add	r3, r2
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	440b      	add	r3, r1
 8000828:	3304      	adds	r3, #4
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	69fa      	ldr	r2, [r7, #28]
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	440b      	add	r3, r1
 800083c:	3320      	adds	r3, #32
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000842:	6939      	ldr	r1, [r7, #16]
 8000844:	69fa      	ldr	r2, [r7, #28]
 8000846:	4613      	mov	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	4413      	add	r3, r2
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	440b      	add	r3, r1
 8000850:	3328      	adds	r3, #40	; 0x28
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000856:	6939      	ldr	r1, [r7, #16]
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4613      	mov	r3, r2
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	4413      	add	r3, r2
 8000860:	00db      	lsls	r3, r3, #3
 8000862:	440b      	add	r3, r1
 8000864:	3324      	adds	r3, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800086a:	6939      	ldr	r1, [r7, #16]
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	332c      	adds	r3, #44	; 0x2c
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800087e:	f3bf 8f5f 	dmb	sy
 8000882:	e002      	b.n	800088a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8000884:	f04f 33ff 	mov.w	r3, #4294967295
 8000888:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000890:	69fb      	ldr	r3, [r7, #28]
}
 8000892:	4618      	mov	r0, r3
 8000894:	3720      	adds	r7, #32
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200001d0 	.word	0x200001d0

080008a0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	60f8      	str	r0, [r7, #12]
 80008a8:	60b9      	str	r1, [r7, #8]
 80008aa:	607a      	str	r2, [r7, #4]
 80008ac:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008b0:	623b      	str	r3, [r7, #32]
 80008b2:	6a3b      	ldr	r3, [r7, #32]
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80008bc:	f7ff fe8c 	bl	80005d8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80008c0:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80008c2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2b02      	cmp	r3, #2
 80008c8:	d82c      	bhi.n	8000924 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80008ca:	f3ef 8311 	mrs	r3, BASEPRI
 80008ce:	f04f 0120 	mov.w	r1, #32
 80008d2:	f381 8811 	msr	BASEPRI, r1
 80008d6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80008d8:	68fa      	ldr	r2, [r7, #12]
 80008da:	4613      	mov	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	4413      	add	r3, r2
 80008e0:	00db      	lsls	r3, r3, #3
 80008e2:	3360      	adds	r3, #96	; 0x60
 80008e4:	69fa      	ldr	r2, [r7, #28]
 80008e6:	4413      	add	r3, r2
 80008e8:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00e      	beq.n	800090e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	683a      	ldr	r2, [r7, #0]
 8000900:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	2200      	movs	r2, #0
 800090c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000912:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8000914:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e002      	b.n	800092a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 800092a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800092c:	4618      	mov	r0, r3
 800092e:	3728      	adds	r7, #40	; 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200001d0 	.word	0x200001d0

08000938 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000938:	b480      	push	{r7}
 800093a:	b087      	sub	sp, #28
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	60fa      	str	r2, [r7, #12]
 800094e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b80      	cmp	r3, #128	; 0x80
 8000954:	d90a      	bls.n	800096c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800095a:	e007      	b.n	800096c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800095c:	68ba      	ldr	r2, [r7, #8]
 800095e:	1c53      	adds	r3, r2, #1
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	1c59      	adds	r1, r3, #1
 8000966:	60f9      	str	r1, [r7, #12]
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	1e5a      	subs	r2, r3, #1
 8000970:	607a      	str	r2, [r7, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_EncodeStr+0x46>
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1ee      	bne.n	800095c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	b2da      	uxtb	r2, r3
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800098a:	68fb      	ldr	r3, [r7, #12]
}
 800098c:	4618      	mov	r0, r3
 800098e:	371c      	adds	r7, #28
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3307      	adds	r3, #7
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80009b6:	4b35      	ldr	r3, [pc, #212]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 80009b8:	7e1b      	ldrb	r3, [r3, #24]
 80009ba:	4618      	mov	r0, r3
 80009bc:	1cfb      	adds	r3, r7, #3
 80009be:	2201      	movs	r2, #1
 80009c0:	4619      	mov	r1, r3
 80009c2:	f7ff fe63 	bl	800068c <SEGGER_RTT_ReadNoLock>
 80009c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d052      	beq.n	8000a74 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80009ce:	78fb      	ldrb	r3, [r7, #3]
 80009d0:	2b80      	cmp	r3, #128	; 0x80
 80009d2:	d031      	beq.n	8000a38 <_HandleIncomingPacket+0x88>
 80009d4:	2b80      	cmp	r3, #128	; 0x80
 80009d6:	dc40      	bgt.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009d8:	2b07      	cmp	r3, #7
 80009da:	dc15      	bgt.n	8000a08 <_HandleIncomingPacket+0x58>
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dd3c      	ble.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e0:	3b01      	subs	r3, #1
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d839      	bhi.n	8000a5a <_HandleIncomingPacket+0xaa>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <_HandleIncomingPacket+0x3c>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a0f 	.word	0x08000a0f
 80009f0:	08000a15 	.word	0x08000a15
 80009f4:	08000a1b 	.word	0x08000a1b
 80009f8:	08000a21 	.word	0x08000a21
 80009fc:	08000a27 	.word	0x08000a27
 8000a00:	08000a2d 	.word	0x08000a2d
 8000a04:	08000a33 	.word	0x08000a33
 8000a08:	2b7f      	cmp	r3, #127	; 0x7f
 8000a0a:	d035      	beq.n	8000a78 <_HandleIncomingPacket+0xc8>
 8000a0c:	e025      	b.n	8000a5a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000a0e:	f000 fbe5 	bl	80011dc <SEGGER_SYSVIEW_Start>
      break;
 8000a12:	e036      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8000a14:	f000 fc9c 	bl	8001350 <SEGGER_SYSVIEW_Stop>
      break;
 8000a18:	e033      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8000a1a:	f000 fe75 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8000a1e:	e030      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8000a20:	f000 fe3a 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8000a24:	e02d      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8000a26:	f000 fcb9 	bl	800139c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8000a2a:	e02a      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8000a2c:	f000 ff46 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8000a30:	e027      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8000a32:	f000 ff25 	bl	8001880 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8000a36:	e024      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a3a:	7e1b      	ldrb	r3, [r3, #24]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	1cfb      	adds	r3, r7, #3
 8000a40:	2201      	movs	r2, #1
 8000a42:	4619      	mov	r1, r3
 8000a44:	f7ff fe22 	bl	800068c <SEGGER_RTT_ReadNoLock>
 8000a48:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d015      	beq.n	8000a7c <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8000a50:	78fb      	ldrb	r3, [r7, #3]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 fe8a 	bl	800176c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8000a58:	e010      	b.n	8000a7c <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	b25b      	sxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	da0e      	bge.n	8000a80 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <_HandleIncomingPacket+0xdc>)
 8000a64:	7e1b      	ldrb	r3, [r3, #24]
 8000a66:	4618      	mov	r0, r3
 8000a68:	1cfb      	adds	r3, r7, #3
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	f7ff fe0d 	bl	800068c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8000a72:	e005      	b.n	8000a80 <_HandleIncomingPacket+0xd0>
    }
  }
 8000a74:	bf00      	nop
 8000a76:	e004      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <_HandleIncomingPacket+0xd2>
      break;
 8000a80:	bf00      	nop
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000a90 	.word	0x20000a90

08000a90 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8000a96:	2301      	movs	r3, #1
 8000a98:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8000aa0:	69fb      	ldr	r3, [r7, #28]
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aa4:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000aa6:	695b      	ldr	r3, [r3, #20]
 8000aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aaa:	e00b      	b.n	8000ac4 <_TrySendOverflowPacket+0x34>
 8000aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	1c59      	adds	r1, r3, #1
 8000ab4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8000ab6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	09db      	lsrs	r3, r3, #7
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ac8:	d8f0      	bhi.n	8000aac <_TrySendOverflowPacket+0x1c>
 8000aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ad2:	b2d2      	uxtb	r2, r2
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000ada:	4b25      	ldr	r3, [pc, #148]	; (8000b70 <_TrySendOverflowPacket+0xe0>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000ae0:	4b22      	ldr	r3, [pc, #136]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	69ba      	ldr	r2, [r7, #24]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	623b      	str	r3, [r7, #32]
 8000af2:	e00b      	b.n	8000b0c <_TrySendOverflowPacket+0x7c>
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	1c59      	adds	r1, r3, #1
 8000afc:	6279      	str	r1, [r7, #36]	; 0x24
 8000afe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000b02:	b2d2      	uxtb	r2, r2
 8000b04:	701a      	strb	r2, [r3, #0]
 8000b06:	6a3b      	ldr	r3, [r7, #32]
 8000b08:	09db      	lsrs	r3, r3, #7
 8000b0a:	623b      	str	r3, [r7, #32]
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b10:	d8f0      	bhi.n	8000af4 <_TrySendOverflowPacket+0x64>
 8000b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	627a      	str	r2, [r7, #36]	; 0x24
 8000b18:	6a3a      	ldr	r2, [r7, #32]
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	701a      	strb	r2, [r3, #0]
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b24:	785b      	ldrb	r3, [r3, #1]
 8000b26:	4618      	mov	r0, r3
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	461a      	mov	r2, r3
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	f7ff fb84 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d009      	beq.n	8000b56 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	3b01      	subs	r3, #1
 8000b4e:	b2da      	uxtb	r2, r3
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e004      	b.n	8000b60 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b58:	695b      	ldr	r3, [r3, #20]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a03      	ldr	r2, [pc, #12]	; (8000b6c <_TrySendOverflowPacket+0xdc>)
 8000b5e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8000b60:	693b      	ldr	r3, [r7, #16]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3730      	adds	r7, #48	; 0x30
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000a90 	.word	0x20000a90
 8000b70:	e0001004 	.word	0xe0001004

08000b74 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8000b80:	4b98      	ldr	r3, [pc, #608]	; (8000de4 <_SendPacket+0x270>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d010      	beq.n	8000baa <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8000b88:	4b96      	ldr	r3, [pc, #600]	; (8000de4 <_SendPacket+0x270>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 812d 	beq.w	8000dec <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8000b92:	4b94      	ldr	r3, [pc, #592]	; (8000de4 <_SendPacket+0x270>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	d109      	bne.n	8000bae <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8000b9a:	f7ff ff79 	bl	8000a90 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8000b9e:	4b91      	ldr	r3, [pc, #580]	; (8000de4 <_SendPacket+0x270>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	f040 8124 	bne.w	8000df0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8000ba8:	e001      	b.n	8000bae <_SendPacket+0x3a>
    goto Send;
 8000baa:	bf00      	nop
 8000bac:	e000      	b.n	8000bb0 <_SendPacket+0x3c>
Send:
 8000bae:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b1f      	cmp	r3, #31
 8000bb4:	d809      	bhi.n	8000bca <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8000bb6:	4b8b      	ldr	r3, [pc, #556]	; (8000de4 <_SendPacket+0x270>)
 8000bb8:	69da      	ldr	r2, [r3, #28]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	f040 8115 	bne.w	8000df4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2b17      	cmp	r3, #23
 8000bce:	d807      	bhi.n	8000be0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e0c4      	b.n	8000d6a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8000be0:	68ba      	ldr	r2, [r7, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	2b7f      	cmp	r3, #127	; 0x7f
 8000bec:	d912      	bls.n	8000c14 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	09da      	lsrs	r2, r3, #7
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	60fa      	str	r2, [r7, #12]
 8000c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e006      	b.n	8000c22 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	b2da      	uxtb	r2, r3
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b7e      	cmp	r3, #126	; 0x7e
 8000c26:	d807      	bhi.n	8000c38 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e098      	b.n	8000d6a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c3e:	d212      	bcs.n	8000c66 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	09da      	lsrs	r2, r3, #7
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	3a01      	subs	r2, #1
 8000c58:	60fa      	str	r2, [r7, #12]
 8000c5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c5e:	b2da      	uxtb	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	701a      	strb	r2, [r3, #0]
 8000c64:	e081      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000c6c:	d21d      	bcs.n	8000caa <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	0b9a      	lsrs	r2, r3, #14
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	09db      	lsrs	r3, r3, #7
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	60fa      	str	r2, [r7, #12]
 8000c8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	68fa      	ldr	r2, [r7, #12]
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	60fa      	str	r2, [r7, #12]
 8000c9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e05f      	b.n	8000d6a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000cb0:	d228      	bcs.n	8000d04 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	0d5a      	lsrs	r2, r3, #21
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	0b9b      	lsrs	r3, r3, #14
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	68fa      	ldr	r2, [r7, #12]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	60fa      	str	r2, [r7, #12]
 8000cce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cd2:	b2da      	uxtb	r2, r3
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	09db      	lsrs	r3, r3, #7
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ce8:	b2da      	uxtb	r2, r3
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	3a01      	subs	r2, #1
 8000cf6:	60fa      	str	r2, [r7, #12]
 8000cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	701a      	strb	r2, [r3, #0]
 8000d02:	e032      	b.n	8000d6a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	0f1a      	lsrs	r2, r3, #28
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	0d5b      	lsrs	r3, r3, #21
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	68fa      	ldr	r2, [r7, #12]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	60fa      	str	r2, [r7, #12]
 8000d20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0b9b      	lsrs	r3, r3, #14
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	3a01      	subs	r2, #1
 8000d34:	60fa      	str	r2, [r7, #12]
 8000d36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d3a:	b2da      	uxtb	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	09db      	lsrs	r3, r3, #7
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	60fa      	str	r2, [r7, #12]
 8000d4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d50:	b2da      	uxtb	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	3a01      	subs	r2, #1
 8000d5e:	60fa      	str	r2, [r7, #12]
 8000d60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <_SendPacket+0x274>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <_SendPacket+0x270>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	e00b      	b.n	8000d9c <_SendPacket+0x228>
 8000d84:	6a3b      	ldr	r3, [r7, #32]
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8a:	1c59      	adds	r1, r3, #1
 8000d8c:	6279      	str	r1, [r7, #36]	; 0x24
 8000d8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	6a3b      	ldr	r3, [r7, #32]
 8000d98:	09db      	lsrs	r3, r3, #7
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000da0:	d8f0      	bhi.n	8000d84 <_SendPacket+0x210>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	627a      	str	r2, [r7, #36]	; 0x24
 8000da8:	6a3a      	ldr	r2, [r7, #32]
 8000daa:	b2d2      	uxtb	r2, r2
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db0:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <_SendPacket+0x270>)
 8000db4:	785b      	ldrb	r3, [r3, #1]
 8000db6:	4618      	mov	r0, r3
 8000db8:	68ba      	ldr	r2, [r7, #8]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	68f9      	ldr	r1, [r7, #12]
 8000dc2:	f7ff fa3d 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8000dc6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8000dce:	4a05      	ldr	r2, [pc, #20]	; (8000de4 <_SendPacket+0x270>)
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	60d3      	str	r3, [r2, #12]
 8000dd4:	e00f      	b.n	8000df6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <_SendPacket+0x270>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	3301      	adds	r3, #1
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <_SendPacket+0x270>)
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	e008      	b.n	8000df6 <_SendPacket+0x282>
 8000de4:	20000a90 	.word	0x20000a90
 8000de8:	e0001004 	.word	0xe0001004
    goto SendDone;
 8000dec:	bf00      	nop
 8000dee:	e002      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df0:	bf00      	nop
 8000df2:	e000      	b.n	8000df6 <_SendPacket+0x282>
      goto SendDone;
 8000df4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <_SendPacket+0x2d4>)
 8000df8:	7e1b      	ldrb	r3, [r3, #24]
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <_SendPacket+0x2d8>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	00db      	lsls	r3, r3, #3
 8000e06:	4413      	add	r3, r2
 8000e08:	336c      	adds	r3, #108	; 0x6c
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <_SendPacket+0x2d4>)
 8000e0e:	7e1b      	ldrb	r3, [r3, #24]
 8000e10:	4618      	mov	r0, r3
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <_SendPacket+0x2d8>)
 8000e14:	4603      	mov	r3, r0
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	4403      	add	r3, r0
 8000e1a:	00db      	lsls	r3, r3, #3
 8000e1c:	440b      	add	r3, r1
 8000e1e:	3370      	adds	r3, #112	; 0x70
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	d00b      	beq.n	8000e3e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <_SendPacket+0x2d4>)
 8000e28:	789b      	ldrb	r3, [r3, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <_SendPacket+0x2d4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8000e34:	f7ff fdbc 	bl	80009b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <_SendPacket+0x2d4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000a90 	.word	0x20000a90
 8000e4c:	200001d0 	.word	0x200001d0

08000e50 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b0a2      	sub	sp, #136	; 0x88
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
  NumArguments = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  for (;;) {
    c = *p++;
 8000e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (c == 0) {
 8000e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d01d      	beq.n	8000eb6 <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 8000e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000e7e:	2b25      	cmp	r3, #37	; 0x25
 8000e80:	d1f1      	bne.n	8000e66 <_VPrintHost+0x16>
      c = *p;
 8000e82:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1d19      	adds	r1, r3, #4
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	6011      	str	r1, [r2, #0]
 8000e94:	6819      	ldr	r1, [r3, #0]
 8000e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	3388      	adds	r3, #136	; 0x88
 8000ea6:	443b      	add	r3, r7
 8000ea8:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 8000eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000eb0:	2b10      	cmp	r3, #16
 8000eb2:	d002      	beq.n	8000eba <_VPrintHost+0x6a>
    c = *p++;
 8000eb4:	e7d7      	b.n	8000e66 <_VPrintHost+0x16>
      break;
 8000eb6:	bf00      	nop
 8000eb8:	e000      	b.n	8000ebc <_VPrintHost+0x6c>
        break;
 8000eba:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 8000ebc:	f3ef 8311 	mrs	r3, BASEPRI
 8000ec0:	f04f 0120 	mov.w	r1, #32
 8000ec4:	f381 8811 	msr	BASEPRI, r1
 8000ec8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eca:	483f      	ldr	r0, [pc, #252]	; (8000fc8 <_VPrintHost+0x178>)
 8000ecc:	f7ff fd64 	bl	8000998 <_PreparePacket>
 8000ed0:	6578      	str	r0, [r7, #84]	; 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8000ed2:	2280      	movs	r2, #128	; 0x80
 8000ed4:	68f9      	ldr	r1, [r7, #12]
 8000ed6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000ed8:	f7ff fd2e 	bl	8000938 <_EncodeStr>
 8000edc:	67b8      	str	r0, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, Options);
 8000ede:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ee0:	677b      	str	r3, [r7, #116]	; 0x74
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8000ee6:	e00b      	b.n	8000f00 <_VPrintHost+0xb0>
 8000ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	6779      	str	r1, [r7, #116]	; 0x74
 8000ef2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000ef6:	b2d2      	uxtb	r2, r2
 8000ef8:	701a      	strb	r2, [r3, #0]
 8000efa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000efc:	09db      	lsrs	r3, r3, #7
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
 8000f00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f02:	2b7f      	cmp	r3, #127	; 0x7f
 8000f04:	d8f0      	bhi.n	8000ee8 <_VPrintHost+0x98>
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	677a      	str	r2, [r7, #116]	; 0x74
 8000f0c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	701a      	strb	r2, [r3, #0]
 8000f12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f14:	67bb      	str	r3, [r7, #120]	; 0x78
    ENCODE_U32(pPayload, NumArguments);
 8000f16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000f1a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f20:	e00b      	b.n	8000f3a <_VPrintHost+0xea>
 8000f22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f28:	1c59      	adds	r1, r3, #1
 8000f2a:	66f9      	str	r1, [r7, #108]	; 0x6c
 8000f2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	09db      	lsrs	r3, r3, #7
 8000f38:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f3e:	d8f0      	bhi.n	8000f22 <_VPrintHost+0xd2>
 8000f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	66fa      	str	r2, [r7, #108]	; 0x6c
 8000f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	701a      	strb	r2, [r3, #0]
 8000f4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4e:	67bb      	str	r3, [r7, #120]	; 0x78
    pParas = aParas;
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000f58:	e022      	b.n	8000fa0 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 8000f5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f5c:	667b      	str	r3, [r7, #100]	; 0x64
 8000f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	663b      	str	r3, [r7, #96]	; 0x60
 8000f66:	e00b      	b.n	8000f80 <_VPrintHost+0x130>
 8000f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f6e:	1c59      	adds	r1, r3, #1
 8000f70:	6679      	str	r1, [r7, #100]	; 0x64
 8000f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f7c:	09db      	lsrs	r3, r3, #7
 8000f7e:	663b      	str	r3, [r7, #96]	; 0x60
 8000f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000f82:	2b7f      	cmp	r3, #127	; 0x7f
 8000f84:	d8f0      	bhi.n	8000f68 <_VPrintHost+0x118>
 8000f86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f88:	1c5a      	adds	r2, r3, #1
 8000f8a:	667a      	str	r2, [r7, #100]	; 0x64
 8000f8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f94:	67bb      	str	r3, [r7, #120]	; 0x78
      pParas++;
 8000f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f9a:	3304      	adds	r3, #4
 8000f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    while (NumArguments--) {
 8000fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1d5      	bne.n	8000f5a <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8000fae:	221a      	movs	r2, #26
 8000fb0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000fb2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000fb4:	f7ff fdde 	bl	8000b74 <_SendPacket>
    RECORD_END();
 8000fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000fba:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3788      	adds	r7, #136	; 0x88
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000ac0 	.word	0x20000ac0

08000fcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af02      	add	r7, sp, #8
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
 8000fd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fe0:	4917      	ldr	r1, [pc, #92]	; (8001040 <SEGGER_SYSVIEW_Init+0x74>)
 8000fe2:	4818      	ldr	r0, [pc, #96]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8000fe4:	f7ff fbd8 	bl	8000798 <SEGGER_RTT_AllocUpBuffer>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000fee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ff6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8000ff8:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2300      	movs	r3, #0
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2308      	movs	r3, #8
 8001004:	4a11      	ldr	r2, [pc, #68]	; (800104c <SEGGER_SYSVIEW_Init+0x80>)
 8001006:	490f      	ldr	r1, [pc, #60]	; (8001044 <SEGGER_SYSVIEW_Init+0x78>)
 8001008:	f7ff fc4a 	bl	80008a0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800100e:	2200      	movs	r2, #0
 8001010:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <SEGGER_SYSVIEW_Init+0x84>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a0c      	ldr	r2, [pc, #48]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001018:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001032:	4b05      	ldr	r3, [pc, #20]	; (8001048 <SEGGER_SYSVIEW_Init+0x7c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000688 	.word	0x20000688
 8001044:	08009264 	.word	0x08009264
 8001048:	20000a90 	.word	0x20000a90
 800104c:	20000a88 	.word	0x20000a88
 8001050:	e0001004 	.word	0xe0001004

08001054 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800105c:	4a04      	ldr	r2, [pc, #16]	; (8001070 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6113      	str	r3, [r2, #16]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000a90 	.word	0x20000a90

08001074 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800107c:	f3ef 8311 	mrs	r3, BASEPRI
 8001080:	f04f 0120 	mov.w	r1, #32
 8001084:	f381 8811 	msr	BASEPRI, r1
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4808      	ldr	r0, [pc, #32]	; (80010ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800108c:	f7ff fc84 	bl	8000998 <_PreparePacket>
 8001090:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	68b9      	ldr	r1, [r7, #8]
 8001096:	68b8      	ldr	r0, [r7, #8]
 8001098:	f7ff fd6c 	bl	8000b74 <_SendPacket>
  RECORD_END();
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f383 8811 	msr	BASEPRI, r3
}
 80010a2:	bf00      	nop
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000ac0 	.word	0x20000ac0

080010b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80010ba:	f3ef 8311 	mrs	r3, BASEPRI
 80010be:	f04f 0120 	mov.w	r1, #32
 80010c2:	f381 8811 	msr	BASEPRI, r1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80010ca:	f7ff fc65 	bl	8000998 <_PreparePacket>
 80010ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	61fb      	str	r3, [r7, #28]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	e00b      	b.n	80010f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	61f9      	str	r1, [r7, #28]
 80010e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	09db      	lsrs	r3, r3, #7
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d8f0      	bhi.n	80010de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	61fa      	str	r2, [r7, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	68f9      	ldr	r1, [r7, #12]
 8001110:	6938      	ldr	r0, [r7, #16]
 8001112:	f7ff fd2f 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f383 8811 	msr	BASEPRI, r3
}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000ac0 	.word	0x20000ac0

08001128 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001134:	f3ef 8311 	mrs	r3, BASEPRI
 8001138:	f04f 0120 	mov.w	r1, #32
 800113c:	f381 8811 	msr	BASEPRI, r1
 8001140:	61fb      	str	r3, [r7, #28]
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001144:	f7ff fc28 	bl	8000998 <_PreparePacket>
 8001148:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
 8001156:	e00b      	b.n	8001170 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115a:	b2da      	uxtb	r2, r3
 800115c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115e:	1c59      	adds	r1, r3, #1
 8001160:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001162:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	701a      	strb	r2, [r3, #0]
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	09db      	lsrs	r3, r3, #7
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001172:	2b7f      	cmp	r3, #127	; 0x7f
 8001174:	d8f0      	bhi.n	8001158 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800117c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001184:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	623b      	str	r3, [r7, #32]
 800118e:	e00b      	b.n	80011a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	1c59      	adds	r1, r3, #1
 8001198:	6279      	str	r1, [r7, #36]	; 0x24
 800119a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	09db      	lsrs	r3, r3, #7
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b7f      	cmp	r3, #127	; 0x7f
 80011ac:	d8f0      	bhi.n	8001190 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	627a      	str	r2, [r7, #36]	; 0x24
 80011b4:	6a3a      	ldr	r2, [r7, #32]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	6979      	ldr	r1, [r7, #20]
 80011c2:	69b8      	ldr	r0, [r7, #24]
 80011c4:	f7ff fcd6 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f383 8811 	msr	BASEPRI, r3
}
 80011ce:	bf00      	nop
 80011d0:	3730      	adds	r7, #48	; 0x30
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000ac0 	.word	0x20000ac0

080011dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	; 0x30
 80011e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80011e2:	4b58      	ldr	r3, [pc, #352]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80011e8:	f3ef 8311 	mrs	r3, BASEPRI
 80011ec:	f04f 0120 	mov.w	r1, #32
 80011f0:	f381 8811 	msr	BASEPRI, r1
 80011f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80011f6:	4b53      	ldr	r3, [pc, #332]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	220a      	movs	r2, #10
 80011fc:	4952      	ldr	r1, [pc, #328]	; (8001348 <SEGGER_SYSVIEW_Start+0x16c>)
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f81e 	bl	8000240 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff ff32 	bl	8001074 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001210:	f3ef 8311 	mrs	r3, BASEPRI
 8001214:	f04f 0120 	mov.w	r1, #32
 8001218:	f381 8811 	msr	BASEPRI, r1
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	484b      	ldr	r0, [pc, #300]	; (800134c <SEGGER_SYSVIEW_Start+0x170>)
 8001220:	f7ff fbba 	bl	8000998 <_PreparePacket>
 8001224:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122e:	4b45      	ldr	r3, [pc, #276]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
 8001234:	e00b      	b.n	800124e <SEGGER_SYSVIEW_Start+0x72>
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	b2da      	uxtb	r2, r3
 800123a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123c:	1c59      	adds	r1, r3, #1
 800123e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8001240:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	701a      	strb	r2, [r3, #0]
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
 800124e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001250:	2b7f      	cmp	r3, #127	; 0x7f
 8001252:	d8f0      	bhi.n	8001236 <SEGGER_SYSVIEW_Start+0x5a>
 8001254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001262:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	627b      	str	r3, [r7, #36]	; 0x24
 8001268:	4b36      	ldr	r3, [pc, #216]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	623b      	str	r3, [r7, #32]
 800126e:	e00b      	b.n	8001288 <SEGGER_SYSVIEW_Start+0xac>
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001276:	1c59      	adds	r1, r3, #1
 8001278:	6279      	str	r1, [r7, #36]	; 0x24
 800127a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	09db      	lsrs	r3, r3, #7
 8001286:	623b      	str	r3, [r7, #32]
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	2b7f      	cmp	r3, #127	; 0x7f
 800128c:	d8f0      	bhi.n	8001270 <SEGGER_SYSVIEW_Start+0x94>
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	627a      	str	r2, [r7, #36]	; 0x24
 8001294:	6a3a      	ldr	r2, [r7, #32]
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 80012a4:	691b      	ldr	r3, [r3, #16]
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e00b      	b.n	80012c2 <SEGGER_SYSVIEW_Start+0xe6>
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	1c59      	adds	r1, r3, #1
 80012b2:	61f9      	str	r1, [r7, #28]
 80012b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	701a      	strb	r2, [r3, #0]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	09db      	lsrs	r3, r3, #7
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b7f      	cmp	r3, #127	; 0x7f
 80012c6:	d8f0      	bhi.n	80012aa <SEGGER_SYSVIEW_Start+0xce>
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	61fa      	str	r2, [r7, #28]
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	701a      	strb	r2, [r3, #0]
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	e00b      	b.n	80012fa <SEGGER_SYSVIEW_Start+0x11e>
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	1c59      	adds	r1, r3, #1
 80012ea:	6179      	str	r1, [r7, #20]
 80012ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	2b7f      	cmp	r3, #127	; 0x7f
 80012fe:	d8f0      	bhi.n	80012e2 <SEGGER_SYSVIEW_Start+0x106>
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	617a      	str	r2, [r7, #20]
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	b2d2      	uxtb	r2, r2
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8001310:	2218      	movs	r2, #24
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fc2d 	bl	8000b74 <_SendPacket>
      RECORD_END();
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SEGGER_SYSVIEW_Start+0x168>)
 800132a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800132e:	f000 f9eb 	bl	8001708 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8001332:	f000 f9b1 	bl	8001698 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8001336:	f000 fac1 	bl	80018bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800133a:	bf00      	nop
 800133c:	3730      	adds	r7, #48	; 0x30
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000a90 	.word	0x20000a90
 8001348:	080092ec 	.word	0x080092ec
 800134c:	20000ac0 	.word	0x20000ac0

08001350 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0120 	mov.w	r1, #32
 800135e:	f381 8811 	msr	BASEPRI, r1
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SEGGER_SYSVIEW_Stop+0x44>)
 8001366:	f7ff fb17 	bl	8000998 <_PreparePacket>
 800136a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800136c:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d007      	beq.n	8001384 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8001374:	220b      	movs	r2, #11
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff fbfb 	bl	8000b74 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800137e:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SEGGER_SYSVIEW_Stop+0x48>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f383 8811 	msr	BASEPRI, r3
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000ac0 	.word	0x20000ac0
 8001398:	20000a90 	.word	0x20000a90

0800139c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b08c      	sub	sp, #48	; 0x30
 80013a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80013a2:	f3ef 8311 	mrs	r3, BASEPRI
 80013a6:	f04f 0120 	mov.w	r1, #32
 80013aa:	f381 8811 	msr	BASEPRI, r1
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80013b2:	f7ff faf1 	bl	8000998 <_PreparePacket>
 80013b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013c0:	4b42      	ldr	r3, [pc, #264]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013c6:	e00b      	b.n	80013e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80013c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	1c59      	adds	r1, r3, #1
 80013d0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80013d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	701a      	strb	r2, [r3, #0]
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	09db      	lsrs	r3, r3, #7
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e2:	2b7f      	cmp	r3, #127	; 0x7f
 80013e4:	d8f0      	bhi.n	80013c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80013e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e8:	1c5a      	adds	r2, r3, #1
 80013ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]
 80013f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	623b      	str	r3, [r7, #32]
 8001400:	e00b      	b.n	800141a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	1c59      	adds	r1, r3, #1
 800140a:	6279      	str	r1, [r7, #36]	; 0x24
 800140c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	6a3b      	ldr	r3, [r7, #32]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
 800141c:	2b7f      	cmp	r3, #127	; 0x7f
 800141e:	d8f0      	bhi.n	8001402 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8001420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	627a      	str	r2, [r7, #36]	; 0x24
 8001426:	6a3a      	ldr	r2, [r7, #32]
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	e00b      	b.n	8001454 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	1c59      	adds	r1, r3, #1
 8001444:	61f9      	str	r1, [r7, #28]
 8001446:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	701a      	strb	r2, [r3, #0]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	09db      	lsrs	r3, r3, #7
 8001452:	61bb      	str	r3, [r7, #24]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	2b7f      	cmp	r3, #127	; 0x7f
 8001458:	d8f0      	bhi.n	800143c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	61fa      	str	r2, [r7, #28]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	e00b      	b.n	800148c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	b2da      	uxtb	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1c59      	adds	r1, r3, #1
 800147c:	6179      	str	r1, [r7, #20]
 800147e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	701a      	strb	r2, [r3, #0]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	09db      	lsrs	r3, r3, #7
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b7f      	cmp	r3, #127	; 0x7f
 8001490:	d8f0      	bhi.n	8001474 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	1c5a      	adds	r2, r3, #1
 8001496:	617a      	str	r2, [r7, #20]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	b2d2      	uxtb	r2, r2
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80014a2:	2218      	movs	r2, #24
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	68b8      	ldr	r0, [r7, #8]
 80014a8:	f7ff fb64 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80014ba:	4b04      	ldr	r3, [pc, #16]	; (80014cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80014bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014be:	4798      	blx	r3
  }
}
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000ac0 	.word	0x20000ac0
 80014cc:	20000a90 	.word	0x20000a90

080014d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b092      	sub	sp, #72	; 0x48
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80014d8:	f3ef 8311 	mrs	r3, BASEPRI
 80014dc:	f04f 0120 	mov.w	r1, #32
 80014e0:	f381 8811 	msr	BASEPRI, r1
 80014e4:	617b      	str	r3, [r7, #20]
 80014e6:	486a      	ldr	r0, [pc, #424]	; (8001690 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80014e8:	f7ff fa56 	bl	8000998 <_PreparePacket>
 80014ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b66      	ldr	r3, [pc, #408]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	643b      	str	r3, [r7, #64]	; 0x40
 8001502:	e00b      	b.n	800151c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001506:	b2da      	uxtb	r2, r3
 8001508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800150a:	1c59      	adds	r1, r3, #1
 800150c:	6479      	str	r1, [r7, #68]	; 0x44
 800150e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001512:	b2d2      	uxtb	r2, r2
 8001514:	701a      	strb	r2, [r3, #0]
 8001516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001518:	09db      	lsrs	r3, r3, #7
 800151a:	643b      	str	r3, [r7, #64]	; 0x40
 800151c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800151e:	2b7f      	cmp	r3, #127	; 0x7f
 8001520:	d8f0      	bhi.n	8001504 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8001522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	647a      	str	r2, [r7, #68]	; 0x44
 8001528:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800152a:	b2d2      	uxtb	r2, r2
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001530:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	63bb      	str	r3, [r7, #56]	; 0x38
 800153c:	e00b      	b.n	8001556 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800153e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001540:	b2da      	uxtb	r2, r3
 8001542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001544:	1c59      	adds	r1, r3, #1
 8001546:	63f9      	str	r1, [r7, #60]	; 0x3c
 8001548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001552:	09db      	lsrs	r3, r3, #7
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
 8001556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001558:	2b7f      	cmp	r3, #127	; 0x7f
 800155a:	d8f0      	bhi.n	800153e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155e:	1c5a      	adds	r2, r3, #1
 8001560:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001564:	b2d2      	uxtb	r2, r2
 8001566:	701a      	strb	r2, [r3, #0]
 8001568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800156a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2220      	movs	r2, #32
 8001572:	4619      	mov	r1, r3
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f7ff f9df 	bl	8000938 <_EncodeStr>
 800157a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800157c:	2209      	movs	r2, #9
 800157e:	68f9      	ldr	r1, [r7, #12]
 8001580:	6938      	ldr	r0, [r7, #16]
 8001582:	f7ff faf7 	bl	8000b74 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b40      	ldr	r3, [pc, #256]	; (8001694 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	e00b      	b.n	80015b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015a2:	1c59      	adds	r1, r3, #1
 80015a4:	6379      	str	r1, [r7, #52]	; 0x34
 80015a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	701a      	strb	r2, [r3, #0]
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	09db      	lsrs	r3, r3, #7
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b7f      	cmp	r3, #127	; 0x7f
 80015b8:	d8f0      	bhi.n	800159c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80015ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015bc:	1c5a      	adds	r2, r3, #1
 80015be:	637a      	str	r2, [r7, #52]	; 0x34
 80015c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d4:	e00b      	b.n	80015ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80015d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	62f9      	str	r1, [r7, #44]	; 0x2c
 80015e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	701a      	strb	r2, [r3, #0]
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	09db      	lsrs	r3, r3, #7
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	2b7f      	cmp	r3, #127	; 0x7f
 80015f2:	d8f0      	bhi.n	80015d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80015f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f6:	1c5a      	adds	r2, r3, #1
 80015f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001602:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	e00b      	b.n	8001628 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	1c59      	adds	r1, r3, #1
 8001618:	6279      	str	r1, [r7, #36]	; 0x24
 800161a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	701a      	strb	r2, [r3, #0]
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	09db      	lsrs	r3, r3, #7
 8001626:	623b      	str	r3, [r7, #32]
 8001628:	6a3b      	ldr	r3, [r7, #32]
 800162a:	2b7f      	cmp	r3, #127	; 0x7f
 800162c:	d8f0      	bhi.n	8001610 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	1c5a      	adds	r2, r3, #1
 8001632:	627a      	str	r2, [r7, #36]	; 0x24
 8001634:	6a3a      	ldr	r2, [r7, #32]
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	701a      	strb	r2, [r3, #0]
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	61fb      	str	r3, [r7, #28]
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e00b      	b.n	8001660 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	61f9      	str	r1, [r7, #28]
 8001652:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	09db      	lsrs	r3, r3, #7
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b7f      	cmp	r3, #127	; 0x7f
 8001664:	d8f0      	bhi.n	8001648 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	1c5a      	adds	r2, r3, #1
 800166a:	61fa      	str	r2, [r7, #28]
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001676:	2215      	movs	r2, #21
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	6938      	ldr	r0, [r7, #16]
 800167c:	f7ff fa7a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f383 8811 	msr	BASEPRI, r3
}
 8001686:	bf00      	nop
 8001688:	3748      	adds	r7, #72	; 0x48
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000ac0 	.word	0x20000ac0
 8001694:	20000a90 	.word	0x20000a90

08001698 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	4798      	blx	r3
  }
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000a90 	.word	0x20000a90

080016c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016c8:	f3ef 8311 	mrs	r3, BASEPRI
 80016cc:	f04f 0120 	mov.w	r1, #32
 80016d0:	f381 8811 	msr	BASEPRI, r1
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	480b      	ldr	r0, [pc, #44]	; (8001704 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80016d8:	f7ff f95e 	bl	8000998 <_PreparePacket>
 80016dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80016de:	2280      	movs	r2, #128	; 0x80
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	6938      	ldr	r0, [r7, #16]
 80016e4:	f7ff f928 	bl	8000938 <_EncodeStr>
 80016e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80016ea:	220e      	movs	r2, #14
 80016ec:	68f9      	ldr	r1, [r7, #12]
 80016ee:	6938      	ldr	r0, [r7, #16]
 80016f0:	f7ff fa40 	bl	8000b74 <_SendPacket>
  RECORD_END();
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	f383 8811 	msr	BASEPRI, r3
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000ac0 	.word	0x20000ac0

08001708 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01a      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001716:	4b13      	ldr	r3, [pc, #76]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
 8001728:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800172c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800172e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	000a      	movs	r2, r1
 800173c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800173e:	4613      	mov	r3, r2
 8001740:	461a      	mov	r2, r3
 8001742:	4621      	mov	r1, r4
 8001744:	200d      	movs	r0, #13
 8001746:	f7ff fcef 	bl	8001128 <SEGGER_SYSVIEW_RecordU32x2>
 800174a:	e006      	b.n	800175a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800174c:	4b06      	ldr	r3, [pc, #24]	; (8001768 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fcac 	bl	80010b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bd90      	pop	{r4, r7, pc}
 8001762:	bf00      	nop
 8001764:	20000a90 	.word	0x20000a90
 8001768:	e0001004 	.word	0xe0001004

0800176c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d077      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800177e:	4b3e      	ldr	r3, [pc, #248]	; (8001878 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	e008      	b.n	800179c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d007      	beq.n	80017a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	62bb      	str	r3, [r7, #40]	; 0x28
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d3f2      	bcc.n	800178a <SEGGER_SYSVIEW_SendModule+0x1e>
 80017a4:	e000      	b.n	80017a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80017a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d055      	beq.n	800185a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80017ae:	f3ef 8311 	mrs	r3, BASEPRI
 80017b2:	f04f 0120 	mov.w	r1, #32
 80017b6:	f381 8811 	msr	BASEPRI, r1
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	482f      	ldr	r0, [pc, #188]	; (800187c <SEGGER_SYSVIEW_SendModule+0x110>)
 80017be:	f7ff f8eb 	bl	8000998 <_PreparePacket>
 80017c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	e00b      	b.n	80017ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d8:	1c59      	adds	r1, r3, #1
 80017da:	6279      	str	r1, [r7, #36]	; 0x24
 80017dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	701a      	strb	r2, [r3, #0]
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	09db      	lsrs	r3, r3, #7
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	2b7f      	cmp	r3, #127	; 0x7f
 80017ee:	d8f0      	bhi.n	80017d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	627a      	str	r2, [r7, #36]	; 0x24
 80017f6:	6a3a      	ldr	r2, [r7, #32]
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	e00b      	b.n	8001824 <SEGGER_SYSVIEW_SendModule+0xb8>
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	b2da      	uxtb	r2, r3
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1c59      	adds	r1, r3, #1
 8001814:	61f9      	str	r1, [r7, #28]
 8001816:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	09db      	lsrs	r3, r3, #7
 8001822:	61bb      	str	r3, [r7, #24]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b7f      	cmp	r3, #127	; 0x7f
 8001828:	d8f0      	bhi.n	800180c <SEGGER_SYSVIEW_SendModule+0xa0>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	61fa      	str	r2, [r7, #28]
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800183a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	4619      	mov	r1, r3
 8001842:	68f8      	ldr	r0, [r7, #12]
 8001844:	f7ff f878 	bl	8000938 <_EncodeStr>
 8001848:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800184a:	2216      	movs	r2, #22
 800184c:	68f9      	ldr	r1, [r7, #12]
 800184e:	6938      	ldr	r0, [r7, #16]
 8001850:	f7ff f990 	bl	8000b74 <_SendPacket>
      RECORD_END();
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d002      	beq.n	800186e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4798      	blx	r3
    }
  }
}
 800186e:	bf00      	nop
 8001870:	3730      	adds	r7, #48	; 0x30
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000ab8 	.word	0x20000ab8
 800187c:	20000ac0 	.word	0x20000ac0

08001880 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00f      	beq.n	80018ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d002      	beq.n	80018a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d1f2      	bne.n	8001894 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000ab8 	.word	0x20000ab8

080018bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80018c2:	f3ef 8311 	mrs	r3, BASEPRI
 80018c6:	f04f 0120 	mov.w	r1, #32
 80018ca:	f381 8811 	msr	BASEPRI, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	4817      	ldr	r0, [pc, #92]	; (8001930 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80018d2:	f7ff f861 	bl	8000998 <_PreparePacket>
 80018d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	4b14      	ldr	r3, [pc, #80]	; (8001934 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	e00b      	b.n	8001900 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	1c59      	adds	r1, r3, #1
 80018f0:	6179      	str	r1, [r7, #20]
 80018f2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	09db      	lsrs	r3, r3, #7
 80018fe:	613b      	str	r3, [r7, #16]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d8f0      	bhi.n	80018e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	617a      	str	r2, [r7, #20]
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	701a      	strb	r2, [r3, #0]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8001916:	221b      	movs	r2, #27
 8001918:	6879      	ldr	r1, [r7, #4]
 800191a:	68b8      	ldr	r0, [r7, #8]
 800191c:	f7ff f92a 	bl	8000b74 <_SendPacket>
  RECORD_END();
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f383 8811 	msr	BASEPRI, r3
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000ac0 	.word	0x20000ac0
 8001934:	20000abc 	.word	0x20000abc

08001938 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 8001938:	b40f      	push	{r0, r1, r2, r3}
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	461a      	mov	r2, r3
 800194a:	2100      	movs	r1, #0
 800194c:	6938      	ldr	r0, [r7, #16]
 800194e:	f7ff fa7f 	bl	8000e50 <_VPrintHost>
  va_end(ParamList);
#endif
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800195c:	b004      	add	sp, #16
 800195e:	4770      	bx	lr

08001960 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8001964:	4803      	ldr	r0, [pc, #12]	; (8001974 <_cbSendSystemDesc+0x14>)
 8001966:	f7ff feab 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800196a:	4803      	ldr	r0, [pc, #12]	; (8001978 <_cbSendSystemDesc+0x18>)
 800196c:	f7ff fea8 	bl	80016c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	0800926c 	.word	0x0800926c
 8001978:	080092a0 	.word	0x080092a0

0800197c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SEGGER_SYSVIEW_Conf+0x20>)
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	4b05      	ldr	r3, [pc, #20]	; (80019a0 <SEGGER_SYSVIEW_Conf+0x24>)
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <SEGGER_SYSVIEW_Conf+0x28>)
 800198c:	f7ff fb1e 	bl	8000fcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001990:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001994:	f7ff fb5e 	bl	8001054 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000000 	.word	0x20000000
 80019a0:	08001961 	.word	0x08001961
 80019a4:	080092f8 	.word	0x080092f8

080019a8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
 80019b2:	e048      	b.n	8001a46 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 80019b4:	4929      	ldr	r1, [pc, #164]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	4613      	mov	r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	440b      	add	r3, r1
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 fa6b 	bl	8007ea0 <uxTaskGetStackHighWaterMark>
 80019ca:	4601      	mov	r1, r0
 80019cc:	4823      	ldr	r0, [pc, #140]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4403      	add	r3, r0
 80019da:	3310      	adds	r3, #16
 80019dc:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80019de:	491f      	ldr	r1, [pc, #124]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	440b      	add	r3, r1
 80019ec:	6818      	ldr	r0, [r3, #0]
 80019ee:	491b      	ldr	r1, [pc, #108]	; (8001a5c <_cbSendTaskList+0xb4>)
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	4613      	mov	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	3304      	adds	r3, #4
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	4c16      	ldr	r4, [pc, #88]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4423      	add	r3, r4
 8001a0e:	3308      	adds	r3, #8
 8001a10:	681c      	ldr	r4, [r3, #0]
 8001a12:	4d12      	ldr	r5, [pc, #72]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	442b      	add	r3, r5
 8001a20:	330c      	adds	r3, #12
 8001a22:	681d      	ldr	r5, [r3, #0]
 8001a24:	4e0d      	ldr	r6, [pc, #52]	; (8001a5c <_cbSendTaskList+0xb4>)
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4433      	add	r3, r6
 8001a32:	3310      	adds	r3, #16
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	462b      	mov	r3, r5
 8001a3a:	4622      	mov	r2, r4
 8001a3c:	f000 f855 	bl	8001aea <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3301      	adds	r3, #1
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <_cbSendTaskList+0xb8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d3b1      	bcc.n	80019b4 <_cbSendTaskList+0xc>
  }
}
 8001a50:	bf00      	nop
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000ba4 	.word	0x20000ba4
 8001a60:	20000c44 	.word	0x20000c44

08001a64 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8001a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8001a6c:	f005 ff00 	bl	8007870 <xTaskGetTickCountFromISR>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	469a      	mov	sl, r3
 8001a76:	4693      	mov	fp, r2
 8001a78:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a80:	4602      	mov	r2, r0
 8001a82:	460b      	mov	r3, r1
 8001a84:	f04f 0a00 	mov.w	sl, #0
 8001a88:	f04f 0b00 	mov.w	fp, #0
 8001a8c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001a90:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8001a94:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001a98:	4652      	mov	r2, sl
 8001a9a:	465b      	mov	r3, fp
 8001a9c:	1a14      	subs	r4, r2, r0
 8001a9e:	eb63 0501 	sbc.w	r5, r3, r1
 8001aa2:	f04f 0200 	mov.w	r2, #0
 8001aa6:	f04f 0300 	mov.w	r3, #0
 8001aaa:	00ab      	lsls	r3, r5, #2
 8001aac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001ab0:	00a2      	lsls	r2, r4, #2
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	eb14 0800 	adds.w	r8, r4, r0
 8001aba:	eb45 0901 	adc.w	r9, r5, r1
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001aca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ace:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ad2:	4690      	mov	r8, r2
 8001ad4:	4699      	mov	r9, r3
 8001ad6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001ada:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001aea <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b08a      	sub	sp, #40	; 0x28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2214      	movs	r2, #20
 8001afe:	2100      	movs	r1, #0
 8001b00:	4618      	mov	r0, r3
 8001b02:	f007 facf 	bl	80090a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8001b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8001b1a:	f107 0314 	add.w	r3, r7, #20
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fcd6 	bl	80014d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b30:	f000 fe23 	bl	800277a <HAL_Init>

  /* USER CODE BEGIN Init */
  SEGGER_SYSVIEW_Conf();
 8001b34:	f7ff ff22 	bl	800197c <SEGGER_SYSVIEW_Conf>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b38:	f000 f822 	bl	8001b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b3c:	f000 f9bc 	bl	8001eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b40:	f000 f99c 	bl	8001e7c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001b44:	f000 f93c 	bl	8001dc0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b48:	f000 f96a 	bl	8001e20 <MX_USB_OTG_FS_PCD_Init>
  MX_UART4_Init();
 8001b4c:	f000 f8d8 	bl	8001d00 <MX_UART4_Init>
  MX_ETH_Init();
 8001b50:	f000 f888 	bl	8001c64 <MX_ETH_Init>
  MX_USART2_UART_Init();
 8001b54:	f000 f904 	bl	8001d60 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b58:	f004 fc32 	bl	80063c0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001b5c:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <main+0x48>)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <main+0x4c>)
 8001b62:	f004 fc97 	bl	8006494 <osThreadNew>
 8001b66:	4603      	mov	r3, r0
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <main+0x50>)
 8001b6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b6c:	f004 fc5c 	bl	8006428 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <main+0x44>
 8001b72:	bf00      	nop
 8001b74:	08009300 	.word	0x08009300
 8001b78:	08001ffd 	.word	0x08001ffd
 8001b7c:	20001430 	.word	0x20001430

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b094      	sub	sp, #80	; 0x50
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2234      	movs	r2, #52	; 0x34
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f007 fa88 	bl	80090a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ba4:	f002 f83a 	bl	8003c1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <SystemClock_Config+0xdc>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	4a2b      	ldr	r2, [pc, #172]	; (8001c5c <SystemClock_Config+0xdc>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <SystemClock_Config+0xdc>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <SystemClock_Config+0xe0>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bc8:	4a25      	ldr	r2, [pc, #148]	; (8001c60 <SystemClock_Config+0xe0>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <SystemClock_Config+0xe0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001be0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001be4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be6:	2302      	movs	r3, #2
 8001be8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001bf4:	2360      	movs	r3, #96	; 0x60
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c00:	2302      	movs	r3, #2
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f002 f867 	bl	8003cdc <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c14:	f000 fa12 	bl	800203c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c18:	f002 f810 	bl	8003c3c <HAL_PWREx_EnableOverDrive>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c22:	f000 fa0b 	bl	800203c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c26:	230f      	movs	r3, #15
 8001c28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	2103      	movs	r1, #3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 faf8 	bl	8004238 <HAL_RCC_ClockConfig>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c4e:	f000 f9f5 	bl	800203c <Error_Handler>
  }
}
 8001c52:	bf00      	nop
 8001c54:	3750      	adds	r7, #80	; 0x50
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001c6a:	4a20      	ldr	r2, [pc, #128]	; (8001cec <MX_ETH_Init+0x88>)
 8001c6c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001c6e:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001c74:	4b1e      	ldr	r3, [pc, #120]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c7c:	22e1      	movs	r2, #225	; 0xe1
 8001c7e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001c92:	4b15      	ldr	r3, [pc, #84]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001c94:	4a16      	ldr	r2, [pc, #88]	; (8001cf0 <MX_ETH_Init+0x8c>)
 8001c96:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001c9a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c9e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001ca2:	4a14      	ldr	r2, [pc, #80]	; (8001cf4 <MX_ETH_Init+0x90>)
 8001ca4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001ca8:	4a13      	ldr	r2, [pc, #76]	; (8001cf8 <MX_ETH_Init+0x94>)
 8001caa:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001cae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001cb2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <MX_ETH_Init+0x84>)
 8001cb6:	f001 f97d 	bl	8002fb4 <HAL_ETH_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001cc0:	f000 f9bc 	bl	800203c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001cc4:	2238      	movs	r2, #56	; 0x38
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_ETH_Init+0x98>)
 8001cca:	f007 f9eb 	bl	80090a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <MX_ETH_Init+0x98>)
 8001cd0:	2221      	movs	r2, #33	; 0x21
 8001cd2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <MX_ETH_Init+0x98>)
 8001cd6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001cda:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001cdc:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <MX_ETH_Init+0x98>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000c80 	.word	0x20000c80
 8001cec:	40028000 	.word	0x40028000
 8001cf0:	20001434 	.word	0x20001434
 8001cf4:	20000114 	.word	0x20000114
 8001cf8:	20000074 	.word	0x20000074
 8001cfc:	20000c48 	.word	0x20000c48

08001d00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d04:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d06:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <MX_UART4_Init+0x5c>)
 8001d08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d0a:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d18:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d26:	220c      	movs	r2, #12
 8001d28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	; (8001d58 <MX_UART4_Init+0x58>)
 8001d44:	f003 fbd8 	bl	80054f8 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001d4e:	f000 f975 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000d30 	.word	0x20000d30
 8001d5c:	40004c00 	.word	0x40004c00

08001d60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <MX_USART2_UART_Init+0x5c>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_USART2_UART_Init+0x58>)
 8001da4:	f003 fba8 	bl	80054f8 <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001dae:	f000 f945 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000db8 	.word	0x20000db8
 8001dbc:	40004400 	.word	0x40004400

08001dc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dc6:	4a15      	ldr	r2, [pc, #84]	; (8001e1c <MX_USART3_UART_Init+0x5c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001de6:	220c      	movs	r2, #12
 8001de8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_USART3_UART_Init+0x58>)
 8001e04:	f003 fb78 	bl	80054f8 <HAL_UART_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e0e:	f000 f915 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000e40 	.word	0x20000e40
 8001e1c:	40004800 	.word	0x40004800

08001e20 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e24:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e2e:	2206      	movs	r2, #6
 8001e30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e34:	2202      	movs	r2, #2
 8001e36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e40:	2202      	movs	r2, #2
 8001e42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e46:	2201      	movs	r2, #1
 8001e48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e62:	4805      	ldr	r0, [pc, #20]	; (8001e78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001e64:	f001 fd91 	bl	800398a <HAL_PCD_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001e6e:	f000 f8e5 	bl	800203c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000f28 	.word	0x20000f28

08001e7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <MX_DMA_Init+0x38>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <MX_DMA_Init+0x38>)
 8001e88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <MX_DMA_Init+0x38>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e96:	607b      	str	r3, [r7, #4]
 8001e98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	2105      	movs	r1, #5
 8001e9e:	200d      	movs	r0, #13
 8001ea0:	f000 fd74 	bl	800298c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ea4:	200d      	movs	r0, #13
 8001ea6:	f000 fd8d 	bl	80029c4 <HAL_NVIC_EnableIRQ>

}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800

08001eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	; 0x30
 8001ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
 8001ecc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ece:	4b47      	ldr	r3, [pc, #284]	; (8001fec <MX_GPIO_Init+0x134>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	4a46      	ldr	r2, [pc, #280]	; (8001fec <MX_GPIO_Init+0x134>)
 8001ed4:	f043 0304 	orr.w	r3, r3, #4
 8001ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eda:	4b44      	ldr	r3, [pc, #272]	; (8001fec <MX_GPIO_Init+0x134>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee6:	4b41      	ldr	r3, [pc, #260]	; (8001fec <MX_GPIO_Init+0x134>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a40      	ldr	r2, [pc, #256]	; (8001fec <MX_GPIO_Init+0x134>)
 8001eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	; (8001fec <MX_GPIO_Init+0x134>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b38      	ldr	r3, [pc, #224]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	4b35      	ldr	r3, [pc, #212]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a34      	ldr	r2, [pc, #208]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a2e      	ldr	r2, [pc, #184]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f46:	4b29      	ldr	r3, [pc, #164]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a28      	ldr	r2, [pc, #160]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <MX_GPIO_Init+0x134>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f244 0181 	movw	r1, #16513	; 0x4081
 8001f64:	4822      	ldr	r0, [pc, #136]	; (8001ff0 <MX_GPIO_Init+0x138>)
 8001f66:	f001 fcf7 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2140      	movs	r1, #64	; 0x40
 8001f6e:	4821      	ldr	r0, [pc, #132]	; (8001ff4 <MX_GPIO_Init+0x13c>)
 8001f70:	f001 fcf2 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	4619      	mov	r1, r3
 8001f8a:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <MX_GPIO_Init+0x140>)
 8001f8c:	f001 fb38 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001f90:	f244 0381 	movw	r3, #16513	; 0x4081
 8001f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f96:	2301      	movs	r3, #1
 8001f98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa2:	f107 031c 	add.w	r3, r7, #28
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <MX_GPIO_Init+0x138>)
 8001faa:	f001 fb29 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001fae:	2340      	movs	r3, #64	; 0x40
 8001fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <MX_GPIO_Init+0x13c>)
 8001fc6:	f001 fb1b 	bl	8003600 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001fd6:	f107 031c 	add.w	r3, r7, #28
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4805      	ldr	r0, [pc, #20]	; (8001ff4 <MX_GPIO_Init+0x13c>)
 8001fde:	f001 fb0f 	bl	8003600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40020400 	.word	0x40020400
 8001ff4:	40021800 	.word	0x40021800
 8001ff8:	40020800 	.word	0x40020800

08001ffc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002004:	2001      	movs	r0, #1
 8002006:	f004 faeb 	bl	80065e0 <osDelay>
    SEGGER_SYSVIEW_PrintfHost("def");
 800200a:	4802      	ldr	r0, [pc, #8]	; (8002014 <StartDefaultTask+0x18>)
 800200c:	f7ff fc94 	bl	8001938 <SEGGER_SYSVIEW_PrintfHost>
    osDelay(1);
 8002010:	e7f8      	b.n	8002004 <StartDefaultTask+0x8>
 8002012:	bf00      	nop
 8002014:	080092bc 	.word	0x080092bc

08002018 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d101      	bne.n	800202e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800202a:	f000 fbb3 	bl	8002794 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800202e:	bf00      	nop
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40001000 	.word	0x40001000

0800203c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002040:	b672      	cpsid	i
}
 8002042:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002044:	e7fe      	b.n	8002044 <Error_Handler+0x8>
	...

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_MspInit+0x4c>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_MspInit+0x4c>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	; 0x40
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_MspInit+0x4c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_MspInit+0x4c>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <HAL_MspInit+0x4c>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_MspInit+0x4c>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	210f      	movs	r1, #15
 8002082:	f06f 0001 	mvn.w	r0, #1
 8002086:	f000 fc81 	bl	800298c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800

08002098 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b08e      	sub	sp, #56	; 0x38
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]
 80020ac:	60da      	str	r2, [r3, #12]
 80020ae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a4e      	ldr	r2, [pc, #312]	; (80021f0 <HAL_ETH_MspInit+0x158>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	f040 8096 	bne.w	80021e8 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80020bc:	4b4d      	ldr	r3, [pc, #308]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c0:	4a4c      	ldr	r2, [pc, #304]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c6:	6313      	str	r3, [r2, #48]	; 0x30
 80020c8:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	623b      	str	r3, [r7, #32]
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d8:	4a46      	ldr	r2, [pc, #280]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020de:	6313      	str	r3, [r2, #48]	; 0x30
 80020e0:	4b44      	ldr	r3, [pc, #272]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	4b41      	ldr	r3, [pc, #260]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4a40      	ldr	r2, [pc, #256]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80020f6:	6313      	str	r3, [r2, #48]	; 0x30
 80020f8:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 80020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002104:	4b3b      	ldr	r3, [pc, #236]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	4a3a      	ldr	r2, [pc, #232]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 800210a:	f043 0304 	orr.w	r3, r3, #4
 800210e:	6313      	str	r3, [r2, #48]	; 0x30
 8002110:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211c:	4b35      	ldr	r3, [pc, #212]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 800211e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002120:	4a34      	ldr	r2, [pc, #208]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6313      	str	r3, [r2, #48]	; 0x30
 8002128:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002134:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 8002136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002138:	4a2e      	ldr	r2, [pc, #184]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 800213a:	f043 0302 	orr.w	r3, r3, #2
 800213e:	6313      	str	r3, [r2, #48]	; 0x30
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800214c:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	4a28      	ldr	r2, [pc, #160]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 8002152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002156:	6313      	str	r3, [r2, #48]	; 0x30
 8002158:	4b26      	ldr	r3, [pc, #152]	; (80021f4 <HAL_ETH_MspInit+0x15c>)
 800215a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8002164:	2332      	movs	r3, #50	; 0x32
 8002166:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002170:	2303      	movs	r3, #3
 8002172:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002174:	230b      	movs	r3, #11
 8002176:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002178:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217c:	4619      	mov	r1, r3
 800217e:	481e      	ldr	r0, [pc, #120]	; (80021f8 <HAL_ETH_MspInit+0x160>)
 8002180:	f001 fa3e 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002184:	2386      	movs	r3, #134	; 0x86
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002194:	230b      	movs	r3, #11
 8002196:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	4817      	ldr	r0, [pc, #92]	; (80021fc <HAL_ETH_MspInit+0x164>)
 80021a0:	f001 fa2e 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80021a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021aa:	2302      	movs	r3, #2
 80021ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021b6:	230b      	movs	r3, #11
 80021b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021be:	4619      	mov	r1, r3
 80021c0:	480f      	ldr	r0, [pc, #60]	; (8002200 <HAL_ETH_MspInit+0x168>)
 80021c2:	f001 fa1d 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80021c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80021d8:	230b      	movs	r3, #11
 80021da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80021dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e0:	4619      	mov	r1, r3
 80021e2:	4808      	ldr	r0, [pc, #32]	; (8002204 <HAL_ETH_MspInit+0x16c>)
 80021e4:	f001 fa0c 	bl	8003600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3738      	adds	r7, #56	; 0x38
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40028000 	.word	0x40028000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020800 	.word	0x40020800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40021800 	.word	0x40021800

08002208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b0b4      	sub	sp, #208	; 0xd0
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002224:	2290      	movs	r2, #144	; 0x90
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f006 ff3b 	bl	80090a4 <memset>
  if(huart->Instance==UART4)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a9c      	ldr	r2, [pc, #624]	; (80024a4 <HAL_UART_MspInit+0x29c>)
 8002234:	4293      	cmp	r3, r2
 8002236:	f040 808d 	bne.w	8002354 <HAL_UART_MspInit+0x14c>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800223a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002240:	2300      	movs	r3, #0
 8002242:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002244:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002248:	4618      	mov	r0, r3
 800224a:	f002 fa4d 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002254:	f7ff fef2 	bl	800203c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002258:	4b93      	ldr	r3, [pc, #588]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	4a92      	ldr	r2, [pc, #584]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800225e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002262:	6413      	str	r3, [r2, #64]	; 0x40
 8002264:	4b90      	ldr	r3, [pc, #576]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
 800226e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4a8c      	ldr	r2, [pc, #560]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6313      	str	r3, [r2, #48]	; 0x30
 800227c:	4b8a      	ldr	r3, [pc, #552]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	627b      	str	r3, [r7, #36]	; 0x24
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002288:	4b87      	ldr	r3, [pc, #540]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6313      	str	r3, [r2, #48]	; 0x30
 8002294:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022a0:	2301      	movs	r3, #1
 80022a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	2303      	movs	r3, #3
 80022b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022b8:	2308      	movs	r3, #8
 80022ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022be:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022c2:	4619      	mov	r1, r3
 80022c4:	4879      	ldr	r0, [pc, #484]	; (80024ac <HAL_UART_MspInit+0x2a4>)
 80022c6:	f001 f99b 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80022ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80022e4:	2308      	movs	r3, #8
 80022e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80022ee:	4619      	mov	r1, r3
 80022f0:	486f      	ldr	r0, [pc, #444]	; (80024b0 <HAL_UART_MspInit+0x2a8>)
 80022f2:	f001 f985 	bl	8003600 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80022f6:	4b6f      	ldr	r3, [pc, #444]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 80022f8:	4a6f      	ldr	r2, [pc, #444]	; (80024b8 <HAL_UART_MspInit+0x2b0>)
 80022fa:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80022fc:	4b6d      	ldr	r3, [pc, #436]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 80022fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002302:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002304:	4b6b      	ldr	r3, [pc, #428]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800230a:	4b6a      	ldr	r3, [pc, #424]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002310:	4b68      	ldr	r3, [pc, #416]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 8002312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002316:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 800231a:	2200      	movs	r2, #0
 800231c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800231e:	4b65      	ldr	r3, [pc, #404]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002324:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800232a:	4b62      	ldr	r3, [pc, #392]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 800232c:	2200      	movs	r2, #0
 800232e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002330:	4b60      	ldr	r3, [pc, #384]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 8002332:	2200      	movs	r2, #0
 8002334:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002336:	485f      	ldr	r0, [pc, #380]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 8002338:	f000 fb52 	bl	80029e0 <HAL_DMA_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 8002342:	f7ff fe7b 	bl	800203c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a5a      	ldr	r2, [pc, #360]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 800234a:	675a      	str	r2, [r3, #116]	; 0x74
 800234c:	4a59      	ldr	r2, [pc, #356]	; (80024b4 <HAL_UART_MspInit+0x2ac>)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002352:	e0a3      	b.n	800249c <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_UART_MspInit+0x2b4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d15c      	bne.n	8002418 <HAL_UART_MspInit+0x210>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002362:	2300      	movs	r3, #0
 8002364:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236a:	4618      	mov	r0, r3
 800236c:	f002 f9bc 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002376:	f7ff fe61 	bl	800203c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800237a:	4b4b      	ldr	r3, [pc, #300]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237e:	4a4a      	ldr	r2, [pc, #296]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002384:	6413      	str	r3, [r2, #64]	; 0x40
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	4b45      	ldr	r3, [pc, #276]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a44      	ldr	r2, [pc, #272]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b42      	ldr	r3, [pc, #264]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023aa:	4b3f      	ldr	r3, [pc, #252]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a3e      	ldr	r2, [pc, #248]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023c2:	2308      	movs	r3, #8
 80023c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d4:	2303      	movs	r3, #3
 80023d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023da:	2307      	movs	r3, #7
 80023dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80023e4:	4619      	mov	r1, r3
 80023e6:	4831      	ldr	r0, [pc, #196]	; (80024ac <HAL_UART_MspInit+0x2a4>)
 80023e8:	f001 f90a 	bl	8003600 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023ec:	2320      	movs	r3, #32
 80023ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002404:	2307      	movs	r3, #7
 8002406:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800240e:	4619      	mov	r1, r3
 8002410:	482b      	ldr	r0, [pc, #172]	; (80024c0 <HAL_UART_MspInit+0x2b8>)
 8002412:	f001 f8f5 	bl	8003600 <HAL_GPIO_Init>
}
 8002416:	e041      	b.n	800249c <HAL_UART_MspInit+0x294>
  else if(huart->Instance==USART3)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a29      	ldr	r2, [pc, #164]	; (80024c4 <HAL_UART_MspInit+0x2bc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d13c      	bne.n	800249c <HAL_UART_MspInit+0x294>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002428:	2300      	movs	r3, #0
 800242a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800242c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002430:	4618      	mov	r0, r3
 8002432:	f002 f959 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_UART_MspInit+0x238>
      Error_Handler();
 800243c:	f7ff fdfe 	bl	800203c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	4a18      	ldr	r2, [pc, #96]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002446:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800244a:	6413      	str	r3, [r2, #64]	; 0x40
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002458:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 800245e:	f043 0308 	orr.w	r3, r3, #8
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_UART_MspInit+0x2a0>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002470:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002478:	2302      	movs	r3, #2
 800247a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800248a:	2307      	movs	r3, #7
 800248c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002490:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002494:	4619      	mov	r1, r3
 8002496:	480a      	ldr	r0, [pc, #40]	; (80024c0 <HAL_UART_MspInit+0x2b8>)
 8002498:	f001 f8b2 	bl	8003600 <HAL_GPIO_Init>
}
 800249c:	bf00      	nop
 800249e:	37d0      	adds	r7, #208	; 0xd0
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40004c00 	.word	0x40004c00
 80024a8:	40023800 	.word	0x40023800
 80024ac:	40020000 	.word	0x40020000
 80024b0:	40020800 	.word	0x40020800
 80024b4:	20000ec8 	.word	0x20000ec8
 80024b8:	40026040 	.word	0x40026040
 80024bc:	40004400 	.word	0x40004400
 80024c0:	40020c00 	.word	0x40020c00
 80024c4:	40004800 	.word	0x40004800

080024c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0ae      	sub	sp, #184	; 0xb8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2290      	movs	r2, #144	; 0x90
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f006 fddb 	bl	80090a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f6:	d159      	bne.n	80025ac <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80024f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4618      	mov	r0, r3
 800250a:	f002 f8ed 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002514:	f7ff fd92 	bl	800203c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	4a25      	ldr	r2, [pc, #148]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	6313      	str	r3, [r2, #48]	; 0x30
 8002524:	4b23      	ldr	r3, [pc, #140]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002530:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002534:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253e:	2300      	movs	r3, #0
 8002540:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002544:	2303      	movs	r3, #3
 8002546:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800254a:	230a      	movs	r3, #10
 800254c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002554:	4619      	mov	r1, r3
 8002556:	4818      	ldr	r0, [pc, #96]	; (80025b8 <HAL_PCD_MspInit+0xf0>)
 8002558:	f001 f852 	bl	8003600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800255c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002560:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002570:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002574:	4619      	mov	r1, r3
 8002576:	4810      	ldr	r0, [pc, #64]	; (80025b8 <HAL_PCD_MspInit+0xf0>)
 8002578:	f001 f842 	bl	8003600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800257c:	4b0d      	ldr	r3, [pc, #52]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	4a0c      	ldr	r2, [pc, #48]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 8002582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002586:	6353      	str	r3, [r2, #52]	; 0x34
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 800258a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4b07      	ldr	r3, [pc, #28]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	4a06      	ldr	r2, [pc, #24]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 800259a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800259e:	6453      	str	r3, [r2, #68]	; 0x44
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <HAL_PCD_MspInit+0xec>)
 80025a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025ac:	bf00      	nop
 80025ae:	37b8      	adds	r7, #184	; 0xb8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020000 	.word	0x40020000

080025bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025cc:	4b33      	ldr	r3, [pc, #204]	; (800269c <HAL_InitTick+0xe0>)
 80025ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d0:	4a32      	ldr	r2, [pc, #200]	; (800269c <HAL_InitTick+0xe0>)
 80025d2:	f043 0310 	orr.w	r3, r3, #16
 80025d6:	6413      	str	r3, [r2, #64]	; 0x40
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_InitTick+0xe0>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025e4:	f107 0210 	add.w	r2, r7, #16
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 f848 	bl	8004684 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d103      	bne.n	8002606 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025fe:	f002 f819 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 8002602:	6378      	str	r0, [r7, #52]	; 0x34
 8002604:	e004      	b.n	8002610 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002606:	f002 f815 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 800260a:	4603      	mov	r3, r0
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002612:	4a23      	ldr	r2, [pc, #140]	; (80026a0 <HAL_InitTick+0xe4>)
 8002614:	fba2 2303 	umull	r2, r3, r2, r3
 8002618:	0c9b      	lsrs	r3, r3, #18
 800261a:	3b01      	subs	r3, #1
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800261e:	4b21      	ldr	r3, [pc, #132]	; (80026a4 <HAL_InitTick+0xe8>)
 8002620:	4a21      	ldr	r2, [pc, #132]	; (80026a8 <HAL_InitTick+0xec>)
 8002622:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002624:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <HAL_InitTick+0xe8>)
 8002626:	f240 32e7 	movw	r2, #999	; 0x3e7
 800262a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800262c:	4a1d      	ldr	r2, [pc, #116]	; (80026a4 <HAL_InitTick+0xe8>)
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002632:	4b1c      	ldr	r3, [pc, #112]	; (80026a4 <HAL_InitTick+0xe8>)
 8002634:	2200      	movs	r2, #0
 8002636:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b1a      	ldr	r3, [pc, #104]	; (80026a4 <HAL_InitTick+0xe8>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_InitTick+0xe8>)
 8002640:	2200      	movs	r2, #0
 8002642:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002644:	4817      	ldr	r0, [pc, #92]	; (80026a4 <HAL_InitTick+0xe8>)
 8002646:	f002 fc77 	bl	8004f38 <HAL_TIM_Base_Init>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002650:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002654:	2b00      	cmp	r3, #0
 8002656:	d11b      	bne.n	8002690 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002658:	4812      	ldr	r0, [pc, #72]	; (80026a4 <HAL_InitTick+0xe8>)
 800265a:	f002 fccf 	bl	8004ffc <HAL_TIM_Base_Start_IT>
 800265e:	4603      	mov	r3, r0
 8002660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002668:	2b00      	cmp	r3, #0
 800266a:	d111      	bne.n	8002690 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800266c:	2036      	movs	r0, #54	; 0x36
 800266e:	f000 f9a9 	bl	80029c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d808      	bhi.n	800268a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	2036      	movs	r0, #54	; 0x36
 800267e:	f000 f985 	bl	800298c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002682:	4a0a      	ldr	r2, [pc, #40]	; (80026ac <HAL_InitTick+0xf0>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e002      	b.n	8002690 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002690:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002694:	4618      	mov	r0, r3
 8002696:	3738      	adds	r7, #56	; 0x38
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	431bde83 	.word	0x431bde83
 80026a4:	2000143c 	.word	0x2000143c
 80026a8:	40001000 	.word	0x40001000
 80026ac:	20000004 	.word	0x20000004

080026b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <NMI_Handler+0x4>

080026b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <HardFault_Handler+0x4>

080026bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <MemManage_Handler+0x4>

080026c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026c6:	e7fe      	b.n	80026c6 <BusFault_Handler+0x4>

080026c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026cc:	e7fe      	b.n	80026cc <UsageFault_Handler+0x4>

080026ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026ce:	b480      	push	{r7}
 80026d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d2:	bf00      	nop
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80026e0:	4802      	ldr	r0, [pc, #8]	; (80026ec <DMA1_Stream2_IRQHandler+0x10>)
 80026e2:	f000 fa2b 	bl	8002b3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000ec8 	.word	0x20000ec8

080026f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026f4:	4802      	ldr	r0, [pc, #8]	; (8002700 <TIM6_DAC_IRQHandler+0x10>)
 80026f6:	f002 fcf9 	bl	80050ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000143c 	.word	0x2000143c

08002704 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002708:	4b06      	ldr	r3, [pc, #24]	; (8002724 <SystemInit+0x20>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <SystemInit+0x20>)
 8002710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800272c:	480d      	ldr	r0, [pc, #52]	; (8002764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800272e:	490e      	ldr	r1, [pc, #56]	; (8002768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002730:	4a0e      	ldr	r2, [pc, #56]	; (800276c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002734:	e002      	b.n	800273c <LoopCopyDataInit>

08002736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800273a:	3304      	adds	r3, #4

0800273c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800273c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800273e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002740:	d3f9      	bcc.n	8002736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002742:	4a0b      	ldr	r2, [pc, #44]	; (8002770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002744:	4c0b      	ldr	r4, [pc, #44]	; (8002774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002748:	e001      	b.n	800274e <LoopFillZerobss>

0800274a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800274a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800274c:	3204      	adds	r2, #4

0800274e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800274e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002750:	d3fb      	bcc.n	800274a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002752:	f7ff ffd7 	bl	8002704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002756:	f006 fc71 	bl	800903c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800275a:	f7ff f9e7 	bl	8001b2c <main>
  bx  lr    
 800275e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002760:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002768:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800276c:	080093b4 	.word	0x080093b4
  ldr r2, =_sbss
 8002770:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8002774:	20005e9c 	.word	0x20005e9c

08002778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002778:	e7fe      	b.n	8002778 <ADC_IRQHandler>

0800277a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277e:	2003      	movs	r0, #3
 8002780:	f000 f8f9 	bl	8002976 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002784:	200f      	movs	r0, #15
 8002786:	f7ff ff19 	bl	80025bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800278a:	f7ff fc5d 	bl	8002048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002798:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_IncTick+0x20>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_IncTick+0x24>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	4a04      	ldr	r2, [pc, #16]	; (80027b8 <HAL_IncTick+0x24>)
 80027a6:	6013      	str	r3, [r2, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000008 	.word	0x20000008
 80027b8:	20001488 	.word	0x20001488

080027bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return uwTick;
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <HAL_GetTick+0x14>)
 80027c2:	681b      	ldr	r3, [r3, #0]
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	20001488 	.word	0x20001488

080027d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff ffee 	bl	80027bc <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ec:	d005      	beq.n	80027fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ee:	4b0a      	ldr	r3, [pc, #40]	; (8002818 <HAL_Delay+0x44>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4413      	add	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027fa:	bf00      	nop
 80027fc:	f7ff ffde 	bl	80027bc <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	429a      	cmp	r2, r3
 800280a:	d8f7      	bhi.n	80027fc <HAL_Delay+0x28>
  {
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000008 	.word	0x20000008

0800281c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002844:	4b06      	ldr	r3, [pc, #24]	; (8002860 <__NVIC_SetPriorityGrouping+0x44>)
 8002846:	4313      	orrs	r3, r2
 8002848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <__NVIC_SetPriorityGrouping+0x40>)
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	60d3      	str	r3, [r2, #12]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	05fa0000 	.word	0x05fa0000

08002864 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002868:	4b04      	ldr	r3, [pc, #16]	; (800287c <__NVIC_GetPriorityGrouping+0x18>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 0307 	and.w	r3, r3, #7
}
 8002872:	4618      	mov	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	2b00      	cmp	r3, #0
 8002890:	db0b      	blt.n	80028aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	f003 021f 	and.w	r2, r3, #31
 8002898:	4907      	ldr	r1, [pc, #28]	; (80028b8 <__NVIC_EnableIRQ+0x38>)
 800289a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	2001      	movs	r0, #1
 80028a2:	fa00 f202 	lsl.w	r2, r0, r2
 80028a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	e000e100 	.word	0xe000e100

080028bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	6039      	str	r1, [r7, #0]
 80028c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	db0a      	blt.n	80028e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	490c      	ldr	r1, [pc, #48]	; (8002908 <__NVIC_SetPriority+0x4c>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	440b      	add	r3, r1
 80028e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028e4:	e00a      	b.n	80028fc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	4908      	ldr	r1, [pc, #32]	; (800290c <__NVIC_SetPriority+0x50>)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3b04      	subs	r3, #4
 80028f4:	0112      	lsls	r2, r2, #4
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	761a      	strb	r2, [r3, #24]
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000e100 	.word	0xe000e100
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002910:	b480      	push	{r7}
 8002912:	b089      	sub	sp, #36	; 0x24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	f1c3 0307 	rsb	r3, r3, #7
 800292a:	2b04      	cmp	r3, #4
 800292c:	bf28      	it	cs
 800292e:	2304      	movcs	r3, #4
 8002930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	3304      	adds	r3, #4
 8002936:	2b06      	cmp	r3, #6
 8002938:	d902      	bls.n	8002940 <NVIC_EncodePriority+0x30>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b03      	subs	r3, #3
 800293e:	e000      	b.n	8002942 <NVIC_EncodePriority+0x32>
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	401a      	ands	r2, r3
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002958:	f04f 31ff 	mov.w	r1, #4294967295
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa01 f303 	lsl.w	r3, r1, r3
 8002962:	43d9      	mvns	r1, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002968:	4313      	orrs	r3, r2
         );
}
 800296a:	4618      	mov	r0, r3
 800296c:	3724      	adds	r7, #36	; 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff4c 	bl	800281c <__NVIC_SetPriorityGrouping>
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800299e:	f7ff ff61 	bl	8002864 <__NVIC_GetPriorityGrouping>
 80029a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68b9      	ldr	r1, [r7, #8]
 80029a8:	6978      	ldr	r0, [r7, #20]
 80029aa:	f7ff ffb1 	bl	8002910 <NVIC_EncodePriority>
 80029ae:	4602      	mov	r2, r0
 80029b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff80 	bl	80028bc <__NVIC_SetPriority>
}
 80029bc:	bf00      	nop
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	4603      	mov	r3, r0
 80029cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff54 	bl	8002880 <__NVIC_EnableIRQ>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff fee6 	bl	80027bc <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e099      	b.n	8002b30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a1c:	e00f      	b.n	8002a3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a1e:	f7ff fecd 	bl	80027bc <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b05      	cmp	r3, #5
 8002a2a:	d908      	bls.n	8002a3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2203      	movs	r2, #3
 8002a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e078      	b.n	8002b30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e8      	bne.n	8002a1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	4b38      	ldr	r3, [pc, #224]	; (8002b38 <HAL_DMA_Init+0x158>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685a      	ldr	r2, [r3, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d107      	bne.n	8002aa8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f023 0307 	bic.w	r3, r3, #7
 8002abe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d117      	bne.n	8002b02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 f9e9 	bl	8002ebc <DMA_CheckFifoParam>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2240      	movs	r2, #64	; 0x40
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002afe:	2301      	movs	r3, #1
 8002b00:	e016      	b.n	8002b30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9a0 	bl	8002e50 <DMA_CalcBaseAndBitshift>
 8002b10:	4603      	mov	r3, r0
 8002b12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	223f      	movs	r2, #63	; 0x3f
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	e010803f 	.word	0xe010803f

08002b3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b48:	4b8e      	ldr	r3, [pc, #568]	; (8002d84 <HAL_DMA_IRQHandler+0x248>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a8e      	ldr	r2, [pc, #568]	; (8002d88 <HAL_DMA_IRQHandler+0x24c>)
 8002b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b52:	0a9b      	lsrs	r3, r3, #10
 8002b54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b66:	2208      	movs	r2, #8
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d01a      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0304 	and.w	r3, r3, #4
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d013      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0204 	bic.w	r2, r2, #4
 8002b8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b94:	2208      	movs	r2, #8
 8002b96:	409a      	lsls	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba0:	f043 0201 	orr.w	r2, r3, #1
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	2201      	movs	r2, #1
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00b      	beq.n	8002bde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	2201      	movs	r2, #1
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f043 0202 	orr.w	r2, r3, #2
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2204      	movs	r2, #4
 8002be4:	409a      	lsls	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d012      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00b      	beq.n	8002c14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	2204      	movs	r2, #4
 8002c02:	409a      	lsls	r2, r3
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	f043 0204 	orr.w	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c18:	2210      	movs	r2, #16
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d043      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03c      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c36:	2210      	movs	r2, #16
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d018      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d108      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d024      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
 8002c6a:	e01f      	b.n	8002cac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d01b      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
 8002c7c:	e016      	b.n	8002cac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d107      	bne.n	8002c9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0208 	bic.w	r2, r2, #8
 8002c9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f000 808f 	beq.w	8002ddc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 8087 	beq.w	8002ddc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	409a      	lsls	r2, r3
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d136      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0216 	bic.w	r2, r2, #22
 8002cf4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695a      	ldr	r2, [r3, #20]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <HAL_DMA_IRQHandler+0x1da>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d007      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0208 	bic.w	r2, r2, #8
 8002d24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	223f      	movs	r2, #63	; 0x3f
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d07e      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	4798      	blx	r3
        }
        return;
 8002d52:	e079      	b.n	8002e48 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d01d      	beq.n	8002d9e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10d      	bne.n	8002d8c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d031      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
 8002d80:	e02c      	b.n	8002ddc <HAL_DMA_IRQHandler+0x2a0>
 8002d82:	bf00      	nop
 8002d84:	20000000 	.word	0x20000000
 8002d88:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d023      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	4798      	blx	r3
 8002d9c:	e01e      	b.n	8002ddc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10f      	bne.n	8002dcc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0210 	bic.w	r2, r2, #16
 8002dba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d032      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d022      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2205      	movs	r2, #5
 8002df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0201 	bic.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d307      	bcc.n	8002e24 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1f2      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x2cc>
 8002e22:	e000      	b.n	8002e26 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e24:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d005      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	4798      	blx	r3
 8002e46:	e000      	b.n	8002e4a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e48:	bf00      	nop
    }
  }
}
 8002e4a:	3718      	adds	r7, #24
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3b10      	subs	r3, #16
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <DMA_CalcBaseAndBitshift+0x60>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	091b      	lsrs	r3, r3, #4
 8002e68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e6a:	4a12      	ldr	r2, [pc, #72]	; (8002eb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	4413      	add	r3, r2
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d908      	bls.n	8002e90 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	1d1a      	adds	r2, r3, #4
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	659a      	str	r2, [r3, #88]	; 0x58
 8002e8e:	e006      	b.n	8002e9e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e98:	4013      	ands	r3, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3714      	adds	r7, #20
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	aaaaaaab 	.word	0xaaaaaaab
 8002eb4:	0800933c 	.word	0x0800933c
 8002eb8:	fffffc00 	.word	0xfffffc00

08002ebc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ecc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11f      	bne.n	8002f16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2b03      	cmp	r3, #3
 8002eda:	d856      	bhi.n	8002f8a <DMA_CheckFifoParam+0xce>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <DMA_CheckFifoParam+0x28>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f07 	.word	0x08002f07
 8002eec:	08002ef5 	.word	0x08002ef5
 8002ef0:	08002f8b 	.word	0x08002f8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d046      	beq.n	8002f8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f04:	e043      	b.n	8002f8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f0e:	d140      	bne.n	8002f92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e03d      	b.n	8002f92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f1e:	d121      	bne.n	8002f64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b03      	cmp	r3, #3
 8002f24:	d837      	bhi.n	8002f96 <DMA_CheckFifoParam+0xda>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <DMA_CheckFifoParam+0x70>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f43 	.word	0x08002f43
 8002f34:	08002f3d 	.word	0x08002f3d
 8002f38:	08002f55 	.word	0x08002f55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f40:	e030      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d025      	beq.n	8002f9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f52:	e022      	b.n	8002f9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f5c:	d11f      	bne.n	8002f9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f62:	e01c      	b.n	8002f9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d903      	bls.n	8002f72 <DMA_CheckFifoParam+0xb6>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d003      	beq.n	8002f78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f70:	e018      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
      break;
 8002f76:	e015      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e00b      	b.n	8002fa2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f8a:	bf00      	nop
 8002f8c:	e00a      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f8e:	bf00      	nop
 8002f90:	e008      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f92:	bf00      	nop
 8002f94:	e006      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
 8002f98:	e004      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e002      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f9e:	bf00      	nop
 8002fa0:	e000      	b.n	8002fa4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop

08002fb4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e06a      	b.n	800309c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2223      	movs	r2, #35	; 0x23
 8002fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f7ff f85d 	bl	8002098 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_ETH_Init+0xf0>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	4a30      	ldr	r2, [pc, #192]	; (80030a4 <HAL_ETH_Init+0xf0>)
 8002fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fea:	4b2e      	ldr	r3, [pc, #184]	; (80030a4 <HAL_ETH_Init+0xf0>)
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	; (80030a8 <HAL_ETH_Init+0xf4>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4a2b      	ldr	r2, [pc, #172]	; (80030a8 <HAL_ETH_Init+0xf4>)
 8002ffc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003000:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_ETH_Init+0xf4>)
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4927      	ldr	r1, [pc, #156]	; (80030a8 <HAL_ETH_Init+0xf4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003010:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <HAL_ETH_Init+0xf4>)
 8003012:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800302a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800302c:	f7ff fbc6 	bl	80027bc <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003032:	e011      	b.n	8003058 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003034:	f7ff fbc2 	bl	80027bc <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003042:	d909      	bls.n	8003058 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2204      	movs	r2, #4
 8003048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	22e0      	movs	r2, #224	; 0xe0
 8003050:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e021      	b.n	800309c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e4      	bne.n	8003034 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f958 	bl	8003320 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f9ff 	bl	8003474 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 fa55 	bl	8003526 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	461a      	mov	r2, r3
 8003082:	2100      	movs	r1, #0
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f9bd 	bl	8003404 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2210      	movs	r2, #16
 8003096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40013800 	.word	0x40013800

080030ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4b51      	ldr	r3, [pc, #324]	; (8003208 <ETH_SetMACConfig+0x15c>)
 80030c2:	4013      	ands	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	7c1b      	ldrb	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d102      	bne.n	80030d4 <ETH_SetMACConfig+0x28>
 80030ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80030d2:	e000      	b.n	80030d6 <ETH_SetMACConfig+0x2a>
 80030d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	7c5b      	ldrb	r3, [r3, #17]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <ETH_SetMACConfig+0x38>
 80030de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e2:	e000      	b.n	80030e6 <ETH_SetMACConfig+0x3a>
 80030e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80030e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80030ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	7fdb      	ldrb	r3, [r3, #31]
 80030f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80030f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80030fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	7f92      	ldrb	r2, [r2, #30]
 8003100:	2a00      	cmp	r2, #0
 8003102:	d102      	bne.n	800310a <ETH_SetMACConfig+0x5e>
 8003104:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003108:	e000      	b.n	800310c <ETH_SetMACConfig+0x60>
 800310a:	2200      	movs	r2, #0
                        macconf->Speed |
 800310c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	7f1b      	ldrb	r3, [r3, #28]
 8003112:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003114:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800311a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	791b      	ldrb	r3, [r3, #4]
 8003120:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003122:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	f892 2020 	ldrb.w	r2, [r2, #32]
 800312a:	2a00      	cmp	r2, #0
 800312c:	d102      	bne.n	8003134 <ETH_SetMACConfig+0x88>
 800312e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003132:	e000      	b.n	8003136 <ETH_SetMACConfig+0x8a>
 8003134:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003136:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	7bdb      	ldrb	r3, [r3, #15]
 800313c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800313e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003144:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800314c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800314e:	4313      	orrs	r3, r2
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003166:	2001      	movs	r0, #1
 8003168:	f7ff fb34 	bl	80027d4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003182:	4013      	ands	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800318a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003192:	2a00      	cmp	r2, #0
 8003194:	d101      	bne.n	800319a <ETH_SetMACConfig+0xee>
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	e000      	b.n	800319c <ETH_SetMACConfig+0xf0>
 800319a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800319c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80031a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80031aa:	2a01      	cmp	r2, #1
 80031ac:	d101      	bne.n	80031b2 <ETH_SetMACConfig+0x106>
 80031ae:	2208      	movs	r2, #8
 80031b0:	e000      	b.n	80031b4 <ETH_SetMACConfig+0x108>
 80031b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80031b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80031bc:	2a01      	cmp	r2, #1
 80031be:	d101      	bne.n	80031c4 <ETH_SetMACConfig+0x118>
 80031c0:	2204      	movs	r2, #4
 80031c2:	e000      	b.n	80031c6 <ETH_SetMACConfig+0x11a>
 80031c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80031c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80031ce:	2a01      	cmp	r2, #1
 80031d0:	d101      	bne.n	80031d6 <ETH_SetMACConfig+0x12a>
 80031d2:	2202      	movs	r2, #2
 80031d4:	e000      	b.n	80031d8 <ETH_SetMACConfig+0x12c>
 80031d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80031d8:	4313      	orrs	r3, r2
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80031f0:	2001      	movs	r0, #1
 80031f2:	f7ff faef 	bl	80027d4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	619a      	str	r2, [r3, #24]
}
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	ff20810f 	.word	0xff20810f

0800320c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4b3d      	ldr	r3, [pc, #244]	; (800331c <ETH_SetDMAConfig+0x110>)
 8003226:	4013      	ands	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	7b1b      	ldrb	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <ETH_SetDMAConfig+0x2c>
 8003232:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003236:	e000      	b.n	800323a <ETH_SetDMAConfig+0x2e>
 8003238:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	7b5b      	ldrb	r3, [r3, #13]
 800323e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003240:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	7f52      	ldrb	r2, [r2, #29]
 8003246:	2a00      	cmp	r2, #0
 8003248:	d102      	bne.n	8003250 <ETH_SetDMAConfig+0x44>
 800324a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800324e:	e000      	b.n	8003252 <ETH_SetDMAConfig+0x46>
 8003250:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003252:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	7b9b      	ldrb	r3, [r3, #14]
 8003258:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800325a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003260:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	7f1b      	ldrb	r3, [r3, #28]
 8003266:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003268:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	7f9b      	ldrb	r3, [r3, #30]
 800326e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003270:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003276:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800327e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003280:	4313      	orrs	r3, r2
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	4313      	orrs	r3, r2
 8003286:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003290:	461a      	mov	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7ff fa96 	bl	80027d4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b0:	461a      	mov	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	791b      	ldrb	r3, [r3, #4]
 80032ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80032c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80032cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80032d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80032de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80032e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6812      	ldr	r2, [r2, #0]
 80032ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80032f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003300:	2001      	movs	r0, #1
 8003302:	f7ff fa67 	bl	80027d4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800330e:	461a      	mov	r2, r3
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	f8de3f23 	.word	0xf8de3f23

08003320 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b0a6      	sub	sp, #152	; 0x98
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003334:	2300      	movs	r3, #0
 8003336:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003338:	2300      	movs	r3, #0
 800333a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003344:	2300      	movs	r3, #0
 8003346:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800334a:	2301      	movs	r3, #1
 800334c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800335c:	2300      	movs	r3, #0
 800335e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003360:	2300      	movs	r3, #0
 8003362:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003366:	2300      	movs	r3, #0
 8003368:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800336a:	2300      	movs	r3, #0
 800336c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003376:	2300      	movs	r3, #0
 8003378:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800337c:	2300      	movs	r3, #0
 800337e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003382:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003386:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003388:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800338c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800338e:	2300      	movs	r3, #0
 8003390:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003394:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003398:	4619      	mov	r1, r3
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff fe86 	bl	80030ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80033a4:	2301      	movs	r3, #1
 80033a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80033bc:	2300      	movs	r3, #0
 80033be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80033cc:	2301      	movs	r3, #1
 80033ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80033d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80033d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80033dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80033f0:	f107 0308 	add.w	r3, r7, #8
 80033f4:	4619      	mov	r1, r3
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff ff08 	bl	800320c <ETH_SetDMAConfig>
}
 80033fc:	bf00      	nop
 80033fe:	3798      	adds	r7, #152	; 0x98
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3305      	adds	r3, #5
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	3204      	adds	r2, #4
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <ETH_MACAddressConfig+0x68>)
 8003426:	4413      	add	r3, r2
 8003428:	461a      	mov	r2, r3
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	3303      	adds	r3, #3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	3302      	adds	r3, #2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3301      	adds	r3, #1
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	4313      	orrs	r3, r2
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	7812      	ldrb	r2, [r2, #0]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	4b06      	ldr	r3, [pc, #24]	; (8003470 <ETH_MACAddressConfig+0x6c>)
 8003456:	4413      	add	r3, r2
 8003458:	461a      	mov	r2, r3
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	6013      	str	r3, [r2, #0]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40028040 	.word	0x40028040
 8003470:	40028044 	.word	0x40028044

08003474 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	e03e      	b.n	8003500 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68d9      	ldr	r1, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2200      	movs	r2, #0
 800349e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2200      	movs	r2, #0
 80034a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2200      	movs	r2, #0
 80034aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80034ac:	68b9      	ldr	r1, [r7, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	3206      	adds	r2, #6
 80034b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d80c      	bhi.n	80034e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68d9      	ldr	r1, [r3, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	440b      	add	r3, r1
 80034dc:	461a      	mov	r2, r3
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	60da      	str	r2, [r3, #12]
 80034e2:	e004      	b.n	80034ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	461a      	mov	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b03      	cmp	r3, #3
 8003504:	d9bd      	bls.n	8003482 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003518:	611a      	str	r2, [r3, #16]
}
 800351a:	bf00      	nop
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr

08003526 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003526:	b480      	push	{r7}
 8003528:	b085      	sub	sp, #20
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800352e:	2300      	movs	r3, #0
 8003530:	60fb      	str	r3, [r7, #12]
 8003532:	e046      	b.n	80035c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6919      	ldr	r1, [r3, #16]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	440b      	add	r3, r1
 8003544:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	2200      	movs	r2, #0
 8003550:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2200      	movs	r2, #0
 8003556:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	2200      	movs	r2, #0
 8003562:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	2200      	movs	r2, #0
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003570:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003578:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	3212      	adds	r2, #18
 800358e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d80c      	bhi.n	80035b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6919      	ldr	r1, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	4613      	mov	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	440b      	add	r3, r1
 80035aa:	461a      	mov	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e004      	b.n	80035bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	461a      	mov	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3301      	adds	r3, #1
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d9b5      	bls.n	8003534 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691a      	ldr	r2, [r3, #16]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035f2:	60da      	str	r2, [r3, #12]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003600:	b480      	push	{r7}
 8003602:	b089      	sub	sp, #36	; 0x24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800360a:	2300      	movs	r3, #0
 800360c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003612:	2300      	movs	r3, #0
 8003614:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	e175      	b.n	800390c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003620:	2201      	movs	r2, #1
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	697a      	ldr	r2, [r7, #20]
 8003630:	4013      	ands	r3, r2
 8003632:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	f040 8164 	bne.w	8003906 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d005      	beq.n	8003656 <HAL_GPIO_Init+0x56>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 0303 	and.w	r3, r3, #3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d130      	bne.n	80036b8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	2203      	movs	r2, #3
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800368c:	2201      	movs	r2, #1
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 0201 	and.w	r2, r3, #1
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d017      	beq.n	80036f4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	4013      	ands	r3, r2
 80036da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d123      	bne.n	8003748 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	08da      	lsrs	r2, r3, #3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	3208      	adds	r2, #8
 8003708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	220f      	movs	r2, #15
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43db      	mvns	r3, r3
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	4013      	ands	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	f003 0307 	and.w	r3, r3, #7
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	4313      	orrs	r3, r2
 8003738:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	08da      	lsrs	r2, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	3208      	adds	r2, #8
 8003742:	69b9      	ldr	r1, [r7, #24]
 8003744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	2203      	movs	r2, #3
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	69ba      	ldr	r2, [r7, #24]
 800375c:	4013      	ands	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f003 0203 	and.w	r2, r3, #3
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 80be 	beq.w	8003906 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800378a:	4b66      	ldr	r3, [pc, #408]	; (8003924 <HAL_GPIO_Init+0x324>)
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	4a65      	ldr	r2, [pc, #404]	; (8003924 <HAL_GPIO_Init+0x324>)
 8003790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003794:	6453      	str	r3, [r2, #68]	; 0x44
 8003796:	4b63      	ldr	r3, [pc, #396]	; (8003924 <HAL_GPIO_Init+0x324>)
 8003798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037a2:	4a61      	ldr	r2, [pc, #388]	; (8003928 <HAL_GPIO_Init+0x328>)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	3302      	adds	r3, #2
 80037aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4013      	ands	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a58      	ldr	r2, [pc, #352]	; (800392c <HAL_GPIO_Init+0x32c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d037      	beq.n	800383e <HAL_GPIO_Init+0x23e>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_GPIO_Init+0x330>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d031      	beq.n	800383a <HAL_GPIO_Init+0x23a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a56      	ldr	r2, [pc, #344]	; (8003934 <HAL_GPIO_Init+0x334>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02b      	beq.n	8003836 <HAL_GPIO_Init+0x236>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a55      	ldr	r2, [pc, #340]	; (8003938 <HAL_GPIO_Init+0x338>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d025      	beq.n	8003832 <HAL_GPIO_Init+0x232>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a54      	ldr	r2, [pc, #336]	; (800393c <HAL_GPIO_Init+0x33c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d01f      	beq.n	800382e <HAL_GPIO_Init+0x22e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a53      	ldr	r2, [pc, #332]	; (8003940 <HAL_GPIO_Init+0x340>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d019      	beq.n	800382a <HAL_GPIO_Init+0x22a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a52      	ldr	r2, [pc, #328]	; (8003944 <HAL_GPIO_Init+0x344>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_GPIO_Init+0x226>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a51      	ldr	r2, [pc, #324]	; (8003948 <HAL_GPIO_Init+0x348>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d00d      	beq.n	8003822 <HAL_GPIO_Init+0x222>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a50      	ldr	r2, [pc, #320]	; (800394c <HAL_GPIO_Init+0x34c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d007      	beq.n	800381e <HAL_GPIO_Init+0x21e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a4f      	ldr	r2, [pc, #316]	; (8003950 <HAL_GPIO_Init+0x350>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_GPIO_Init+0x21a>
 8003816:	2309      	movs	r3, #9
 8003818:	e012      	b.n	8003840 <HAL_GPIO_Init+0x240>
 800381a:	230a      	movs	r3, #10
 800381c:	e010      	b.n	8003840 <HAL_GPIO_Init+0x240>
 800381e:	2308      	movs	r3, #8
 8003820:	e00e      	b.n	8003840 <HAL_GPIO_Init+0x240>
 8003822:	2307      	movs	r3, #7
 8003824:	e00c      	b.n	8003840 <HAL_GPIO_Init+0x240>
 8003826:	2306      	movs	r3, #6
 8003828:	e00a      	b.n	8003840 <HAL_GPIO_Init+0x240>
 800382a:	2305      	movs	r3, #5
 800382c:	e008      	b.n	8003840 <HAL_GPIO_Init+0x240>
 800382e:	2304      	movs	r3, #4
 8003830:	e006      	b.n	8003840 <HAL_GPIO_Init+0x240>
 8003832:	2303      	movs	r3, #3
 8003834:	e004      	b.n	8003840 <HAL_GPIO_Init+0x240>
 8003836:	2302      	movs	r3, #2
 8003838:	e002      	b.n	8003840 <HAL_GPIO_Init+0x240>
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_GPIO_Init+0x240>
 800383e:	2300      	movs	r3, #0
 8003840:	69fa      	ldr	r2, [r7, #28]
 8003842:	f002 0203 	and.w	r2, r2, #3
 8003846:	0092      	lsls	r2, r2, #2
 8003848:	4093      	lsls	r3, r2
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003850:	4935      	ldr	r1, [pc, #212]	; (8003928 <HAL_GPIO_Init+0x328>)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	089b      	lsrs	r3, r3, #2
 8003856:	3302      	adds	r3, #2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800385e:	4b3d      	ldr	r3, [pc, #244]	; (8003954 <HAL_GPIO_Init+0x354>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	43db      	mvns	r3, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4013      	ands	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003882:	4a34      	ldr	r2, [pc, #208]	; (8003954 <HAL_GPIO_Init+0x354>)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003888:	4b32      	ldr	r3, [pc, #200]	; (8003954 <HAL_GPIO_Init+0x354>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	43db      	mvns	r3, r3
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	4013      	ands	r3, r2
 8003896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <HAL_GPIO_Init+0x354>)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <HAL_GPIO_Init+0x354>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038d6:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_GPIO_Init+0x354>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038dc:	4b1d      	ldr	r3, [pc, #116]	; (8003954 <HAL_GPIO_Init+0x354>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003900:	4a14      	ldr	r2, [pc, #80]	; (8003954 <HAL_GPIO_Init+0x354>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	3301      	adds	r3, #1
 800390a:	61fb      	str	r3, [r7, #28]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b0f      	cmp	r3, #15
 8003910:	f67f ae86 	bls.w	8003620 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003914:	bf00      	nop
 8003916:	bf00      	nop
 8003918:	3724      	adds	r7, #36	; 0x24
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	40013800 	.word	0x40013800
 800392c:	40020000 	.word	0x40020000
 8003930:	40020400 	.word	0x40020400
 8003934:	40020800 	.word	0x40020800
 8003938:	40020c00 	.word	0x40020c00
 800393c:	40021000 	.word	0x40021000
 8003940:	40021400 	.word	0x40021400
 8003944:	40021800 	.word	0x40021800
 8003948:	40021c00 	.word	0x40021c00
 800394c:	40022000 	.word	0x40022000
 8003950:	40022400 	.word	0x40022400
 8003954:	40013c00 	.word	0x40013c00

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
 8003964:	4613      	mov	r3, r2
 8003966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003968:	787b      	ldrb	r3, [r7, #1]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003974:	e003      	b.n	800397e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	041a      	lsls	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	619a      	str	r2, [r3, #24]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800398a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398c:	b08f      	sub	sp, #60	; 0x3c
 800398e:	af0a      	add	r7, sp, #40	; 0x28
 8003990:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e116      	b.n	8003bca <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fe fd86 	bl	80024c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2203      	movs	r2, #3
 80039c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fa4c 	bl	8005e78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	603b      	str	r3, [r7, #0]
 80039e6:	687e      	ldr	r6, [r7, #4]
 80039e8:	466d      	mov	r5, sp
 80039ea:	f106 0410 	add.w	r4, r6, #16
 80039ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80039fe:	1d33      	adds	r3, r6, #4
 8003a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a02:	6838      	ldr	r0, [r7, #0]
 8003a04:	f002 f9e0 	bl	8005dc8 <USB_CoreInit>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e0d7      	b.n	8003bca <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2100      	movs	r1, #0
 8003a20:	4618      	mov	r0, r3
 8003a22:	f002 fa3a 	bl	8005e9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
 8003a2a:	e04a      	b.n	8003ac2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a2c:	7bfa      	ldrb	r2, [r7, #15]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	333d      	adds	r3, #61	; 0x3d
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	333c      	adds	r3, #60	; 0x3c
 8003a50:	7bfa      	ldrb	r2, [r7, #15]
 8003a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	b298      	uxth	r0, r3
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	3344      	adds	r3, #68	; 0x44
 8003a68:	4602      	mov	r2, r0
 8003a6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3340      	adds	r3, #64	; 0x40
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a80:	7bfa      	ldrb	r2, [r7, #15]
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3348      	adds	r3, #72	; 0x48
 8003a90:	2200      	movs	r2, #0
 8003a92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	334c      	adds	r3, #76	; 0x4c
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	3354      	adds	r3, #84	; 0x54
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	7bfa      	ldrb	r2, [r7, #15]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d3af      	bcc.n	8003a2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003acc:	2300      	movs	r3, #0
 8003ace:	73fb      	strb	r3, [r7, #15]
 8003ad0:	e044      	b.n	8003b5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003afe:	7bfa      	ldrb	r2, [r7, #15]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b2a:	7bfa      	ldrb	r2, [r7, #15]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	4413      	add	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	73fb      	strb	r3, [r7, #15]
 8003b5c:	7bfa      	ldrb	r2, [r7, #15]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3b5      	bcc.n	8003ad2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	603b      	str	r3, [r7, #0]
 8003b6c:	687e      	ldr	r6, [r7, #4]
 8003b6e:	466d      	mov	r5, sp
 8003b70:	f106 0410 	add.w	r4, r6, #16
 8003b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b80:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b84:	1d33      	adds	r3, r6, #4
 8003b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b88:	6838      	ldr	r0, [r7, #0]
 8003b8a:	f002 f9d3 	bl	8005f34 <USB_DevInit>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e014      	b.n	8003bca <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d102      	bne.n	8003bbe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 f80b 	bl	8003bd4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f002 fb91 	bl	80062ea <USB_DevDisconnect>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003bd4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	10000003 	.word	0x10000003

08003c1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c20:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	40007000 	.word	0x40007000

08003c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003c42:	2300      	movs	r3, #0
 8003c44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c46:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	6413      	str	r3, [r2, #64]	; 0x40
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c5a:	603b      	str	r3, [r7, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c6a:	f7fe fda7 	bl	80027bc <HAL_GetTick>
 8003c6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c70:	e009      	b.n	8003c86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c72:	f7fe fda3 	bl	80027bc <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c80:	d901      	bls.n	8003c86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e022      	b.n	8003ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c86:	4b14      	ldr	r3, [pc, #80]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	d1ee      	bne.n	8003c72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c94:	4b10      	ldr	r3, [pc, #64]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a0f      	ldr	r2, [pc, #60]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ca0:	f7fe fd8c 	bl	80027bc <HAL_GetTick>
 8003ca4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca6:	e009      	b.n	8003cbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ca8:	f7fe fd88 	bl	80027bc <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cb6:	d901      	bls.n	8003cbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e007      	b.n	8003ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc8:	d1ee      	bne.n	8003ca8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e29b      	b.n	800422a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 8087 	beq.w	8003e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d00:	4b96      	ldr	r3, [pc, #600]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 030c 	and.w	r3, r3, #12
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d00c      	beq.n	8003d26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0c:	4b93      	ldr	r3, [pc, #588]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 030c 	and.w	r3, r3, #12
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d112      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62>
 8003d18:	4b90      	ldr	r3, [pc, #576]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d24:	d10b      	bne.n	8003d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d26:	4b8d      	ldr	r3, [pc, #564]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d06c      	beq.n	8003e0c <HAL_RCC_OscConfig+0x130>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d168      	bne.n	8003e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e275      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d46:	d106      	bne.n	8003d56 <HAL_RCC_OscConfig+0x7a>
 8003d48:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a83      	ldr	r2, [pc, #524]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	e02e      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10c      	bne.n	8003d78 <HAL_RCC_OscConfig+0x9c>
 8003d5e:	4b7f      	ldr	r3, [pc, #508]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7e      	ldr	r2, [pc, #504]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	4b7c      	ldr	r3, [pc, #496]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a7b      	ldr	r2, [pc, #492]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d74:	6013      	str	r3, [r2, #0]
 8003d76:	e01d      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d80:	d10c      	bne.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003d82:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	4b73      	ldr	r3, [pc, #460]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a72      	ldr	r2, [pc, #456]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	e00b      	b.n	8003db4 <HAL_RCC_OscConfig+0xd8>
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a6e      	ldr	r2, [pc, #440]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b6c      	ldr	r3, [pc, #432]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6b      	ldr	r2, [pc, #428]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d013      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fcfe 	bl	80027bc <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fcfa 	bl	80027bc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e229      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd6:	4b61      	ldr	r3, [pc, #388]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e014      	b.n	8003e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fe fcea 	bl	80027bc <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fce6 	bl	80027bc <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e215      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b57      	ldr	r3, [pc, #348]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x110>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d069      	beq.n	8003eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	4b50      	ldr	r3, [pc, #320]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 030c 	and.w	r3, r3, #12
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00b      	beq.n	8003e3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e26:	4b4d      	ldr	r3, [pc, #308]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d11c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x190>
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d116      	bne.n	8003e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d005      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d001      	beq.n	8003e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e1e9      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	493d      	ldr	r1, [pc, #244]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e6a:	e040      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d023      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e74:	4b39      	ldr	r3, [pc, #228]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a38      	ldr	r2, [pc, #224]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e7a:	f043 0301 	orr.w	r3, r3, #1
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e80:	f7fe fc9c 	bl	80027bc <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e88:	f7fe fc98 	bl	80027bc <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1c7      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0302 	and.w	r3, r3, #2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea6:	4b2d      	ldr	r3, [pc, #180]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	4929      	ldr	r1, [pc, #164]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ec2:	f023 0301 	bic.w	r3, r3, #1
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fe fc78 	bl	80027bc <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed0:	f7fe fc74 	bl	80027bc <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e1a3      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d038      	beq.n	8003f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d019      	beq.n	8003f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f02:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f06:	4a15      	ldr	r2, [pc, #84]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0e:	f7fe fc55 	bl	80027bc <HAL_GetTick>
 8003f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f16:	f7fe fc51 	bl	80027bc <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e180      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d0f0      	beq.n	8003f16 <HAL_RCC_OscConfig+0x23a>
 8003f34:	e01a      	b.n	8003f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3a:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <HAL_RCC_OscConfig+0x280>)
 8003f3c:	f023 0301 	bic.w	r3, r3, #1
 8003f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f42:	f7fe fc3b 	bl	80027bc <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e00a      	b.n	8003f60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fe fc37 	bl	80027bc <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d903      	bls.n	8003f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e166      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
 8003f5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f60:	4b92      	ldr	r3, [pc, #584]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1ee      	bne.n	8003f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80a4 	beq.w	80040c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b8c      	ldr	r3, [pc, #560]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b89      	ldr	r3, [pc, #548]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	4a88      	ldr	r2, [pc, #544]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f90:	6413      	str	r3, [r2, #64]	; 0x40
 8003f92:	4b86      	ldr	r3, [pc, #536]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa2:	4b83      	ldr	r3, [pc, #524]	; (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d118      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fae:	4b80      	ldr	r3, [pc, #512]	; (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7f      	ldr	r2, [pc, #508]	; (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fba:	f7fe fbff 	bl	80027bc <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fc2:	f7fe fbfb 	bl	80027bc <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b64      	cmp	r3, #100	; 0x64
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e12a      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd4:	4b76      	ldr	r3, [pc, #472]	; (80041b0 <HAL_RCC_OscConfig+0x4d4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x31a>
 8003fe8:	4b70      	ldr	r3, [pc, #448]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a6f      	ldr	r2, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	e02d      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x33c>
 8003ffe:	4b6b      	ldr	r3, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004002:	4a6a      	ldr	r2, [pc, #424]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004004:	f023 0301 	bic.w	r3, r3, #1
 8004008:	6713      	str	r3, [r2, #112]	; 0x70
 800400a:	4b68      	ldr	r3, [pc, #416]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400e:	4a67      	ldr	r2, [pc, #412]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004010:	f023 0304 	bic.w	r3, r3, #4
 8004014:	6713      	str	r3, [r2, #112]	; 0x70
 8004016:	e01c      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	2b05      	cmp	r3, #5
 800401e:	d10c      	bne.n	800403a <HAL_RCC_OscConfig+0x35e>
 8004020:	4b62      	ldr	r3, [pc, #392]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	4a61      	ldr	r2, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	6713      	str	r3, [r2, #112]	; 0x70
 800402c:	4b5f      	ldr	r3, [pc, #380]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800402e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004030:	4a5e      	ldr	r2, [pc, #376]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004032:	f043 0301 	orr.w	r3, r3, #1
 8004036:	6713      	str	r3, [r2, #112]	; 0x70
 8004038:	e00b      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
 800403a:	4b5c      	ldr	r3, [pc, #368]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5b      	ldr	r2, [pc, #364]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004040:	f023 0301 	bic.w	r3, r3, #1
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	4b59      	ldr	r3, [pc, #356]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a58      	ldr	r2, [pc, #352]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d015      	beq.n	8004086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fe fbaf 	bl	80027bc <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fe fbab 	bl	80027bc <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0d8      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004078:	4b4c      	ldr	r3, [pc, #304]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0ee      	beq.n	8004062 <HAL_RCC_OscConfig+0x386>
 8004084:	e014      	b.n	80040b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004086:	f7fe fb99 	bl	80027bc <HAL_GetTick>
 800408a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	e00a      	b.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800408e:	f7fe fb95 	bl	80027bc <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	f241 3288 	movw	r2, #5000	; 0x1388
 800409c:	4293      	cmp	r3, r2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e0c2      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a4:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ee      	bne.n	800408e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d105      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b6:	4b3d      	ldr	r3, [pc, #244]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ba:	4a3c      	ldr	r2, [pc, #240]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80ae 	beq.w	8004228 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040cc:	4b37      	ldr	r3, [pc, #220]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f003 030c 	and.w	r3, r3, #12
 80040d4:	2b08      	cmp	r3, #8
 80040d6:	d06d      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d14b      	bne.n	8004178 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e0:	4b32      	ldr	r3, [pc, #200]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a31      	ldr	r2, [pc, #196]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80040e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fe fb66 	bl	80027bc <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe fb62 	bl	80027bc <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e091      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b29      	ldr	r3, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	69da      	ldr	r2, [r3, #28]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	019b      	lsls	r3, r3, #6
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	085b      	lsrs	r3, r3, #1
 800412a:	3b01      	subs	r3, #1
 800412c:	041b      	lsls	r3, r3, #16
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	071b      	lsls	r3, r3, #28
 800413e:	491b      	ldr	r1, [pc, #108]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004144:	4b19      	ldr	r3, [pc, #100]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004150:	f7fe fb34 	bl	80027bc <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fb30 	bl	80027bc <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e05f      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	4b10      	ldr	r3, [pc, #64]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0x47c>
 8004176:	e057      	b.n	8004228 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0b      	ldr	r2, [pc, #44]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 800417e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004184:	f7fe fb1a 	bl	80027bc <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fb16 	bl	80027bc <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e045      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b03      	ldr	r3, [pc, #12]	; (80041ac <HAL_RCC_OscConfig+0x4d0>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x4b0>
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x54c>
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041b4:	4b1f      	ldr	r3, [pc, #124]	; (8004234 <HAL_RCC_OscConfig+0x558>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d030      	beq.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d129      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041da:	429a      	cmp	r2, r3
 80041dc:	d122      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041e4:	4013      	ands	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d119      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fa:	085b      	lsrs	r3, r3, #1
 80041fc:	3b01      	subs	r3, #1
 80041fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004200:	429a      	cmp	r2, r3
 8004202:	d10f      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0d0      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d910      	bls.n	8004280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 020f 	bic.w	r2, r3, #15
 8004266:	4965      	ldr	r1, [pc, #404]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0b8      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004298:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800429e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042bc:	4b50      	ldr	r3, [pc, #320]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d040      	beq.n	800435c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d115      	bne.n	800431a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e073      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06b      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4936      	ldr	r1, [pc, #216]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 8004328:	4313      	orrs	r3, r2
 800432a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432c:	f7fe fa46 	bl	80027bc <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7fe fa42 	bl	80027bc <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e053      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d210      	bcs.n	800438c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 020f 	bic.w	r2, r3, #15
 8004372:	4922      	ldr	r1, [pc, #136]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e032      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4916      	ldr	r1, [pc, #88]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ca:	f000 f821 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCC_ClockConfig+0x1cc>)
 80043dc:	5ccb      	ldrb	r3, [r1, r3]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1d0>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_ClockConfig+0x1d4>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe f8e6 	bl	80025bc <HAL_InitTick>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40023c00 	.word	0x40023c00
 8004400:	40023800 	.word	0x40023800
 8004404:	08009324 	.word	0x08009324
 8004408:	20000000 	.word	0x20000000
 800440c:	20000004 	.word	0x20000004

08004410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004414:	b094      	sub	sp, #80	; 0x50
 8004416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004418:	2300      	movs	r3, #0
 800441a:	647b      	str	r3, [r7, #68]	; 0x44
 800441c:	2300      	movs	r3, #0
 800441e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004420:	2300      	movs	r3, #0
 8004422:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004428:	4b79      	ldr	r3, [pc, #484]	; (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b08      	cmp	r3, #8
 8004432:	d00d      	beq.n	8004450 <HAL_RCC_GetSysClockFreq+0x40>
 8004434:	2b08      	cmp	r3, #8
 8004436:	f200 80e1 	bhi.w	80045fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x34>
 800443e:	2b04      	cmp	r3, #4
 8004440:	d003      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0x3a>
 8004442:	e0db      	b.n	80045fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004444:	4b73      	ldr	r3, [pc, #460]	; (8004614 <HAL_RCC_GetSysClockFreq+0x204>)
 8004446:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004448:	e0db      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800444a:	4b73      	ldr	r3, [pc, #460]	; (8004618 <HAL_RCC_GetSysClockFreq+0x208>)
 800444c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800444e:	e0d8      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004450:	4b6f      	ldr	r3, [pc, #444]	; (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004458:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800445a:	4b6d      	ldr	r3, [pc, #436]	; (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d063      	beq.n	800452e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004466:	4b6a      	ldr	r3, [pc, #424]	; (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	099b      	lsrs	r3, r3, #6
 800446c:	2200      	movs	r2, #0
 800446e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004470:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004478:	633b      	str	r3, [r7, #48]	; 0x30
 800447a:	2300      	movs	r3, #0
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004482:	4622      	mov	r2, r4
 8004484:	462b      	mov	r3, r5
 8004486:	f04f 0000 	mov.w	r0, #0
 800448a:	f04f 0100 	mov.w	r1, #0
 800448e:	0159      	lsls	r1, r3, #5
 8004490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004494:	0150      	lsls	r0, r2, #5
 8004496:	4602      	mov	r2, r0
 8004498:	460b      	mov	r3, r1
 800449a:	4621      	mov	r1, r4
 800449c:	1a51      	subs	r1, r2, r1
 800449e:	6139      	str	r1, [r7, #16]
 80044a0:	4629      	mov	r1, r5
 80044a2:	eb63 0301 	sbc.w	r3, r3, r1
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044b4:	4659      	mov	r1, fp
 80044b6:	018b      	lsls	r3, r1, #6
 80044b8:	4651      	mov	r1, sl
 80044ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044be:	4651      	mov	r1, sl
 80044c0:	018a      	lsls	r2, r1, #6
 80044c2:	4651      	mov	r1, sl
 80044c4:	ebb2 0801 	subs.w	r8, r2, r1
 80044c8:	4659      	mov	r1, fp
 80044ca:	eb63 0901 	sbc.w	r9, r3, r1
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044e2:	4690      	mov	r8, r2
 80044e4:	4699      	mov	r9, r3
 80044e6:	4623      	mov	r3, r4
 80044e8:	eb18 0303 	adds.w	r3, r8, r3
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	462b      	mov	r3, r5
 80044f0:	eb49 0303 	adc.w	r3, r9, r3
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004502:	4629      	mov	r1, r5
 8004504:	024b      	lsls	r3, r1, #9
 8004506:	4621      	mov	r1, r4
 8004508:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800450c:	4621      	mov	r1, r4
 800450e:	024a      	lsls	r2, r1, #9
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004516:	2200      	movs	r2, #0
 8004518:	62bb      	str	r3, [r7, #40]	; 0x28
 800451a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004520:	f7fb fed8 	bl	80002d4 <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4613      	mov	r3, r2
 800452a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800452c:	e058      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800452e:	4b38      	ldr	r3, [pc, #224]	; (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	099b      	lsrs	r3, r3, #6
 8004534:	2200      	movs	r2, #0
 8004536:	4618      	mov	r0, r3
 8004538:	4611      	mov	r1, r2
 800453a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800453e:	623b      	str	r3, [r7, #32]
 8004540:	2300      	movs	r3, #0
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	f04f 0000 	mov.w	r0, #0
 8004550:	f04f 0100 	mov.w	r1, #0
 8004554:	0159      	lsls	r1, r3, #5
 8004556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800455a:	0150      	lsls	r0, r2, #5
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4641      	mov	r1, r8
 8004562:	ebb2 0a01 	subs.w	sl, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb63 0b01 	sbc.w	fp, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004578:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800457c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004580:	ebb2 040a 	subs.w	r4, r2, sl
 8004584:	eb63 050b 	sbc.w	r5, r3, fp
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	00eb      	lsls	r3, r5, #3
 8004592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004596:	00e2      	lsls	r2, r4, #3
 8004598:	4614      	mov	r4, r2
 800459a:	461d      	mov	r5, r3
 800459c:	4643      	mov	r3, r8
 800459e:	18e3      	adds	r3, r4, r3
 80045a0:	603b      	str	r3, [r7, #0]
 80045a2:	464b      	mov	r3, r9
 80045a4:	eb45 0303 	adc.w	r3, r5, r3
 80045a8:	607b      	str	r3, [r7, #4]
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	f04f 0300 	mov.w	r3, #0
 80045b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80045b6:	4629      	mov	r1, r5
 80045b8:	028b      	lsls	r3, r1, #10
 80045ba:	4621      	mov	r1, r4
 80045bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045c0:	4621      	mov	r1, r4
 80045c2:	028a      	lsls	r2, r1, #10
 80045c4:	4610      	mov	r0, r2
 80045c6:	4619      	mov	r1, r3
 80045c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ca:	2200      	movs	r2, #0
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	61fa      	str	r2, [r7, #28]
 80045d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045d4:	f7fb fe7e 	bl	80002d4 <__aeabi_uldivmod>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	4613      	mov	r3, r2
 80045de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045e0:	4b0b      	ldr	r3, [pc, #44]	; (8004610 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0c1b      	lsrs	r3, r3, #16
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	3301      	adds	r3, #1
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80045f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045fa:	e002      	b.n	8004602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <HAL_RCC_GetSysClockFreq+0x204>)
 80045fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004604:	4618      	mov	r0, r3
 8004606:	3750      	adds	r7, #80	; 0x50
 8004608:	46bd      	mov	sp, r7
 800460a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	00f42400 	.word	0x00f42400
 8004618:	007a1200 	.word	0x007a1200

0800461c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_RCC_GetHCLKFreq+0x14>)
 8004622:	681b      	ldr	r3, [r3, #0]
}
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000000 	.word	0x20000000

08004634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004638:	f7ff fff0 	bl	800461c <HAL_RCC_GetHCLKFreq>
 800463c:	4602      	mov	r2, r0
 800463e:	4b05      	ldr	r3, [pc, #20]	; (8004654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	0a9b      	lsrs	r3, r3, #10
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	4903      	ldr	r1, [pc, #12]	; (8004658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800464a:	5ccb      	ldrb	r3, [r1, r3]
 800464c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40023800 	.word	0x40023800
 8004658:	08009334 	.word	0x08009334

0800465c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004660:	f7ff ffdc 	bl	800461c <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40023800 	.word	0x40023800
 8004680:	08009334 	.word	0x08009334

08004684 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	220f      	movs	r2, #15
 8004692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004694:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 0203 	and.w	r2, r3, #3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046a0:	4b0f      	ldr	r3, [pc, #60]	; (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046b8:	4b09      	ldr	r3, [pc, #36]	; (80046e0 <HAL_RCC_GetClockConfig+0x5c>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	08db      	lsrs	r3, r3, #3
 80046be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046c6:	4b07      	ldr	r3, [pc, #28]	; (80046e4 <HAL_RCC_GetClockConfig+0x60>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 020f 	and.w	r2, r3, #15
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	601a      	str	r2, [r3, #0]
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40023c00 	.word	0x40023c00

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d012      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004710:	4b69      	ldr	r3, [pc, #420]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a68      	ldr	r2, [pc, #416]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800471a:	6093      	str	r3, [r2, #8]
 800471c:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	689a      	ldr	r2, [r3, #8]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004724:	4964      	ldr	r1, [pc, #400]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	4313      	orrs	r3, r2
 8004728:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004732:	2301      	movs	r3, #1
 8004734:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d017      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004742:	4b5d      	ldr	r3, [pc, #372]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004750:	4959      	ldr	r1, [pc, #356]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004752:	4313      	orrs	r3, r2
 8004754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004760:	d101      	bne.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004762:	2301      	movs	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d017      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800477e:	4b4e      	ldr	r3, [pc, #312]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	494a      	ldr	r1, [pc, #296]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800478e:	4313      	orrs	r3, r2
 8004790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 808b 	beq.w	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b3a      	ldr	r3, [pc, #232]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d0:	4a39      	ldr	r2, [pc, #228]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6413      	str	r3, [r2, #64]	; 0x40
 80047d8:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	60bb      	str	r3, [r7, #8]
 80047e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a34      	ldr	r2, [pc, #208]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047f0:	f7fd ffe4 	bl	80027bc <HAL_GetTick>
 80047f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f8:	f7fd ffe0 	bl	80027bc <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b64      	cmp	r3, #100	; 0x64
 8004804:	d901      	bls.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e38f      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800480a:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0f0      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004816:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d035      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d02e      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800483e:	4b1e      	ldr	r3, [pc, #120]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004842:	4a1d      	ldr	r2, [pc, #116]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004848:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004854:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800485c:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b01      	cmp	r3, #1
 8004866:	d114      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd ffa8 	bl	80027bc <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486e:	e00a      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004870:	f7fd ffa4 	bl	80027bc <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	f241 3288 	movw	r2, #5000	; 0x1388
 800487e:	4293      	cmp	r3, r2
 8004880:	d901      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e351      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0ee      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800489a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800489e:	d111      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048a0:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048ae:	400b      	ands	r3, r1
 80048b0:	4901      	ldr	r1, [pc, #4]	; (80048b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	608b      	str	r3, [r1, #8]
 80048b6:	e00b      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40007000 	.word	0x40007000
 80048c0:	0ffffcff 	.word	0x0ffffcff
 80048c4:	4bac      	ldr	r3, [pc, #688]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4aab      	ldr	r2, [pc, #684]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048ce:	6093      	str	r3, [r2, #8]
 80048d0:	4ba9      	ldr	r3, [pc, #676]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048dc:	49a6      	ldr	r1, [pc, #664]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d010      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048ee:	4ba2      	ldr	r3, [pc, #648]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048f4:	4aa0      	ldr	r2, [pc, #640]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048fe:	4b9e      	ldr	r3, [pc, #632]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004908:	499b      	ldr	r1, [pc, #620]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800491c:	4b96      	ldr	r3, [pc, #600]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800492a:	4993      	ldr	r1, [pc, #588]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800493e:	4b8e      	ldr	r3, [pc, #568]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800494c:	498a      	ldr	r1, [pc, #552]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004960:	4b85      	ldr	r3, [pc, #532]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	4982      	ldr	r1, [pc, #520]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004982:	4b7d      	ldr	r3, [pc, #500]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4979      	ldr	r1, [pc, #484]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049a4:	4b74      	ldr	r3, [pc, #464]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049aa:	f023 0203 	bic.w	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	4971      	ldr	r1, [pc, #452]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049c6:	4b6c      	ldr	r3, [pc, #432]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049cc:	f023 020c 	bic.w	r2, r3, #12
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d4:	4968      	ldr	r1, [pc, #416]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00a      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049e8:	4b63      	ldr	r3, [pc, #396]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f6:	4960      	ldr	r1, [pc, #384]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a18:	4957      	ldr	r1, [pc, #348]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a2c:	4b52      	ldr	r3, [pc, #328]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3a:	494f      	ldr	r1, [pc, #316]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a4e:	4b4a      	ldr	r3, [pc, #296]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a5c:	4946      	ldr	r1, [pc, #280]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a70:	4b41      	ldr	r3, [pc, #260]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a7e:	493e      	ldr	r1, [pc, #248]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a80:	4313      	orrs	r3, r2
 8004a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa0:	4935      	ldr	r1, [pc, #212]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ab4:	4b30      	ldr	r3, [pc, #192]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac2:	492d      	ldr	r1, [pc, #180]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d011      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ad6:	4b28      	ldr	r3, [pc, #160]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004adc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae4:	4924      	ldr	r1, [pc, #144]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af4:	d101      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004af6:	2301      	movs	r3, #1
 8004af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b16:	4b18      	ldr	r3, [pc, #96]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b24:	4914      	ldr	r1, [pc, #80]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00b      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b38:	4b0f      	ldr	r3, [pc, #60]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b48:	490b      	ldr	r1, [pc, #44]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00f      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b6c:	4902      	ldr	r1, [pc, #8]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b74:	e002      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004b76:	bf00      	nop
 8004b78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b88:	4b8a      	ldr	r3, [pc, #552]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	4986      	ldr	r1, [pc, #536]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00b      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bac:	4b81      	ldr	r3, [pc, #516]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bbc:	497d      	ldr	r1, [pc, #500]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d006      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80d6 	beq.w	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004bd8:	4b76      	ldr	r3, [pc, #472]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a75      	ldr	r2, [pc, #468]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be4:	f7fd fdea 	bl	80027bc <HAL_GetTick>
 8004be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bec:	f7fd fde6 	bl	80027bc <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e195      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfe:	4b6d      	ldr	r3, [pc, #436]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d021      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c1e:	4b65      	ldr	r3, [pc, #404]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c2c:	4b61      	ldr	r3, [pc, #388]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c32:	0e1b      	lsrs	r3, r3, #24
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	019a      	lsls	r2, r3, #6
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	041b      	lsls	r3, r3, #16
 8004c44:	431a      	orrs	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	061b      	lsls	r3, r3, #24
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	071b      	lsls	r3, r3, #28
 8004c52:	4958      	ldr	r1, [pc, #352]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c54:	4313      	orrs	r3, r2
 8004c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d004      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c6e:	d00a      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02e      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c84:	d129      	bne.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c86:	4b4b      	ldr	r3, [pc, #300]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8c:	0c1b      	lsrs	r3, r3, #16
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c94:	4b47      	ldr	r3, [pc, #284]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9a:	0f1b      	lsrs	r3, r3, #28
 8004c9c:	f003 0307 	and.w	r3, r3, #7
 8004ca0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	019a      	lsls	r2, r3, #6
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	071b      	lsls	r3, r3, #28
 8004cba:	493e      	ldr	r1, [pc, #248]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cc2:	4b3c      	ldr	r3, [pc, #240]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cc8:	f023 021f 	bic.w	r2, r3, #31
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	4938      	ldr	r1, [pc, #224]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d01d      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ce6:	4b33      	ldr	r3, [pc, #204]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cec:	0e1b      	lsrs	r3, r3, #24
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004cf4:	4b2f      	ldr	r3, [pc, #188]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfa:	0f1b      	lsrs	r3, r3, #28
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	019a      	lsls	r2, r3, #6
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	041b      	lsls	r3, r3, #16
 8004d0e:	431a      	orrs	r2, r3
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	061b      	lsls	r3, r3, #24
 8004d14:	431a      	orrs	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	071b      	lsls	r3, r3, #28
 8004d1a:	4926      	ldr	r1, [pc, #152]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d011      	beq.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	019a      	lsls	r2, r3, #6
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	061b      	lsls	r3, r3, #24
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	071b      	lsls	r3, r3, #28
 8004d4a:	491a      	ldr	r1, [pc, #104]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d52:	4b18      	ldr	r3, [pc, #96]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5e:	f7fd fd2d 	bl	80027bc <HAL_GetTick>
 8004d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d66:	f7fd fd29 	bl	80027bc <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b64      	cmp	r3, #100	; 0x64
 8004d72:	d901      	bls.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e0d8      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d78:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	f040 80ce 	bne.w	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a08      	ldr	r2, [pc, #32]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd fd10 	bl	80027bc <HAL_GetTick>
 8004d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d9e:	e00b      	b.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004da0:	f7fd fd0c 	bl	80027bc <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b64      	cmp	r3, #100	; 0x64
 8004dac:	d904      	bls.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0bb      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004db8:	4b5e      	ldr	r3, [pc, #376]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dc4:	d0ec      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d02e      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d12a      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dee:	4b51      	ldr	r3, [pc, #324]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004dfc:	4b4d      	ldr	r3, [pc, #308]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	0f1b      	lsrs	r3, r3, #28
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	019a      	lsls	r2, r3, #6
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	061b      	lsls	r3, r3, #24
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	071b      	lsls	r3, r3, #28
 8004e22:	4944      	ldr	r1, [pc, #272]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e2a:	4b42      	ldr	r3, [pc, #264]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	493d      	ldr	r1, [pc, #244]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d022      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e58:	d11d      	bne.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e5a:	4b36      	ldr	r3, [pc, #216]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e60:	0e1b      	lsrs	r3, r3, #24
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e68:	4b32      	ldr	r3, [pc, #200]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6e:	0f1b      	lsrs	r3, r3, #28
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	019a      	lsls	r2, r3, #6
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	041b      	lsls	r3, r3, #16
 8004e82:	431a      	orrs	r2, r3
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	061b      	lsls	r3, r3, #24
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	071b      	lsls	r3, r3, #28
 8004e8e:	4929      	ldr	r1, [pc, #164]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d028      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004ea2:	4b24      	ldr	r3, [pc, #144]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea8:	0e1b      	lsrs	r3, r3, #24
 8004eaa:	f003 030f 	and.w	r3, r3, #15
 8004eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004eb0:	4b20      	ldr	r3, [pc, #128]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	f003 0303 	and.w	r3, r3, #3
 8004ebc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	019a      	lsls	r2, r3, #6
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	041b      	lsls	r3, r3, #16
 8004ec8:	431a      	orrs	r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	061b      	lsls	r3, r3, #24
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	071b      	lsls	r3, r3, #28
 8004ed6:	4917      	ldr	r1, [pc, #92]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ede:	4b15      	ldr	r3, [pc, #84]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	4911      	ldr	r1, [pc, #68]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004ef4:	4b0f      	ldr	r3, [pc, #60]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a0e      	ldr	r2, [pc, #56]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd fc5c 	bl	80027bc <HAL_GetTick>
 8004f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f08:	f7fd fc58 	bl	80027bc <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e007      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f26:	d1ef      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	40023800 	.word	0x40023800

08004f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e049      	b.n	8004fde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d106      	bne.n	8004f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f841 	bl	8004fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2202      	movs	r2, #2
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	4619      	mov	r1, r3
 8004f76:	4610      	mov	r0, r2
 8004f78:	f000 fa00 	bl	800537c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
	...

08004ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e054      	b.n	80050be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a26      	ldr	r2, [pc, #152]	; (80050cc <HAL_TIM_Base_Start_IT+0xd0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d022      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d01d      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1e      	ldr	r2, [pc, #120]	; (80050dc <HAL_TIM_Base_Start_IT+0xe0>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1c      	ldr	r2, [pc, #112]	; (80050e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a1b      	ldr	r2, [pc, #108]	; (80050e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d115      	bne.n	80050a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	4b19      	ldr	r3, [pc, #100]	; (80050e8 <HAL_TIM_Base_Start_IT+0xec>)
 8005084:	4013      	ands	r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b06      	cmp	r3, #6
 800508c:	d015      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0xbe>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005094:	d011      	beq.n	80050ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	e008      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	e000      	b.n	80050bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3714      	adds	r7, #20
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr
 80050ca:	bf00      	nop
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	40010400 	.word	0x40010400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40001800 	.word	0x40001800
 80050e8:	00010007 	.word	0x00010007

080050ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0202 	mvn.w	r2, #2
 8005118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f905 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8f7 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f908 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d122      	bne.n	800519c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0304 	and.w	r3, r3, #4
 8005160:	2b04      	cmp	r3, #4
 8005162:	d11b      	bne.n	800519c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0204 	mvn.w	r2, #4
 800516c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2202      	movs	r2, #2
 8005172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f8db 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8005188:	e005      	b.n	8005196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f8cd 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8de 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d122      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b08      	cmp	r3, #8
 80051b6:	d11b      	bne.n	80051f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f06f 0208 	mvn.w	r2, #8
 80051c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2204      	movs	r2, #4
 80051c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f8b1 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 80051dc:	e005      	b.n	80051ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f8a3 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f8b4 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0310 	and.w	r3, r3, #16
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0310 	and.w	r3, r3, #16
 8005208:	2b10      	cmp	r3, #16
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0210 	mvn.w	r2, #16
 8005214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2208      	movs	r2, #8
 800521a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f887 	bl	800533e <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f879 	bl	800532a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f88a 	bl	8005352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b01      	cmp	r3, #1
 800525e:	d107      	bne.n	8005270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0201 	mvn.w	r2, #1
 8005268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7fc fed4 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b80      	cmp	r3, #128	; 0x80
 800527c:	d10e      	bne.n	800529c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005288:	2b80      	cmp	r3, #128	; 0x80
 800528a:	d107      	bne.n	800529c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f91a 	bl	80054d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691b      	ldr	r3, [r3, #16]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052aa:	d10e      	bne.n	80052ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b6:	2b80      	cmp	r3, #128	; 0x80
 80052b8:	d107      	bne.n	80052ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f90d 	bl	80054e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	d10e      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e2:	2b40      	cmp	r3, #64	; 0x40
 80052e4:	d107      	bne.n	80052f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f838 	bl	8005366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f003 0320 	and.w	r3, r3, #32
 8005300:	2b20      	cmp	r3, #32
 8005302:	d10e      	bne.n	8005322 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b20      	cmp	r3, #32
 8005310:	d107      	bne.n	8005322 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f06f 0220 	mvn.w	r2, #32
 800531a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f8cd 	bl	80054bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a40      	ldr	r2, [pc, #256]	; (8005490 <TIM_Base_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539a:	d00f      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a3d      	ldr	r2, [pc, #244]	; (8005494 <TIM_Base_SetConfig+0x118>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a3c      	ldr	r2, [pc, #240]	; (8005498 <TIM_Base_SetConfig+0x11c>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a3b      	ldr	r2, [pc, #236]	; (800549c <TIM_Base_SetConfig+0x120>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0x40>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a3a      	ldr	r2, [pc, #232]	; (80054a0 <TIM_Base_SetConfig+0x124>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d108      	bne.n	80053ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <TIM_Base_SetConfig+0x114>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d02b      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d027      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a2c      	ldr	r2, [pc, #176]	; (8005494 <TIM_Base_SetConfig+0x118>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d023      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a2b      	ldr	r2, [pc, #172]	; (8005498 <TIM_Base_SetConfig+0x11c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d01f      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a2a      	ldr	r2, [pc, #168]	; (800549c <TIM_Base_SetConfig+0x120>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d01b      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a29      	ldr	r2, [pc, #164]	; (80054a0 <TIM_Base_SetConfig+0x124>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d017      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a28      	ldr	r2, [pc, #160]	; (80054a4 <TIM_Base_SetConfig+0x128>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a27      	ldr	r2, [pc, #156]	; (80054a8 <TIM_Base_SetConfig+0x12c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00f      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a26      	ldr	r2, [pc, #152]	; (80054ac <TIM_Base_SetConfig+0x130>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00b      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <TIM_Base_SetConfig+0x134>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d007      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a24      	ldr	r2, [pc, #144]	; (80054b4 <TIM_Base_SetConfig+0x138>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d003      	beq.n	800542e <TIM_Base_SetConfig+0xb2>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a23      	ldr	r2, [pc, #140]	; (80054b8 <TIM_Base_SetConfig+0x13c>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d108      	bne.n	8005440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a0a      	ldr	r2, [pc, #40]	; (8005490 <TIM_Base_SetConfig+0x114>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d003      	beq.n	8005474 <TIM_Base_SetConfig+0xf8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a0c      	ldr	r2, [pc, #48]	; (80054a0 <TIM_Base_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d103      	bne.n	800547c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	691a      	ldr	r2, [r3, #16]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	615a      	str	r2, [r3, #20]
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40010000 	.word	0x40010000
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40010400 	.word	0x40010400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	40014400 	.word	0x40014400
 80054ac:	40014800 	.word	0x40014800
 80054b0:	40001800 	.word	0x40001800
 80054b4:	40001c00 	.word	0x40001c00
 80054b8:	40002000 	.word	0x40002000

080054bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e040      	b.n	800558c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d106      	bne.n	8005520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f7fc fe74 	bl	8002208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2224      	movs	r2, #36	; 0x24
 8005524:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0201 	bic.w	r2, r2, #1
 8005534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f82c 	bl	8005594 <UART_SetConfig>
 800553c:	4603      	mov	r3, r0
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e022      	b.n	800558c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 fa84 	bl	8005a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689a      	ldr	r2, [r3, #8]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 fb0b 	bl	8005ba0 <UART_CheckIdleState>
 800558a:	4603      	mov	r3, r0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3708      	adds	r7, #8
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	69db      	ldr	r3, [r3, #28]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4ba6      	ldr	r3, [pc, #664]	; (8005858 <UART_SetConfig+0x2c4>)
 80055c0:	4013      	ands	r3, r2
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6812      	ldr	r2, [r2, #0]
 80055c6:	6979      	ldr	r1, [r7, #20]
 80055c8:	430b      	orrs	r3, r1
 80055ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	697a      	ldr	r2, [r7, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	430a      	orrs	r2, r1
 8005604:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a94      	ldr	r2, [pc, #592]	; (800585c <UART_SetConfig+0x2c8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d120      	bne.n	8005652 <UART_SetConfig+0xbe>
 8005610:	4b93      	ldr	r3, [pc, #588]	; (8005860 <UART_SetConfig+0x2cc>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b03      	cmp	r3, #3
 800561c:	d816      	bhi.n	800564c <UART_SetConfig+0xb8>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <UART_SetConfig+0x90>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005635 	.word	0x08005635
 8005628:	08005641 	.word	0x08005641
 800562c:	0800563b 	.word	0x0800563b
 8005630:	08005647 	.word	0x08005647
 8005634:	2301      	movs	r3, #1
 8005636:	77fb      	strb	r3, [r7, #31]
 8005638:	e150      	b.n	80058dc <UART_SetConfig+0x348>
 800563a:	2302      	movs	r3, #2
 800563c:	77fb      	strb	r3, [r7, #31]
 800563e:	e14d      	b.n	80058dc <UART_SetConfig+0x348>
 8005640:	2304      	movs	r3, #4
 8005642:	77fb      	strb	r3, [r7, #31]
 8005644:	e14a      	b.n	80058dc <UART_SetConfig+0x348>
 8005646:	2308      	movs	r3, #8
 8005648:	77fb      	strb	r3, [r7, #31]
 800564a:	e147      	b.n	80058dc <UART_SetConfig+0x348>
 800564c:	2310      	movs	r3, #16
 800564e:	77fb      	strb	r3, [r7, #31]
 8005650:	e144      	b.n	80058dc <UART_SetConfig+0x348>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a83      	ldr	r2, [pc, #524]	; (8005864 <UART_SetConfig+0x2d0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d132      	bne.n	80056c2 <UART_SetConfig+0x12e>
 800565c:	4b80      	ldr	r3, [pc, #512]	; (8005860 <UART_SetConfig+0x2cc>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f003 030c 	and.w	r3, r3, #12
 8005666:	2b0c      	cmp	r3, #12
 8005668:	d828      	bhi.n	80056bc <UART_SetConfig+0x128>
 800566a:	a201      	add	r2, pc, #4	; (adr r2, 8005670 <UART_SetConfig+0xdc>)
 800566c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005670:	080056a5 	.word	0x080056a5
 8005674:	080056bd 	.word	0x080056bd
 8005678:	080056bd 	.word	0x080056bd
 800567c:	080056bd 	.word	0x080056bd
 8005680:	080056b1 	.word	0x080056b1
 8005684:	080056bd 	.word	0x080056bd
 8005688:	080056bd 	.word	0x080056bd
 800568c:	080056bd 	.word	0x080056bd
 8005690:	080056ab 	.word	0x080056ab
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056bd 	.word	0x080056bd
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056b7 	.word	0x080056b7
 80056a4:	2300      	movs	r3, #0
 80056a6:	77fb      	strb	r3, [r7, #31]
 80056a8:	e118      	b.n	80058dc <UART_SetConfig+0x348>
 80056aa:	2302      	movs	r3, #2
 80056ac:	77fb      	strb	r3, [r7, #31]
 80056ae:	e115      	b.n	80058dc <UART_SetConfig+0x348>
 80056b0:	2304      	movs	r3, #4
 80056b2:	77fb      	strb	r3, [r7, #31]
 80056b4:	e112      	b.n	80058dc <UART_SetConfig+0x348>
 80056b6:	2308      	movs	r3, #8
 80056b8:	77fb      	strb	r3, [r7, #31]
 80056ba:	e10f      	b.n	80058dc <UART_SetConfig+0x348>
 80056bc:	2310      	movs	r3, #16
 80056be:	77fb      	strb	r3, [r7, #31]
 80056c0:	e10c      	b.n	80058dc <UART_SetConfig+0x348>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a68      	ldr	r2, [pc, #416]	; (8005868 <UART_SetConfig+0x2d4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d120      	bne.n	800570e <UART_SetConfig+0x17a>
 80056cc:	4b64      	ldr	r3, [pc, #400]	; (8005860 <UART_SetConfig+0x2cc>)
 80056ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80056d6:	2b30      	cmp	r3, #48	; 0x30
 80056d8:	d013      	beq.n	8005702 <UART_SetConfig+0x16e>
 80056da:	2b30      	cmp	r3, #48	; 0x30
 80056dc:	d814      	bhi.n	8005708 <UART_SetConfig+0x174>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d009      	beq.n	80056f6 <UART_SetConfig+0x162>
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d810      	bhi.n	8005708 <UART_SetConfig+0x174>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <UART_SetConfig+0x15c>
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d006      	beq.n	80056fc <UART_SetConfig+0x168>
 80056ee:	e00b      	b.n	8005708 <UART_SetConfig+0x174>
 80056f0:	2300      	movs	r3, #0
 80056f2:	77fb      	strb	r3, [r7, #31]
 80056f4:	e0f2      	b.n	80058dc <UART_SetConfig+0x348>
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
 80056fa:	e0ef      	b.n	80058dc <UART_SetConfig+0x348>
 80056fc:	2304      	movs	r3, #4
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e0ec      	b.n	80058dc <UART_SetConfig+0x348>
 8005702:	2308      	movs	r3, #8
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e0e9      	b.n	80058dc <UART_SetConfig+0x348>
 8005708:	2310      	movs	r3, #16
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e0e6      	b.n	80058dc <UART_SetConfig+0x348>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a56      	ldr	r2, [pc, #344]	; (800586c <UART_SetConfig+0x2d8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d120      	bne.n	800575a <UART_SetConfig+0x1c6>
 8005718:	4b51      	ldr	r3, [pc, #324]	; (8005860 <UART_SetConfig+0x2cc>)
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005722:	2bc0      	cmp	r3, #192	; 0xc0
 8005724:	d013      	beq.n	800574e <UART_SetConfig+0x1ba>
 8005726:	2bc0      	cmp	r3, #192	; 0xc0
 8005728:	d814      	bhi.n	8005754 <UART_SetConfig+0x1c0>
 800572a:	2b80      	cmp	r3, #128	; 0x80
 800572c:	d009      	beq.n	8005742 <UART_SetConfig+0x1ae>
 800572e:	2b80      	cmp	r3, #128	; 0x80
 8005730:	d810      	bhi.n	8005754 <UART_SetConfig+0x1c0>
 8005732:	2b00      	cmp	r3, #0
 8005734:	d002      	beq.n	800573c <UART_SetConfig+0x1a8>
 8005736:	2b40      	cmp	r3, #64	; 0x40
 8005738:	d006      	beq.n	8005748 <UART_SetConfig+0x1b4>
 800573a:	e00b      	b.n	8005754 <UART_SetConfig+0x1c0>
 800573c:	2300      	movs	r3, #0
 800573e:	77fb      	strb	r3, [r7, #31]
 8005740:	e0cc      	b.n	80058dc <UART_SetConfig+0x348>
 8005742:	2302      	movs	r3, #2
 8005744:	77fb      	strb	r3, [r7, #31]
 8005746:	e0c9      	b.n	80058dc <UART_SetConfig+0x348>
 8005748:	2304      	movs	r3, #4
 800574a:	77fb      	strb	r3, [r7, #31]
 800574c:	e0c6      	b.n	80058dc <UART_SetConfig+0x348>
 800574e:	2308      	movs	r3, #8
 8005750:	77fb      	strb	r3, [r7, #31]
 8005752:	e0c3      	b.n	80058dc <UART_SetConfig+0x348>
 8005754:	2310      	movs	r3, #16
 8005756:	77fb      	strb	r3, [r7, #31]
 8005758:	e0c0      	b.n	80058dc <UART_SetConfig+0x348>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a44      	ldr	r2, [pc, #272]	; (8005870 <UART_SetConfig+0x2dc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d125      	bne.n	80057b0 <UART_SetConfig+0x21c>
 8005764:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <UART_SetConfig+0x2cc>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800576e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005772:	d017      	beq.n	80057a4 <UART_SetConfig+0x210>
 8005774:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005778:	d817      	bhi.n	80057aa <UART_SetConfig+0x216>
 800577a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800577e:	d00b      	beq.n	8005798 <UART_SetConfig+0x204>
 8005780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005784:	d811      	bhi.n	80057aa <UART_SetConfig+0x216>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <UART_SetConfig+0x1fe>
 800578a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800578e:	d006      	beq.n	800579e <UART_SetConfig+0x20a>
 8005790:	e00b      	b.n	80057aa <UART_SetConfig+0x216>
 8005792:	2300      	movs	r3, #0
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e0a1      	b.n	80058dc <UART_SetConfig+0x348>
 8005798:	2302      	movs	r3, #2
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e09e      	b.n	80058dc <UART_SetConfig+0x348>
 800579e:	2304      	movs	r3, #4
 80057a0:	77fb      	strb	r3, [r7, #31]
 80057a2:	e09b      	b.n	80058dc <UART_SetConfig+0x348>
 80057a4:	2308      	movs	r3, #8
 80057a6:	77fb      	strb	r3, [r7, #31]
 80057a8:	e098      	b.n	80058dc <UART_SetConfig+0x348>
 80057aa:	2310      	movs	r3, #16
 80057ac:	77fb      	strb	r3, [r7, #31]
 80057ae:	e095      	b.n	80058dc <UART_SetConfig+0x348>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <UART_SetConfig+0x2e0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d125      	bne.n	8005806 <UART_SetConfig+0x272>
 80057ba:	4b29      	ldr	r3, [pc, #164]	; (8005860 <UART_SetConfig+0x2cc>)
 80057bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80057c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057c8:	d017      	beq.n	80057fa <UART_SetConfig+0x266>
 80057ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80057ce:	d817      	bhi.n	8005800 <UART_SetConfig+0x26c>
 80057d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d4:	d00b      	beq.n	80057ee <UART_SetConfig+0x25a>
 80057d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057da:	d811      	bhi.n	8005800 <UART_SetConfig+0x26c>
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <UART_SetConfig+0x254>
 80057e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057e4:	d006      	beq.n	80057f4 <UART_SetConfig+0x260>
 80057e6:	e00b      	b.n	8005800 <UART_SetConfig+0x26c>
 80057e8:	2301      	movs	r3, #1
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e076      	b.n	80058dc <UART_SetConfig+0x348>
 80057ee:	2302      	movs	r3, #2
 80057f0:	77fb      	strb	r3, [r7, #31]
 80057f2:	e073      	b.n	80058dc <UART_SetConfig+0x348>
 80057f4:	2304      	movs	r3, #4
 80057f6:	77fb      	strb	r3, [r7, #31]
 80057f8:	e070      	b.n	80058dc <UART_SetConfig+0x348>
 80057fa:	2308      	movs	r3, #8
 80057fc:	77fb      	strb	r3, [r7, #31]
 80057fe:	e06d      	b.n	80058dc <UART_SetConfig+0x348>
 8005800:	2310      	movs	r3, #16
 8005802:	77fb      	strb	r3, [r7, #31]
 8005804:	e06a      	b.n	80058dc <UART_SetConfig+0x348>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <UART_SetConfig+0x2e4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d138      	bne.n	8005882 <UART_SetConfig+0x2ee>
 8005810:	4b13      	ldr	r3, [pc, #76]	; (8005860 <UART_SetConfig+0x2cc>)
 8005812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005816:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800581a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800581e:	d017      	beq.n	8005850 <UART_SetConfig+0x2bc>
 8005820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005824:	d82a      	bhi.n	800587c <UART_SetConfig+0x2e8>
 8005826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800582a:	d00b      	beq.n	8005844 <UART_SetConfig+0x2b0>
 800582c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005830:	d824      	bhi.n	800587c <UART_SetConfig+0x2e8>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d003      	beq.n	800583e <UART_SetConfig+0x2aa>
 8005836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800583a:	d006      	beq.n	800584a <UART_SetConfig+0x2b6>
 800583c:	e01e      	b.n	800587c <UART_SetConfig+0x2e8>
 800583e:	2300      	movs	r3, #0
 8005840:	77fb      	strb	r3, [r7, #31]
 8005842:	e04b      	b.n	80058dc <UART_SetConfig+0x348>
 8005844:	2302      	movs	r3, #2
 8005846:	77fb      	strb	r3, [r7, #31]
 8005848:	e048      	b.n	80058dc <UART_SetConfig+0x348>
 800584a:	2304      	movs	r3, #4
 800584c:	77fb      	strb	r3, [r7, #31]
 800584e:	e045      	b.n	80058dc <UART_SetConfig+0x348>
 8005850:	2308      	movs	r3, #8
 8005852:	77fb      	strb	r3, [r7, #31]
 8005854:	e042      	b.n	80058dc <UART_SetConfig+0x348>
 8005856:	bf00      	nop
 8005858:	efff69f3 	.word	0xefff69f3
 800585c:	40011000 	.word	0x40011000
 8005860:	40023800 	.word	0x40023800
 8005864:	40004400 	.word	0x40004400
 8005868:	40004800 	.word	0x40004800
 800586c:	40004c00 	.word	0x40004c00
 8005870:	40005000 	.word	0x40005000
 8005874:	40011400 	.word	0x40011400
 8005878:	40007800 	.word	0x40007800
 800587c:	2310      	movs	r3, #16
 800587e:	77fb      	strb	r3, [r7, #31]
 8005880:	e02c      	b.n	80058dc <UART_SetConfig+0x348>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a72      	ldr	r2, [pc, #456]	; (8005a50 <UART_SetConfig+0x4bc>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d125      	bne.n	80058d8 <UART_SetConfig+0x344>
 800588c:	4b71      	ldr	r3, [pc, #452]	; (8005a54 <UART_SetConfig+0x4c0>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005896:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800589a:	d017      	beq.n	80058cc <UART_SetConfig+0x338>
 800589c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80058a0:	d817      	bhi.n	80058d2 <UART_SetConfig+0x33e>
 80058a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a6:	d00b      	beq.n	80058c0 <UART_SetConfig+0x32c>
 80058a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ac:	d811      	bhi.n	80058d2 <UART_SetConfig+0x33e>
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <UART_SetConfig+0x326>
 80058b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058b6:	d006      	beq.n	80058c6 <UART_SetConfig+0x332>
 80058b8:	e00b      	b.n	80058d2 <UART_SetConfig+0x33e>
 80058ba:	2300      	movs	r3, #0
 80058bc:	77fb      	strb	r3, [r7, #31]
 80058be:	e00d      	b.n	80058dc <UART_SetConfig+0x348>
 80058c0:	2302      	movs	r3, #2
 80058c2:	77fb      	strb	r3, [r7, #31]
 80058c4:	e00a      	b.n	80058dc <UART_SetConfig+0x348>
 80058c6:	2304      	movs	r3, #4
 80058c8:	77fb      	strb	r3, [r7, #31]
 80058ca:	e007      	b.n	80058dc <UART_SetConfig+0x348>
 80058cc:	2308      	movs	r3, #8
 80058ce:	77fb      	strb	r3, [r7, #31]
 80058d0:	e004      	b.n	80058dc <UART_SetConfig+0x348>
 80058d2:	2310      	movs	r3, #16
 80058d4:	77fb      	strb	r3, [r7, #31]
 80058d6:	e001      	b.n	80058dc <UART_SetConfig+0x348>
 80058d8:	2310      	movs	r3, #16
 80058da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69db      	ldr	r3, [r3, #28]
 80058e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e4:	d15b      	bne.n	800599e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80058e6:	7ffb      	ldrb	r3, [r7, #31]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d828      	bhi.n	800593e <UART_SetConfig+0x3aa>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x360>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	0800593f 	.word	0x0800593f
 8005904:	0800592f 	.word	0x0800592f
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800593f 	.word	0x0800593f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fe fe8c 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 800591c:	61b8      	str	r0, [r7, #24]
        break;
 800591e:	e013      	b.n	8005948 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fe9c 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 8005924:	61b8      	str	r0, [r7, #24]
        break;
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b4b      	ldr	r3, [pc, #300]	; (8005a58 <UART_SetConfig+0x4c4>)
 800592a:	61bb      	str	r3, [r7, #24]
        break;
 800592c:	e00c      	b.n	8005948 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fe fd6f 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 8005932:	61b8      	str	r0, [r7, #24]
        break;
 8005934:	e008      	b.n	8005948 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	61bb      	str	r3, [r7, #24]
        break;
 800593c:	e004      	b.n	8005948 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	77bb      	strb	r3, [r7, #30]
        break;
 8005946:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d074      	beq.n	8005a38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	005a      	lsls	r2, r3, #1
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	085b      	lsrs	r3, r3, #1
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	2b0f      	cmp	r3, #15
 8005968:	d916      	bls.n	8005998 <UART_SetConfig+0x404>
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005970:	d212      	bcs.n	8005998 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f023 030f 	bic.w	r3, r3, #15
 800597a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	085b      	lsrs	r3, r3, #1
 8005980:	b29b      	uxth	r3, r3
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	b29a      	uxth	r2, r3
 8005988:	89fb      	ldrh	r3, [r7, #14]
 800598a:	4313      	orrs	r3, r2
 800598c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	89fa      	ldrh	r2, [r7, #14]
 8005994:	60da      	str	r2, [r3, #12]
 8005996:	e04f      	b.n	8005a38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	77bb      	strb	r3, [r7, #30]
 800599c:	e04c      	b.n	8005a38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800599e:	7ffb      	ldrb	r3, [r7, #31]
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d828      	bhi.n	80059f6 <UART_SetConfig+0x462>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <UART_SetConfig+0x418>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059f7 	.word	0x080059f7
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059f7 	.word	0x080059f7
 80059c4:	080059f7 	.word	0x080059f7
 80059c8:	080059f7 	.word	0x080059f7
 80059cc:	080059ef 	.word	0x080059ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059d0:	f7fe fe30 	bl	8004634 <HAL_RCC_GetPCLK1Freq>
 80059d4:	61b8      	str	r0, [r7, #24]
        break;
 80059d6:	e013      	b.n	8005a00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059d8:	f7fe fe40 	bl	800465c <HAL_RCC_GetPCLK2Freq>
 80059dc:	61b8      	str	r0, [r7, #24]
        break;
 80059de:	e00f      	b.n	8005a00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <UART_SetConfig+0x4c4>)
 80059e2:	61bb      	str	r3, [r7, #24]
        break;
 80059e4:	e00c      	b.n	8005a00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059e6:	f7fe fd13 	bl	8004410 <HAL_RCC_GetSysClockFreq>
 80059ea:	61b8      	str	r0, [r7, #24]
        break;
 80059ec:	e008      	b.n	8005a00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059f2:	61bb      	str	r3, [r7, #24]
        break;
 80059f4:	e004      	b.n	8005a00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80059f6:	2300      	movs	r3, #0
 80059f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	77bb      	strb	r3, [r7, #30]
        break;
 80059fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d018      	beq.n	8005a38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	085a      	lsrs	r2, r3, #1
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	441a      	add	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b0f      	cmp	r3, #15
 8005a1e:	d909      	bls.n	8005a34 <UART_SetConfig+0x4a0>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a26:	d205      	bcs.n	8005a34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	60da      	str	r2, [r3, #12]
 8005a32:	e001      	b.n	8005a38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a44:	7fbb      	ldrb	r3, [r7, #30]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40007c00 	.word	0x40007c00
 8005a54:	40023800 	.word	0x40023800
 8005a58:	00f42400 	.word	0x00f42400

08005a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aac:	f003 0304 	and.w	r3, r3, #4
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ace:	f003 0308 	and.w	r3, r3, #8
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	f003 0320 	and.w	r3, r3, #32
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b5a:	d10a      	bne.n	8005b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	605a      	str	r2, [r3, #4]
  }
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005bb0:	f7fc fe04 	bl	80027bc <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d10e      	bne.n	8005be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f000 f831 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e027      	b.n	8005c32 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d10e      	bne.n	8005c0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f81b 	bl	8005c3a <UART_WaitOnFlagUntilTimeout>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e011      	b.n	8005c32 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2220      	movs	r2, #32
 8005c12:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2220      	movs	r2, #32
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b09c      	sub	sp, #112	; 0x70
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c4a:	e0a7      	b.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c52:	f000 80a3 	beq.w	8005d9c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c56:	f7fc fdb1 	bl	80027bc <HAL_GetTick>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d302      	bcc.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x32>
 8005c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d13f      	bne.n	8005cec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c80:	667b      	str	r3, [r7, #100]	; 0x64
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c8c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005c90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e6      	bne.n	8005c6c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ca8:	e853 3f00 	ldrex	r3, [r3]
 8005cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb0:	f023 0301 	bic.w	r3, r3, #1
 8005cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3308      	adds	r3, #8
 8005cbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005cbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8005cc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005cc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cc6:	e841 2300 	strex	r3, r2, [r1]
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d1e5      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e068      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0304 	and.w	r3, r3, #4
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d050      	beq.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d08:	d148      	bne.n	8005d9c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d32:	637b      	str	r3, [r7, #52]	; 0x34
 8005d34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e6      	bne.n	8005d14 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	613b      	str	r3, [r7, #16]
   return(result);
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f023 0301 	bic.w	r3, r3, #1
 8005d5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d66:	623a      	str	r2, [r7, #32]
 8005d68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	69f9      	ldr	r1, [r7, #28]
 8005d6c:	6a3a      	ldr	r2, [r7, #32]
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2220      	movs	r2, #32
 8005d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	e010      	b.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	69da      	ldr	r2, [r3, #28]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	4013      	ands	r3, r2
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	bf0c      	ite	eq
 8005dac:	2301      	moveq	r3, #1
 8005dae:	2300      	movne	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	461a      	mov	r2, r3
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	f43f af48 	beq.w	8005c4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3770      	adds	r7, #112	; 0x70
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005dc8:	b084      	sub	sp, #16
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
 8005dd2:	f107 001c 	add.w	r0, r7, #28
 8005dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d120      	bne.n	8005e22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68da      	ldr	r2, [r3, #12]
 8005df0:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <USB_CoreInit+0xac>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	d105      	bne.n	8005e16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 fa96 	bl	8006348 <USB_CoreReset>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	73fb      	strb	r3, [r7, #15]
 8005e20:	e010      	b.n	8005e44 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa8a 	bl	8006348 <USB_CoreReset>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d10b      	bne.n	8005e62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f043 0206 	orr.w	r2, r3, #6
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	f043 0220 	orr.w	r2, r3, #32
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e6e:	b004      	add	sp, #16
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	ffbdffbf 	.word	0xffbdffbf

08005e78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f023 0201 	bic.w	r2, r3, #1
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d115      	bne.n	8005ee8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ec8:	2001      	movs	r0, #1
 8005eca:	f7fc fc83 	bl	80027d4 <HAL_Delay>
      ms++;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fa29 	bl	800632c <USB_GetMode>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d01e      	beq.n	8005f1e <USB_SetCurrentMode+0x84>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b31      	cmp	r3, #49	; 0x31
 8005ee4:	d9f0      	bls.n	8005ec8 <USB_SetCurrentMode+0x2e>
 8005ee6:	e01a      	b.n	8005f1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ee8:	78fb      	ldrb	r3, [r7, #3]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d115      	bne.n	8005f1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005efa:	2001      	movs	r0, #1
 8005efc:	f7fc fc6a 	bl	80027d4 <HAL_Delay>
      ms++;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fa10 	bl	800632c <USB_GetMode>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d005      	beq.n	8005f1e <USB_SetCurrentMode+0x84>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2b31      	cmp	r3, #49	; 0x31
 8005f16:	d9f0      	bls.n	8005efa <USB_SetCurrentMode+0x60>
 8005f18:	e001      	b.n	8005f1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e005      	b.n	8005f2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2b32      	cmp	r3, #50	; 0x32
 8005f22:	d101      	bne.n	8005f28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f34:	b084      	sub	sp, #16
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b086      	sub	sp, #24
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005f42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f46:	2300      	movs	r3, #0
 8005f48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	e009      	b.n	8005f68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3340      	adds	r3, #64	; 0x40
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	2200      	movs	r2, #0
 8005f60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	3301      	adds	r3, #1
 8005f66:	613b      	str	r3, [r7, #16]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b0e      	cmp	r3, #14
 8005f6c:	d9f2      	bls.n	8005f54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d11c      	bne.n	8005fae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	68fa      	ldr	r2, [r7, #12]
 8005f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f82:	f043 0302 	orr.w	r3, r3, #2
 8005f86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	e005      	b.n	8005fba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fcc:	4619      	mov	r1, r3
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	680b      	ldr	r3, [r1, #0]
 8005fd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d10c      	bne.n	8005ffa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d104      	bne.n	8005ff0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f965 	bl	80062b8 <USB_SetDevSpeed>
 8005fee:	e008      	b.n	8006002 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f960 	bl	80062b8 <USB_SetDevSpeed>
 8005ff8:	e003      	b.n	8006002 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ffa:	2103      	movs	r1, #3
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f95b 	bl	80062b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006002:	2110      	movs	r1, #16
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 f8f3 	bl	80061f0 <USB_FlushTxFifo>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d001      	beq.n	8006014 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f91f 	bl	8006258 <USB_FlushRxFifo>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602a:	461a      	mov	r2, r3
 800602c:	2300      	movs	r3, #0
 800602e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	461a      	mov	r2, r3
 8006038:	2300      	movs	r3, #0
 800603a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006042:	461a      	mov	r2, r3
 8006044:	2300      	movs	r3, #0
 8006046:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006048:	2300      	movs	r3, #0
 800604a:	613b      	str	r3, [r7, #16]
 800604c:	e043      	b.n	80060d6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	015a      	lsls	r2, r3, #5
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4413      	add	r3, r2
 8006056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006060:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006064:	d118      	bne.n	8006098 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10a      	bne.n	8006082 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006078:	461a      	mov	r2, r3
 800607a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e013      	b.n	80060aa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	461a      	mov	r2, r3
 8006090:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	e008      	b.n	80060aa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	015a      	lsls	r2, r3, #5
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	4413      	add	r3, r2
 80060a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b6:	461a      	mov	r2, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	461a      	mov	r2, r3
 80060ca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060ce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d8:	693a      	ldr	r2, [r7, #16]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d3b7      	bcc.n	800604e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060de:	2300      	movs	r3, #0
 80060e0:	613b      	str	r3, [r7, #16]
 80060e2:	e043      	b.n	800616c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fa:	d118      	bne.n	800612e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610e:	461a      	mov	r2, r3
 8006110:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006114:	6013      	str	r3, [r2, #0]
 8006116:	e013      	b.n	8006140 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006124:	461a      	mov	r2, r3
 8006126:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	e008      	b.n	8006140 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	461a      	mov	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	015a      	lsls	r2, r3, #5
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614c:	461a      	mov	r2, r3
 800614e:	2300      	movs	r3, #0
 8006150:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4413      	add	r3, r2
 800615a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615e:	461a      	mov	r2, r3
 8006160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006164:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3301      	adds	r3, #1
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	429a      	cmp	r2, r3
 8006172:	d3b7      	bcc.n	80060e4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	68fa      	ldr	r2, [r7, #12]
 800617e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006186:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006194:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	2b00      	cmp	r3, #0
 800619a:	d105      	bne.n	80061a8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	699b      	ldr	r3, [r3, #24]
 80061a0:	f043 0210 	orr.w	r2, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	699a      	ldr	r2, [r3, #24]
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <USB_DevInit+0x2b4>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80061b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d005      	beq.n	80061c6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f043 0208 	orr.w	r2, r3, #8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d105      	bne.n	80061d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	699a      	ldr	r2, [r3, #24]
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <USB_DevInit+0x2b8>)
 80061d2:	4313      	orrs	r3, r2
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061e4:	b004      	add	sp, #16
 80061e6:	4770      	bx	lr
 80061e8:	803c3800 	.word	0x803c3800
 80061ec:	40000004 	.word	0x40000004

080061f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3301      	adds	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4a13      	ldr	r2, [pc, #76]	; (8006254 <USB_FlushTxFifo+0x64>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d901      	bls.n	8006210 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e01b      	b.n	8006248 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	daf2      	bge.n	80061fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	019b      	lsls	r3, r3, #6
 8006220:	f043 0220 	orr.w	r2, r3, #32
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3301      	adds	r3, #1
 800622c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a08      	ldr	r2, [pc, #32]	; (8006254 <USB_FlushTxFifo+0x64>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e006      	b.n	8006248 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b20      	cmp	r3, #32
 8006244:	d0f0      	beq.n	8006228 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3714      	adds	r7, #20
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr
 8006254:	00030d40 	.word	0x00030d40

08006258 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3301      	adds	r3, #1
 8006268:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a11      	ldr	r2, [pc, #68]	; (80062b4 <USB_FlushRxFifo+0x5c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d901      	bls.n	8006276 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e018      	b.n	80062a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	daf2      	bge.n	8006264 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2210      	movs	r2, #16
 8006286:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	4a08      	ldr	r2, [pc, #32]	; (80062b4 <USB_FlushRxFifo+0x5c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d901      	bls.n	800629a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e006      	b.n	80062a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d0f0      	beq.n	8006288 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80062a6:	2300      	movs	r3, #0
}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3714      	adds	r7, #20
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	00030d40 	.word	0x00030d40

080062b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	68f9      	ldr	r1, [r7, #12]
 80062d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062d8:	4313      	orrs	r3, r2
 80062da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006304:	f023 0303 	bic.w	r3, r3, #3
 8006308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006318:	f043 0302 	orr.w	r3, r3, #2
 800631c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr

0800632c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0301 	and.w	r3, r3, #1
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	3301      	adds	r3, #1
 8006358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a13      	ldr	r2, [pc, #76]	; (80063ac <USB_CoreReset+0x64>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d901      	bls.n	8006366 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e01b      	b.n	800639e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	daf2      	bge.n	8006354 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f043 0201 	orr.w	r2, r3, #1
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3301      	adds	r3, #1
 8006382:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a09      	ldr	r2, [pc, #36]	; (80063ac <USB_CoreReset+0x64>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d901      	bls.n	8006390 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e006      	b.n	800639e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d0f0      	beq.n	800637e <USB_CoreReset+0x36>

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	00030d40 	.word	0x00030d40

080063b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80063b4:	bf00      	nop
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
	...

080063c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063c6:	f3ef 8305 	mrs	r3, IPSR
 80063ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80063cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063d2:	f3ef 8310 	mrs	r3, PRIMASK
 80063d6:	607b      	str	r3, [r7, #4]
  return(result);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063de:	f3ef 8311 	mrs	r3, BASEPRI
 80063e2:	603b      	str	r3, [r7, #0]
  return(result);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <osKernelInitialize+0x3a>
 80063ea:	4b0e      	ldr	r3, [pc, #56]	; (8006424 <osKernelInitialize+0x64>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d103      	bne.n	80063fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80063f2:	f06f 0305 	mvn.w	r3, #5
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e00c      	b.n	8006414 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063fa:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <osKernelInitialize+0x64>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d105      	bne.n	800640e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006402:	4b08      	ldr	r3, [pc, #32]	; (8006424 <osKernelInitialize+0x64>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
 800640c:	e002      	b.n	8006414 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800640e:	f04f 33ff 	mov.w	r3, #4294967295
 8006412:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006414:	68fb      	ldr	r3, [r7, #12]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	2000148c 	.word	0x2000148c

08006428 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800642e:	f3ef 8305 	mrs	r3, IPSR
 8006432:	60bb      	str	r3, [r7, #8]
  return(result);
 8006434:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10f      	bne.n	800645a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643a:	f3ef 8310 	mrs	r3, PRIMASK
 800643e:	607b      	str	r3, [r7, #4]
  return(result);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d105      	bne.n	8006452 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006446:	f3ef 8311 	mrs	r3, BASEPRI
 800644a:	603b      	str	r3, [r7, #0]
  return(result);
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <osKernelStart+0x3a>
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <osKernelStart+0x68>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d103      	bne.n	8006462 <osKernelStart+0x3a>
    stat = osErrorISR;
 800645a:	f06f 0305 	mvn.w	r3, #5
 800645e:	60fb      	str	r3, [r7, #12]
 8006460:	e010      	b.n	8006484 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006462:	4b0b      	ldr	r3, [pc, #44]	; (8006490 <osKernelStart+0x68>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b01      	cmp	r3, #1
 8006468:	d109      	bne.n	800647e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800646a:	f7ff ffa1 	bl	80063b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800646e:	4b08      	ldr	r3, [pc, #32]	; (8006490 <osKernelStart+0x68>)
 8006470:	2202      	movs	r2, #2
 8006472:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006474:	f001 f8ca 	bl	800760c <vTaskStartScheduler>
      stat = osOK;
 8006478:	2300      	movs	r3, #0
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	e002      	b.n	8006484 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800647e:	f04f 33ff 	mov.w	r3, #4294967295
 8006482:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	2000148c 	.word	0x2000148c

08006494 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b090      	sub	sp, #64	; 0x40
 8006498:	af04      	add	r7, sp, #16
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064a4:	f3ef 8305 	mrs	r3, IPSR
 80064a8:	61fb      	str	r3, [r7, #28]
  return(result);
 80064aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 808f 	bne.w	80065d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064b2:	f3ef 8310 	mrs	r3, PRIMASK
 80064b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d105      	bne.n	80064ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80064be:	f3ef 8311 	mrs	r3, BASEPRI
 80064c2:	617b      	str	r3, [r7, #20]
  return(result);
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <osThreadNew+0x3e>
 80064ca:	4b44      	ldr	r3, [pc, #272]	; (80065dc <osThreadNew+0x148>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d07e      	beq.n	80065d0 <osThreadNew+0x13c>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d07b      	beq.n	80065d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80064dc:	2318      	movs	r3, #24
 80064de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80064e4:	f04f 33ff 	mov.w	r3, #4294967295
 80064e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d045      	beq.n	800657c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <osThreadNew+0x6a>
        name = attr->name;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	d008      	beq.n	8006524 <osThreadNew+0x90>
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	2b38      	cmp	r3, #56	; 0x38
 8006516:	d805      	bhi.n	8006524 <osThreadNew+0x90>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	f003 0301 	and.w	r3, r3, #1
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <osThreadNew+0x94>
        return (NULL);
 8006524:	2300      	movs	r3, #0
 8006526:	e054      	b.n	80065d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	695b      	ldr	r3, [r3, #20]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <osThreadNew+0xca>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2bbb      	cmp	r3, #187	; 0xbb
 8006546:	d90a      	bls.n	800655e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800654c:	2b00      	cmp	r3, #0
 800654e:	d006      	beq.n	800655e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <osThreadNew+0xca>
        mem = 1;
 8006558:	2301      	movs	r3, #1
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	e010      	b.n	8006580 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10c      	bne.n	8006580 <osThreadNew+0xec>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d108      	bne.n	8006580 <osThreadNew+0xec>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d104      	bne.n	8006580 <osThreadNew+0xec>
          mem = 0;
 8006576:	2300      	movs	r3, #0
 8006578:	623b      	str	r3, [r7, #32]
 800657a:	e001      	b.n	8006580 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800657c:	2300      	movs	r3, #0
 800657e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d110      	bne.n	80065a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800658e:	9202      	str	r2, [sp, #8]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800659a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fe3f 	bl	8007220 <xTaskCreateStatic>
 80065a2:	4603      	mov	r3, r0
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e013      	b.n	80065d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d110      	bne.n	80065d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	f107 0310 	add.w	r3, r7, #16
 80065b6:	9301      	str	r3, [sp, #4]
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fe90 	bl	80072e6 <xTaskCreate>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d001      	beq.n	80065d0 <osThreadNew+0x13c>
          hTask = NULL;
 80065cc:	2300      	movs	r3, #0
 80065ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065d0:	693b      	ldr	r3, [r7, #16]
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3730      	adds	r7, #48	; 0x30
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	2000148c 	.word	0x2000148c

080065e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065e8:	f3ef 8305 	mrs	r3, IPSR
 80065ec:	613b      	str	r3, [r7, #16]
  return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d10f      	bne.n	8006614 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f4:	f3ef 8310 	mrs	r3, PRIMASK
 80065f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006600:	f3ef 8311 	mrs	r3, BASEPRI
 8006604:	60bb      	str	r3, [r7, #8]
  return(result);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d007      	beq.n	800661c <osDelay+0x3c>
 800660c:	4b0a      	ldr	r3, [pc, #40]	; (8006638 <osDelay+0x58>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b02      	cmp	r3, #2
 8006612:	d103      	bne.n	800661c <osDelay+0x3c>
    stat = osErrorISR;
 8006614:	f06f 0305 	mvn.w	r3, #5
 8006618:	617b      	str	r3, [r7, #20]
 800661a:	e007      	b.n	800662c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800661c:	2300      	movs	r3, #0
 800661e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <osDelay+0x4c>
      vTaskDelay(ticks);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 ffba 	bl	80075a0 <vTaskDelay>
    }
  }

  return (stat);
 800662c:	697b      	ldr	r3, [r7, #20]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	2000148c 	.word	0x2000148c

0800663c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a07      	ldr	r2, [pc, #28]	; (8006668 <vApplicationGetIdleTaskMemory+0x2c>)
 800664c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	4a06      	ldr	r2, [pc, #24]	; (800666c <vApplicationGetIdleTaskMemory+0x30>)
 8006652:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2280      	movs	r2, #128	; 0x80
 8006658:	601a      	str	r2, [r3, #0]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20001490 	.word	0x20001490
 800666c:	2000154c 	.word	0x2000154c

08006670 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a07      	ldr	r2, [pc, #28]	; (800669c <vApplicationGetTimerTaskMemory+0x2c>)
 8006680:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vApplicationGetTimerTaskMemory+0x30>)
 8006686:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800668e:	601a      	str	r2, [r3, #0]
}
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	2000174c 	.word	0x2000174c
 80066a0:	20001808 	.word	0x20001808

080066a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f103 0208 	add.w	r2, r3, #8
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f04f 32ff 	mov.w	r2, #4294967295
 80066bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f103 0208 	add.w	r2, r3, #8
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f103 0208 	add.w	r2, r3, #8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	683a      	ldr	r2, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	683a      	ldr	r2, [r7, #0]
 8006728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	601a      	str	r2, [r3, #0]
}
 800673a:	bf00      	nop
 800673c:	3714      	adds	r7, #20
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675c:	d103      	bne.n	8006766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e00c      	b.n	8006780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3308      	adds	r3, #8
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	e002      	b.n	8006774 <vListInsert+0x2e>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	429a      	cmp	r2, r3
 800677e:	d2f6      	bcs.n	800676e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	685a      	ldr	r2, [r3, #4]
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	683a      	ldr	r2, [r7, #0]
 800678e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	6852      	ldr	r2, [r2, #4]
 80067d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d103      	bne.n	80067ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689a      	ldr	r2, [r3, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	1e5a      	subs	r2, r3, #1
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10c      	bne.n	800683a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	b672      	cpsid	i
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	b662      	cpsie	i
 8006834:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006836:	bf00      	nop
 8006838:	e7fe      	b.n	8006838 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800683a:	f002 f8ef 	bl	8008a1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006846:	68f9      	ldr	r1, [r7, #12]
 8006848:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800684a:	fb01 f303 	mul.w	r3, r1, r3
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800686a:	3b01      	subs	r3, #1
 800686c:	68f9      	ldr	r1, [r7, #12]
 800686e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006870:	fb01 f303 	mul.w	r3, r1, r3
 8006874:	441a      	add	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	22ff      	movs	r2, #255	; 0xff
 800687e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	22ff      	movs	r2, #255	; 0xff
 8006886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d114      	bne.n	80068ba <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d01a      	beq.n	80068ce <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3310      	adds	r3, #16
 800689c:	4618      	mov	r0, r3
 800689e:	f001 f96f 	bl	8007b80 <xTaskRemoveFromEventList>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d012      	beq.n	80068ce <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <xQueueGenericReset+0xd0>)
 80068aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	f3bf 8f4f 	dsb	sy
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	e009      	b.n	80068ce <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3310      	adds	r3, #16
 80068be:	4618      	mov	r0, r3
 80068c0:	f7ff fef0 	bl	80066a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3324      	adds	r3, #36	; 0x24
 80068c8:	4618      	mov	r0, r3
 80068ca:	f7ff feeb 	bl	80066a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80068ce:	f002 f8d9 	bl	8008a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80068d2:	2301      	movs	r3, #1
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08e      	sub	sp, #56	; 0x38
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10c      	bne.n	800690e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	b672      	cpsid	i
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	b662      	cpsie	i
 8006908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	b672      	cpsid	i
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	b662      	cpsie	i
 8006928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800692a:	bf00      	nop
 800692c:	e7fe      	b.n	800692c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <xQueueGenericCreateStatic+0x5a>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <xQueueGenericCreateStatic+0x5e>
 800693a:	2301      	movs	r3, #1
 800693c:	e000      	b.n	8006940 <xQueueGenericCreateStatic+0x60>
 800693e:	2300      	movs	r3, #0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10c      	bne.n	800695e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006948:	b672      	cpsid	i
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	b662      	cpsie	i
 8006958:	623b      	str	r3, [r7, #32]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <xQueueGenericCreateStatic+0x8a>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <xQueueGenericCreateStatic+0x8e>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <xQueueGenericCreateStatic+0x90>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10c      	bne.n	800698e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	b672      	cpsid	i
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	b662      	cpsie	i
 8006988:	61fb      	str	r3, [r7, #28]
}
 800698a:	bf00      	nop
 800698c:	e7fe      	b.n	800698c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800698e:	2350      	movs	r3, #80	; 0x50
 8006990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b50      	cmp	r3, #80	; 0x50
 8006996:	d00c      	beq.n	80069b2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699c:	b672      	cpsid	i
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	b662      	cpsie	i
 80069ac:	61bb      	str	r3, [r7, #24]
}
 80069ae:	bf00      	nop
 80069b0:	e7fe      	b.n	80069b0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80069b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00d      	beq.n	80069da <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	9300      	str	r3, [sp, #0]
 80069ce:	4613      	mov	r3, r2
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	68b9      	ldr	r1, [r7, #8]
 80069d4:	68f8      	ldr	r0, [r7, #12]
 80069d6:	f000 f805 	bl	80069e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80069da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80069dc:	4618      	mov	r0, r3
 80069de:	3730      	adds	r7, #48	; 0x30
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
 80069f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d103      	bne.n	8006a00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	69ba      	ldr	r2, [r7, #24]
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	e002      	b.n	8006a06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006a0c:	69bb      	ldr	r3, [r7, #24]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006a12:	2101      	movs	r1, #1
 8006a14:	69b8      	ldr	r0, [r7, #24]
 8006a16:	f7ff fef9 	bl	800680c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
	...

08006a2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b08e      	sub	sp, #56	; 0x38
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
 8006a38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10c      	bne.n	8006a62 <xQueueGenericSend+0x36>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d103      	bne.n	8006a70 <xQueueGenericSend+0x44>
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <xQueueGenericSend+0x48>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <xQueueGenericSend+0x4a>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10c      	bne.n	8006a94 <xQueueGenericSend+0x68>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7e:	b672      	cpsid	i
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	b662      	cpsie	i
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a90:	bf00      	nop
 8006a92:	e7fe      	b.n	8006a92 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d103      	bne.n	8006aa2 <xQueueGenericSend+0x76>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d101      	bne.n	8006aa6 <xQueueGenericSend+0x7a>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e000      	b.n	8006aa8 <xQueueGenericSend+0x7c>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10c      	bne.n	8006ac6 <xQueueGenericSend+0x9a>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	b672      	cpsid	i
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	b662      	cpsie	i
 8006ac0:	623b      	str	r3, [r7, #32]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ac6:	f001 fa5d 	bl	8007f84 <xTaskGetSchedulerState>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d102      	bne.n	8006ad6 <xQueueGenericSend+0xaa>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <xQueueGenericSend+0xae>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e000      	b.n	8006adc <xQueueGenericSend+0xb0>
 8006ada:	2300      	movs	r3, #0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d10c      	bne.n	8006afa <xQueueGenericSend+0xce>
	__asm volatile
 8006ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae4:	b672      	cpsid	i
 8006ae6:	f383 8811 	msr	BASEPRI, r3
 8006aea:	f3bf 8f6f 	isb	sy
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	b662      	cpsie	i
 8006af4:	61fb      	str	r3, [r7, #28]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006afa:	f001 ff8f 	bl	8008a1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d302      	bcc.n	8006b10 <xQueueGenericSend+0xe4>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d129      	bne.n	8006b64 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	68b9      	ldr	r1, [r7, #8]
 8006b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b16:	f000 fa15 	bl	8006f44 <prvCopyDataToQueue>
 8006b1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d010      	beq.n	8006b46 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b26:	3324      	adds	r3, #36	; 0x24
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f001 f829 	bl	8007b80 <xTaskRemoveFromEventList>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d013      	beq.n	8006b5c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006b34:	4b3f      	ldr	r3, [pc, #252]	; (8006c34 <xQueueGenericSend+0x208>)
 8006b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3a:	601a      	str	r2, [r3, #0]
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	e00a      	b.n	8006b5c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d007      	beq.n	8006b5c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006b4c:	4b39      	ldr	r3, [pc, #228]	; (8006c34 <xQueueGenericSend+0x208>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006b5c:	f001 ff92 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e063      	b.n	8006c2c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d103      	bne.n	8006b72 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b6a:	f001 ff8b 	bl	8008a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	e05c      	b.n	8006c2c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b78:	f107 0314 	add.w	r3, r7, #20
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 f865 	bl	8007c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b82:	2301      	movs	r3, #1
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b86:	f001 ff7d 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b8a:	f000 fdb3 	bl	80076f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b8e:	f001 ff45 	bl	8008a1c <vPortEnterCritical>
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d103      	bne.n	8006ba8 <xQueueGenericSend+0x17c>
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bae:	b25b      	sxtb	r3, r3
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d103      	bne.n	8006bbe <xQueueGenericSend+0x192>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bbe:	f001 ff61 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bc2:	1d3a      	adds	r2, r7, #4
 8006bc4:	f107 0314 	add.w	r3, r7, #20
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 f854 	bl	8007c78 <xTaskCheckForTimeOut>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d124      	bne.n	8006c20 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bd8:	f000 faac 	bl	8007134 <prvIsQueueFull>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d018      	beq.n	8006c14 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	3310      	adds	r3, #16
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	4611      	mov	r1, r2
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 ff74 	bl	8007ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf2:	f000 fa37 	bl	8007064 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006bf6:	f000 fd8b 	bl	8007710 <xTaskResumeAll>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f47f af7c 	bne.w	8006afa <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006c02:	4b0c      	ldr	r3, [pc, #48]	; (8006c34 <xQueueGenericSend+0x208>)
 8006c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c08:	601a      	str	r2, [r3, #0]
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	f3bf 8f6f 	isb	sy
 8006c12:	e772      	b.n	8006afa <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c16:	f000 fa25 	bl	8007064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c1a:	f000 fd79 	bl	8007710 <xTaskResumeAll>
 8006c1e:	e76c      	b.n	8006afa <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c22:	f000 fa1f 	bl	8007064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c26:	f000 fd73 	bl	8007710 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006c2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3738      	adds	r7, #56	; 0x38
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	e000ed04 	.word	0xe000ed04

08006c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08e      	sub	sp, #56	; 0x38
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10c      	bne.n	8006c6a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	b672      	cpsid	i
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	b662      	cpsie	i
 8006c64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d103      	bne.n	8006c78 <xQueueGenericSendFromISR+0x40>
 8006c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <xQueueGenericSendFromISR+0x44>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <xQueueGenericSendFromISR+0x46>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d10c      	bne.n	8006c9c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c86:	b672      	cpsid	i
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	b662      	cpsie	i
 8006c96:	623b      	str	r3, [r7, #32]
}
 8006c98:	bf00      	nop
 8006c9a:	e7fe      	b.n	8006c9a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d103      	bne.n	8006caa <xQueueGenericSendFromISR+0x72>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <xQueueGenericSendFromISR+0x76>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e000      	b.n	8006cb0 <xQueueGenericSendFromISR+0x78>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d10c      	bne.n	8006cce <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb8:	b672      	cpsid	i
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	b662      	cpsie	i
 8006cc8:	61fb      	str	r3, [r7, #28]
}
 8006cca:	bf00      	nop
 8006ccc:	e7fe      	b.n	8006ccc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006cce:	f001 ff8d 	bl	8008bec <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006cd2:	f3ef 8211 	mrs	r2, BASEPRI
 8006cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cda:	b672      	cpsid	i
 8006cdc:	f383 8811 	msr	BASEPRI, r3
 8006ce0:	f3bf 8f6f 	isb	sy
 8006ce4:	f3bf 8f4f 	dsb	sy
 8006ce8:	b662      	cpsie	i
 8006cea:	61ba      	str	r2, [r7, #24]
 8006cec:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006cee:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d302      	bcc.n	8006d04 <xQueueGenericSendFromISR+0xcc>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b02      	cmp	r3, #2
 8006d02:	d12c      	bne.n	8006d5e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d0e:	683a      	ldr	r2, [r7, #0]
 8006d10:	68b9      	ldr	r1, [r7, #8]
 8006d12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006d14:	f000 f916 	bl	8006f44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006d18:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d112      	bne.n	8006d48 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d016      	beq.n	8006d58 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	3324      	adds	r3, #36	; 0x24
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 ff26 	bl	8007b80 <xTaskRemoveFromEventList>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00e      	beq.n	8006d58 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e007      	b.n	8006d58 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	b25a      	sxtb	r2, r3
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006d5c:	e001      	b.n	8006d62 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	637b      	str	r3, [r7, #52]	; 0x34
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006d6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3738      	adds	r7, #56	; 0x38
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d84:	2300      	movs	r3, #0
 8006d86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10c      	bne.n	8006dac <xQueueReceive+0x34>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	b672      	cpsid	i
 8006d98:	f383 8811 	msr	BASEPRI, r3
 8006d9c:	f3bf 8f6f 	isb	sy
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	b662      	cpsie	i
 8006da6:	623b      	str	r3, [r7, #32]
}
 8006da8:	bf00      	nop
 8006daa:	e7fe      	b.n	8006daa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d103      	bne.n	8006dba <xQueueReceive+0x42>
 8006db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d101      	bne.n	8006dbe <xQueueReceive+0x46>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e000      	b.n	8006dc0 <xQueueReceive+0x48>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10c      	bne.n	8006dde <xQueueReceive+0x66>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	b672      	cpsid	i
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	b662      	cpsie	i
 8006dd8:	61fb      	str	r3, [r7, #28]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006dde:	f001 f8d1 	bl	8007f84 <xTaskGetSchedulerState>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d102      	bne.n	8006dee <xQueueReceive+0x76>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <xQueueReceive+0x7a>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <xQueueReceive+0x7c>
 8006df2:	2300      	movs	r3, #0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10c      	bne.n	8006e12 <xQueueReceive+0x9a>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	b672      	cpsid	i
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	b662      	cpsie	i
 8006e0c:	61bb      	str	r3, [r7, #24]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e12:	f001 fe03 	bl	8008a1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01f      	beq.n	8006e62 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e26:	f000 f8f7 	bl	8007018 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	1e5a      	subs	r2, r3, #1
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00f      	beq.n	8006e5a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	3310      	adds	r3, #16
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fe9e 	bl	8007b80 <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d007      	beq.n	8006e5a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e4a:	4b3d      	ldr	r3, [pc, #244]	; (8006f40 <xQueueReceive+0x1c8>)
 8006e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	f3bf 8f4f 	dsb	sy
 8006e56:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e5a:	f001 fe13 	bl	8008a84 <vPortExitCritical>
				return pdPASS;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e069      	b.n	8006f36 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d103      	bne.n	8006e70 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e68:	f001 fe0c 	bl	8008a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	e062      	b.n	8006f36 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e76:	f107 0310 	add.w	r3, r7, #16
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 fee6 	bl	8007c4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e84:	f001 fdfe 	bl	8008a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e88:	f000 fc34 	bl	80076f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e8c:	f001 fdc6 	bl	8008a1c <vPortEnterCritical>
 8006e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e96:	b25b      	sxtb	r3, r3
 8006e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9c:	d103      	bne.n	8006ea6 <xQueueReceive+0x12e>
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	d103      	bne.n	8006ebc <xQueueReceive+0x144>
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ebc:	f001 fde2 	bl	8008a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ec0:	1d3a      	adds	r2, r7, #4
 8006ec2:	f107 0310 	add.w	r3, r7, #16
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 fed5 	bl	8007c78 <xTaskCheckForTimeOut>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d123      	bne.n	8006f1c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed6:	f000 f917 	bl	8007108 <prvIsQueueEmpty>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d017      	beq.n	8006f10 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	3324      	adds	r3, #36	; 0x24
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fdf5 	bl	8007ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef0:	f000 f8b8 	bl	8007064 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ef4:	f000 fc0c 	bl	8007710 <xTaskResumeAll>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d189      	bne.n	8006e12 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8006efe:	4b10      	ldr	r3, [pc, #64]	; (8006f40 <xQueueReceive+0x1c8>)
 8006f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f04:	601a      	str	r2, [r3, #0]
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	e780      	b.n	8006e12 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f12:	f000 f8a7 	bl	8007064 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f16:	f000 fbfb 	bl	8007710 <xTaskResumeAll>
 8006f1a:	e77a      	b.n	8006e12 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f1e:	f000 f8a1 	bl	8007064 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f22:	f000 fbf5 	bl	8007710 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f28:	f000 f8ee 	bl	8007108 <prvIsQueueEmpty>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f43f af6f 	beq.w	8006e12 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f34:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3730      	adds	r7, #48	; 0x30
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b086      	sub	sp, #24
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006f50:	2300      	movs	r3, #0
 8006f52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10d      	bne.n	8006f7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d14d      	bne.n	8007006 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	4618      	mov	r0, r3
 8006f70:	f001 f826 	bl	8007fc0 <xTaskPriorityDisinherit>
 8006f74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	609a      	str	r2, [r3, #8]
 8006f7c:	e043      	b.n	8007006 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d119      	bne.n	8006fb8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6858      	ldr	r0, [r3, #4]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	68b9      	ldr	r1, [r7, #8]
 8006f90:	f002 f87a 	bl	8009088 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	441a      	add	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685a      	ldr	r2, [r3, #4]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d32b      	bcc.n	8007006 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	e026      	b.n	8007006 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	68d8      	ldr	r0, [r3, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	f002 f860 	bl	8009088 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	441a      	add	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	68da      	ldr	r2, [r3, #12]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d207      	bcs.n	8006ff4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fec:	425b      	negs	r3, r3
 8006fee:	441a      	add	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d105      	bne.n	8007006 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	3b01      	subs	r3, #1
 8007004:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800700e:	697b      	ldr	r3, [r7, #20]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	d018      	beq.n	800705c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	441a      	add	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68da      	ldr	r2, [r3, #12]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	429a      	cmp	r2, r3
 8007042:	d303      	bcc.n	800704c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681a      	ldr	r2, [r3, #0]
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68d9      	ldr	r1, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	461a      	mov	r2, r3
 8007056:	6838      	ldr	r0, [r7, #0]
 8007058:	f002 f816 	bl	8009088 <memcpy>
	}
}
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800706c:	f001 fcd6 	bl	8008a1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007076:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007078:	e011      	b.n	800709e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d012      	beq.n	80070a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	3324      	adds	r3, #36	; 0x24
 8007086:	4618      	mov	r0, r3
 8007088:	f000 fd7a 	bl	8007b80 <xTaskRemoveFromEventList>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007092:	f000 fe57 	bl	8007d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
 8007098:	3b01      	subs	r3, #1
 800709a:	b2db      	uxtb	r3, r3
 800709c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800709e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dce9      	bgt.n	800707a <prvUnlockQueue+0x16>
 80070a6:	e000      	b.n	80070aa <prvUnlockQueue+0x46>
					break;
 80070a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	22ff      	movs	r2, #255	; 0xff
 80070ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80070b2:	f001 fce7 	bl	8008a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80070b6:	f001 fcb1 	bl	8008a1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80070c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070c2:	e011      	b.n	80070e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	3310      	adds	r3, #16
 80070d0:	4618      	mov	r0, r3
 80070d2:	f000 fd55 	bl	8007b80 <xTaskRemoveFromEventList>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80070dc:	f000 fe32 	bl	8007d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80070e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	dce9      	bgt.n	80070c4 <prvUnlockQueue+0x60>
 80070f0:	e000      	b.n	80070f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80070f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	22ff      	movs	r2, #255	; 0xff
 80070f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80070fc:	f001 fcc2 	bl	8008a84 <vPortExitCritical>
}
 8007100:	bf00      	nop
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007110:	f001 fc84 	bl	8008a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e001      	b.n	8007126 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007126:	f001 fcad 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 800712a:	68fb      	ldr	r3, [r7, #12]
}
 800712c:	4618      	mov	r0, r3
 800712e:	3710      	adds	r7, #16
 8007130:	46bd      	mov	sp, r7
 8007132:	bd80      	pop	{r7, pc}

08007134 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800713c:	f001 fc6e 	bl	8008a1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007148:	429a      	cmp	r2, r3
 800714a:	d102      	bne.n	8007152 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800714c:	2301      	movs	r3, #1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	e001      	b.n	8007156 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007156:	f001 fc95 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 800715a:	68fb      	ldr	r3, [r7, #12]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800716e:	2300      	movs	r3, #0
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e014      	b.n	800719e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007174:	4a0f      	ldr	r2, [pc, #60]	; (80071b4 <vQueueAddToRegistry+0x50>)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007180:	490c      	ldr	r1, [pc, #48]	; (80071b4 <vQueueAddToRegistry+0x50>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	683a      	ldr	r2, [r7, #0]
 8007186:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800718a:	4a0a      	ldr	r2, [pc, #40]	; (80071b4 <vQueueAddToRegistry+0x50>)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007196:	e006      	b.n	80071a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3301      	adds	r3, #1
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b07      	cmp	r3, #7
 80071a2:	d9e7      	bls.n	8007174 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	20001c08 	.word	0x20001c08

080071b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b086      	sub	sp, #24
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80071c8:	f001 fc28 	bl	8008a1c <vPortEnterCritical>
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071d2:	b25b      	sxtb	r3, r3
 80071d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d8:	d103      	bne.n	80071e2 <vQueueWaitForMessageRestricted+0x2a>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071e8:	b25b      	sxtb	r3, r3
 80071ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ee:	d103      	bne.n	80071f8 <vQueueWaitForMessageRestricted+0x40>
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071f8:	f001 fc44 	bl	8008a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fc89 	bl	8007b24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007212:	6978      	ldr	r0, [r7, #20]
 8007214:	f7ff ff26 	bl	8007064 <prvUnlockQueue>
	}
 8007218:	bf00      	nop
 800721a:	3718      	adds	r7, #24
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af04      	add	r7, sp, #16
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10c      	bne.n	800724e <xTaskCreateStatic+0x2e>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007238:	b672      	cpsid	i
 800723a:	f383 8811 	msr	BASEPRI, r3
 800723e:	f3bf 8f6f 	isb	sy
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	b662      	cpsie	i
 8007248:	623b      	str	r3, [r7, #32]
}
 800724a:	bf00      	nop
 800724c:	e7fe      	b.n	800724c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800724e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007250:	2b00      	cmp	r3, #0
 8007252:	d10c      	bne.n	800726e <xTaskCreateStatic+0x4e>
	__asm volatile
 8007254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007258:	b672      	cpsid	i
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	b662      	cpsie	i
 8007268:	61fb      	str	r3, [r7, #28]
}
 800726a:	bf00      	nop
 800726c:	e7fe      	b.n	800726c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800726e:	23bc      	movs	r3, #188	; 0xbc
 8007270:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2bbc      	cmp	r3, #188	; 0xbc
 8007276:	d00c      	beq.n	8007292 <xTaskCreateStatic+0x72>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727c:	b672      	cpsid	i
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	b662      	cpsie	i
 800728c:	61bb      	str	r3, [r7, #24]
}
 800728e:	bf00      	nop
 8007290:	e7fe      	b.n	8007290 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007296:	2b00      	cmp	r3, #0
 8007298:	d01e      	beq.n	80072d8 <xTaskCreateStatic+0xb8>
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	2b00      	cmp	r3, #0
 800729e:	d01b      	beq.n	80072d8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80072a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80072b2:	2300      	movs	r3, #0
 80072b4:	9303      	str	r3, [sp, #12]
 80072b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b8:	9302      	str	r3, [sp, #8]
 80072ba:	f107 0314 	add.w	r3, r7, #20
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	68b9      	ldr	r1, [r7, #8]
 80072ca:	68f8      	ldr	r0, [r7, #12]
 80072cc:	f000 f850 	bl	8007370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80072d2:	f000 f8f5 	bl	80074c0 <prvAddNewTaskToReadyList>
 80072d6:	e001      	b.n	80072dc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80072dc:	697b      	ldr	r3, [r7, #20]
	}
 80072de:	4618      	mov	r0, r3
 80072e0:	3728      	adds	r7, #40	; 0x28
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b08c      	sub	sp, #48	; 0x30
 80072ea:	af04      	add	r7, sp, #16
 80072ec:	60f8      	str	r0, [r7, #12]
 80072ee:	60b9      	str	r1, [r7, #8]
 80072f0:	603b      	str	r3, [r7, #0]
 80072f2:	4613      	mov	r3, r2
 80072f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 fcba 	bl	8008c74 <pvPortMalloc>
 8007300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00e      	beq.n	8007326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007308:	20bc      	movs	r0, #188	; 0xbc
 800730a:	f001 fcb3 	bl	8008c74 <pvPortMalloc>
 800730e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007316:	69fb      	ldr	r3, [r7, #28]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	631a      	str	r2, [r3, #48]	; 0x30
 800731c:	e005      	b.n	800732a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800731e:	6978      	ldr	r0, [r7, #20]
 8007320:	f001 fd72 	bl	8008e08 <vPortFree>
 8007324:	e001      	b.n	800732a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007326:	2300      	movs	r3, #0
 8007328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d017      	beq.n	8007360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2200      	movs	r2, #0
 8007334:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007338:	88fa      	ldrh	r2, [r7, #6]
 800733a:	2300      	movs	r3, #0
 800733c:	9303      	str	r3, [sp, #12]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	9302      	str	r3, [sp, #8]
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f80e 	bl	8007370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007354:	69f8      	ldr	r0, [r7, #28]
 8007356:	f000 f8b3 	bl	80074c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800735a:	2301      	movs	r3, #1
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e002      	b.n	8007366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007366:	69bb      	ldr	r3, [r7, #24]
	}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	461a      	mov	r2, r3
 8007388:	21a5      	movs	r1, #165	; 0xa5
 800738a:	f001 fe8b 	bl	80090a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007398:	440b      	add	r3, r1
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f023 0307 	bic.w	r3, r3, #7
 80073a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00c      	beq.n	80073cc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b6:	b672      	cpsid	i
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	b662      	cpsie	i
 80073c6:	617b      	str	r3, [r7, #20]
}
 80073c8:	bf00      	nop
 80073ca:	e7fe      	b.n	80073ca <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d01f      	beq.n	8007412 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	e012      	b.n	80073fe <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	4413      	add	r3, r2
 80073de:	7819      	ldrb	r1, [r3, #0]
 80073e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	3334      	adds	r3, #52	; 0x34
 80073e8:	460a      	mov	r2, r1
 80073ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	4413      	add	r3, r2
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3301      	adds	r3, #1
 80073fc:	61fb      	str	r3, [r7, #28]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	2b0f      	cmp	r3, #15
 8007402:	d9e9      	bls.n	80073d8 <prvInitialiseNewTask+0x68>
 8007404:	e000      	b.n	8007408 <prvInitialiseNewTask+0x98>
			{
				break;
 8007406:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007410:	e003      	b.n	800741a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	2200      	movs	r2, #0
 8007416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	2b37      	cmp	r3, #55	; 0x37
 800741e:	d901      	bls.n	8007424 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007420:	2337      	movs	r3, #55	; 0x37
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007428:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800742a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800742c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800742e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007432:	2200      	movs	r2, #0
 8007434:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	3304      	adds	r3, #4
 800743a:	4618      	mov	r0, r3
 800743c:	f7ff f952 	bl	80066e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	3318      	adds	r3, #24
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff f94d 	bl	80066e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800744e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800745a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800745c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800745e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746a:	2200      	movs	r2, #0
 800746c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	3354      	adds	r3, #84	; 0x54
 8007474:	2260      	movs	r2, #96	; 0x60
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f001 fe13 	bl	80090a4 <memset>
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	4a0c      	ldr	r2, [pc, #48]	; (80074b4 <prvInitialiseNewTask+0x144>)
 8007482:	659a      	str	r2, [r3, #88]	; 0x58
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	4a0c      	ldr	r2, [pc, #48]	; (80074b8 <prvInitialiseNewTask+0x148>)
 8007488:	65da      	str	r2, [r3, #92]	; 0x5c
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	4a0b      	ldr	r2, [pc, #44]	; (80074bc <prvInitialiseNewTask+0x14c>)
 800748e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	68f9      	ldr	r1, [r7, #12]
 8007494:	69b8      	ldr	r0, [r7, #24]
 8007496:	f001 f9b5 	bl	8008804 <pxPortInitialiseStack>
 800749a:	4602      	mov	r2, r0
 800749c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d002      	beq.n	80074ac <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ac:	bf00      	nop
 80074ae:	3720      	adds	r7, #32
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	08009364 	.word	0x08009364
 80074b8:	08009384 	.word	0x08009384
 80074bc:	08009344 	.word	0x08009344

080074c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074c8:	f001 faa8 	bl	8008a1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80074cc:	4b2d      	ldr	r3, [pc, #180]	; (8007584 <prvAddNewTaskToReadyList+0xc4>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	3301      	adds	r3, #1
 80074d2:	4a2c      	ldr	r2, [pc, #176]	; (8007584 <prvAddNewTaskToReadyList+0xc4>)
 80074d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80074d6:	4b2c      	ldr	r3, [pc, #176]	; (8007588 <prvAddNewTaskToReadyList+0xc8>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d109      	bne.n	80074f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80074de:	4a2a      	ldr	r2, [pc, #168]	; (8007588 <prvAddNewTaskToReadyList+0xc8>)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80074e4:	4b27      	ldr	r3, [pc, #156]	; (8007584 <prvAddNewTaskToReadyList+0xc4>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d110      	bne.n	800750e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80074ec:	f000 fc4e 	bl	8007d8c <prvInitialiseTaskLists>
 80074f0:	e00d      	b.n	800750e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80074f2:	4b26      	ldr	r3, [pc, #152]	; (800758c <prvAddNewTaskToReadyList+0xcc>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d109      	bne.n	800750e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80074fa:	4b23      	ldr	r3, [pc, #140]	; (8007588 <prvAddNewTaskToReadyList+0xc8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007504:	429a      	cmp	r2, r3
 8007506:	d802      	bhi.n	800750e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007508:	4a1f      	ldr	r2, [pc, #124]	; (8007588 <prvAddNewTaskToReadyList+0xc8>)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800750e:	4b20      	ldr	r3, [pc, #128]	; (8007590 <prvAddNewTaskToReadyList+0xd0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	3301      	adds	r3, #1
 8007514:	4a1e      	ldr	r2, [pc, #120]	; (8007590 <prvAddNewTaskToReadyList+0xd0>)
 8007516:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007518:	4b1d      	ldr	r3, [pc, #116]	; (8007590 <prvAddNewTaskToReadyList+0xd0>)
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007524:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <prvAddNewTaskToReadyList+0xd4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	429a      	cmp	r2, r3
 800752a:	d903      	bls.n	8007534 <prvAddNewTaskToReadyList+0x74>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	4a18      	ldr	r2, [pc, #96]	; (8007594 <prvAddNewTaskToReadyList+0xd4>)
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007538:	4613      	mov	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4a15      	ldr	r2, [pc, #84]	; (8007598 <prvAddNewTaskToReadyList+0xd8>)
 8007542:	441a      	add	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	4619      	mov	r1, r3
 800754a:	4610      	mov	r0, r2
 800754c:	f7ff f8d7 	bl	80066fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007550:	f001 fa98 	bl	8008a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007554:	4b0d      	ldr	r3, [pc, #52]	; (800758c <prvAddNewTaskToReadyList+0xcc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00e      	beq.n	800757a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <prvAddNewTaskToReadyList+0xc8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007566:	429a      	cmp	r2, r3
 8007568:	d207      	bcs.n	800757a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800756a:	4b0c      	ldr	r3, [pc, #48]	; (800759c <prvAddNewTaskToReadyList+0xdc>)
 800756c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007570:	601a      	str	r2, [r3, #0]
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	2000211c 	.word	0x2000211c
 8007588:	20001c48 	.word	0x20001c48
 800758c:	20002128 	.word	0x20002128
 8007590:	20002138 	.word	0x20002138
 8007594:	20002124 	.word	0x20002124
 8007598:	20001c4c 	.word	0x20001c4c
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d019      	beq.n	80075e6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80075b2:	4b14      	ldr	r3, [pc, #80]	; (8007604 <vTaskDelay+0x64>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00c      	beq.n	80075d4 <vTaskDelay+0x34>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	b672      	cpsid	i
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	b662      	cpsie	i
 80075ce:	60bb      	str	r3, [r7, #8]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80075d4:	f000 f88e 	bl	80076f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80075d8:	2100      	movs	r1, #0
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fd62 	bl	80080a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80075e0:	f000 f896 	bl	8007710 <xTaskResumeAll>
 80075e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d107      	bne.n	80075fc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80075ec:	4b06      	ldr	r3, [pc, #24]	; (8007608 <vTaskDelay+0x68>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	20002144 	.word	0x20002144
 8007608:	e000ed04 	.word	0xe000ed04

0800760c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b08a      	sub	sp, #40	; 0x28
 8007610:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007612:	2300      	movs	r3, #0
 8007614:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007616:	2300      	movs	r3, #0
 8007618:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800761a:	463a      	mov	r2, r7
 800761c:	1d39      	adds	r1, r7, #4
 800761e:	f107 0308 	add.w	r3, r7, #8
 8007622:	4618      	mov	r0, r3
 8007624:	f7ff f80a 	bl	800663c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	9202      	str	r2, [sp, #8]
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	460a      	mov	r2, r1
 800763a:	4926      	ldr	r1, [pc, #152]	; (80076d4 <vTaskStartScheduler+0xc8>)
 800763c:	4826      	ldr	r0, [pc, #152]	; (80076d8 <vTaskStartScheduler+0xcc>)
 800763e:	f7ff fdef 	bl	8007220 <xTaskCreateStatic>
 8007642:	4603      	mov	r3, r0
 8007644:	4a25      	ldr	r2, [pc, #148]	; (80076dc <vTaskStartScheduler+0xd0>)
 8007646:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007648:	4b24      	ldr	r3, [pc, #144]	; (80076dc <vTaskStartScheduler+0xd0>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d002      	beq.n	8007656 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007650:	2301      	movs	r3, #1
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	e001      	b.n	800765a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007656:	2300      	movs	r3, #0
 8007658:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d102      	bne.n	8007666 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007660:	f000 fd74 	bl	800814c <xTimerCreateTimerTask>
 8007664:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d11d      	bne.n	80076a8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	b672      	cpsid	i
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	b662      	cpsie	i
 8007680:	613b      	str	r3, [r7, #16]
}
 8007682:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007684:	4b16      	ldr	r3, [pc, #88]	; (80076e0 <vTaskStartScheduler+0xd4>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3354      	adds	r3, #84	; 0x54
 800768a:	4a16      	ldr	r2, [pc, #88]	; (80076e4 <vTaskStartScheduler+0xd8>)
 800768c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800768e:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <vTaskStartScheduler+0xdc>)
 8007690:	f04f 32ff 	mov.w	r2, #4294967295
 8007694:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007696:	4b15      	ldr	r3, [pc, #84]	; (80076ec <vTaskStartScheduler+0xe0>)
 8007698:	2201      	movs	r2, #1
 800769a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800769c:	4b14      	ldr	r3, [pc, #80]	; (80076f0 <vTaskStartScheduler+0xe4>)
 800769e:	2200      	movs	r2, #0
 80076a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076a2:	f001 f93d 	bl	8008920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076a6:	e010      	b.n	80076ca <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ae:	d10c      	bne.n	80076ca <vTaskStartScheduler+0xbe>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b4:	b672      	cpsid	i
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	b662      	cpsie	i
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	e7fe      	b.n	80076c8 <vTaskStartScheduler+0xbc>
}
 80076ca:	bf00      	nop
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	080092c0 	.word	0x080092c0
 80076d8:	08007d5d 	.word	0x08007d5d
 80076dc:	20002140 	.word	0x20002140
 80076e0:	20001c48 	.word	0x20001c48
 80076e4:	20000010 	.word	0x20000010
 80076e8:	2000213c 	.word	0x2000213c
 80076ec:	20002128 	.word	0x20002128
 80076f0:	20002120 	.word	0x20002120

080076f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80076f4:	b480      	push	{r7}
 80076f6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80076f8:	4b04      	ldr	r3, [pc, #16]	; (800770c <vTaskSuspendAll+0x18>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	3301      	adds	r3, #1
 80076fe:	4a03      	ldr	r2, [pc, #12]	; (800770c <vTaskSuspendAll+0x18>)
 8007700:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007702:	bf00      	nop
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr
 800770c:	20002144 	.word	0x20002144

08007710 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800771a:	2300      	movs	r3, #0
 800771c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800771e:	4b43      	ldr	r3, [pc, #268]	; (800782c <xTaskResumeAll+0x11c>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d10c      	bne.n	8007740 <xTaskResumeAll+0x30>
	__asm volatile
 8007726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772a:	b672      	cpsid	i
 800772c:	f383 8811 	msr	BASEPRI, r3
 8007730:	f3bf 8f6f 	isb	sy
 8007734:	f3bf 8f4f 	dsb	sy
 8007738:	b662      	cpsie	i
 800773a:	603b      	str	r3, [r7, #0]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007740:	f001 f96c 	bl	8008a1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007744:	4b39      	ldr	r3, [pc, #228]	; (800782c <xTaskResumeAll+0x11c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3b01      	subs	r3, #1
 800774a:	4a38      	ldr	r2, [pc, #224]	; (800782c <xTaskResumeAll+0x11c>)
 800774c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800774e:	4b37      	ldr	r3, [pc, #220]	; (800782c <xTaskResumeAll+0x11c>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d162      	bne.n	800781c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007756:	4b36      	ldr	r3, [pc, #216]	; (8007830 <xTaskResumeAll+0x120>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d05e      	beq.n	800781c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800775e:	e02f      	b.n	80077c0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007760:	4b34      	ldr	r3, [pc, #208]	; (8007834 <xTaskResumeAll+0x124>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	3318      	adds	r3, #24
 800776c:	4618      	mov	r0, r3
 800776e:	f7ff f823 	bl	80067b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	3304      	adds	r3, #4
 8007776:	4618      	mov	r0, r3
 8007778:	f7ff f81e 	bl	80067b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007780:	4b2d      	ldr	r3, [pc, #180]	; (8007838 <xTaskResumeAll+0x128>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	429a      	cmp	r2, r3
 8007786:	d903      	bls.n	8007790 <xTaskResumeAll+0x80>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	4a2a      	ldr	r2, [pc, #168]	; (8007838 <xTaskResumeAll+0x128>)
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4613      	mov	r3, r2
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	009b      	lsls	r3, r3, #2
 800779c:	4a27      	ldr	r2, [pc, #156]	; (800783c <xTaskResumeAll+0x12c>)
 800779e:	441a      	add	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	f7fe ffa9 	bl	80066fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	4b23      	ldr	r3, [pc, #140]	; (8007840 <xTaskResumeAll+0x130>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d302      	bcc.n	80077c0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80077ba:	4b22      	ldr	r3, [pc, #136]	; (8007844 <xTaskResumeAll+0x134>)
 80077bc:	2201      	movs	r2, #1
 80077be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077c0:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <xTaskResumeAll+0x124>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1cb      	bne.n	8007760 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077ce:	f000 fbb9 	bl	8007f44 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80077d2:	4b1d      	ldr	r3, [pc, #116]	; (8007848 <xTaskResumeAll+0x138>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d010      	beq.n	8007800 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80077de:	f000 f859 	bl	8007894 <xTaskIncrementTick>
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80077e8:	4b16      	ldr	r3, [pc, #88]	; (8007844 <xTaskResumeAll+0x134>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d1f1      	bne.n	80077de <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <xTaskResumeAll+0x138>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007800:	4b10      	ldr	r3, [pc, #64]	; (8007844 <xTaskResumeAll+0x134>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800780c:	4b0f      	ldr	r3, [pc, #60]	; (800784c <xTaskResumeAll+0x13c>)
 800780e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007812:	601a      	str	r2, [r3, #0]
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800781c:	f001 f932 	bl	8008a84 <vPortExitCritical>

	return xAlreadyYielded;
 8007820:	68bb      	ldr	r3, [r7, #8]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	20002144 	.word	0x20002144
 8007830:	2000211c 	.word	0x2000211c
 8007834:	200020dc 	.word	0x200020dc
 8007838:	20002124 	.word	0x20002124
 800783c:	20001c4c 	.word	0x20001c4c
 8007840:	20001c48 	.word	0x20001c48
 8007844:	20002130 	.word	0x20002130
 8007848:	2000212c 	.word	0x2000212c
 800784c:	e000ed04 	.word	0xe000ed04

08007850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007850:	b480      	push	{r7}
 8007852:	b083      	sub	sp, #12
 8007854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007856:	4b05      	ldr	r3, [pc, #20]	; (800786c <xTaskGetTickCount+0x1c>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800785c:	687b      	ldr	r3, [r7, #4]
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	20002120 	.word	0x20002120

08007870 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007876:	f001 f9b9 	bl	8008bec <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800787e:	4b04      	ldr	r3, [pc, #16]	; (8007890 <xTaskGetTickCountFromISR+0x20>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007884:	683b      	ldr	r3, [r7, #0]
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	20002120 	.word	0x20002120

08007894 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b086      	sub	sp, #24
 8007898:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800789e:	4b50      	ldr	r3, [pc, #320]	; (80079e0 <xTaskIncrementTick+0x14c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f040 808b 	bne.w	80079be <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078a8:	4b4e      	ldr	r3, [pc, #312]	; (80079e4 <xTaskIncrementTick+0x150>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	3301      	adds	r3, #1
 80078ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078b0:	4a4c      	ldr	r2, [pc, #304]	; (80079e4 <xTaskIncrementTick+0x150>)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d122      	bne.n	8007902 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80078bc:	4b4a      	ldr	r3, [pc, #296]	; (80079e8 <xTaskIncrementTick+0x154>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00c      	beq.n	80078e0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80078c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ca:	b672      	cpsid	i
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	b662      	cpsie	i
 80078da:	603b      	str	r3, [r7, #0]
}
 80078dc:	bf00      	nop
 80078de:	e7fe      	b.n	80078de <xTaskIncrementTick+0x4a>
 80078e0:	4b41      	ldr	r3, [pc, #260]	; (80079e8 <xTaskIncrementTick+0x154>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	4b41      	ldr	r3, [pc, #260]	; (80079ec <xTaskIncrementTick+0x158>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a3f      	ldr	r2, [pc, #252]	; (80079e8 <xTaskIncrementTick+0x154>)
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	4a3f      	ldr	r2, [pc, #252]	; (80079ec <xTaskIncrementTick+0x158>)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	4b3e      	ldr	r3, [pc, #248]	; (80079f0 <xTaskIncrementTick+0x15c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	4a3d      	ldr	r2, [pc, #244]	; (80079f0 <xTaskIncrementTick+0x15c>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	f000 fb21 	bl	8007f44 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007902:	4b3c      	ldr	r3, [pc, #240]	; (80079f4 <xTaskIncrementTick+0x160>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	429a      	cmp	r2, r3
 800790a:	d349      	bcc.n	80079a0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800790c:	4b36      	ldr	r3, [pc, #216]	; (80079e8 <xTaskIncrementTick+0x154>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007916:	4b37      	ldr	r3, [pc, #220]	; (80079f4 <xTaskIncrementTick+0x160>)
 8007918:	f04f 32ff 	mov.w	r2, #4294967295
 800791c:	601a      	str	r2, [r3, #0]
					break;
 800791e:	e03f      	b.n	80079a0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007920:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <xTaskIncrementTick+0x154>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007930:	693a      	ldr	r2, [r7, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d203      	bcs.n	8007940 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007938:	4a2e      	ldr	r2, [pc, #184]	; (80079f4 <xTaskIncrementTick+0x160>)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800793e:	e02f      	b.n	80079a0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe ff37 	bl	80067b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794e:	2b00      	cmp	r3, #0
 8007950:	d004      	beq.n	800795c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3318      	adds	r3, #24
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe ff2e 	bl	80067b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007960:	4b25      	ldr	r3, [pc, #148]	; (80079f8 <xTaskIncrementTick+0x164>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	429a      	cmp	r2, r3
 8007966:	d903      	bls.n	8007970 <xTaskIncrementTick+0xdc>
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <xTaskIncrementTick+0x164>)
 800796e:	6013      	str	r3, [r2, #0]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007974:	4613      	mov	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	4a1f      	ldr	r2, [pc, #124]	; (80079fc <xTaskIncrementTick+0x168>)
 800797e:	441a      	add	r2, r3
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	3304      	adds	r3, #4
 8007984:	4619      	mov	r1, r3
 8007986:	4610      	mov	r0, r2
 8007988:	f7fe feb9 	bl	80066fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007990:	4b1b      	ldr	r3, [pc, #108]	; (8007a00 <xTaskIncrementTick+0x16c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	429a      	cmp	r2, r3
 8007998:	d3b8      	bcc.n	800790c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800799a:	2301      	movs	r3, #1
 800799c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800799e:	e7b5      	b.n	800790c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079a0:	4b17      	ldr	r3, [pc, #92]	; (8007a00 <xTaskIncrementTick+0x16c>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a6:	4915      	ldr	r1, [pc, #84]	; (80079fc <xTaskIncrementTick+0x168>)
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	440b      	add	r3, r1
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d907      	bls.n	80079c8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	617b      	str	r3, [r7, #20]
 80079bc:	e004      	b.n	80079c8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80079be:	4b11      	ldr	r3, [pc, #68]	; (8007a04 <xTaskIncrementTick+0x170>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3301      	adds	r3, #1
 80079c4:	4a0f      	ldr	r2, [pc, #60]	; (8007a04 <xTaskIncrementTick+0x170>)
 80079c6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80079c8:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <xTaskIncrementTick+0x174>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d001      	beq.n	80079d4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80079d4:	697b      	ldr	r3, [r7, #20]
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20002144 	.word	0x20002144
 80079e4:	20002120 	.word	0x20002120
 80079e8:	200020d4 	.word	0x200020d4
 80079ec:	200020d8 	.word	0x200020d8
 80079f0:	20002134 	.word	0x20002134
 80079f4:	2000213c 	.word	0x2000213c
 80079f8:	20002124 	.word	0x20002124
 80079fc:	20001c4c 	.word	0x20001c4c
 8007a00:	20001c48 	.word	0x20001c48
 8007a04:	2000212c 	.word	0x2000212c
 8007a08:	20002130 	.word	0x20002130

08007a0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b085      	sub	sp, #20
 8007a10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a12:	4b2b      	ldr	r3, [pc, #172]	; (8007ac0 <vTaskSwitchContext+0xb4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d003      	beq.n	8007a22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a1a:	4b2a      	ldr	r3, [pc, #168]	; (8007ac4 <vTaskSwitchContext+0xb8>)
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a20:	e048      	b.n	8007ab4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8007a22:	4b28      	ldr	r3, [pc, #160]	; (8007ac4 <vTaskSwitchContext+0xb8>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a28:	4b27      	ldr	r3, [pc, #156]	; (8007ac8 <vTaskSwitchContext+0xbc>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	e012      	b.n	8007a56 <vTaskSwitchContext+0x4a>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10c      	bne.n	8007a50 <vTaskSwitchContext+0x44>
	__asm volatile
 8007a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a3a:	b672      	cpsid	i
 8007a3c:	f383 8811 	msr	BASEPRI, r3
 8007a40:	f3bf 8f6f 	isb	sy
 8007a44:	f3bf 8f4f 	dsb	sy
 8007a48:	b662      	cpsie	i
 8007a4a:	607b      	str	r3, [r7, #4]
}
 8007a4c:	bf00      	nop
 8007a4e:	e7fe      	b.n	8007a4e <vTaskSwitchContext+0x42>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3b01      	subs	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	491d      	ldr	r1, [pc, #116]	; (8007acc <vTaskSwitchContext+0xc0>)
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d0e2      	beq.n	8007a30 <vTaskSwitchContext+0x24>
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4a15      	ldr	r2, [pc, #84]	; (8007acc <vTaskSwitchContext+0xc0>)
 8007a76:	4413      	add	r3, r2
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	605a      	str	r2, [r3, #4]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	685a      	ldr	r2, [r3, #4]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d104      	bne.n	8007a9a <vTaskSwitchContext+0x8e>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	685a      	ldr	r2, [r3, #4]
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	4a0b      	ldr	r2, [pc, #44]	; (8007ad0 <vTaskSwitchContext+0xc4>)
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	4a08      	ldr	r2, [pc, #32]	; (8007ac8 <vTaskSwitchContext+0xbc>)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007aaa:	4b09      	ldr	r3, [pc, #36]	; (8007ad0 <vTaskSwitchContext+0xc4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3354      	adds	r3, #84	; 0x54
 8007ab0:	4a08      	ldr	r2, [pc, #32]	; (8007ad4 <vTaskSwitchContext+0xc8>)
 8007ab2:	6013      	str	r3, [r2, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	3714      	adds	r7, #20
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr
 8007ac0:	20002144 	.word	0x20002144
 8007ac4:	20002130 	.word	0x20002130
 8007ac8:	20002124 	.word	0x20002124
 8007acc:	20001c4c 	.word	0x20001c4c
 8007ad0:	20001c48 	.word	0x20001c48
 8007ad4:	20000010 	.word	0x20000010

08007ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aec:	b672      	cpsid	i
 8007aee:	f383 8811 	msr	BASEPRI, r3
 8007af2:	f3bf 8f6f 	isb	sy
 8007af6:	f3bf 8f4f 	dsb	sy
 8007afa:	b662      	cpsie	i
 8007afc:	60fb      	str	r3, [r7, #12]
}
 8007afe:	bf00      	nop
 8007b00:	e7fe      	b.n	8007b00 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b02:	4b07      	ldr	r3, [pc, #28]	; (8007b20 <vTaskPlaceOnEventList+0x48>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3318      	adds	r3, #24
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fe fe1b 	bl	8006746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b10:	2101      	movs	r1, #1
 8007b12:	6838      	ldr	r0, [r7, #0]
 8007b14:	f000 fac6 	bl	80080a4 <prvAddCurrentTaskToDelayedList>
}
 8007b18:	bf00      	nop
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20001c48 	.word	0x20001c48

08007b24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10c      	bne.n	8007b50 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b3a:	b672      	cpsid	i
 8007b3c:	f383 8811 	msr	BASEPRI, r3
 8007b40:	f3bf 8f6f 	isb	sy
 8007b44:	f3bf 8f4f 	dsb	sy
 8007b48:	b662      	cpsie	i
 8007b4a:	617b      	str	r3, [r7, #20]
}
 8007b4c:	bf00      	nop
 8007b4e:	e7fe      	b.n	8007b4e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b50:	4b0a      	ldr	r3, [pc, #40]	; (8007b7c <vTaskPlaceOnEventListRestricted+0x58>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3318      	adds	r3, #24
 8007b56:	4619      	mov	r1, r3
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f7fe fdd0 	bl	80066fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8007b64:	f04f 33ff 	mov.w	r3, #4294967295
 8007b68:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b6a:	6879      	ldr	r1, [r7, #4]
 8007b6c:	68b8      	ldr	r0, [r7, #8]
 8007b6e:	f000 fa99 	bl	80080a4 <prvAddCurrentTaskToDelayedList>
	}
 8007b72:	bf00      	nop
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20001c48 	.word	0x20001c48

08007b80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10c      	bne.n	8007bb0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	b672      	cpsid	i
 8007b9c:	f383 8811 	msr	BASEPRI, r3
 8007ba0:	f3bf 8f6f 	isb	sy
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	b662      	cpsie	i
 8007baa:	60fb      	str	r3, [r7, #12]
}
 8007bac:	bf00      	nop
 8007bae:	e7fe      	b.n	8007bae <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	3318      	adds	r3, #24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fe fdff 	bl	80067b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bba:	4b1e      	ldr	r3, [pc, #120]	; (8007c34 <xTaskRemoveFromEventList+0xb4>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d11d      	bne.n	8007bfe <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7fe fdf6 	bl	80067b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	4b19      	ldr	r3, [pc, #100]	; (8007c38 <xTaskRemoveFromEventList+0xb8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d903      	bls.n	8007be0 <xTaskRemoveFromEventList+0x60>
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bdc:	4a16      	ldr	r2, [pc, #88]	; (8007c38 <xTaskRemoveFromEventList+0xb8>)
 8007bde:	6013      	str	r3, [r2, #0]
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be4:	4613      	mov	r3, r2
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4a13      	ldr	r2, [pc, #76]	; (8007c3c <xTaskRemoveFromEventList+0xbc>)
 8007bee:	441a      	add	r2, r3
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	4619      	mov	r1, r3
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	f7fe fd81 	bl	80066fe <vListInsertEnd>
 8007bfc:	e005      	b.n	8007c0a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bfe:	693b      	ldr	r3, [r7, #16]
 8007c00:	3318      	adds	r3, #24
 8007c02:	4619      	mov	r1, r3
 8007c04:	480e      	ldr	r0, [pc, #56]	; (8007c40 <xTaskRemoveFromEventList+0xc0>)
 8007c06:	f7fe fd7a 	bl	80066fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <xTaskRemoveFromEventList+0xc4>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d905      	bls.n	8007c24 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c1c:	4b0a      	ldr	r3, [pc, #40]	; (8007c48 <xTaskRemoveFromEventList+0xc8>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	e001      	b.n	8007c28 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c28:	697b      	ldr	r3, [r7, #20]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20002144 	.word	0x20002144
 8007c38:	20002124 	.word	0x20002124
 8007c3c:	20001c4c 	.word	0x20001c4c
 8007c40:	200020dc 	.word	0x200020dc
 8007c44:	20001c48 	.word	0x20001c48
 8007c48:	20002130 	.word	0x20002130

08007c4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <vTaskInternalSetTimeOutState+0x24>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <vTaskInternalSetTimeOutState+0x28>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	605a      	str	r2, [r3, #4]
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	20002134 	.word	0x20002134
 8007c74:	20002120 	.word	0x20002120

08007c78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10c      	bne.n	8007ca2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8c:	b672      	cpsid	i
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	b662      	cpsie	i
 8007c9c:	613b      	str	r3, [r7, #16]
}
 8007c9e:	bf00      	nop
 8007ca0:	e7fe      	b.n	8007ca0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10c      	bne.n	8007cc2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cac:	b672      	cpsid	i
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	b662      	cpsie	i
 8007cbc:	60fb      	str	r3, [r7, #12]
}
 8007cbe:	bf00      	nop
 8007cc0:	e7fe      	b.n	8007cc0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8007cc2:	f000 feab 	bl	8008a1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007cc6:	4b1d      	ldr	r3, [pc, #116]	; (8007d3c <xTaskCheckForTimeOut+0xc4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	1ad3      	subs	r3, r2, r3
 8007cd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cde:	d102      	bne.n	8007ce6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e023      	b.n	8007d2e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	4b15      	ldr	r3, [pc, #84]	; (8007d40 <xTaskCheckForTimeOut+0xc8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d007      	beq.n	8007d02 <xTaskCheckForTimeOut+0x8a>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d302      	bcc.n	8007d02 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	61fb      	str	r3, [r7, #28]
 8007d00:	e015      	b.n	8007d2e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	697a      	ldr	r2, [r7, #20]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d20b      	bcs.n	8007d24 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	1ad2      	subs	r2, r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff ff97 	bl	8007c4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	61fb      	str	r3, [r7, #28]
 8007d22:	e004      	b.n	8007d2e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2200      	movs	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d2e:	f000 fea9 	bl	8008a84 <vPortExitCritical>

	return xReturn;
 8007d32:	69fb      	ldr	r3, [r7, #28]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3720      	adds	r7, #32
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	20002120 	.word	0x20002120
 8007d40:	20002134 	.word	0x20002134

08007d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d48:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <vTaskMissedYield+0x14>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]
}
 8007d4e:	bf00      	nop
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	20002130 	.word	0x20002130

08007d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d64:	f000 f852 	bl	8007e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d68:	4b06      	ldr	r3, [pc, #24]	; (8007d84 <prvIdleTask+0x28>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d9f9      	bls.n	8007d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <prvIdleTask+0x2c>)
 8007d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d80:	e7f0      	b.n	8007d64 <prvIdleTask+0x8>
 8007d82:	bf00      	nop
 8007d84:	20001c4c 	.word	0x20001c4c
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d92:	2300      	movs	r3, #0
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	e00c      	b.n	8007db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	4413      	add	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4a12      	ldr	r2, [pc, #72]	; (8007dec <prvInitialiseTaskLists+0x60>)
 8007da4:	4413      	add	r3, r2
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7fe fc7c 	bl	80066a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	3301      	adds	r3, #1
 8007db0:	607b      	str	r3, [r7, #4]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2b37      	cmp	r3, #55	; 0x37
 8007db6:	d9ef      	bls.n	8007d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007db8:	480d      	ldr	r0, [pc, #52]	; (8007df0 <prvInitialiseTaskLists+0x64>)
 8007dba:	f7fe fc73 	bl	80066a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007dbe:	480d      	ldr	r0, [pc, #52]	; (8007df4 <prvInitialiseTaskLists+0x68>)
 8007dc0:	f7fe fc70 	bl	80066a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007dc4:	480c      	ldr	r0, [pc, #48]	; (8007df8 <prvInitialiseTaskLists+0x6c>)
 8007dc6:	f7fe fc6d 	bl	80066a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dca:	480c      	ldr	r0, [pc, #48]	; (8007dfc <prvInitialiseTaskLists+0x70>)
 8007dcc:	f7fe fc6a 	bl	80066a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007dd0:	480b      	ldr	r0, [pc, #44]	; (8007e00 <prvInitialiseTaskLists+0x74>)
 8007dd2:	f7fe fc67 	bl	80066a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <prvInitialiseTaskLists+0x78>)
 8007dd8:	4a05      	ldr	r2, [pc, #20]	; (8007df0 <prvInitialiseTaskLists+0x64>)
 8007dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	; (8007e08 <prvInitialiseTaskLists+0x7c>)
 8007dde:	4a05      	ldr	r2, [pc, #20]	; (8007df4 <prvInitialiseTaskLists+0x68>)
 8007de0:	601a      	str	r2, [r3, #0]
}
 8007de2:	bf00      	nop
 8007de4:	3708      	adds	r7, #8
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20001c4c 	.word	0x20001c4c
 8007df0:	200020ac 	.word	0x200020ac
 8007df4:	200020c0 	.word	0x200020c0
 8007df8:	200020dc 	.word	0x200020dc
 8007dfc:	200020f0 	.word	0x200020f0
 8007e00:	20002108 	.word	0x20002108
 8007e04:	200020d4 	.word	0x200020d4
 8007e08:	200020d8 	.word	0x200020d8

08007e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e12:	e019      	b.n	8007e48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e14:	f000 fe02 	bl	8008a1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e18:	4b10      	ldr	r3, [pc, #64]	; (8007e5c <prvCheckTasksWaitingTermination+0x50>)
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3304      	adds	r3, #4
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fcc7 	bl	80067b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e2a:	4b0d      	ldr	r3, [pc, #52]	; (8007e60 <prvCheckTasksWaitingTermination+0x54>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3b01      	subs	r3, #1
 8007e30:	4a0b      	ldr	r2, [pc, #44]	; (8007e60 <prvCheckTasksWaitingTermination+0x54>)
 8007e32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e34:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <prvCheckTasksWaitingTermination+0x58>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	4a0a      	ldr	r2, [pc, #40]	; (8007e64 <prvCheckTasksWaitingTermination+0x58>)
 8007e3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e3e:	f000 fe21 	bl	8008a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f848 	bl	8007ed8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e48:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <prvCheckTasksWaitingTermination+0x58>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e1      	bne.n	8007e14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200020f0 	.word	0x200020f0
 8007e60:	2000211c 	.word	0x2000211c
 8007e64:	20002104 	.word	0x20002104

08007e68 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007e74:	e005      	b.n	8007e82 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2ba5      	cmp	r3, #165	; 0xa5
 8007e88:	d0f5      	beq.n	8007e76 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	089b      	lsrs	r3, r3, #2
 8007e8e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	b29b      	uxth	r3, r3
	}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3714      	adds	r7, #20
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d102      	bne.n	8007eb4 <uxTaskGetStackHighWaterMark+0x14>
 8007eae:	4b09      	ldr	r3, [pc, #36]	; (8007ed4 <uxTaskGetStackHighWaterMark+0x34>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	e000      	b.n	8007eb6 <uxTaskGetStackHighWaterMark+0x16>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebc:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8007ebe:	6938      	ldr	r0, [r7, #16]
 8007ec0:	f7ff ffd2 	bl	8007e68 <prvTaskCheckFreeStackSpace>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20001c48 	.word	0x20001c48

08007ed8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	3354      	adds	r3, #84	; 0x54
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f001 f8f3 	bl	80090d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d108      	bne.n	8007f06 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f000 ff85 	bl	8008e08 <vPortFree>
				vPortFree( pxTCB );
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 ff82 	bl	8008e08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f04:	e01a      	b.n	8007f3c <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d103      	bne.n	8007f18 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 ff79 	bl	8008e08 <vPortFree>
	}
 8007f16:	e011      	b.n	8007f3c <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007f1e:	2b02      	cmp	r3, #2
 8007f20:	d00c      	beq.n	8007f3c <prvDeleteTCB+0x64>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	b672      	cpsid	i
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	b662      	cpsie	i
 8007f36:	60fb      	str	r3, [r7, #12]
}
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <prvDeleteTCB+0x62>
	}
 8007f3c:	bf00      	nop
 8007f3e:	3710      	adds	r7, #16
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f4a:	4b0c      	ldr	r3, [pc, #48]	; (8007f7c <prvResetNextTaskUnblockTime+0x38>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d104      	bne.n	8007f5e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f54:	4b0a      	ldr	r3, [pc, #40]	; (8007f80 <prvResetNextTaskUnblockTime+0x3c>)
 8007f56:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f5c:	e008      	b.n	8007f70 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f5e:	4b07      	ldr	r3, [pc, #28]	; (8007f7c <prvResetNextTaskUnblockTime+0x38>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	4a04      	ldr	r2, [pc, #16]	; (8007f80 <prvResetNextTaskUnblockTime+0x3c>)
 8007f6e:	6013      	str	r3, [r2, #0]
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	200020d4 	.word	0x200020d4
 8007f80:	2000213c 	.word	0x2000213c

08007f84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f8a:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <xTaskGetSchedulerState+0x34>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d102      	bne.n	8007f98 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f92:	2301      	movs	r3, #1
 8007f94:	607b      	str	r3, [r7, #4]
 8007f96:	e008      	b.n	8007faa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f98:	4b08      	ldr	r3, [pc, #32]	; (8007fbc <xTaskGetSchedulerState+0x38>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d102      	bne.n	8007fa6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	607b      	str	r3, [r7, #4]
 8007fa4:	e001      	b.n	8007faa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007faa:	687b      	ldr	r3, [r7, #4]
	}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	20002128 	.word	0x20002128
 8007fbc:	20002144 	.word	0x20002144

08007fc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d05a      	beq.n	800808c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fd6:	4b30      	ldr	r3, [pc, #192]	; (8008098 <xTaskPriorityDisinherit+0xd8>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d00c      	beq.n	8007ffa <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	b672      	cpsid	i
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	b662      	cpsie	i
 8007ff4:	60fb      	str	r3, [r7, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	e7fe      	b.n	8007ff8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10c      	bne.n	800801c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	b672      	cpsid	i
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	b662      	cpsie	i
 8008016:	60bb      	str	r3, [r7, #8]
}
 8008018:	bf00      	nop
 800801a:	e7fe      	b.n	800801a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008020:	1e5a      	subs	r2, r3, #1
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	429a      	cmp	r2, r3
 8008030:	d02c      	beq.n	800808c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008036:	2b00      	cmp	r3, #0
 8008038:	d128      	bne.n	800808c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3304      	adds	r3, #4
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fbba 	bl	80067b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008050:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4b0f      	ldr	r3, [pc, #60]	; (800809c <xTaskPriorityDisinherit+0xdc>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	429a      	cmp	r2, r3
 8008062:	d903      	bls.n	800806c <xTaskPriorityDisinherit+0xac>
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	4a0c      	ldr	r2, [pc, #48]	; (800809c <xTaskPriorityDisinherit+0xdc>)
 800806a:	6013      	str	r3, [r2, #0]
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008070:	4613      	mov	r3, r2
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	4413      	add	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <xTaskPriorityDisinherit+0xe0>)
 800807a:	441a      	add	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	3304      	adds	r3, #4
 8008080:	4619      	mov	r1, r3
 8008082:	4610      	mov	r0, r2
 8008084:	f7fe fb3b 	bl	80066fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008088:	2301      	movs	r3, #1
 800808a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800808c:	697b      	ldr	r3, [r7, #20]
	}
 800808e:	4618      	mov	r0, r3
 8008090:	3718      	adds	r7, #24
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20001c48 	.word	0x20001c48
 800809c:	20002124 	.word	0x20002124
 80080a0:	20001c4c 	.word	0x20001c4c

080080a4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080ae:	4b21      	ldr	r3, [pc, #132]	; (8008134 <prvAddCurrentTaskToDelayedList+0x90>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b4:	4b20      	ldr	r3, [pc, #128]	; (8008138 <prvAddCurrentTaskToDelayedList+0x94>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fe fb7c 	bl	80067b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d10a      	bne.n	80080de <prvAddCurrentTaskToDelayedList+0x3a>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d007      	beq.n	80080de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ce:	4b1a      	ldr	r3, [pc, #104]	; (8008138 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3304      	adds	r3, #4
 80080d4:	4619      	mov	r1, r3
 80080d6:	4819      	ldr	r0, [pc, #100]	; (800813c <prvAddCurrentTaskToDelayedList+0x98>)
 80080d8:	f7fe fb11 	bl	80066fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080dc:	e026      	b.n	800812c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080de:	68fa      	ldr	r2, [r7, #12]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4413      	add	r3, r2
 80080e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68ba      	ldr	r2, [r7, #8]
 80080ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d209      	bcs.n	800810a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f6:	4b12      	ldr	r3, [pc, #72]	; (8008140 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b0f      	ldr	r3, [pc, #60]	; (8008138 <prvAddCurrentTaskToDelayedList+0x94>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fe fb1f 	bl	8006746 <vListInsert>
}
 8008108:	e010      	b.n	800812c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800810a:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <prvAddCurrentTaskToDelayedList+0xa0>)
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	4b0a      	ldr	r3, [pc, #40]	; (8008138 <prvAddCurrentTaskToDelayedList+0x94>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3304      	adds	r3, #4
 8008114:	4619      	mov	r1, r3
 8008116:	4610      	mov	r0, r2
 8008118:	f7fe fb15 	bl	8006746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800811c:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	68ba      	ldr	r2, [r7, #8]
 8008122:	429a      	cmp	r2, r3
 8008124:	d202      	bcs.n	800812c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008126:	4a08      	ldr	r2, [pc, #32]	; (8008148 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	6013      	str	r3, [r2, #0]
}
 800812c:	bf00      	nop
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	20002120 	.word	0x20002120
 8008138:	20001c48 	.word	0x20001c48
 800813c:	20002108 	.word	0x20002108
 8008140:	200020d8 	.word	0x200020d8
 8008144:	200020d4 	.word	0x200020d4
 8008148:	2000213c 	.word	0x2000213c

0800814c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08a      	sub	sp, #40	; 0x28
 8008150:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008156:	f000 fb15 	bl	8008784 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800815a:	4b1d      	ldr	r3, [pc, #116]	; (80081d0 <xTimerCreateTimerTask+0x84>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d021      	beq.n	80081a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008162:	2300      	movs	r3, #0
 8008164:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800816a:	1d3a      	adds	r2, r7, #4
 800816c:	f107 0108 	add.w	r1, r7, #8
 8008170:	f107 030c 	add.w	r3, r7, #12
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe fa7b 	bl	8006670 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800817a:	6879      	ldr	r1, [r7, #4]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	9202      	str	r2, [sp, #8]
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	2302      	movs	r3, #2
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	2300      	movs	r3, #0
 800818a:	460a      	mov	r2, r1
 800818c:	4911      	ldr	r1, [pc, #68]	; (80081d4 <xTimerCreateTimerTask+0x88>)
 800818e:	4812      	ldr	r0, [pc, #72]	; (80081d8 <xTimerCreateTimerTask+0x8c>)
 8008190:	f7ff f846 	bl	8007220 <xTaskCreateStatic>
 8008194:	4603      	mov	r3, r0
 8008196:	4a11      	ldr	r2, [pc, #68]	; (80081dc <xTimerCreateTimerTask+0x90>)
 8008198:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800819a:	4b10      	ldr	r3, [pc, #64]	; (80081dc <xTimerCreateTimerTask+0x90>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d001      	beq.n	80081a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081a2:	2301      	movs	r3, #1
 80081a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10c      	bne.n	80081c6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 80081ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b0:	b672      	cpsid	i
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	b662      	cpsie	i
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80081c6:	697b      	ldr	r3, [r7, #20]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3718      	adds	r7, #24
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	20002178 	.word	0x20002178
 80081d4:	080092c8 	.word	0x080092c8
 80081d8:	0800831d 	.word	0x0800831d
 80081dc:	2000217c 	.word	0x2000217c

080081e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08a      	sub	sp, #40	; 0x28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	60b9      	str	r1, [r7, #8]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081ee:	2300      	movs	r3, #0
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d10c      	bne.n	8008212 <xTimerGenericCommand+0x32>
	__asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	b672      	cpsid	i
 80081fe:	f383 8811 	msr	BASEPRI, r3
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	f3bf 8f4f 	dsb	sy
 800820a:	b662      	cpsie	i
 800820c:	623b      	str	r3, [r7, #32]
}
 800820e:	bf00      	nop
 8008210:	e7fe      	b.n	8008210 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008212:	4b1a      	ldr	r3, [pc, #104]	; (800827c <xTimerGenericCommand+0x9c>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d02a      	beq.n	8008270 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b05      	cmp	r3, #5
 800822a:	dc18      	bgt.n	800825e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800822c:	f7ff feaa 	bl	8007f84 <xTaskGetSchedulerState>
 8008230:	4603      	mov	r3, r0
 8008232:	2b02      	cmp	r3, #2
 8008234:	d109      	bne.n	800824a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008236:	4b11      	ldr	r3, [pc, #68]	; (800827c <xTimerGenericCommand+0x9c>)
 8008238:	6818      	ldr	r0, [r3, #0]
 800823a:	f107 0110 	add.w	r1, r7, #16
 800823e:	2300      	movs	r3, #0
 8008240:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008242:	f7fe fbf3 	bl	8006a2c <xQueueGenericSend>
 8008246:	6278      	str	r0, [r7, #36]	; 0x24
 8008248:	e012      	b.n	8008270 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800824a:	4b0c      	ldr	r3, [pc, #48]	; (800827c <xTimerGenericCommand+0x9c>)
 800824c:	6818      	ldr	r0, [r3, #0]
 800824e:	f107 0110 	add.w	r1, r7, #16
 8008252:	2300      	movs	r3, #0
 8008254:	2200      	movs	r2, #0
 8008256:	f7fe fbe9 	bl	8006a2c <xQueueGenericSend>
 800825a:	6278      	str	r0, [r7, #36]	; 0x24
 800825c:	e008      	b.n	8008270 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800825e:	4b07      	ldr	r3, [pc, #28]	; (800827c <xTimerGenericCommand+0x9c>)
 8008260:	6818      	ldr	r0, [r3, #0]
 8008262:	f107 0110 	add.w	r1, r7, #16
 8008266:	2300      	movs	r3, #0
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	f7fe fce5 	bl	8006c38 <xQueueGenericSendFromISR>
 800826e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008272:	4618      	mov	r0, r3
 8008274:	3728      	adds	r7, #40	; 0x28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20002178 	.word	0x20002178

08008280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828a:	4b23      	ldr	r3, [pc, #140]	; (8008318 <prvProcessExpiredTimer+0x98>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fe fa8d 	bl	80067b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d024      	beq.n	80082f6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	18d1      	adds	r1, r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f000 f8d3 	bl	8008464 <prvInsertTimerInActiveList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d021      	beq.n	8008308 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082c4:	2300      	movs	r3, #0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7ff ff86 	bl	80081e0 <xTimerGenericCommand>
 80082d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d115      	bne.n	8008308 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	b672      	cpsid	i
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	b662      	cpsie	i
 80082f0:	60fb      	str	r3, [r7, #12]
}
 80082f2:	bf00      	nop
 80082f4:	e7fe      	b.n	80082f4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082fc:	f023 0301 	bic.w	r3, r3, #1
 8008300:	b2da      	uxtb	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	6a1b      	ldr	r3, [r3, #32]
 800830c:	6978      	ldr	r0, [r7, #20]
 800830e:	4798      	blx	r3
}
 8008310:	bf00      	nop
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	20002170 	.word	0x20002170

0800831c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f857 	bl	80083dc <prvGetNextExpireTime>
 800832e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f803 	bl	8008340 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800833a:	f000 f8d5 	bl	80084e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800833e:	e7f1      	b.n	8008324 <prvTimerTask+0x8>

08008340 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800834a:	f7ff f9d3 	bl	80076f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800834e:	f107 0308 	add.w	r3, r7, #8
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f866 	bl	8008424 <prvSampleTimeNow>
 8008358:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d130      	bne.n	80083c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <prvProcessTimerOrBlockTask+0x3c>
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	429a      	cmp	r2, r3
 800836c:	d806      	bhi.n	800837c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800836e:	f7ff f9cf 	bl	8007710 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008372:	68f9      	ldr	r1, [r7, #12]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7ff ff83 	bl	8008280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800837a:	e024      	b.n	80083c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d008      	beq.n	8008394 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <prvProcessTimerOrBlockTask+0x90>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d101      	bne.n	8008390 <prvProcessTimerOrBlockTask+0x50>
 800838c:	2301      	movs	r3, #1
 800838e:	e000      	b.n	8008392 <prvProcessTimerOrBlockTask+0x52>
 8008390:	2300      	movs	r3, #0
 8008392:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008394:	4b0f      	ldr	r3, [pc, #60]	; (80083d4 <prvProcessTimerOrBlockTask+0x94>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	683a      	ldr	r2, [r7, #0]
 80083a0:	4619      	mov	r1, r3
 80083a2:	f7fe ff09 	bl	80071b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083a6:	f7ff f9b3 	bl	8007710 <xTaskResumeAll>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d10a      	bne.n	80083c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083b0:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <prvProcessTimerOrBlockTask+0x98>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
}
 80083c0:	e001      	b.n	80083c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083c2:	f7ff f9a5 	bl	8007710 <xTaskResumeAll>
}
 80083c6:	bf00      	nop
 80083c8:	3710      	adds	r7, #16
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	20002174 	.word	0x20002174
 80083d4:	20002178 	.word	0x20002178
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083e4:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <prvGetNextExpireTime+0x44>)
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d101      	bne.n	80083f2 <prvGetNextExpireTime+0x16>
 80083ee:	2201      	movs	r2, #1
 80083f0:	e000      	b.n	80083f4 <prvGetNextExpireTime+0x18>
 80083f2:	2200      	movs	r2, #0
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d105      	bne.n	800840c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008400:	4b07      	ldr	r3, [pc, #28]	; (8008420 <prvGetNextExpireTime+0x44>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	60fb      	str	r3, [r7, #12]
 800840a:	e001      	b.n	8008410 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008410:	68fb      	ldr	r3, [r7, #12]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	20002170 	.word	0x20002170

08008424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800842c:	f7ff fa10 	bl	8007850 <xTaskGetTickCount>
 8008430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008432:	4b0b      	ldr	r3, [pc, #44]	; (8008460 <prvSampleTimeNow+0x3c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d205      	bcs.n	8008448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800843c:	f000 f93c 	bl	80086b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e002      	b.n	800844e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800844e:	4a04      	ldr	r2, [pc, #16]	; (8008460 <prvSampleTimeNow+0x3c>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20002180 	.word	0x20002180

08008464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d812      	bhi.n	80084b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	429a      	cmp	r2, r3
 8008496:	d302      	bcc.n	800849e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	e01b      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800849e:	4b10      	ldr	r3, [pc, #64]	; (80084e0 <prvInsertTimerInActiveList+0x7c>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fe f94c 	bl	8006746 <vListInsert>
 80084ae:	e012      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d206      	bcs.n	80084c6 <prvInsertTimerInActiveList+0x62>
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d302      	bcc.n	80084c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e007      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084c6:	4b07      	ldr	r3, [pc, #28]	; (80084e4 <prvInsertTimerInActiveList+0x80>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe f938 	bl	8006746 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20002174 	.word	0x20002174
 80084e4:	20002170 	.word	0x20002170

080084e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	; 0x38
 80084ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ee:	e0d0      	b.n	8008692 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da1a      	bge.n	800852c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084f6:	1d3b      	adds	r3, r7, #4
 80084f8:	3304      	adds	r3, #4
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10c      	bne.n	800851c <prvProcessReceivedCommands+0x34>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	b672      	cpsid	i
 8008508:	f383 8811 	msr	BASEPRI, r3
 800850c:	f3bf 8f6f 	isb	sy
 8008510:	f3bf 8f4f 	dsb	sy
 8008514:	b662      	cpsie	i
 8008516:	61fb      	str	r3, [r7, #28]
}
 8008518:	bf00      	nop
 800851a:	e7fe      	b.n	800851a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800851c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008522:	6850      	ldr	r0, [r2, #4]
 8008524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008526:	6892      	ldr	r2, [r2, #8]
 8008528:	4611      	mov	r1, r2
 800852a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	f2c0 80ae 	blt.w	8008690 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	695b      	ldr	r3, [r3, #20]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	3304      	adds	r3, #4
 8008544:	4618      	mov	r0, r3
 8008546:	f7fe f937 	bl	80067b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800854a:	463b      	mov	r3, r7
 800854c:	4618      	mov	r0, r3
 800854e:	f7ff ff69 	bl	8008424 <prvSampleTimeNow>
 8008552:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b09      	cmp	r3, #9
 8008558:	f200 809b 	bhi.w	8008692 <prvProcessReceivedCommands+0x1aa>
 800855c:	a201      	add	r2, pc, #4	; (adr r2, 8008564 <prvProcessReceivedCommands+0x7c>)
 800855e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008562:	bf00      	nop
 8008564:	0800858d 	.word	0x0800858d
 8008568:	0800858d 	.word	0x0800858d
 800856c:	0800858d 	.word	0x0800858d
 8008570:	08008605 	.word	0x08008605
 8008574:	08008619 	.word	0x08008619
 8008578:	08008667 	.word	0x08008667
 800857c:	0800858d 	.word	0x0800858d
 8008580:	0800858d 	.word	0x0800858d
 8008584:	08008605 	.word	0x08008605
 8008588:	08008619 	.word	0x08008619
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008592:	f043 0301 	orr.w	r3, r3, #1
 8008596:	b2da      	uxtb	r2, r3
 8008598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	18d1      	adds	r1, r2, r3
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ac:	f7ff ff5a 	bl	8008464 <prvInsertTimerInActiveList>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d06d      	beq.n	8008692 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b8:	6a1b      	ldr	r3, [r3, #32]
 80085ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085c4:	f003 0304 	and.w	r3, r3, #4
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d062      	beq.n	8008692 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085cc:	68ba      	ldr	r2, [r7, #8]
 80085ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	441a      	add	r2, r3
 80085d4:	2300      	movs	r3, #0
 80085d6:	9300      	str	r3, [sp, #0]
 80085d8:	2300      	movs	r3, #0
 80085da:	2100      	movs	r1, #0
 80085dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085de:	f7ff fdff 	bl	80081e0 <xTimerGenericCommand>
 80085e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085e4:	6a3b      	ldr	r3, [r7, #32]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d153      	bne.n	8008692 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ee:	b672      	cpsid	i
 80085f0:	f383 8811 	msr	BASEPRI, r3
 80085f4:	f3bf 8f6f 	isb	sy
 80085f8:	f3bf 8f4f 	dsb	sy
 80085fc:	b662      	cpsie	i
 80085fe:	61bb      	str	r3, [r7, #24]
}
 8008600:	bf00      	nop
 8008602:	e7fe      	b.n	8008602 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860a:	f023 0301 	bic.w	r3, r3, #1
 800860e:	b2da      	uxtb	r2, r3
 8008610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008616:	e03c      	b.n	8008692 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800861e:	f043 0301 	orr.w	r3, r3, #1
 8008622:	b2da      	uxtb	r2, r3
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d10c      	bne.n	8008652 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8008638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863c:	b672      	cpsid	i
 800863e:	f383 8811 	msr	BASEPRI, r3
 8008642:	f3bf 8f6f 	isb	sy
 8008646:	f3bf 8f4f 	dsb	sy
 800864a:	b662      	cpsie	i
 800864c:	617b      	str	r3, [r7, #20]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	699a      	ldr	r2, [r3, #24]
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	18d1      	adds	r1, r2, r3
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008660:	f7ff ff00 	bl	8008464 <prvInsertTimerInActiveList>
					break;
 8008664:	e015      	b.n	8008692 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008668:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800866c:	f003 0302 	and.w	r3, r3, #2
 8008670:	2b00      	cmp	r3, #0
 8008672:	d103      	bne.n	800867c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8008674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008676:	f000 fbc7 	bl	8008e08 <vPortFree>
 800867a:	e00a      	b.n	8008692 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800867c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800867e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008682:	f023 0301 	bic.w	r3, r3, #1
 8008686:	b2da      	uxtb	r2, r3
 8008688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800868a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800868e:	e000      	b.n	8008692 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008690:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008692:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <prvProcessReceivedCommands+0x1cc>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	1d39      	adds	r1, r7, #4
 8008698:	2200      	movs	r2, #0
 800869a:	4618      	mov	r0, r3
 800869c:	f7fe fb6c 	bl	8006d78 <xQueueReceive>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f47f af24 	bne.w	80084f0 <prvProcessReceivedCommands+0x8>
	}
}
 80086a8:	bf00      	nop
 80086aa:	bf00      	nop
 80086ac:	3730      	adds	r7, #48	; 0x30
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20002178 	.word	0x20002178

080086b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086be:	e04a      	b.n	8008756 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086c0:	4b2e      	ldr	r3, [pc, #184]	; (800877c <prvSwitchTimerLists+0xc4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ca:	4b2c      	ldr	r3, [pc, #176]	; (800877c <prvSwitchTimerLists+0xc4>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3304      	adds	r3, #4
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fe f86d 	bl	80067b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	68f8      	ldr	r0, [r7, #12]
 80086e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d030      	beq.n	8008756 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	429a      	cmp	r2, r3
 8008704:	d90e      	bls.n	8008724 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68ba      	ldr	r2, [r7, #8]
 800870a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008712:	4b1a      	ldr	r3, [pc, #104]	; (800877c <prvSwitchTimerLists+0xc4>)
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3304      	adds	r3, #4
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f7fe f812 	bl	8006746 <vListInsert>
 8008722:	e018      	b.n	8008756 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008724:	2300      	movs	r3, #0
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	2300      	movs	r3, #0
 800872a:	693a      	ldr	r2, [r7, #16]
 800872c:	2100      	movs	r1, #0
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7ff fd56 	bl	80081e0 <xTimerGenericCommand>
 8008734:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d10c      	bne.n	8008756 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800873c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008740:	b672      	cpsid	i
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	b662      	cpsie	i
 8008750:	603b      	str	r3, [r7, #0]
}
 8008752:	bf00      	nop
 8008754:	e7fe      	b.n	8008754 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <prvSwitchTimerLists+0xc4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1af      	bne.n	80086c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008760:	4b06      	ldr	r3, [pc, #24]	; (800877c <prvSwitchTimerLists+0xc4>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008766:	4b06      	ldr	r3, [pc, #24]	; (8008780 <prvSwitchTimerLists+0xc8>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a04      	ldr	r2, [pc, #16]	; (800877c <prvSwitchTimerLists+0xc4>)
 800876c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800876e:	4a04      	ldr	r2, [pc, #16]	; (8008780 <prvSwitchTimerLists+0xc8>)
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	6013      	str	r3, [r2, #0]
}
 8008774:	bf00      	nop
 8008776:	3718      	adds	r7, #24
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}
 800877c:	20002170 	.word	0x20002170
 8008780:	20002174 	.word	0x20002174

08008784 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800878a:	f000 f947 	bl	8008a1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <prvCheckForValidListAndQueue+0x60>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d120      	bne.n	80087d8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008796:	4814      	ldr	r0, [pc, #80]	; (80087e8 <prvCheckForValidListAndQueue+0x64>)
 8008798:	f7fd ff84 	bl	80066a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800879c:	4813      	ldr	r0, [pc, #76]	; (80087ec <prvCheckForValidListAndQueue+0x68>)
 800879e:	f7fd ff81 	bl	80066a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087a2:	4b13      	ldr	r3, [pc, #76]	; (80087f0 <prvCheckForValidListAndQueue+0x6c>)
 80087a4:	4a10      	ldr	r2, [pc, #64]	; (80087e8 <prvCheckForValidListAndQueue+0x64>)
 80087a6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087a8:	4b12      	ldr	r3, [pc, #72]	; (80087f4 <prvCheckForValidListAndQueue+0x70>)
 80087aa:	4a10      	ldr	r2, [pc, #64]	; (80087ec <prvCheckForValidListAndQueue+0x68>)
 80087ac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087ae:	2300      	movs	r3, #0
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	4b11      	ldr	r3, [pc, #68]	; (80087f8 <prvCheckForValidListAndQueue+0x74>)
 80087b4:	4a11      	ldr	r2, [pc, #68]	; (80087fc <prvCheckForValidListAndQueue+0x78>)
 80087b6:	2110      	movs	r1, #16
 80087b8:	200a      	movs	r0, #10
 80087ba:	f7fe f891 	bl	80068e0 <xQueueGenericCreateStatic>
 80087be:	4603      	mov	r3, r0
 80087c0:	4a08      	ldr	r2, [pc, #32]	; (80087e4 <prvCheckForValidListAndQueue+0x60>)
 80087c2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087c4:	4b07      	ldr	r3, [pc, #28]	; (80087e4 <prvCheckForValidListAndQueue+0x60>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d005      	beq.n	80087d8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <prvCheckForValidListAndQueue+0x60>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	490b      	ldr	r1, [pc, #44]	; (8008800 <prvCheckForValidListAndQueue+0x7c>)
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fe fcc6 	bl	8007164 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087d8:	f000 f954 	bl	8008a84 <vPortExitCritical>
}
 80087dc:	bf00      	nop
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20002178 	.word	0x20002178
 80087e8:	20002148 	.word	0x20002148
 80087ec:	2000215c 	.word	0x2000215c
 80087f0:	20002170 	.word	0x20002170
 80087f4:	20002174 	.word	0x20002174
 80087f8:	20002224 	.word	0x20002224
 80087fc:	20002184 	.word	0x20002184
 8008800:	080092d0 	.word	0x080092d0

08008804 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3b04      	subs	r3, #4
 8008814:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800881c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3b04      	subs	r3, #4
 8008822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f023 0201 	bic.w	r2, r3, #1
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3b04      	subs	r3, #4
 8008832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008834:	4a0c      	ldr	r2, [pc, #48]	; (8008868 <pxPortInitialiseStack+0x64>)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3b14      	subs	r3, #20
 800883e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3b04      	subs	r3, #4
 800884a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f06f 0202 	mvn.w	r2, #2
 8008852:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b20      	subs	r3, #32
 8008858:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800885a:	68fb      	ldr	r3, [r7, #12]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	0800886d 	.word	0x0800886d

0800886c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008876:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <prvTaskExitError+0x5c>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800887e:	d00c      	beq.n	800889a <prvTaskExitError+0x2e>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	b672      	cpsid	i
 8008886:	f383 8811 	msr	BASEPRI, r3
 800888a:	f3bf 8f6f 	isb	sy
 800888e:	f3bf 8f4f 	dsb	sy
 8008892:	b662      	cpsie	i
 8008894:	60fb      	str	r3, [r7, #12]
}
 8008896:	bf00      	nop
 8008898:	e7fe      	b.n	8008898 <prvTaskExitError+0x2c>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889e:	b672      	cpsid	i
 80088a0:	f383 8811 	msr	BASEPRI, r3
 80088a4:	f3bf 8f6f 	isb	sy
 80088a8:	f3bf 8f4f 	dsb	sy
 80088ac:	b662      	cpsie	i
 80088ae:	60bb      	str	r3, [r7, #8]
}
 80088b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088b2:	bf00      	nop
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d0fc      	beq.n	80088b4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088ba:	bf00      	nop
 80088bc:	bf00      	nop
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	2000000c 	.word	0x2000000c
 80088cc:	00000000 	.word	0x00000000

080088d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088d0:	4b07      	ldr	r3, [pc, #28]	; (80088f0 <pxCurrentTCBConst2>)
 80088d2:	6819      	ldr	r1, [r3, #0]
 80088d4:	6808      	ldr	r0, [r1, #0]
 80088d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088da:	f380 8809 	msr	PSP, r0
 80088de:	f3bf 8f6f 	isb	sy
 80088e2:	f04f 0000 	mov.w	r0, #0
 80088e6:	f380 8811 	msr	BASEPRI, r0
 80088ea:	4770      	bx	lr
 80088ec:	f3af 8000 	nop.w

080088f0 <pxCurrentTCBConst2>:
 80088f0:	20001c48 	.word	0x20001c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088f4:	bf00      	nop
 80088f6:	bf00      	nop

080088f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088f8:	4808      	ldr	r0, [pc, #32]	; (800891c <prvPortStartFirstTask+0x24>)
 80088fa:	6800      	ldr	r0, [r0, #0]
 80088fc:	6800      	ldr	r0, [r0, #0]
 80088fe:	f380 8808 	msr	MSP, r0
 8008902:	f04f 0000 	mov.w	r0, #0
 8008906:	f380 8814 	msr	CONTROL, r0
 800890a:	b662      	cpsie	i
 800890c:	b661      	cpsie	f
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	df00      	svc	0
 8008918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800891a:	bf00      	nop
 800891c:	e000ed08 	.word	0xe000ed08

08008920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008926:	4b37      	ldr	r3, [pc, #220]	; (8008a04 <xPortStartScheduler+0xe4>)
 8008928:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	781b      	ldrb	r3, [r3, #0]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	22ff      	movs	r2, #255	; 0xff
 8008936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008940:	78fb      	ldrb	r3, [r7, #3]
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008948:	b2da      	uxtb	r2, r3
 800894a:	4b2f      	ldr	r3, [pc, #188]	; (8008a08 <xPortStartScheduler+0xe8>)
 800894c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800894e:	4b2f      	ldr	r3, [pc, #188]	; (8008a0c <xPortStartScheduler+0xec>)
 8008950:	2207      	movs	r2, #7
 8008952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008954:	e009      	b.n	800896a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008956:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <xPortStartScheduler+0xec>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3b01      	subs	r3, #1
 800895c:	4a2b      	ldr	r2, [pc, #172]	; (8008a0c <xPortStartScheduler+0xec>)
 800895e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	b2db      	uxtb	r3, r3
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800896a:	78fb      	ldrb	r3, [r7, #3]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d0ef      	beq.n	8008956 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008976:	4b25      	ldr	r3, [pc, #148]	; (8008a0c <xPortStartScheduler+0xec>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f1c3 0307 	rsb	r3, r3, #7
 800897e:	2b04      	cmp	r3, #4
 8008980:	d00c      	beq.n	800899c <xPortStartScheduler+0x7c>
	__asm volatile
 8008982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008986:	b672      	cpsid	i
 8008988:	f383 8811 	msr	BASEPRI, r3
 800898c:	f3bf 8f6f 	isb	sy
 8008990:	f3bf 8f4f 	dsb	sy
 8008994:	b662      	cpsie	i
 8008996:	60bb      	str	r3, [r7, #8]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800899c:	4b1b      	ldr	r3, [pc, #108]	; (8008a0c <xPortStartScheduler+0xec>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	021b      	lsls	r3, r3, #8
 80089a2:	4a1a      	ldr	r2, [pc, #104]	; (8008a0c <xPortStartScheduler+0xec>)
 80089a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089a6:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <xPortStartScheduler+0xec>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089ae:	4a17      	ldr	r2, [pc, #92]	; (8008a0c <xPortStartScheduler+0xec>)
 80089b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089ba:	4b15      	ldr	r3, [pc, #84]	; (8008a10 <xPortStartScheduler+0xf0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a14      	ldr	r2, [pc, #80]	; (8008a10 <xPortStartScheduler+0xf0>)
 80089c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089c6:	4b12      	ldr	r3, [pc, #72]	; (8008a10 <xPortStartScheduler+0xf0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a11      	ldr	r2, [pc, #68]	; (8008a10 <xPortStartScheduler+0xf0>)
 80089cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089d2:	f000 f8dd 	bl	8008b90 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089d6:	4b0f      	ldr	r3, [pc, #60]	; (8008a14 <xPortStartScheduler+0xf4>)
 80089d8:	2200      	movs	r2, #0
 80089da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089dc:	f000 f8fc 	bl	8008bd8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089e0:	4b0d      	ldr	r3, [pc, #52]	; (8008a18 <xPortStartScheduler+0xf8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a0c      	ldr	r2, [pc, #48]	; (8008a18 <xPortStartScheduler+0xf8>)
 80089e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089ec:	f7ff ff84 	bl	80088f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089f0:	f7ff f80c 	bl	8007a0c <vTaskSwitchContext>
	prvTaskExitError();
 80089f4:	f7ff ff3a 	bl	800886c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	e000e400 	.word	0xe000e400
 8008a08:	20002274 	.word	0x20002274
 8008a0c:	20002278 	.word	0x20002278
 8008a10:	e000ed20 	.word	0xe000ed20
 8008a14:	2000000c 	.word	0x2000000c
 8008a18:	e000ef34 	.word	0xe000ef34

08008a1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
	__asm volatile
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	b672      	cpsid	i
 8008a28:	f383 8811 	msr	BASEPRI, r3
 8008a2c:	f3bf 8f6f 	isb	sy
 8008a30:	f3bf 8f4f 	dsb	sy
 8008a34:	b662      	cpsie	i
 8008a36:	607b      	str	r3, [r7, #4]
}
 8008a38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <vPortEnterCritical+0x60>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3301      	adds	r3, #1
 8008a40:	4a0e      	ldr	r2, [pc, #56]	; (8008a7c <vPortEnterCritical+0x60>)
 8008a42:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a44:	4b0d      	ldr	r3, [pc, #52]	; (8008a7c <vPortEnterCritical+0x60>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d111      	bne.n	8008a70 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <vPortEnterCritical+0x64>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00c      	beq.n	8008a70 <vPortEnterCritical+0x54>
	__asm volatile
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	b672      	cpsid	i
 8008a5c:	f383 8811 	msr	BASEPRI, r3
 8008a60:	f3bf 8f6f 	isb	sy
 8008a64:	f3bf 8f4f 	dsb	sy
 8008a68:	b662      	cpsie	i
 8008a6a:	603b      	str	r3, [r7, #0]
}
 8008a6c:	bf00      	nop
 8008a6e:	e7fe      	b.n	8008a6e <vPortEnterCritical+0x52>
	}
}
 8008a70:	bf00      	nop
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	2000000c 	.word	0x2000000c
 8008a80:	e000ed04 	.word	0xe000ed04

08008a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a8a:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <vPortExitCritical+0x54>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10c      	bne.n	8008aac <vPortExitCritical+0x28>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	b672      	cpsid	i
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	b662      	cpsie	i
 8008aa6:	607b      	str	r3, [r7, #4]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008aac:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <vPortExitCritical+0x54>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <vPortExitCritical+0x54>)
 8008ab4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ab6:	4b08      	ldr	r3, [pc, #32]	; (8008ad8 <vPortExitCritical+0x54>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d105      	bne.n	8008aca <vPortExitCritical+0x46>
 8008abe:	2300      	movs	r3, #0
 8008ac0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	f383 8811 	msr	BASEPRI, r3
}
 8008ac8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	2000000c 	.word	0x2000000c
 8008adc:	00000000 	.word	0x00000000

08008ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008ae0:	f3ef 8009 	mrs	r0, PSP
 8008ae4:	f3bf 8f6f 	isb	sy
 8008ae8:	4b15      	ldr	r3, [pc, #84]	; (8008b40 <pxCurrentTCBConst>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	f01e 0f10 	tst.w	lr, #16
 8008af0:	bf08      	it	eq
 8008af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afa:	6010      	str	r0, [r2, #0]
 8008afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f380 8811 	msr	BASEPRI, r0
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	f7fe ff7a 	bl	8007a0c <vTaskSwitchContext>
 8008b18:	f04f 0000 	mov.w	r0, #0
 8008b1c:	f380 8811 	msr	BASEPRI, r0
 8008b20:	bc09      	pop	{r0, r3}
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	6808      	ldr	r0, [r1, #0]
 8008b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	f01e 0f10 	tst.w	lr, #16
 8008b2e:	bf08      	it	eq
 8008b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b34:	f380 8809 	msr	PSP, r0
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	4770      	bx	lr
 8008b3e:	bf00      	nop

08008b40 <pxCurrentTCBConst>:
 8008b40:	20001c48 	.word	0x20001c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b52:	b672      	cpsid	i
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	b662      	cpsie	i
 8008b62:	607b      	str	r3, [r7, #4]
}
 8008b64:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b66:	f7fe fe95 	bl	8007894 <xTaskIncrementTick>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b70:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <SysTick_Handler+0x44>)
 8008b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b76:	601a      	str	r2, [r3, #0]
 8008b78:	2300      	movs	r3, #0
 8008b7a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f383 8811 	msr	BASEPRI, r3
}
 8008b82:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b90:	b480      	push	{r7}
 8008b92:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b94:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <vPortSetupTimerInterrupt+0x34>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b9a:	4b0b      	ldr	r3, [pc, #44]	; (8008bc8 <vPortSetupTimerInterrupt+0x38>)
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ba0:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <vPortSetupTimerInterrupt+0x3c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a0a      	ldr	r2, [pc, #40]	; (8008bd0 <vPortSetupTimerInterrupt+0x40>)
 8008ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8008baa:	099b      	lsrs	r3, r3, #6
 8008bac:	4a09      	ldr	r2, [pc, #36]	; (8008bd4 <vPortSetupTimerInterrupt+0x44>)
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bb2:	4b04      	ldr	r3, [pc, #16]	; (8008bc4 <vPortSetupTimerInterrupt+0x34>)
 8008bb4:	2207      	movs	r2, #7
 8008bb6:	601a      	str	r2, [r3, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	e000e010 	.word	0xe000e010
 8008bc8:	e000e018 	.word	0xe000e018
 8008bcc:	20000000 	.word	0x20000000
 8008bd0:	10624dd3 	.word	0x10624dd3
 8008bd4:	e000e014 	.word	0xe000e014

08008bd8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008bd8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008be8 <vPortEnableVFP+0x10>
 8008bdc:	6801      	ldr	r1, [r0, #0]
 8008bde:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008be2:	6001      	str	r1, [r0, #0]
 8008be4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008be6:	bf00      	nop
 8008be8:	e000ed88 	.word	0xe000ed88

08008bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bf2:	f3ef 8305 	mrs	r3, IPSR
 8008bf6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d916      	bls.n	8008c2c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008bfe:	4a19      	ldr	r2, [pc, #100]	; (8008c64 <vPortValidateInterruptPriority+0x78>)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	4413      	add	r3, r2
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c08:	4b17      	ldr	r3, [pc, #92]	; (8008c68 <vPortValidateInterruptPriority+0x7c>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	7afa      	ldrb	r2, [r7, #11]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d20c      	bcs.n	8008c2c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	b672      	cpsid	i
 8008c18:	f383 8811 	msr	BASEPRI, r3
 8008c1c:	f3bf 8f6f 	isb	sy
 8008c20:	f3bf 8f4f 	dsb	sy
 8008c24:	b662      	cpsie	i
 8008c26:	607b      	str	r3, [r7, #4]
}
 8008c28:	bf00      	nop
 8008c2a:	e7fe      	b.n	8008c2a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c2c:	4b0f      	ldr	r3, [pc, #60]	; (8008c6c <vPortValidateInterruptPriority+0x80>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <vPortValidateInterruptPriority+0x84>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	d90c      	bls.n	8008c56 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c40:	b672      	cpsid	i
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	b662      	cpsie	i
 8008c50:	603b      	str	r3, [r7, #0]
}
 8008c52:	bf00      	nop
 8008c54:	e7fe      	b.n	8008c54 <vPortValidateInterruptPriority+0x68>
	}
 8008c56:	bf00      	nop
 8008c58:	3714      	adds	r7, #20
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	e000e3f0 	.word	0xe000e3f0
 8008c68:	20002274 	.word	0x20002274
 8008c6c:	e000ed0c 	.word	0xe000ed0c
 8008c70:	20002278 	.word	0x20002278

08008c74 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b08a      	sub	sp, #40	; 0x28
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c80:	f7fe fd38 	bl	80076f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c84:	4b5b      	ldr	r3, [pc, #364]	; (8008df4 <pvPortMalloc+0x180>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c8c:	f000 f91a 	bl	8008ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c90:	4b59      	ldr	r3, [pc, #356]	; (8008df8 <pvPortMalloc+0x184>)
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4013      	ands	r3, r2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f040 8092 	bne.w	8008dc2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d01f      	beq.n	8008ce4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f003 0307 	and.w	r3, r3, #7
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d016      	beq.n	8008ce4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f023 0307 	bic.w	r3, r3, #7
 8008cbc:	3308      	adds	r3, #8
 8008cbe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f003 0307 	and.w	r3, r3, #7
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <pvPortMalloc+0x70>
	__asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cce:	b672      	cpsid	i
 8008cd0:	f383 8811 	msr	BASEPRI, r3
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	b662      	cpsie	i
 8008cde:	617b      	str	r3, [r7, #20]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d06b      	beq.n	8008dc2 <pvPortMalloc+0x14e>
 8008cea:	4b44      	ldr	r3, [pc, #272]	; (8008dfc <pvPortMalloc+0x188>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d866      	bhi.n	8008dc2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cf4:	4b42      	ldr	r3, [pc, #264]	; (8008e00 <pvPortMalloc+0x18c>)
 8008cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cf8:	4b41      	ldr	r3, [pc, #260]	; (8008e00 <pvPortMalloc+0x18c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfe:	e004      	b.n	8008d0a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d903      	bls.n	8008d1c <pvPortMalloc+0xa8>
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f1      	bne.n	8008d00 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d1c:	4b35      	ldr	r3, [pc, #212]	; (8008df4 <pvPortMalloc+0x180>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d04d      	beq.n	8008dc2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4413      	add	r3, r2
 8008d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	2308      	movs	r3, #8
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d921      	bls.n	8008d8c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <pvPortMalloc+0x100>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	b672      	cpsid	i
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	b662      	cpsie	i
 8008d6e:	613b      	str	r3, [r7, #16]
}
 8008d70:	bf00      	nop
 8008d72:	e7fe      	b.n	8008d72 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	1ad2      	subs	r2, r2, r3
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d86:	69b8      	ldr	r0, [r7, #24]
 8008d88:	f000 f8fe 	bl	8008f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d8c:	4b1b      	ldr	r3, [pc, #108]	; (8008dfc <pvPortMalloc+0x188>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <pvPortMalloc+0x188>)
 8008d98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d9a:	4b18      	ldr	r3, [pc, #96]	; (8008dfc <pvPortMalloc+0x188>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b19      	ldr	r3, [pc, #100]	; (8008e04 <pvPortMalloc+0x190>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d203      	bcs.n	8008dae <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da6:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <pvPortMalloc+0x188>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <pvPortMalloc+0x190>)
 8008dac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	685a      	ldr	r2, [r3, #4]
 8008db2:	4b11      	ldr	r3, [pc, #68]	; (8008df8 <pvPortMalloc+0x184>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	431a      	orrs	r2, r3
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dc2:	f7fe fca5 	bl	8007710 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d00c      	beq.n	8008dea <pvPortMalloc+0x176>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	b672      	cpsid	i
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	b662      	cpsie	i
 8008de4:	60fb      	str	r3, [r7, #12]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <pvPortMalloc+0x174>
	return pvReturn;
 8008dea:	69fb      	ldr	r3, [r7, #28]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3728      	adds	r7, #40	; 0x28
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}
 8008df4:	20005e84 	.word	0x20005e84
 8008df8:	20005e90 	.word	0x20005e90
 8008dfc:	20005e88 	.word	0x20005e88
 8008e00:	20005e7c 	.word	0x20005e7c
 8008e04:	20005e8c 	.word	0x20005e8c

08008e08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d04c      	beq.n	8008eb4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e1a:	2308      	movs	r3, #8
 8008e1c:	425b      	negs	r3, r3
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	4413      	add	r3, r2
 8008e22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	685a      	ldr	r2, [r3, #4]
 8008e2c:	4b23      	ldr	r3, [pc, #140]	; (8008ebc <vPortFree+0xb4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4013      	ands	r3, r2
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10c      	bne.n	8008e50 <vPortFree+0x48>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	b672      	cpsid	i
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	b662      	cpsie	i
 8008e4a:	60fb      	str	r3, [r7, #12]
}
 8008e4c:	bf00      	nop
 8008e4e:	e7fe      	b.n	8008e4e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00c      	beq.n	8008e72 <vPortFree+0x6a>
	__asm volatile
 8008e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e5c:	b672      	cpsid	i
 8008e5e:	f383 8811 	msr	BASEPRI, r3
 8008e62:	f3bf 8f6f 	isb	sy
 8008e66:	f3bf 8f4f 	dsb	sy
 8008e6a:	b662      	cpsie	i
 8008e6c:	60bb      	str	r3, [r7, #8]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	4b11      	ldr	r3, [pc, #68]	; (8008ebc <vPortFree+0xb4>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d019      	beq.n	8008eb4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d115      	bne.n	8008eb4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b0b      	ldr	r3, [pc, #44]	; (8008ebc <vPortFree+0xb4>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	401a      	ands	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e98:	f7fe fc2c 	bl	80076f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	4b07      	ldr	r3, [pc, #28]	; (8008ec0 <vPortFree+0xb8>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4a06      	ldr	r2, [pc, #24]	; (8008ec0 <vPortFree+0xb8>)
 8008ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eaa:	6938      	ldr	r0, [r7, #16]
 8008eac:	f000 f86c 	bl	8008f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008eb0:	f7fe fc2e 	bl	8007710 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008eb4:	bf00      	nop
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20005e90 	.word	0x20005e90
 8008ec0:	20005e88 	.word	0x20005e88

08008ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ed0:	4b27      	ldr	r3, [pc, #156]	; (8008f70 <prvHeapInit+0xac>)
 8008ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f003 0307 	and.w	r3, r3, #7
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00c      	beq.n	8008ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3307      	adds	r3, #7
 8008ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f023 0307 	bic.w	r3, r3, #7
 8008eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	4a1f      	ldr	r2, [pc, #124]	; (8008f70 <prvHeapInit+0xac>)
 8008ef4:	4413      	add	r3, r2
 8008ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008efc:	4a1d      	ldr	r2, [pc, #116]	; (8008f74 <prvHeapInit+0xb0>)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <prvHeapInit+0xb0>)
 8008f04:	2200      	movs	r2, #0
 8008f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f10:	2208      	movs	r2, #8
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	1a9b      	subs	r3, r3, r2
 8008f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0307 	bic.w	r3, r3, #7
 8008f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <prvHeapInit+0xb4>)
 8008f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f26:	4b14      	ldr	r3, [pc, #80]	; (8008f78 <prvHeapInit+0xb4>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f2e:	4b12      	ldr	r3, [pc, #72]	; (8008f78 <prvHeapInit+0xb4>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2200      	movs	r2, #0
 8008f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	68fa      	ldr	r2, [r7, #12]
 8008f3e:	1ad2      	subs	r2, r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f44:	4b0c      	ldr	r3, [pc, #48]	; (8008f78 <prvHeapInit+0xb4>)
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	4a0a      	ldr	r2, [pc, #40]	; (8008f7c <prvHeapInit+0xb8>)
 8008f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a09      	ldr	r2, [pc, #36]	; (8008f80 <prvHeapInit+0xbc>)
 8008f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f5c:	4b09      	ldr	r3, [pc, #36]	; (8008f84 <prvHeapInit+0xc0>)
 8008f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f62:	601a      	str	r2, [r3, #0]
}
 8008f64:	bf00      	nop
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr
 8008f70:	2000227c 	.word	0x2000227c
 8008f74:	20005e7c 	.word	0x20005e7c
 8008f78:	20005e84 	.word	0x20005e84
 8008f7c:	20005e8c 	.word	0x20005e8c
 8008f80:	20005e88 	.word	0x20005e88
 8008f84:	20005e90 	.word	0x20005e90

08008f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f90:	4b28      	ldr	r3, [pc, #160]	; (8009034 <prvInsertBlockIntoFreeList+0xac>)
 8008f92:	60fb      	str	r3, [r7, #12]
 8008f94:	e002      	b.n	8008f9c <prvInsertBlockIntoFreeList+0x14>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d8f7      	bhi.n	8008f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	429a      	cmp	r2, r3
 8008fb6:	d108      	bne.n	8008fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	441a      	add	r2, r3
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	68ba      	ldr	r2, [r7, #8]
 8008fd4:	441a      	add	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d118      	bne.n	8009010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b15      	ldr	r3, [pc, #84]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d00d      	beq.n	8009006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	441a      	add	r2, r3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	e008      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009006:	4b0c      	ldr	r3, [pc, #48]	; (8009038 <prvInsertBlockIntoFreeList+0xb0>)
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e003      	b.n	8009018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	429a      	cmp	r2, r3
 800901e:	d002      	beq.n	8009026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	20005e7c 	.word	0x20005e7c
 8009038:	20005e84 	.word	0x20005e84

0800903c <__libc_init_array>:
 800903c:	b570      	push	{r4, r5, r6, lr}
 800903e:	4d0d      	ldr	r5, [pc, #52]	; (8009074 <__libc_init_array+0x38>)
 8009040:	4c0d      	ldr	r4, [pc, #52]	; (8009078 <__libc_init_array+0x3c>)
 8009042:	1b64      	subs	r4, r4, r5
 8009044:	10a4      	asrs	r4, r4, #2
 8009046:	2600      	movs	r6, #0
 8009048:	42a6      	cmp	r6, r4
 800904a:	d109      	bne.n	8009060 <__libc_init_array+0x24>
 800904c:	4d0b      	ldr	r5, [pc, #44]	; (800907c <__libc_init_array+0x40>)
 800904e:	4c0c      	ldr	r4, [pc, #48]	; (8009080 <__libc_init_array+0x44>)
 8009050:	f000 f8f2 	bl	8009238 <_init>
 8009054:	1b64      	subs	r4, r4, r5
 8009056:	10a4      	asrs	r4, r4, #2
 8009058:	2600      	movs	r6, #0
 800905a:	42a6      	cmp	r6, r4
 800905c:	d105      	bne.n	800906a <__libc_init_array+0x2e>
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	f855 3b04 	ldr.w	r3, [r5], #4
 8009064:	4798      	blx	r3
 8009066:	3601      	adds	r6, #1
 8009068:	e7ee      	b.n	8009048 <__libc_init_array+0xc>
 800906a:	f855 3b04 	ldr.w	r3, [r5], #4
 800906e:	4798      	blx	r3
 8009070:	3601      	adds	r6, #1
 8009072:	e7f2      	b.n	800905a <__libc_init_array+0x1e>
 8009074:	080093ac 	.word	0x080093ac
 8009078:	080093ac 	.word	0x080093ac
 800907c:	080093ac 	.word	0x080093ac
 8009080:	080093b0 	.word	0x080093b0

08009084 <__retarget_lock_acquire_recursive>:
 8009084:	4770      	bx	lr

08009086 <__retarget_lock_release_recursive>:
 8009086:	4770      	bx	lr

08009088 <memcpy>:
 8009088:	440a      	add	r2, r1
 800908a:	4291      	cmp	r1, r2
 800908c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009090:	d100      	bne.n	8009094 <memcpy+0xc>
 8009092:	4770      	bx	lr
 8009094:	b510      	push	{r4, lr}
 8009096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800909a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800909e:	4291      	cmp	r1, r2
 80090a0:	d1f9      	bne.n	8009096 <memcpy+0xe>
 80090a2:	bd10      	pop	{r4, pc}

080090a4 <memset>:
 80090a4:	4402      	add	r2, r0
 80090a6:	4603      	mov	r3, r0
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d100      	bne.n	80090ae <memset+0xa>
 80090ac:	4770      	bx	lr
 80090ae:	f803 1b01 	strb.w	r1, [r3], #1
 80090b2:	e7f9      	b.n	80090a8 <memset+0x4>

080090b4 <cleanup_glue>:
 80090b4:	b538      	push	{r3, r4, r5, lr}
 80090b6:	460c      	mov	r4, r1
 80090b8:	6809      	ldr	r1, [r1, #0]
 80090ba:	4605      	mov	r5, r0
 80090bc:	b109      	cbz	r1, 80090c2 <cleanup_glue+0xe>
 80090be:	f7ff fff9 	bl	80090b4 <cleanup_glue>
 80090c2:	4621      	mov	r1, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ca:	f000 b869 	b.w	80091a0 <_free_r>
	...

080090d0 <_reclaim_reent>:
 80090d0:	4b2c      	ldr	r3, [pc, #176]	; (8009184 <_reclaim_reent+0xb4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4283      	cmp	r3, r0
 80090d6:	b570      	push	{r4, r5, r6, lr}
 80090d8:	4604      	mov	r4, r0
 80090da:	d051      	beq.n	8009180 <_reclaim_reent+0xb0>
 80090dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80090de:	b143      	cbz	r3, 80090f2 <_reclaim_reent+0x22>
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d14a      	bne.n	800917c <_reclaim_reent+0xac>
 80090e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090e8:	6819      	ldr	r1, [r3, #0]
 80090ea:	b111      	cbz	r1, 80090f2 <_reclaim_reent+0x22>
 80090ec:	4620      	mov	r0, r4
 80090ee:	f000 f857 	bl	80091a0 <_free_r>
 80090f2:	6961      	ldr	r1, [r4, #20]
 80090f4:	b111      	cbz	r1, 80090fc <_reclaim_reent+0x2c>
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f852 	bl	80091a0 <_free_r>
 80090fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80090fe:	b111      	cbz	r1, 8009106 <_reclaim_reent+0x36>
 8009100:	4620      	mov	r0, r4
 8009102:	f000 f84d 	bl	80091a0 <_free_r>
 8009106:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009108:	b111      	cbz	r1, 8009110 <_reclaim_reent+0x40>
 800910a:	4620      	mov	r0, r4
 800910c:	f000 f848 	bl	80091a0 <_free_r>
 8009110:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009112:	b111      	cbz	r1, 800911a <_reclaim_reent+0x4a>
 8009114:	4620      	mov	r0, r4
 8009116:	f000 f843 	bl	80091a0 <_free_r>
 800911a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800911c:	b111      	cbz	r1, 8009124 <_reclaim_reent+0x54>
 800911e:	4620      	mov	r0, r4
 8009120:	f000 f83e 	bl	80091a0 <_free_r>
 8009124:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009126:	b111      	cbz	r1, 800912e <_reclaim_reent+0x5e>
 8009128:	4620      	mov	r0, r4
 800912a:	f000 f839 	bl	80091a0 <_free_r>
 800912e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009130:	b111      	cbz	r1, 8009138 <_reclaim_reent+0x68>
 8009132:	4620      	mov	r0, r4
 8009134:	f000 f834 	bl	80091a0 <_free_r>
 8009138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800913a:	b111      	cbz	r1, 8009142 <_reclaim_reent+0x72>
 800913c:	4620      	mov	r0, r4
 800913e:	f000 f82f 	bl	80091a0 <_free_r>
 8009142:	69a3      	ldr	r3, [r4, #24]
 8009144:	b1e3      	cbz	r3, 8009180 <_reclaim_reent+0xb0>
 8009146:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009148:	4620      	mov	r0, r4
 800914a:	4798      	blx	r3
 800914c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800914e:	b1b9      	cbz	r1, 8009180 <_reclaim_reent+0xb0>
 8009150:	4620      	mov	r0, r4
 8009152:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009156:	f7ff bfad 	b.w	80090b4 <cleanup_glue>
 800915a:	5949      	ldr	r1, [r1, r5]
 800915c:	b941      	cbnz	r1, 8009170 <_reclaim_reent+0xa0>
 800915e:	3504      	adds	r5, #4
 8009160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009162:	2d80      	cmp	r5, #128	; 0x80
 8009164:	68d9      	ldr	r1, [r3, #12]
 8009166:	d1f8      	bne.n	800915a <_reclaim_reent+0x8a>
 8009168:	4620      	mov	r0, r4
 800916a:	f000 f819 	bl	80091a0 <_free_r>
 800916e:	e7ba      	b.n	80090e6 <_reclaim_reent+0x16>
 8009170:	680e      	ldr	r6, [r1, #0]
 8009172:	4620      	mov	r0, r4
 8009174:	f000 f814 	bl	80091a0 <_free_r>
 8009178:	4631      	mov	r1, r6
 800917a:	e7ef      	b.n	800915c <_reclaim_reent+0x8c>
 800917c:	2500      	movs	r5, #0
 800917e:	e7ef      	b.n	8009160 <_reclaim_reent+0x90>
 8009180:	bd70      	pop	{r4, r5, r6, pc}
 8009182:	bf00      	nop
 8009184:	20000010 	.word	0x20000010

08009188 <__malloc_lock>:
 8009188:	4801      	ldr	r0, [pc, #4]	; (8009190 <__malloc_lock+0x8>)
 800918a:	f7ff bf7b 	b.w	8009084 <__retarget_lock_acquire_recursive>
 800918e:	bf00      	nop
 8009190:	20005e94 	.word	0x20005e94

08009194 <__malloc_unlock>:
 8009194:	4801      	ldr	r0, [pc, #4]	; (800919c <__malloc_unlock+0x8>)
 8009196:	f7ff bf76 	b.w	8009086 <__retarget_lock_release_recursive>
 800919a:	bf00      	nop
 800919c:	20005e94 	.word	0x20005e94

080091a0 <_free_r>:
 80091a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091a2:	2900      	cmp	r1, #0
 80091a4:	d044      	beq.n	8009230 <_free_r+0x90>
 80091a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091aa:	9001      	str	r0, [sp, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f1a1 0404 	sub.w	r4, r1, #4
 80091b2:	bfb8      	it	lt
 80091b4:	18e4      	addlt	r4, r4, r3
 80091b6:	f7ff ffe7 	bl	8009188 <__malloc_lock>
 80091ba:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <_free_r+0x94>)
 80091bc:	9801      	ldr	r0, [sp, #4]
 80091be:	6813      	ldr	r3, [r2, #0]
 80091c0:	b933      	cbnz	r3, 80091d0 <_free_r+0x30>
 80091c2:	6063      	str	r3, [r4, #4]
 80091c4:	6014      	str	r4, [r2, #0]
 80091c6:	b003      	add	sp, #12
 80091c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091cc:	f7ff bfe2 	b.w	8009194 <__malloc_unlock>
 80091d0:	42a3      	cmp	r3, r4
 80091d2:	d908      	bls.n	80091e6 <_free_r+0x46>
 80091d4:	6825      	ldr	r5, [r4, #0]
 80091d6:	1961      	adds	r1, r4, r5
 80091d8:	428b      	cmp	r3, r1
 80091da:	bf01      	itttt	eq
 80091dc:	6819      	ldreq	r1, [r3, #0]
 80091de:	685b      	ldreq	r3, [r3, #4]
 80091e0:	1949      	addeq	r1, r1, r5
 80091e2:	6021      	streq	r1, [r4, #0]
 80091e4:	e7ed      	b.n	80091c2 <_free_r+0x22>
 80091e6:	461a      	mov	r2, r3
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	b10b      	cbz	r3, 80091f0 <_free_r+0x50>
 80091ec:	42a3      	cmp	r3, r4
 80091ee:	d9fa      	bls.n	80091e6 <_free_r+0x46>
 80091f0:	6811      	ldr	r1, [r2, #0]
 80091f2:	1855      	adds	r5, r2, r1
 80091f4:	42a5      	cmp	r5, r4
 80091f6:	d10b      	bne.n	8009210 <_free_r+0x70>
 80091f8:	6824      	ldr	r4, [r4, #0]
 80091fa:	4421      	add	r1, r4
 80091fc:	1854      	adds	r4, r2, r1
 80091fe:	42a3      	cmp	r3, r4
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	d1e0      	bne.n	80091c6 <_free_r+0x26>
 8009204:	681c      	ldr	r4, [r3, #0]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	6053      	str	r3, [r2, #4]
 800920a:	4421      	add	r1, r4
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	e7da      	b.n	80091c6 <_free_r+0x26>
 8009210:	d902      	bls.n	8009218 <_free_r+0x78>
 8009212:	230c      	movs	r3, #12
 8009214:	6003      	str	r3, [r0, #0]
 8009216:	e7d6      	b.n	80091c6 <_free_r+0x26>
 8009218:	6825      	ldr	r5, [r4, #0]
 800921a:	1961      	adds	r1, r4, r5
 800921c:	428b      	cmp	r3, r1
 800921e:	bf04      	itt	eq
 8009220:	6819      	ldreq	r1, [r3, #0]
 8009222:	685b      	ldreq	r3, [r3, #4]
 8009224:	6063      	str	r3, [r4, #4]
 8009226:	bf04      	itt	eq
 8009228:	1949      	addeq	r1, r1, r5
 800922a:	6021      	streq	r1, [r4, #0]
 800922c:	6054      	str	r4, [r2, #4]
 800922e:	e7ca      	b.n	80091c6 <_free_r+0x26>
 8009230:	b003      	add	sp, #12
 8009232:	bd30      	pop	{r4, r5, pc}
 8009234:	20005e98 	.word	0x20005e98

08009238 <_init>:
 8009238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800923a:	bf00      	nop
 800923c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800923e:	bc08      	pop	{r3}
 8009240:	469e      	mov	lr, r3
 8009242:	4770      	bx	lr

08009244 <_fini>:
 8009244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009246:	bf00      	nop
 8009248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800924a:	bc08      	pop	{r3}
 800924c:	469e      	mov	lr, r3
 800924e:	4770      	bx	lr
